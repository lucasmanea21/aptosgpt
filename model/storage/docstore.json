{"docstore/metadata": {"1520839c-39c6-4606-9374-c85298f07d84": {"doc_hash": "4113e35b85d3c273c3b4124ac0ee1ec7ccecf39ece7374369c08a52ea7274a51"}, "c620ee1e-fdc3-4aa3-94e3-f1587528637e": {"doc_hash": "65521b1fc81a5ce6f97a8bf0cdd5e2d193ae8f39b91f0bfa5f71f272da73032c"}, "02afa3e4-b312-497a-bb70-d5522a5ac7c3": {"doc_hash": "339044e7e6f2fc97976d425b452e1cede7321f543375ade7dc9c353094149759"}, "d7fb17a1-fcc9-472a-9602-01fa4c10391e": {"doc_hash": "6a14babbf35e7dfff92762daaf61adfb49900476dd1a316e84afbaaf7cd0e086"}, "3d52337a-3302-407c-a581-19b7605e4fc4": {"doc_hash": "d425feb39c736249dc992cbf1c02bb2d6038188ed5451e711656f2dda743c989"}, "7b7ace7e-79ea-4921-b878-96b3786f4d87": {"doc_hash": "1f57d5808f1f4fdf656e991327da57f3ea30f03ccf79d6b703ad1867b5868aa4"}, "fc905d70-937f-40ff-841e-29863618b4c3": {"doc_hash": "3a55fc7d6f3e9307ceddae1e0e8805685d6ac28ef20c3dc9895395c348de000d"}, "c7ca15ff-0101-4c1a-a907-cb3ab559ea80": {"doc_hash": "74360c9bd9ff9f5adf9fa00b41ebef7cbd1362527e5c3c41206b71453c8a0e47"}, "2867605b-1d27-4763-be0c-87296155048c": {"doc_hash": "c3cf7d1dfc2f93e8694abea9d1d9176c1fcb57a0ec5e4010f5c9e805251be820"}, "e6597174-9728-495a-b3d4-3816822ec4ee": {"doc_hash": "803f23b065cef98c8db1d1a30438f82398af61543cc29b79977822480e2e05f2"}, "34b1a7ec-c755-43dd-8f4d-a04633757216": {"doc_hash": "aca33be37187bbf43e26de1f066e2fc9357ea03b3b8dec361567cd71e5489d0e"}, "38d218d5-3bd3-47e2-a03b-556729d42419": {"doc_hash": "8dece0ae06355bc5b6cc37d59948af2c1f3b9e2f96d5e2e9b9418315d4103b06"}, "7a037782-4e87-4084-b156-f352b0bd0e7e": {"doc_hash": "641c547b3bc6adc77e0c19c447559537cd6a23a7c2acaca6702cffa02dfd7305"}, "c0744271-6b6e-4eee-9915-9c457e109d4b": {"doc_hash": "c4933a6e715877ff48d5d047a29ac30c9786e4d84b89537580168ccf5f1ee9be"}, "852ea680-098d-40d4-b489-7e2c705c32fa": {"doc_hash": "0b53ad44760e1217915d62bab427d83d73277d28c9bff0ee5f1d3157adefd7f5"}, "616ff216-04a1-45f7-9302-bcc4a19410b3": {"doc_hash": "01a61715b22ade3400434d11b90aac8e4d8428d403f472bb706ca21660ba32d6"}, "bc802574-270a-43db-822e-82d22157fcce": {"doc_hash": "abe979b7bb74fe4c81bde4d83cc860f356a67edf01086a991189574a1850a641"}, "2ccb1719-8203-4770-ba8a-13dd6d357f9f": {"doc_hash": "7d98d57d8ee92eb1d9aaa0b234261588d7fd942890573c8eb3382071fe5d33c2"}, "c80a44ff-692b-402c-a86c-adca9eca169c": {"doc_hash": "aa341c35fdd9bd99e47a99cc70ca21d8a4e804cde5c3f9af9479c1ea8a55073c"}, "fa7129c9-b9b8-4c19-8933-89496232481e": {"doc_hash": "7bf33a1038d75f71e1c06e05f7ab17194bfc039f1f645c1a434d1ca9059e3d6a"}, "ad7614c5-43d0-433d-ab59-ad929c72e48d": {"doc_hash": "58b45baf6059075f2655a9de6df6bfad71b1415db3fd54b73259cfce521e1a71"}, "3d68960d-0f3e-43fc-9a89-0990de81e123": {"doc_hash": "5fc431075aefb86b64151d39d6a70e9de62586688a386abe21b6611a1c07f978"}, "127239ca-bb93-43f0-a835-e3f7acc14d03": {"doc_hash": "6e99cea5d6df444b6bf3ff3825d5dd731c10c7f243898b4a178b3b4acdc2c2a9"}, "eadb8659-0ccd-4f68-b08e-ede2cd89269f": {"doc_hash": "16b8f7648447afb4952a7ae0455e7f468ebe83462e38c31078d2f41fc7e7052a"}, "42d78ba7-1a94-4b69-a217-844868fca407": {"doc_hash": "d107738f4cdd7e2764fd6f97054519a56feeb84b4f3bd050ac02b4bf93d46663"}, "a06ce028-8075-43be-a84e-ae5847f35efc": {"doc_hash": "d6e34c477c03d2f0e7e2114c5b059d8cdb52a576afb787b0b8b39a0378db9602"}, "6759507f-de90-4879-a266-d2a74d7f4120": {"doc_hash": "63faf3581da8f566248491a8fab16c0e55313a820f0089ef01d8439797462d65"}, "bb5ca9b3-4884-427f-86a0-6b1604dc1ac1": {"doc_hash": "b9032ec61ba0f0a1a51ac533467f89af574cac396ceaafee1deedd33aab5b3e1"}, "169621a5-afd6-4fcf-9f20-6a261fe91a8e": {"doc_hash": "64b17015cae21bfe5f18d74a4d1f89dc4219fb7825795592b0005382928ccb54"}, "c84e89d2-1666-413d-8ba2-01d029871434": {"doc_hash": "9e5a570c7beb9aa50ffa7ba85b0145fe2672425f39b502f8cf7272081df28c79"}, "15a569d1-0086-472a-bdc1-00c7bc5ffb8a": {"doc_hash": "ff29726f02a3c08ca97081c92680ec53c0235c7c160e3d5f31000ff3b234e59d"}, "71993c31-065d-432f-9d2c-9217c5da13da": {"doc_hash": "521949a5a771340ce24782c8549af485642a9871a0bf00059f8a2e7432fb6279"}, "c0aa0062-8c4a-4d38-b09b-8773dbb9f14a": {"doc_hash": "7b57489ff8ea4051e04e8ab79f91fdc5e5c62dadda66fe1688dd82cf520695bd"}, "2b7ad00b-c21c-460c-913b-18a72b3b1757": {"doc_hash": "7cbc518d0ecfb5822df54ac0b0aa11dc7ab74d27474d1a2e5f3845258d53a865"}, "48522e48-0ac6-440f-9ce9-ada4b1cfc603": {"doc_hash": "77b30e8e6441f7cc5c01c6531216a8e39f78f33033afeab2a3642252f515cdf4"}, "972e2322-4782-4eb4-a2b2-24e415edbe53": {"doc_hash": "50663b8fe2bbafc00ef21aee5ca75d71f09a2b8443fdfef73558c89effda8749"}, "7bb67514-d18c-4ee8-95c3-d6241fdc23d5": {"doc_hash": "5f0372f08f08d14047612e1f1f10a742929e29c91ba80ca77d6587b3838c076d"}, "fc87315e-111c-49a6-aea1-d906443f0c9a": {"doc_hash": "70bee72c612bf8e111eb91c0b8e6114251e4cc7990fc9869dc255d36a01221e6"}, "4dbe88b8-5415-4ed5-9dfe-3ced5bbb3ab6": {"doc_hash": "56d517acbf07484e3833db366b3dd1ab8aabeca99e5c1edaa0d14e0b500826ec"}, "1b87fece-b1b5-4b1e-8558-98ffa1d0f476": {"doc_hash": "e5d97d5c2f55551b9531b0b47ab28730c1b69afa42e96092651b9e14ae0f30d2"}, "f831ea3d-9558-42b4-b53c-686901ecc8c7": {"doc_hash": "3621154c1b7638bfd733ca168a052a136f79f1adbd2a839b220efeaad1a3aba9"}, "78d90413-a3e7-4b1f-a049-bb717a56bf23": {"doc_hash": "5f83483c164ca3b87a713fcfc8b7812fd7565c15f0289fbd05db67f0db923375"}, "16c41b01-544a-4a87-b5e0-8270585aa7d2": {"doc_hash": "bda43d27d3c5ee549c94cee115c3cc9aad843a7b80a625787f80aed07a45645e"}, "e9827f02-ee2a-417a-83c0-99eeec2abd1f": {"doc_hash": "50394cbc487956b75e84874facc07ca207aba48688f632b71e68a73020d68601"}, "bc797cf0-0a9d-4a2a-afa2-be40ef1f34a9": {"doc_hash": "cb74712d1228422871dbe2f6935a69dbbff87e9e319bc17a49b7ba9a2fc4fab0"}, "5d8f268f-3d2e-4da4-a63b-2b102ab57a65": {"doc_hash": "bd6b2f0ea1e241485bef6d912b049c84b3d9417076da12e86e0938aeab02c0ef"}, "16c70f3f-9048-4398-bd57-080878d6b14e": {"doc_hash": "db40494b48be3cc89e0a33ea9676b34960da8128deb2f405178b2227695e224d"}, "99474d3e-4c2f-41da-8971-95815d7cc847": {"doc_hash": "673a6de13a37c194ce94f79b52ea80137e3a9886cbebd3aea83d9600455a8408"}, "4dc290df-e91b-483e-8886-53eb1e39cdcc": {"doc_hash": "27b4ad389374aac72c369e40b5eac797a86f12896f0c299992c09776ca4a30c8"}, "b56fc14b-bf76-4dcb-97c8-7f68e13f6a19": {"doc_hash": "f8b64353472649795acb7644580bd011e950de0298670400b0b9986713d591aa"}, "6abbc342-b6fd-493f-a448-ee6643ea6d46": {"doc_hash": "5ed8c943203eefefedfe83038f3b9d5d08f5dc269c91ec76612fcf64d36c5e24"}, "6a0ad71d-74c8-4615-ab1e-c991ddf7fcd6": {"doc_hash": "227a0fd567893c29b7cf19a7f87cf0c7c95d4c8164ee204bbe3d1c3689089db1"}, "aea2a5f4-3ef7-4350-b5a6-773655c459c1": {"doc_hash": "7f1c94e89292b46ace12281860df42e7ecca49f0e41b5df37b1d2bb969c0fe69"}, "ca498721-dbc3-4b95-92a2-57b45eb12cd2": {"doc_hash": "683cdcd19929d7822ced1feaa969a0422a52958bd9bea2aff8064dda8f98fcaf"}, "47ec0cf2-b9d5-461b-bea3-b6b2f9ec1f92": {"doc_hash": "efbc5ecaecfa0f894f55d13055f2c17babb73b905d075b50d0e514ac3e7ed81c"}, "a12e6d2d-8d38-42c9-9146-77685bd8c8eb": {"doc_hash": "08ea14c52fd67f38ca513701a9d4145e672b94d68f5860e023063c7b290a2f64"}, "6e102e31-b24c-4557-a46e-af2087419c8d": {"doc_hash": "8e552442a6ed1c04cfd0b99ded849211acc955abd81b006e9324471ddaf2f40c"}, "074dc6b8-d518-4198-862f-6700ab846e76": {"doc_hash": "c99fc0478ce84c21b8c5ef7cbe742ded2389b2aa61b697152a96828ae8721981"}, "8a87c489-d355-4fd0-9590-a87dc827b308": {"doc_hash": "e703aea9f2e8ee01fe865b1f13048b33502513375f7e07d998950cefc603ee77"}, "d6730067-f0d8-48a5-8645-7c3fb76580a6": {"doc_hash": "6b42295ab95b770d385bd8bfb38127d85f250f92955cd7b746498db871c3f60c"}, "982d037b-8336-499e-80ee-479990351182": {"doc_hash": "18bc0d94783009454c17735704579486261d249ea023c11b0ad16fbf8f355eb4"}, "df8a357d-ce98-41d3-b845-626634805c64": {"doc_hash": "394ce923bcbe06a020297e353e4323c8f7ce3a8220624534d62358aab15a445e"}, "c2363f73-4099-4a2d-96e8-3b0f840267fb": {"doc_hash": "34a232d668c17722563638a9a1482d4f2775223f447fae72015ff3e6a802e164"}, "94a74655-b6bc-4ec0-93af-d85a2cfc4dd1": {"doc_hash": "bd162067e92d17a2d41a712263342212b2442ce10d5f571ef916fc87fe9170f4"}, "e2164619-e248-41e9-a9fa-65f78be79521": {"doc_hash": "c12aa4e2b3824846adb51373046955771fb96e6ec255dd286eed72e12a9af9e2"}, "5fdd3446-ea35-47bf-b266-689389375fed": {"doc_hash": "2f1980d833b398e7f7483137e85ce86afa9e066f747986233ff0fefc54a5a8eb"}, "b77d12ca-f1e7-4a9e-a82e-de322ea5c482": {"doc_hash": "a1b291f2ac874cdd2c3fa9b8d0ad504d2ed6cfb68dd7fb1c8562efa82c010bad"}, "2eca615b-bd56-41c7-9e50-67b350bd68f0": {"doc_hash": "0d480e68884aea6263dc86b8f2dede2a0ef5e55e1c6a0f676abea20d119d9260"}, "1c11c3be-df1f-4dd3-93af-94c49aac4d9a": {"doc_hash": "4683eae784caaa6572f23d2ccbd267b6469907c567881dd7a7bb40e83f251289"}, "d8cbd086-abfa-4833-af4e-85261e474969": {"doc_hash": "a074be2c1823a87c6565738ddfaf541ff451941fc60bdf5edbf3867cef1ea7ed"}, "143da180-8f56-4001-873c-aa822b6df721": {"doc_hash": "ceaafe9ba80c64dcf0757d6207c1e7eaf3a92c14dde0bc9ba3852ad03d405e9c"}, "cd7a6bdf-b758-4eb2-ab2d-bc2e75d27bb1": {"doc_hash": "a9601fa0de591988b34ad4d9bd28774d2651d9e282fa76e4617a849f1a14eab4"}, "f3043cae-38f6-4ca5-9ee4-04bff38b0f59": {"doc_hash": "2829030f37bd71987b0a541ec9294f2c0835bd508c610628cef59bef4a0e8246"}, "4c7cbde9-3a96-48f0-b793-24ad309aae6d": {"doc_hash": "60bd3b26397c2aa4c6c143b8c93c929c894933c535fb9a2b10e51b5027795b12"}, "e778b77b-1d64-409d-92c4-e12eab16249e": {"doc_hash": "1cab07b3f84ab07b2705abbe85d4b3c575f451f35b4b1f0ece7c49f889b8849f"}, "cb8e1227-91f5-42d8-be1e-eb5206bf63e6": {"doc_hash": "a44721e696bbab6406b5cf60cf22d416b1fa3c9a3a2a83cb18d8c808bfecf9a5"}, "0db51218-efd5-4721-a94c-80012873040e": {"doc_hash": "319522891bbfdc842c97b54c270a00f8b811882da60b2e5e700ce744243553f7"}, "915214af-22ba-4b5a-93cf-b22c6fff174a": {"doc_hash": "ec74d6eb322f29327f777912e7ddf7d82576084221d644c8b804a454a95e0cd1"}, "60ff1628-1648-45d4-be36-305c633525bc": {"doc_hash": "213667a41b223ade52750b46ec6018e9559072c050f35dfe9dd090ffce4e5b1f"}, "aa89e85d-8568-4848-a27e-cfd9332e8540": {"doc_hash": "f55c5a0182fd02d203be62bc98e33709b21989a1385ca06da114071edd31a9cb"}, "c45899ae-fcf9-47f0-805b-14e22ce238da": {"doc_hash": "478458e59c872b973f8bcbe725dc2f6664d184e83dbec331b57d73b8a6cb1873"}, "9d24696c-f5c0-4ee3-af7d-d939184c52d5": {"doc_hash": "75fe8e0b1c4b7b037a9556632aa4616060d711aca5f5f8b79f7b2dc07c9e43c0"}, "791c4164-2c00-4a8b-b551-29f35937a60b": {"doc_hash": "b9699f9b6ddd4578ca78de19fb1693afee838822bf7f1227c68d8807dbe99980"}, "8b4151a6-a91b-446e-85f8-a1bdfe0fda5e": {"doc_hash": "75ce03cd4ff1c9ff54a6dd3e82c89f52d0de22670f5b8c0aeb0ec03327a37aa1"}, "46ff51c5-57d1-44e1-a847-ac2896405454": {"doc_hash": "630e91af04e2ce1fe02f3c4c71936761e575511c070efbb42960ec9b64d385b2"}, "ec15ed41-bd22-44d3-a967-1dd29e6ee0e5": {"doc_hash": "262e67a076cf899411520c6ed4ef765f1fa836ca924f581f975eed6a332961aa"}, "ce69f219-7c3e-4016-9a66-b59697f8bf6a": {"doc_hash": "bf429c8f6d5065afd0b20cb23acaacd4b59f92a75c7288a8f6fd24d9b2b678c3"}, "6a5f5c7f-cfe5-46eb-9fed-eb66533e3e9b": {"doc_hash": "93320bead3baa43132965b68ebf3adaeaad9c2c017226f848570e339085db29d"}, "c0161f82-09b2-4c03-9d14-72e032de3e8b": {"doc_hash": "0f6b28d1c034646c3443061df2b446d81d0f2f8864e06c674f6d8ef5ac06745c"}, "1d64d596-a2a1-4e17-abca-4cccf2c335d3": {"doc_hash": "67b37cea8c129ddb008ea9d2637a0ca2afbc60536aceff16d3231f06a64d9818"}, "e49cd0fb-6d4a-4540-9c1f-36f38636079f": {"doc_hash": "418282e13610c764594727df745c4240e30db60f02c11302bf708f955bfebf3f"}, "a937eb7e-c6ef-46b5-98d0-7067879a157c": {"doc_hash": "de5e9c885c54cd5c1b7aadc76ad067dfffe0189476bb51edd628306f26077d6d"}, "8894a1d6-7e1f-437d-9f89-d42648400a64": {"doc_hash": "c0126c3a2b5bb2473517cad1c7785815e2bed1f0e99d50c55b28073b914faf96"}, "25fe72cd-2b18-4c74-9af8-e44db8c3c117": {"doc_hash": "0b8ae324b3901b5a67a3f91a3d49f70b58ad5bb0ff6940ade118917daf92a23b"}, "f973fbf2-9044-4e55-ae3f-1b6b49d1f7f8": {"doc_hash": "e47bf09680d9f07679b3342f2acbaec5d4fc6d8881f60762ea94b5ce7c60ca3a"}, "1f57575c-cca8-466c-93de-8c6c24409656": {"doc_hash": "0e27fd64781be3fc0a3c8608332f731542a277b63bba6d5b8079aecab56eee0d"}, "48176a9f-be9f-4c2e-bda2-c62f3cc8fb76": {"doc_hash": "2d2f83f192ee470d996a6b24ec158dc33140a18e8898491fb3cdf5310976b3a9"}, "2ad8bd47-dfb8-4743-b9d9-48e7cbb50dec": {"doc_hash": "d289cae36f75265bbc886887c317ab971f3492e895bbe76882d5af69a61b7de5"}, "334efaae-9363-4e9e-914d-d4626e4c6ebb": {"doc_hash": "6582cccc9ca1d78f851e94521a13022bd9aa4d3a0a3bc4f672119c1c9df76763"}, "6d991e6f-9ec8-4e21-8746-5fb68288b04c": {"doc_hash": "e65f706298c8fd72cd0425666c8ffb82da1dd94d465f9d6a75e1a2cac603683b"}, "edbaf2b5-1201-4996-b9de-3522e2567006": {"doc_hash": "75e9ecf63573f497096c725f0529e7faf42e94cc396894cc3b6133ded4bfbd1f"}, "87b743ce-cf39-43b2-a7e8-940b5a027300": {"doc_hash": "9f896b2f73db9a6d4f74d1be1740de2917fa857753bc9564b20f7b2794ad38af"}, "2e04bd15-4cdb-46b0-90a5-9d13ee32fe73": {"doc_hash": "a24e0ebd50dd426c114fdd32e4156522cfa44d92f6053dc4ffec7f582487d193"}, "f0054e68-0b29-4f1b-960b-7a6a40e683b4": {"doc_hash": "b8f53083bb72872d509d8534da0b183ed4733f7fb119312371ab07c437638883"}, "2b7b65f6-e522-4990-a42f-85ce5351cb27": {"doc_hash": "9f9d04a8f683cc1acf12a4eca7840dc246e4f694317582baeea89561f5ffbb41"}, "480c4c50-01de-47c1-8976-b5499d5727ee": {"doc_hash": "f33094be3a27cc4c6e6df7f605f9e4c3288e8deff80d0762cbe1f8a9b7e736b8"}, "f74b6d1d-2f4b-4dbe-926a-df80adc0c30d": {"doc_hash": "8407a4d0a9e09f69102f9b4934f5fddbdb2f47940d5c6e943d7d8c56f202ffa5"}, "c0d31a33-b34e-41a2-8c2b-dc2ceb8588d3": {"doc_hash": "bfbd7eadd211b3464e1d026af651facd2962eb47e754999aa1a8cfdc4b8afa98"}, "660fef90-a5d6-47e1-8c2d-e6d626375228": {"doc_hash": "6c0b19122d8583e4ec64765c99aea1ab698f686edf14a33fe2f00cae67f66f42"}, "e9507ee7-c46c-47c7-9bc8-dd1f6990dd02": {"doc_hash": "979240d9177b65c32b42fd13601e7d3ef45b24aae4051ca6bdbc22003b33f5b5"}, "3befa9a3-4162-49db-831f-bb041d738bf4": {"doc_hash": "ece8d6ad85c10e0eb0fc02b26e31c19edeec52e4db9c175b70f435a064ad1eb9"}, "89d6e540-9406-485b-b05d-5e4e70f73459": {"doc_hash": "6bf756cb1d0939e0179f8580748bfc1686bea59aa5e9f18730d19b05da930b4e"}, "0e9b29f6-0cee-4649-8cf6-228a644c6dbb": {"doc_hash": "d317bd8c4ab5e0b3c6911d32257271540db7ef61f6be75d6fa027a07edafca90"}, "fac6f5af-4365-44ae-b719-3e5ae6e78f2e": {"doc_hash": "65b63a25336ac46d22249b0371fbd0bab7374b83edead202fdb28a75b82147b3"}, "cc02173f-aa3f-4345-a477-dd38f0185ab2": {"doc_hash": "880fde48531931cf6e7b9b5d6f9c32ca2fbdd45c196219d2196b322e6b203cea"}, "e8f2ce55-2328-4ab0-9130-ff7b98722d45": {"doc_hash": "fae164d78a276ee91083b9773df5fc9babee1e868389f1e78ca39509192876f3"}, "8c040cb0-0710-48a2-97ae-a417bd913d89": {"doc_hash": "7d80e745b1c54a7975035756676273d211830a27919998953cc01f6f0bddbcf4"}, "a0165a7c-cf46-4f17-a0e1-12fa39b78104": {"doc_hash": "6964b37304cd6ff087779ea06c702c25ee186dc7bf6957b73fcd15cb41f19766"}, "9ddbb61e-a411-4a8f-8781-8b2ff7884fe6": {"doc_hash": "ae84348911ca88a8f25a7e031137834e49d4e08a32e8ab0c84edb2eb29bb783e"}, "7327a7e5-c961-4af7-b8a4-4fcfbf6ad829": {"doc_hash": "ccd229d6240a7462d1858b4eaedd3c4d5d655200b5ceaa2c662406b87d85ae05"}, "cbbfc76b-afc7-4aeb-bd00-f31c4ee55c19": {"doc_hash": "6dffff358845a83df9a07fe6fae7661b830b87afcf27c1a700b3237761f2af2c"}, "2b6a8d17-e2b3-46d9-882d-6785df726956": {"doc_hash": "da8b4959d00bd0baf2393fe7673fc691544143b8167187d085a5d5199a5e38d0"}, "c2836ab8-82ba-42df-a0e3-1f96e1835ab1": {"doc_hash": "bb383499a1a396f4de63c415194da35a5f844a91af5f6a50787ba20e88b5de5b"}, "8b0f27cc-d560-43c2-b10b-0d96526e2775": {"doc_hash": "2e87103d3699e3777e583e097ab243c46cf53b9fcab6c8fea6086366260ba8fe"}, "e33be43f-fdd9-42b5-995e-69d8b96d1eb3": {"doc_hash": "7a42fe55c28ceea7125a05c63e65abe7ef26fe7adf0efe1fa79065a4975c25cf"}, "c3295986-18be-4111-ada4-6bb2ad802981": {"doc_hash": "07744089c874796b966552070833b35dc3f1e1b5e32a2d022ee6bd4001c03fe8"}, "1e963e75-85fb-480e-b55a-4e886d4c3957": {"doc_hash": "551968bfb0532a8dc7dfaa38e2db371a15c3f1de83a9fadd6a1484ee409b1464"}, "525e365a-d540-4232-9e3a-7c5e101f45ee": {"doc_hash": "cf22ee8b38741bb7f74bc23d534d58c66d67305d9a27cf7515824cb12a0d1dc5"}, "27e58da6-334f-4b03-910e-7af9f3965d60": {"doc_hash": "7c0cd4f3be2d1161a76bfa1b38c13f3dcf935fab7c6954d3804c70ade2b926c8"}, "2abeee9f-fd82-487f-97cf-7c6032be04b4": {"doc_hash": "73f08855b166659a38c60d8c237f63eab03bb1967c5f9abcdcf665189dbbe130"}, "af0f35e2-f78a-47a6-a58e-7d851bd35cdc": {"doc_hash": "ca97d8373460350eb7163325505c5750af8ba3e8e1a4fbc3cb55bdc17d559c1b"}, "b1acbcd0-8366-4a23-95bf-536b71626ba9": {"doc_hash": "80becc0590e5afc66bc3c1397a1a2a1d2f9a0e37d5b7b3b6bffcdbb6f9513d4e"}, "ab059d8c-b34e-4b71-9c3e-40248d1d66c6": {"doc_hash": "6f68c477808706b294fbbb29e6e9285443ad2c42b6ef137ac3123591d8b8ec7e"}, "2e19d76e-c578-4a7c-af63-162a9180d567": {"doc_hash": "ea79e97029136d87ff74a224c179e1b8452163866eb7d07c49cefca656841a50"}, "bf67c4bc-99f4-44e7-8483-9fa0335fd078": {"doc_hash": "5404357b3969964c7a06f9ab02ac383899eac3ab56463c910983976dbf0c2a37"}, "019a6994-3a13-4dca-926e-fe8bbf87282e": {"doc_hash": "4ae838c8059f90574af7a43c2dd80737f009846597f4ae9e88f1c683a78a1784"}, "e6f32e24-2597-409d-9317-7bebed40e495": {"doc_hash": "402f6e2e718f0c7b066e018082d93764a6fd1a58e142fe9f8a8146ef5e9bbf7f"}, "5a1ebc21-d77f-4d58-b6ac-3c3b9fee89d7": {"doc_hash": "23cb62079dd4487373a74b739ba10896f6f2b4f079f572472ed8c01b23fd3d2b"}, "7bc21c50-0754-471a-ad86-434d5a2bd58d": {"doc_hash": "787b7b813e176d3af9dcb06441c1408cf4cbfc66288a2d9c4ae0818c906b2429"}, "92f89d70-1049-465a-b918-24d4b82c8255": {"doc_hash": "18b7cb2804ac73c14659e992d31a8bcb22c05aa76a798d02fee9f99962cf76cf"}, "2af9cf63-18ee-4378-bf28-ca38b05aeed5": {"doc_hash": "bb91449f274983e0834be312b15844155db47d076c44a8d69319cd50a9ea553a"}, "f5cf5591-567a-4231-b384-22d7fc4f09bc": {"doc_hash": "f32956b43d345e4d7fa2c0b8107b166a056a42a548590576ab7ca6ebfab52a7b"}, "e5045bf5-591d-425b-adc1-4d69fa4675e2": {"doc_hash": "a3a26880a808ca2a0395e097851e107b104df00fb1d775cdd23eeb9d377690f9"}, "3b3852e2-127f-47c5-90fc-585a9859c0d3": {"doc_hash": "e9cfb6cbe82cd182337c395bda5af4d0d1233dc317388aa522adac53bb8d641b"}, "ecb07da7-2655-4d33-bd9b-f77e05d05d44": {"doc_hash": "8f426c2263c60d23f2058feba0a2c7841591b786e93154e3193bf53f916b1902"}, "0749b119-995e-48ae-bb69-fe09f09a9850": {"doc_hash": "430cf5437529610e5fa6794806595959e2981456db6984626d9b7c246ac285a0"}, "d1806af9-bfb9-4d8d-acf4-5d4246216d6d": {"doc_hash": "5512044132f00f1406f9f77dc6bc61468f4f830fa02a5650245043cb4c74a081"}, "a9eb8193-9069-4b90-a2d5-d447a2dc961e": {"doc_hash": "01650dfb41d9b3e0e977204b809816fe48225c4292d3e1da6ca9865cecb3b955"}, "02eb04c9-a672-415f-bc5c-c5e935a50e3c": {"doc_hash": "b964ad4a67ca355f1ad75aba0a175b1d1f41ece730513c0c33f850eabcad5f76"}, "cbad586d-0a93-4906-ab69-4cb6bf4aa99a": {"doc_hash": "211225e2a296ba5ca178b41026070453aee3387ef53cc77c8c489bae47cfc3ff"}, "c83121a1-c44f-43bd-824c-94c26f6c8c1d": {"doc_hash": "b9e2624e5147d181972da023b6473a06df70a2e1753cd246a3582ba6b670e2bf"}, "b6a0e7b1-764d-4d32-99c5-24f5c5b8d10f": {"doc_hash": "7f9933a6c7ed5db353af5ba6dbaf852e411931022912826029e17426ca056b19"}, "80b37a02-ff7d-43dd-b8f2-d3829ae02fa1": {"doc_hash": "ae449f18f810b3c5c707459b2b430d5bdaa830b0358f8a4a7752be4ae5a26767"}, "5234c9e3-9cbf-4951-ada4-5c1405dffa2b": {"doc_hash": "4000193c1016197fc17d4dfd6dc6b8504298bb9d81e0e15be3bab5ade0280a32"}, "1f0d5694-8e26-4de8-9db9-60e1993a68eb": {"doc_hash": "245c39e797c0e16b90c2b055510dd967f1d7d1aa77343a55614245372eaff9f6"}, "3bc63d9a-e8f3-40e4-b7a5-f5edc7364a22": {"doc_hash": "b8ed2f640a8ed59bbd8f127f69dadfe2e98d0061a6b323c27d8eb115b92a8ecd"}, "522a6bed-c8f3-4c5a-89bf-dd917a2c5e35": {"doc_hash": "4b7c3827e7fb32d84fc88b07e737552289ba763aaba19a007f23cdd278fc7a76"}, "18f49c3f-2db3-408a-a525-b8d57fa44643": {"doc_hash": "73912541fe1631bba6cb98e1595f02db1a9f3d1d91ffec3ec116a9794b5f035d"}, "25da778e-e907-47c2-9bfa-bcfa55b7ba9e": {"doc_hash": "d95cd0904d8aaa57ea7a90a95c4721927b5109e9ee4e30b13ab8ec75964531e8"}, "2d52fc64-e7b9-40a6-afb5-e83119374233": {"doc_hash": "a0039c7b34fa1d9e01bcddb4f2f4bb004cc08fcf8e15b3e091ad7fd561967839"}, "061cb74b-7640-4c77-9259-96388bbf537e": {"doc_hash": "edfd27a63ec39d71951cae9d28c103f2708e13d685969ec6e15d0caa42d437c2"}, "6699188b-eb96-450a-b050-011964163429": {"doc_hash": "fd9efea242fc5e6e3c3dc0229b22fc941f11531d1fb60d77f9c4a214df26190e"}, "5908dc10-f8a5-4543-99f9-b134434cf24f": {"doc_hash": "00314eb0e23e676c42ef50fabfd85c5c160f82f0593b6e2e16e7bd13d3ee50e0"}, "1ceed36b-12ab-45ca-b86d-80891d687c4d": {"doc_hash": "2c095a771831e57bddeecffcf527940626e5cdc217b9bec355a142ac065eb92f"}, "de7c6581-002a-4218-af66-7fe54b219450": {"doc_hash": "33e8840fffbdb38b7b75d665f077d5629a044f9b3c0e008d469e59b19eb17d79"}, "ff27052e-3693-411c-b33a-59ca82263b83": {"doc_hash": "c00ea8c241d0f1e4e83cf0b6db585c114c6fb51d081f9cb89ebbbf833a72a1a3"}, "4114f7e1-083d-49c0-ae4f-c466644ca45a": {"doc_hash": "1cc34b304e3c3edf0fcd633c520b5b62f8f8d616fd54893ca97a7d6dbacded19"}, "128e1942-554b-42f7-9af7-dc702c902eea": {"doc_hash": "031b0c88f0cf50c8da7c3614dbd5ff63f4bd1397e5175b437f10b9c5e787df42"}, "0b31f048-b4e4-4572-aa9a-a5d82641ffbf": {"doc_hash": "07ee57f861c73380dfa72d30e057f68f3c37913543dd72fa4cc0565b1b46d19a"}, "dd9f3609-b86f-4182-9cd3-3235904e2b2d": {"doc_hash": "e9cfb6cbe82cd182337c395bda5af4d0d1233dc317388aa522adac53bb8d641b"}, "d1ba25db-df33-4f07-a7a8-3d2f199e2657": {"doc_hash": "8ab31f7580c5ed69dd96d10b913cf6ce894e5f36118c2fc9f46cd0f8e6432ae8"}, "d0c32e8a-c81d-4c90-a150-7d4c4e836cce": {"doc_hash": "05d6b9aa2b989d0e4cd8fe183bd1e10dea86dd83e3635177d07cb2382636e41a"}, "efaf5069-4788-46dc-a699-d5c6b7b44391": {"doc_hash": "7ab8681bd96ce03e5371741b62b035e2d1c401c8039acfb478653b3700f304c4"}, "df74bdb3-b37d-41f0-a89b-fdbb015384dd": {"doc_hash": "f3188efe426ecb89ddd1635907254346d90f34ecb35168e9839616f696e49fec"}, "e4d0a55b-4ec4-4c38-beb6-3c9af10c7908": {"doc_hash": "0755bf63d2443a065f548adf1d96f37dbebea534350095d10d23c3e665d4aab6"}, "6faed02b-71c5-4fd8-a2ab-53ff77e143d4": {"doc_hash": "505f71437ecbc7aec3f5e73779b050e260c2c5e921d3f71e15bbd31f18746123"}, "fa9b0ef8-52fb-4144-a48f-841daee99727": {"doc_hash": "47f6d098d01be08395eb8e6274e8b4c7ee70af1a23bf7f529e3ef95ccfbbb5c4"}, "29955402-1da1-4d29-b740-c589706aa431": {"doc_hash": "4d7107c96942dfd72495de8b20dfc86c103232387a976c1c493ae996a7e88879"}, "442a9249-faf3-4a71-94db-9fbd3112f40c": {"doc_hash": "616aa03467a5703f9e6ee2cbb66004a29c7b06c7fce5d4437e0c52775ef42ed3"}, "5b37c3be-6f48-47ec-8c84-4a3c332328b3": {"doc_hash": "0f9de6686cbeab4c57379e920f1931894a37b035c42a635e704ddcc909fa296c"}, "f5439aab-9a86-4a5d-ba94-7032115affba": {"doc_hash": "41379a62c77827bbfec09d5fd5ad22eb3bfe5dc99e06345358a64a777c70f6e9"}, "48a3c0a7-2482-4429-8572-715e3d1e9724": {"doc_hash": "03cd7f4ef86301dd6071b0a9f4477c5b2ea0255696b17c85198239f683ee1fe2"}, "2b76a650-8dc7-458f-ae36-8c49b36ca506": {"doc_hash": "50770055dc8f63d1fc398d4f1aba6c13dd95b204b4f6109bc22dad00943ea621"}, "db9ab3a4-4029-4b9b-9bf1-c7c0820b31f9": {"doc_hash": "05444ee6ae807279e9a10888ea29b539fceb4bf7cfda3cc50657dd99e53ef1e5"}, "e34d5acc-9fb3-479f-9493-8000dc79513b": {"doc_hash": "fd9ef6e4f0baf252912d50eddb8f8a5e6d547a5b258503c5dea65f325a47babf"}, "42adfb17-c62e-4f3f-b881-439956e8b16f": {"doc_hash": "b5280b368d2204ef32c2282fce31d7cf33e86754d9f7b027158d59a4d0f21ba1"}, "5d3f7d14-9f3e-4257-9da5-be08d1f01d32": {"doc_hash": "f317488b47960cfcf599229382150fc4252ddfb3de00d1eca6351ae9c60e12a6"}, "78532feb-7f19-4be6-b28d-52d5413e794d": {"doc_hash": "8e1cc528b68ee959a588f3fbee989e8b74a88c3cf3704a4108bb70c114582e1b"}, "850f017c-2fab-46b4-b053-e1115354b550": {"doc_hash": "cb81d72fe5a4e19055daa4369ce4c9d2aa28eaa3c7a0762b17ad9265dc548d9a"}, "f066d93f-2f82-4bc8-b8df-7693408984a9": {"doc_hash": "db92880acdf7ef4cf55cc865ad8786e136d3d1d983d5314a0a1281c0584f4f37"}, "0476a1a0-316e-44b1-b5fe-32e0c9019f5f": {"doc_hash": "5ecf9e15f80ad9bbb482bdb8207bbb2d1b95b34ba8e232861bc6e2252071e0fa"}, "aeb1d1bf-eaf6-4f83-977b-191495aa6420": {"doc_hash": "9e243c5533f98f1766d45d9cf6b610485ebca42454e77b4195402ad0af9f562c"}, "7aa89f3c-f597-4fe2-930f-448e48f2e81d": {"doc_hash": "a6265f51bb7423c645b06a351b12e9ac53afcf3c8d46adacc28fca4fe51fad26"}, "123438ef-52b1-482e-8c0b-2cb3f7e7092d": {"doc_hash": "6574e21cd6d86053bb001fdf23b5e44b254be1d14a8c40dd13ad7a31ee8c2ad2"}, "ec52dc37-042f-410c-bec9-7173ff7f0d40": {"doc_hash": "4f550c707196c34587da2beda87433183910748bb0fdd4078cca21103aaab9b4"}, "2e207cf5-b76a-41a5-8ead-11d362b852b7": {"doc_hash": "94940eae09682d465778f36d88d62dc18bd6fc360ee1292f006acf59f3ad8cdf"}, "e1ba55db-d93f-4e1d-bd80-bde049101faf": {"doc_hash": "4546386a0b7337101cb6d90b4acc579bf6d61814e03e532ef68e12fce61eee64"}, "d1807085-5672-4567-8bba-f74d0d5cd341": {"doc_hash": "f00b59846d1b87d52ee3b6ec576367c3dfd0d0347850430ec0a9301bc70cbc0a"}, "04616866-bb08-4070-9503-4a73d73f6a23": {"doc_hash": "175c9faacb4a4aa0d679c95cb5d9e07039a7e6006037d7a6ae0ca19f51501ea4"}, "778564a2-6a62-4091-9748-3fb368964a46": {"doc_hash": "0fdf2179749d3477deb192b86a84a86f664bd6432ee22d7d3f66618b741022a4"}, "d204ce5c-6a34-47a0-9a89-4779c41c3ff2": {"doc_hash": "6b9f7be9bc422c9a2e56e059fea7b7f0aacade5f490bb50fbce1c44415f8b985"}, "7fd45288-d5a3-4ce1-ab1b-dcb0a1caaf27": {"doc_hash": "36dd4742a77bf9fab22f9f4901948c2b69d1bb0853888e33fa4233ed6f4b2435"}, "0d5fa7a0-761d-46fe-966d-47e47e162753": {"doc_hash": "13d8faa297332da0909c2e22aa78f446ed0b243a3fc9e9dd64289e3062d8e15e"}, "b61e3725-e94e-4d76-9a57-6df93d1751a9": {"doc_hash": "e9f6066c5a2187905fa86cc7724ecb1c0813ea838d47376e2c90f4a15d884805"}, "f70da5c0-82bb-40e7-b217-5b54cbf85e60": {"doc_hash": "13ba3c7b06698abbf06cb00d54cb58b983e658cc29b952199b67619188b5b928"}, "4b1a6b4f-ca64-45d5-9d90-d39b7a4e9520": {"doc_hash": "df714c7c3c9e665c84987caa057b529c71fb9281b51fdb17893a7c931176fb07"}, "328664f8-28cc-4db7-b69f-9d60546f065b": {"doc_hash": "64424aa4883bfade3e9383b8e406409632fb7632514b5b888c6367cdea0f88cb"}, "3a92a60c-fea1-4e6b-8bb8-b5cc2c8fed6d": {"doc_hash": "0ad9e4a4275e793cd3bdae5fd320f88380a3dc547accd306976f129fd0ef815c"}, "dd5d86fb-bf34-4b80-a174-4cfafb15813a": {"doc_hash": "fbd23cf0539f4f9ee0b1aaade9a894854b65b7f2e291dbbced525b66310b3638"}, "bba3e6d3-d535-46a0-83b0-3a532723cf63": {"doc_hash": "bd7972eae0a5c01fff4e9809c8249e07c9c56d2d5da9269a366aeee5f0bc8b69"}, "d9f064a3-8a25-4556-9900-4f839327a67a": {"doc_hash": "cc47144983d3e5be247da0dd57d3dd0d7a08a51908be45c0ad322dcddf3ec2b2"}, "a50d9036-3872-48e0-944c-f6d688d902c3": {"doc_hash": "7aafaa2509a41dac9aa081e517572ace2962a3c5550828ec1e2f3b14cfab3e36"}, "842dc08a-b4c1-4ff7-88af-a33309cccf21": {"doc_hash": "e1395b975f148e6ebe201e0ec16e0be9c7394a2257d1622d9bd8a4afe4251473"}, "99df9c16-d2ed-4d05-a172-b7492a68a5b5": {"doc_hash": "e4d41a25ab28035092a5f8c486d519c351951f0ce2ad2dea2b0e3ed813296be0"}, "53fdd8c9-fdd8-43ec-8d3d-b75cd6ab3877": {"doc_hash": "46c6754fdf8d278f015040f83371d23dd98e22468d3e3d94b43116ec02f1f50b"}, "171ca159-8773-41fc-85cd-711f33e71e65": {"doc_hash": "fe9a64abea39a4f1626012d559ec05d694bb048d101bda6436dad27383858a7b"}, "6988ece9-622f-4d47-b902-3ad82393e5f3": {"doc_hash": "2ee02b76607f04d7ec2ee186818f61c0b161326e728b91f5eae5c1fa4fd0d323"}, "d6fcea82-25ed-4d11-a68d-46265344d24a": {"doc_hash": "23ec0f2b7ea5eeecdb6774198064b2714ec7826ff847ffb578f63652e9d2a7fc"}, "6ce1634c-5a67-4ca8-9cca-1dbe6fd8bf32": {"doc_hash": "76452221eac23e8de10877f912fcccf0664bc854ef6343c8eaf4388f0fe2013e"}, "7cd94887-6b5d-45d2-a0bf-2ff0df89f9d5": {"doc_hash": "bef0c8ca250f163187bd54429ae1cd5f13443d26818f6c4b2c08bf7d88cccf0f"}, "eed8bd9c-ec00-482e-9eba-bbde50b70942": {"doc_hash": "747353b56a3717b67e2518814b04ad5ea3662643e5302cbfaba4e4e9c3856374"}, "676a5ca2-fe51-4fce-a7cb-fc8db1e432d1": {"doc_hash": "551da4a4069a61c819d70957ccfad7e2b916cf86fd40c11209189423897018e3"}, "9f12f578-ed3d-413d-acfc-abc59c25ec81": {"doc_hash": "183df46469def1d30380c712e3c6d66931489e8f97db8a716661fd824d9cc1a9"}, "9cc93c36-c7b3-46b2-91c2-c4f6909a131d": {"doc_hash": "9329debc3c86621aa70c1a13833836c997e083a6d98eeca2303249d3fa07869d"}, "c14133fa-da23-43de-83ea-f1a9935c0bb7": {"doc_hash": "e8d8a3d93eda6fc348cefab9799e646215e01c166e2b7a4e87fe14336b7d368a"}, "1624a9e3-8fba-47fb-8c80-ccb8b90908f5": {"doc_hash": "12ca17b636e07a4fbbecc1c0221da0932acbae7060887d74526b9d44b7764556"}, "aafcd750-c7b9-47ba-946d-b5e39a0818e6": {"doc_hash": "b3ef4d5ee92791f110eb286c7012c5374c0941f432233db5e2aac78570d71df6"}, "c46a4e4a-b041-4772-84b1-81a36d40084c": {"doc_hash": "9cc67e62634ada34fa6ce72240407553d86a2f0160b3af5c747360a73ede4429"}, "37a745dd-e3e4-4ba2-ab10-aa61416fa95c": {"doc_hash": "531c0a0dc81a8531b0a58f8105a0396e814f28812396738efe3cd17444d56a15"}, "882af3dd-c765-4f20-b2ff-2e77e955160c": {"doc_hash": "f82d3f91e39e3564dcacee8734dc12a220c403640bcc433dbdcb03fd60fb4948"}, "9dde165d-31e2-44e1-a80d-33926f4e2063": {"doc_hash": "a0296b403149ea8f1d873b4642e53bb0cbce81797dc0d8e2b57591b04832648a"}, "739b06ff-2040-4d6f-aa4a-1445d3a20e57": {"doc_hash": "eca7cf7c7daa1fb29ae0d9a0d6ee9c9c0ae462e50410db86e6f6ce2416838330"}, "026b5cff-17cc-4ebd-9450-6d636889a505": {"doc_hash": "a8cb4d072dc26e1f5f9315531d601b19ca6800da7bb5219587ccbe6082750de4"}, "d044ac4c-377e-4219-b45c-fa9d5d47937c": {"doc_hash": "2762af9374f1484bfebd2fb0235f7331df7e37db0bbaa29cf684c9c26e614e53"}, "deb6d478-1fe6-4c12-84e4-5b579d00f3a1": {"doc_hash": "4ae5147c6e1ead71035d2ac952a5ca2793d05b071226a4e1e3d160d10adb9bde"}, "1638afb5-ca11-4b9e-b3dd-18cbece95b1f": {"doc_hash": "1cd0342662019cf8ccd2195e26c6871bbe84666d252666c65c38a9c6b0067fa0"}, "7841e194-0874-4213-b615-7c5468ba124d": {"doc_hash": "8ee9cd730a96627126c4c1cd131de7b170f5fbf33e52d13ff8a9f76ca7a7db42"}, "3c5ae2f9-8c4a-482c-8a9d-9b4d6424e26f": {"doc_hash": "c488977c8da17280ecbe2d7adc3349bc6adcddcf6e4383e91822fe9f85086b56"}, "63ba3fe7-dd7e-4a55-bc0b-0c5160d71a1d": {"doc_hash": "9ec2da51b44b81cb1b9f5c51e4f4deddb29294bb604f95c4d92609af8d01501e"}, "e4c033bf-a1fe-4582-849b-6d9b80f42ec5": {"doc_hash": "ed0e188b30b6764c3f328f24efef1b7fb6ea33af6a702e0c0b8def6f35bab19e"}, "84e34e1d-2a5a-4695-89f5-6b265871f4f8": {"doc_hash": "0f7b94ab1567ba8e0b8551495c6336f6aa68b3d2ff50ded4d094d100fc9ea907"}, "9ce0a442-120c-42a5-b806-f484a9c562fe": {"doc_hash": "6ab32396e458068f19f63583f954df69246326ebc8decc65140a0b4c0265d08c"}, "40fa11ca-84da-4d5e-932c-9617ed39dec1": {"doc_hash": "35a85220960dd8d4b97f3d0c32e698ad8e2de0aefd46b0762331fd26992c7246"}, "77e18644-e53c-4fb5-bb25-d7053f8a3d17": {"doc_hash": "f39c16743f186cc79097cff56332636a75c96d1a53356ba1bf3773045fc03336"}, "086f6b3f-9638-4238-8afd-7387de81564c": {"doc_hash": "763e062897608e9468ac7dd86cee40d2ab00c4aef7686ecabe31db736c90aa5a"}, "92eda3a0-f480-491c-95c1-283d6fe206b8": {"doc_hash": "9754668f2e5ba53973ce727f4cf6990a24c5e9d3cf7c9823ee215f029f6a092f"}, "e2642afd-645a-4401-ab45-09b84f85191f": {"doc_hash": "050f86e2adaefc7559749c7a309b95b1c0e267262efa6ca96753679e607b2fe2"}, "0ba39a2b-459e-42db-b24b-1f53b2ceb9ff": {"doc_hash": "84b0ccbdbeaf28c5eccc4c3443e3bbc250ae2da9da14445b243b9911e813629b"}, "7e8e4f41-f6b1-4058-b257-fa6494470603": {"doc_hash": "013a585d4c6d32a207f9263eb988da5b371aed584bd9ec95c431af4a34286e20"}, "897346e4-49e3-41d8-8edf-115b8d17befc": {"doc_hash": "61b818ea915aa116343d098da6dd58c19d067bb27f3fa4d0291ce1d92fc4cd05"}, "213f6128-74d8-4e8b-85ad-194fefbe6196": {"doc_hash": "28ccd0d67ab846a032b58526c6cc68d1ee07a3431e5d4bdf859e3566fd15e43b"}, "e6821d4d-606e-437b-96c0-029346c8e313": {"doc_hash": "18ec54eedc56a10e2bb2795afea17fb5358688b8e817c1b2c014ea2d5b0471c5"}, "f50872f6-76a7-412e-a5ff-dd29b2807800": {"doc_hash": "01f5fa8c9e22b332855040d7fd386469d0abedbfe6e1f178ac8127a8ade507a4"}, "38a4369a-6922-4ed9-8b04-f828d8f40fd8": {"doc_hash": "d00cbd083d7ed757d277a463367ed24c55add435adb16a1c7eb1d696f93f462b"}, "56fe2284-6610-41d4-aa2f-f5a1610d8df1": {"doc_hash": "16f694a8ec4a9fb4417e891a46543efb1687ca9d63396ee599e699aaf568b961"}, "df5b1a5d-5cb4-4142-ae9a-7b257987a3f0": {"doc_hash": "90e9b6bba94488fc4a31ae4014fa5e5bb74a4f6e2036f9da73d1a3e1b45c9c8f"}, "4acd98d5-1ab2-4420-8e01-4094905af87f": {"doc_hash": "c5b932760f5840dfed3ec1efcc3480a0047dd77869cbd3535f1bee4961c7b6ed"}, "ea41ab8c-021c-446f-960e-f1fb5fc9a975": {"doc_hash": "79a35061a054ac6b04b0d67ad5c66bb6bfee36e0c3e54628e44a52233b343103"}, "45282625-a843-45c1-a473-33e8e11644af": {"doc_hash": "ea5b89e9405ecf8fc0646a96a8254989019dd35583675e219c95ab435756aed6"}, "fcbf8d6e-1c56-461c-955f-61aa6017ca89": {"doc_hash": "f8f25df0db0a71265c8c146601c2953a4874390aa509bbaa4c8122d3cfe9ef83"}, "f312117c-4b19-4c25-8733-95ebdb7ca4d4": {"doc_hash": "e4f5559acb2f00c6a249886c42909347ec5dbb8d815bd8c5598971884eea9a64"}, "0bba3072-35df-4775-bd0d-69e5557f52d4": {"doc_hash": "1da3de5d2dc9b62378775276373347e890234ebe7ad8372fa84fd5c356abec6f"}, "b19d0396-ea41-45e2-82a7-49a449911fc2": {"doc_hash": "f8d800d2960137546138daa9239f9cf93ab08cfbdf89a66df90cd5c5fef4962f"}, "492007ca-4d7c-45c5-ba42-586493db8b1d": {"doc_hash": "041b3d35c1b0bc3027bd94353d582f5a40f6369e959c4e65d8f223f893baa895"}, "3fcbc9f1-cf00-401f-beb6-0bbab0998763": {"doc_hash": "422249a41773627307617d50c55b6aed540bbd5bf4c07bc2061f055829ed754f"}, "f18e0a6d-c879-4819-8e43-ed2a4813a509": {"doc_hash": "5b6ec4be294c135fad73d086ee29a2336c84ee4fbbfe659a07e849d3d079dab6"}, "4b49ab8c-6058-47a3-a28c-26220dab32f9": {"doc_hash": "9d040c6230fc8e2d3e6dd90175b963540b919a9fb341b918a23e77094c65ae86"}, "1260e740-fec1-4b71-89a6-44f4dc2c2bcc": {"doc_hash": "5ee010ce792387f017931b2a16a1ed825b9e3e4e27df057507ed981bf64bd274"}, "7c87e48d-f831-4771-a897-411832e4ce01": {"doc_hash": "5f2fb0d5de3299a2fef80f64b2f5a22533eafd1a664e94999260f0f758835f12"}, "f747fd90-81df-4229-a772-917138d41918": {"doc_hash": "5250b4ccb34bf7fdcf1187aaf2b26a58d8babe9cca4f094ed5f93400a61731b6"}, "f43eacd5-490b-4c0b-9256-585f557f2c9a": {"doc_hash": "66ea95e48e9b2b14bf475e730fa6d0ef1367337da1d7a281a28ec627968d87c4"}, "11088382-e955-4371-b310-88f9d2fe4f10": {"doc_hash": "16223e785fe812a7654200c05d3bbd29d41ede555bb9c8b54fa8b9f0c70e5c7f"}, "a1e84941-134a-4ead-9087-44c3502bd625": {"doc_hash": "cb4f5bd1a6af0f9c89b8c48d9f6b3ec2d8f5fc4e2138a20a08b032844cffe966"}, "d8d08908-1033-493f-9b7c-46e34b7f604d": {"doc_hash": "b0f826b03ee37f6fda8076e7ce3317b731574ca13fb1a56d3f076a059d666a36"}, "71002fdb-a68e-4667-adb5-cffbe9a02352": {"doc_hash": "4bba4dfdd0f83df9ede6132b4e616f6bbce2f795ff73293634eacb427ba1795c"}, "6195b433-c2f9-42f2-8215-2fb70725e328": {"doc_hash": "6183b4254c51fcf2620b1a0fb1f92eac4a81ec01e11592cdac9f1e1b6b416473"}, "5737f903-a9fc-4369-9036-259efba234c7": {"doc_hash": "01df2c49eb9ab47e912987a50c594186ba3558f1818cfd6c5685ff7c5630786b"}, "c3951318-4056-4a87-9f6a-894394f51e5e": {"doc_hash": "2a0321334c8699f6d04102ce3d8c27653d1ea7994e48f77174427f9c65e3c2c9"}, "117820a5-1cf1-4f5c-8ed6-d8a734c06490": {"doc_hash": "65d5b5def5f4ed10c0c9c009f71e9889a49dbd6dfddd802e9c95c0c8e6c7be83"}, "91fff3c8-467e-4c69-8a04-9363c961754d": {"doc_hash": "8a016362afffa99cbff225f23642f4476729b5c0df849eaea9ac827bff6e61d1"}, "5cdde2d8-1017-41ec-b4e5-be809fc0b615": {"doc_hash": "0dcb0f4373e85f6f4f69d56d0375e4bbe1c8f71c188690d4f95856d76dee0692"}, "5426c61a-23aa-4386-a6b6-55b8ed224e02": {"doc_hash": "daceddc58268d14f1cbe7718b518d4bea811af4839350927a3c35dfb17c867c2"}, "128a82a6-782b-41e2-80be-d4e6ba57d06a": {"doc_hash": "ef9f42ba7a57f432bb305149476eb5dac426821da533b53dd40aaeb10acfecd1"}, "6e840e2a-8ce4-4f88-947a-00c121b5992e": {"doc_hash": "051bf664b8c1b4162dd56e32dd45e65166dccce88ed45002e9b5d7e75b1680db"}, "0de65218-a11c-4a96-adaf-211deea965f2": {"doc_hash": "517bb26e48ff7192ae84f375df963de18d10f480b16d6a4425feec0c027bbb3e"}, "66dce79e-5239-4824-9903-deaa9141aa93": {"doc_hash": "7314f0059e0163276ed6000eb43ea761d87cc7e04cb34571c76e46ceed390cea"}, "ae853b70-3dcf-4df4-b7ae-569334290d41": {"doc_hash": "5fd24c990c33d6a6be0d20fc72e7c829ff65ee4c0a82d3c365ec7aa6477012cc"}, "c08c6a7d-c842-4ef0-bbab-d7ad578d34f8": {"doc_hash": "47d096c0659d7ec2f9edb5673d56a1671825e3fc033b0819912b14c2d4883614"}, "1121cae7-1f16-40a6-9a04-4e56150aae51": {"doc_hash": "2805b221e179cba3b35a611b0c00e9c9ee59578c2727ca600beececffea026c6"}, "19b85d47-e7fe-43c0-a48a-0d7b2d9b8843": {"doc_hash": "37f8193abe2aaf97de9437ba2e3c913266965466652b3fe77116d44c7ef012a2"}, "15c50acc-ea50-404c-849e-10c491c02db8": {"doc_hash": "6d0ef8a7ded15d0b53df0987708063b88a11ded572f63282dacf93a44117eed9"}, "b8f87cde-1d14-4923-897e-c1f14dd4c80e": {"doc_hash": "eec8895c829c552e88f3e0d0de3f70d07a331ce537e89fed082711b421c06fcb"}, "3fe49c4f-f57e-457b-ba10-e33712cd02a3": {"doc_hash": "d4a074e67256f7b395dc7c5ce164e2d800e600faed3fcc407f373b0d461d513e"}, "586ef30f-b238-4f0d-bee9-30d93e2725c8": {"doc_hash": "53d27105e4ad9a6d2305c9974d9abeda8b9df969b903b34edfdd3b440b0ca740"}, "73430904-1004-46a5-885b-c12e3f153412": {"doc_hash": "75bee2c20757f2ca0bb01f541bf0a3a01553dc2a203fafd92de71179bbb41a64"}, "d827f7bd-3997-4481-8e6a-1fa8e29c9af5": {"doc_hash": "ee0ad2662ec112f86997608e463f76edbdac6630288ff23bab501f65781615fc"}, "569163a1-ed7c-4ad7-845c-968022493d28": {"doc_hash": "3979bcbaf00b104a0f040f1ff5a4f15c42708514c9f959b77e05413bcdf8c10e"}, "be6fa6ef-4581-4ffa-a09f-4d5e87566eec": {"doc_hash": "f0b3fcb8578d7810c6047fb7a2bd984c7dcd13bfeca5fe93938f0f122840dcdf"}, "677d3468-f39d-4238-9fbc-a2993fcb1836": {"doc_hash": "7c931e575f0df70d7ff83021fa769407f1bef1f25f92b340d29530cfab856a3d"}, "80c8c795-dcf6-4c92-9051-0e6431742051": {"doc_hash": "14c15cf1c84c3e37dcdffe4013295b1600aba383018298c5b69a82ba1ad89089"}, "b9bc9e31-9f7e-4a56-bd55-88c69055fe10": {"doc_hash": "2fc6f90684595a7d18869aa3ad14422685f2ca0d1e7366d85b43722fe50f8e31"}, "4c890425-517c-4eb0-83a9-5e2db69a3160": {"doc_hash": "19b962f8d5b8af86f6a6e289d744db5e33036d9ce11dafb8b575c564196003e6"}, "96f343fa-64d2-4cd7-bbf7-5138ff8735e3": {"doc_hash": "5b160a29b58a07d1fc0b1c02897215941ba7c40a62fca24b27c80a57a183d67a"}, "b76148b4-466e-4f10-ade6-6f00717962a0": {"doc_hash": "a3b5ecb0379ac4185797d397de65c39273cab640d1f380c33c626e4e01830f88"}, "c510d526-7578-4814-8e65-99629c2632b3": {"doc_hash": "1684239aa651cd3e8ecbd58393a263e6de1a9439ef9474a98ef6753443ef8b3c"}, "7252af03-71cb-445b-a12f-81941ccc2c7d": {"doc_hash": "ef90d46b04e2d35a1b96dbe99425aa9b9a068f0a72c0cfa6f3692842c596a5a7"}, "9d8c9bdf-3e0d-4834-a7ca-6dabb22f2715": {"doc_hash": "32db890cb8478ff0a0d3f62feed059f6c02b01263f97c00ddd05b5256a51a3a0"}, "8c172c88-07c3-427a-892a-4dc69cfa4a29": {"doc_hash": "9fd4e6dea9ff8a8cf3ddfdc7cc6450f688a275914409372a5dfd26d4c7539fb2"}, "f78a7560-5db3-4461-b997-e5c527417ea0": {"doc_hash": "291cff35920c4cd472368764c38922a566fda348c691a93e1d3a83ccde4b21d5"}, "615ab3e8-b903-42bb-a59d-7e78592f570f": {"doc_hash": "afc17d3809630bd4d11b95c292c54f2a2e6afeb3892c905d24925c425d6704e6"}, "acfbf467-53db-471c-aa73-d59cc3134181": {"doc_hash": "b76d8af83dde5694692534dd93cb2ea05c24c6db0be667f7f6a5ffff67096bc7"}, "5bee2a00-5b50-4551-8515-9d5fcc97f77b": {"doc_hash": "e6b4e0083c4e71a13b7a2882f5a11233e238be2383fe6cb3369244fca851a231"}, "841ba144-1b63-4a63-97c7-291112e15838": {"doc_hash": "d23f2902520be88fb449b3a4109edb6e6556e61ba2a3b23aed99b49fab8ef612"}, "9013ded4-1762-49d5-91bc-def0ff7b91b8": {"doc_hash": "653187a9b95a551529a5b2f4d21846eaaef378f16679d7755f7a54baf382cf58"}, "7e54adc4-82f0-4e84-b055-7b6590ad07f1": {"doc_hash": "153ef80d16a2e558605f6aecd6f4edcdff4f125f6c5ffca5733f917e475dba3c"}, "70a02b2c-2f95-40a6-9814-945b3b497856": {"doc_hash": "7c187315e6a1fe67fa8184487c7459318456c187b07c163ae771439e6a1c43a3"}, "757cca39-2843-4aa9-8b2f-8a7e56343981": {"doc_hash": "0a8e059616d9efb27661b4c5702811506450fbca13a8f53d7ca1838474c57ec8"}, "29ce5e54-1b49-481f-b099-ab1565101583": {"doc_hash": "75f4cea1b84b454540a427c4f154d123f02350207d0870463188ead1893f624d"}, "f0bf208f-0cc5-416d-94bc-73deda7c5d18": {"doc_hash": "1e54d31aff202d7f37c44d9f563c162e28c6c7706346813d0e345c0fb94081be"}, "555aaf8d-7dd2-4660-a131-2482d981597c": {"doc_hash": "4e18f3d007c359a9cc825466cf3b600df9e4af2660b34748fbdb1883bcbb697f"}, "00e016b1-3502-412f-a31c-36ea933c19dc": {"doc_hash": "9ff567a7e9d35fa654589d5ad07393d99efb64e3de8cbc68b023548e92cb87ed"}, "a410d1ef-137e-49ba-a134-21e8f32b4101": {"doc_hash": "7e5b86e79b85dd8571e53c3996ad5886688a4755fa750140514f2b5e8975fe2a"}, "bd74f75c-42ac-43e7-9153-b5cd59b466a0": {"doc_hash": "38d85deb92578629c6edccdc12e9746a0336c264dc82590d1c9c60c40daea71f"}, "925173cd-6a72-4d51-a80a-38c426f92ac5": {"doc_hash": "2bfa1a684e60785aacd4362e209b5bf44853ab6fc5377b7beac9ca31e8eb150f"}, "fa980610-b366-4dd2-8d61-860580f65cbb": {"doc_hash": "f92484196361ebf17e085f878fcdfd7387189f8f1377ce8dd4f94a5b2d4bdc41"}, "0bf3d763-f4a9-42e8-98bb-7d3e504fe767": {"doc_hash": "0fe67959b8a6dfa8811bf5d3083e528d38e62cf6daac8244d48f326e12da7809"}, "9259e996-030c-4ca6-a131-b18ca820d200": {"doc_hash": "9f0d1b062ff579042ceb1888663da8d94540cb43229f303766241a6adec9c558"}, "c0b2e08e-e40e-47b8-b15b-85c10dc0211d": {"doc_hash": "5a612874cc5c148c2447c51b01bde17e87ad86813a89e7d4d8295301f010ed86"}, "00450d20-07ea-455b-b9c0-d85db7d808e3": {"doc_hash": "bd0340723c2641d5864d8e7a130cc99c2d07b1a200811efb363f581f0a1fe3b6"}, "d6b406bb-0b26-4e97-8ac1-33b02ded7af0": {"doc_hash": "d373c0d9984ea80c1cf27c0c2d084bc1dbe377738fc8d59c386d78ed31b7acb2"}, "2b1d2c20-2915-42ea-a791-9ba602761c76": {"doc_hash": "69f858dd531e696802e84122137954c60a9b2f797d7c2e8d8f6404ad6b885e84"}, "32581fc6-5031-4cfe-8a78-864105c29e6e": {"doc_hash": "1853571769925108f8fba4e0dfc72f18057c40b8223192b653cf55f0e3ed6dd1"}, "1252c255-e0a7-4dc4-b65a-531f173fd732": {"doc_hash": "56b5d1d5a0ad8989ab016c5782d35d6f1663bdb9f459b85873cd98209466bd60"}, "4d29a8ba-c633-4948-a8dc-99efda1dee42": {"doc_hash": "43160d47feacc8b567a5c77b03a91eb9ebf88a641f51582ee40f9f9b3c65cd4a"}, "39e154aa-18d7-4de0-9e9e-a99fc184da55": {"doc_hash": "ba4c044dfd42daf7ac949de98e4567f084feddaf14ef3c4d6fd2dd566859bb21"}, "80555ce4-3299-4865-b551-050066c5ddfe": {"doc_hash": "2241637b559272367e241c92401df4f167e509d95b8956f9ffb27ca277a4689c"}, "39c4a9a8-95d0-4361-a5c0-304bcf56c27e": {"doc_hash": "7403326c959715ed9840248c2eccf8f5002598032ded188c3329f631db0bff04"}, "4dfbcd6c-658e-4f4b-89aa-2c1c3963a6ab": {"doc_hash": "d770998b5ce21600c7255dea4911ea00933f91aa991381bf2e4b7787ac2ec7d6"}, "07360a3e-73b6-4e43-979a-6ea11a5c0fb8": {"doc_hash": "0a7601a0898c145b5a165ff8f5539959ce0947ad6953bd8ae695c53f3f7932b2"}, "2f304f0a-82ef-4eba-8166-106770bf2177": {"doc_hash": "edd580c3b4b8d7c31ee59c97e24a2d6b6a601f5587314017bd9ade731641fbab"}, "756378d7-9f9e-441f-a7cb-ee1cb900c4fe": {"doc_hash": "82a60e65484d41e5fa7ec608bc36572c41dea47e28fdd01f559bd85eb4a410ac"}, "c3f21140-36de-43e0-9523-24caf0f2b82e": {"doc_hash": "d85a7931af621adb145d5402b004fbb0511cfeba80a364f69030ca498a52df54"}, "e46ee009-b0f2-4804-b1b1-207e02973f78": {"doc_hash": "750313f217aaf3d2dc6dacdbce5e4287061510ea5d7c7707e22fd2a5545085aa"}, "6883460f-9a1f-4bc6-9911-50875b9f155c": {"doc_hash": "592eae0956196d57e6088626df41475a2983019977cb982dc581a1926f2ab57c"}, "102557bf-8bd3-4aeb-b18e-751206ed15d8": {"doc_hash": "eb46ce6b14a49f723cfd48fb29ee6ccd39ca9ea7dacbf857cac266500eaab58e"}, "8b766d04-b8ba-4d29-afbe-333f43449b1d": {"doc_hash": "c2163b0fa62f1fd94cc1e68748cfb862e6a760249801b140302c95dc5dca6220"}, "8086015f-2c38-4072-9d0b-f62337ee9ec2": {"doc_hash": "cd882e2242e9dcfe81aa6d18b1d3a7bdb134e4db7b3ccbff9d6aa8ce69190cb0"}, "b21c07ea-0fcd-48c4-962e-e9fe9f7044d3": {"doc_hash": "67978f958db490b4382d4f09bb0d7ee1ba8ed4d7bfed8cdc258db22857abfcfa"}, "3915477c-6ac5-41cc-81c7-4197ad83fd6a": {"doc_hash": "e89148de433aaa49106ac250d2f65d37e14a2f0baef34797ceb721921d9758e1"}, "ecd9da7a-e45f-4cb8-af47-9d11d576b15e": {"doc_hash": "3de2c287f28ce1846e592c72644a147ac79f0271f43503c69c6a96b2121f054d"}, "271d8a50-f3b3-45ea-9594-3e5df3a8b9c5": {"doc_hash": "862c6f06334eac495f54d1c6636b8c84376beb84801a4fc8a40bbf687d0e0de5"}, "bdc3c139-a3fc-4444-a7a4-e9cb6ae40e70": {"doc_hash": "968270dc68778999f4bd1580093e5fcc22975982757ad30085d4edcebc5a9578"}, "8d44aff4-3cd0-4558-8552-89cc1a279971": {"doc_hash": "f20a70e118aacc9ba32bfd629f974096b1a70493598d6f8485d3473ea0d41df2"}, "af33463e-e5d5-4335-bc6b-5554291aeefd": {"doc_hash": "950f1e78093bfa841eac4423f18ec02754f25afdce0909de4448811b5e586bf8"}, "6cdd57b8-6bb8-4213-b44b-ee3397a264f2": {"doc_hash": "22be7c0526f8d2a0d828bdb8200ce83ecd177d7e9cfba29c7a05766a00d1789e"}, "3a8a8cea-f0a8-46ac-9f8a-298934109219": {"doc_hash": "49b1c9d7ec4713d8aa9706295345fd067ce6453502848267d81b6cc1590e0921"}, "b73213a9-ec26-4a13-bbcd-6c8007964f6d": {"doc_hash": "bef9066b9acdab7bad946ba64a23bbbdabaee511dc605c13772ef024f572e12a"}, "5c797949-fbb7-46f8-b494-7b339f628870": {"doc_hash": "2f6f6b0d3e4c016c1703d2f0a29517e6b5988d3be1fbfa704eb74e23cef2e18d"}, "860672a3-ed29-4d6d-b380-6d47d4ee0743": {"doc_hash": "2c0806d7fc5f713aa778d251ab019f85ada3e915041f3264bee82347af9a08b1"}, "4f88a276-5e16-4909-8cd1-f8b46652fce4": {"doc_hash": "bdd95a5d04c5f6adc1a9ce9a6bdee8ae03271dc99314d0fc2d1d1b94b8cf99ca"}, "142d9263-0961-476c-ae2b-9a4e2bb2dc3c": {"doc_hash": "b86aaee2fbad47c3cade899ad431c2a4aff6fd74e0059e6ed7a58232bf34998c"}, "9241a3a9-15e3-47d3-bb6b-741e9893dda0": {"doc_hash": "2bddeac61adbbb786efe6c537f706a5dbc600171402e0ac379565bb5613455fb"}, "97e1251b-34a7-426b-bbf1-9551549dc081": {"doc_hash": "1748c7cd7d3bf2bd5c6b2be90d923dface4fb409347db957dd8b84600da50ea0"}, "3c75563e-f953-4357-a441-2b5b7962b27a": {"doc_hash": "c1be9c4109ed6e22aa2d06a2710d15fee529364c3bac9e2c8da7211efdb85acd"}, "bdad3839-00cf-4aac-a5aa-ab93af062155": {"doc_hash": "d2fa6d139eed8de6f1702998f08b225f940410ac86cd5aab9f94b78d8f4fc0c3"}, "00c2508f-ee35-45b1-a839-4ec02bfbaf96": {"doc_hash": "ab6a50ff6f2a18e0305b9a56c558674fd630ab792b6755f5633b02ac0de72548"}, "31c20c2c-b3ae-4da3-98c6-a1f6e749b590": {"doc_hash": "a8537c09c250e55c5adef588236453df557f2e47289e50f63b05bafefb1f04bf"}, "e42a07c4-b200-48b1-8f99-01712363c70d": {"doc_hash": "e9c2926bc79d464bd48c7b0009bcc695204022ea4558c55078088f177523466d"}, "d4ae5f42-48a2-4757-b646-bb08d3ad3b35": {"doc_hash": "2cf8bbca5dc96234d9ef19d38417e10f6886db16a73f8dcb8ceb9cbf3072d7d0"}, "e3ac1f66-e70b-455f-9c24-a6a198fb2de2": {"doc_hash": "97a6f3ebf4f6ea36c661a005454be4a076f60cf147a3235d8964e2f982d3d01a"}, "35a66dba-3eb9-4927-8825-65ba4e6d27af": {"doc_hash": "38dada005c21f53c6c94e37f012eb85364bec4eaf694098c57ef2176edd1b661"}, "056f3d1a-301d-449f-8ea4-0360d291149c": {"doc_hash": "2e01a5865742c4f6002a9d71d93ca5dcb8b63520b66debaedcfcf695c9428b22"}, "6834392b-5c75-40e4-b58e-269b7b93fa60": {"doc_hash": "5d0c443969bc5a02ebf86fed4a73b2f1f30ae36f813a9a839589e4b09b3593d6"}, "83da4228-4dce-4a1d-883d-6297f68edaa6": {"doc_hash": "45dbff76a5d716dff466299cb78be8bffd790a8e888df855e6d6754a2cec58f7"}, "7af7964d-b1b5-4fec-b811-4b7b132f8632": {"doc_hash": "d3145daf2ab539ee0f94855cca8113093421e558b7105921816cd70c10577b11"}, "cb9e88db-e31b-4e5c-b597-2d9386ab8948": {"doc_hash": "24d8c362de802653a0585055f85d312155bf0146d51607eaac47dff99a6c16e6"}, "d6b41a4e-5207-4721-ae6f-d4634756f902": {"doc_hash": "d1b4ac6121af9316dea2173daa3b93214a734bf92122b257e6897bf6105c9e33"}, "c2f1bc2a-2639-4a46-bbe8-a527f33cd31e": {"doc_hash": "58e7fede2b1e32a4e0fb0fb36aac2c28490738ca724f54d57e2e866a6bd70450"}, "ea304fe0-f9f0-46d2-8cd0-8720dbda2475": {"doc_hash": "0f255deec1899c5f34d46d227dc5f3453f8f090e7d81d471184deefae63455bb"}, "5e18b937-0919-463f-9268-ecefdbdd7de9": {"doc_hash": "a65c6d92738135d047df6d7f3a87cafa871ecd936d209a274873c348c04ae925"}, "cff79bfc-3dd3-41ad-bcbb-d1a4f3f8f799": {"doc_hash": "0cdb351392bec71f7ca060856da1937120ecaf56e2c3f0f3c7b688d8004a6e2c"}, "589056df-d92c-424c-96b5-76b51cf44058": {"doc_hash": "5194fc53a95d191e12ce276be74b6cea9ca06bb54f410dc9d530e2561257084e"}, "ac5442a1-fc81-4bd9-9c7f-961298b71ddf": {"doc_hash": "e4fb3fb8940aafefaf452d009b7b46901d8f8ae620da93a65161c12499c0b284"}, "6fc0a76c-a8b7-4bde-8fdf-b273cc017455": {"doc_hash": "1670621cf39867bb0a71be5f12cce93d71a73dce266c2df51547e334204ad7dd"}, "bbadb0a8-2c10-46d1-9f02-5f71151a0037": {"doc_hash": "2338f071ad7e5a9e0a0ad826fe733af484be5ee7034ae481c70cdd34322b7d02"}, "85b79eb6-99e6-4391-b81c-e3410f859cc6": {"doc_hash": "538af029f614f36ee011e3eee57edb3f06e4f6da9ad6c42befc9bdd6f6b2a8bd"}, "33c17082-6ab8-41f4-849e-83183d8a11ca": {"doc_hash": "2caf469c90399363560480fa7a6cc948a797aa4a45fd0a700795cd47d8516248"}, "cec05833-1ed9-497d-babb-ed403630a957": {"doc_hash": "50deab9999e553fb5584a3aeb5e6ff5d290087f02235ed1e90cc93cca31345ae"}, "df77011e-f4b4-4eb4-a35a-e225907f98c5": {"doc_hash": "590f866ccaafa72b33a584e1818210320eb57159c5e8d51dc4b9329bdc15689d"}, "72f7d677-fe91-457b-980f-934bc2a8cb45": {"doc_hash": "2cf352a409bc5df3f90ed73e336f0f245761ac4bfd02af7c4f8dc2d897054174"}, "3fd3e473-b84f-4076-b739-3f8ffc6963d7": {"doc_hash": "8597017edf4b30840e1acc783a94da7007ac5a2d326cebda74279eb15cd3cffa"}, "8cc59ff2-6369-4b3a-984f-aaea016af9d9": {"doc_hash": "bdc463b5b29771ff3ba975c3df33a1055ed350e978010112d06569b275aa735c"}, "359ff8ac-6fae-4c76-912b-bdd912750737": {"doc_hash": "8515b26a061633324055c9f6d800ca40794e18fa3ea8749e14cb43dd475456b6"}, "f9d016ee-9a41-4742-84e5-c6a10fa19ec3": {"doc_hash": "f36a399863f44929cc5eda562bab0adce8a887e365a062a81ea676959e0083ab"}, "cfb2352a-270e-4dd1-89b2-a8ec184de755": {"doc_hash": "1a0a4fe183738b7698a01995bb315e4a60d7d3e9f5e85d24e74242ccdddf56bb"}, "88123956-0e14-4cb7-875d-3fef4af7b697": {"doc_hash": "32908395db9d8f956205f2fd1e8781b3976935c1ca5b51aa6974cf8fd02a7eb6"}, "5010012e-a9aa-49a2-bd31-9350c40eaa89": {"doc_hash": "f410c570651beff77684a0a03630f731f9ac07d782d91dd058e22afedf46efe5"}, "f5f8b438-8bdc-4a6f-9f60-707b17319f44": {"doc_hash": "81b245f1354206bc86a5976e73fde136dc13cb79ef887022234fb29c9cfcaaa9"}, "50eaf83c-d976-49c7-a15d-9674eeaa545c": {"doc_hash": "40b3c8ca371b54d44ca2ad5f54f96778c57be9971314301062481c866b9ed12e"}, "f4665b9c-6e30-434d-9005-98bfd950cb72": {"doc_hash": "c12d9444ab4565a31d45be000904e2df3ff8f68b3cb271854f775b3601ba5b11"}, "21f2a275-19eb-4b46-87a0-8b7b7a7b3d32": {"doc_hash": "8f81de043a798cfc258722a78c8280fb6c338e59b76f33399ab8e36977efb818"}, "9c3cc192-dea5-4708-b5b7-e98d3f9efb0a": {"doc_hash": "2a3f45f2494fceb53ab7943cfae1a3a20f18ef703b4d6029cf2d001cc4cdd463"}, "f6b62b09-70dd-4c8a-b4fe-47f9e8798be4": {"doc_hash": "b4dd57b66d4b7b2a386204a9e220d234d3817fd20026296382d2c13f6f6612d2"}, "8f899831-3f9b-4ff8-b1e8-2772168585be": {"doc_hash": "56400812097f5108fb14afbaa3689b94c282134d6274b23c08486e14c49a17ad"}, "6c006eef-31f5-4238-b302-5c53f1bc587b": {"doc_hash": "fc88f261a542a7af95c241e6f179a1b9d3b1016034e577cd37a16e5a5f89663d"}, "ef2599b8-5677-4da7-9950-f455a4cdf942": {"doc_hash": "a83a6fb1e986ab8b2fb2d993de20259fcb82608d20b9e75dfabe80671e8de102"}, "b7d84534-175c-4364-a5a4-e962c42a5b1f": {"doc_hash": "09606c810535f7a434c2339ed82922707bef233439053335d7bc92ed1c2b4f32"}, "8d0a0166-8433-458a-8e8f-0289febbc65d": {"doc_hash": "2bbcae0692cd45645024bede0fc11db7fc3e7f5c430f571d6a1fee7f672f6a8e"}, "2201cc99-1fcb-4bde-a567-6d9af358b36c": {"doc_hash": "afed42a958473c9a0d460a180c3a9d184857f92775af3a58769dda1ac4babff1"}, "c367bc5f-a3f3-4c29-b135-8613ae39c7c5": {"doc_hash": "a2f9a07023d381fc7ecaadf45fe53957044f79dc141a3bd75f78aecca3b8dc84"}, "3a36a136-4d87-4147-a7ad-dfe7f90d0bf7": {"doc_hash": "465ecadee63ee6b64eb67008c6511f8a450dc523b696640f8474513a3084a284"}, "d8de9593-d5c6-41d2-af3e-f22c7c978418": {"doc_hash": "8f6dda95ad9a2bd47f9075267ae2e66c3b9079d088e345413370860a8ac59e8a"}, "c19d391e-83ae-44a7-ba89-c7bf2d187c54": {"doc_hash": "ec730b128f0ced3b8685a821a922395c94a43d37abe794fe51630bb6c7d46ea7"}, "b4878e10-eff6-44f7-8a28-8766defd733b": {"doc_hash": "9cea56b595e9b839086786598aca12e534d189c74b262c202b5570ef16d92c42"}, "8267fa54-4104-47f9-94b1-3d80da08a9fb": {"doc_hash": "0fa9f4da43bbfabf8fa3cdab57502e1889576aae22836ce420c1da917650437a"}, "c56d22c3-8862-433f-9507-205e142fc1fa": {"doc_hash": "d0b2f04851e616802d1c48459bb223a0586e072034b593fc13843c56a9e3d72c"}, "76efc881-c6d8-40d2-bbd7-7aace2a13feb": {"doc_hash": "9445c635b68ef7aa33e07aa4cda1347d4f48b7bb841a651abab6fcc88c93a56e"}, "3ea888d9-3145-44df-a967-c9d47f666c0c": {"doc_hash": "21ce13c1c862b4c9248e983004a2f25beb72730b01b7c5a5748ee739fdca653c"}, "0a4d7506-3ae4-4299-902e-fc5f38504598": {"doc_hash": "f29cc2b6f05ac9219cba45758b756e6f3f19ace02fc80f7349366fde282b1f3d"}, "109ff47f-f8f6-4ebf-9c5b-c422dc318065": {"doc_hash": "fa0614709c26fb4662e75fe2f60ca3f4f5338a903cb3dab6afa0c2e844b3f400"}, "fafaef31-8dcc-4f38-8090-6543e9d72eda": {"doc_hash": "5d7b1b55195eaa25c1b489eb5cba6ed79ce7fc0dfabbb7016c973a2fe24e08c2"}, "2fca2bae-d674-43b1-9d71-382139fa5bf8": {"doc_hash": "da2ffa3df06011b26bff1f6c8e5c5341bbc50ab6e8ac57365613f79d1f813cc7"}, "41e48f12-422d-4dae-956e-78b97a5071c4": {"doc_hash": "a2f2cb113ef453b19ae142a0b0ed41476d2234b478f92e8288597349e10cdf38"}, "6478bf36-7600-488b-aab7-104d3b20fc80": {"doc_hash": "29dad83552fc42307d3b35ef365bdb92af989236134eba35bdd557038b3c2a4e"}, "ba8104a8-baa0-498f-88c5-98463eb849f8": {"doc_hash": "929a5494a6c0611a6f3d20f462ac0b5bccc6a6d4e3e5e4ed183ad446068294a1"}, "37038ff9-4ab5-47d5-825a-bb7237317e3b": {"doc_hash": "9acdcce01b110e1723808d5fc456107b3555b975c82a5dbc18612257dd84e4b5"}, "19cf202e-a5c5-4ec9-804c-a344381e9e69": {"doc_hash": "429547eed9a3f3a85a801710190df76f28c472c0a77edc0408e2a47b77d0061b"}, "1e88bc9e-9a25-41a2-8e94-bd8eafd07eeb": {"doc_hash": "ef891e03d2f2330b398198b1d9976e6780d33b1818d7d0e5d491ea0041fe9915"}, "af4afbb4-ec4c-4a14-97e1-776741a2c7a3": {"doc_hash": "e1e5c3dc40e3cdf6d6da333d63953ae0574aca91c4daa67b610957c4f8ac9a83"}, "c7727236-55ce-4558-8bae-3920f124ce84": {"doc_hash": "a5b2f8ed1475107dbf221fb414ee7e5f2b98beaa4d81939a8352389aeb13fcf7"}, "f2fadc58-4132-4a25-a79a-b79546430c41": {"doc_hash": "6b33e9e8a13d640ece5b3a2f1099e0ee370d7de5b0a210cf8523aff5d334199b"}, "b075cc6e-8044-46b2-8e7f-c27476c8cf77": {"doc_hash": "94acaab1de39be104ce936f7c456e77aa15158aee0a8174d4c9e10f0db93589f"}, "5d2417eb-a7d3-48df-b9f4-fb836ccb48dd": {"doc_hash": "dcc27186164dc8e7b8ed2a9cb2252e7d2ae44b92a7305ccb33c0211cf584ba3b"}, "b1f958b8-d035-4618-8ce9-3293d6112ce8": {"doc_hash": "47272a28df3ac4a059e88ada05979f76467bb0fc67ce646f8dda54a55cb9daae"}, "8f0a029c-57fb-4c5d-8c22-1846db6899f7": {"doc_hash": "ca31dbcdf911683736a73ffd2f29ea4dc97691fd472f46fe93ec1d863fc3895f"}, "69432ac8-c783-4a26-a4b9-11b9c9b9f1f6": {"doc_hash": "0679758cd15867c3e904b2432ce8e8d3128ae53e26c8882ee52d9c66405a5fa2"}, "02d5e802-ecb1-4d05-8270-2d64e77865fa": {"doc_hash": "c38dedf2e6b052cc7cd5c4bc75b00061d231b63a669dc669f4bf4176cc220e7d"}, "3cd94c3d-0b8a-48dc-b4e3-53aee374b85d": {"doc_hash": "707f673ec45dcd99835167c3ecc86a7118199a23cd2bad06a59d90306ae87bcd"}, "e708c6a5-3510-4cb9-8afd-3410bb7e11f3": {"doc_hash": "f59883f223a093f3d6cdf3e796b1d1c539a12c558cbc3b89c070ec8d8fb00375"}, "e68f92d7-7b5d-4b98-bd89-75eaf8ed455b": {"doc_hash": "c93ad020954cfcf28e5000410d188728b892ec51d2d8e411c0416027c74b1b4c"}, "3922944f-f77d-4ed1-9bab-28556bdbcec7": {"doc_hash": "5414266a4d45559a4dce75bd70d89f622280ddc59effe1be091c0352f2415d9f"}, "6cb2ceea-79c7-47a5-a841-928a26acae7b": {"doc_hash": "c6a4203d7369a1a626563170ed67b1a7485cd0dc0689548e15ff78d7285f3689"}, "b775bcce-c4b6-4f21-8615-a766da41dc10": {"doc_hash": "abba31ff3c3a0d25566b68395c7e1a2639e55204a688077da46bf18eb91e456f"}, "8cbb0c5b-bdf1-438c-8a61-8992fbed1bb0": {"doc_hash": "eeb0c850ba3772a083978e91173bb4df9603e2056dc4dc50a191dd58baf6ee22"}, "a8aca62a-22b6-4267-960c-77ea9f8d1ebf": {"doc_hash": "96435bf7309bac094828020ba2daab219302113613d8e291502ba57982678e0e"}, "72438f1d-ab2b-4210-9852-07a084641bc2": {"doc_hash": "07b0993c9dd1278ddc8bce4c84f9eb1286add0f752eeae609b8c277dc39c20c1"}, "a7ab99e2-013f-4291-8e9d-863e998ef394": {"doc_hash": "b54be9270d03df42cf50574d09238e2796d8edaa301fe31bc8c4056b8a46bb63"}, "3545eac7-5985-4e77-b3cb-4d4a566125bb": {"doc_hash": "df4be9625e9fa87e89d23f93990f992b117682b7d285cbc194fee4a1586d8e01"}, "dff01cf3-8cc5-4d43-8397-8d77d2b43dff": {"doc_hash": "5beddf7439a92a21c1cf695f0862678ce23b7ced58870cdbde6a001eff5c97fd"}, "92dbeddf-2a67-455a-8d08-4c6482a536c8": {"doc_hash": "0afca8d828af50a0cde876517bced2c5dada491f542bddca871d015c27d89853"}, "df596790-5f64-4bc3-bc66-5b59e5b57f36": {"doc_hash": "dcfc098823bc7787c059d98165d74430d6266e860d227dfa168efbf51e7ca2ad"}, "a6a336e4-38bb-4156-b50f-269ecd3684c8": {"doc_hash": "bf28c8f092c526d87fdaa785fefb670177e81f7ebb90279dfd406e6224f79035"}, "af7e00e5-f4c4-4de9-945b-358321c8d9d7": {"doc_hash": "860edc8b260c610cf13129670739e7ece45e067b635b5b94d331c23bec85eacb"}, "7c948eca-b46a-43f0-8a25-01ea1d288181": {"doc_hash": "1a52337e10a9748e40a55f20bd18387b0c5978a235eca22260c89e3c0e97530a"}, "0736bf66-77dc-421d-81d2-fc655c9cdc10": {"doc_hash": "5dd824661918435b646cc8af997a128f6f0b85b0489629af4f99642c263dbf7f"}, "ef104253-682b-4cbc-9405-e9d34b30fea7": {"doc_hash": "417bd5cbac4342d4f3bc8059639691aefcd8ed5af47f0f9ec4cf5d9ce5750a1f"}, "298d4e20-cd91-4e1b-a490-5357ca3a607e": {"doc_hash": "259911c9efe96b3ad9b28890840f059c3a8fa589f133defc4377e74123de939b"}, "3db04443-0ee6-43c5-99d6-fc37906ba0c8": {"doc_hash": "4c293f8d40d6a3cbd1a2676a15ffa97d79744fcd1f5d3bc24c7056ab8c3d7a3c"}, "3a9a8396-efe5-46eb-aee0-9db9ddf0211e": {"doc_hash": "5eb6f3cd6e4768bceef6fc0bd59da791b9debb7bc7105b89049d3bd8071faf35"}, "da969fee-0714-40c2-b052-5b2c03eb16e8": {"doc_hash": "f5577389e0d25640546e333509278eacf89b7b09c23c7e5a9c2514eeeaf44ee1"}, "a3af2d2c-06b0-4aac-b00e-69a9a364e634": {"doc_hash": "844517e404463e5b5e6d0036baebd871772b2b280c2d45d82a5441fac9678cfa"}, "7da86549-b44d-4fa8-a839-a05f386c1bdd": {"doc_hash": "0d1c1f83c9ed3db507b3f2c7c4b639d3fb8decbdd48fd9fa012d9fa1953e0972"}, "f1096ec1-afdf-454d-9409-e13663bad36f": {"doc_hash": "545d8b4e75fd3a5334f44b2acd0cf4558dd3ee278885bd975d0330e647d3b0a3"}, "bcb2cab2-35b6-4f56-9d82-e5a8dfd69659": {"doc_hash": "4170e1975550672dd599d22b8c21d02a00ad8c7baa95af4428bc26ff9a4f2007"}, "6a284268-e699-4a4e-8f55-1484f5ddfc55": {"doc_hash": "5f789e39db56376b2288c22218bace70fb6f484365ba5cc24823fac55adc7eac"}, "25e9adf3-70df-4497-88de-f80fe85af8ac": {"doc_hash": "c12d9444ab4565a31d45be000904e2df3ff8f68b3cb271854f775b3601ba5b11"}, "8be7d32e-7982-4348-ac05-7145c544d8fd": {"doc_hash": "1b607ae0c4e6f63c95c313b29eda5ba4f8675e02fa14ac7126ae9a278a6a5ecf"}, "8d121a9f-8fd7-4447-86f2-5a84baa36dc6": {"doc_hash": "ae27457b159b2d845cd2089af9134e2b6489f2eb512e9bf03f26f1de3750b1dd"}, "1fc0df79-09fa-4cfa-bdd5-68cc605a48fb": {"doc_hash": "166fd82d2a5d46279071754fbe6fd595aac76f7df37f40bf444545d8539b1b2b"}, "c79e4fc0-e973-404a-9865-c0eb9ba16eaf": {"doc_hash": "91c36f6012a5c29dd174a82217cda2335914fdd8d25e9df16708b3fcb2f3000f"}, "3b921320-a539-4d56-bca8-74cf02c53be1": {"doc_hash": "861e0692ddccb9811d42b553961c1c7a4f6bb612cc8db31cffd8fd809294d556"}, "81b8d09a-0073-429e-b9bd-c2cef1e257e2": {"doc_hash": "0e4f27882a48357dfd5e236c8c5bf76ea2851ff8328612057168c0ead2da121f"}, "65b0dd20-9ba1-47f7-8375-cc009fd7b9d3": {"doc_hash": "9a2b7065476fcc8163aca03cd646e94538b8753017557a4db276bc06451c868f"}, "50a21d5b-cedb-4f6c-91b3-c942dc41a4a9": {"doc_hash": "9420966b5cf9c3dc5b01367d9ad0c70e8fae39198c1555ef342838c51df6ebff"}, "ed9c2ae2-a9b8-471f-8137-2a1141f1cb3f": {"doc_hash": "6162bd313d56e223646bad711c2d4568557b8c431a346b24d0752bf44f224858"}, "ba3817c7-060e-4112-afad-08241a21b540": {"doc_hash": "abba31ff3c3a0d25566b68395c7e1a2639e55204a688077da46bf18eb91e456f"}, "16ca91ca-62ca-460b-9d6e-bea3a4c5365c": {"doc_hash": "62903aa6ccce1fe8cf0a7f09ad38065b3cb62954daff4ac4e35a53876029c99b"}, "f102f3d4-3290-4458-8e8f-d40ea30f3252": {"doc_hash": "1787a3ed92cadc5627225b46a577fd81f2d1ea851e8669b4484a5e46855f6926"}, "a41e716f-6cad-4634-bb9f-0fb8a261743c": {"doc_hash": "c0e3ed07bdc0e7fbcc578e749144f818eade8cabf26381d1ab65ab26a6acbacc"}, "db49c8b2-9312-4063-afb3-4c8269b14b31": {"doc_hash": "29e8720c781fb2410a7010dbec2599fd4c8da4fe54f135983652d287aa1c52c2"}, "04ce8def-87fa-4f79-8544-0926d67d5870": {"doc_hash": "0bbce3d18691150cd2ebd70a2b31c1748be3bf406f198fc72f2d7c693da08a98"}, "50d566b9-ea78-433d-94d4-9735c1fea515": {"doc_hash": "b4b7156ed39d161223a8d24deee96786c840f244f8bf42811a3449d00fec423e"}, "d8f4db3e-05a8-46e3-b2b9-dcbe62e265ce": {"doc_hash": "3d53656d571f44c589c88a0b5a99e967f2e9704231458871f50cb060a123b207"}, "4f7111d0-ef37-4df3-b8d9-82e8a971e408": {"doc_hash": "0b877b1bc8ffc3527af0f6f4775d178d20fc7224b0fe389004651abe80653f18"}, "58c35991-7b06-4566-8f52-2106b0c0a7f0": {"doc_hash": "2eaed2e068f5c089b3d72a40ddf431ecbb47929e0c0578009f8290abb3c967c4"}, "501ea9ec-9900-47f3-843c-2258807b4558": {"doc_hash": "336dd03e5399225db3874d67bdc8a8cd0cbe645679a0bd2199c22c4b25a31430"}, "585619e0-a7c8-4b30-b022-a0b0c48dff01": {"doc_hash": "a754a51fe724e9d8e8cc3fa6dfb6cd334b02ad5b8ccc486210c3f67f290f0460"}, "17fb7561-8789-4797-88fa-cdd7f993897e": {"doc_hash": "c25d09420a033c88423b1e4896fc5099bab4b26506f77af06b43ec6f800070db"}, "79402688-9c9f-4789-a9bf-5b91203e8cfe": {"doc_hash": "ba178f00c21959d70b1e8a024104c561d4f3885c554c67796e9b2b2bf42ccb3a"}, "7a2781af-9f18-44d0-a9c7-5d77b171d346": {"doc_hash": "4b98122f30936f82ecca459fe2b5706b108f90143edf773a84b4ad82887e30e4"}, "71746638-73df-42d3-bddf-868718d83a84": {"doc_hash": "9e99ade08a27dd54e692419eaff7ba12cc856e72be6b02daa5badb7cc4f179cb"}, "b47cc354-d05d-4764-9aa4-966d1c68f1b8": {"doc_hash": "5eb7776fa3e12f09d29d55275ed4f5215993dd168a4055e8c94b89052a248ae8"}, "c26f8528-d784-4716-9157-2ac564ab3f68": {"doc_hash": "fb08e7d50737a42b5a1ab4410d4db5da811f468f51409ffd9a7a6e8dba275dff"}, "1da5111e-fa03-4c85-bb34-ca61e862500b": {"doc_hash": "128c99e7897463cca5a745620d6f4b8f55df146070c46f670f1d0ab3c38c29c5"}, "cea92d82-b95c-4e0b-8ad2-b36ce8e4445b": {"doc_hash": "4f27c2f48044176b514982d22b94af78e2c87274b87a083535b4b519c0fbcf6d"}, "c0373184-b4a5-49b4-a780-f6174b48448a": {"doc_hash": "5bdf757e3ac81a53417b21a701dac0a42de01dbd33050081a28cdfe91c909505"}, "f3786976-cf69-4179-81eb-9cfb59da5246": {"doc_hash": "76341c9e97dbeed2fbe0e3fa446310467a1cb8cd61dae162bef0c00b278c9f97"}, "7ef81e8f-e17c-449f-8d45-058bfdaf7b98": {"doc_hash": "ddd9658e6a2f585f384ba08c68fe38ca83a4ce656fb19e218ba5d4defa93cd7e"}, "d94921ae-3fa6-4e90-b875-066dd3aa4641": {"doc_hash": "fde96a08507749c1606d9620344510b494817b9e9a469ff5c6746ff1ede1c662"}, "17ecf579-a533-4c9a-8ce7-6c2498102b76": {"doc_hash": "99a998996f1676478eccf236e61fb73961b7fb12c8f75eb7ff7a4ad6dc19b0fe"}, "e78a337b-e8ed-4ea5-84e3-c6eaded79cb6": {"doc_hash": "ea09bd3ac604d60161d7fc84308b406719b90377e56d171662da5efea4f62017"}, "312feb7a-b11c-4749-9151-3d6813321e91": {"doc_hash": "1cebc2d4f13fc888f5e9de13480f4dc4280a057b5f17bf9adff49e2643f323d1"}, "a865d300-edcd-4f5e-b0e2-79c886a203bd": {"doc_hash": "f8a3461f99ab22b84e0845ec8457c0e189c14709018d9a9794c2aed318b39c58"}, "78f6e9f2-7fb5-474d-a1b2-23ef03347e35": {"doc_hash": "788e317255db7e53469b288dbaa8647d736fcb6c4f2a82633af930c3d0527981"}, "c7c18e67-b3d5-4cfa-9498-38e42a09e341": {"doc_hash": "74cd4cf71daceb314951057e17354738cefeca06f7a0c910fbbd0f6ee7adccd5"}, "0b9798df-553b-444d-baf7-48f84f4dd84c": {"doc_hash": "10f1a5a4ee25dea3f9e44bdcbb40084292af94be294539410fcac2dd3f13c0a7"}, "06786b1f-481c-46c8-b316-2803cc49276b": {"doc_hash": "23f8f077f4486efc282dc6b38b1fac7a17b65fd06d8df4a20fa4a00b1e44aeeb"}, "1ab6409e-a25f-4115-900e-e32d9761c9d0": {"doc_hash": "1d6fea739d016e94e8cbccaad876db4ff515f395efe5ff53a389fc3684604ac9"}, "56ff04f7-2551-4b24-8211-c76e77faca1d": {"doc_hash": "168b786e7d5825178cdcd7a39b1daea0a535db00ff67cdfa9464916aeb3b40f7"}, "57a9f559-274e-4844-92c9-18b688d1fc3a": {"doc_hash": "96e8cad8f366ecf486664bc0c52678ee4212a4f3e8ea3a635214a2054b4dab88"}, "8fd60477-d022-4966-bdee-cb993a91fbd6": {"doc_hash": "20fe1656e042195d8faf67498c5546bcce4fe4e1098a72512a47cfbc4cfb5d66"}, "6f36de66-89cc-4777-8939-740fbcaddfa4": {"doc_hash": "3e1742b76c8ddf41754e0c429a2c0df8b46f95c21cc39be065960c9d4b95ad8c"}, "8f647bd0-5d71-4345-97a2-c469b8e5535c": {"doc_hash": "50161297879d6050dfef41c812f0522db350ee84043b5ee4fa66169a762011f6"}, "4fa52b26-90bc-4cc2-9370-7dc73dfce2ac": {"doc_hash": "e4d2e7ebe9d0016214165c29eae840713a6397149d6a2a7222d3c545e32e5a97"}, "171b2a73-f432-4a5c-8f66-c8105c9d81c0": {"doc_hash": "09825623848eaf99048ef0d9ebefc81685f992f7e377be762918708b0debae6b"}, "47e9544d-a13c-4232-90ec-2d3ecb63ad05": {"doc_hash": "943ea37b06032ca604dff8025c8ef13364bc23552562a9bb60af4fe23a6e3ef8"}, "8f2b5317-a3e3-429e-8cca-a8d3d12a550e": {"doc_hash": "5b2edc8326aac120ea42883beca7c262807d2fca6bc1f69969a89b180570bb07"}, "4fcf72d7-05c4-462b-9b7c-544a09b75e8f": {"doc_hash": "6a6995f767101d6f5397abbda82cd5bb7ca64fcf0db5e44dbff779e64c0c0bb6"}, "33a5a766-7829-49cc-a83f-d43a13d24b9a": {"doc_hash": "90b4d18d81ea3b39b55eb9634828d51262f9eb1b03775bcc2baafe28e52e505f"}, "84933b6d-6183-4147-aa60-84f082809887": {"doc_hash": "7d2814e26e48417c85fdaa15ef8628667ac347c43eeafb3763c9f9ef86004f7c"}, "1833a642-96ba-49aa-80e6-d1280928ad5a": {"doc_hash": "65c373522f264cf257a517992bcd2a089cdbb2b17748428f3d1c8df2b9757b61"}, "9d4fa34f-6021-4bec-8493-f03fb3c7301b": {"doc_hash": "160fe0ad9acea6b81a0ee0ab01c53617b73a1e7ee7591511cf50640d0cb9bc6d"}, "b35d6b5b-ae3d-425a-83a5-71e25718e9a2": {"doc_hash": "5801149f25f64d8f8ed2b1a818bb56f58b7ab00c6767fc9f9297753d005280eb"}, "d45eb9f2-fedc-4d49-9395-afe2b76da43b": {"doc_hash": "1f1c32e207b55b61762b5318bd61c11ea6e61946c6d09861e69a70ecf4ca2e6f"}, "b349ed50-4458-44af-bc03-8c1d2942cbaa": {"doc_hash": "ed7ee9f4af75f5029214ba4aad257e632c98a02e51bda79799dcfa2f1d481b1e"}, "cdfbf39b-17b6-4813-956a-bd99193eb07c": {"doc_hash": "07c5ef8e368ef92cecccf4011192c035250bc3ee005cda020e31a7150977b116"}, "b5e1977d-d91f-4013-ad28-bc2a587e45aa": {"doc_hash": "56da6ebe7f82eca4d98f839107deae2c7c250b44b603868f0620141a2b80acdc"}, "8445d145-24b3-4a3c-b3ad-7a45f9c5ebdf": {"doc_hash": "e2398e7c4d13d2361bfa5508288580ae64be4db74e702e1c0e381130ca01201c"}, "8c01d67d-1123-4c56-9697-155638e038bc": {"doc_hash": "059a253796a3cc99db82ff8439451ac6bbaaa2c9f58ab41695164bce118de717"}, "0ef3330e-031c-4c87-bec5-d92e7636e1f9": {"doc_hash": "3cdba810313866b0d98fa8334f27f686f1395c823831c67d6d598ad7f04ba6b2"}, "92f4f13f-b2fd-49b7-abc9-db3f738807ff": {"doc_hash": "3b526146c8dd09770c5936b8d7d84d3c7f64f574f459af0b2c169bf6ee3769cf"}, "1249d603-3649-4f52-a515-09dfce380cb8": {"doc_hash": "8cdd786e328dffad81837285ac7042c076bc5e135716466fd06190972d03317a"}, "c1c43e89-737d-40e6-acef-194fdd1a16d2": {"doc_hash": "ebf4d014a2ea2a6e8a4247df9a0ba16ed5afd33adcf88db95253b797aab221f4"}, "1c1ff4b8-9689-49ea-b9c7-5cb531f60738": {"doc_hash": "7694231ed9ea764664802b1cfb225da69afa9dc1fee1416a9967b4d4a3634b71"}, "c2879172-ed9a-4603-bb08-eac0ee4c389c": {"doc_hash": "e54997b08c57430a28a7556b727c3da6091d589f49f035dfae3b335b4230b624"}, "6235f4a9-8616-48b9-a14e-7d95465a895b": {"doc_hash": "eb6458a5520515f8ddbafe5f9c2200c2ffcb0d67f194e1ad243346095f3d6016"}, "1ff4de14-7505-4fc0-b646-d3767121074b": {"doc_hash": "fc8060eb5906fcf651e6389a82f146d95336c939fda1df6664fffc190b546854"}, "533c5a8e-bc39-4593-962d-ca365256adff": {"doc_hash": "a102a33782164e791608bccabd292f25d44c7efaf25dc5c6c4c9855b048f69f3"}, "04294f1c-71a0-4899-88fc-349800d92151": {"doc_hash": "32cbb6246dff690611dc2ce5f5dac25f0900db595c82748f7a422151ee12cf3c"}, "8410ad07-37d2-4cdc-bc18-9c980d8aa175": {"doc_hash": "294602aaa133868e49b7860396c6d560bd8b30fde270c639806459fee63518ee"}, "11b1da82-ba3d-4f5c-aa0b-6b06cab87792": {"doc_hash": "8c2979495fee370a14ea4608983f7be8367715e70c1c3f263a73f0e888966366"}, "d095d85a-7c48-4570-ab5b-050df9bb5e92": {"doc_hash": "5f9bdfe9ae9df3c7cc9845895874d8c5d81924e5c38e2c81fc3c60c918a070ad"}, "24024247-bc77-432d-862b-70db80edcd60": {"doc_hash": "853c7f60b7871f0c4f4dc5a1fc1acba7907afd7ad4d3e43552af0a638ad4908b"}, "58368fc3-b269-4b2a-b848-e5bd6faba71c": {"doc_hash": "9cda10e1f3da5743d2afc3fa7e424d74430ec3df4896910d0f8cacd15f2be05a"}, "035c54ee-d778-4022-959a-69509213bb95": {"doc_hash": "c093e4986f338e88a9e9b00b967da90980d57074d005b942c7aa0f64d2edce3a"}, "b34ec667-a13b-42a2-9170-347c47caf6c4": {"doc_hash": "afa3a48dc0616bb2be58cc1ebba0b0b8c382cf032bb49b15e1004c5f06dedcda"}, "be981172-0b18-40a6-8036-444cc682f5bd": {"doc_hash": "bb709988b41bd81f079f29acea6840f35fad1fccde15e0851857102ff627257e"}, "13943530-2bf5-4b40-a5ec-a087febb7801": {"doc_hash": "e55ddb862bc1dffe9726d450ffea1af35eeda3a6f55f6dab9a6de167c9ff583d"}, "df4d6293-f49a-4a49-970e-b3e86bc0240d": {"doc_hash": "3dfecda107ec178c15c8494545e7a3bf95dfe9b569f04db2ec7b1539c138281f"}, "0a902ee8-2ffc-402a-96c4-f3023893ff86": {"doc_hash": "2c84fb325175f214fe183d13fc618d1e09efe5d5ec80500aa304cc305bba8fcf"}, "f34e2b29-07f5-453e-9b64-7514336d77e7": {"doc_hash": "cc9c673c5ab460fb6d784953a254306d9a81a68a133893bc90978c115e7f70bf"}, "ff062794-0950-4a87-b9de-feb4aee16fd3": {"doc_hash": "27c88e56160a6f546a40a76b9b74658c2a7e46e79a39d1e0beb7f04237bd6fe1"}, "454e9503-d98e-49ea-9458-365610a97b9a": {"doc_hash": "42c4ea869761f2bc337ee5e0aca643e84ef4940d362c472312b380f2bd35fda2"}, "3daae4c6-1814-45cf-8cd0-9b68c57f83bf": {"doc_hash": "90baf50dabea46ddc626a6a23f9b363f2c5041452d660cacc53220a1f645f80d"}, "bfde8e0f-eacc-4c64-aff2-05cdd7e497da": {"doc_hash": "69dc507a5a06df8a45e8fd7f500b53de4f78e7a8d0c4de0d6122e1cdf88c0562"}, "4b9389d6-1f83-45fd-b64d-734dc7f928ad": {"doc_hash": "70cffd1a907d89d15583d3e2b305e6521bc705b494ef4da87def9bc9a73d6531"}, "808f308f-e460-42de-8362-b0702ff3755a": {"doc_hash": "6cae111ebff4dba2cbb080805bb7dd6ccbb35c19fcbb2c754d962d373d68537c"}, "c4a97738-6616-4a71-8a78-b267f224956b": {"doc_hash": "a5f5e2501cf638b9299f0caa93cdd96cb387d7e00f8a4ca7e3b49ec6c6e7a5b6"}, "df2770b3-9ee9-418a-8651-e0313bb32899": {"doc_hash": "c8a4d920b74557f52de114f9f6c2a203a250acc8be97b9ae05e899f725343e52"}, "04295ed5-60c8-482d-a7c2-070a3f51f4b8": {"doc_hash": "dc26cda3273b1eeebd451f2dfbf066d35359bc6967520bc43af90c55d138ffa4"}, "2258c824-5608-416b-9c53-44ae5737ee66": {"doc_hash": "f457a7f8c3dded1ee3a3bcee831b0ea6a04ff0be7d0e3b8629122674456ca399"}, "b446d297-1046-40f6-bd00-47300eac2ba5": {"doc_hash": "2f16d008394e89166806b2588d82e7f14353598580c0a21c60c1eb22e6ac8719"}, "e798042a-06ba-4c76-866b-62dd2d1878b3": {"doc_hash": "609cae2ad867abda20d64f00bb0c91f330be7ac3461dbfc81a525bd56c264ed2"}, "b820ba46-023c-4fb2-8177-b50194f24470": {"doc_hash": "74ec34780fc7afbd86361c95c736a9062cdd86d81e108d12cefe69aa55d10ed0"}, "2778ee9b-ff66-4da4-a9cc-152ca02d7574": {"doc_hash": "a18190eec7bca45fea4dca82a96b846959f175de503cb10bd6c621dc4ed0b458"}, "601bd0a5-b19e-4588-a58c-49a82cf26673": {"doc_hash": "f7c3e0888427cc7599c81aab1c0da9791f15a9c323fdef836fdf461c53c0f962"}, "a3889e09-5033-4979-a2ff-1af3e00f8530": {"doc_hash": "e74959575734d0be98625c4fdebfef99ca350c9285483ce6a668ec2adc2779c3"}, "13e3f6ea-b1af-4bfc-8d48-3c9939c811a3": {"doc_hash": "76d13538f7b4f673dcb6253aff99ad90d59207d6d4085ee32fd34654b6f93618"}, "a4a3c2d4-bbce-4c48-bbf4-e81b3f0ddf8c": {"doc_hash": "ed271e8d6af7b9a0a8ebef9617d7bfee7fd4c38e957e17c4e47f510626aa9f58"}, "64724ef1-d87f-4202-baa1-312eee0c582f": {"doc_hash": "e6c04eb034e57d2adb126a7599e4c4c1062b5f2c07007f794c039c614e9dce86"}, "4e3c3ba2-ca60-41cf-8a94-283f49b67e70": {"doc_hash": "36db8201c9ba7252541d98138f7f4de811fe3c14118e3cbd28f6adc04d005b9c"}, "a7998094-23d0-4a88-9e83-28e76a6e0cfe": {"doc_hash": "1565652a32a29005da40d1efe1e6fea4960b2d5fdf070c8e1b538dacc54d4e75"}, "c2d0205d-507d-4596-9e3b-b333903da97f": {"doc_hash": "62fbf1acae77154c7def889fb9a18015b30951e20f5b3166c719903c202c08a1"}, "79716b6f-0f56-46a7-b5df-1cf41524aca4": {"doc_hash": "157217ef1eef2f6f7f9970c8b063765d9f2538c0b046b8709a13a4df096533bf"}, "c621376c-b93d-4e1e-b3fa-2da335c2d91b": {"doc_hash": "0a1de5c8c00f330ec535ae4fa3b15e7dd58c8cffa44173865433394e073c90b8"}, "523c34de-5d74-4b77-99fc-a7520615c1fd": {"doc_hash": "70f8cfbe211271a2a8549eb70c35744f10298b36bfc24dfc0c447f685fd7fc42"}, "fb163a1d-bef5-4b95-b080-639034e23e8d": {"doc_hash": "6467b7bc867fbde4fb67303e861e248c3f1b4122064eb04389dbdba84fbafb46"}, "847dfa64-f363-420e-9173-de2ee0fe4307": {"doc_hash": "520910778d306a65bebbe655c682761ab70c11153e6c66e44cb8cbc9f00bf0e2"}, "96d1cb02-54f0-4260-baca-92e8ad4e99c4": {"doc_hash": "1985c98e47def98e4980c82510cbfd3db0b775e2cf418e4b6c2b913d42fad165"}, "01590336-38dc-45d0-9ef7-b944aa65676c": {"doc_hash": "5e448e88eb0818413a1732fadfe6f630c0aeaa28876dfbf4ade464a390cdfa4d"}, "f761d854-bca0-4e36-9c41-653a1b4f3421": {"doc_hash": "2acaae6a3cee9410690fb6bbdcd7446d961e191542c0799a9a5a8aaa0c2f9c85"}, "1d33d3a9-db58-473a-aa8d-d3e9a9b0eec7": {"doc_hash": "7a1c44f4c7723eed70df0193ac3901a91fda580716fa26f4ddbac28414404e1e"}, "2087346d-2bc0-4689-b908-3c5f5b6089e8": {"doc_hash": "77462c2c483efffbb92746b79fc19548d4d2b057881ba8bd24a31d2945d3966e"}, "c9566022-c51a-4f4c-9846-1ed37524cb46": {"doc_hash": "6328da746cd2d50ed26a5560bb6171c5fabd0ca5addd044a509914a5e6a4270e"}, "d0b22fc4-e2f6-496b-a5cd-34514bee9af3": {"doc_hash": "73204f8c64caaee3726fdefaf6b6dfca2d29f97a3d6631aa0160d59beae7a706"}, "74390672-7491-44fc-b7bd-a6cfaf163da6": {"doc_hash": "5654cbaaa2f0a1c8f71c6aedb0102eb6ee8c0ede63c83440d913e9a9468c6493"}, "77474efb-09f3-4ea6-bba1-e1bbf8f820c3": {"doc_hash": "d8af012ad85b57e09719064b451cac507eb7e76b497205e53cb09983c48e0710"}, "ce144022-ed5a-46df-b903-a8e29bfd86d2": {"doc_hash": "9009cb987ba9d7d568cc0e1caed9cd364b5f7477d3bf52dd70248e3469bec861"}, "9c6b9848-8a82-4b2e-85e7-8623670ef543": {"doc_hash": "860270a69f2f5a2a5d53f39ebb96b6e21330f2d67d79851bce0123a649e9e83c"}, "61326df3-41a8-4410-aa6e-2b72e17b6f63": {"doc_hash": "32e954d1a7ea4a0b16b55b9df32a5ba4ff32e182f9706cf82d02512fa2ea7772"}, "55b0e483-79e8-4911-a535-17ba40ef20e8": {"doc_hash": "534923c8e7259cf6ffdae20e019f0030d1c5dd6762e23926e014ad45bde7e5ae"}, "f5ab284a-d13b-44ae-901e-696b7bf566f3": {"doc_hash": "37d5dd4420316552ece99766a98d78db0c78c7f1be30198cd91427aca69337eb"}, "65d615d4-9a7f-44ff-85d3-c9c12042a7f5": {"doc_hash": "66cfca47984a34fc0d2e69a4aed8ca960abe558de8c2132e6447929fb1ab6f91"}, "8aa45dd3-152e-4fe5-8a74-c33f9eddf7f1": {"doc_hash": "46925cdba8e3fff27272c3bbe910ae9870b1851771f4dfa23b2b0c4e50bcbb09"}, "d68912c7-b88f-47d7-9356-bf07853506bf": {"doc_hash": "d0ce4b3165ecc249ea414b9a17e12c31b933f4e604cd3820a1d4e7e6ab146707"}, "eccf149f-e6f8-4614-913f-7b7c9c723345": {"doc_hash": "73ffe4c4c521707a0d5c6cd3a19904ea915789c207ca0b9ffcc9980f1979515e"}, "bb93b098-724a-40a0-bcc0-c7de610e9610": {"doc_hash": "a33f84d4a14e329dadccdc977c0fc55babd2649d14a581a302fa194cf4975a2f"}, "bb35a539-8298-468d-a515-eaa4ed534bb3": {"doc_hash": "db8f5116755b7102d2d2d599237056c8dc2293214ef9db272f5502b31565c9bf"}, "95bd720a-5f31-45f1-aaa2-baf1a2b64a45": {"doc_hash": "5c68c4951dfe7354347a2ab5df2a1694bc3814b1d3564928b6cc440dc328f576"}, "60f3ea0a-2521-4ea1-b7e1-2f329e4fb973": {"doc_hash": "600ff8128d9f1bc00bbe46cfa6a8e46743ad6fd7a15b696b3725a99d39689ba2"}, "3aec7351-eb52-4f0f-8299-c25d5f9ea2e2": {"doc_hash": "03ef41982e79be049520ce09f237b421364614b0b9738d8e78e4498d61fc2c26"}, "7a5c7291-b112-479b-8e30-ce806822f728": {"doc_hash": "4e1825ff5e1471d8c9b7fb5fbc6a834dca65f5359f8bb5b726cb4cc35bdaf404"}, "3a4cdaaf-8893-47c6-a2d4-f8d507818a07": {"doc_hash": "13b529caf8dc17345279be7ab6f6989209dc33dba06a35b38361d1f2970f46ed"}, "dd28ab8a-cfe0-47d3-95b3-81438f0bbd78": {"doc_hash": "96430232e4c6da11ebe5c7e37cb556cb6c43d505dd6797e80a88cdc7eabf74f7"}, "fb467902-ca22-4239-9e1e-387fceb1f217": {"doc_hash": "f091f986a31345fc30ae153a3d58268d2a1bf78695a61c656ae1d7b8d4c052ff"}, "5882ac51-25d2-45cc-9953-af0fbbac5da3": {"doc_hash": "ad12e9e069f84b38edb1b28f6027fb962eca9ccdbe998ea0f388aa210ae378fb"}, "d3c06861-6c8b-4652-a4f7-ce2612691539": {"doc_hash": "f2e541db5f0591f44b6166c6cf9c6851f94b2e6aaea31c17a9c40f3724113f08"}, "50c24e6e-999b-495b-aa7d-fdf1f496d24c": {"doc_hash": "05197b309f395de88b19513f3a51c4bde47550606419a897351afcfd5e4bee84"}, "984c85eb-9277-4c37-a8ab-92e2d5938a2c": {"doc_hash": "7091690d3aedfe74bad16da2c1090a3e9eb268423b6145fbeb5dc85f2134d7cf"}, "9de54e9e-88dc-4d2f-9d3d-6f1b9dff59ce": {"doc_hash": "6cb7967a185483f27216f6892a183e264d17b4682b28f5ff750ef58f5fd66aa1"}, "84f5d966-dbe4-4ad4-931f-7bf5d6966061": {"doc_hash": "fe3856e3c6fc32d415dbc0a05e2b0fdee6eea9885298d1f7e6b1924b83cd4fb7"}, "e9d940ef-32c1-4119-99b1-51f06458193e": {"doc_hash": "a833f705302c0113030e413e775c19fabea277f4755bad19852736ac629eb2ac"}, "471da96d-5fee-4129-82e6-056c224d5a33": {"doc_hash": "826c7720e213adae45ed8062cb8911f73faced817d58b2a9621fabdda1cbd943"}, "24b7968d-b5a8-4ac3-ac26-7c6362ab89f5": {"doc_hash": "6b0933e344626a14ba109d02e2297b214023a06d9a8ba8c3e7e15f077b49f18b"}, "4a6c5380-66d9-4789-b4f8-3fd17d182856": {"doc_hash": "f0cb169032f0987b323d806e35f9b00cb1f7e00b1f27f83f99febad02007e0d6"}, "9f846d56-e30c-473c-9ea3-178acfbd447e": {"doc_hash": "bcc09ec5f131e23448e8a3d1bbb11fb311fa650510b61cec620bc818dca3fa0d"}, "142d367c-594b-47f6-a4e3-68d59385bc9e": {"doc_hash": "a1394953027c6502d1ef71acdb753f3cfdfcb59e8d4899d32d73912cd83a176f"}, "8e0711d4-22e9-4ea1-95d6-bf1c8509a9db": {"doc_hash": "5e47bf9defc1f83459b75bc717095df9b14da9ae41df2415335cbd9ed03233c2"}, "822fcbaf-3123-4ef2-baad-08a0f7fea783": {"doc_hash": "84e4d4054c18e704494045d2578dd55c619dca6d9102874015dfb72d4221f083"}, "c51c07ec-2e4c-4521-b7f8-43fdb988f86f": {"doc_hash": "387ae1318af298047d2b20701bd5b90a7560b1dd2584af85ada05a08d3d04bfe"}, "d06afe50-8986-4b0c-af49-18959ecb9aa8": {"doc_hash": "18c4f31b5d0fda4910eded2e086b5eaed52a7250d885f38127cbf566865f0192"}, "6396a097-e849-4738-a924-29c7564d0e90": {"doc_hash": "6bde24d705eaae98dbfe675cea46a6687161d1c3c4a3ff549f8b43a23b7e98c7"}, "598bc73b-b6b6-48e1-a774-36cd6effe1fd": {"doc_hash": "bff37c65ef3eeb855299a6b6106bbe9a4b9b9e1b076dc24709c971a3e4fcb924"}, "8db89cd6-92ab-4be6-9c76-41038b231f8e": {"doc_hash": "8d9d7c8320c149710d3c1c2ad55c403bc53ad01ef6fa895b8281b8d2ee887e39"}, "9b5132cb-efb6-460c-a975-02f54ba474bf": {"doc_hash": "eb7a981397f73dc465af22aae299aeb531f94e730a8dd84b6a903b6adc7e1a2d"}, "59f72577-8c48-4a6d-b84b-84ea1416091b": {"doc_hash": "f7c29dd0794ccfc898608727a47f357e9e40f770cf80bb260783e3debb324326"}, "dd43d9dc-91d9-4db7-a3c0-c23cd7942bc3": {"doc_hash": "1c0362e3931345d1aa21ad5235231476ccfac43a8e7eedb865296733a106443e"}, "95d868bb-47ee-4780-ac71-97277bb5dd86": {"doc_hash": "04ee085244dfba0507b009e4bc50b08d224dd4cc243fe9f49d044e1a1ae29cc4"}, "0073762c-c4ab-4bbe-b9a2-9e5aba83fb72": {"doc_hash": "fa9ab1a2cca8661c65a25a91276b28813f2a15856950c186e18357b00916d354"}, "5c1d4580-b1c5-4ebe-9325-57f2738062ce": {"doc_hash": "0e1196e6ee460ef87aac41a3edb23451eb8d704f4aaacc65b6a30d179406b66c"}, "b49d7878-00ef-4604-8d31-de36f9ad50ca": {"doc_hash": "e24553903480658f5ebeaf7539b5c5b2f0b60adbe36b0ad6661d156e2ca167dd"}, "47125f4d-f9e7-4cf8-bc34-51c8ae007c1f": {"doc_hash": "fe0d156ee182910820f38b8281ddfe01db4a5d19379a33fcfe0356e1a13505f3"}, "9fc76c08-bbfe-416a-9eea-79e614d9385c": {"doc_hash": "f63197bd73f57c54febfc649a241d7f4ec7f28de1f21686903aa947a0501b1b0"}, "6966981b-7338-44cc-917e-6a07200d0da6": {"doc_hash": "b024b4543984a95ee3bed94da92c15a7166da9c4d6e7d4f0df0327ffadec62bf"}, "e05ca300-1142-40a3-a85c-0ca3867b0f9f": {"doc_hash": "5ffd0fd633cbd216680e950474ae6df663f526897103e52c1ecdcc2a68afebc5"}, "4bda54dd-18a3-4bd3-b20c-23c67484fc82": {"doc_hash": "64c3c367313d3dda0133e6f293ed5fb4ddb160b370dfe5fe3f61af0d69656cb9"}, "101d9b50-5af3-4710-a1d7-be0be12ca6ca": {"doc_hash": "944a5cbd4d5c22acdb20fa08a12d5cf1df5ed40bf64a339287a882f3d0d95566"}, "bbf39dbb-a052-4d9f-bb1c-947a3c77009c": {"doc_hash": "2bfb69cf490583cded61ea613e7242756cb631fd17ff2fad0036c98b0052d594"}, "f3dd3687-2097-4bdd-ad6d-766cd0641963": {"doc_hash": "8cc236e8cdd0f4ed47a828f6bb3a1b64e9ab4fb0a371ca1eee380aeac35ba1de"}, "7abe729f-cba6-4d25-9fa4-a15abd1d80ed": {"doc_hash": "577e3b776c326ec1fe9649d35516ba5db769226114d26a2da02b9469c84db3ef"}, "d3630451-9ef4-443f-b446-3e7c255fea8d": {"doc_hash": "8af4afb47181a5f51d1c04767f1cf5a33095526d908641b7266a343aeb58d73f"}, "c9044581-d8ad-4c29-b379-301c5253fedb": {"doc_hash": "84b299a16cc6716290e567c7840ee8f39c0264ab79b23424b92bfcb9a018c434"}, "e3e1c423-adec-470b-a9f2-7320e8d42e9d": {"doc_hash": "cc970ede05aebe68cc3be59da3034454d3cd9d9e85a16be10a661bbf63433307"}, "0f35ac51-fcf1-4e6d-8a39-4c0a6e845348": {"doc_hash": "9454fd56ea0c4ad31b083e9ad2ea4bdd68ba5216104f4621453cf721529814e7"}, "6766e09d-be70-4a7f-a0db-8062ffa906ca": {"doc_hash": "7c2520856ca2a2f42dfec951b91b9931eb7cadd7574c565385344705035398d2"}, "164f5556-1567-4c0f-8f56-12e246077b81": {"doc_hash": "6ca347734e8a8378cad94e1f5e068eb9f79715ceeaa654b59197b78c25a30380"}, "ae08fb7b-2f0f-4945-b120-3b66f07f0ca7": {"doc_hash": "d4644e19fc7869b6814ef643756e7f280d566e8f0f83f9c78c6a45e3135b5e10"}, "08690d1b-ff95-4c65-b857-52b41a5fce68": {"doc_hash": "d4fc8819d63823ca95a6dc8054b565a6e07cc91878cc45b6b33242b7c8d5a9a0"}, "7eb22a5f-6ba8-4a59-ac34-1f7ce983ec9d": {"doc_hash": "6cf9900deb03c5fab0be1a5b94d90b3b96c6a9fde189bdcdd85f51bfb5dd9275"}, "6383dcbd-5e80-4be5-a945-2fd09b3fecec": {"doc_hash": "e9473098f5743a2226a0b4db4a8a38248a3c16da128461bc08d4d7e42ede744f"}, "c56fd3fb-b2f9-470c-bfc8-dc44c85abcef": {"doc_hash": "0496446b564f9cf7a4f41e7dbe27ac318914494ede42062ef0227b77386207f0"}, "8984e008-85af-42ae-921d-989fdce6fb29": {"doc_hash": "ea4d9d3ec48335b8c64e7304768dec384e8d29dca5c527565c4751761349298b"}, "9ece1d9f-b93d-44d4-b775-a76fc90b325f": {"doc_hash": "f3de1d3c097f65d1eca1928344f60d47279da6a3b972604d14d3648d24c40f28"}, "0cc902f0-893d-4974-bb84-62d99cb8dbc2": {"doc_hash": "70a4e9fcc236fb11efe5176a713c84d1321511c9683567d6f40abe9fe45d54de"}, "0c14efea-afc4-48bd-8325-e1184438d847": {"doc_hash": "aad5297176d9d882905296282657eb769cbb81b8e04fbc48fe240951b75e98fc"}, "8d55f6b1-4f6d-413b-a995-bd0584ca362b": {"doc_hash": "b27f35550b4042d00c77d2a07b809b20ba9495eea4df84b50bfd6b74bef9c6af"}, "4e8508c7-1655-402a-a44c-eae02ceb1211": {"doc_hash": "278dff4b8eaec7ba40f85128243c366dd7257ff73d12af714ea8f0e20d67d257"}, "47831282-51f3-464c-b1b9-17c823220e95": {"doc_hash": "d40b7c8d9df622a1e584d8b5665f77ca6890433227662ef94ab6489c92c6ea29"}, "d1968bf4-ebb8-484a-86a7-e65acb1eac7d": {"doc_hash": "6fb286565627992b11d786fa462ce4d40bbb6565ebc478bc538ada4bdf5a12e1"}, "52c6b19e-6042-40a3-b58d-6ae76e65fbc3": {"doc_hash": "296ea5d965ed6f013046c23a9ab3b961ada39ed1e1da349db9b0cdcd4f927da6"}, "e808703f-b0ef-49b5-a124-cc370047eda1": {"doc_hash": "5ea9c5e4d7e4c0f74fe59a486bab0accf530ae3911094f488a228fb9bac1bebd"}, "7e2080aa-54d4-4cef-92d6-f7ca34245f66": {"doc_hash": "6920f3764145468ea5210bd3209fc5b5526e86dd326a3569a6cb03ad32fc5621"}, "23480905-dd0b-459f-ac0b-44f8bb4b99df": {"doc_hash": "2f102a0559ac893974a80bd57bf51b81e46a1fcb64666912a24eb3ca6dd9c359"}, "0c13dc53-0e41-4464-b694-f336f2ba61c3": {"doc_hash": "e92d0ed1da0cc6c3ccc5ed92f1781a8fc8189df7df98e026cd5287421c828102"}, "5a53e60e-69b8-4079-86ef-835b90a2d372": {"doc_hash": "9175922a06176452d81ba27c8358062b1a77226cce2eeb50d96accdf66f22fae"}, "aaf6782a-b13f-4e1e-8539-4c1138bab937": {"doc_hash": "b62151891f688747b0de71070e629e94ff3c79b9a8ff39b3797dc4ff8c51e84d"}, "a12dd3a0-c76e-45f6-8cab-a9af636740be": {"doc_hash": "336c09e4be89c4898890ce53a2bc2d5033fb0a3eb5ef1d651908d84c94d3af39"}, "35416d19-098e-41d7-a7ec-23e8b7fa581b": {"doc_hash": "4a6b371b60460e382c82c5cca3c814edda581e4c4b68c145d7b36b2a045b8556"}, "b6a2edac-6860-4bed-8853-a8ccd390f619": {"doc_hash": "a3cd2ce737ce1bd6f368c59c6f6113081adaa681555f155a742f717fee578582"}, "0174ed96-4bf1-46e4-be9e-3c90009ffd85": {"doc_hash": "d84593ba3387944e16808073c21fdc0f4fb2efd55990cdf42f6a51e52e3bddce"}, "8f2108f9-9ca8-40e1-95ff-406b0629315a": {"doc_hash": "f6462ab1cb449c722b361f88e3c3ae2e374b3dd53d98891ed1bc98b950699b25"}, "a4417c2b-bcec-4c78-ae7c-792c24060a77": {"doc_hash": "f2b8dd94a82637a5d36eea3f60e76c389adb0dba70b713c8aa2a131754228a6e"}, "6350ea15-0206-4253-9718-fbcd3587e071": {"doc_hash": "979c520d7c34057676123975296412a08fd695ff41154c8f3bc56e0f2db6a6e4"}, "6d11e0c1-396f-47d3-83b9-83bbcd2d25d7": {"doc_hash": "95435ad764f1973bde1f4466c3e105555703758c070dadeeec4298ff6ff61742"}, "d2e31e26-eaab-4475-bac1-c4f653e00610": {"doc_hash": "8847d7b5e2da5f9b48e1037ede768a909199f9f406dcf8423fb350f5ea3cdbcd"}, "2e59d76c-f196-44c8-86a9-4c078bbf38b2": {"doc_hash": "01e56613444429826d77d42ca2931bf9985ee50b61e0911cabe50ff62b611720"}, "d9e7609a-b1e8-4256-95ec-409d18e1b8e2": {"doc_hash": "26bc0df0a3c83e884eb2952c937bc23eb1f32d9fbd31e91199e3e22fec7460f1"}, "66f7c7a1-9b8e-4577-af30-ba27f054fbe1": {"doc_hash": "ddb39e84c10f818abb3b558def6b0e394f7dfde5d2f261c64ec3c64d46a90b7c"}, "38b6e540-9bf6-4380-9766-667d13c44e44": {"doc_hash": "031423ed0cee77cef326d958ca358da9bd33a0635fdbc312d3a655fa20cbfdd6"}, "6ed619fe-34f9-47e9-9647-da4041e186b6": {"doc_hash": "30a0b98912cab662f5798fcdac7d85111406f68317802e3ab318bda30bdfd0c9"}, "bf7cad1e-ec36-447d-a6fc-834160aee001": {"doc_hash": "280df94f40e42f19bc9097078cc08f5b3048420374dec8382756bfe11997cac2"}, "97e6ffbc-0027-44b0-9d5e-a51446584ddf": {"doc_hash": "8fe8390e8eb14a5c85a38f072e5642a7e3da0e3ef7b5b3e7868d19c046d54c41"}, "d9702fe6-e7c4-4384-8759-55dab38049e3": {"doc_hash": "7019f6bcac1aa133297a5b63dab5d2733c734b0d524a1ae1a53e7932cebd8548"}, "f9b9cc8b-e3a4-4ebd-8fb1-0f0dafc07391": {"doc_hash": "da0d28e2e8b110ecb40df70e6ec56a177bacfe9dc252dabc0619af8bc2f8eff3"}, "b7d0e819-7277-468a-a1fc-3c5a23b573ac": {"doc_hash": "29682a28b3f41ce77284ab5d202ae4751fa162719317136c40fc4ea18f879810"}, "8adf81da-ee6b-4ba6-ba04-9d3d38a8af94": {"doc_hash": "2e6b01412c2d083e633014a9f090343d81c2aa15c0ced37fe414aec603d50c21"}, "1bed0ae0-8de1-4101-9dbd-3bdc3f94009b": {"doc_hash": "2159fb3d391f4cc8a60e7f5d430aeb9178349edc87595a71a9332150335f2764"}, "b6f0b1b2-2e91-475a-9be4-3c326b6692a6": {"doc_hash": "82e203547749d948de814c299ff79e8b01d8e371ad0d98dbe53f5e01b15d00c6"}, "d7e82590-2655-4148-97e5-6c8858dd8207": {"doc_hash": "39edb4a4b5a3e11a80ed10319324e10921e6c9e0c322f21fd93a1fe92a908acf"}, "1dad0152-b339-4d5b-afb2-545f76225144": {"doc_hash": "13d7052a95346b8468ccf62bd1966b182fbc82c7b5ebf869a5602c87dd5232ab"}, "4944cfcf-209c-4154-85ca-7af5dcafa297": {"doc_hash": "80cd8f42ebcebfd4eb1dd1b74ebdfe73c94b28bdc25981b27e0b86936e10ba1c"}, "4e164241-db65-4bbd-9b55-8e826f0ed769": {"doc_hash": "3658098ff0ef440884dfe2da1525f4b90b32366c157989f3c97c3f27e0650ed5"}, "559d3393-737b-4973-ac0c-1c4053d18064": {"doc_hash": "7fe1c14777c91ead422ae674ace752aca8f5e8f6f9feea6abd0326de66088129"}, "37c0d72f-6c52-4add-91d6-6af2261f7a19": {"doc_hash": "488855d983a06c2d3aee19dcfad993db8e5e45ab35807bd08c21868c695518d7"}, "98a7c29d-818a-41b0-80f7-566f0c25bd0d": {"doc_hash": "9270cbd8e0cc368a691c067e4a44197b6980069f6e2a374489b71392409f3ea5"}, "158ebfb6-2b0b-44cb-a90f-8265433b43aa": {"doc_hash": "41a757454df108e67b8052bdbe68920292c37f455e5fb6dfe9884cabb0414e02"}, "03d20b1f-3088-45ea-b30c-48f131bf6210": {"doc_hash": "3f914403ecf3176b28c98d306769fe318cfe9f4e6748130f5be9dea974860f56"}, "d3511a93-f31b-47ed-9123-1db43f75db36": {"doc_hash": "c76b681c1001a7695a3f8929598f06b0314438c3f27d2c50fb906e46d3f9c3fe"}, "10c864b3-12e3-493b-85cd-b66477a640b4": {"doc_hash": "e2d117c8d754b96c1219668a3f74296f1fb1a4209b85c256d9763096d50ac6b4"}, "9d6018c1-d7d8-46b8-b9aa-27e4a5593414": {"doc_hash": "f69c64a5d75de67b0499798e389bfab1fdd4b4966697873a0c45f116154c3f78"}, "3785f86a-f795-4fc3-8d5b-57380c0b5454": {"doc_hash": "2ab85dd806b1058b034246d01d6195ac20b8506a089cc73c04e811353bb9440c"}, "ddb55fe3-ce37-43f6-a197-55ce72b546e8": {"doc_hash": "d15a2e79086b28bddeb536b331f61c0d3effa3b5f3b90c205819ad1191e13a01"}, "1c3b9119-c763-4351-a029-d8176748e49a": {"doc_hash": "9c02a5e74ff72f024f54b2781794a8c4847d5b6f07f7bdd40f20fdbef620f505"}, "d24b6914-40bd-4c8e-80dc-215ca13f0a30": {"doc_hash": "8a199fb13539ed3028668aa450dac50a0f9e4f889bdf0ac36c5592f9ad5abbaa"}, "62d2a812-84a2-4b7d-988e-5b48a2ecc60a": {"doc_hash": "cc0737da4c162172974d9d120304eafa0fc372d7a1c0a78ba2ca0fc6b35ed801"}, "1c386962-7580-42e5-8a3e-cd90f5b62749": {"doc_hash": "62ec1c44817a00beb52bc18dced6a56bcb6b63eb15f62a29e6ea8323a0983b66"}, "ae37075f-78f2-43a5-96a4-7dd4daf2a986": {"doc_hash": "3ccb1c2dfaf2d8d3d718636d505ef602cb50a54232cc2cfb4a72d1caba4b6834"}, "05ef1353-2216-4276-8979-b308ab3505a0": {"doc_hash": "7cdcb6e88948e451f3c544615b09b645ed87ff674737aa4279e917db95b533c3"}, "cf222b8c-7d58-4843-8345-7a17e2697730": {"doc_hash": "c33e7e7f03d473ee148224de9627690258ad41ab749d7a78413ef0c8619ca454"}, "e03b46e2-1d3e-48b4-9b81-13bcc41d6e39": {"doc_hash": "6f6a13aa8aa1d8caeafa374f073befb0752e8617226cb119bd43506753840d1d"}, "8257d49d-1b2a-4c05-a3ac-52da3cd51593": {"doc_hash": "3f3c9134e384c6556e895a093de964be940c4714b7e4cf8daa0e191475c82137"}, "3bb978ba-518c-4ef9-bcf7-5bb5c92b409d": {"doc_hash": "7fb603a5958e3d9848589c79f013cd97dbe5e0d39530b78d15dd3edc2534e9c6"}, "ceaee474-275a-47fc-b924-2c2427f6eae0": {"doc_hash": "956f7bfe832b180d0beaa39ffd17312636f7e0d1fdb00f69e379133b3704c103"}, "a1d7f444-9de8-4e00-afdd-932cf54f89cd": {"doc_hash": "cfd4ff179720a7bcbd6954360f0d3478faa8856b0faa8c8dffde788c413c8661"}, "baad1fa2-7af9-4df4-8f23-0639e2aa031b": {"doc_hash": "e4150b63c53aa7f32db576bc8bd67eeb1465510d33413af22a49592c9961126e"}, "12bc953c-96e3-4705-801a-376347ee59df": {"doc_hash": "3b3f3a8af95a7778aa9602ffe3de0aee10b07ee2228529679fdcf4da95ed2bf8"}, "ea107150-94cb-473e-b97c-e7e91768986d": {"doc_hash": "61fc3bce6920ad85a5f067dd0a4b54a61be4cb632c665995ad90f8840128fe7b"}, "2c814c7d-18d0-4a21-ba32-34f97170a497": {"doc_hash": "39ed0952e09b7aa20c0c6f91136cef088d0cf44f92ad9a541831b4a936bb9ec0"}, "82888a98-2bc1-4583-bf6b-79956ab74a22": {"doc_hash": "14b5f7cbe17d77705ff47c6f177bad2706e3294c6d849d6122cfaac541914706"}, "e726c48b-0ebb-4ffa-99f7-d24c1f379003": {"doc_hash": "a5a2684fd2346c107ed96e4ec329df6fe2a8058165d43716600acffbbc32eeed"}, "2b5fd0db-b1e4-4ede-b954-35b489783791": {"doc_hash": "e37d9b4be9654ce0b24f06c2b3a480570f7b78f6f200ebeb6ba5dac1669965d9"}, "93f7c788-06af-4748-8b39-4c1d3f56e545": {"doc_hash": "abf1ddcaf49911a064ac09e437735aba410e6ef6379d5350308e7f5c20a6bb66"}, "2016e50c-034f-4ffd-96da-d44c14125cfe": {"doc_hash": "fd4e35d4e8d0912d28235f32f1160892679a48e2bd136bb17701a9630fe830f1"}, "a5b91fec-a11f-44fa-bf4b-232e0070a308": {"doc_hash": "dbff79d9bad06c8043fd8ad54286f9211dfe6d24bced12fd5bc0fee92d789c46"}, "bb17e666-b7e5-4054-9001-2b5b109939c8": {"doc_hash": "077526e0acec0a26859b7382110a1677d513a9456c1d64c44c0f3ca09761534f"}, "f5a205b6-1f4a-4388-9634-f6e4aa008177": {"doc_hash": "74dbc0a1b23cc1252ecd222eacbf2293cafdfd4a9fa6df3ee0472f37fa3486b3"}, "fb1bf3dc-e053-4443-8804-e91aafeeb452": {"doc_hash": "4a7ee9ead6277cc23f7f2dc257f3d7fed4fe1035f568ac2d1de0a9f5f529a88d"}, "3f7ba9bc-cd29-477f-9e76-ab8f0e0b871d": {"doc_hash": "8570be22d9ca3c140eab7e2a8e7d8616d625484eef5ddf5e9062a215b8bc9ec7"}, "4d40f815-520a-496b-9477-c754fe5c523c": {"doc_hash": "36813598a7c1e127ad52c08a75743b82fc0399db206fcfcd25bc266ccdc3d608"}, "d619a671-8390-41cb-9b86-56c068fe07b7": {"doc_hash": "7ab65679260876ac2e9b49f92891d9276089d3db3563ca63cbafcb70f2abf636"}, "ae4e1199-2d9f-49a8-a7ce-6116ef320f62": {"doc_hash": "e67b6da2780d1387d41ab3b17d3c2851945a6b874c9dd626a7d5dc46a4d966d5"}, "876ddc53-d04f-478e-ab47-3902f8fb2425": {"doc_hash": "7a12c383d610f3e30ce55339900439dd8394dca37c0d1fa9438281e2033aa21d"}, "e8be341c-3dc6-4428-9356-ecfc9f712dac": {"doc_hash": "e39b9df6efe6ce32754a69c95d9ee9e39eaa9848f3bc4294ae7d65bc62cdafa2"}, "a6d6026d-d67b-480a-bc73-5bf4b3f1a969": {"doc_hash": "0269f585852a70f70448719e4f9389a059dd24aebf81f346be9088cd00e8d204"}, "b1be4d11-e41c-4c0c-8a75-94212634fc6a": {"doc_hash": "2d501b2082808edc736b22a18833c45c42fc09e6906e9d8a7e4d76242b2e48a4"}, "6984a120-3107-4103-862a-baf3f3011dea": {"doc_hash": "b65f411b21c66170c3e4a0c09c4e03842d6b6c3fde175537264a11520bb9a7d1"}, "1512dd2c-8738-4424-b798-19e468b80f25": {"doc_hash": "9eceea7e4ea364011a61c1ffd9d429285fe239455d27a8498bee7543ce3add60"}, "c67f00c0-a677-4dc8-ac43-7c367a1a3246": {"doc_hash": "1ba38fa4ffd3400b5fa8aa4eedfc311db2f493575a6e9fad033c493f53ca200c"}, "0b50f383-99e7-465c-bd21-64919075993a": {"doc_hash": "18ec54eedc56a10e2bb2795afea17fb5358688b8e817c1b2c014ea2d5b0471c5"}, "b19e5063-f1c7-410e-b848-00dcb0b32341": {"doc_hash": "7e7be4b2d7d9967f211b8e499e2f6217c6357c7892bac276c890624c6239ed45"}, "883a4cbc-5b3c-4a8b-9ecc-6d56add48842": {"doc_hash": "253ae7f18cc117308f6cad3c13fd67c4cafdee86b9444ee6dff93aaa8d0f6964"}, "cbcb5efc-7380-4e77-a9c5-1a352ec67816": {"doc_hash": "c329b8769735f3080ed1beef8512ced33ba50fee5f7ffedd4ff35749df7fb5fc"}, "16bfc320-fa12-4597-9158-f7b5060f74f7": {"doc_hash": "d664efd8ac8725209f1758c626761698959a2dca9de68f47358b743f2abc2f8c"}, "dadbe380-9c08-476c-bcd7-b25e4712c2a9": {"doc_hash": "ff5954ca71a2f7ba63cf711688baa86435ec16dd21f0a6c3e5333027e3291c2b"}, "11012a6c-eeec-4d81-ac52-a1a096e2a691": {"doc_hash": "5a13051afabc929ac2ee6c67a23234b625612494990d17d51a36e150b1dc9bcc"}, "fab48aeb-5ac7-4c18-8020-856e279fd32f": {"doc_hash": "8234cd29af229a4062db888745fe8b06e05b1d2b11b1351c134fb451e44fb4c9"}, "cc5230cc-8299-4d1d-bb7f-2036f06ff729": {"doc_hash": "c29a99b29cce34f4412078fb3385f419181a2e9004defd4618c4ff72cc8f1774"}, "bc4e582e-6d5b-47c9-bcb1-3c5bffc6adcf": {"doc_hash": "1e36e0c4499ace5452b9aa94899fc6a807565f253e39c9fcaa56c3341bb846f9"}, "1322539f-9a5b-492f-a03d-39b84d23e53a": {"doc_hash": "5e51dabad05babdca37ff7be86cf91276644bf53b95b7e6c5eb979c1f8aac868"}, "8ed59976-2676-44c9-a796-d9a0f5602b80": {"doc_hash": "90d9138b41f5b59274180009a4e3da9839c0bd43c7a36aee58c3d9de0d67cd1c"}, "33b20e71-0905-43a1-b409-dd859f842f7f": {"doc_hash": "0203e11aaafc28600162f364da5bdd0dd63c305f89efb81abeb5e01b1819cd9a"}, "517244d7-1b7c-4563-be2f-662771fe1d1e": {"doc_hash": "f1384ba016acfeb7ff978e93c3b4a43aa2d2cc5bf2d8825f0efcd2243c8a1a5f"}, "e4be3a3c-b00f-4dd1-b3a4-271c552f0147": {"doc_hash": "228e7c2f7a41a7ebbe5bb49aea540d331b07beb01019cf68da685e815877eda1"}, "130a131a-e3f2-47ce-80a7-350a6492f683": {"doc_hash": "779b97c7d7256daa8102e7acfe1c9db603ee222e14f5f48ec0e4b9eaa51a2ec6"}, "407b5493-35db-454c-84b2-78cf2a07b485": {"doc_hash": "c5a010eb4b73c85ca0d0fde73fed4ee793ac2f65a62816fce7e867e8e2ab07e5"}, "d1a459e1-d6be-428f-8373-b399b5641d83": {"doc_hash": "b2b922e0733d14c3e273192ec68bf4e25ea768f0f66ee816ec326c84db2be6c8"}, "7c6f237b-d586-4352-aeaf-6c73f0c90c33": {"doc_hash": "fc732ca9c40ddfcb50ac620ef362a2c83fa83c0824aee24d5404912874930863"}, "548fa7f7-bbb4-47f2-82cb-f5b459b95ced": {"doc_hash": "2e60499289ed0d87b8fcdf0cc955e781834d6dc1281f599bd43a66a19e153210"}, "539cb582-1319-49a6-9f2a-1f25097643ea": {"doc_hash": "5ea1c56ef95b77ddd485ae3b072f3e7a97bafee781f82befa31d9f381069a1b8"}, "028641ed-39d8-4ddd-985a-11731f105b4a": {"doc_hash": "c39a897bf0ddeb2a591fea9979fd960dff9d4508a6c5b08da01757df63148b9e"}, "457cf3f6-01f1-407b-8556-1cfc2837bbb9": {"doc_hash": "e32f098dbdce8663cb19a98acf9c33eaa3260d0ecaf8c77afefad2f59bb444ba"}, "2936cbff-3487-43b8-a90c-b95311d06f0f": {"doc_hash": "e65f8b2dc90768c551fc07654c6f8c8b77ccd8121c1da0cb6a951eef899b06ad"}, "2cb2d22a-e4e7-4d68-bc32-69e7ac3287c8": {"doc_hash": "2f3abd3c42ff81474f129bbf4a08d25010a31f496da9406d74d1a7ab7a715405"}, "61b2bd79-aeaf-4882-b9ea-8a93e8614b8f": {"doc_hash": "17e87a3526537696047fa7c3ef23a6d60f03805c6fcab60c1489aa6af8e01ac4"}, "1fd11c13-f78f-4511-a6b9-153ab32a0350": {"doc_hash": "e9a7c16a412de58fb86ee94d9d88bf61ae1b071f1ddf5fc97b0c0645293b5a1c"}, "4b4db1f2-d6d5-4c2a-994c-b5458a6a628f": {"doc_hash": "f952b680c8ecb3feeca4ebf76c29f0c197b798e2c0d49b5e7427ffdab60ef363"}, "d4355c97-b555-438a-8f09-476c4a9a4259": {"doc_hash": "b4809552e79c5b2f2f91f4ed1ffb1544216af7eea541fd0698ee87d8d84ab949"}, "842d5836-607d-49ab-b5e9-444ab2cd156a": {"doc_hash": "3e1291819743af7527665ffac29a5acc22e9ff23c760200a2c73e2a0672403f5"}, "a4d65481-ca5f-4435-922a-d857c433da89": {"doc_hash": "6e6d415e551b4ca690a4abc7ba15ad1a99365f7123bfbf0bcdfda92db97af3ff"}, "ba766128-c191-4e19-8325-57fc2d1a20fb": {"doc_hash": "b86aaee2fbad47c3cade899ad431c2a4aff6fd74e0059e6ed7a58232bf34998c"}, "2d667203-d272-44b4-82cb-93f58a7c8bd8": {"doc_hash": "f823a409d03181d35e7154d3e9e2ca55a133eeb2b78294cf1ab5aa699a9e22cf"}, "cffb763e-45bf-4f87-adbd-8b0d0962e658": {"doc_hash": "599e4c773e04e733d57075dc871da9a947b831bd251c07447b321790b2238e56"}, "7a945c94-d5ba-436f-8ce7-67d43aef23a2": {"doc_hash": "4eb0b28556b9f2f684245ee43f7d3edccdfdb821735dbfa0dfc4962242a1811f"}, "6610be3a-878b-47bc-b230-937cf9c3f9af": {"doc_hash": "dfa3ab3a2c0b2169669bc00b9e9740e2fe84cd651c3ea0d0e025613948b9c0e7"}, "d5511293-510b-4489-8c1f-96dd238acdab": {"doc_hash": "4fdef919590db8210c9f78443ab104aadbe7c8eaff774350fea19e0df7349441"}, "165931b9-bf35-41f8-b925-7a617ecc7ddb": {"doc_hash": "eb5a888d58e32288db43d63d831c0af94f378e54b5c4fdd81239300d7c82b161"}, "91110072-c5e0-4824-b744-901cbf470249": {"doc_hash": "7ff3332ab6c7142f23d29a248252455be8d258f7055f0dcfd9de03e58f8bd61b"}, "99b52034-2daf-4c1c-b967-bbcea0533c95": {"doc_hash": "36289157c814b692964541051e4b37c61f4b90ba708a8d41a404ddd70899edc7"}, "a1ac84bc-643d-4ab2-ad8d-9b446e679898": {"doc_hash": "4f599e71b81ce708a80052c9283c7ac00c7016c731cfb02d015f9472fc6037ef"}, "6ec4dbee-87be-4943-bfb1-b69106e56285": {"doc_hash": "07a7dd1111e3bf90d0a3abbec33158b6871eed53a6a4541f564eee39ba1dc194"}, "214e3a21-013b-40d6-a1e9-3fc880d3629d": {"doc_hash": "413350ef8aceac65f181ce8e8d86853503a0e4bd08db5f279cec3ea4b2395e38"}, "f1e2505e-e74e-4814-8fbd-7d27de61db29": {"doc_hash": "d288ab5b1f45831283fe453e80cc1b39a7fb117507205f04b704b94335a18ee0"}, "f45ec9bc-30bb-4a64-83dc-37e7ff21933e": {"doc_hash": "cc914853614edc465b218e9bc60d30a5a618dc31d5dda64be2024cbb33635849"}, "014d65e9-08ec-4269-8550-d2f83edb75f8": {"doc_hash": "bef0cc6829f3a63846efa02d1c5015326020d816072269f61125ba9f4f4b01d7"}, "aa61189f-0f45-48db-8aee-c75f94c4a4c9": {"doc_hash": "aa0f0728263ea9f25857ecc8b5925a1dcb39e7a38453df81d15c542f8e05c7bd"}, "e08696ee-af66-40aa-9392-1368cb5755f1": {"doc_hash": "6a0ac2d20044bed0043d4093e1344745c2fd0f808aec21f39673c20a31c2a8e8"}, "0377b52e-95cc-42f1-9967-d4a79d2a608c": {"doc_hash": "9132274d2804582266494d720241cb6d3c08e18f7c5efba8a94e2c355c766764"}, "9477f9f3-ce09-424f-90da-1c7ef0922361": {"doc_hash": "091278aa5aca2469f74a73f8548abfe73b8fa8efdc2551eb7e7a73e3c86d7cc5"}, "b4d37783-faf9-4ec5-996a-94647d84e20e": {"doc_hash": "5d365f6de482c4565fe8d851490dc56c56d85718f22fc151b0f4ca17b16122ff"}, "fe1726ee-6806-4c26-bf31-57ed3f7611ca": {"doc_hash": "6e83a80e6ea9d20c78fe7c3c78a33aacd2bbe1973e6be263e5fbd0dadd77acc9"}, "3fdd0d22-f411-4346-9819-1c1ba92fd8d7": {"doc_hash": "1bb5e63f08edba1445eb49cd4d2f0e734469f253c4372691d459e793f178eee5"}, "8416965d-b33c-4570-bca4-5496e58b141b": {"doc_hash": "ab711d0ab71da747d7cd5372f55122824df3d527e5c4b7d64348705e944e6216"}, "bf8b1ac5-3d41-486f-804b-87474480908d": {"doc_hash": "98674e6b1140cfc371ef99025a6712c716b8759e37908ce8932b5ad8a60ae03d"}, "f9b84565-3152-4bb2-ac2e-8f878f1e53fc": {"doc_hash": "5dc797dbe3a657b10d9fa890849cba2c6db847b0d13bf2054fd77a56d51d4109"}, "d8919ac6-2966-454d-bea9-d8e80772dd07": {"doc_hash": "0815ebb3b3a73b929c84a685042bcafe106336249a90e29098ceeb7ffa08d147"}, "77acb53d-c679-4d36-84a2-f17dee175bd9": {"doc_hash": "b5973662750a8a6ee5d4d48c82e962fa0469083ae1c0b9ead8943fc43efd0a34"}, "54188f3d-1f91-41a9-a267-e8b1462f4550": {"doc_hash": "81be74b05ea126482ec165e996c3ae363ab59315de1f9ff33e09b0afa15011c9"}, "bba398e9-39d4-4bf1-b111-352d7ddf10f0": {"doc_hash": "d3317cf3fb3cf23749d5943efd3d781a40eb4fa5d7c952f4d5952112640bad48"}, "04554470-6ccd-428b-99f5-89cbb40708f3": {"doc_hash": "e3cf975353338736219a98ccefcdeab977f1fe94778aa4ba4139beffad8b47b1"}, "b90b941b-3750-4ba8-83f3-dc3b5b867b7f": {"doc_hash": "c38d389f555b51332cbdd4388982f3fdeb5047f08e8913ac8f856a71837e9ba0"}, "086c144b-73ae-47a1-aa62-5d9379606791": {"doc_hash": "1ae3acd4e49085af923b81de081fa3aca18ebeed7e42b201456fa48120518e34"}, "3710a977-9bfa-4f3a-aeda-713086fc6311": {"doc_hash": "adbe10f539feb5079ea408cb56f6ad7197aabd94fea7307511101a791bb5a841"}, "2316e473-5af0-47dc-8029-f57fe058c2db": {"doc_hash": "b66de2abd3fa96243283d7833f2038853367ae256d69e8173c637082cfbed528"}, "66ae3e07-56ac-4e66-95fc-56c5303a3bdd": {"doc_hash": "4678b5ea3a3c197ad86dfcff2b1452fbed6350545eae37cc4bf78e0fd8a5dac7"}, "5f5cdfe8-f192-46b2-a5f9-b2ba6839e380": {"doc_hash": "4f6273a93c8c620270668f6ade396183615095227370a0c6457d25258cb08c74"}, "9084eb1e-a4f9-45de-beb6-21fa3058c65b": {"doc_hash": "45361880f496e50902e72806661da8ce127c628d914535e01e45aeb8a1c49e0d"}, "cfb0cb10-0fb9-4ee6-ac0c-986e82bdf14e": {"doc_hash": "f070ba5f4145203115af719fce48f766710e476318959eba2cd4dbbfa0dc21d5"}, "661001ad-4c45-4086-bbcc-606b8971863f": {"doc_hash": "f1869c5ff28bbcde2e257df3512db3ef27f573c2a087b615c46ef8aefbc6e4bb"}, "660c4ad9-2762-47b0-b16a-eb2e29eeb473": {"doc_hash": "ca2c3c8ff1b8a860a11730d8c4bf10f523e6dc88fe6de732c7dd341fd2feb313"}, "3e15b8d5-7e3b-4b12-89fb-d28e4a1e9a0b": {"doc_hash": "84cd47cd592818d15906a773dbc5755519d5acb1b0ba283713aaa4d00c30f615"}, "beead010-1548-4d9a-8e69-0bb41983a569": {"doc_hash": "46db73d5ccbe558a69eb2160ea5fba5797d6ab72c50464ac544dfaefae92aa9c"}, "16fb092f-9f03-4ef2-87c0-f33ddfc709aa": {"doc_hash": "1f82806b030946b85283b51fc45c369128328e995f41b5ad2cd211fc71615d40"}, "42769f65-36f6-418d-9c57-3ce67c55a317": {"doc_hash": "c2ae2de7bc55fe4b5b25b8b83c38f1c49f526943f96612dc8afaa7ba2ceb59f6"}, "60cfefcd-ac51-4d74-8e7a-1077cd0c311f": {"doc_hash": "48fb83fcf97646e94ef2cc9a83eb8318121ccaa52715018df66a5b1fce1d1500"}, "a311f07a-812e-4372-ac85-c514bc0c33b8": {"doc_hash": "b569805929741d62fac16a4444131a4a790ade7f9e39f2b41d89db9dac0af8ae"}, "0a57c504-e3ed-4e3c-9667-6a4c0b72df97": {"doc_hash": "3d186a1aee95e5c284073d11cf791d5e1c3d05a4dad62462993a84a85ed7bc42"}, "ea76278d-4153-4888-a0de-3bc7b34bc303": {"doc_hash": "1c7bc4da253d21ae3d4c1f04b646347cec093e2e5ec3f790cd4d0bebeff995f4"}, "c86e13df-b1c2-4861-a65e-9491f4899a68": {"doc_hash": "a21940ba870d604e1dacf7b1a081352fff9bc1abb6af23bcb929d0e9e1a01bdc"}, "0a681277-6473-4aa8-b86b-5b0544049715": {"doc_hash": "894a6274e26bed4dc68ae7e08f613eff197a4643be2f05468f7f156b6ef674cd"}, "00ee4061-8b57-46b0-92c8-ef3bb8d099dc": {"doc_hash": "17b3737d5857ba194a98f500533462c2f1833c839591d2adeabbd171a48fc085"}, "dc7aae3b-f893-4c0a-8fc9-d45a1ba84108": {"doc_hash": "d7bc75505154958e310b1a1c72ea092c26b154b2f3e9443a1ddbd906b4d9b665"}, "8211bdc4-82fc-4984-b253-a5886046f5bf": {"doc_hash": "5345c825bd41778260c884cc145e2630cbc130691305f4746d6443135ce78a60"}, "ebf7421c-04db-4d17-af41-0cb5af0def4e": {"doc_hash": "79038bcedd45d85f4676904ed48f0349a5ac8a10dc6467e2a721478d9be95552"}, "27c1c53c-86ca-4b19-88d9-e79394ffac0b": {"doc_hash": "6d844f0130288c1ccacb560a9fb7f58254694cfb92d0a94cb73ac1ddf7023206"}, "1d2d2a63-b6b1-4b77-bdb6-4adaecb5c135": {"doc_hash": "1dee493af04520fe0902a2173f4b36693e80702badfab98e87e0407fe3e012a6"}, "f2c4e4ee-df9b-41a7-8c1a-38f6839035fe": {"doc_hash": "b6a7f7911ab69442c00f000fcf66f63267b911b3a07acc67196db50b196d1393"}, "ede41dd0-12fc-4016-b38b-b81c3f145be1": {"doc_hash": "2759451b6a346585c0f488ff5a64d558de168ea35c9b1705556d405307796a43"}, "52edb485-6dd9-4f89-af30-14f33952bd08": {"doc_hash": "a6029a82c14e056d9011da861cb50de1ae609b41f5fc37a90de5eb5787490ceb"}, "b4fb691c-fc79-41dd-9f1f-66f60c6a89e1": {"doc_hash": "3a4c2e408d6a3573846335d96cae04ca9375a86e01441dd8ec2fec1dd9d019bf"}, "ebc73c7b-53af-4173-a894-17fe4066ec78": {"doc_hash": "fb6856bd970e0e378d2b5022cc8dc10ce1e7389d26adcf664443bbb314ac0e79"}, "9ae2fa74-e356-4924-b0af-803b945fbb47": {"doc_hash": "3011fc674f0c43f3c3a0889140e59ace3dca3b950239a1a6c5232c152cec94ff"}, "b3ba0163-1fcb-408e-9658-1a0450dc8e5c": {"doc_hash": "7ec743f4cac4b1aa20134dd7df7ad603e5528e5e773bbcf02de00f570cadaa4c"}, "14f3cfb8-6ce9-42b4-bd12-82a96a5547c2": {"doc_hash": "283da8da80543a1e35ae0ecb3cc56367c5d0b7a002eec31343e95d84f2d37691"}, "011bdff6-b17e-4059-8edf-cffaadaec0ab": {"doc_hash": "e3f9458ee76735e864328929939d4048341a5ba0e216385d54e6e95cb22c73b1"}, "2516f765-68d1-4eb7-b95c-cc16aefaed3b": {"doc_hash": "a8a0b44bcf6f162c6774522e25c93fa063d10869b5373d0d83e3173d5f1677f8"}, "74cd6bf9-3950-4085-b298-b9d04786269d": {"doc_hash": "a36fcb9286fb45979da82c9edc7b47cc4580ad56ec4187141c4f453b1dac4c43"}, "4a9c965a-3cc2-4473-b6d1-58ab13fa061a": {"doc_hash": "956b24d917450f57b5994295c53c663ada15b9c4ce04caa2fa02e4a577933b8a"}, "b4a7fd35-f20c-4430-9ffd-4a050514b6b6": {"doc_hash": "9d07cef1a90c867e840c1f14d9173812c93b7d4220b94901a8bf8ab62f8f6561"}, "0a30dfb4-5906-44fb-9c7e-f20f658e54b6": {"doc_hash": "bb5763e85e7e05bf333ea43286e0ff9d25bcc5b91c05d693cb29ace3131242fd"}, "36cb1b30-1263-4004-a485-b18af7da0118": {"doc_hash": "c671847c9d23810cb9f86d15c69980637e9fdd6ffe6059f3d6616323fc7276d4"}, "ed2d2b84-3fef-4cf6-b5c6-bdbcef419768": {"doc_hash": "a6f7962aa0140ab9032ec4d90da37058809ebdfaa5299f81cd04ac473a5aff40"}, "4d0907c6-b3ae-4b90-983b-ca2bc70b4703": {"doc_hash": "caa3c8cc37e873f19e17538b57d77354dac5b523f4fde29efbbaab96a7a27381"}, "8e870653-474a-44b5-8167-cd131017b377": {"doc_hash": "388a4e27777444bbeed4f7ff5a914f87939a1991d72e14ec23c1047cc6a79b73"}, "69a7e25a-4896-47d6-92ad-1a02bd0dd7f3": {"doc_hash": "d4fa8fe2e2ae79e3c5da8a930badbf4a56796ef0c9e0ee6b5a15da352d2c77cf"}, "8bc2ad6b-713c-46df-ac49-34b95d5ae24d": {"doc_hash": "80ba9ff72db1266f156ae885979dfd8721fd7420fcde0abc646b2d113315218e"}, "c3819dcd-7312-4ffc-8b2f-c6f0b47ad3de": {"doc_hash": "ec193222205e08274ac54f92cb2e7abaa0096db929ccdc985c678ae0f1c4eaff"}, "e18c450a-f356-44ab-b18e-df2a0c06e1a7": {"doc_hash": "04070817e181d5771768043c86e6b30fbede9719f726c5bd6d572ef309b83300"}, "d85c347b-0f2c-4487-b0fb-5ff0af1e0efe": {"doc_hash": "c91dd74f88ff2b2a98b17cb3927907f9e3b6585e7d77c271e28fc5cfadd7c592"}, "598665dc-fe6a-480e-855e-52a42d70f418": {"doc_hash": "0fb45a9f9d1719c5f1509b28f19b2dcd433fca8f8dd2a2a5a7db1a52dc39e2b5"}, "71915d38-8ab5-4dda-9ae6-a84a5eb96c1a": {"doc_hash": "2aa651c3c77ebba7932003f34ad73e740f7ef0eca0f585c9c613b01575cebc3d"}, "ea0191da-d553-4f7b-9fbf-8dfb4d4924c4": {"doc_hash": "33c865850c3f1e090ec2a5d62ea83819222cf9f0b04dbd3acec59974249a5191"}, "9acde764-9cfd-485a-a46f-b33d37ef7853": {"doc_hash": "6972b81c2a8c47d6c2f9f12fe57eb111b3135017fb80c3c16b9bc5483f679da1"}, "f43c9e5b-9548-4768-9bd3-0219d845256d": {"doc_hash": "d00f1b95f0f816c82a77f088d15ed0119a738e9f475377108497bf395ce7233e"}, "ad3d4f9d-55a6-4d00-9df0-31b0d73c5054": {"doc_hash": "61001facb8e6b9fb82dcce1b352ae693ec9d385584e76f932f461861e6bd43bd"}, "75d2a9f0-c2f4-4893-b9dc-459173ec6c74": {"doc_hash": "02e0d3515abe43c6f2303cdcef337f741ac2f410c6bfdb612be4a4906956ca4f"}, "abf08165-c48a-4a1a-9d40-abfd5425497f": {"doc_hash": "e9236e8de7f1068af3ad45f539970d4743f5c731cfa614a4eafb9fd9f952bd58"}, "783b95d7-80d2-4135-bb5d-24de0a9be358": {"doc_hash": "f98aa1fef3d9f39686531306b43c5ccedd6ea1af36898ac51084eaab1ae22ab0"}, "6171ba39-e2d2-4a28-aab0-c03c9ea66c76": {"doc_hash": "07245dd40b3e807c8ceef495d3d8b26e87e1b41ce4e355d3a50c7dba9ff0ec4a"}, "2a3c4e0b-79a4-4f70-b264-4bddc3ebadab": {"doc_hash": "dfdc4d0d98ae91d1159b40020d32533ed5000362440655b15b735da603840d23"}, "5c045e2e-a7da-470d-aed9-b7731e44b275": {"doc_hash": "7b75f00466bdcb4603ff7826e67ac9cb4aa708c1eb973ee94fdd89dbd282ca97"}, "b4aea5e0-0a83-4830-95d3-564957488e97": {"doc_hash": "e1ad313526d8dc5150a53ebc713e6fc6aafbe38cfba37eb4e901b3ad9a813755"}, "3a429f4a-46cb-4b24-835f-46f829038141": {"doc_hash": "ecf1d7338e62d1bd991f2c80b245cca5e2ae679870678a5235a7c99a2c5f76aa"}, "e3237477-2fc9-4c20-ada9-523625d7844d": {"doc_hash": "d0af9240b9fbdff41b1c7fbd79fd928af80deb4018066375b407c54c001f6633"}, "8d94f83c-51d4-4179-b048-4c4abc730459": {"doc_hash": "85672c6a1804f923ffa11651b69f156a5cec3428d54d81ec42fde7cd18fc04c3"}, "32f939e6-58ea-44a4-8363-42290a531852": {"doc_hash": "3de07b8c293715563a4aba8a9d52af5b604b4c73c04781c93a422119d45e2425"}, "73b3ffca-2f97-4c14-aa32-f616e7d15c74": {"doc_hash": "3dd0abed5bb8f3dc5d74ce8a54bd08788b64080b536ee20dbd77a842224460a2"}, "5aa3ec10-64d2-4134-a037-9dd0f46f6fe1": {"doc_hash": "b1b6b2e893ee183546dbf3e449367928697681e7c46ea2bcc978f280e6e7a39c"}, "487f9f65-95ad-40e2-946f-5153420ccaa3": {"doc_hash": "b58968aacf248352d6538cb7e90c3c4a65111598f9e551788486808d9c81d339"}, "be23b5d3-908e-493b-8058-1b1b5d78d29d": {"doc_hash": "9b9c510b9c52b2dc38b90f85550588ee543d32b2508efdde86f5138375f808a3"}, "9acf9d41-5091-4b66-aec8-35139d4032e5": {"doc_hash": "011e08f83690fe21e9077318a514bfce7cca83f83a2e7c224e3f3a9b1827da8c"}, "8cdd5abb-7ffe-4521-9b39-326a0dd732ed": {"doc_hash": "978cee9b92429a9649de84a07b9f79540f1c8c5e4b447e941a58e081b04523e4"}, "26e4c87e-6c25-4db0-b675-f309ef19af28": {"doc_hash": "5249a98fae4126f228ad7eb26be4f9483a495c6d0b2fe4077c3e5dc32602a76c"}, "59c07f44-38ec-4856-8fbe-20fe9a47295e": {"doc_hash": "6e8e1e75fa1a10046dedbeba6a8e2dc1e52390ce690d7decb903d02ed9eae8b8"}, "98782230-b88e-47e2-8684-38b34c97269f": {"doc_hash": "527d045eaa15552234e9355b123601d9a3f6738726af5ec0a0178197e37ceea9"}, "5838f44a-ddee-49b8-acbd-df04788be029": {"doc_hash": "12b889dd4238b27f5a7b9edeb613d23ec548476a0822e2d17ebd7060f4b44cc8"}, "9e195151-c337-4ac6-918e-b030e39f2b09": {"doc_hash": "19c6dcb2245f00cfc1ecdd1671fb5df98db8cde1659b667997824c93128c9c1a"}, "6a358fc5-8748-4cf2-840e-906d71a12939": {"doc_hash": "0a6ce99c9bcb15e521ebfba1a118cbdd9d0d8fa7e6b963f4af803b26f59095cf"}, "d15e8283-af52-43f2-a091-7bd3a7636882": {"doc_hash": "1923123e4385436c59fc79adf5a38fd415a3ba2926655c5127ab26746c70d616"}, "24d10531-5681-4164-bc46-a2dc03f2f4c2": {"doc_hash": "736a03c30df18130f6df988a8822ded925a28af832616a8ede467e5d6085ef71"}, "9578c328-6bee-448e-8fb4-e14df0a5ac91": {"doc_hash": "6743c81bd3f06bdb9d3147557f5f522b6e1791a3df83e77c7696e1db4d53bb0b"}, "24d2f58b-3250-4107-96c0-14e9cf9fe3db": {"doc_hash": "031da213475b5a9cab663f15deca1ae6045a643125914b7ba96642f56386af84"}, "a535cc6b-b4d4-4c06-8ec2-4e457061630b": {"doc_hash": "096a04442ee58d0e25b8739961c6adc732c56b5db5259216d56f7e248ba4682c"}, "9cb0bd8c-1322-4e5f-a421-ac7dd4f5d718": {"doc_hash": "071e7069b728a8337087ba67e384640ec637965350349028bc378e198be83b01"}, "29605796-191f-4967-ab5a-61d3f97b206f": {"doc_hash": "56661606a192dea69c83c8ab96f2275a3d5003709fae0c9b7c283dfdd3bfd60f"}, "a212e20d-762d-4fd4-9048-79552b7af016": {"doc_hash": "906080dbe5429887af0b401d9e74969059478071016536bf50f37040bda15111"}, "b819b81e-4531-40a4-81ca-edf98f1fd2bb": {"doc_hash": "786e55760948e53d30d94a26232f795abd4ca11586e3e6ca89317477dbe271f4"}, "8bf3a533-6109-4328-b5a1-99a14c7d5d9b": {"doc_hash": "5040357393e0644f2a6a7efbff6e0b07e1a0fa21849aafa529c9a2596e539ae4"}, "e974bd45-15c5-4768-b1ae-ab8c1eaa7e64": {"doc_hash": "36261483502f95ec0cd7946de2ad5060fb9f240a0c4c67e730a93db9332750f7"}, "1c3de868-1c3f-4574-bcce-4541bd482fa9": {"doc_hash": "a2d3adeed76d6188cde20a7478cbc327cf148462a8a1e4310db44190eabd4f34"}, "a6278aa0-7018-4579-bf09-3c56eecf8de8": {"doc_hash": "7df02bb00841d4a5c24fe7e8f3a95ae3d1ca1900cbe23571bb487e5f9877a280"}, "d89920d6-94d2-412e-940a-814d973c74dd": {"doc_hash": "007d7d0983c85600c976f35c3131e9c21712f9d3e713ea100845b0d1fae36061"}, "0961aefb-a4c1-45a8-ab53-1d9704dd72be": {"doc_hash": "a67e1b7f9608d623b0547378ec48ebaaee7941d302fd80bcd28ef9b0ab7e1335"}, "c732dc34-ba8b-49e4-8e1c-1d19d141bc4c": {"doc_hash": "f9e3e065066991c0177e47b70c480b0add2fcb75a1ebdbb327f8aa056d630b22"}, "c569eab6-4949-4c2d-a265-844fe47b322b": {"doc_hash": "ae012b910c2b71463cb83662c95af3293a11c0e02b77d00d9d5ab48e499ea93a"}, "17619d0e-7186-41b9-98db-da7dd0efcf0d": {"doc_hash": "8c2f431f0c5cf5b00609213cbbf788dfdb9fcf0657e762f0edc216369ac9dbf6"}, "00d9327f-beb9-41ef-a6f9-0ef9d4ab008c": {"doc_hash": "4c136ace69312fc6e5e671dfdda9bd0c2dfc255a3e0d2f2ea85794905ccf637a"}, "65a3930f-b620-4118-bc91-ac9d6f291a80": {"doc_hash": "c1d29997c71c4d0b0bb171749f4afe661b98dedb1644111600b00b99db56397b"}, "61d99f13-321e-4f8b-aa6d-be37ac8b6af9": {"doc_hash": "38fc927ad86d3312cd75f15d2c628d3c2d078f9a90b8793529d23dc771dbea1e"}, "a01b91a2-3c0b-409c-a07a-9aaf94e06adb": {"doc_hash": "30e878afad91220589437febf91037cfbc58b9c9a72e9a665a61214276353b25"}, "55400715-7065-4d18-b461-6ebfdb802fd8": {"doc_hash": "2bd8323b8b445244258a5d2894afa7b55d0eea0272444f4b722601434b1d8ed7"}, "4f89ebdd-1414-4d6b-98dc-8b2318a49253": {"doc_hash": "f73f0803465de0e7b5c3f1fa8b790e5128657cb6a4d8e17fec3070f03d4d8bd2"}, "5bd9d1a6-ca28-4c2f-a65b-14115df67f49": {"doc_hash": "feeaca8b8b771f34c748c12349c8e036f542fcc62b69172215dd64bfc2e1f7a2"}, "49a05b2c-87eb-4791-84d8-4e20c1582291": {"doc_hash": "872c8242cb4b0c1b6c5ad7e6168ef480f024fdaa72f973db1efa04911dfd02ce"}, "c07bfb75-fad2-4781-b126-59fa6c226c67": {"doc_hash": "6b287a9cbaeaa26287a8da0eea264d2d5e2ca08a52939136852a8fc57c07af7c"}, "d8ec71c4-6904-42e5-a4c5-f46f8c9b025c": {"doc_hash": "aa43f96d21b9a1219d7c06f0d30a2879b683a5578544b28e599f80f15e69d8e9"}, "a5cddf89-73de-4614-a7fe-4f7ac2cef144": {"doc_hash": "4459f62cdd4b0333d710f812e9a313f6a6a040169c8605da4530685efef842e0"}, "2d90304c-56eb-49e9-866c-72f1dbc922b6": {"doc_hash": "26a0fa18bbbf48daf2cc758ca8953e5cd7f374170cffbcadcb901f7c26b05b1f"}, "b09d3a78-d687-4288-b4b8-0d061e5f5c8e": {"doc_hash": "a20aec1dbb52316a9b46022cc32a84db3f840265d948def138939cec60ae203d"}, "f108eacd-05e2-4d93-b762-57bc1a6e968c": {"doc_hash": "4dd7a3c9bddeca232f6a9d1a07a636f8bcc2c67ea0aca9d032000a26fb39b4ea"}, "f554ca92-c066-416b-ba8b-d313f5f28e5d": {"doc_hash": "d1fca399c4cbcdb711ea4e3d35b0f0a4af1dd2ccc299ab670cc99d51758ee466"}, "a23696d7-85c2-4c4c-b3cb-9d72638da642": {"doc_hash": "ea392f33dabe57a0a553df6b955de4d18d94bf17a229fbe9d05114694d877b75"}, "574df38e-51e8-4219-9cba-58e5af75dad8": {"doc_hash": "3e1ebff854f5d45a823a85cb9f668b7f4945574e60824af0642274fd41d9f690"}, "6022aa4c-ad2b-46f8-a2b5-2b9c50cf89d5": {"doc_hash": "c08c24584dc9b199537e7fac692d500a1e63973c0ebde11c8f6fc0e0d2e36cd6"}, "781d69c4-8da8-40b9-ace9-8e565352deae": {"doc_hash": "9c07da23803a730d4ca7600b10994dc7f578396bd464fac5c5a40352ff841671"}, "24b91159-a3f3-4db5-8c42-eba9df13b49e": {"doc_hash": "dba2f0aca48fe8e35ec56440c33abe35d12aacb8978f032fcf2bf669cf1e289b"}, "427ddeec-7a80-445c-9f8f-fc4551b8b49c": {"doc_hash": "dd8d9dc81ca0bc62952e795a07ad4dbc5c19fbe2053cc2c8daf0f66977368aa8"}, "26d85472-3209-4c2b-8b18-983dba61d6b4": {"doc_hash": "7ac13c48a82e734f1909a8cdab82a3fe11ce9901354002c81ec4ed09cc1d7015"}, "a53c22f8-f568-467d-b87f-9ab161827024": {"doc_hash": "82c549db923fd79bcbedb073efa599c677f38cbed0c2d71a08254cb91adeba60"}, "335a3f11-07db-4c3f-838a-bcf32f00400b": {"doc_hash": "c4cffbc4c249f79a108382bca29cd89b196e1db15e7f842dfe8939fcf4a2266d"}, "616bdf5d-6219-41d3-aae4-75eb04227a00": {"doc_hash": "908a1b00a9cdc979f3576dd5d037072882a52ad7a23c7f7559b76f524175baca"}, "d53a6fd2-991d-4164-9322-3f6a74e5e4c5": {"doc_hash": "e7ad7b44fe912427e539d6e4d78b76aa2d154fd64859018a3605491e70936111"}, "2d8c1ac7-8f12-4394-a3ed-09449302782b": {"doc_hash": "9ce3675b2f693c57424d803feec84acacf917b542bf87889c5b1f84e6382ef17"}, "f2030e26-7e06-435c-9e81-0894353380cf": {"doc_hash": "a03580c7fbbcc60df620ed14584da0d6f6db5a4d45755b915eaff35e0093a4cc"}, "33b9f2bd-ddf1-44db-b614-17ed25e84b67": {"doc_hash": "121a10a95ad855fc66dc14d4fe2f5ef5f3ca34038cccf124a5d2be8a92299e2c"}, "ffc29bb1-2543-4ef0-9acf-ac780ab8ce46": {"doc_hash": "04ed0e44e58783563f0a002b5ba6769239f967949c14aff839798e57d309f1e6"}, "5b5f710a-3c14-4922-869c-b07750e89cb3": {"doc_hash": "2699afbbe09124abcf27326d75ede4b0bf550b2db85754b7e7ce1a0aac0703fd"}, "1f3c59ee-61a2-4ad6-a5ac-f0b9689964e0": {"doc_hash": "c317f540e84d0f27cec014b581a540ab10d9e18927fd1e17c55d2200f133f6c0"}, "54e0bd2b-d591-41dc-8fd9-45c25b37dd78": {"doc_hash": "0fd16e6f065f570b11ea0473c00286eb8863182b66f4e7d508751d18d09fb8e8"}, "bffb57cf-f72b-440c-883b-956612d4d46a": {"doc_hash": "e15fb24b68894131af539908d20cb8b8456624932b708ec57f0b9e748a18b922"}, "76699e30-69e4-444c-a94c-cefd58a1bf9b": {"doc_hash": "9f6f38b801c3ad6929e9e9489392e38b1c5c72f1ae81ee4f80e56eee6c849274"}, "5b50c707-eeee-41ee-a6de-0c669c2e14d4": {"doc_hash": "394e17fc2009141f65cba6ece2949cea96b99adcfdf52d26228e23544eba71ab"}, "eea9a423-d085-45f5-93e4-199a005fbf98": {"doc_hash": "6cef536d3158f35ebbeb7a13c562df5e4ce5b57e6380782089bc828a158301ff"}, "4b3945dd-5790-4796-a711-148619a0a4ef": {"doc_hash": "706a123434bd03764f9e67123c84e79ee928a33075791c48983e65fdbcffefd8"}, "ed689a3c-e312-4bb9-a30b-3dd33f442c82": {"doc_hash": "57a45c3c7209f005c18744fb9a3e72143350685dafee77cb05d19a79bbf41cf9"}, "1e9502a4-775c-497a-af90-0ec208ddb99f": {"doc_hash": "4ff149f0231281185e6c74b5708d7e3dbef900062dba622d84fec25ee26741e9"}, "365500a3-ba42-46f4-8215-c5b7d99f16e5": {"doc_hash": "799dcd3307d6b5151f853b666595c7e2595e7b49423962ab85732f40182f4ea8"}, "bf68213f-f769-41ed-bd06-c213a6856d96": {"doc_hash": "06ba0b2aa56e482771cb5e1279c81493f0d77af0f8167ddef09b2c82eaeae28d"}, "22350119-aa85-4630-ae47-3a6f950a674b": {"doc_hash": "124c9cc93aad7eaad5719b6b39afebe00fe3a5580a9d3a2dc0e656307a1c28d0"}, "9e97531c-c57b-4897-97df-e84eb0666e56": {"doc_hash": "e2081d35636ffa3697955fab15e425d59a4331c3f0420c9e8843471355392c64"}, "0489af4e-5b4f-4466-9250-820423a71d23": {"doc_hash": "5b561f80a359adb684288d50b703ab22ee66eba91af85076e6808f5e65a12889"}, "3d485b86-bd82-433b-b266-3d80f528e399": {"doc_hash": "2080e2a36494beea2ad9cb9c944682a6df5e84f3082e9dfd1b441de5cd865402"}, "302a7dc0-fbae-4b20-9705-af639cd7c35d": {"doc_hash": "a157d0d25b135e97a4bf478e84dcc6403091e41fb81c6c86752e0477d00b59d5"}, "0259fa54-b1ef-4ee5-a840-e68b0fb2be2d": {"doc_hash": "910b04a78170a2d23327738d7306cf2bb69a374ceb70dc198c6c9a5e754b797c"}, "c02802f2-676e-4e9d-8f17-c0823d30460b": {"doc_hash": "386654d28af826dc0ace4ed20e9efde9ca7b3890bacfd3a36e513a9724c091ac"}, "61392398-ccf9-4c6d-9f8a-4b0b7f44d7df": {"doc_hash": "edf79a421a5e21491d5d50df828ea4615d19dac78b75fbc4eff2d4edee30b866"}, "bf169e3c-a3e3-4854-95ed-bccb74d06026": {"doc_hash": "35d19fa9d1a49cc7ccbb3e4bb23e0151c25e672c7fcec696ffbf22167f6041df"}, "aabaaa89-6995-4470-b40a-7d6dde1fc63b": {"doc_hash": "b9548737e955adbbcbd6562160c885a1bbbc28eba448ddcffceb5e6f7a6480ae"}, "b0ceb664-aa8b-4366-a9e7-8fdcd075c03b": {"doc_hash": "6f20995d2d94d15f565cdce8c5fefe418050c5862192f4689bba5e689bfa982a"}, "92888156-e050-4472-a195-0058b918f2b9": {"doc_hash": "52a3921402998b1f10d7fbf803369b30b1c9cbeb2cfcd302673f372d0278f6f4"}, "f75c245f-0f28-4627-8f7d-6a3620960027": {"doc_hash": "545b4e2069de8859144d45360f37c18164bd04b6100a94bb9fc778e3ce4c1bd2"}, "6b5f6c97-0d7e-44ff-bcdc-554fa889027e": {"doc_hash": "4c1478dd84d5f504b1a14eb745525b555b1b11391ed58ffa1fbb47e54fc51759"}, "2433b6a6-1206-44d2-a513-7a79421e905b": {"doc_hash": "f913a2e3ec46c74311adf4473ee906618e8e005e4395f2b36b62dcfafce56106"}, "3067f711-3a00-43c8-9bbf-96f8f427a03a": {"doc_hash": "6c0dd86291c30d173d2ab1d9ff14e80f4c8f61a2c877509a5dab16dfed5a3526"}, "91f7ba12-6697-4cce-b193-89437f192e35": {"doc_hash": "58637cf4ee441d0bd2eff1de362779dc0caf18b383be5d6c8bda64db328e36c1"}, "232da8db-59f9-4631-8269-7227d177a372": {"doc_hash": "b3ec80ceb9e1df2d48e6294865fa028de47e0ae9158ca0145c9f06e0b2b35b00"}, "1b7368c6-c8c9-4ff4-9849-2e556712a34b": {"doc_hash": "fda5921c0d5829ec81ce53292946b2449115479796c1ce76a90477c58f3b1e86"}, "7bc16224-7f61-402b-924f-d333824012bd": {"doc_hash": "f27aed934a8de60df6c7abe76582c8defb17d7994da440ce23aa6fb96cde6548"}, "3d317a3b-505d-4039-a095-bc5d9e62c4eb": {"doc_hash": "c09a1bd82a28f9a4c4a1f24bf22aeb18ae11e9a5c7a59c9ba8bec03d781a22d4"}, "f39fb86d-f545-4a82-a792-7945f9786038": {"doc_hash": "8321ef1f92e269cf69f7db40c00e095bfb260a06b99fd78611105a7109dc7542"}, "f9829659-5903-4fce-abea-11949279f4dc": {"doc_hash": "f306d8ba4b81b68629a6b4d6de04341166ed1f95c0d88735c03e4702b9e29773"}, "41848eef-eb6a-4f90-8768-a0ef2088834d": {"doc_hash": "405447ab22f252f0f6d78abf519c1526279981cb336ad96fec6dcd05aa842d52"}, "d22376bd-2dca-4253-bd20-4caea06233b3": {"doc_hash": "97500b452db8f2f01e9a545e156bd5fd7b3573e0f0bfde94dd84807e7c19b9b0"}, "8ee11e14-12d0-4bb7-ba6b-119ef4124dac": {"doc_hash": "908dc579c28487e83a63e30881dd58287413a9042781d041f08a57581265f583"}, "e7eb47a9-33e9-4359-aafe-102179019ed2": {"doc_hash": "e3f8c934ee803822b27082ec36d00bf8b413f14d821e6180970aeecd1e7b90da"}, "3a16a3a4-38af-483f-8980-f4f5d8669e49": {"doc_hash": "d19ff556dcfa9c97d9cfe96809383a1e4708cdf97bbbd241e92c4e817e72a482"}, "9fc567e7-fad2-406a-a1bf-8ccc7e4f55d9": {"doc_hash": "5932c331724d72a4ff0a4c17a39f1313aeb5f7a0d7a59149ae17947164c7a795"}, "292a4e87-1f65-4a32-9761-e85d626713be": {"doc_hash": "1cf8a75537f80ae63e4634887c8f86c8cd81a93d475c0984fa877f900d730009"}, "7b3173b6-3b38-495d-aed5-49f5c9b4e910": {"doc_hash": "f8f6f9033465b21e39cbec904bcb5873c4f83aeae97d04f7efc97717037f10c5"}, "36cc2ab9-9ae5-41f4-9121-3203190bf773": {"doc_hash": "779f86b306c600f84d8cb0aaa9c94fba114ab813add479a4cc5af2b329bb3ae7"}, "9f1886ac-ee86-48c5-9c39-82ddc9ba1b73": {"doc_hash": "f0e87a148133dd5432fcfbbf99c4f7d43d01b529a8f0ebce5e46384f0c05a06c"}, "adc7ff50-3b02-4cf8-9718-d858ac2f7789": {"doc_hash": "9851608b7ebc8c8a2b4241e72557800214e16e8c4327ef5cd659af57886a9a0b"}, "b0890d10-cda3-4616-abde-232d38e5030e": {"doc_hash": "e7bacc218fb83ba618ed917e408b684cb6cd69a137e83663815efd4ba2b2dd64"}, "f4b8cad4-d25c-4fa4-a16e-28bd09580d93": {"doc_hash": "5e1fdf00505891538da11378bb8f0e53158390bbbbcd5647c115425b4dc1b4fa"}, "d32bb211-366a-4908-9141-0b41a37102d1": {"doc_hash": "4038a6dc248a0c2ee80a2c82718c1d0dca4cc5373345f69eaa44bbb3fc79994d"}, "525e48cc-bd07-42a4-a12a-ea15f7b960e7": {"doc_hash": "39a2453f74243b60ae0f712e9dc9e84cd9c2efde0366c75cec8295a6b1b5dd60"}, "d4647199-d2fd-4f96-a305-3c4fc481b852": {"doc_hash": "88be25bd58a9a49a87b94f9a63c6d133f9fad0750cb75edc3bfa4df2467f4682"}, "42996860-f855-4f58-be01-d11fc0ad40a3": {"doc_hash": "43aa86053dbc41ea541d8e43dae752b3fd77491d4b66a43abf897256c654d53d"}, "6a3438e6-3866-4824-920e-49180f561e07": {"doc_hash": "204ee5585163e932882806247240afad14c3590c61ff1f0830a8231802808c7d"}, "b9ce4dd4-201f-4572-9b1a-223dab0e551d": {"doc_hash": "365ad8fc749ebe3017ac9a85bb1d64530f96061e7d26d0fc1d0a30c05d4c8bea"}, "70e7c105-ea52-4031-a1db-f30798b8b42e": {"doc_hash": "99e1efa1829bc1bd50fa5f1676a60b49a1744d3e5204ab937d682e06252d5175"}, "d1e59304-668a-4d1b-97b5-9600f71b292c": {"doc_hash": "27584f04c4ff3cd83672760788933ca6a998eebfc3759ca5112d59c25436b843"}, "9e1a3563-e49d-456c-b774-e7089a56134f": {"doc_hash": "1e034cc668e30cf36b1ab22bbf6593607d441c7cf944facb9c75bb2bd4971e8c"}, "ebb8dc06-5385-40d6-9b6e-8e8b65446197": {"doc_hash": "edef7de8192e748977b08f58cfd3a90e42e61d9b39bf716c174964af6f91410d"}, "b12a15cb-bbc2-484c-9ada-72acd83427b6": {"doc_hash": "c2b0f32c2ca666e08d167d82b182881d79e5a54baa5fb6dcebf001e61ae760fc"}, "35db4f0d-4eaa-4437-aaa4-eec9eddc7341": {"doc_hash": "23c080c4d6e5e3f9d5a710fa9b9025d00a63a1c0cc5d601f56be4edf38d23987"}, "3e2cd287-959d-49ae-8c6a-44bb3de62fc7": {"doc_hash": "70ca62e23589f2a1193d8b12f99c9a9e217f0fd8ca6f69924dd6b6775046cde9"}, "4a3fbf3e-eefe-481e-b906-29fdf65e76ad": {"doc_hash": "cdeb9e61874f6c4e994fb5eaaf3f220c0eda6b31be83da9e8686bd7c0cf29766"}, "516ee85f-1c3b-45e6-808b-9368cbd93a59": {"doc_hash": "20b979d943ca189aac63a8dffa8abdabef123bfea79158c76a81ba50d3c8f7a5"}, "11d1b09f-820f-4704-babb-9aece43f6245": {"doc_hash": "4b31ae7ed74119825ec14a38e037542a73febd58ffd38efefd2f3de0b1afa5a8"}, "9e4dac57-c439-4546-b4c1-c6ee13a2de5d": {"doc_hash": "f45ef86a0da023e581a533943dfd8a2e50af49b2dd0b6bfae21d5881dc54ea08"}, "f949b24b-198b-46c4-8b66-6cd274a718bc": {"doc_hash": "7b95981e025dd153db452f633ec7b1c122c1c9d7fac4d996312863ba994b9e30"}, "63344b16-1c73-4384-9d26-9d10fecbbdd7": {"doc_hash": "eb02c32bcbe168e1d4f8b84796ba86d1ff046fd73febbc27126a8502065397e4"}, "42c3adae-c6de-40ea-8c04-de5fa5b77685": {"doc_hash": "d7dbc9a9c79f905bb0efaec295e88878f13433165e080f9690449cc1f61392ed"}, "f6a52afb-6d44-46d0-82d1-f3f6c24e73ac": {"doc_hash": "0c480d9394d8c7f4b0b41d6b66b34502e34c1a4d50ef137af964fb1422d56b7b"}, "eedefd53-7c2b-49b9-82c1-dbba192de0b5": {"doc_hash": "fef67931e4fe7fceb9be6820d20f38df7399f76f124028b83d8b7431863aa6a7"}, "c4309c1e-addc-461c-803a-d365e04e5187": {"doc_hash": "0c50c1267afc5115563ea6df10a0279c67fd39e7516e245280ff680b6b86debc"}, "e95dc7b1-7c6b-4ce0-8adf-772283563727": {"doc_hash": "cac9fb0bbdf81468dfc0e83ffd54a02e69956490be71e55ebc6d7d2978bf090f"}, "d4265aea-6001-4ec9-92f9-c0c5d0ba3ed9": {"doc_hash": "f0e137d6f159028c8c3d00a69ff342f466876f78be6d4e5cab0f534d1db528fe"}, "5ea48a5a-de08-453f-a4b1-e19059cfdc88": {"doc_hash": "11fa50acb2051db8a3a6550399591c3e1c2933e005859c7c664d5e0050e2b965"}, "b72bf6f4-5a2a-4c24-8d86-03c87b241439": {"doc_hash": "cba56f618b1f64ca0db3c29fe4f7739d0f3de14e4c399cfb14aaa8d43eca63ce"}, "20fd9e77-6154-4250-b903-e92782c6ae98": {"doc_hash": "f0d35286ef068654d09a9d596cbf5ffd3c462e8a39c1e675b2bee869ab44bde1"}, "d77244ac-733b-4c96-b077-e6cea3d15a99": {"doc_hash": "d58bf50c1538c92ab7ba5baba211e8cb3983f6cd51e6612ca8534aa981ddbba2"}, "ae14016f-59a1-4cb1-9fc6-e575e46812fe": {"doc_hash": "45cf6c33a850a7a4fc77d985ca05cdef27d29b8e42f9e1f364a51416a4021394"}, "647c50d8-985f-450f-80fa-a172735f74d3": {"doc_hash": "687c93e4bca557737365291483dae1965e39d37b630e989375ffdfc66bbf6dad"}, "28897194-07be-4dfd-9363-9a5eca9c70cd": {"doc_hash": "671753e509b3bb0452bed2a5889c04235c281fc205ee87af17a5670c50bb8142"}, "533a6283-1cb6-4bb5-82be-cffc88fd448a": {"doc_hash": "d8eedb64e9b497879e7d708b4efc1a73c52c374f5154eccb40ce6627cde3efee"}, "c87fa656-9485-4d53-890b-e1df9b9b112a": {"doc_hash": "12382c8939ea707db3eaf916ba0218fd118771c5be6cc5635ead298826a386ca"}, "c10dee32-ea0e-4091-8fc9-2b8f9e82a6ae": {"doc_hash": "c11b76d6c7f2c641609a1e72106c72a6595e7f4a5df1452f75f7896c15b7902c"}, "cee6c402-3416-476e-8fcb-762367d59a9b": {"doc_hash": "a3e2d0865805c31c62f3b6abd59492bf70278b49e405d667eceeacf41440267f"}, "6a039d49-7156-4163-8609-5fafa305f379": {"doc_hash": "44fcccb5f271d6a9587ed2f0f95f9be1eaf0182e9c3eb0bcc99ec303b347a080"}, "3ae3bb19-a760-4ad9-af88-42e75ac8d559": {"doc_hash": "154aa938afcb0100735bedaf52e04409154c7a5974f5c9dea34e931dfe4077b9"}, "236f1767-9490-4a7e-b565-bcaca2055d81": {"doc_hash": "64bcba1077149c952861ec89890b2b512478472380f307127efa31547dba0dfe"}, "69a228ba-da2e-4500-9390-527a1a22b948": {"doc_hash": "e84e3b5b1c315ee127cd19c5cffbe76b89e207fd6e8be78f62f94abcdd02bd69"}, "dfc2586d-fa5d-40d7-b2b1-1e4ea7f7dc11": {"doc_hash": "80cc72cb24cec79a65f02e26eea1b1f30666b41505cb7e9c74d316c6d5401a33"}, "30e0de76-f876-433d-a241-2f8d10e0b6a5": {"doc_hash": "3c956ece81cb84d127fb8e7f9d5144304cbdb98a9c504883a87a5d246ec66c76"}, "c9a7daf4-170f-4737-949f-46f03f1cb49f": {"doc_hash": "6d685b0135cec8b81f62e98351b2695c30294adbace057ab0604047583d19c71"}, "f1bf9624-c2f3-408c-862d-f7bc4432779f": {"doc_hash": "6834cb6fc69bd92f69dfd2dd72053a325632554b8ffe41c11b86f217930a5624"}, "b9a0eb37-cea0-489a-8fc1-91d70c0c06cd": {"doc_hash": "81227a27903d43add6d277cd8b41d8efb0a24b58779f3bbd86d10ac01742f901"}, "7b4e3ecd-7622-4247-8cf4-ac447425fc8e": {"doc_hash": "dc41c6a5ce36a32a28e8da950833548b21d18f067364ed3c4a2538d9d84022b6"}, "2c45f928-8077-4a01-bae1-6366cd2839a1": {"doc_hash": "f4791b58dbfac5f3879ecc910d2d9b59b84fc0f315f374de12a0f91e0fea57ac"}, "109bae82-767f-42df-bd79-6d3758343c8b": {"doc_hash": "0ea1f3b5a2e9344a0b3b01855ac2d1e59233619fb6be0034d77aef46743473a3"}, "9b61be97-f134-4785-8a0a-422a47ac24fb": {"doc_hash": "35d6ad2a05223b724ca4f5033b9def18117098a8ee3c6142caeac8e63ca26777"}, "61be7ca4-9110-453a-bf72-bed86c7fa77c": {"doc_hash": "1abe1e0b94102263c40e768fdd4f613c4ecb9da70441dde490d55aae8a715ad0"}, "d9813d11-1c9f-402f-b405-3cecf6096157": {"doc_hash": "4aad135de80ff0d9bda0351758027461c7d8fd5f22397e2b11d395e3fc5331b2"}, "3b7e844b-bf38-483d-9606-492c4adced2c": {"doc_hash": "84b180a5e5e5e1b237e64a0f1e4d46d5fa0a3f59437571a6f65a21831261350c"}, "229bff9f-fe1d-4592-89d4-31b20d67b052": {"doc_hash": "a16e5a7409c1eb9621d89a94a5a6ed492da2d94f7410e7fb4cda15aa8a52ae16"}, "a5eeb29b-fa46-47c1-b3dd-24f661fff565": {"doc_hash": "c1670e8a1bb1f8513e3b4f72cbdc88202051bd198b5fc7e46434e63a956ec510"}, "5ef426aa-ecb6-4cb3-b042-f3abebe067d4": {"doc_hash": "369ea01fe8207bf0288b8322cc8291117cc71bb4e0ac032467dd4523b1f104e7"}, "7fee1e16-9b2a-4116-aea3-85d7d8164b64": {"doc_hash": "7f200067568253ef9f9106238641a9338d9469627273dfa9e010ce0d030de983"}, "a4b6c717-2916-48dd-a718-96ade104ff55": {"doc_hash": "9d74561f90f60a5136468edfb0adee1a3de9a2eb0de1f79f856a6d7608018330"}, "c9cd7b53-638d-4240-8167-fff590c8e4b3": {"doc_hash": "01e4fbe317cc4f0ab593b979a7cd2bd47cd1a55b103d4d36cdad3298008dbde1"}, "4d496f11-9210-463b-9de7-3c8777964888": {"doc_hash": "4b547379ae4c45c3007d84c4f41acb5758d02c9fd5bade3170c76d46d1865c21"}, "b9df10b7-cbb7-465f-9cdb-af9c405a4ec4": {"doc_hash": "d8efc82607434308c9aae4e35b44fcb48ca9a80481727b5176d28bf549168880"}, "3772b072-e19d-41f2-8387-e4ab9a4d99b7": {"doc_hash": "b16079ea6e5d6338a6b9904148e386cd24c4dd2fd8e040e65517645f197ba0bb"}, "9dfbcf5f-d75b-4df7-9b17-fd73622ad14d": {"doc_hash": "e7899452dcd70aa7522c418a22328b67deaa0b41c5530429dd70ae02b855032a"}, "4270275a-b6c3-4c3c-95fb-73a22970fdcd": {"doc_hash": "07658526e00c3fe2cd046245c26859f79b171f3e8e3555233781e349cdbf5a83"}, "fc595921-c3b0-47c7-ad65-ef84b94e6f4a": {"doc_hash": "aec9923ce716a6315ac01c01c92f16b004f9bc7ea33016b6118c9e328aa0645d"}, "e8d1cc0a-56f1-436b-a665-f90298471ac5": {"doc_hash": "2699afbbe09124abcf27326d75ede4b0bf550b2db85754b7e7ce1a0aac0703fd"}, "81aeca97-73fa-4066-9e61-a9495b041d2f": {"doc_hash": "c317f540e84d0f27cec014b581a540ab10d9e18927fd1e17c55d2200f133f6c0"}, "bfb68a4f-d92b-4192-b874-89bd7558906c": {"doc_hash": "1679d6f09e94a2dbafac81a544d7e0dce1b68253a7c05ead127289b840d701aa"}, "9158c608-b1a6-47fb-9566-c00c9ebbca89": {"doc_hash": "9173c7856ed95b6913e600de59bd81c84737215729ff1f1a5b121c46abefa20a"}, "31542d1f-cf14-4256-a40e-020f0bf56662": {"doc_hash": "bbaa5caf3f28bf0c5e5fe421e5a1aa1da76b1e93d4cedef57a309c7d8ca215bd"}, "582ab7e0-44e0-483f-a48e-0ca058315199": {"doc_hash": "baa995a692e0794af5a7001c5a7a67ce056f32242b00769a3ea74ea0c392112b"}, "acab5894-b1b3-4568-b1b5-d98b3720dc6f": {"doc_hash": "b6ae6e243a854025d919ca315f0640817831c9d463bf2f62b4c16f86443e511b"}, "64ec9b29-17f4-4975-8027-959ce2dbfb07": {"doc_hash": "f10e5646b089f9b8e1a450f333b5ed0956da79e758b21cb324350850036080b7"}, "35bf44aa-a223-4ba2-9c0a-d75127723a07": {"doc_hash": "758169a99fe7429a85571553da56e9053f5d7dc3a89aa708d9ec4a35e56138cf"}, "afaabe26-565f-498d-a50a-659a9a058f77": {"doc_hash": "e30e8049f5b1dfb6ec0afce08212ec7adc3cc49abde8a4c250ffa6b54405aadc"}, "792baa73-e0bc-4a2f-8b3d-c2002fd8f2b3": {"doc_hash": "d32857d4002078bfd8b1cc32aa715e80f5fc122b2add3e6c5e74ac3d009e71ab"}, "769930bf-d3b2-4e08-a265-d2c6d5a87827": {"doc_hash": "545d6bfebb4dbe048d151ad2ee875ec041d25286b187db12ae31fed4bfa2665e"}, "9b858b8b-fe69-4133-afee-9df70d2ddeed": {"doc_hash": "fc8f11bc3c3b7edf08134c45ea2b2c46e565853e1c97529373279d4766bc984c"}, "a03e2141-0da3-45ab-8809-269a065fbe0e": {"doc_hash": "311ea8bc5e2dd8e0e0c38ceae94f25670094de56b24c8fbde8d9f1224c6495eb"}, "deff5334-e69b-4144-ad04-85c36578fda4": {"doc_hash": "a561cac5663e347465b20f0ec086542e0988bbe8014c558528d4f40282f22a6c"}, "a8d66870-36cc-4e8f-bce2-3c143aa4fe5d": {"doc_hash": "d341772ed0d0059799c92fd4ea0e1d4fd67983d29d722aaa347c578a0dcc5bff"}, "29932d69-88da-4e6a-b72f-7db508a893ed": {"doc_hash": "9fbf8d676c77a2cb208f53adf6b9ac8c72404518509ec41337d814b62d472cbd"}, "c79ff2e6-2200-4025-bda7-d86d30ed906d": {"doc_hash": "790b6a6f3ce3441fcd1fe05a2a31bf1419e08ff8284d6267d38685c3ff2b7ed5"}, "76db04df-509c-4525-bac8-657eb8e573b2": {"doc_hash": "bd47f04db44ad9b5ae913035c2ddb57d9805aeb90e0187ffee0e680de31abae1"}, "06020f69-c3f4-493a-b6f8-f4ccd857c7db": {"doc_hash": "8f7c232597708ac4ba3ecea54efaf890154821d460bd72ccd46d3615db1a46f7"}, "5a74bf6e-d141-4b97-b53e-08a7b884207e": {"doc_hash": "f516ab03dcb9bd3d4f040b23e98758797c24e758578bfd47cd804724b9890987"}, "5986b8ad-b245-402d-a8d2-bd37144def2a": {"doc_hash": "b317869762d732dffc0d0f23646ebb0cede01c8d2b84a6b74d59d733d227963e"}, "848a1b62-e41a-48cc-97f5-13e24a322e6b": {"doc_hash": "ea285d86c1cf3c49cd86c08f2accc0b337d57e45b2ec19b68fb5322eb11d4132"}, "6fa7f371-8a2a-49a7-a274-013c0d588e8c": {"doc_hash": "1c30810a98b97d6116f4b58ba4498db903a4011615951ed76e74e2dd11553e44"}, "23a3b558-c573-4e5b-b797-f81b74a802a0": {"doc_hash": "c987dc85c44fa0d292969b2d8837703780c4c6cb51f58af8b8c9af61eb66b4cd"}, "eac779ea-3a7a-4412-84ce-1835ca79dba9": {"doc_hash": "af385bc02c756106feda5f3d7265f8a7bb99267b282dd495ef5a4378c207a5dc"}, "3b0170cc-f73d-4671-9751-4644d5b8455c": {"doc_hash": "08192bc4ac665b31ad09e8251096738d1155fae3220bf7db9384c7d4432ee482"}, "26a8c209-88cc-458a-acfb-1a33092706ce": {"doc_hash": "c95e2b392df51519a2465a46a0b0646c0a618d263cfe5a844cc3c827bd7bf248"}, "3a78d674-db06-429c-a8fc-ab9cfe64aa3b": {"doc_hash": "186ea6278ca6e2df3b28ba1ad8a644996c63e201910e6ac0b64b9b09d33e7c8f"}, "fc0d9066-066c-4883-9523-7fd76aa1511e": {"doc_hash": "f2f4666cc3aee7f3a29bf6e8395a606d7b5ad4c0828ac6f41d62a217c0992d97"}, "0b2f1043-6815-4bb4-bb3b-6dbb4c9c4d39": {"doc_hash": "bcbaef557029c7c71d7b9ae5b4f22089955cfbd0392a5989b65452ee61c787c8"}, "7b174519-ba3f-4025-a2a9-24a6f62fadf1": {"doc_hash": "7e42cd104f547ba296c3e382e9538fbf631f8a74c0528de43f0f90566bb03b72"}, "92a95340-b8ec-46e9-91e0-b6ef998445b7": {"doc_hash": "4d7d96176b85fbe02f5ce460f0e79eaa7d290c77af0a6c4c7756cceb038d45d1"}, "8beded6e-8050-4951-9dff-cd18b351fa1c": {"doc_hash": "8cb08e9d267f5a5e1b12d07a14403e20a696820e46d3750ddc678008e4774324"}, "db0f3715-2657-4354-87e0-517d78f607ff": {"doc_hash": "a895edca49f7e50f1c29db9bd18228016486ef088246d0d191eccbcd8443b79a"}, "4c4ea074-a551-4fef-a529-942ed5bbacf9": {"doc_hash": "4ef611851c0495d10f7bc0d17db66ff017a4b29f2ad83f21b9556549f48dca10"}, "b9ae9e52-75da-47da-8d08-6bbe290893ea": {"doc_hash": "fd72143ee9d53645955a244f7ca30b1fc3730c0814b76b8ff677f5177fc4b105"}, "4b24bc49-b631-4809-8873-ee3888833e5d": {"doc_hash": "8ff5142a68af536cf35d44bc1a752779529ec9590b89d8dafac4cc2f6e3d6bb9"}, "e27c7a37-c793-469a-b527-904ac82572f3": {"doc_hash": "649d151f225f2edba2430164422e2c84acced5e9a22e89bd3c3bf2d1f165dc51"}, "6035f3e4-b42d-49fa-92af-c7e91ed69c0b": {"doc_hash": "9f2d2dc07e5e14a447cf6032b0d7bf6baa11bd7b4ce01110ed870f5ddb25f0d1"}, "dc30af87-d86e-4517-ac77-f59eb102af6d": {"doc_hash": "ed98d74addc69fce7a1e30f482712aa64171d547a1b86c1009fa20a91fe2ee9c"}, "4fa48adb-260e-4c39-986f-566607a2857f": {"doc_hash": "d50468389a217840c452cbd502c38be94d1521be7449e93a0da1d14d61cdeab9"}, "443c7f33-d717-4a58-853d-ce552f83f6ac": {"doc_hash": "27bce68c26aee54dfa788de089541a635c28f6e43450181c28e4df7e62e5143a"}, "73e78c0f-43ce-4c5e-8809-1a76302e85c3": {"doc_hash": "391eba3123b79f83220458d3532b551cfe41f01e761f744115afb3501896d00e"}, "bac1a5c7-3ea5-490d-b9a5-f5e1e8195faa": {"doc_hash": "538f393c9a3369fb39bff8e36c0c7ae46d88ce145c5937772af69dc7423513c9"}, "7642a021-1b00-4821-bf18-5079d21147f5": {"doc_hash": "ef37c7c4b37ae7a6349cb5675f05b92aecba7f3799bfdc98a03d50b95ef329b9"}, "95e0f128-550a-4267-a914-57516abbfed7": {"doc_hash": "bcccf506b3aabc63af4c9c714c0112ea73a127bfcee0c183de31c2461fbe75fb"}, "d54f9510-2dba-4223-b39f-88ad6c7b2c55": {"doc_hash": "22a347ad7bb71e120e2e0762c377d1a858776c7bea919ed7ba3a241a15d20c41"}, "240753c1-a9e0-4ec9-a61d-4a80068a02be": {"doc_hash": "8abfc9320979c537d2403ef30d4faecd97be827ece22b3d88fdd20e294f21026"}, "ed04f952-2b9f-485c-94f5-b552ec3f4880": {"doc_hash": "242d90690c4a888d106f7cf93a21f811f2131859149a54ce79fb6ab5fb30cb71"}, "b8022a1c-b153-4c0d-9f8f-be853f942dee": {"doc_hash": "bc1e59ff02f39506b974b06c7f3a0504f6a244e46fce3188ccf9f29e30d6f94c"}, "023f8638-78a5-44d6-9a38-77831d7f3b20": {"doc_hash": "631ee3af75db07df2faf43e48ad127a1ee622de3b7088dd72d88300b8a25d96b"}, "6e51b324-e3cf-4cb5-a0db-b3452483f906": {"doc_hash": "ff366bb84c88aba77278f0f450f4741636e1681779504d33c4b5be3366f4c9ab"}, "389cbf80-5582-4fdc-9006-6ffd0d713360": {"doc_hash": "c49c8c35ddfe2530de056b1d9b912c5d1129ef0610f15d31848e38f323e5aad6"}, "38830d6f-2a8d-43b9-a468-8795e65f34d6": {"doc_hash": "30d0afbe7856c4caf6ff2f74b6ccd96dfa3882b2f6faf976ad76e9461f4cd7e7"}, "2d98a228-a166-43b2-b95b-b5921c96f2ce": {"doc_hash": "6f70f38c534b3b2fcf79839a5be56e2a194a3cce7d3c340cfaeb7fdf357fb55e"}, "0787496d-d332-48a6-8fe4-91183fa2febf": {"doc_hash": "09c718102d680c14d5a5c414129c77ff322a333397807a87bf5dec66dbde1d00"}, "00ee8221-5fa2-4baa-b81d-d0fb17492a48": {"doc_hash": "547bd914b1d81c95a3a5b989265f80c91ad5b6b266eeaec0b7222b7c25f5d10c"}, "de6053b8-2caa-4b56-91c6-be3e6279a69e": {"doc_hash": "b7e3561e6dfba4738fe1265f03148e57da8fab291ee6b6beed976c32139adc57"}, "b0f58e17-adaa-49ea-baf9-d0516229cae6": {"doc_hash": "102ccad49b912487a9ed6a5011c2c76f62740b07d983077c68730ef98985bae2"}, "f374ceb2-8e59-44cf-9c4d-3097016c0e36": {"doc_hash": "0108fd8e72189999096683e7786ba750538af0e0dbaef5b66c8dcd2a6f68c08a"}, "8d3dcac7-9b8b-48f9-b4cd-183a8ea86d29": {"doc_hash": "b640100c2dcb0002e69d3fa62a8f8314f6adaf1fbeca542867618446f537a1a2"}, "b0c6df8d-1c84-4bf8-9241-3615149e1923": {"doc_hash": "d7ce97815e3e5524743166dfa3c5c025aafbfb6109da9257230eb33bc3e253ab"}, "898e7e62-d843-4612-9649-5878c691e41c": {"doc_hash": "3901277a1af02bc86f6e464e71f2ed1e2dd4064952894c7881167439b324f547"}, "6cc14e35-7a4a-408b-84b9-443447c1b84c": {"doc_hash": "71c5bebf4fbe53d689c26c18783ebe4089d6270d327c9bb7a16159a345542d7e"}, "47e95695-8266-42af-adcc-4114dee9afb6": {"doc_hash": "b34b45f198354297ba660410f6316b3763d981d2559e2a8081c6802a95eaaed1"}, "0e2fb333-5f20-4ef4-874b-6a6b15e3e9fe": {"doc_hash": "946e49fb499821a8c849ff43922bb3e02286800cc533697cbf97a0e44ae9a7ce"}, "9bd8b487-80cd-415c-8bd4-b4253824d14b": {"doc_hash": "88f04f212cf2ca018919f2d690447ee015c19de8a7f67d38f0c3c6392201263d"}, "e80f900c-222a-4779-98a2-6f689b41b812": {"doc_hash": "152fd5aedb02c4bc1499528c5065578908fe4ab1c9ccfd587730cf30f1e186b5"}, "81e3a590-2639-42d4-a43d-8d6131d91357": {"doc_hash": "d7ed2682d7c93b37e30ba395b69534496a3c1cca3803e1b2a385da6a03fa87a2"}, "a6310032-c0f5-46d1-9ccf-07ef75c7c220": {"doc_hash": "cda81394e389b1da9d1b50c9d0a65bf4109ca94e92ce2fea47492bde86c4aced"}, "cd1cdf00-711a-4ce8-9607-4eb3a9322376": {"doc_hash": "50431ae52f8690665ac395aedcd9f6a28e1463685785cb6d0812b3ddb8cc9a6e"}, "ef077fd3-f941-47b4-ad1d-97364dc887de": {"doc_hash": "4b4914a8aba116ec34b0dc3044aeef901b8f01cfbfc34fd28e67d185db6a817a"}, "312d8d37-b471-4e18-8f88-d496cc8fb0ac": {"doc_hash": "225bb5ff8e83701df1098365bb918f2c5df427311e48dee376cd918dfbe0a43e"}, "168f2bd7-a1a3-4add-9dab-23cf371fc18a": {"doc_hash": "0ec7ccce2c10f2e7cdba2e7a753c635a9d2170322544737a9bf1b460bf2cd204"}, "b805e8f6-e13f-4395-934e-b6f2e15de3c9": {"doc_hash": "0da86b4c56c9536e696fc9ba605b25ed456b75add587e2766f0d6b28e72fd858"}, "f34f0121-5fac-402b-9898-c3183188df34": {"doc_hash": "b29e947751d83f915ecb5d838f50288ae31dd15366177aa1e546cf73bdf929e1"}, "8aa3958d-9b15-4b06-bbd2-a6a06f97136e": {"doc_hash": "edc2cb484ee52c59b268ae5d34f702bb2f3f481dcc918e98d61a74e45d564831"}, "504741b8-7fe5-4ce3-9b39-fca626fc6873": {"doc_hash": "263ddfe789035ae2a1b03276b7b2257c95c704a8b82da169cea2c99e465f3ca2"}, "121470c7-26dd-4419-aef1-891846bdaaf6": {"doc_hash": "dbb9a53c22b877513c2b90e13a89c8747d3c7d19a279106121bb1870d60c891d"}, "5ef30bd3-43db-404e-983b-fce444ff31df": {"doc_hash": "a1b59ca34000f1cdadb7b4748234583642edcfc166f290d61ff4e0c9959dfbd2"}, "609e60a6-6eb9-4dee-b259-dfb783745534": {"doc_hash": "b5e626e0e3641e793bce2d5bfd32cc5a4424fda321a6489f0d1e3be714d1f759"}, "afc67e15-c2ad-4962-8b16-1d33ae4237f0": {"doc_hash": "067429d798e17918a317408df7d1434c9a55991a4494e34d2a967a7cc3cc500c"}, "af8cf072-472c-4a2e-bf68-baa1a9e331c8": {"doc_hash": "1d76f9a63105666818ba0753d70d9332fb7326b09273558b25ea6ca6d9d12454"}, "2d378677-c7ac-40c5-9cbb-4281cd27359b": {"doc_hash": "7b927be4b1e20301215966abb7d03a6926131afc9584cb06fda392eac72e6714"}, "ea33f85e-1939-454d-ac47-351885ed5c3b": {"doc_hash": "2656e5f8935648e1face96527993b84aa06826008c0c6186b3c8f816c1aefc7f"}, "9651d5ce-b3a6-4e3c-a26a-6c2aaae7ab3b": {"doc_hash": "41044a2af14485c9d46f67195b86eddba67e1ce834ccda554e6e818d6caf48bc"}, "bc2473c4-cdeb-453f-a53b-1d079892cf69": {"doc_hash": "db52c45f5504a18e11284a9718f0354b8d37a4b87bdb759336f2e212390d7eba"}, "023aa0b2-94f1-4b65-ba6c-c95104dec923": {"doc_hash": "179c3ea4a1731dad4c4cd85dbc4f563cec33a3a63a322495cab196bcbbcd2195"}, "47988ee7-2b74-4c9b-95a1-7bd08f56889d": {"doc_hash": "713fb3c57c052c0cc889813bb2eb621a44802bd3e53be6f7c84aae9790c86284"}, "9b23b307-6366-4fb2-92e6-0d429e66bd53": {"doc_hash": "411b994714c7dc94efe6ee47e302ede55a7a25f815f71c1350701512e592d2cb"}, "5fea1050-d96e-4666-8e4f-3c8375fc3615": {"doc_hash": "584062fde89014d009776ccdb93109d99d7e9847454471d65b3b5e8182c355dd"}, "b54fc7a1-a217-4d00-a9b5-3fdd67f35bdb": {"doc_hash": "549cf4bc0163339c14d50833f117b1eb92459fb72df2c9b449cce17a2ef2321d"}, "270bad2f-426f-40f8-b5c0-8094f5ff9ea7": {"doc_hash": "7c3953f3e8a0fa975dd71d1dc1d7f6edd7050f35721504088bc301173aef921a"}, "10e9808c-7009-4f0b-b2b7-55291c06118c": {"doc_hash": "69f8b5b17d8991111d94b364f71395a30406438691de22919c574db3fa159fcc"}, "ba75c909-cd34-498d-aa23-86f05df10292": {"doc_hash": "f8aab604698587e23d015165ac39530c6f31b9ca4bb127458c59bc2ae9aa6e17"}, "d9152f50-5636-409a-b40e-fd3b82f7ced5": {"doc_hash": "d9a26f823668f312e3c65c59e85564bcc1b56418b31ae322aefa12234043d4f2"}, "272a0285-1392-46e1-8b9a-b161c0235156": {"doc_hash": "3fd5ab05ca1bf243757b3b9058a751dd73c2a7ee2a89d31784f5e9b6f9ced7cc"}, "45b8cea3-2033-4594-bc0c-359b76f7ae99": {"doc_hash": "a1410faa8a4ceffa2c1629281edebc875d37e2137f4a7c92ba65be2e9bc42a7e"}, "525de054-5655-45fe-9873-5d8e50e2d959": {"doc_hash": "7eda5a1c7a8aac42275b7d9bb1b66a9b76beb203a2cfa6caa55d86d05bfeec1e"}, "2aa95c5f-ae1c-4f02-b090-86e2d953a135": {"doc_hash": "13ee4ec65bac2355eaf7280e06dce884945bf6bb8ec28f3f41f7e7214bfa0c2a"}, "69a9bde2-5724-440d-8228-f60e333866c2": {"doc_hash": "aac26dc84016b801e763e64ba2fc92879a60b89c7348cdf075343570a53f12ea"}, "3789d72f-58ed-4fb4-9f15-1dd8abb9811b": {"doc_hash": "352f1708a1e2a379a778694b2f77ff13bbd5337be3e0ccc723db137bfb279da0"}, "c5fc2d84-afde-4b59-a06e-4aacf528b6c0": {"doc_hash": "a5f2be01d20a7626864e486ff38c74301570d4f58a4dddccceacd3b2eca60ab8"}, "157d664b-0d36-4c16-b776-18a32d46b7ff": {"doc_hash": "d9ca171a5773922dbbb8084e9378b676b3e5b52bf417722d14c2494a5123da24"}, "1f312d57-e547-447e-8831-659fbd3d5a95": {"doc_hash": "94d70d15ec34d0ca0fb434ee93c9e48dfecb4c6f7643c6277499ab6c32b64025"}, "eca08ce0-72ba-49e4-b097-0cdf2c313d45": {"doc_hash": "33ee787f9804a5dc66d679081cd8e6aeca6e03c119cf6249ee43f7fafc301257"}, "7cd3dd37-5acc-46d4-9870-13555b01f87a": {"doc_hash": "bfe6f213a6ef20fa8a149fa9d626cd10ecda4fb9e95a25574ee78167bc0de165"}, "299535c2-c70e-45cf-9736-a663c9984d59": {"doc_hash": "f3b12d1bb3d27a61a3a16a07a43e87bbeeb38995ccbbf6df5dc8490cd621bcef"}, "3f52ea2c-41a8-4cd1-8ff7-46ee68f6d872": {"doc_hash": "253d995c258ab5f5d10b1c109d1705758ad3d65f39566d8d01dbeef5bd1729c1"}, "14633f91-9d9f-4b90-a0fa-00e942f268b1": {"doc_hash": "4499e1e0c68b480ec7d6cb011bbe2916fc1278b888b85be35b4216f3474262ae"}, "cfd596cc-3b8a-4dd4-935d-610f62e95576": {"doc_hash": "205135eb56863e411f25d6f8ad12df58c2e1e5e6422448b4a38aa452d08eda29"}, "0e3a7c7b-8517-47ae-ac4a-5156475c71f6": {"doc_hash": "55b127073a763b48a18d98c2d7503b38bb20c08ee15c6b02a54bd5afa6b2e128"}, "d38339ca-c680-4d64-a924-cfc6b6ff8e81": {"doc_hash": "c6f5438055250aa5cd60b7fe306fff2ed7a84eb6cd791ccda6c6aa1f48ea713c"}, "a67c5113-9ec6-4cfb-a6e4-ea025cf9cfce": {"doc_hash": "149e3cbcc6f71b0c059ef8091cc5430b6b15655fa4763134597757d8b1801179"}, "625b1f0f-d407-412d-9971-586ec4d72f37": {"doc_hash": "04ea0c47a12e66a97b2eea0d38e7b2ce717b3c964d07e62c4c04069564f98559"}, "4305f178-8fa0-4e2e-98ee-95058197992c": {"doc_hash": "be7243ea1a18941887d6d9bd797755873cb9d79e7a39a05125e68dd76c0b750e"}, "a9b664ac-03ad-4448-9a55-55221d6aa9db": {"doc_hash": "c920387687885e095245131c85c1a75b47227ab64645ff5d2a9923da7e786c2c"}, "48abef9a-c1bd-414a-be05-56f296bec395": {"doc_hash": "e70bd43f6494849a9a472b5284da4ff482bbf98f9e2305a01e10888e604ddeae"}, "86c053e9-7e50-4562-8f4a-2b7ce2e6fa00": {"doc_hash": "ac05bd5198a2a1bccf241d1ed64dceccf5417873fafe481fac5aeb0301127a37"}, "63cdbb72-8753-40c7-a677-65c432cde1f9": {"doc_hash": "2ebe6a6060c11c1601c94ec289b195d111d8b369dcdbae4a8e7cc8026c39ae9d"}, "47e362fc-6b38-47f4-9908-fd5498e41469": {"doc_hash": "00ec1b58dec24feab8f0d9b5a63542eb40495e152e52a8b2a6064db02e468406"}, "62400041-44cd-44fa-8f64-a6e9b2b2f289": {"doc_hash": "bf789d84af6da5b7fbcc764237674b8da14e887a4ebd371516ff301058c65a95"}, "8402448f-d475-4c33-89d9-eeb317819125": {"doc_hash": "66e3fa0755d01807f852657850c1330fc7a939b205596520aab5d3107a43e932"}, "96bb5190-fb40-4472-b942-a3503e58aaf7": {"doc_hash": "652b38e3fa43c8d200cc7adbb062f4c574d53f94ced27cead0b2d020ec841c4f"}, "337b0cc9-c799-4fcd-91c4-500aac430e8b": {"doc_hash": "b471778c9141c3de3b04f0450b069a7044abdee97dbfc30fdb0340c1e3faff83"}, "ed231a9a-d15f-4f80-b4f2-bff0dcd36fde": {"doc_hash": "9a6793c60852660529369d26ab91aa7df451995336f30bc73dacab67f1a7ed52"}, "7a214dcc-6e75-4adf-8726-7c9d2c3cdead": {"doc_hash": "aa953f5adb786da3dd8fe664a2154a67ec1f591d19016ad97faf68e08fc3a832"}, "149509e7-458c-435f-9cbe-024fd66ad7b0": {"doc_hash": "121950cc0eeea775eceffc7bedfc52d208ddcf11b4a9e0068ea83651552e2ea5"}, "b2a9c8af-fb59-490b-8e11-9927c5a23a6d": {"doc_hash": "7a60d0eaa1cad0e9e027b5e6f9b48a895d526cbce51732be682aeafd66a8967f"}, "54dec6bd-bc24-42d8-b1de-a632bcd56df1": {"doc_hash": "c87eb2bb626d788a09aea51928c2e9ef957d67dd6f2a4aa22f6824817773a44b"}, "2a48d303-9ff8-4376-9595-8e059618afea": {"doc_hash": "95a4dcadebb5fa71c0eca09cc9d3eb8380cf7207e29350ea2890d1ebf3965c6d"}, "9358028a-d373-40cd-818a-5a7e59623d8c": {"doc_hash": "05a76cfb3a36e1d98989973b05c3fcebcd6d16145a20b578989b6272d4d5289a"}, "e0aa6df7-0612-41ff-a17f-1293a55df7d5": {"doc_hash": "4890ae8c528caa29f3474ca264451a8701b6249cc2e69da412e86e8fdfee5c54"}, "359a6c78-a474-4902-930b-561eb6589902": {"doc_hash": "62a9084983ddf2a66dad49070d3df9608310a6ea1e9a94dea7c30b1045480667"}, "fa171fb1-0cf0-4779-9db2-bed5e5c643d9": {"doc_hash": "b26b6a96220bdf8cf2a68376630f6bdde1c7805b8e5100985dca19de8d2b72d5"}, "6a7df70b-48c6-4840-861c-db2734ca2d00": {"doc_hash": "c3f2a8b916c95c66d387cbfb9affb56ed2f1a53d72f6f32e5d3b741512d82e3b"}, "3d87035e-b396-4fe9-901f-74b845ab58ff": {"doc_hash": "27c0072b811aef259bb03b297b6eae24e611dddb86e79b6ec56e8f816f429cfa"}, "4ac69c36-5e22-424a-b556-7e819b62303a": {"doc_hash": "011f2f7556f183789d7c3ea721da17af07be5932757ebd8341bf438848eb1696"}, "76c07f39-80da-44e1-87c1-5bcce15f84ad": {"doc_hash": "80af7939bb6758fa0edebaacc7466297fb0d9fac07c220c296cbcfc26b6ae3e9"}, "c5fb0790-302c-408c-80ae-3f3d04956a1c": {"doc_hash": "c03e20cd4de759e5c0314a39e3ba6b9aa79e3c4fd11159b2e1ff1ba16651386f"}, "513b5028-e3d5-4f67-b543-9e47f96a1867": {"doc_hash": "1c2d00b7afa426546c46bd35665cc684dc05bbe0a594e34537b087aedc6eb22b"}, "9b1f4c6c-eda1-4d17-aa65-859eec503a54": {"doc_hash": "676c3b4e4164e2882cd30417a8c0fb9998ec8367af731068a0d6b65cd00d0b8a"}, "cccc3194-95a8-4d40-8b46-212d6d25623c": {"doc_hash": "381ba65589fe79975d3cd1c3b1c84c2f008e66e56c77cb9a7aa59aa493123677"}, "93f79f1e-b4d4-4b53-8d96-31ec1acb6f90": {"doc_hash": "6bf750af83792c98a672418771356962060f36155ab9170e944ec4f46f368035"}, "7d26710a-4300-4e6a-bc13-93d847be4023": {"doc_hash": "b25c342db3606e199d3edc69e8d35a5ca6be9f09bbdcd286fc943879be457540"}, "920383ab-1808-481d-abb4-5f32152e7854": {"doc_hash": "1692601ea16f022c3df531f2d5945e82a3d6c125910a9a59ffa3e2ed85011f5c"}, "4bd5e4a5-f2e1-4749-946c-5cce718930c1": {"doc_hash": "9c04ad8eccfdd6f76cfcae6960e4e7573b7733cf73f988676052919c8fa3f0a4"}, "9cb34304-3618-45e5-8b2a-b2f5eeef0d25": {"doc_hash": "b4e7101700d8f692968ad03f82f73dcd1fa77f1f58f2da02b261d617dfb640af"}, "8b0a18ed-414c-4ab9-b428-6859f2da2281": {"doc_hash": "4ce74b4f6653ae7174455acfd646dddaa5a887c58fdaeaf665f60b5d9e5fb829"}, "022e1d47-4fc1-4bce-8ef5-6166c85ba220": {"doc_hash": "7fdc7992b34725e292d332978f5192013c023b305240cb4987c6a55d60ec8ea1"}, "d68b242a-b075-4e1b-8d15-a9226d12c701": {"doc_hash": "4d047df40cc280c3d0dcee89b70be22511003d2c8278aeff96f499c551bcfd26"}, "2ced535a-9ebe-4a5b-828b-b23ff54b46c8": {"doc_hash": "83311b1e52b8ea719726a51d3d249bfc2b5a0846e16229a7bde3798b7444ddb1"}, "bdd52db6-e7eb-45f3-be37-62e074ad3fd3": {"doc_hash": "4af0ba89a7724c83cb35f4c7c0df9c3d6e4463d2cc2804ad907b9aafdce5adb8"}, "3e533497-8316-4c4d-a004-74cdc51e41d2": {"doc_hash": "5bf39fb19ef3ca0eae79986ede7820cfe8d7377358c9e0e032990dcc102af830"}, "b110cf64-198e-4f50-8593-6a7e4d1997b8": {"doc_hash": "a5cd3e6f5a31efdb5d932e4b51870e2ec8d021043798b5a9e21882a291458a89"}, "bf337b4b-b75e-424e-a8bc-01878f9b16c9": {"doc_hash": "6cba1dfe93859fec2638cc2adf31573636799656d439d8878d7d13df96de040c"}, "c0e881fb-013c-4036-bcd5-4d700ac547a9": {"doc_hash": "b44e81b35cd6d11fb4c735424bd073847e5d868a84e1ec92b65ba88cd8ea5503"}, "db640c5a-8af1-462b-8b15-edea96b9f266": {"doc_hash": "fa2ac63e8927d7fcd4a0e7757314d1118a60143ee86510379e40fad9c56c5d18"}, "fc80591b-64d8-4036-a7ab-9e4058684158": {"doc_hash": "02106213cff755ce40ca30d473d5536aeb99beb57f02066727762c73c4c4c6bc"}, "b1ae1876-157a-47a4-8efc-f90c7e17891c": {"doc_hash": "8e969214ecd4761b9c636024a8ad2a41b02adc1f3ce14b70529f85aea6fac968"}, "600f4a19-c25d-4702-a3ac-ddfe5eec293e": {"doc_hash": "76c0f0edfd0db8483b832b311a753011969996ec9ed2c3bb34870fa2bb4d0a15"}, "800936e6-81d3-4667-acb5-b4c2484426ab": {"doc_hash": "735519cba3e07e2eaddac76933000670cdfcbae44cf91293929cddbfa8471129"}, "cbb09a51-e2c8-4653-a587-f9094bce6319": {"doc_hash": "9a76eaaec7681f8676449335c192368c2b7606ffaf750cf3c11cb912fdad75d9"}, "ec6db6ed-b4c3-4981-a896-ce26f0d35ee4": {"doc_hash": "0bbcb23ce6c36d2af2670ae76b9202ee01c1751bc01cb2741d2376455c61752b"}, "c3338335-2ade-40f6-92b9-b5aa56433aa4": {"doc_hash": "7c632ac15a3c816e4f46860c35dd673281eace47603aadc57e0bbb7596699508"}, "b9ab4fb9-f341-47df-9d86-42a6f565a1ca": {"doc_hash": "3684c002c273b641c4aaaf29d837e5a7009e4b28579818204a79cedfa792664e"}, "0131f74a-7f00-454d-b249-edb01211b270": {"doc_hash": "0d31a7193b9e236f14e5263bbc6d030a405e10e3244ff320d810459e63fb4251"}, "5f864fa1-42ae-4deb-b41d-0f810e1abb04": {"doc_hash": "24f357bf6b2b0026d668a5b8b9b8e804f6e08059951672d4144892d1283bfd8a"}, "8410bc92-0872-44d1-a21f-e53a0a8084fd": {"doc_hash": "fd4454aa74a3d61e37e47d91c23142ccd57b76ed05ea8db38de66d7e445d19d0"}, "bbe8c3a1-9065-46a8-b0ac-7c70a9c57093": {"doc_hash": "e43a1dcd209a59d16b742493eea3f8578a714b1cb92ea113e09a079362ba8c6a"}, "dfc35ed4-8b1f-4070-8587-aecf08e752b5": {"doc_hash": "36d23eb52b0d95be66e3114973e1f581b1b2564c6158d0e31f78823dc65c47a9"}, "3f847a75-c249-4a09-836a-63c53edfb0b8": {"doc_hash": "7a5487fc45c6adcca7346b5834eec419f5a6df61989a3b1df5e2811cf2f6cd04"}, "3f54e163-e4bc-4955-9267-478dd82b4952": {"doc_hash": "b888215209b20f411f4563abfb0fb3138d74039f56e3767dce97632bd838fe89"}, "c3f1d4fa-4236-4854-9c0e-ffb05e47ab88": {"doc_hash": "9493b311ecf7bbb2b364b59ff69c0a83dda7767f3f0007aa3c5544d5c58c6eec"}, "4982be47-220e-4c3a-a4ab-7c228b5f64dc": {"doc_hash": "048389334943d3b09edafda52df337a4c972ede183be9d24b6e8cba9cef31caa"}, "fff8be58-a74a-489e-996e-aa329f897d9b": {"doc_hash": "2f34395793bb7f2902e6e00698126c28e012d55c9bf21b5a841305a433cef90d"}, "2d192661-f6ff-4b76-9058-34bdf05761b2": {"doc_hash": "3b7075554b5179dca2c0575483c23f663e16a391709e276d9a3f8b55a11cabc9"}, "482359b2-b025-47b5-b353-c9026b88fbdc": {"doc_hash": "891b565717f8ccc1e3cb843c184cd3147521d7f6b69dd0e28d5a75a05712c480"}, "ef8c5f66-058e-46d2-b1dc-661522aabf56": {"doc_hash": "c2871b4cf3d03122d1f078728baee98de4098e7e993a4e2f0bb765b8f7e7853f"}, "33860fb8-8309-4a28-a3cc-768688d604a9": {"doc_hash": "25a2c0481c42e8ea5a3beb918799126aa3f6d29a3036382fc9a5a6099f8f12bc"}, "aa412820-3185-45fa-bc25-37fdc5b92838": {"doc_hash": "806d7d99e9d8a0370cd7068ec6c245d2b8b4dfb697caf6172af601df9003dcd3"}, "4466ac1f-2dfd-4a21-81f6-15b1ebea3674": {"doc_hash": "2080f87ddc6b63d2838b716841e9616efaa1ccb49d35a99c17076d3508957a8a"}, "2b06bc1c-8968-455e-8ae4-a5281b360fef": {"doc_hash": "b71ef1c62c855fe9cfd08bd4ff521a0c03755ffa5be4407e82c0759810ff77e1"}, "32c16837-79d5-456b-82e8-8d5697fb646e": {"doc_hash": "78f3c9291fb01774d0ad93d60710af79f4386b48872fe4937a89e65c596196b8"}, "1eb6c8a3-0fa7-479c-9a7d-17803e189977": {"doc_hash": "570dfbdbc2777030d4a617ef15af68a2870b2de2bb8c245a9cfa74a7b443bbde"}, "96829249-2d44-45e8-a547-463ae291b704": {"doc_hash": "335b143a9294c8b749304d9ea42665b3f4b7c0e78d6bfd1dc826857933e5c96b"}, "29455fd2-d7f6-4378-973d-7d90cc31303b": {"doc_hash": "43db5368d86ebd894ae694eb69fecbce1703d9080918b285c96b1e49749fca00"}, "df9e2b78-62cb-4ce0-8b13-9596da33c07e": {"doc_hash": "a09260112495cbabb2b87e1cf072a3d9e632f2a5c85308b0704c8cd195f1e86a"}, "528532d3-941b-40bc-bb21-a87f3f89e843": {"doc_hash": "c9ceaf14bee2c155b86c6f69d03a567e33e8df15a9304bb1dfa6506c3b1d3721"}, "09a1b9de-1548-42e9-b666-b33ddd784a5d": {"doc_hash": "aeb315bb26749bc9d71f9224f86b59291e96523c0ce4994915bfe3dde4d123ef"}, "28ba7f3f-c1b9-4a46-baba-d39cebcb8e9e": {"doc_hash": "0c6f3a6c91ce46e23d6f65e8624e48f04084d238633e87817c7f12beb43a89ed"}, "ec595bd8-ee7d-4cfd-b32e-da66fcabf45a": {"doc_hash": "f6d2ed2df07406af0ca5649866cef463635541730f971d7a430a478596f31e69"}, "f4186876-cc32-4542-a1d1-5fe251e5eee0": {"doc_hash": "0629fd839ac13ad585d4fa36d883e9562b877707ef713ae6e74f3ba49248617b"}, "b8c4c7e4-b1d1-4e01-82b6-afabd45680af": {"doc_hash": "14196a7186677ebb3960c23d939d9afc643ac7b09ff523ef2a2161a03ae43cf7"}, "ee41cd0e-d485-41b6-88b8-0615adfbc078": {"doc_hash": "3148581536fc420da19ba5e470c0d58f001ae9d3825e2d1bd8346b8e19a8e54b"}, "6ccbe62f-c607-44b7-9fd1-0e1bbfb69527": {"doc_hash": "002bdd1b65d76607e1590e2e8763a5b6b4756ce054229ea32eef1e6b5553a600"}, "4b0c1853-a4ca-4a0d-b34f-24b3336d5e73": {"doc_hash": "9059fae747a80e623d44a82018fa8f7e5da4fe329a8eb855153dd7db8dcd3be1"}, "29248eed-6eac-4733-adf4-dfac56258a18": {"doc_hash": "6c2460a78b830762423651d2297d1863783a68351cba46c9cff5a02eaed0a891"}, "a422f517-606b-442b-9a0f-541e3d12d650": {"doc_hash": "f156b9576e3acbc327f744a1a7dab7adce938c198e63745f30c509bcf9c01435"}, "37ec8820-9f49-4b2f-8487-03c2ea7eb4d2": {"doc_hash": "4c98ce6d29066ed3a62b028b94c346ed783735a9376bb758ecc26f7793e8b101"}, "de5f076b-4338-4a55-85f2-84c42797762e": {"doc_hash": "c26f4ac137c83b1d87093e8ff24ed032477b304c150bf338987773e746f03be4"}, "92083c6d-a1c7-4423-8c07-e9d43603d486": {"doc_hash": "10921eea7d301b90bbad172eb90fb186678e14f935a231b767ff1de119ded070"}, "fc4cb2bf-54b1-4cf1-a0a1-5ad4c93f6dbd": {"doc_hash": "309b675f67b2757ec52c52e4c6efe7f6041ad2853ed923812d79d9c7d6551b84"}, "3ec1a921-4acc-4391-9d64-70e1678bb70d": {"doc_hash": "eef63f865b49ab46a596a032ab3415a13960cdecb8803f5a16fdb899e1d3ee6b"}, "bc4fb7b7-df38-444c-b862-1b950c9fade4": {"doc_hash": "41e8c9a1231451846ca0e8bc489edd9e6701e3538d80171605505670958b91ab"}, "5d68115f-96ca-4936-b3c7-74b9f1d60096": {"doc_hash": "dc93d8431c089b6e0f5ceec8ea1962f4e415d46289349dc6f99613ecf4eb8d69"}, "2b61c3d8-ee1c-4560-b21d-0fe469bd0f2f": {"doc_hash": "eecd275152f2b156edf86ab1739e098a84dea5546e6bb18fe5ca4e6c9ffac2e6"}, "3bc5e304-82ab-4712-a8f3-4499d3b43643": {"doc_hash": "3f6bd570aa9934d74a1b1e6d01336b71c907e23a9524924fcfc1b0c817c72154"}, "635bf8a3-d21e-4c4d-aa36-45bf126018e3": {"doc_hash": "3ccc81f917597347c547edb3850647e949b71cd9167897fcd51cb4849216ce73"}, "9b01fb8e-2518-4e7b-9132-dc625df874a5": {"doc_hash": "29f1ecf6629cd9806571bfdb665b62665e5b84607e1a35189466b9350aebaf05"}, "c0332bdf-7601-4b92-be55-738055f7f538": {"doc_hash": "058f914abe4388acd038c3f5a9a4885fddbb3760b6d8d83de162a9c4e5dddc4f"}, "78e6f5cc-382a-47db-a820-6500eabe4388": {"doc_hash": "8f2bf629d82c0a382d97669189354d851a59094374c055d4a8f6740dd1c95ec0"}, "d3152062-230b-4c6b-9eb7-76e65d1b0196": {"doc_hash": "aff7e4ad89c5426251ef2e861311741f94cb0da05f78a60ae0b4d11a21f85510"}, "464a62c6-0ae4-4a09-b08a-3d3400fe48e0": {"doc_hash": "7cf8a39a4a09c5c3aefa3bcdf4921fa220baa0cf05a447263539cf5c04a67158"}, "a80b27a0-7386-4bde-81db-8f9d5a8063f3": {"doc_hash": "3edb71c4c72101f6eb977c29e47771a63393cfd8f0e5bcc0b42cb8d7a7658fe2"}, "314468db-88d5-499c-9184-fa047bb50a9c": {"doc_hash": "c07573d54b592d50388257b2308b698eed0c7d28f019dc56ad32fa90699fd3df"}, "5c7b8178-1276-4f29-999e-e90cffaa4371": {"doc_hash": "6a090adb9d2a7970d6483c1d9041a037db71edc3bd87bb9cce8721326d5318b0"}, "39ab9096-240c-4dfe-9f5b-e2cf1ea7a326": {"doc_hash": "5915398d5930f8da1199bd3acf37a91349bfaf2ad5c27b01087f333a0c504aec"}, "de179760-36f1-467c-abae-dbe9e281b20a": {"doc_hash": "cf560a21b79eca38201d51fe0cf3fcea8c5ce5459d03872b9945de896d3c7c2c"}, "24bcce7a-10d6-4636-8835-bf9902a2c2b2": {"doc_hash": "d401157f39ed243b071245bedbf74dd25500aeeb3a9d20eefb55a0306a631ca1"}, "d4e8f040-7f2c-48de-91ec-768a9a7fc92d": {"doc_hash": "d0a8829ed44711fcf6edc0853ea82e0395550a0cdac017627a66ca8289a92865"}, "d9c50519-44ce-40b7-8d71-3e7696e23169": {"doc_hash": "569a37f48d2e9f20c46719eface66c73263f780a0d6041c1f2022d3b99bdea66"}, "6ddbad0f-78bd-4c37-b410-c1807a498ecf": {"doc_hash": "87b9d4b49ac4ae701452801fd10b586f23157db9831b2ff5647e532162308cf4"}, "d91affbe-7afe-454c-95e1-5e4c31102413": {"doc_hash": "7b2f6d4bd74a3835ce31aa6e0177d57656a95b8127caf3e5045ec19838e06a8f"}, "7cda03cb-4d25-4f0a-ac76-29a6b4a1c650": {"doc_hash": "aebd2232ad6e34350a00208f1c4721e5e0bad29cd9fe02305bf046d82485fd8a"}, "bdde51ca-ec79-4b3d-a255-71aca643a708": {"doc_hash": "fd4c6a3264e8fe19de0765378b76dac843496e26c949dbfba9251c12f6d0a250"}, "ad23926d-9e15-48ae-97e2-dce20cef5193": {"doc_hash": "6f102f0ddcb7854aeb9a9f113c563b1ee18f5f1beaa39361eaa1573160c91103"}, "b77f9edf-7dba-47cc-bedf-97510554aaf6": {"doc_hash": "5e2916d274a1a9b5b89ca99cbb352642f37ed10404d552acbabd7c8d602f7445"}, "fb8c1c6f-89b7-42ec-82cc-ad7def8915ca": {"doc_hash": "166d22e746486bf33ae805a011f64fbce8d5dd0d064329c33d2b61cf5a3bc02a"}, "4d8cc184-cfb9-4b85-a112-6b0f4f75d520": {"doc_hash": "33ca1153aa838d2039d77a3ff943fd93051d53a9aa5ca4622fe14797e4aef264"}, "6fd92e3d-4ef7-4c17-8086-29da7a14a205": {"doc_hash": "af3119282e7ea80dc83e1f3b8b74f6456c58a07a49b96a27833accd92e18b912"}, "28bc469f-1271-484b-a3b1-604e8d7728ef": {"doc_hash": "09e1164dfdd640b3335a95aaaf65dd34cccc88ba3b66fb253d96eab5dca4035f"}, "e5232443-99cc-49d6-b355-aeafc9ac6d9b": {"doc_hash": "e14090b02ca249985fa82d6f89a1a0e3ec94314fe2177d49382437a4dced8a6b"}, "76d1af34-31fa-4897-b1af-ade4d0310ff6": {"doc_hash": "e3d833641e062abba78b2d5edc8b28b25a8c897f6a6f9b8e3c635bf0bd3eb612"}, "a02d4b5d-0a47-48e6-b326-34383214a156": {"doc_hash": "4723eaca7473a82cfb46d222d030e0dada82eb95ae46a14f2fd66f94c2e48f43"}, "ccf43b44-db36-498f-ab8d-72e5b4f74f7b": {"doc_hash": "f7d94f369b5121cbc7e6906aef9f9370a8011bf025e265203edc239f5eacc90e"}, "c58962f2-6d6e-4015-b59e-d096954f8424": {"doc_hash": "30d9fba0e41cc488379069a192b046418dca379c939502cfe092ebe4d6b516de"}, "600f88ea-66a9-4424-aedd-943712ba9c5a": {"doc_hash": "e4f82a0f6929bd9d8948e0cc8206a22761c2e3b41d5dcc35777f7309e2394f75"}, "2a69d1ec-4b09-4d09-b4ca-16be643faf22": {"doc_hash": "b59c4d77832b1e2c60195d15456c9aca7a052866e190262b234c2336b3e7c579"}, "2aea2173-26fa-4de2-b15f-8e977322dcaa": {"doc_hash": "64f3dddf17b83f30d8fed0865fff18ae01bf335b5214a9c2f33536681ba6ab9f"}, "f52a23c6-0f46-4878-97c5-21834789748b": {"doc_hash": "2a4e2f1b6d1eec2201739055d468494d26522508cd80852f753c9c8f436b1aad"}, "62411fdb-4bd5-4d1e-acfe-a2b7d86afb21": {"doc_hash": "4936033da9d23bd6f2eb0f85787c5a4858c7f299d76f56c4cbbb060ef459ccdb"}, "22d932e2-0133-44a5-8c4f-edc46ac69cb3": {"doc_hash": "c83db5d41928cfaf1fd032dedfe6a977e84a854d7cd78be9f7c7981a38488120"}, "54dd75a3-9ce8-4959-bb07-45d5c2363a0b": {"doc_hash": "dbcda4a8ad6cbca3ce10d524e390e5bcc014f64fbc1c811e052feff3fb8827dd"}, "30361869-3185-4e0f-af29-c866d7ddcf22": {"doc_hash": "65c456c3993cd9e944155a53463c22e5bdd4714baa16f34320d3c15727b451b8"}, "3cda91a2-269e-47b6-ae87-b2ca335fdc3a": {"doc_hash": "62264e304c84acadf405941142734d9b5c4a8f84286a19b755e26c6914838e0f"}, "7b59ebee-ff08-4dae-ae61-86596c04f0b6": {"doc_hash": "d8aa8273916dc2a1451fa752a1034083e771be6923ca49096141b849fadca9fe"}, "8a2fa8bb-14e4-48e8-a733-349f8cb91e5c": {"doc_hash": "72731c3469d8827c053a4cbb5af1fe88b23161147baa301fc80ed04717d39ea4"}, "399f65fa-63c4-4d44-a458-b47dd8fc666d": {"doc_hash": "794b4695aab148cc1a928751df0ff2089111439798e26f5a92e915b37e6b9b2a"}, "13508d43-153f-4c09-9f17-1ea07fe6190f": {"doc_hash": "bd824f80239d6a8958da88d76623465d3f18cafe3f33a004189bd93f834b9b11"}, "c36d01de-f694-4fc6-a364-8e3d15c5e1a2": {"doc_hash": "abcfa99c700d9862d7b6cc272f59c01e56b3affd8e42073b2c95e3b4924ed1a2"}, "1f35b895-e184-4819-8372-fcc26c248eef": {"doc_hash": "754810699ae13a926796c6e27fb0c2c58ca7f17dc29c9f0fd8240fc39bdcd1bc"}, "e36dda78-0a4d-4cff-8faa-3b1b7d99d176": {"doc_hash": "7515fadb90a261fcadbc7afccc0618972b118bfcc6ebd8c140c846519971568d"}, "0decf9c1-23bd-479b-ac7f-3e4909a8dbea": {"doc_hash": "1f226948f253622aec761aff82263c5a46cc626a84553b806b837db9e2594cfc"}, "f42f6e3a-b94d-4ec6-8849-442bd4150082": {"doc_hash": "a1b291f2ac874cdd2c3fa9b8d0ad504d2ed6cfb68dd7fb1c8562efa82c010bad"}, "5e24f85e-fd1c-40d7-8155-2bc8cf6dbe46": {"doc_hash": "0d480e68884aea6263dc86b8f2dede2a0ef5e55e1c6a0f676abea20d119d9260"}, "1dcc5f25-5cea-4c28-96b0-855bc0bf7ab1": {"doc_hash": "147bf195d17083c82d9c7ca100ac39c0eb88dbf3d3317f4175b56577a2526b6f"}, "bf41b39c-cf3a-4fcf-8620-bd592e617f8a": {"doc_hash": "99dac12a52f4890fc3f4dc99bb1e58c6da090d75612a42d6d6939ed4ecd597c7"}, "1b39d59a-701d-4ac2-b298-916d5a46cc9f": {"doc_hash": "66100755a4ff596f1522d2bd0415a880d9dc5bc2160b07d397eb8746579c81bb"}, "074934b3-7540-45c4-a34c-0a74a6ea9678": {"doc_hash": "103a1808e8326b13c3c4d89e6ec6d0cceeba7fff0ac66cde87fb7ca446dd86dd"}, "1e21dbe2-3613-4336-8bf9-cda84a9ee3d0": {"doc_hash": "5e5688d5b38532e19ef95f88b76c5e8c4471c57a75bb59597c7906e07d584197"}, "f7453658-ea72-4bf3-b1bc-c8c61368543b": {"doc_hash": "1e20650108d2036fc694ee87a826cbb521d5f5dbaafae07684a79e026b592e53"}, "084fe246-0032-48a1-811f-c4f5f726acb2": {"doc_hash": "0bc2dd7a91b6e6f4874cdb0f5f922bd42981a65546d87c9f43c86c0ec5a7d93a"}, "bdc3ef0f-3d61-441a-ac95-10dcf14779dc": {"doc_hash": "1a786560045814577b97d17f7d61bcee37eb406dea8d928bd2dff012ee1d8fff"}, "76593497-7a61-44f0-884d-1cd6d8011b60": {"doc_hash": "80f464f3781e31a362112edabfd3d3b656d49234139697fa1be690ffa73612b5"}, "ca31a339-378b-46c5-86fa-f70aacb529f8": {"doc_hash": "7ed95ea320ec19d6caa5869d509a520d05001e9d0811b17eaccc30a1347c20cc"}, "ddae4f08-d1cd-468c-9d82-bdb3aa996bfa": {"doc_hash": "f797ab3ea72f5352d13bf97809f6df9e3c69af4785edb4e173916e801ee5f174"}, "d20a5861-9dfd-4512-8921-bf4ccff1cd0a": {"doc_hash": "9143d552a233213c03efecf7f23b621aa895bdc67e6d8d37e9056c9b2aa9344d"}, "ea55f3f5-cc26-4a77-834a-0ecaf25e78c7": {"doc_hash": "89298d0735a5e5983993157dabb8a14d805a6914aa9a651d71425544aa04a086"}, "32c15dcc-d719-48e3-8a47-1dc2fd7e3e3b": {"doc_hash": "4603637b889e12d972e20b2598fdb4d5199bec8929a1562e641f044f7b18cb55"}, "9c4c9204-08a8-4f68-9e7e-ed65c28ae00e": {"doc_hash": "21b29605a52ac6a8daed76df1f257a671076b0f377775b38d7cb5cc9e34d0ee4"}, "8294ba6e-b813-49ec-89c4-ca9bfef8eab3": {"doc_hash": "c06f82b79f858af8d87f08436f3a9046712f23959484c27f31a00a65562dc033"}, "69e06097-7a69-4178-9fc6-a3e6b7619e0e": {"doc_hash": "3e1291819743af7527665ffac29a5acc22e9ff23c760200a2c73e2a0672403f5"}, "80be6656-f922-4e0c-be06-b181be357347": {"doc_hash": "6e6d415e551b4ca690a4abc7ba15ad1a99365f7123bfbf0bcdfda92db97af3ff"}, "91a4469f-c365-45e9-b93c-1fed5d0091c5": {"doc_hash": "b86aaee2fbad47c3cade899ad431c2a4aff6fd74e0059e6ed7a58232bf34998c"}, "85df7906-10a2-4c85-8d5c-c5bff903eb21": {"doc_hash": "f823a409d03181d35e7154d3e9e2ca55a133eeb2b78294cf1ab5aa699a9e22cf"}, "5b040e50-b341-4b9d-8464-740db2bce610": {"doc_hash": "b74622b2155280c85e783368554f682cd4a267ca5c30352e2df0059c0f6169e7"}, "5d19d1a3-ef65-4a04-9d53-ba3ad26d89d3": {"doc_hash": "37befb957ad737c42f5390dac3cd132594550c1daaf490b7a0224eb0fd926715"}, "228a903c-770a-48f6-8656-bb641b735031": {"doc_hash": "d0b08f91942957ed8363708acf6373146ff2c617ce897b364182d36b5b1512b5"}, "6f9e8176-7bbf-471f-a531-50558efcb973": {"doc_hash": "7427cabe38e4592ef3239a0647538d75edd5acdab2f15223c028e310c86c8e5f"}, "84636044-f482-4299-95ef-cd11a3778d57": {"doc_hash": "3b6bade4ed7b5e1d6967f502cd3d9f644f625fb7e3b242420ca8448a0578362a"}, "9e0df448-0e49-4a58-9688-4a619a52682c": {"doc_hash": "28c808eecbe6c6c94ec3d90b9fa8d1e7fba3f78350369d164a764e8cafbe0e84"}, "883d7a47-a5d8-4550-ad08-0fb7c636e1a9": {"doc_hash": "e016c238a3ce3d08b1849474b83ba76f18d6c50d4b72f06fcef577e86d12e1cf"}, "d571f5ab-a1d7-4ff7-b2a7-365256c56a62": {"doc_hash": "254224637ca8206807025d89c3fbb190f48202a9b1c0150ba867542ba2372101"}, "49ca5cae-a400-4bee-a971-8677047ef459": {"doc_hash": "9bb09f4d3b6fb8e9f1da55e32d45e173b1ce87bbcc3380fb607b52bb9bd42119"}, "eefa2431-1f72-4987-8c4d-af5db0af3436": {"doc_hash": "40299fe57e1b42f7bba58f9a6f68870e1cbd2efe0d333724cf892637f7d99c7f"}, "32f6d3b0-dc03-4bb8-ae45-2b6b391bdb45": {"doc_hash": "0cc3e7b56e2cf6e7469bc1505a832338b3dbc88ac61b99e58b40217e922497a8"}, "4a28e09c-a123-47d1-a7ed-2156fb4a9e56": {"doc_hash": "728a23b92c3c3d2103f9cada49cfac2f0b8dc74e2273ab0c8ddcf5ffbf974501"}, "6d251701-c3eb-4641-bf13-37f61e22ad28": {"doc_hash": "356aebceb110a74196cef5a7937fe10900e91b4a3446a498e624a3ab6786a261"}, "7eb393ae-e10b-447e-9004-30f5733f2f54": {"doc_hash": "a9f6437d7c2eb3dff7599b37922b9ec198934cc4ce6db8eec17dc1359d3698ad"}, "8b5e710a-0004-4b41-be55-e4f1387f7a86": {"doc_hash": "56ef3cbb62dd8e46bd6a058c5d130c775db17c46a08bfaf75a6ec43cb3414a9d"}, "1aed152d-a210-4124-931d-fd5f9c302e59": {"doc_hash": "475b061b6a6d60d98d28e15002fe4287c16eca1f08364d13cd7fbf45f5b23311"}, "1fbaa9c6-55cb-41b7-b4a0-468d6b05634c": {"doc_hash": "02c19ba45feab5c9e6c6427ba08b5df778cfe5f17bf88870d45b56f98a06d5a1"}, "cdb55de7-f71b-4cac-a1c3-cb5f24d1c365": {"doc_hash": "d57e5d6c249e558d2b689bf04d58dd8c8278ca33c15cd132a602cee3ace701a1"}, "d24619ce-8b30-42c8-9934-ca6c33dd2e6f": {"doc_hash": "0bf55ac2621faad056e6318363a64386fc1af6e47ab69e200a0444ffba20ab39"}, "8a1ef665-146b-4d21-a039-10771e83bf41": {"doc_hash": "27db192311ce3a9cea4ed41ad37175b23715b238b7d12120ec1b12d99d98fec5"}, "19d4deb6-6683-484d-88d0-1131f2fbc216": {"doc_hash": "ad1911e1d743118022109883c446c0aa1296b146633ace211ecfb2e8a212dd1f"}, "fd442170-c614-449c-9060-75569e08767e": {"doc_hash": "ed6d2ba0550c44d99d5da28889f970d6c43aadc90b38112a8957d67eec00c61e"}, "7b26534b-7226-4301-94cd-131655f96310": {"doc_hash": "3dd1aa89a2533afd2399a019f2a308fe17adf5bd52ad37b1500617d025b0b998"}, "184dfea6-674b-40d5-9bba-00aabfdbbe77": {"doc_hash": "77e518738403003506ed748672de6a23f371e445b08743c620a9b87dee9f7233"}, "47859c0e-bcb7-44af-bc0c-5332d02e9042": {"doc_hash": "79f731fab8fdf9a13edd1cdf914bf5144368e39936c0f15f9b119ebd11661f83"}, "78cacd3f-ceb6-469c-b180-2e454f47906b": {"doc_hash": "9bb36030225a5429d600ce3c3b6e6e1ecef586dc811c433dd949ee60ac7a8b21"}, "0d7952c2-b040-4b3a-9ac8-f41316999168": {"doc_hash": "c1b190f6a7b7d21af0cf1aceb99b2e424b1bc15768125500140c3b804e9e3f12"}, "9e5b374a-7350-4bed-aa79-90347b432c94": {"doc_hash": "d9616215914c57f164e4e18729cf95eb034ef99242e4ab2a4ae073c92d3c1126"}, "8bb3f53c-c879-4934-9de7-3ef90cdeee6e": {"doc_hash": "2c40dd6d01451ab2485343ee6d98647e244af2674f734f083faf4a3dd49ed027"}, "c540eb63-ff4c-48c2-a7ff-a0778c54486e": {"doc_hash": "1a6141204f825e437fc5006beacce38d583b7df5617e5ac8ca8840035f6e0e38"}, "b2446e6f-d5e0-4c31-820a-5ae996921571": {"doc_hash": "311716728cb686d3686b0f57423209cd87d5d8790f8788c7c85b751684e6c64d"}, "ed13d6cd-2525-43ab-9d13-6c7561d84493": {"doc_hash": "60a2d657ade91c2b615df43da2e74fda7211b38fbb4de7a1493c4957cece9a3d"}, "7d625ab5-5385-4d31-9c9e-2fadfe519fe1": {"doc_hash": "de61d22b0468901a34afcd05037033661cbc660edca6ed6e0a0fac26a83f740b"}, "290ee3e6-9a6a-4b91-a3a2-ffb85d561896": {"doc_hash": "09c45928d3190ce86ddb291b886e5b10bb6153719ca3586f08c61758b42a2604"}, "cd481830-eca5-4f27-88d4-e3b0f3a9c9fa": {"doc_hash": "a49ca02b58e780500f9077fd4a445c0beb6991a0da128b3489ee2911f2b7f56e"}, "7af792b9-ca80-478f-9409-b6f2ce6a11dd": {"doc_hash": "b6bbafd4f0c832388a18f30ba9962f48d07b129e8df85456e6d0f16d9563b1c6"}, "da1f0b1b-0c84-4d21-9465-9d3bebc182e7": {"doc_hash": "5482feac85b1fbb728f979a845798120a6e9c90173114be63f3f3f968cab4ac6"}, "6d4e6100-04fe-40cd-ba8a-8aaecbeef9af": {"doc_hash": "91965037d0a7d44c64262e1acf1c75539967307e1ab8cb66a5d6ccacd27ff58d"}, "dd695a6c-7f70-40c4-8789-86dd3af727c0": {"doc_hash": "bddafe34d0db3ee830504409f79b9c2c2c498a3bc7d7bbfb8d9ac36eb16ebd67"}, "1c117f25-4ece-4b66-b14e-69408b02928a": {"doc_hash": "e6487d8dd6bf4dafdb2328f19becbeffacdad1c5b84752339becd5c27c5b8535"}, "c48dc9dd-aac6-46f8-bc8e-26ec3f77ddbb": {"doc_hash": "11a20b9dc2305ba99f96e7392651b1115702552f2fc87026fea267b8e1234ce1"}, "1909c798-ae88-443d-b7ee-d7f9ac2f820b": {"doc_hash": "4313b6c6c63c01e6989c912c7396aaa0fb273b5b5586a1af2604790c17c6eb7f"}, "7e9ede49-f923-4460-8c28-c6be1a876c2f": {"doc_hash": "6e4eb098ea89ebef9f1125848064bde19b85f602a53be89546c1ec5fe6c7e007"}, "64dd360a-d3f1-417d-87e9-422cd0da13da": {"doc_hash": "ad8d9c446f33dc447aa06e9f56ade85d42d575d97e639039d456b2ff6372d2ed"}, "ded880db-84d7-41d1-b57a-254e64eb03d8": {"doc_hash": "5296721454cce71819239f1d1ffdfa831cbc8014325c1ead3630fc9b580d3e32"}, "99091625-b68a-4829-8e62-4ca0d9d1b226": {"doc_hash": "b54df2b2e35987cb7266fff2652a3fb8c31239917b1601951847927928eeaad9"}, "6380944e-6722-4673-b2fe-19babf9c6bef": {"doc_hash": "0fa9f4da43bbfabf8fa3cdab57502e1889576aae22836ce420c1da917650437a"}, "67ac6720-232e-448c-beec-9c6c86c19c74": {"doc_hash": "f74c238a5c07b0d3f7eac3d757bee335c767c8f985a399f81499c47e550b67b5"}, "3dbb50c9-b4c4-4ab5-827b-d5ac576c812a": {"doc_hash": "4c5cf38c492ca6344add7e66b426868c356fb8d72cff3c08db74e46f0e96d786"}, "a3dfdfc2-d0d3-4949-8754-dd78d3ee355d": {"doc_hash": "c2d143de2f4302bbc809898dadc8536a9c7656f662afae8cd31e25a0bd58d03b"}, "a427153b-3821-49c7-bd47-55d004472d7f": {"doc_hash": "1680cecac19d2729b5a771eace8e3b1c2f11f017fbcd041e03c8625ea7e7ab86"}, "b3fc7d0c-a894-4362-b8d4-d798b845d5ce": {"doc_hash": "600037cfdfddfde06a27ff8e03ad02d92bd906baa90740191070e2c6f2a1d4ae"}, "17a02afb-21c1-410c-8c21-b9bb4f6f44dd": {"doc_hash": "8bf849a7341fbe7710d2ba0af84a1dd85e0dc1fb3bfacd89d2707f46317a5d5c"}, "566eaffa-4346-41e5-9fa5-d02ae478e049": {"doc_hash": "72173bc17c5c01f5923f94f7fb4af796e9665ce52ee600244497d811759b6721"}, "bbc64c2d-8646-4e41-b7cd-ffffd0e65616": {"doc_hash": "5a0d76d95d3a5f09c106926d9cdda07d39ee1611a6f234170c27fd033d63ffcb"}, "23028639-7754-485d-ae96-debf811fe9d8": {"doc_hash": "73501f0c065fd9bba9627704eeba354d09354f611a61016d02c48bd2a70ee173"}, "27e5896f-c2c8-41dd-baeb-bc35b78a4964": {"doc_hash": "c04c9ab866f00790d2504e5d64cc6f9ff810952cbf4c941387d5dc73fb322ee6"}, "4865069c-a78a-4b62-8870-8e6950d965ce": {"doc_hash": "59ae4edd874930e7232b964012c788bf7976b11dd7a533768aca0961244eaa12"}, "1bb596d0-e9c2-470b-8e59-4f1a8abf4b7e": {"doc_hash": "0e354401e1f0465adf06ec7f43bf6e22db91ae3106f5207cc24dddcac0ceaa6b"}, "43da827b-cc90-45b9-af46-de5dfaba1fbb": {"doc_hash": "a62da9a507951b7b318bae8220628e9e61d9e542571864dab265a304607df856"}, "6816907c-bd57-4261-9a32-5b3f2fcf6dd6": {"doc_hash": "fa64f07e244750629cd0f6accbe303540331bf43829fdf4c84aee7a71b858283"}, "c80da1fa-6222-4dee-aeac-23bf74194d9b": {"doc_hash": "2699afbbe09124abcf27326d75ede4b0bf550b2db85754b7e7ce1a0aac0703fd"}, "314263eb-7a32-4cfb-abd9-cf508d7d28c3": {"doc_hash": "96347e32bed84fcd49fe2c6dbb640acbe42cc7bd1870f392b2caa30cb16eccd0"}, "66451282-083c-4663-b240-deaa2e5d1896": {"doc_hash": "8877888fb177024d3727b307e240d0dfa59f87eb93f523a953c825aaf552ea19"}, "58625cbf-d2c4-48a0-ad02-83b06153c409": {"doc_hash": "430190095b3ac6a58a940a33effd59b61075694914cf9338910f4608d92d701a"}, "4e86bd02-dd1c-4c11-95ad-ca947b49b30f": {"doc_hash": "7d823530c4fc57a9effc7c6a197b2e3b6fced9da7f7b5d4fab2b9fbc901ec5f3"}, "321e2a20-7675-40d8-b51e-d532a1092821": {"doc_hash": "b80a477199afcc7a23575cfbe7e3cedb3e6b1569fabfb3d5863a1dccfe04afee"}, "d3c1d79b-b236-415f-a790-25da8640ea5b": {"doc_hash": "5d462df51bec471a5f9018d4051f3b82a92efdacdcbdf484597914d83f9e613a"}, "fa978c6b-6d35-46aa-9b87-9cb5c6dbd969": {"doc_hash": "57a0e4f6629cd3977e1ee596e22fcbfdbfbca12acaf923d9a599fcd9cda9fd21"}, "7dc66e51-14fc-48c4-be39-3fdc0d12e950": {"doc_hash": "f92ffd9cfce30a5318ae0bcdefd7009b8ccd6f6adcce10c827bc9c8686bcc69f"}, "744922ec-9e6a-45e4-aa82-83b5b133d924": {"doc_hash": "fab23a2055a93e24c6825912cab3a5a2655817da25302a2ad6ba661e64ca9afe"}, "094c1eef-bf04-4550-9310-5ef4757bcdd1": {"doc_hash": "2e465e31c869499df8eadc2938afabd4660b4d546bd4416dd1133d986ddbcff1"}, "06a1345e-48c0-40b0-b35e-2cbb389e81e2": {"doc_hash": "16110f0c73832c107f2b90256002c4ddd15939655de36a85d14538a9c68ae6e8"}, "ff6d4719-6e4d-472f-8866-0bc917f7d988": {"doc_hash": "3be6b8c0960b3f95fbef84134b18451584a9e8f0e0a9e227f99cffb8480711ff"}, "64509b96-6c87-435b-a5e2-d5838b1dd525": {"doc_hash": "1f6c4dcb70d17e74df09d0592128b3a747771a3fc1f6048d3399dac4ff9cc357"}, "f11da7a0-2c05-470a-b402-a9aab16a8b6b": {"doc_hash": "e4d58e61f64b3c21a2dd07c587408c6d2f3ac9126856ce0dd86553d7acfc218f"}, "8f2a2635-20d9-46a2-91d5-844b7c62519a": {"doc_hash": "d305faeb921743cd9ec8a405109f19f14d8250825797541db0033d8911cdf1e6"}, "f73a9593-5224-44ed-bd00-5c2dcd420b0b": {"doc_hash": "a814386d72fc09c05a9836f356dcc7a69112795e71557fdd677c5373fcb9e8dc"}, "4ba368c7-fd83-44d2-a9e3-fce946819c6a": {"doc_hash": "5fafd6abf2ba801b4e2d728d490dc1adac4b70edfb987b6a3ca1da3308454e2f"}, "2bd41d16-0667-4ba8-b730-ca9a65222220": {"doc_hash": "cb094285d5b355485e80fc87228080348e1c4ac2a359bc5c14b2259e2a7a1159"}, "71451cab-5fcc-47d8-ad30-58e27cbd6e00": {"doc_hash": "02d9500c4ab8e86ee7b15bb27d61bb288bd6edef3755f59e26a4fc6494213592"}, "9344601a-4276-448f-9de7-89f987b786e6": {"doc_hash": "3c4b4a861c41cbb11924c516f0fad0f95d5d3b0dbd40fb25ca2a0d9263279bd4"}, "f0018629-aa45-4b70-b59f-42884725aa01": {"doc_hash": "44f236a58366b1a0032f03f2772ff5e1c88cfd44f7b6c8cf3c63ea84f094ed09"}, "68376670-ad8b-4fa3-8dce-33fa372c44a0": {"doc_hash": "92fe0c602b676f9771d4daf11275bfb6b97a1c74f38b0a9f0597b7a27545a4d5"}, "117a4e26-abba-4415-a119-6c5488c2db0b": {"doc_hash": "bd41838c83066ad2e26244420d34af497237e3bb4bbba55e5fcb4df16d0a7744"}, "d587a149-8d1f-4335-9e0a-282bcb59014b": {"doc_hash": "44ddfcb7e3f9d08d2a3894dbf5b8c6d664b9ee7f43ab15f624340274677a5351"}, "68153e60-bf78-48fc-8d9d-dca458e6ee9b": {"doc_hash": "4efd297424fcf5f8a521532914dfbe28bac46170ec5a68c221cceb15fc69eace"}, "d19d3da6-099d-4fc5-8334-f24219dad542": {"doc_hash": "651a7db0bf3be243ab660972d009e7ccb812a9fd420b329d226aabf58d7113ed"}, "41f05fd5-b18a-4cc3-b09b-89b4288b237b": {"doc_hash": "ba666fe6dd0f6b67ff1b7dc952169f1ff7430de8f324cfe03e9d06ee6c03fff6"}, "004273ed-9969-4452-a051-f661a501f7b3": {"doc_hash": "6d94a4bbbca7ae929585a8ce9148f1cd3d540f19fd6d069481db060a7d4ef7eb"}, "1f17ec0a-ed05-409d-bb2b-d1d26bfbe7c6": {"doc_hash": "4e9eb4f5bb46248f49aceba08bfac8d1e47bf061f2c1e2a85662a15e0bce1d00"}, "136747d6-2d9b-4e02-adf6-4649bc9bd02c": {"doc_hash": "1772897a032962333cb655441597af5030f24a9f626431b06da27de4a65e8726"}, "4008a406-b6e5-4c82-ac2f-5cb975bdcb59": {"doc_hash": "5020593a57e4e9cfd9d7cb8fa4595a11a0cfc1a6ca5330ff46fade3ce9d340b1"}, "ddd25c5c-ee33-4a1a-9b77-aa37e84b6ad7": {"doc_hash": "68237a88ed2678dfd05aeeac1fe65078857b5b7d7f81c7282128fb1c639cdda0"}, "b12fb077-4187-467e-9e81-4c860f7a50dd": {"doc_hash": "88f4cdb8a290ad4d26012c6c3c3bac11a3c10c42162d259cbe8061396b222dc9"}, "78a7021a-ab06-46d8-80aa-42aa6533a511": {"doc_hash": "fd8cc46922c978cc726de99517d7a511920c9b0ee28a2b26e5b2f9f959e13d04"}, "5a620005-b083-4b74-9166-c192eea712ef": {"doc_hash": "97a5e0bf0ed82340a80d6401aa21086c36cbc6f09748cbc670a67800f564a83c"}, "729d1764-401c-4bf9-9fca-9d2ac4cdc48c": {"doc_hash": "1d425bdc1459dfa148839b9953f7067c520a606175286b884a7484456846926f"}, "319976d3-0944-4e42-83aa-660e4b53e28c": {"doc_hash": "a31f6cd84974de12b2133ae5e9fe8b96efa81362ab05cc7bade17d934ea4b512"}, "c1332201-3272-4c9b-afb9-0d679e36d22a": {"doc_hash": "573872fe5d1c2a12c46eb17c6f08bc7e492d539f738423f480e5e3f6dfd89567"}, "8e4419b6-5584-40ee-aa34-f33a7580ce93": {"doc_hash": "a45f806b3f3e096153a20f5c0b3ca935c685980ddcfeea738cb28a8ead56cc44"}, "425d2acb-225b-4363-a9cd-80aa741a12ce": {"doc_hash": "c50170c2b6cd15de3026d6afa795d230594e2160c9a4d397a970cf27f704b0ab"}, "74c93c81-9bdc-4d76-abc7-422a2a3b2da6": {"doc_hash": "8d84f66a5f8200bcbd49e91cf9160be5ad45c18f26ec0ea7214dd95be51ba117"}, "1affa2f0-8940-4201-bcf2-8d5e83dfb859": {"doc_hash": "d49935d7e12e0a831e90b8517550380f72b1a088525a8f6e9276d1313053e6f6"}, "aaaa2579-0099-411d-afac-6f80bf3a9c73": {"doc_hash": "d412a697feb8e1a83c3953d1b6c495eda40b458d7c26a8013b8d651f525b5177"}, "c98e50d0-1999-484f-9d5a-054aeb3a3284": {"doc_hash": "6941d3010d739b1aa28f41d9d7c1fb447697cb6ddc426b9d1c271c6c8e69f138"}, "a6668007-c8d2-4949-ac10-9cfe48732f2c": {"doc_hash": "5cbf661e0bb7f8ad5bf9a4c97026b8c20b89774acd34522f38b9427162801ab8"}, "53ee57af-c5d0-4f0e-bfc8-4cfbae125f7a": {"doc_hash": "3ec7afdc45b9c5fb851246be15437a35247428c5f4d28c63b9c64f678524a48b"}, "357833bc-6454-415a-b9df-3b7fa9b835a2": {"doc_hash": "a6b8d2784cebd9799cfb78b08ed30e5b70d4378bb432302e4d23372b6902bcc6"}, "c9f46c1f-5e38-469a-a891-4fbb8822c628": {"doc_hash": "c937491cf6e4dcbfe79dd262326e4fcabd99acfb5c03a96a92e3287ad0d80116"}, "66002699-0984-471a-9c11-ad465ad51ff5": {"doc_hash": "3987568383d724df15eea7a9be0a9889468b2a7f5a243bf54857b8fb32ad6853"}, "90dd0750-bcbb-4d1c-8eda-2b69f485cdbe": {"doc_hash": "6468c056370246d0a3150d2b067a874b97f56f49ce58578c33063e894a1379d3"}, "2fff4c5c-850a-413c-8ad6-6f91a1f4a06a": {"doc_hash": "5ef2144209229fbbeecea42f703afe4542647853f1d6e02a90274ab42ee3b488"}, "ab487f54-30dd-49f6-8986-01c600cf96bc": {"doc_hash": "11a48de31377d45602967dc53809ea4aad3e4a8dec7a2067af45b237bad52dc0"}, "1daa8e6b-c55c-49d9-a49c-916798ab0615": {"doc_hash": "a390ca54530fed595f54ebc075cd6d58ad6dce0899f7eaf3f18b88e9911988c8"}, "eae58f4c-084d-4afa-8ecf-d782735d7bdc": {"doc_hash": "749e7c0726fe5798039a2284fae87d1d60484b7a6a155f14e857a9686e29b8e6"}, "94e2c4a8-3db2-4a09-b873-9592bc957c8b": {"doc_hash": "10b4366fd1758f709345a118c42a55241d59957b9936ae90672110d830df1138"}, "ca800075-ff3a-4c2f-81f2-a988eb59be6c": {"doc_hash": "9a665f2a7c6b17470ab81191114e6db65edaf2aefe8d3ee432515fc7fc5eca56"}, "14cc388f-8fcf-45e3-95c1-fc3bb8364424": {"doc_hash": "aa69ca7e3575d1393f46a33a1ba0db2c3912e629882cce5fae40742e8ac652b1"}, "1ac635cf-91f6-4da8-aea2-5e651de9e824": {"doc_hash": "36326cd39b1cf15dd1f56a7ddaae6369856f3aadf0b38e4c412186928a1970f4"}, "ae5c7ef0-578e-47c8-b72b-d15ccd90c34b": {"doc_hash": "146a1478e24e9d5e33197923927d903739ca1180d5d41ca045472d465ab296ff"}, "685fa6da-14e4-408c-a555-ef0ad539dd1c": {"doc_hash": "62544e279dc25f2992e461ff02d13f59ff4541cc06aada8745d0edcbdc398990"}, "4163b22f-91bd-42d1-879e-18bf056ab8a7": {"doc_hash": "0fd9b61a69ac504d541460d67f5225f61750adaf29b369792d7e0a4644e0baee"}, "7c8775ff-46b8-4888-9436-fabaabf740e1": {"doc_hash": "9167a18895dde77eab20c79f2c2cc3ecf93eafbaea0c9a2062d1bf23b91cad08"}, "087f0b1a-a6b5-409b-b30f-ee2af80687ab": {"doc_hash": "43160be2267cc5a929e47007a88e89d6abb865ae3a25377ba7471cebeee871e7"}, "1862086e-6f60-42e1-94e4-430d7d42dd71": {"doc_hash": "5d59a6bbeaf445d43b795ddbc9474af66f9ec5ec69f6225c1c6156a4a169ea60"}, "98014916-1d82-43df-b8df-3c9fe3ea96ff": {"doc_hash": "8a331a9a2b4953cf8bdc3191bec874595546a1def8963195b1d0b824a7d2ac68"}, "7da4226b-d4a5-413a-9c00-29f4dfcc3c94": {"doc_hash": "cd575b34c0ca40909571eea291a6061a32f95bc377755886ef732008e141f2c8"}, "2c88e603-4b57-4071-afcf-3bc559d981b7": {"doc_hash": "0560f290c2d0acb0c6bf5fc08934193b79b5ddac031a950acc082640d1c99a07"}, "906a6d5c-31d4-40d6-8d2e-6b376231a80a": {"doc_hash": "9788e9cc2946d1de3c207ecc69c78255555e2efac09269bb4533e4343f30e962"}, "1643f25b-bf8d-4019-a251-aad866b37a36": {"doc_hash": "b60122114843cca1481f4ce1271abf4a9be3e23969a12c067bac5cac542bb4b6"}, "a0ea7eea-2101-4f3d-a946-468ad4ad58bb": {"doc_hash": "b504e4e7142afae0c8a719408e27da6a7294bd8550a28232659fa0ac05bf4b72"}, "4a925ab7-8475-48cb-ba0e-a7072a5fc3c6": {"doc_hash": "f5246251c31906d52ad514a3509417d4e55bfd67d0f16bc91c6fdf006ac490ec"}, "0a4b4bbc-1134-4f2c-8da5-79e8cd8c71f4": {"doc_hash": "bbd2674546815d265d2e185d5e3ccca744c1b6cb1e3a9014c0f252205591d9d8"}, "66a9ebb8-2d7d-4033-944f-31dfa035e3f4": {"doc_hash": "a401e4d62e5d92bb55a24ace871cbefb3f1c2288559c671749f7bbb3e89716b0"}, "7f36b59e-7a17-4a2a-9c87-d2c46ce144b5": {"doc_hash": "9c68210fc991a7f6294249cc81c0223bb384bfbb7021c46145cd5341a3e2eb66"}, "fee04062-d9e9-4f4e-93b3-0b3c0b7fd57a": {"doc_hash": "4c60fe104506855f4f5216a0b80ca0935e8f5a02a1bdaa29689dc1fa684d5218"}, "d4eedcf5-8f83-4f80-99bd-760fb2e0a8f5": {"doc_hash": "78a53149ea29db6bfedf46a0fef181f83914ddd92d3cc15d06cf58ed2ef408ac"}, "8eac5dbe-53b8-494d-acfc-2d24367a9cb0": {"doc_hash": "1beadba9209f46c25623acc9ee721b879f1e714e3e3a86ead67975d29b7f7eae"}, "50a69a24-dd76-4846-b447-9e97b867e21e": {"doc_hash": "b430491fa85c1d4402f19a99f73dd6803c3444ee636e7b96330d4be3d7f82759"}, "73f32951-5420-4e3e-959b-c1e71c864935": {"doc_hash": "9ff8f1f2829ed701accf609862602eccb28d46939367918ff6e8f8107a2dd5ca"}, "e7009818-9d87-4b7d-b982-10ca75472538": {"doc_hash": "7fc3cbd2de47203420f937a69c06059a1718ccf860812fd663f77f5f97b867c2"}, "8a2aa7c1-5de2-4928-9b30-79be88185d29": {"doc_hash": "802711d2d624eaa8342908575ee5791a97fcef237aba847af655ab90bb9120af"}, "77e6d8b0-5302-4c9a-9962-bba9057c5ab9": {"doc_hash": "b484f08336c7bd438a842eaa8395b306d23ac51d23158cfdf2bda6ca76a9d69e"}, "f0bbbd54-e161-42dc-9909-5ce62ec548c5": {"doc_hash": "a6b43e85a5be8d3a403a91d03aa62f855f2b33bad9fe24c2dda6e5ad73fd7bfd"}, "dd9de3db-2f73-4134-a1f2-617527889fef": {"doc_hash": "1324c096f6b4f401241c02f5bc2e859c3848332c49869d3b28c3dc0b7c30904c"}, "67a7f74a-fde1-4848-aab8-bcf4f864ec87": {"doc_hash": "3f208ef5047aca2121e9881fefc5212f521e5ae7fcb78764da755aa63ae1e72f"}, "bf952e89-2bf4-4e7b-8cf0-a415f6c47131": {"doc_hash": "7fcf4af551bf05e349bd23759237fbbe83f6112fad6e09451ace5b25211c66fa"}, "87cb8f35-a6fe-40fd-825f-c0bdc8106d9f": {"doc_hash": "9e59f09f8f3cdad49743ae15bef3ad1d1c89423976cc7ab5bdf3871fd2d27c59"}, "bc08992e-48bb-4a55-b67d-7090e3ca19e1": {"doc_hash": "b6e44cb4a581e7512c456ba535f085d04b2eaf90063ca654c783efa604c58c14"}, "5f99039b-bd1d-492a-ac3e-ee13446c2aba": {"doc_hash": "8f12e2ddc8a2bacdd1111f5574fd6935628b93707164d9af02eb616a7b24efc5"}, "6d98052f-d0e6-4008-b556-ba61fa988b34": {"doc_hash": "8804f6ceb0ae5327906c05f66c24481d5b29bc5541a675e32be3534d5acb8758"}, "9d62d84f-c614-419d-94aa-bbf2d17c286f": {"doc_hash": "6032c80b1fbce8ef7a1eecd6c75647d1855737aeff699fb6277953821a2d2caa"}, "6df539b4-6169-4b1a-97fe-d94cd4f30b6c": {"doc_hash": "5aa2eb1962db59b10fbda3b32e4029b5fdaee2d4c1ff46c2e960d257b098953c"}, "4e1c1368-a13d-4141-b95e-c4d5f873ff2e": {"doc_hash": "df869de4b06c12861fe2e29f710f1a443306212dbb8a5f09f553f009ae347395"}, "812c67d5-460e-4140-9919-e587f6e1b2b7": {"doc_hash": "68fe4c240adacdc4c7d469986bfd8adc5b3bf1f0781540bbf6fb2d06c1f39f3c"}, "385198ab-f870-4641-a034-2f70e4751837": {"doc_hash": "2136a912057eb852bce588388714a22e00771aa0fbb8419492537e6615e7ee5d"}, "893c6a73-f294-40c8-a873-ddf955c97f2d": {"doc_hash": "6d8a4bc7cfea5ce76027dfa39be71b1e048fa91d535c71c956cbbcab52e21b52"}, "5ce2d8e3-7f30-41aa-a707-422cdc8b0611": {"doc_hash": "380dd75bea2a6c0d152878e7609169a1ca42f365123b5997da2a6e35d165aa8d"}, "95606300-9d38-4d08-a9fc-8efcecfd23fd": {"doc_hash": "fd9d353327b28b7b437240770c3319964b4eb5c4827abc8ea06ba31c603a50bf"}, "52d4800f-bc8c-40dc-abeb-c4a3480935cd": {"doc_hash": "25acfce206475ff451eea9914fb3e11840c390e4a0354f97f37d54977eacaa55"}, "1a41e542-bfe1-4d1e-8a63-f439a06cbe05": {"doc_hash": "1cdafbdcca685e45cfc475429e4622164fc5d74d13fdfde0a5a4a4a5d54b1d5f"}, "14cecdfb-e805-46f5-b10c-5ea85f917aeb": {"doc_hash": "9fb31826b1f5a5520d5d27bbbafbea1f66829948c2eb9b5a5bb0e82033c6caa4"}, "5c683314-9def-4a78-bcf3-3acb4dc17cd2": {"doc_hash": "07a1012f4d5fc77a22962a478892eafa166cfe8ce7a6fe1025d4630ebc71f139"}, "012b16a2-c3fb-4a62-94de-048dafb57f42": {"doc_hash": "fe2decf249d819cc238cf8550f535d414af252d021b88adcbba3c7188dbefc1c"}, "42838366-923c-407b-a86e-097ffaafadca": {"doc_hash": "36747395f188e63d08629dc24c0e40c0194d693fcbd58e3e27174fb71afd89ec"}, "47210118-0b8d-4f8d-b208-fdbeb9f15966": {"doc_hash": "73af3a8eb8ed24ff81c1e383d03785d76a2b00bd1fb4b877ce23c30817287662"}, "9f6b21a5-6667-4cd3-a4d6-beb87e76fd13": {"doc_hash": "2912f83fa5daa1a2bfaa0c30ce2e881903aeaae851fe1cb7e40b5b72c4d0580e"}, "01c33ddd-f6f4-4a73-beb1-f908cf6653f4": {"doc_hash": "e655c32befa6d71886e2db2f797d4def0068566909ab0d139c6a6250c5bff54c"}, "8dde4150-f9da-4f16-8d50-64f5293024be": {"doc_hash": "7f3f3c4f811643446d64235f5865cc7d78185ba4b5ccb940069f5d15b1cc0173"}, "0941afea-38a8-4271-88ff-736791108b69": {"doc_hash": "e8f980b0c049cc3a9f802800122f940fcc3e77e0f4810d68463a6195f07178fc"}, "85d72868-6376-4f0b-a46b-da2d05c9ee2a": {"doc_hash": "65c5cb202d10b13918ba143952997125de273f462680c5fb6c8c8b94420c589d"}, "13859f3f-3f3d-44c9-a6fd-6f063e83df0a": {"doc_hash": "831e762363f3eb6b63b24f2133eb5f2b4da3de39687e85233043bba045d4c7f2"}, "09071137-bd59-40ab-bcb3-5a5d24805ab6": {"doc_hash": "d372b7f7768c2fdfb5af929b3dbcaba6f063a8b11ce157f5d7345d7e3f15365a"}, "bfdc3d4c-1178-4d6b-8273-4ab7ea6a0ae3": {"doc_hash": "74bf1f2f921767c06d72bf76644975b436750a1b8fbf438791f4a63acfc74fa4"}, "813a9462-ef0f-46c9-8d02-20a748d3d629": {"doc_hash": "9eeb75cf65f508f7d96cbe697b0f248fb5bdcb75b684f8a714ad9938999dbd6b"}, "f7e6d588-eee7-440e-943e-bca5582980f0": {"doc_hash": "c2565aa9b85c521071e6a771d2cfbd869a1dbc0f9c334ae4d1bf5c4c52987133"}, "9d223b58-94e9-4466-ad0c-87839b0051eb": {"doc_hash": "6bfc2d6335ebe8cb34b175f0201d03c6dd92dd95d1b8e01a90aa242086040faa"}, "b26551e5-eb1e-434b-97fd-6ca38a4b89e0": {"doc_hash": "6894120c89d7233fcd9c3d59b179d91d624fe5221dda5c52edf87b80855c1760"}, "6547f6fb-0665-4ce6-9b79-34954f7c2a1a": {"doc_hash": "8a7be325ea43ac07c4552633e24025214152a242bc5bbd2ccf45e574368afc46"}, "84fea6b6-a3df-4f8f-b367-3957138deac4": {"doc_hash": "2180e64e3c4761ac9909b98b7620ae5bac42573e7fc7f27dee766f7b8b3065dd"}, "2b826aca-59cb-4b74-a6b6-ab2ac9192d2e": {"doc_hash": "86a4cd22a607dd87100210a739d10e2ceef465a73da467fd20b00ec0f2f12331"}, "0abafea0-5d4c-4370-9132-53f5737b6d5c": {"doc_hash": "600251b063f4ccafc1676ad7dbecf4e932404da9fca06c9c092147e0663a1526"}, "eccb97c4-2bcd-439c-b0dd-a86f559ce4bf": {"doc_hash": "c163ff7d0de90ef0817f879b09b87340ce62bf192676540fa9e619bb3cad1f85"}, "3c168929-5d1f-44f4-ac01-11a65e852015": {"doc_hash": "140c068c34630a714a9168c5b3ce1caea03ee264b68800a15147e4ff2c1303bd"}, "6e604459-6531-455c-ad69-65f7761cab99": {"doc_hash": "a52ecdeb36adc8d27854453d81251b69ad45030447804d5dd27720127c82c4bf"}, "2fc2ffac-6f4d-47cb-9c98-da88d7ede231": {"doc_hash": "b9311297423310372217fb5f580275543ce9f20632782d5da4869adae23b6e0d"}, "023b8181-ac92-4c27-9781-76ca52c2f8d7": {"doc_hash": "7fae97673be66b9b90acd51c76d1d133a95b47c054a75ddaf906bb18ebc72c93"}, "ff8a5cda-9e4d-49d4-b1f2-83f421093075": {"doc_hash": "94f08ac338c7068b261084a1c1a22967dfc0af250ad8a1178ce4b8b1ff2ab1a8"}, "dbd76588-bba0-49e2-8692-fa5c1a46c360": {"doc_hash": "5da0605d9d30be63e29a98dd5b6e19006c0a63b2b084fb09734910442842ac6b"}, "a427716c-0e64-4e9f-854d-af1e8f9d0958": {"doc_hash": "ce8d03673e8043943ef132e71467c7971394d96f2f77f3260d5029247ae645c0"}, "c3969c8a-2398-4920-a5a4-37a344863fc7": {"doc_hash": "46bf419e8dad59ca11e8297260240f33072b51dc8947cd26106bfb0102ef0c70"}, "174919ae-0848-4af3-916d-575d0472267a": {"doc_hash": "424850688b9b75ba94376b4ad68cb9fc4d0e185f5cb4cfa1029fe725d9bd69f4"}, "05ceede8-e65f-4061-8d62-bc7d51904657": {"doc_hash": "7322dbe1de8b3bef607bbf39f034584c2258a5835e3d63410b0ebdc05ce3a07f"}, "ab43ff75-1814-4397-ac42-fc58a215c673": {"doc_hash": "a879f6e2ff7717267b8272d970688c7aa0b68c4c4185a5a3acc57254beeebcc6"}, "ce388f5d-1102-4812-b6cd-8e04cbd37f76": {"doc_hash": "8e22779ed0cdba6348879af1f054f7f676a73baab6823aeacef5048c0126b5be"}, "21bb3c55-f515-441d-9468-371840d43113": {"doc_hash": "30da1708fafc9620d2683ae95ef1294324809c37a3b9aa230874a7036095f3f7"}, "91cc3a09-f8bd-4a7b-8d50-2f35a6233a7c": {"doc_hash": "b42f87ab78f92fd72df421ec7b6dd37a22d721a67db151b87c054ae725136958"}, "f37cdc50-bed5-43f3-8bc8-e48418d264ff": {"doc_hash": "85b57a00580f5fa09ebeed657289099accac7f106a33e9231de3fb4589a6b49b"}, "2de384b8-23c6-4e42-92a6-492e23422c31": {"doc_hash": "d7402a85fc706b6b8b60888439214cbef2adc7fc97250f8e93eeee179722bfc1"}, "9a43479a-b1b4-43d6-985b-f8e5b6fb41e9": {"doc_hash": "8b36ffedff6e4b597506db2e7059182ed917bb746ecec889bc7186f9ca681240"}, "9d2dab06-3dc4-401f-ad8c-9d32e9709ded": {"doc_hash": "0ab7815f9632fd2ed09d9f2fe4271aab43034b0b83f7b20d4690a70523850772"}, "9ac15ac2-f46e-4984-88e6-6ae350330bb5": {"doc_hash": "1b5c24f62de72a46a439956e250dcc5d7c3c10384d9ed49cc067c13031c47226"}, "924da62a-aaeb-47ff-8acf-c8dd15b063bc": {"doc_hash": "21cbba4e16ad21d6d16b7e285f9ca6fa58b9ceb012df99845adcdd1038fc195c"}, "d7ec9cf6-65f6-4174-ae43-0922a3394670": {"doc_hash": "96e8350a156faf7ce65f497fdb2024eda2e3ea1f2b6576d69ed25e102f1d448d"}, "676d8269-66c3-4cd5-9bba-a955ca564115": {"doc_hash": "7438b6c76b3771da28ead008d86591aaca6b6a1524f93326aa2cfcb52f5facb3"}, "a5877363-4d15-4d73-8e04-d4a6e97d211a": {"doc_hash": "c12d9444ab4565a31d45be000904e2df3ff8f68b3cb271854f775b3601ba5b11"}, "17bd61e7-0654-4a47-a97e-f812218d35d1": {"doc_hash": "e51048bd63559a0e87c7e0ea3b26f77c2343fc14179462b84d752645587d6b9d"}, "7df94b79-6f03-4bc5-acce-7f3cf5f68605": {"doc_hash": "049c6c80f16837435dcd2e00253c69ca52e3f15ce996ec5ae266bbbd275b9405"}, "063762fe-2274-47f0-a715-0be672971055": {"doc_hash": "a7ebacf6da2d62cc696b8289c93b7cc9f1d0b6a6e43a1caf77104e31c9271ca2"}, "d3be3cbe-ef6f-4acd-baa4-761564685da6": {"doc_hash": "54d29063d3b8b77177179636dfd4e3af32816aa934c1f099df6e355a7e32148c"}, "d51b39fc-0e1f-4ce9-9d94-99c72fb5473e": {"doc_hash": "e77c112de0a07a4beab468f5dd622a937509b9992a1037fa13e6aac3193c504f"}, "370c37c4-6380-4876-9239-7edd31278eea": {"doc_hash": "a7df24e74b0ba81bbeb42a603f1b9b90194cf677be65b968776941411f9b973a"}, "49d3424d-68ba-47a0-a9b1-784dee3d5bfe": {"doc_hash": "0f8f1f9c7a41b7495dacd4917c485722b8a4781fb8a723977eb7e19e8e39c936"}, "1f3d11fe-535d-42dd-ac7e-d08768a040c0": {"doc_hash": "93792902a73bd7def4341cca5df45e0d1cbe160c4b75c958f19ba6ae3fc9bebb"}, "6e3cb22d-07ea-40ba-90c5-0b521d59715d": {"doc_hash": "e945a89a092ba423fa5a166e6fa283b9d7bea50c4c415c948c4e5e04aa082d00"}, "c7100ffd-9d3d-40f6-8868-73b9d6fcdc6e": {"doc_hash": "4ff38b02eec820205fddfe23c3d2f2780fddaed8293be6ca8441ef702ff2a78f"}, "756ea687-1802-45b2-b54b-1e4372fabfaf": {"doc_hash": "1adf5083d9d10db54d8d3107631cefbe2d07fa05138352b7f22265e78415977a"}, "af923364-82d2-4714-8db8-cbb12845cbe7": {"doc_hash": "92e0132225d7d644edc139dae416e006f03b894c3b0fc30259f4008113d12daa"}, "ce79de12-7223-4fa2-9f79-aa918ac3818e": {"doc_hash": "abba31ff3c3a0d25566b68395c7e1a2639e55204a688077da46bf18eb91e456f"}, "411c7e3c-1beb-43ac-9197-bb109604c743": {"doc_hash": "4113e35b85d3c273c3b4124ac0ee1ec7ccecf39ece7374369c08a52ea7274a51", "ref_doc_id": "1520839c-39c6-4606-9374-c85298f07d84"}, "750533ba-74dd-4054-a8cf-0fe3fae5281d": {"doc_hash": "65521b1fc81a5ce6f97a8bf0cdd5e2d193ae8f39b91f0bfa5f71f272da73032c", "ref_doc_id": "c620ee1e-fdc3-4aa3-94e3-f1587528637e"}, "721cbe13-c4a5-4567-bd94-660289ad9ade": {"doc_hash": "339044e7e6f2fc97976d425b452e1cede7321f543375ade7dc9c353094149759", "ref_doc_id": "02afa3e4-b312-497a-bb70-d5522a5ac7c3"}, "09bcf07d-8a64-43df-9f6d-176ff6df47db": {"doc_hash": "6a14babbf35e7dfff92762daaf61adfb49900476dd1a316e84afbaaf7cd0e086", "ref_doc_id": "d7fb17a1-fcc9-472a-9602-01fa4c10391e"}, "6147e316-8824-461a-bbab-7dfceaa53ded": {"doc_hash": "33c946e3650232f5244aa37f8c1e8744b6b9af8077396c18afc9bddcd06ecb39", "ref_doc_id": "3d52337a-3302-407c-a581-19b7605e4fc4"}, "41345f25-7df1-4145-b9e0-bf0eaa8cdaa5": {"doc_hash": "1a0579ab02a52edb994569edeac588c5edf312de3848c84d70f5e13853d9a9cc", "ref_doc_id": "3d52337a-3302-407c-a581-19b7605e4fc4"}, "4d8c05d9-29f7-442f-ba30-8be612426e3a": {"doc_hash": "1f57d5808f1f4fdf656e991327da57f3ea30f03ccf79d6b703ad1867b5868aa4", "ref_doc_id": "7b7ace7e-79ea-4921-b878-96b3786f4d87"}, "625dd722-6d69-4d33-b6a6-0655d687a78a": {"doc_hash": "3a55fc7d6f3e9307ceddae1e0e8805685d6ac28ef20c3dc9895395c348de000d", "ref_doc_id": "fc905d70-937f-40ff-841e-29863618b4c3"}, "8b62d72d-b688-4af1-aad3-9118ed72f9eb": {"doc_hash": "74360c9bd9ff9f5adf9fa00b41ebef7cbd1362527e5c3c41206b71453c8a0e47", "ref_doc_id": "c7ca15ff-0101-4c1a-a907-cb3ab559ea80"}, "519e137c-f816-4cfb-99d2-d0f7be89ca4d": {"doc_hash": "451f9f4902ac738ea3af9a1ad3c19cfb11ff3e3e3a824bbe202d81896ed7601f", "ref_doc_id": "2867605b-1d27-4763-be0c-87296155048c"}, "60c52bd9-ae3d-44ac-85b2-5609f92059be": {"doc_hash": "077074f94607018a9479f8d3eb99fa48ccdbedd7d2497ff120c3941937f69a42", "ref_doc_id": "2867605b-1d27-4763-be0c-87296155048c"}, "a00fe0da-04ba-4371-a27f-6431475f383f": {"doc_hash": "3121c682f17aa6060cac48f1ca35a791f85faec5acb15a9c73646f840bdc8b98", "ref_doc_id": "e6597174-9728-495a-b3d4-3816822ec4ee"}, "5327bda1-38e7-4f26-9b71-ab256e56194d": {"doc_hash": "2a79f2c6f0731d0135884e6f1013b9f7864411e9a0008e2749f5a90661e5f137", "ref_doc_id": "e6597174-9728-495a-b3d4-3816822ec4ee"}, "0dae7551-e030-4e4b-a1f0-90c4857c644a": {"doc_hash": "aca33be37187bbf43e26de1f066e2fc9357ea03b3b8dec361567cd71e5489d0e", "ref_doc_id": "34b1a7ec-c755-43dd-8f4d-a04633757216"}, "951e3c2e-0348-42bc-acd1-957de2ddf34e": {"doc_hash": "8dece0ae06355bc5b6cc37d59948af2c1f3b9e2f96d5e2e9b9418315d4103b06", "ref_doc_id": "38d218d5-3bd3-47e2-a03b-556729d42419"}, "4e58f121-b7b7-4464-aac0-25cb44382e34": {"doc_hash": "641c547b3bc6adc77e0c19c447559537cd6a23a7c2acaca6702cffa02dfd7305", "ref_doc_id": "7a037782-4e87-4084-b156-f352b0bd0e7e"}, "e5a1d780-ec91-4478-9641-51635f395bdd": {"doc_hash": "c4933a6e715877ff48d5d047a29ac30c9786e4d84b89537580168ccf5f1ee9be", "ref_doc_id": "c0744271-6b6e-4eee-9915-9c457e109d4b"}, "52a0eea5-76f6-421b-a4e1-63150bbc74a1": {"doc_hash": "0b53ad44760e1217915d62bab427d83d73277d28c9bff0ee5f1d3157adefd7f5", "ref_doc_id": "852ea680-098d-40d4-b489-7e2c705c32fa"}, "0fd4c9b8-6283-494c-baa9-f449deaf5759": {"doc_hash": "4acbd238bd69c53cb2a56fcfba678a0954ab2dc58e1dd15a0c83a0f90d12b6a2", "ref_doc_id": "616ff216-04a1-45f7-9302-bcc4a19410b3"}, "5bd49d81-5a52-40a4-b934-6e5443a3cf30": {"doc_hash": "b222d074efade68b09dccb44a46aaa9126e95138351b50bfea1babcf2aff0faf", "ref_doc_id": "616ff216-04a1-45f7-9302-bcc4a19410b3"}, "4bce45a6-d73e-4fe8-916d-d7a6e2443c33": {"doc_hash": "08bf4c2e93f32f2b7906a3f15c23bfb8c03d0bb2eef0dc5e7ce1cd49d82ccdf4", "ref_doc_id": "bc802574-270a-43db-822e-82d22157fcce"}, "626e2c5b-854b-4417-b876-799fdebd0d23": {"doc_hash": "e27ada8bfa8600df830bc5a62344ce8292c4c78a0fed591a3273813218b4af52", "ref_doc_id": "bc802574-270a-43db-822e-82d22157fcce"}, "9f370f1f-1b39-4d12-94c0-93d1b1b917fb": {"doc_hash": "7d98d57d8ee92eb1d9aaa0b234261588d7fd942890573c8eb3382071fe5d33c2", "ref_doc_id": "2ccb1719-8203-4770-ba8a-13dd6d357f9f"}, "97941345-80e0-421d-8aac-b39f09e86a5a": {"doc_hash": "9b482a162dc8c2fccbae9e9217297c8b2da05d157ef971c1ac107603214f4e70", "ref_doc_id": "c80a44ff-692b-402c-a86c-adca9eca169c"}, "adee4b3f-f712-4a3e-8109-9a4aa4bb855f": {"doc_hash": "f43d6fffdc72f50932816d68e503f174a17125430455c3959a17ff993ca3d731", "ref_doc_id": "c80a44ff-692b-402c-a86c-adca9eca169c"}, "44f68be3-69a6-4fa9-9c58-3807afaebca1": {"doc_hash": "7bc72acc1d509619f0b5e6ed5c68bdfd74742270296029c0e4817b6a4e01420e", "ref_doc_id": "fa7129c9-b9b8-4c19-8933-89496232481e"}, "5e0b0153-a2f8-45da-bb63-d0a798bba14b": {"doc_hash": "2c04560cecd22accae43df38ae1d9113d3eea634d09eac8450f1b64ef640e2ff", "ref_doc_id": "fa7129c9-b9b8-4c19-8933-89496232481e"}, "dfb62857-07b2-404a-8e30-abfedbb91abd": {"doc_hash": "58b45baf6059075f2655a9de6df6bfad71b1415db3fd54b73259cfce521e1a71", "ref_doc_id": "ad7614c5-43d0-433d-ab59-ad929c72e48d"}, "7d0b7723-1ed1-4ed7-ad73-3da0f732276b": {"doc_hash": "5fc431075aefb86b64151d39d6a70e9de62586688a386abe21b6611a1c07f978", "ref_doc_id": "3d68960d-0f3e-43fc-9a89-0990de81e123"}, "db308281-f993-42f8-87f3-b90b32a73077": {"doc_hash": "6e99cea5d6df444b6bf3ff3825d5dd731c10c7f243898b4a178b3b4acdc2c2a9", "ref_doc_id": "127239ca-bb93-43f0-a835-e3f7acc14d03"}, "d29701f8-ca52-4c09-99be-1f36b19ec8fc": {"doc_hash": "16b8f7648447afb4952a7ae0455e7f468ebe83462e38c31078d2f41fc7e7052a", "ref_doc_id": "eadb8659-0ccd-4f68-b08e-ede2cd89269f"}, "63548690-6b01-4522-be60-a751655d1aa4": {"doc_hash": "d107738f4cdd7e2764fd6f97054519a56feeb84b4f3bd050ac02b4bf93d46663", "ref_doc_id": "42d78ba7-1a94-4b69-a217-844868fca407"}, "00c4a71e-c1ed-4e72-9f83-bbea15acf663": {"doc_hash": "d6e34c477c03d2f0e7e2114c5b059d8cdb52a576afb787b0b8b39a0378db9602", "ref_doc_id": "a06ce028-8075-43be-a84e-ae5847f35efc"}, "df07ca71-4e08-46e9-bfa9-aacecd4ea723": {"doc_hash": "63faf3581da8f566248491a8fab16c0e55313a820f0089ef01d8439797462d65", "ref_doc_id": "6759507f-de90-4879-a266-d2a74d7f4120"}, "57df0268-a30f-4a93-ba49-28addb4a164a": {"doc_hash": "b9032ec61ba0f0a1a51ac533467f89af574cac396ceaafee1deedd33aab5b3e1", "ref_doc_id": "bb5ca9b3-4884-427f-86a0-6b1604dc1ac1"}, "6ff35f43-5d4d-4473-a1aa-3c8309d2d489": {"doc_hash": "64b17015cae21bfe5f18d74a4d1f89dc4219fb7825795592b0005382928ccb54", "ref_doc_id": "169621a5-afd6-4fcf-9f20-6a261fe91a8e"}, "6495f373-84de-43f8-8a48-1eb964a6faef": {"doc_hash": "9e5a570c7beb9aa50ffa7ba85b0145fe2672425f39b502f8cf7272081df28c79", "ref_doc_id": "c84e89d2-1666-413d-8ba2-01d029871434"}, "e1fb0f0f-72f2-4469-9630-56b431c19109": {"doc_hash": "ff29726f02a3c08ca97081c92680ec53c0235c7c160e3d5f31000ff3b234e59d", "ref_doc_id": "15a569d1-0086-472a-bdc1-00c7bc5ffb8a"}, "d9721f30-1880-4e87-b774-e719f2f47ae1": {"doc_hash": "521949a5a771340ce24782c8549af485642a9871a0bf00059f8a2e7432fb6279", "ref_doc_id": "71993c31-065d-432f-9d2c-9217c5da13da"}, "45c89050-beb0-4af6-81c4-faf8a2598825": {"doc_hash": "7b57489ff8ea4051e04e8ab79f91fdc5e5c62dadda66fe1688dd82cf520695bd", "ref_doc_id": "c0aa0062-8c4a-4d38-b09b-8773dbb9f14a"}, "087c3f1d-4d98-480f-a16c-76a5ff174ab7": {"doc_hash": "7cbc518d0ecfb5822df54ac0b0aa11dc7ab74d27474d1a2e5f3845258d53a865", "ref_doc_id": "2b7ad00b-c21c-460c-913b-18a72b3b1757"}, "4be38050-a07e-4c68-873d-ff7598505063": {"doc_hash": "77b30e8e6441f7cc5c01c6531216a8e39f78f33033afeab2a3642252f515cdf4", "ref_doc_id": "48522e48-0ac6-440f-9ce9-ada4b1cfc603"}, "0dec15f5-2d53-4565-bd11-acee7319c413": {"doc_hash": "50663b8fe2bbafc00ef21aee5ca75d71f09a2b8443fdfef73558c89effda8749", "ref_doc_id": "972e2322-4782-4eb4-a2b2-24e415edbe53"}, "2f572ca5-f8ad-4a71-bfb5-6fee986fe1e9": {"doc_hash": "5f0372f08f08d14047612e1f1f10a742929e29c91ba80ca77d6587b3838c076d", "ref_doc_id": "7bb67514-d18c-4ee8-95c3-d6241fdc23d5"}, "36b07d8d-96dd-4dc9-b672-5128d1a01497": {"doc_hash": "70bee72c612bf8e111eb91c0b8e6114251e4cc7990fc9869dc255d36a01221e6", "ref_doc_id": "fc87315e-111c-49a6-aea1-d906443f0c9a"}, "e17fe6f2-360c-489c-9641-3c38069e7301": {"doc_hash": "56d517acbf07484e3833db366b3dd1ab8aabeca99e5c1edaa0d14e0b500826ec", "ref_doc_id": "4dbe88b8-5415-4ed5-9dfe-3ced5bbb3ab6"}, "70fcada0-7b8a-4bdd-95ce-8447db9075e6": {"doc_hash": "e5d97d5c2f55551b9531b0b47ab28730c1b69afa42e96092651b9e14ae0f30d2", "ref_doc_id": "1b87fece-b1b5-4b1e-8558-98ffa1d0f476"}, "279b3cd3-102d-42eb-b93e-a04c6d983d90": {"doc_hash": "3621154c1b7638bfd733ca168a052a136f79f1adbd2a839b220efeaad1a3aba9", "ref_doc_id": "f831ea3d-9558-42b4-b53c-686901ecc8c7"}, "fcbe9c2c-b5d7-44d8-b53a-01eabeff1f64": {"doc_hash": "5f83483c164ca3b87a713fcfc8b7812fd7565c15f0289fbd05db67f0db923375", "ref_doc_id": "78d90413-a3e7-4b1f-a049-bb717a56bf23"}, "b0f9b828-9fba-4cc0-941e-fa8c3075e8ff": {"doc_hash": "bda43d27d3c5ee549c94cee115c3cc9aad843a7b80a625787f80aed07a45645e", "ref_doc_id": "16c41b01-544a-4a87-b5e0-8270585aa7d2"}, "9e7d32fb-4430-4aa7-ae72-1254daf80de7": {"doc_hash": "50394cbc487956b75e84874facc07ca207aba48688f632b71e68a73020d68601", "ref_doc_id": "e9827f02-ee2a-417a-83c0-99eeec2abd1f"}, "933a0c68-4100-4e27-beec-07d8458e2997": {"doc_hash": "cb74712d1228422871dbe2f6935a69dbbff87e9e319bc17a49b7ba9a2fc4fab0", "ref_doc_id": "bc797cf0-0a9d-4a2a-afa2-be40ef1f34a9"}, "cbd09dab-640d-45dd-9d6f-bb9a118a233f": {"doc_hash": "bd6b2f0ea1e241485bef6d912b049c84b3d9417076da12e86e0938aeab02c0ef", "ref_doc_id": "5d8f268f-3d2e-4da4-a63b-2b102ab57a65"}, "bba20394-f3a3-44ff-bc73-6b5663b4e763": {"doc_hash": "db40494b48be3cc89e0a33ea9676b34960da8128deb2f405178b2227695e224d", "ref_doc_id": "16c70f3f-9048-4398-bd57-080878d6b14e"}, "d7203086-1578-412b-aded-7815fc5da8db": {"doc_hash": "673a6de13a37c194ce94f79b52ea80137e3a9886cbebd3aea83d9600455a8408", "ref_doc_id": "99474d3e-4c2f-41da-8971-95815d7cc847"}, "e4ff1d3b-3cc4-4efa-a069-6276adda50e5": {"doc_hash": "27b4ad389374aac72c369e40b5eac797a86f12896f0c299992c09776ca4a30c8", "ref_doc_id": "4dc290df-e91b-483e-8886-53eb1e39cdcc"}, "50cd5873-0d7d-49f5-8070-c6617cef4f11": {"doc_hash": "f8b64353472649795acb7644580bd011e950de0298670400b0b9986713d591aa", "ref_doc_id": "b56fc14b-bf76-4dcb-97c8-7f68e13f6a19"}, "9952510b-61c2-4822-ae61-5c2afb794e6b": {"doc_hash": "5ed8c943203eefefedfe83038f3b9d5d08f5dc269c91ec76612fcf64d36c5e24", "ref_doc_id": "6abbc342-b6fd-493f-a448-ee6643ea6d46"}, "fc48ae4d-74c7-40fc-9885-afd357f4ffb5": {"doc_hash": "227a0fd567893c29b7cf19a7f87cf0c7c95d4c8164ee204bbe3d1c3689089db1", "ref_doc_id": "6a0ad71d-74c8-4615-ab1e-c991ddf7fcd6"}, "824fd1d0-9e0d-4b4d-95a2-56cffff14119": {"doc_hash": "7f1c94e89292b46ace12281860df42e7ecca49f0e41b5df37b1d2bb969c0fe69", "ref_doc_id": "aea2a5f4-3ef7-4350-b5a6-773655c459c1"}, "a452aecc-4a55-48f1-aa3f-0a14b9244d1e": {"doc_hash": "683cdcd19929d7822ced1feaa969a0422a52958bd9bea2aff8064dda8f98fcaf", "ref_doc_id": "ca498721-dbc3-4b95-92a2-57b45eb12cd2"}, "927b5f40-cbdb-45ec-9783-2734eb463dba": {"doc_hash": "efbc5ecaecfa0f894f55d13055f2c17babb73b905d075b50d0e514ac3e7ed81c", "ref_doc_id": "47ec0cf2-b9d5-461b-bea3-b6b2f9ec1f92"}, "db5b05d5-67f2-433f-a45c-9860f0cbf739": {"doc_hash": "08ea14c52fd67f38ca513701a9d4145e672b94d68f5860e023063c7b290a2f64", "ref_doc_id": "a12e6d2d-8d38-42c9-9146-77685bd8c8eb"}, "4050cd38-124c-4968-8da2-0d9b2d5d377b": {"doc_hash": "8e552442a6ed1c04cfd0b99ded849211acc955abd81b006e9324471ddaf2f40c", "ref_doc_id": "6e102e31-b24c-4557-a46e-af2087419c8d"}, "3782b676-55b8-4b9e-957f-18eed6bb5846": {"doc_hash": "c99fc0478ce84c21b8c5ef7cbe742ded2389b2aa61b697152a96828ae8721981", "ref_doc_id": "074dc6b8-d518-4198-862f-6700ab846e76"}, "442f3e60-8ab6-42ed-8b26-5998d961189c": {"doc_hash": "e703aea9f2e8ee01fe865b1f13048b33502513375f7e07d998950cefc603ee77", "ref_doc_id": "8a87c489-d355-4fd0-9590-a87dc827b308"}, "fb9de402-f21a-4d20-abc3-d82702ddd3e5": {"doc_hash": "6b42295ab95b770d385bd8bfb38127d85f250f92955cd7b746498db871c3f60c", "ref_doc_id": "d6730067-f0d8-48a5-8645-7c3fb76580a6"}, "c16a6d07-90a5-4533-b4a2-dbb7896be4a0": {"doc_hash": "18bc0d94783009454c17735704579486261d249ea023c11b0ad16fbf8f355eb4", "ref_doc_id": "982d037b-8336-499e-80ee-479990351182"}, "9908ad1c-b84b-4431-8d60-a5d859f0a4e3": {"doc_hash": "394ce923bcbe06a020297e353e4323c8f7ce3a8220624534d62358aab15a445e", "ref_doc_id": "df8a357d-ce98-41d3-b845-626634805c64"}, "fbdca8b9-8848-4cdf-a1e7-178045536364": {"doc_hash": "34a232d668c17722563638a9a1482d4f2775223f447fae72015ff3e6a802e164", "ref_doc_id": "c2363f73-4099-4a2d-96e8-3b0f840267fb"}, "0bf87865-677d-4c2d-804c-411d9bcba782": {"doc_hash": "bd162067e92d17a2d41a712263342212b2442ce10d5f571ef916fc87fe9170f4", "ref_doc_id": "94a74655-b6bc-4ec0-93af-d85a2cfc4dd1"}, "4c3cca50-b920-4a22-be2b-09a5a8a9dc3a": {"doc_hash": "c12aa4e2b3824846adb51373046955771fb96e6ec255dd286eed72e12a9af9e2", "ref_doc_id": "e2164619-e248-41e9-a9fa-65f78be79521"}, "b6cccba3-5b59-4e2d-ba8a-80d2797e2d4a": {"doc_hash": "2f1980d833b398e7f7483137e85ce86afa9e066f747986233ff0fefc54a5a8eb", "ref_doc_id": "5fdd3446-ea35-47bf-b266-689389375fed"}, "806d4fce-13c1-4bca-ba65-d5a0864c443d": {"doc_hash": "a1b291f2ac874cdd2c3fa9b8d0ad504d2ed6cfb68dd7fb1c8562efa82c010bad", "ref_doc_id": "b77d12ca-f1e7-4a9e-a82e-de322ea5c482"}, "4cf5c43b-1259-42a2-aa66-21e53a0fa11f": {"doc_hash": "b7e4be50883a7a8eb9ac4aca0512d89beec04e621916308822f7c4017c6870cb", "ref_doc_id": "2eca615b-bd56-41c7-9e50-67b350bd68f0"}, "f4856a62-7150-4152-b5bb-b3b80e86f26b": {"doc_hash": "dcc5b7c1359bf139f8ad3fd4798bd9ed496e23a51d6959af0c00c888e98c4f65", "ref_doc_id": "2eca615b-bd56-41c7-9e50-67b350bd68f0"}, "6d6922fd-5666-40e6-abdb-15ff50079e80": {"doc_hash": "4683eae784caaa6572f23d2ccbd267b6469907c567881dd7a7bb40e83f251289", "ref_doc_id": "1c11c3be-df1f-4dd3-93af-94c49aac4d9a"}, "3aa7fdc2-c9bb-40b9-889b-b83be8d89823": {"doc_hash": "ce48cadcbf499908b2918d69d15d30bb21205b4707708c7adbb3b37a8b756c9d", "ref_doc_id": "d8cbd086-abfa-4833-af4e-85261e474969"}, "f85c4806-2300-401c-ab74-8550c071a440": {"doc_hash": "e9bbfa07fee0a4ee1ee80746bc0732550cae4099a5a3bf4108d796c802050d35", "ref_doc_id": "d8cbd086-abfa-4833-af4e-85261e474969"}, "0e91573e-d513-457c-8033-8458449dc3d3": {"doc_hash": "7451d01f632dcbe78891fd734ffce91fa0b320f6e98a9c09a0d88705b6615da1", "ref_doc_id": "d8cbd086-abfa-4833-af4e-85261e474969"}, "b706254b-b3c3-4341-8d0e-104a73d6b198": {"doc_hash": "ceaafe9ba80c64dcf0757d6207c1e7eaf3a92c14dde0bc9ba3852ad03d405e9c", "ref_doc_id": "143da180-8f56-4001-873c-aa822b6df721"}, "adb3d872-89d7-41be-92b4-b1b9539378b9": {"doc_hash": "a9601fa0de591988b34ad4d9bd28774d2651d9e282fa76e4617a849f1a14eab4", "ref_doc_id": "cd7a6bdf-b758-4eb2-ab2d-bc2e75d27bb1"}, "e497892f-1099-4896-a258-43a835eba53f": {"doc_hash": "2829030f37bd71987b0a541ec9294f2c0835bd508c610628cef59bef4a0e8246", "ref_doc_id": "f3043cae-38f6-4ca5-9ee4-04bff38b0f59"}, "52bd3a08-a49c-4932-90d6-82c955b31bdb": {"doc_hash": "60bd3b26397c2aa4c6c143b8c93c929c894933c535fb9a2b10e51b5027795b12", "ref_doc_id": "4c7cbde9-3a96-48f0-b793-24ad309aae6d"}, "f929d05c-e837-4800-972e-22df56efaec6": {"doc_hash": "1cab07b3f84ab07b2705abbe85d4b3c575f451f35b4b1f0ece7c49f889b8849f", "ref_doc_id": "e778b77b-1d64-409d-92c4-e12eab16249e"}, "d04faab0-4766-42fb-bbaa-4831489305a3": {"doc_hash": "a44721e696bbab6406b5cf60cf22d416b1fa3c9a3a2a83cb18d8c808bfecf9a5", "ref_doc_id": "cb8e1227-91f5-42d8-be1e-eb5206bf63e6"}, "7576d806-0a40-4f2e-a9e0-584c991d563c": {"doc_hash": "319522891bbfdc842c97b54c270a00f8b811882da60b2e5e700ce744243553f7", "ref_doc_id": "0db51218-efd5-4721-a94c-80012873040e"}, "1af32867-a0ed-4695-b3a0-283ca8bf68b1": {"doc_hash": "ec74d6eb322f29327f777912e7ddf7d82576084221d644c8b804a454a95e0cd1", "ref_doc_id": "915214af-22ba-4b5a-93cf-b22c6fff174a"}, "6b332c13-3788-4953-ba16-6c28a361de69": {"doc_hash": "213667a41b223ade52750b46ec6018e9559072c050f35dfe9dd090ffce4e5b1f", "ref_doc_id": "60ff1628-1648-45d4-be36-305c633525bc"}, "ab626cdb-b650-4d20-9d49-d943c64cdbfe": {"doc_hash": "f55c5a0182fd02d203be62bc98e33709b21989a1385ca06da114071edd31a9cb", "ref_doc_id": "aa89e85d-8568-4848-a27e-cfd9332e8540"}, "13eab271-b08d-46d3-8643-c6b06e9fbd5d": {"doc_hash": "478458e59c872b973f8bcbe725dc2f6664d184e83dbec331b57d73b8a6cb1873", "ref_doc_id": "c45899ae-fcf9-47f0-805b-14e22ce238da"}, "1f34fd93-ef76-4618-8f44-5d8e74b289ee": {"doc_hash": "75fe8e0b1c4b7b037a9556632aa4616060d711aca5f5f8b79f7b2dc07c9e43c0", "ref_doc_id": "9d24696c-f5c0-4ee3-af7d-d939184c52d5"}, "7635db93-f5ef-43d4-8e6f-68a734da3f0b": {"doc_hash": "b9699f9b6ddd4578ca78de19fb1693afee838822bf7f1227c68d8807dbe99980", "ref_doc_id": "791c4164-2c00-4a8b-b551-29f35937a60b"}, "8574282d-bd2d-4ac2-b54b-52cc3c8d1ce3": {"doc_hash": "75ce03cd4ff1c9ff54a6dd3e82c89f52d0de22670f5b8c0aeb0ec03327a37aa1", "ref_doc_id": "8b4151a6-a91b-446e-85f8-a1bdfe0fda5e"}, "2b2d754e-aa60-4871-a8c9-56657d530e1c": {"doc_hash": "630e91af04e2ce1fe02f3c4c71936761e575511c070efbb42960ec9b64d385b2", "ref_doc_id": "46ff51c5-57d1-44e1-a847-ac2896405454"}, "1d9c8842-ea6e-47c4-9062-fcfe7da23aa9": {"doc_hash": "262e67a076cf899411520c6ed4ef765f1fa836ca924f581f975eed6a332961aa", "ref_doc_id": "ec15ed41-bd22-44d3-a967-1dd29e6ee0e5"}, "a0577b15-3d3f-437b-88d6-1d9104e222da": {"doc_hash": "bf429c8f6d5065afd0b20cb23acaacd4b59f92a75c7288a8f6fd24d9b2b678c3", "ref_doc_id": "ce69f219-7c3e-4016-9a66-b59697f8bf6a"}, "052aa8ac-ce78-40f9-9db8-b6676a58931a": {"doc_hash": "93320bead3baa43132965b68ebf3adaeaad9c2c017226f848570e339085db29d", "ref_doc_id": "6a5f5c7f-cfe5-46eb-9fed-eb66533e3e9b"}, "1451b517-b8c7-42b9-9b9a-82262e95c71f": {"doc_hash": "0f6b28d1c034646c3443061df2b446d81d0f2f8864e06c674f6d8ef5ac06745c", "ref_doc_id": "c0161f82-09b2-4c03-9d14-72e032de3e8b"}, "5f050d11-e4e6-4335-951f-ed1617f0fd0f": {"doc_hash": "67b37cea8c129ddb008ea9d2637a0ca2afbc60536aceff16d3231f06a64d9818", "ref_doc_id": "1d64d596-a2a1-4e17-abca-4cccf2c335d3"}, "a7d56ef0-fad3-4168-a247-e7852e5c1ecd": {"doc_hash": "418282e13610c764594727df745c4240e30db60f02c11302bf708f955bfebf3f", "ref_doc_id": "e49cd0fb-6d4a-4540-9c1f-36f38636079f"}, "94c6cffb-53fa-41eb-bf44-3df541e56edf": {"doc_hash": "de5e9c885c54cd5c1b7aadc76ad067dfffe0189476bb51edd628306f26077d6d", "ref_doc_id": "a937eb7e-c6ef-46b5-98d0-7067879a157c"}, "076eb649-1213-4614-ad9c-87bb8a69f825": {"doc_hash": "c0126c3a2b5bb2473517cad1c7785815e2bed1f0e99d50c55b28073b914faf96", "ref_doc_id": "8894a1d6-7e1f-437d-9f89-d42648400a64"}, "cbb96750-30cb-4d1e-8c66-94c024c37306": {"doc_hash": "0b8ae324b3901b5a67a3f91a3d49f70b58ad5bb0ff6940ade118917daf92a23b", "ref_doc_id": "25fe72cd-2b18-4c74-9af8-e44db8c3c117"}, "23a62729-e019-4516-8bf5-8bb24bcfb6ba": {"doc_hash": "e47bf09680d9f07679b3342f2acbaec5d4fc6d8881f60762ea94b5ce7c60ca3a", "ref_doc_id": "f973fbf2-9044-4e55-ae3f-1b6b49d1f7f8"}, "33c84929-7654-408d-aa21-cc1c553e07e2": {"doc_hash": "0e27fd64781be3fc0a3c8608332f731542a277b63bba6d5b8079aecab56eee0d", "ref_doc_id": "1f57575c-cca8-466c-93de-8c6c24409656"}, "c6090a20-e9a4-4e43-a505-8ab2a5d8636a": {"doc_hash": "2d2f83f192ee470d996a6b24ec158dc33140a18e8898491fb3cdf5310976b3a9", "ref_doc_id": "48176a9f-be9f-4c2e-bda2-c62f3cc8fb76"}, "2a241c10-6ec5-402f-ba9e-6ee1ae445fa1": {"doc_hash": "d289cae36f75265bbc886887c317ab971f3492e895bbe76882d5af69a61b7de5", "ref_doc_id": "2ad8bd47-dfb8-4743-b9d9-48e7cbb50dec"}, "fc2a32e5-7430-497c-b0a1-25a86a8e2ca0": {"doc_hash": "6582cccc9ca1d78f851e94521a13022bd9aa4d3a0a3bc4f672119c1c9df76763", "ref_doc_id": "334efaae-9363-4e9e-914d-d4626e4c6ebb"}, "82e352f1-1933-4d47-802b-6bf7a0cdc952": {"doc_hash": "e65f706298c8fd72cd0425666c8ffb82da1dd94d465f9d6a75e1a2cac603683b", "ref_doc_id": "6d991e6f-9ec8-4e21-8746-5fb68288b04c"}, "72bb9198-4203-43be-b525-b85a39784ba8": {"doc_hash": "75e9ecf63573f497096c725f0529e7faf42e94cc396894cc3b6133ded4bfbd1f", "ref_doc_id": "edbaf2b5-1201-4996-b9de-3522e2567006"}, "1024b064-b8d1-4207-a813-2ad702ac6f5c": {"doc_hash": "9f896b2f73db9a6d4f74d1be1740de2917fa857753bc9564b20f7b2794ad38af", "ref_doc_id": "87b743ce-cf39-43b2-a7e8-940b5a027300"}, "2b0965a3-d815-4710-87d1-03735f1c8c5f": {"doc_hash": "a24e0ebd50dd426c114fdd32e4156522cfa44d92f6053dc4ffec7f582487d193", "ref_doc_id": "2e04bd15-4cdb-46b0-90a5-9d13ee32fe73"}, "3445b1a1-75a7-4de5-973d-e8b589db8476": {"doc_hash": "b8f53083bb72872d509d8534da0b183ed4733f7fb119312371ab07c437638883", "ref_doc_id": "f0054e68-0b29-4f1b-960b-7a6a40e683b4"}, "c40312e3-5840-429c-b6de-18b90730de14": {"doc_hash": "9f9d04a8f683cc1acf12a4eca7840dc246e4f694317582baeea89561f5ffbb41", "ref_doc_id": "2b7b65f6-e522-4990-a42f-85ce5351cb27"}, "ba93bc63-b4ba-42b6-a426-f3b3c3745d41": {"doc_hash": "f33094be3a27cc4c6e6df7f605f9e4c3288e8deff80d0762cbe1f8a9b7e736b8", "ref_doc_id": "480c4c50-01de-47c1-8976-b5499d5727ee"}, "33b024b0-0ce9-432e-81b1-29602b820587": {"doc_hash": "8407a4d0a9e09f69102f9b4934f5fddbdb2f47940d5c6e943d7d8c56f202ffa5", "ref_doc_id": "f74b6d1d-2f4b-4dbe-926a-df80adc0c30d"}, "15cf9b35-256d-48a8-acef-6b1f4cd1683e": {"doc_hash": "bfbd7eadd211b3464e1d026af651facd2962eb47e754999aa1a8cfdc4b8afa98", "ref_doc_id": "c0d31a33-b34e-41a2-8c2b-dc2ceb8588d3"}, "98c1df8d-e712-4769-8ce8-d5b9de0325ce": {"doc_hash": "6c0b19122d8583e4ec64765c99aea1ab698f686edf14a33fe2f00cae67f66f42", "ref_doc_id": "660fef90-a5d6-47e1-8c2d-e6d626375228"}, "7a07104c-80b3-48c6-bf3b-16686c2d1bcd": {"doc_hash": "979240d9177b65c32b42fd13601e7d3ef45b24aae4051ca6bdbc22003b33f5b5", "ref_doc_id": "e9507ee7-c46c-47c7-9bc8-dd1f6990dd02"}, "715267d3-7b86-4204-b0a1-63eb6c544727": {"doc_hash": "ece8d6ad85c10e0eb0fc02b26e31c19edeec52e4db9c175b70f435a064ad1eb9", "ref_doc_id": "3befa9a3-4162-49db-831f-bb041d738bf4"}, "57a0a0d0-71a9-4632-bb1c-451b00081118": {"doc_hash": "6bf756cb1d0939e0179f8580748bfc1686bea59aa5e9f18730d19b05da930b4e", "ref_doc_id": "89d6e540-9406-485b-b05d-5e4e70f73459"}, "d92bfbdb-c38e-4607-8327-d83160e686e0": {"doc_hash": "d317bd8c4ab5e0b3c6911d32257271540db7ef61f6be75d6fa027a07edafca90", "ref_doc_id": "0e9b29f6-0cee-4649-8cf6-228a644c6dbb"}, "67074dff-6e94-49ea-8925-fe62c5024871": {"doc_hash": "65b63a25336ac46d22249b0371fbd0bab7374b83edead202fdb28a75b82147b3", "ref_doc_id": "fac6f5af-4365-44ae-b719-3e5ae6e78f2e"}, "753661b2-0bcb-476f-8b92-a7d1f0e9b914": {"doc_hash": "880fde48531931cf6e7b9b5d6f9c32ca2fbdd45c196219d2196b322e6b203cea", "ref_doc_id": "cc02173f-aa3f-4345-a477-dd38f0185ab2"}, "6c950f35-9098-470a-97db-0bc7dc87ed24": {"doc_hash": "fae164d78a276ee91083b9773df5fc9babee1e868389f1e78ca39509192876f3", "ref_doc_id": "e8f2ce55-2328-4ab0-9130-ff7b98722d45"}, "2ac21c51-a88e-4ab6-8a0e-cc4b5bb95a33": {"doc_hash": "7d80e745b1c54a7975035756676273d211830a27919998953cc01f6f0bddbcf4", "ref_doc_id": "8c040cb0-0710-48a2-97ae-a417bd913d89"}, "61d30b08-831a-45c9-bda4-0071ab9b9a43": {"doc_hash": "6964b37304cd6ff087779ea06c702c25ee186dc7bf6957b73fcd15cb41f19766", "ref_doc_id": "a0165a7c-cf46-4f17-a0e1-12fa39b78104"}, "97d16bb8-1c3d-44d5-87fb-1bc582e1000f": {"doc_hash": "ae84348911ca88a8f25a7e031137834e49d4e08a32e8ab0c84edb2eb29bb783e", "ref_doc_id": "9ddbb61e-a411-4a8f-8781-8b2ff7884fe6"}, "97d9ad51-0302-4585-80aa-88e51ad85a7d": {"doc_hash": "ccd229d6240a7462d1858b4eaedd3c4d5d655200b5ceaa2c662406b87d85ae05", "ref_doc_id": "7327a7e5-c961-4af7-b8a4-4fcfbf6ad829"}, "a2d22b37-4a1f-4560-8d77-916c352d054b": {"doc_hash": "6dffff358845a83df9a07fe6fae7661b830b87afcf27c1a700b3237761f2af2c", "ref_doc_id": "cbbfc76b-afc7-4aeb-bd00-f31c4ee55c19"}, "66f8b6db-168d-4910-b7b0-520ff0e29691": {"doc_hash": "da8b4959d00bd0baf2393fe7673fc691544143b8167187d085a5d5199a5e38d0", "ref_doc_id": "2b6a8d17-e2b3-46d9-882d-6785df726956"}, "1ed62257-1252-454e-9b08-e38240061494": {"doc_hash": "bb383499a1a396f4de63c415194da35a5f844a91af5f6a50787ba20e88b5de5b", "ref_doc_id": "c2836ab8-82ba-42df-a0e3-1f96e1835ab1"}, "d6e9306b-a779-454b-a57f-71f59b0e914c": {"doc_hash": "2e87103d3699e3777e583e097ab243c46cf53b9fcab6c8fea6086366260ba8fe", "ref_doc_id": "8b0f27cc-d560-43c2-b10b-0d96526e2775"}, "85cf6a96-c68f-487b-a5f0-93527898bcf5": {"doc_hash": "7a42fe55c28ceea7125a05c63e65abe7ef26fe7adf0efe1fa79065a4975c25cf", "ref_doc_id": "e33be43f-fdd9-42b5-995e-69d8b96d1eb3"}, "4b64d12a-2ae9-423f-b5a7-81528d83bc0f": {"doc_hash": "07744089c874796b966552070833b35dc3f1e1b5e32a2d022ee6bd4001c03fe8", "ref_doc_id": "c3295986-18be-4111-ada4-6bb2ad802981"}, "1c0e5835-7a7d-415d-9673-43a782c2acee": {"doc_hash": "551968bfb0532a8dc7dfaa38e2db371a15c3f1de83a9fadd6a1484ee409b1464", "ref_doc_id": "1e963e75-85fb-480e-b55a-4e886d4c3957"}, "aa9fd927-84de-4a37-879f-6e059a033e62": {"doc_hash": "cf22ee8b38741bb7f74bc23d534d58c66d67305d9a27cf7515824cb12a0d1dc5", "ref_doc_id": "525e365a-d540-4232-9e3a-7c5e101f45ee"}, "9d568610-fe3b-486d-be66-00a7a9a7fa0b": {"doc_hash": "7c0cd4f3be2d1161a76bfa1b38c13f3dcf935fab7c6954d3804c70ade2b926c8", "ref_doc_id": "27e58da6-334f-4b03-910e-7af9f3965d60"}, "dacea7d4-1102-477c-9e18-88d30d66f9bd": {"doc_hash": "73f08855b166659a38c60d8c237f63eab03bb1967c5f9abcdcf665189dbbe130", "ref_doc_id": "2abeee9f-fd82-487f-97cf-7c6032be04b4"}, "5320f622-ad68-4ca2-b2c0-51aa0d674451": {"doc_hash": "ca97d8373460350eb7163325505c5750af8ba3e8e1a4fbc3cb55bdc17d559c1b", "ref_doc_id": "af0f35e2-f78a-47a6-a58e-7d851bd35cdc"}, "6109c1f2-7cb4-4ce3-981d-52f22320ab3d": {"doc_hash": "80becc0590e5afc66bc3c1397a1a2a1d2f9a0e37d5b7b3b6bffcdbb6f9513d4e", "ref_doc_id": "b1acbcd0-8366-4a23-95bf-536b71626ba9"}, "1e7691bd-1046-4969-aec0-3266ce2693fc": {"doc_hash": "6f68c477808706b294fbbb29e6e9285443ad2c42b6ef137ac3123591d8b8ec7e", "ref_doc_id": "ab059d8c-b34e-4b71-9c3e-40248d1d66c6"}, "613fb520-f3d0-45f4-ad89-ae824daf140b": {"doc_hash": "ea79e97029136d87ff74a224c179e1b8452163866eb7d07c49cefca656841a50", "ref_doc_id": "2e19d76e-c578-4a7c-af63-162a9180d567"}, "c8574707-f114-4542-84da-d7012ba066e2": {"doc_hash": "5404357b3969964c7a06f9ab02ac383899eac3ab56463c910983976dbf0c2a37", "ref_doc_id": "bf67c4bc-99f4-44e7-8483-9fa0335fd078"}, "e8538c10-c54c-444c-aaae-8f0a549c3103": {"doc_hash": "4ae838c8059f90574af7a43c2dd80737f009846597f4ae9e88f1c683a78a1784", "ref_doc_id": "019a6994-3a13-4dca-926e-fe8bbf87282e"}, "a834b0ee-fe41-4e2e-91e1-23a33db2490a": {"doc_hash": "402f6e2e718f0c7b066e018082d93764a6fd1a58e142fe9f8a8146ef5e9bbf7f", "ref_doc_id": "e6f32e24-2597-409d-9317-7bebed40e495"}, "9324f572-8a9b-48a7-812d-c5e36a2559a8": {"doc_hash": "23cb62079dd4487373a74b739ba10896f6f2b4f079f572472ed8c01b23fd3d2b", "ref_doc_id": "5a1ebc21-d77f-4d58-b6ac-3c3b9fee89d7"}, "f68c731f-71a8-41a6-a68d-16ec2cafe2e6": {"doc_hash": "787b7b813e176d3af9dcb06441c1408cf4cbfc66288a2d9c4ae0818c906b2429", "ref_doc_id": "7bc21c50-0754-471a-ad86-434d5a2bd58d"}, "31752edc-484e-4fd1-8558-8acab22aca26": {"doc_hash": "18b7cb2804ac73c14659e992d31a8bcb22c05aa76a798d02fee9f99962cf76cf", "ref_doc_id": "92f89d70-1049-465a-b918-24d4b82c8255"}, "da1dd7fb-38d8-4c8e-8ad3-47dc2841c682": {"doc_hash": "bb91449f274983e0834be312b15844155db47d076c44a8d69319cd50a9ea553a", "ref_doc_id": "2af9cf63-18ee-4378-bf28-ca38b05aeed5"}, "ecc52911-30ae-41f5-83e6-571558f54e8b": {"doc_hash": "f32956b43d345e4d7fa2c0b8107b166a056a42a548590576ab7ca6ebfab52a7b", "ref_doc_id": "f5cf5591-567a-4231-b384-22d7fc4f09bc"}, "6444e38d-9df2-47bd-bc0f-245cc0d5de18": {"doc_hash": "a3a26880a808ca2a0395e097851e107b104df00fb1d775cdd23eeb9d377690f9", "ref_doc_id": "e5045bf5-591d-425b-adc1-4d69fa4675e2"}, "d7f03896-1ed3-43fa-9e77-3556d3c93939": {"doc_hash": "e9cfb6cbe82cd182337c395bda5af4d0d1233dc317388aa522adac53bb8d641b", "ref_doc_id": "3b3852e2-127f-47c5-90fc-585a9859c0d3"}, "f2b7d0d0-a598-48b2-843f-ac56c74194c5": {"doc_hash": "8f426c2263c60d23f2058feba0a2c7841591b786e93154e3193bf53f916b1902", "ref_doc_id": "ecb07da7-2655-4d33-bd9b-f77e05d05d44"}, "d6d468f3-26a5-4b46-80d8-1982b0779661": {"doc_hash": "430cf5437529610e5fa6794806595959e2981456db6984626d9b7c246ac285a0", "ref_doc_id": "0749b119-995e-48ae-bb69-fe09f09a9850"}, "f51dc0a9-0540-45b7-a7f8-7c9639e695da": {"doc_hash": "5512044132f00f1406f9f77dc6bc61468f4f830fa02a5650245043cb4c74a081", "ref_doc_id": "d1806af9-bfb9-4d8d-acf4-5d4246216d6d"}, "34e3298b-96b3-4482-bbc8-18b0f8ac3fa9": {"doc_hash": "01650dfb41d9b3e0e977204b809816fe48225c4292d3e1da6ca9865cecb3b955", "ref_doc_id": "a9eb8193-9069-4b90-a2d5-d447a2dc961e"}, "36803657-4964-486c-b4ec-ea415145fe6f": {"doc_hash": "b964ad4a67ca355f1ad75aba0a175b1d1f41ece730513c0c33f850eabcad5f76", "ref_doc_id": "02eb04c9-a672-415f-bc5c-c5e935a50e3c"}, "2eda3da2-bd5d-4c22-90f8-ebe8bd22343a": {"doc_hash": "211225e2a296ba5ca178b41026070453aee3387ef53cc77c8c489bae47cfc3ff", "ref_doc_id": "cbad586d-0a93-4906-ab69-4cb6bf4aa99a"}, "034ea6d9-316c-4e3d-840e-4d38a832d120": {"doc_hash": "b9e2624e5147d181972da023b6473a06df70a2e1753cd246a3582ba6b670e2bf", "ref_doc_id": "c83121a1-c44f-43bd-824c-94c26f6c8c1d"}, "bf92c302-03e5-4455-8751-a824acd64ca0": {"doc_hash": "7f9933a6c7ed5db353af5ba6dbaf852e411931022912826029e17426ca056b19", "ref_doc_id": "b6a0e7b1-764d-4d32-99c5-24f5c5b8d10f"}, "0b9e85ec-1210-4d3e-9fdc-ec0348ca9ca6": {"doc_hash": "ae449f18f810b3c5c707459b2b430d5bdaa830b0358f8a4a7752be4ae5a26767", "ref_doc_id": "80b37a02-ff7d-43dd-b8f2-d3829ae02fa1"}, "ea23e135-a3df-4861-9be5-69209e2898c1": {"doc_hash": "4000193c1016197fc17d4dfd6dc6b8504298bb9d81e0e15be3bab5ade0280a32", "ref_doc_id": "5234c9e3-9cbf-4951-ada4-5c1405dffa2b"}, "88c53405-c0c0-4345-8082-7b2b4c345102": {"doc_hash": "245c39e797c0e16b90c2b055510dd967f1d7d1aa77343a55614245372eaff9f6", "ref_doc_id": "1f0d5694-8e26-4de8-9db9-60e1993a68eb"}, "c15ec020-a243-495a-8d56-0a8b7cb157d6": {"doc_hash": "b8ed2f640a8ed59bbd8f127f69dadfe2e98d0061a6b323c27d8eb115b92a8ecd", "ref_doc_id": "3bc63d9a-e8f3-40e4-b7a5-f5edc7364a22"}, "b96994cf-ea91-401c-bc81-23329451d513": {"doc_hash": "4b7c3827e7fb32d84fc88b07e737552289ba763aaba19a007f23cdd278fc7a76", "ref_doc_id": "522a6bed-c8f3-4c5a-89bf-dd917a2c5e35"}, "996e9cfe-52b9-4741-8e7f-527e55b88d4a": {"doc_hash": "73912541fe1631bba6cb98e1595f02db1a9f3d1d91ffec3ec116a9794b5f035d", "ref_doc_id": "18f49c3f-2db3-408a-a525-b8d57fa44643"}, "b732f938-a3df-428c-8bb0-979ee91e76d2": {"doc_hash": "d95cd0904d8aaa57ea7a90a95c4721927b5109e9ee4e30b13ab8ec75964531e8", "ref_doc_id": "25da778e-e907-47c2-9bfa-bcfa55b7ba9e"}, "54552430-52b1-4a39-a7ba-c5171a45c41f": {"doc_hash": "a0039c7b34fa1d9e01bcddb4f2f4bb004cc08fcf8e15b3e091ad7fd561967839", "ref_doc_id": "2d52fc64-e7b9-40a6-afb5-e83119374233"}, "56b25cff-580e-4468-8d15-3c0ff0dbacd2": {"doc_hash": "edfd27a63ec39d71951cae9d28c103f2708e13d685969ec6e15d0caa42d437c2", "ref_doc_id": "061cb74b-7640-4c77-9259-96388bbf537e"}, "b1c24deb-3844-4b92-bb21-f382d7763dd4": {"doc_hash": "fd9efea242fc5e6e3c3dc0229b22fc941f11531d1fb60d77f9c4a214df26190e", "ref_doc_id": "6699188b-eb96-450a-b050-011964163429"}, "98a0a9c3-1882-4a79-9760-e62711664b48": {"doc_hash": "00314eb0e23e676c42ef50fabfd85c5c160f82f0593b6e2e16e7bd13d3ee50e0", "ref_doc_id": "5908dc10-f8a5-4543-99f9-b134434cf24f"}, "6dc0edeb-a33f-483f-b16c-0210c6a38186": {"doc_hash": "6c8571ac03f03ccf030271c8e525f6606225cb6e87bcf80b12ce41f1057a0bc6", "ref_doc_id": "1ceed36b-12ab-45ca-b86d-80891d687c4d"}, "d44fcdf2-d0c7-4eda-8b95-36d3566cefa3": {"doc_hash": "d3ea606f756f4434eb7205fffc3fe0ad866f0d8273a85357011f145e250f1b88", "ref_doc_id": "1ceed36b-12ab-45ca-b86d-80891d687c4d"}, "5bd7b091-0e07-4803-b11c-6d20e9b1ee60": {"doc_hash": "33e8840fffbdb38b7b75d665f077d5629a044f9b3c0e008d469e59b19eb17d79", "ref_doc_id": "de7c6581-002a-4218-af66-7fe54b219450"}, "32aaa329-d9b6-486e-91d7-4e4185849b5a": {"doc_hash": "c00ea8c241d0f1e4e83cf0b6db585c114c6fb51d081f9cb89ebbbf833a72a1a3", "ref_doc_id": "ff27052e-3693-411c-b33a-59ca82263b83"}, "04f37cf7-793e-4e0e-a103-8c08c5d0b6fd": {"doc_hash": "1cc34b304e3c3edf0fcd633c520b5b62f8f8d616fd54893ca97a7d6dbacded19", "ref_doc_id": "4114f7e1-083d-49c0-ae4f-c466644ca45a"}, "f64c5735-6f22-4761-8db2-d4cfc5618688": {"doc_hash": "031b0c88f0cf50c8da7c3614dbd5ff63f4bd1397e5175b437f10b9c5e787df42", "ref_doc_id": "128e1942-554b-42f7-9af7-dc702c902eea"}, "45229e73-85a4-43c4-822a-d9d7cab01705": {"doc_hash": "07ee57f861c73380dfa72d30e057f68f3c37913543dd72fa4cc0565b1b46d19a", "ref_doc_id": "0b31f048-b4e4-4572-aa9a-a5d82641ffbf"}, "9f47141c-c399-4800-903d-fd2fce7489fa": {"doc_hash": "e9cfb6cbe82cd182337c395bda5af4d0d1233dc317388aa522adac53bb8d641b", "ref_doc_id": "dd9f3609-b86f-4182-9cd3-3235904e2b2d"}, "6bf38941-9d51-491b-ae6a-781b7b049fff": {"doc_hash": "8ab31f7580c5ed69dd96d10b913cf6ce894e5f36118c2fc9f46cd0f8e6432ae8", "ref_doc_id": "d1ba25db-df33-4f07-a7a8-3d2f199e2657"}, "c68845f2-4dff-416d-82ca-f2a777e77034": {"doc_hash": "05d6b9aa2b989d0e4cd8fe183bd1e10dea86dd83e3635177d07cb2382636e41a", "ref_doc_id": "d0c32e8a-c81d-4c90-a150-7d4c4e836cce"}, "7b2817a9-e8a6-48af-9cfb-0cb8fb4e6fae": {"doc_hash": "7ab8681bd96ce03e5371741b62b035e2d1c401c8039acfb478653b3700f304c4", "ref_doc_id": "efaf5069-4788-46dc-a699-d5c6b7b44391"}, "360d4418-8d59-44d8-9cd9-45be6d2480fa": {"doc_hash": "f3188efe426ecb89ddd1635907254346d90f34ecb35168e9839616f696e49fec", "ref_doc_id": "df74bdb3-b37d-41f0-a89b-fdbb015384dd"}, "08c9a0bd-e818-44d6-879e-d462df175309": {"doc_hash": "0755bf63d2443a065f548adf1d96f37dbebea534350095d10d23c3e665d4aab6", "ref_doc_id": "e4d0a55b-4ec4-4c38-beb6-3c9af10c7908"}, "06eda633-268b-488f-9f60-0ea995646847": {"doc_hash": "505f71437ecbc7aec3f5e73779b050e260c2c5e921d3f71e15bbd31f18746123", "ref_doc_id": "6faed02b-71c5-4fd8-a2ab-53ff77e143d4"}, "a84e3752-d4c4-4713-98e4-37211d342cc6": {"doc_hash": "47f6d098d01be08395eb8e6274e8b4c7ee70af1a23bf7f529e3ef95ccfbbb5c4", "ref_doc_id": "fa9b0ef8-52fb-4144-a48f-841daee99727"}, "051ef653-4db7-443b-8130-cacec4a11a8d": {"doc_hash": "4d7107c96942dfd72495de8b20dfc86c103232387a976c1c493ae996a7e88879", "ref_doc_id": "29955402-1da1-4d29-b740-c589706aa431"}, "995b239d-fb2b-422a-a19f-bd547dcc5b55": {"doc_hash": "616aa03467a5703f9e6ee2cbb66004a29c7b06c7fce5d4437e0c52775ef42ed3", "ref_doc_id": "442a9249-faf3-4a71-94db-9fbd3112f40c"}, "8a7c525d-9c82-4b8f-b8e8-d1b7a467a143": {"doc_hash": "0f9de6686cbeab4c57379e920f1931894a37b035c42a635e704ddcc909fa296c", "ref_doc_id": "5b37c3be-6f48-47ec-8c84-4a3c332328b3"}, "1f3a9443-5f90-463d-a05e-7f07feaf50ef": {"doc_hash": "41379a62c77827bbfec09d5fd5ad22eb3bfe5dc99e06345358a64a777c70f6e9", "ref_doc_id": "f5439aab-9a86-4a5d-ba94-7032115affba"}, "5b3ac9e7-30ee-4e50-8d72-79ed7982b554": {"doc_hash": "03cd7f4ef86301dd6071b0a9f4477c5b2ea0255696b17c85198239f683ee1fe2", "ref_doc_id": "48a3c0a7-2482-4429-8572-715e3d1e9724"}, "950b29a9-855c-4af3-9277-df62f998997b": {"doc_hash": "50770055dc8f63d1fc398d4f1aba6c13dd95b204b4f6109bc22dad00943ea621", "ref_doc_id": "2b76a650-8dc7-458f-ae36-8c49b36ca506"}, "f9a1890b-148b-4093-8905-b6d6d05d35ac": {"doc_hash": "05444ee6ae807279e9a10888ea29b539fceb4bf7cfda3cc50657dd99e53ef1e5", "ref_doc_id": "db9ab3a4-4029-4b9b-9bf1-c7c0820b31f9"}, "faf54e05-1451-4772-8779-db33bf6cc6e2": {"doc_hash": "fd9ef6e4f0baf252912d50eddb8f8a5e6d547a5b258503c5dea65f325a47babf", "ref_doc_id": "e34d5acc-9fb3-479f-9493-8000dc79513b"}, "08f62edf-c8b3-4132-a70f-2b25b8cd648f": {"doc_hash": "b5280b368d2204ef32c2282fce31d7cf33e86754d9f7b027158d59a4d0f21ba1", "ref_doc_id": "42adfb17-c62e-4f3f-b881-439956e8b16f"}, "69e3a16e-06a5-4ba9-83b5-5a3816d39229": {"doc_hash": "f317488b47960cfcf599229382150fc4252ddfb3de00d1eca6351ae9c60e12a6", "ref_doc_id": "5d3f7d14-9f3e-4257-9da5-be08d1f01d32"}, "a781a603-3ad2-4a38-96a3-d7783c83b952": {"doc_hash": "8e1cc528b68ee959a588f3fbee989e8b74a88c3cf3704a4108bb70c114582e1b", "ref_doc_id": "78532feb-7f19-4be6-b28d-52d5413e794d"}, "5273de13-3ebc-4e36-b2b1-6833df7888e9": {"doc_hash": "cb81d72fe5a4e19055daa4369ce4c9d2aa28eaa3c7a0762b17ad9265dc548d9a", "ref_doc_id": "850f017c-2fab-46b4-b053-e1115354b550"}, "42faf02e-4bf1-417b-a2b0-2f5647ae6f47": {"doc_hash": "db92880acdf7ef4cf55cc865ad8786e136d3d1d983d5314a0a1281c0584f4f37", "ref_doc_id": "f066d93f-2f82-4bc8-b8df-7693408984a9"}, "45c27638-5c07-47d9-9351-fe8452311504": {"doc_hash": "5ecf9e15f80ad9bbb482bdb8207bbb2d1b95b34ba8e232861bc6e2252071e0fa", "ref_doc_id": "0476a1a0-316e-44b1-b5fe-32e0c9019f5f"}, "ba71bf30-1e37-4715-a97b-55ebb8d8f947": {"doc_hash": "9e243c5533f98f1766d45d9cf6b610485ebca42454e77b4195402ad0af9f562c", "ref_doc_id": "aeb1d1bf-eaf6-4f83-977b-191495aa6420"}, "e89d05d6-241a-4006-9120-c0fa83a47b75": {"doc_hash": "a6265f51bb7423c645b06a351b12e9ac53afcf3c8d46adacc28fca4fe51fad26", "ref_doc_id": "7aa89f3c-f597-4fe2-930f-448e48f2e81d"}, "123c764a-33e8-4668-b8a0-ee0446e00c25": {"doc_hash": "6574e21cd6d86053bb001fdf23b5e44b254be1d14a8c40dd13ad7a31ee8c2ad2", "ref_doc_id": "123438ef-52b1-482e-8c0b-2cb3f7e7092d"}, "e5981211-a8f7-4ce4-97fa-ab4c1bc8f5b7": {"doc_hash": "4f550c707196c34587da2beda87433183910748bb0fdd4078cca21103aaab9b4", "ref_doc_id": "ec52dc37-042f-410c-bec9-7173ff7f0d40"}, "765b82b3-4543-4060-a2a5-b3d27c7daafe": {"doc_hash": "94940eae09682d465778f36d88d62dc18bd6fc360ee1292f006acf59f3ad8cdf", "ref_doc_id": "2e207cf5-b76a-41a5-8ead-11d362b852b7"}, "2a354da0-4a3b-4205-948e-04ac4388d5df": {"doc_hash": "4546386a0b7337101cb6d90b4acc579bf6d61814e03e532ef68e12fce61eee64", "ref_doc_id": "e1ba55db-d93f-4e1d-bd80-bde049101faf"}, "122af864-590e-485b-912b-513748c08483": {"doc_hash": "f00b59846d1b87d52ee3b6ec576367c3dfd0d0347850430ec0a9301bc70cbc0a", "ref_doc_id": "d1807085-5672-4567-8bba-f74d0d5cd341"}, "74367b87-b94e-4801-bd25-50ee1687000b": {"doc_hash": "175c9faacb4a4aa0d679c95cb5d9e07039a7e6006037d7a6ae0ca19f51501ea4", "ref_doc_id": "04616866-bb08-4070-9503-4a73d73f6a23"}, "545aaa64-2edb-4b1d-86d4-119cc4152733": {"doc_hash": "0fdf2179749d3477deb192b86a84a86f664bd6432ee22d7d3f66618b741022a4", "ref_doc_id": "778564a2-6a62-4091-9748-3fb368964a46"}, "16bed9d8-d320-4c24-8e70-06481789cd40": {"doc_hash": "6b9f7be9bc422c9a2e56e059fea7b7f0aacade5f490bb50fbce1c44415f8b985", "ref_doc_id": "d204ce5c-6a34-47a0-9a89-4779c41c3ff2"}, "5233599d-26e2-4730-8a7a-1058eac68f2a": {"doc_hash": "36dd4742a77bf9fab22f9f4901948c2b69d1bb0853888e33fa4233ed6f4b2435", "ref_doc_id": "7fd45288-d5a3-4ce1-ab1b-dcb0a1caaf27"}, "44582310-04d9-4c0a-bbb0-ce411eefd82e": {"doc_hash": "13d8faa297332da0909c2e22aa78f446ed0b243a3fc9e9dd64289e3062d8e15e", "ref_doc_id": "0d5fa7a0-761d-46fe-966d-47e47e162753"}, "40aac283-0f28-4e97-aaaf-dcdbc0bcf488": {"doc_hash": "e9f6066c5a2187905fa86cc7724ecb1c0813ea838d47376e2c90f4a15d884805", "ref_doc_id": "b61e3725-e94e-4d76-9a57-6df93d1751a9"}, "ca4934a0-4b94-40d9-ae6b-fa40e845451c": {"doc_hash": "980171c442975df3f5db84e6ff29dc59dbd5d2d1a73e18bde671132353ce9192", "ref_doc_id": "f70da5c0-82bb-40e7-b217-5b54cbf85e60"}, "48ac38cc-2bbb-4f45-a8e1-4a67a66cce98": {"doc_hash": "665d0c4cf72d06891d0238f6c0d1183e522f56dbabe2240b8f46156e7c643806", "ref_doc_id": "f70da5c0-82bb-40e7-b217-5b54cbf85e60"}, "e4f53e06-056e-4d56-805b-9f2a0fa2078f": {"doc_hash": "df714c7c3c9e665c84987caa057b529c71fb9281b51fdb17893a7c931176fb07", "ref_doc_id": "4b1a6b4f-ca64-45d5-9d90-d39b7a4e9520"}, "fc1cc1d3-3b62-4f97-b1d3-11ed4ed7c2de": {"doc_hash": "5b00d524fa281f98e76bcaa8b02ab8c1e67c2b8cbb51a080dffcebd75599f674", "ref_doc_id": "328664f8-28cc-4db7-b69f-9d60546f065b"}, "0ece86ea-2471-4723-abff-6b610d0ae0c6": {"doc_hash": "cd40b3021b83f5a4d7615fad1a76e3e9faeee96ca0634cfecd9f06b93d25d77b", "ref_doc_id": "328664f8-28cc-4db7-b69f-9d60546f065b"}, "f1921a70-df3a-4fa6-b682-226675790ad6": {"doc_hash": "0ad9e4a4275e793cd3bdae5fd320f88380a3dc547accd306976f129fd0ef815c", "ref_doc_id": "3a92a60c-fea1-4e6b-8bb8-b5cc2c8fed6d"}, "7b1d5d43-1f68-49d2-a970-f7f8a07377b6": {"doc_hash": "fbd23cf0539f4f9ee0b1aaade9a894854b65b7f2e291dbbced525b66310b3638", "ref_doc_id": "dd5d86fb-bf34-4b80-a174-4cfafb15813a"}, "b2665a36-479c-453c-8b63-58b8b4c3e668": {"doc_hash": "bd7972eae0a5c01fff4e9809c8249e07c9c56d2d5da9269a366aeee5f0bc8b69", "ref_doc_id": "bba3e6d3-d535-46a0-83b0-3a532723cf63"}, "28327558-152b-403a-b517-04eafcce2695": {"doc_hash": "cc47144983d3e5be247da0dd57d3dd0d7a08a51908be45c0ad322dcddf3ec2b2", "ref_doc_id": "d9f064a3-8a25-4556-9900-4f839327a67a"}, "409950e6-63c1-4565-9e48-590de53bb4cd": {"doc_hash": "7aafaa2509a41dac9aa081e517572ace2962a3c5550828ec1e2f3b14cfab3e36", "ref_doc_id": "a50d9036-3872-48e0-944c-f6d688d902c3"}, "a96b5ea9-50a3-452e-b243-4f15b1c9e3b9": {"doc_hash": "e1395b975f148e6ebe201e0ec16e0be9c7394a2257d1622d9bd8a4afe4251473", "ref_doc_id": "842dc08a-b4c1-4ff7-88af-a33309cccf21"}, "04deb919-40dc-4dd5-8fdc-1499557b84f4": {"doc_hash": "e4d41a25ab28035092a5f8c486d519c351951f0ce2ad2dea2b0e3ed813296be0", "ref_doc_id": "99df9c16-d2ed-4d05-a172-b7492a68a5b5"}, "9eac3eb7-7ba4-40fd-9db7-fa048ec6c49f": {"doc_hash": "46c6754fdf8d278f015040f83371d23dd98e22468d3e3d94b43116ec02f1f50b", "ref_doc_id": "53fdd8c9-fdd8-43ec-8d3d-b75cd6ab3877"}, "3c5ea5ee-f94e-4e99-836d-3f9fb818cd3b": {"doc_hash": "fe9a64abea39a4f1626012d559ec05d694bb048d101bda6436dad27383858a7b", "ref_doc_id": "171ca159-8773-41fc-85cd-711f33e71e65"}, "c5f22aaf-9146-4a0c-979b-7b8cd96ebd1b": {"doc_hash": "2ee02b76607f04d7ec2ee186818f61c0b161326e728b91f5eae5c1fa4fd0d323", "ref_doc_id": "6988ece9-622f-4d47-b902-3ad82393e5f3"}, "2fbdbb6f-5c5e-47c6-99ad-4052779dad2e": {"doc_hash": "23ec0f2b7ea5eeecdb6774198064b2714ec7826ff847ffb578f63652e9d2a7fc", "ref_doc_id": "d6fcea82-25ed-4d11-a68d-46265344d24a"}, "f6de8a16-16d3-4dc1-bc48-8bd4b77b4490": {"doc_hash": "76452221eac23e8de10877f912fcccf0664bc854ef6343c8eaf4388f0fe2013e", "ref_doc_id": "6ce1634c-5a67-4ca8-9cca-1dbe6fd8bf32"}, "a6e39607-edf2-4235-81d9-55cc1f0240af": {"doc_hash": "bef0c8ca250f163187bd54429ae1cd5f13443d26818f6c4b2c08bf7d88cccf0f", "ref_doc_id": "7cd94887-6b5d-45d2-a0bf-2ff0df89f9d5"}, "a07bd7b7-8d7f-4a68-8357-eda51cd2be7f": {"doc_hash": "747353b56a3717b67e2518814b04ad5ea3662643e5302cbfaba4e4e9c3856374", "ref_doc_id": "eed8bd9c-ec00-482e-9eba-bbde50b70942"}, "2e796f85-8b2d-4bd8-8a94-c3a236ce83e9": {"doc_hash": "551da4a4069a61c819d70957ccfad7e2b916cf86fd40c11209189423897018e3", "ref_doc_id": "676a5ca2-fe51-4fce-a7cb-fc8db1e432d1"}, "d00f6a41-97e0-4ea8-881c-b77d5fbb41a3": {"doc_hash": "183df46469def1d30380c712e3c6d66931489e8f97db8a716661fd824d9cc1a9", "ref_doc_id": "9f12f578-ed3d-413d-acfc-abc59c25ec81"}, "c837218f-c1ca-4bd3-b9cf-0058745498c6": {"doc_hash": "9329debc3c86621aa70c1a13833836c997e083a6d98eeca2303249d3fa07869d", "ref_doc_id": "9cc93c36-c7b3-46b2-91c2-c4f6909a131d"}, "5313a296-d5a0-4f1f-8596-23518e03ef54": {"doc_hash": "e8d8a3d93eda6fc348cefab9799e646215e01c166e2b7a4e87fe14336b7d368a", "ref_doc_id": "c14133fa-da23-43de-83ea-f1a9935c0bb7"}, "7be333a3-6400-4f32-81f2-420671029c2e": {"doc_hash": "12ca17b636e07a4fbbecc1c0221da0932acbae7060887d74526b9d44b7764556", "ref_doc_id": "1624a9e3-8fba-47fb-8c80-ccb8b90908f5"}, "908d3137-073a-4ac4-a546-f2684799fbec": {"doc_hash": "b3ef4d5ee92791f110eb286c7012c5374c0941f432233db5e2aac78570d71df6", "ref_doc_id": "aafcd750-c7b9-47ba-946d-b5e39a0818e6"}, "85364e6b-360d-4c8b-b230-d11dcd456242": {"doc_hash": "9cc67e62634ada34fa6ce72240407553d86a2f0160b3af5c747360a73ede4429", "ref_doc_id": "c46a4e4a-b041-4772-84b1-81a36d40084c"}, "6c85adb2-f390-49c6-b6ca-04164bbab5ec": {"doc_hash": "531c0a0dc81a8531b0a58f8105a0396e814f28812396738efe3cd17444d56a15", "ref_doc_id": "37a745dd-e3e4-4ba2-ab10-aa61416fa95c"}, "77134024-a0bf-4c28-bf40-1cbdec248b53": {"doc_hash": "f82d3f91e39e3564dcacee8734dc12a220c403640bcc433dbdcb03fd60fb4948", "ref_doc_id": "882af3dd-c765-4f20-b2ff-2e77e955160c"}, "78fc2642-bce6-459d-a084-135cf7aa0806": {"doc_hash": "a0296b403149ea8f1d873b4642e53bb0cbce81797dc0d8e2b57591b04832648a", "ref_doc_id": "9dde165d-31e2-44e1-a80d-33926f4e2063"}, "63754755-9f89-4da2-a683-3cf91479ce17": {"doc_hash": "eca7cf7c7daa1fb29ae0d9a0d6ee9c9c0ae462e50410db86e6f6ce2416838330", "ref_doc_id": "739b06ff-2040-4d6f-aa4a-1445d3a20e57"}, "3de5373a-998d-4c3c-9703-95ff3401e551": {"doc_hash": "a8cb4d072dc26e1f5f9315531d601b19ca6800da7bb5219587ccbe6082750de4", "ref_doc_id": "026b5cff-17cc-4ebd-9450-6d636889a505"}, "961c979a-1b75-4760-8222-13f6e51385b8": {"doc_hash": "2762af9374f1484bfebd2fb0235f7331df7e37db0bbaa29cf684c9c26e614e53", "ref_doc_id": "d044ac4c-377e-4219-b45c-fa9d5d47937c"}, "a7629812-b74b-4aa0-8d86-eedd1c9cabd0": {"doc_hash": "4ae5147c6e1ead71035d2ac952a5ca2793d05b071226a4e1e3d160d10adb9bde", "ref_doc_id": "deb6d478-1fe6-4c12-84e4-5b579d00f3a1"}, "3059b44d-b2e1-4f17-a458-56424fe2f2ab": {"doc_hash": "1cd0342662019cf8ccd2195e26c6871bbe84666d252666c65c38a9c6b0067fa0", "ref_doc_id": "1638afb5-ca11-4b9e-b3dd-18cbece95b1f"}, "c2d9f4ff-5bc0-4558-9f77-063e4ca4422e": {"doc_hash": "8ee9cd730a96627126c4c1cd131de7b170f5fbf33e52d13ff8a9f76ca7a7db42", "ref_doc_id": "7841e194-0874-4213-b615-7c5468ba124d"}, "1790d48d-6ed3-4ba1-abc6-604cf1feaf84": {"doc_hash": "c488977c8da17280ecbe2d7adc3349bc6adcddcf6e4383e91822fe9f85086b56", "ref_doc_id": "3c5ae2f9-8c4a-482c-8a9d-9b4d6424e26f"}, "ae20c680-4415-44f5-bd69-0c3a1337419d": {"doc_hash": "9ec2da51b44b81cb1b9f5c51e4f4deddb29294bb604f95c4d92609af8d01501e", "ref_doc_id": "63ba3fe7-dd7e-4a55-bc0b-0c5160d71a1d"}, "08c97fc7-a3cb-4824-bc65-07114344eb79": {"doc_hash": "ed0e188b30b6764c3f328f24efef1b7fb6ea33af6a702e0c0b8def6f35bab19e", "ref_doc_id": "e4c033bf-a1fe-4582-849b-6d9b80f42ec5"}, "ef7e9920-acc9-460d-a85b-b3d6806acba8": {"doc_hash": "0f7b94ab1567ba8e0b8551495c6336f6aa68b3d2ff50ded4d094d100fc9ea907", "ref_doc_id": "84e34e1d-2a5a-4695-89f5-6b265871f4f8"}, "feb11b0b-3b02-4ddd-a881-d99198af929b": {"doc_hash": "6ab32396e458068f19f63583f954df69246326ebc8decc65140a0b4c0265d08c", "ref_doc_id": "9ce0a442-120c-42a5-b806-f484a9c562fe"}, "cc1952d5-359f-4fa8-bd1b-8e2e94526d60": {"doc_hash": "35a85220960dd8d4b97f3d0c32e698ad8e2de0aefd46b0762331fd26992c7246", "ref_doc_id": "40fa11ca-84da-4d5e-932c-9617ed39dec1"}, "e4d1cdc4-f4b9-4b65-8909-08bd21be7ef1": {"doc_hash": "f39c16743f186cc79097cff56332636a75c96d1a53356ba1bf3773045fc03336", "ref_doc_id": "77e18644-e53c-4fb5-bb25-d7053f8a3d17"}, "6fcba275-e07c-4747-9954-e216007c2b97": {"doc_hash": "763e062897608e9468ac7dd86cee40d2ab00c4aef7686ecabe31db736c90aa5a", "ref_doc_id": "086f6b3f-9638-4238-8afd-7387de81564c"}, "d0527de7-a03f-4842-8dc2-16b1c5a686f1": {"doc_hash": "9754668f2e5ba53973ce727f4cf6990a24c5e9d3cf7c9823ee215f029f6a092f", "ref_doc_id": "92eda3a0-f480-491c-95c1-283d6fe206b8"}, "e82bb758-0e0a-422e-a45e-19b802d01e1f": {"doc_hash": "050f86e2adaefc7559749c7a309b95b1c0e267262efa6ca96753679e607b2fe2", "ref_doc_id": "e2642afd-645a-4401-ab45-09b84f85191f"}, "3c31bc52-c2fc-4164-923a-5844a1760648": {"doc_hash": "84b0ccbdbeaf28c5eccc4c3443e3bbc250ae2da9da14445b243b9911e813629b", "ref_doc_id": "0ba39a2b-459e-42db-b24b-1f53b2ceb9ff"}, "8deef6f4-ada5-44f9-b60b-ed724c76fa4d": {"doc_hash": "013a585d4c6d32a207f9263eb988da5b371aed584bd9ec95c431af4a34286e20", "ref_doc_id": "7e8e4f41-f6b1-4058-b257-fa6494470603"}, "365ec670-08f7-4ea3-afed-50f1b75394ad": {"doc_hash": "61b818ea915aa116343d098da6dd58c19d067bb27f3fa4d0291ce1d92fc4cd05", "ref_doc_id": "897346e4-49e3-41d8-8edf-115b8d17befc"}, "6083bf8a-ccc8-45d4-96e3-e12f062f927e": {"doc_hash": "28ccd0d67ab846a032b58526c6cc68d1ee07a3431e5d4bdf859e3566fd15e43b", "ref_doc_id": "213f6128-74d8-4e8b-85ad-194fefbe6196"}, "7a5faf1d-43c8-42d2-8b5c-53b4442845e5": {"doc_hash": "18ec54eedc56a10e2bb2795afea17fb5358688b8e817c1b2c014ea2d5b0471c5", "ref_doc_id": "e6821d4d-606e-437b-96c0-029346c8e313"}, "f9dc9180-a52c-4fa4-8ef1-c9c00064d07b": {"doc_hash": "01f5fa8c9e22b332855040d7fd386469d0abedbfe6e1f178ac8127a8ade507a4", "ref_doc_id": "f50872f6-76a7-412e-a5ff-dd29b2807800"}, "5de54361-9138-47ca-83d7-a99ae4b69ee6": {"doc_hash": "d00cbd083d7ed757d277a463367ed24c55add435adb16a1c7eb1d696f93f462b", "ref_doc_id": "38a4369a-6922-4ed9-8b04-f828d8f40fd8"}, "88db2b08-8d98-4b3d-851b-040f8e42b208": {"doc_hash": "16f694a8ec4a9fb4417e891a46543efb1687ca9d63396ee599e699aaf568b961", "ref_doc_id": "56fe2284-6610-41d4-aa2f-f5a1610d8df1"}, "92697345-6ef4-428f-af8a-636fa649c249": {"doc_hash": "90e9b6bba94488fc4a31ae4014fa5e5bb74a4f6e2036f9da73d1a3e1b45c9c8f", "ref_doc_id": "df5b1a5d-5cb4-4142-ae9a-7b257987a3f0"}, "397530f3-7b8e-47f2-bb2f-f8a20f5bd2fc": {"doc_hash": "c5b932760f5840dfed3ec1efcc3480a0047dd77869cbd3535f1bee4961c7b6ed", "ref_doc_id": "4acd98d5-1ab2-4420-8e01-4094905af87f"}, "e83a2979-8a02-4776-929b-8246f60b4b37": {"doc_hash": "79a35061a054ac6b04b0d67ad5c66bb6bfee36e0c3e54628e44a52233b343103", "ref_doc_id": "ea41ab8c-021c-446f-960e-f1fb5fc9a975"}, "b6766e02-599e-4de7-845e-140e8c537425": {"doc_hash": "ea5b89e9405ecf8fc0646a96a8254989019dd35583675e219c95ab435756aed6", "ref_doc_id": "45282625-a843-45c1-a473-33e8e11644af"}, "9b866eb8-2778-4856-a723-ee36b5c3e503": {"doc_hash": "f8f25df0db0a71265c8c146601c2953a4874390aa509bbaa4c8122d3cfe9ef83", "ref_doc_id": "fcbf8d6e-1c56-461c-955f-61aa6017ca89"}, "1909b55f-514b-4549-8660-1d1d594c9ac9": {"doc_hash": "e4f5559acb2f00c6a249886c42909347ec5dbb8d815bd8c5598971884eea9a64", "ref_doc_id": "f312117c-4b19-4c25-8733-95ebdb7ca4d4"}, "906ebbe9-d84a-4a5b-bf8f-730dd678bbfe": {"doc_hash": "1da3de5d2dc9b62378775276373347e890234ebe7ad8372fa84fd5c356abec6f", "ref_doc_id": "0bba3072-35df-4775-bd0d-69e5557f52d4"}, "8713c129-2af8-4af9-b07f-c0c5f067e1d5": {"doc_hash": "f8d800d2960137546138daa9239f9cf93ab08cfbdf89a66df90cd5c5fef4962f", "ref_doc_id": "b19d0396-ea41-45e2-82a7-49a449911fc2"}, "889cc128-bd90-451f-b758-bfda94d4e193": {"doc_hash": "041b3d35c1b0bc3027bd94353d582f5a40f6369e959c4e65d8f223f893baa895", "ref_doc_id": "492007ca-4d7c-45c5-ba42-586493db8b1d"}, "76c84b2f-7c2b-42cd-80cc-6eb9ef1495b9": {"doc_hash": "422249a41773627307617d50c55b6aed540bbd5bf4c07bc2061f055829ed754f", "ref_doc_id": "3fcbc9f1-cf00-401f-beb6-0bbab0998763"}, "c1caac64-6b69-4b21-9255-267eacad7e2a": {"doc_hash": "5b6ec4be294c135fad73d086ee29a2336c84ee4fbbfe659a07e849d3d079dab6", "ref_doc_id": "f18e0a6d-c879-4819-8e43-ed2a4813a509"}, "b31a4351-0f61-44a7-a91e-ee201407401e": {"doc_hash": "9d040c6230fc8e2d3e6dd90175b963540b919a9fb341b918a23e77094c65ae86", "ref_doc_id": "4b49ab8c-6058-47a3-a28c-26220dab32f9"}, "6829c7f1-07aa-4239-a2da-36bd71d2bd9e": {"doc_hash": "5ee010ce792387f017931b2a16a1ed825b9e3e4e27df057507ed981bf64bd274", "ref_doc_id": "1260e740-fec1-4b71-89a6-44f4dc2c2bcc"}, "98e07415-d72b-4fd1-8873-681891774194": {"doc_hash": "5f2fb0d5de3299a2fef80f64b2f5a22533eafd1a664e94999260f0f758835f12", "ref_doc_id": "7c87e48d-f831-4771-a897-411832e4ce01"}, "e97b81f9-d2ac-44a2-9f4b-0a49c7e124f2": {"doc_hash": "5250b4ccb34bf7fdcf1187aaf2b26a58d8babe9cca4f094ed5f93400a61731b6", "ref_doc_id": "f747fd90-81df-4229-a772-917138d41918"}, "6ebcf898-026b-4a7c-b921-6ed40845ad50": {"doc_hash": "66ea95e48e9b2b14bf475e730fa6d0ef1367337da1d7a281a28ec627968d87c4", "ref_doc_id": "f43eacd5-490b-4c0b-9256-585f557f2c9a"}, "8d07a67f-0b88-409d-964d-a2f13d08bb99": {"doc_hash": "16223e785fe812a7654200c05d3bbd29d41ede555bb9c8b54fa8b9f0c70e5c7f", "ref_doc_id": "11088382-e955-4371-b310-88f9d2fe4f10"}, "c1eefae3-cc67-48e5-9d9f-00a4b7e6b7f6": {"doc_hash": "cb4f5bd1a6af0f9c89b8c48d9f6b3ec2d8f5fc4e2138a20a08b032844cffe966", "ref_doc_id": "a1e84941-134a-4ead-9087-44c3502bd625"}, "933f5af3-8554-4e36-8a70-892baf030120": {"doc_hash": "b0f826b03ee37f6fda8076e7ce3317b731574ca13fb1a56d3f076a059d666a36", "ref_doc_id": "d8d08908-1033-493f-9b7c-46e34b7f604d"}, "d60190fa-b811-41b8-9393-d38ea1570bf9": {"doc_hash": "4bba4dfdd0f83df9ede6132b4e616f6bbce2f795ff73293634eacb427ba1795c", "ref_doc_id": "71002fdb-a68e-4667-adb5-cffbe9a02352"}, "2aa28232-03ac-4d78-8548-04c36b65dd2f": {"doc_hash": "6183b4254c51fcf2620b1a0fb1f92eac4a81ec01e11592cdac9f1e1b6b416473", "ref_doc_id": "6195b433-c2f9-42f2-8215-2fb70725e328"}, "732dbef7-b531-4412-9213-b31609853961": {"doc_hash": "01df2c49eb9ab47e912987a50c594186ba3558f1818cfd6c5685ff7c5630786b", "ref_doc_id": "5737f903-a9fc-4369-9036-259efba234c7"}, "6944bd0d-e3e7-4aa6-a476-41e754ebaae5": {"doc_hash": "2a0321334c8699f6d04102ce3d8c27653d1ea7994e48f77174427f9c65e3c2c9", "ref_doc_id": "c3951318-4056-4a87-9f6a-894394f51e5e"}, "fa89eeee-d50c-4b46-a767-cb0394f028bc": {"doc_hash": "65d5b5def5f4ed10c0c9c009f71e9889a49dbd6dfddd802e9c95c0c8e6c7be83", "ref_doc_id": "117820a5-1cf1-4f5c-8ed6-d8a734c06490"}, "863bf6c1-05d6-450b-b514-00aae974bf5d": {"doc_hash": "8a016362afffa99cbff225f23642f4476729b5c0df849eaea9ac827bff6e61d1", "ref_doc_id": "91fff3c8-467e-4c69-8a04-9363c961754d"}, "8d1d51a3-caa5-4fe1-8796-a8c186c8aab2": {"doc_hash": "58729691c021fc4c255cfd9872117c28c0bfab1524002851c9752aad03b6d6b9", "ref_doc_id": "5cdde2d8-1017-41ec-b4e5-be809fc0b615"}, "5480dc9d-084d-4012-87a7-33d24efa01ab": {"doc_hash": "3d14eef65b63e48ffc2adb3c0cba9a813e06f26d981a2b35b191187ab55ef1c6", "ref_doc_id": "5cdde2d8-1017-41ec-b4e5-be809fc0b615"}, "f7409bd2-c3b4-45e8-848c-06d55515c6ad": {"doc_hash": "daceddc58268d14f1cbe7718b518d4bea811af4839350927a3c35dfb17c867c2", "ref_doc_id": "5426c61a-23aa-4386-a6b6-55b8ed224e02"}, "5ae2918e-7a8d-4e02-8150-5919ed4c5496": {"doc_hash": "ef9f42ba7a57f432bb305149476eb5dac426821da533b53dd40aaeb10acfecd1", "ref_doc_id": "128a82a6-782b-41e2-80be-d4e6ba57d06a"}, "c81a0742-9568-4ab3-9ee9-e3af4bd12093": {"doc_hash": "051bf664b8c1b4162dd56e32dd45e65166dccce88ed45002e9b5d7e75b1680db", "ref_doc_id": "6e840e2a-8ce4-4f88-947a-00c121b5992e"}, "4d364e6a-ec4d-4966-8cb3-e50b2ffa138c": {"doc_hash": "517bb26e48ff7192ae84f375df963de18d10f480b16d6a4425feec0c027bbb3e", "ref_doc_id": "0de65218-a11c-4a96-adaf-211deea965f2"}, "75083180-767a-436e-8204-af68321fcdd5": {"doc_hash": "6e3ccb12f70965f4f07dcc4953d7440e060b4a9f0a6522b519920a9a27f621e4", "ref_doc_id": "66dce79e-5239-4824-9903-deaa9141aa93"}, "c8f6c6d2-1497-4909-b364-6368cf0b729e": {"doc_hash": "cbf12a645bf4aa6597988d09780bfb8a099e61227e8e11b88a3cf0ea336ec198", "ref_doc_id": "66dce79e-5239-4824-9903-deaa9141aa93"}, "490121ed-7f15-4cb0-9873-e19da29be285": {"doc_hash": "5416c94f426a7a29cc04c1afd673318f5a09d281c4fb7231013134bdead3677f", "ref_doc_id": "66dce79e-5239-4824-9903-deaa9141aa93"}, "ae5c987f-e308-4aac-9611-3546e1adaa25": {"doc_hash": "33edf0d7da3035e34a60785a7faaf33de4e49c8912f3fd09d60352ac7fdba29c", "ref_doc_id": "66dce79e-5239-4824-9903-deaa9141aa93"}, "dc282724-6ce1-41bb-9717-e28f2449deb7": {"doc_hash": "5fd24c990c33d6a6be0d20fc72e7c829ff65ee4c0a82d3c365ec7aa6477012cc", "ref_doc_id": "ae853b70-3dcf-4df4-b7ae-569334290d41"}, "7c3bb326-44c3-4712-ba81-817eecea7b29": {"doc_hash": "47d096c0659d7ec2f9edb5673d56a1671825e3fc033b0819912b14c2d4883614", "ref_doc_id": "c08c6a7d-c842-4ef0-bbab-d7ad578d34f8"}, "db18935c-4251-48af-be02-6cda71a3a4b1": {"doc_hash": "2805b221e179cba3b35a611b0c00e9c9ee59578c2727ca600beececffea026c6", "ref_doc_id": "1121cae7-1f16-40a6-9a04-4e56150aae51"}, "48349940-4b0d-4ff7-862d-241138184f7a": {"doc_hash": "37f8193abe2aaf97de9437ba2e3c913266965466652b3fe77116d44c7ef012a2", "ref_doc_id": "19b85d47-e7fe-43c0-a48a-0d7b2d9b8843"}, "5f8e1261-7127-434e-8a5f-ede6d1c0a077": {"doc_hash": "fc4c344ec13f188de173bcc7756b0043d5c8f4210cc26bb650acaf1306a976c9", "ref_doc_id": "15c50acc-ea50-404c-849e-10c491c02db8"}, "22fe15a2-be70-41b4-95fa-6f81695a19b7": {"doc_hash": "a0213b91b87003380a1dd0b54059e569a095f4d4774794bed6e47dd54e81b4c8", "ref_doc_id": "15c50acc-ea50-404c-849e-10c491c02db8"}, "69065b6d-7405-4067-a6cf-830981b5b914": {"doc_hash": "eec8895c829c552e88f3e0d0de3f70d07a331ce537e89fed082711b421c06fcb", "ref_doc_id": "b8f87cde-1d14-4923-897e-c1f14dd4c80e"}, "a821fba3-2136-44f5-a1f4-b4ddcf32f4d9": {"doc_hash": "eeb35e7ffaba112f893692a75a5d2c0b35fc144a07d51752d6aaeac06f37782b", "ref_doc_id": "3fe49c4f-f57e-457b-ba10-e33712cd02a3"}, "79b73328-c1d1-4606-90e8-88c97bb7f8a8": {"doc_hash": "0da32c146b4b278f8f4980cff833496f5466e80edc16c6477c24855f04303f31", "ref_doc_id": "3fe49c4f-f57e-457b-ba10-e33712cd02a3"}, "a2e3e03c-7129-4db2-a6d5-440ae5766cf9": {"doc_hash": "53d27105e4ad9a6d2305c9974d9abeda8b9df969b903b34edfdd3b440b0ca740", "ref_doc_id": "586ef30f-b238-4f0d-bee9-30d93e2725c8"}, "a12183ef-05b5-49fd-bb5d-4c8f51fb583c": {"doc_hash": "75bee2c20757f2ca0bb01f541bf0a3a01553dc2a203fafd92de71179bbb41a64", "ref_doc_id": "73430904-1004-46a5-885b-c12e3f153412"}, "43b71e68-4857-45d3-a0d6-f331248fec46": {"doc_hash": "ee0ad2662ec112f86997608e463f76edbdac6630288ff23bab501f65781615fc", "ref_doc_id": "d827f7bd-3997-4481-8e6a-1fa8e29c9af5"}, "c8d233b0-1236-4455-8180-d5ba3db474d0": {"doc_hash": "3979bcbaf00b104a0f040f1ff5a4f15c42708514c9f959b77e05413bcdf8c10e", "ref_doc_id": "569163a1-ed7c-4ad7-845c-968022493d28"}, "4b88097b-57c1-4116-9e91-d5de970c68f2": {"doc_hash": "f0b3fcb8578d7810c6047fb7a2bd984c7dcd13bfeca5fe93938f0f122840dcdf", "ref_doc_id": "be6fa6ef-4581-4ffa-a09f-4d5e87566eec"}, "78b09713-de9c-46f1-b5a4-77d523a67c54": {"doc_hash": "7c931e575f0df70d7ff83021fa769407f1bef1f25f92b340d29530cfab856a3d", "ref_doc_id": "677d3468-f39d-4238-9fbc-a2993fcb1836"}, "33e35af0-72e3-4fce-a3ac-cbcadb438dd8": {"doc_hash": "7a1f1d1afbe42595828974edb1112ac94768344a7945f29c5e829ed1ae88f843", "ref_doc_id": "80c8c795-dcf6-4c92-9051-0e6431742051"}, "4da2041f-2c15-4599-901e-eed38ceac8ac": {"doc_hash": "1b8001a73bcee2d0c7c7f6e3f3930629c2a6f735c9019414239e186c9e7d06f3", "ref_doc_id": "80c8c795-dcf6-4c92-9051-0e6431742051"}, "4c40e9f1-b374-412e-8cfb-2cbcf45a3fc0": {"doc_hash": "4993c7ee3b7600ad5df001f3afa9020498bfbbdf8ddd5df1f3bf3594eb3017f1", "ref_doc_id": "b9bc9e31-9f7e-4a56-bd55-88c69055fe10"}, "50f938d3-af54-450f-9637-2f8d1f312e44": {"doc_hash": "34dc60320fe14a1b7f306eb1b62eefcdcab3832db8b7e7caecfa62e95fd47440", "ref_doc_id": "b9bc9e31-9f7e-4a56-bd55-88c69055fe10"}, "6e64b94c-5535-4283-b0bd-d53803a872ee": {"doc_hash": "42fef6c68853ad6e727380d674b82a507ebee285c2904d950fd13d5e1528e547", "ref_doc_id": "4c890425-517c-4eb0-83a9-5e2db69a3160"}, "6a6a9b2c-66cc-4576-9899-6d8ee9edfd26": {"doc_hash": "17e96366c8e4dc17ca5eb9498c505843ded4c36730ea93da7ddbfbd33862e3b0", "ref_doc_id": "4c890425-517c-4eb0-83a9-5e2db69a3160"}, "159924f2-857e-4652-8fa4-6973e8fd4924": {"doc_hash": "53b7433c0492de0a8aaff62a4e1cca37f2dd8238ba9ed86be0e835e0409fdd11", "ref_doc_id": "96f343fa-64d2-4cd7-bbf7-5138ff8735e3"}, "dfd8398e-351e-42c2-bfc3-b2070b6bed13": {"doc_hash": "d997da4ffd413637ee7534dbebfa97f6cd232d2a7b8ff7a3505394cf63bc597e", "ref_doc_id": "96f343fa-64d2-4cd7-bbf7-5138ff8735e3"}, "02848a03-cbe6-4c82-a93f-92adb88b95ee": {"doc_hash": "a3b5ecb0379ac4185797d397de65c39273cab640d1f380c33c626e4e01830f88", "ref_doc_id": "b76148b4-466e-4f10-ade6-6f00717962a0"}, "33c3df61-4f59-46ae-9fe7-c9e754ee1c1f": {"doc_hash": "1684239aa651cd3e8ecbd58393a263e6de1a9439ef9474a98ef6753443ef8b3c", "ref_doc_id": "c510d526-7578-4814-8e65-99629c2632b3"}, "ff4ab459-e8e8-4403-b2cb-12e412c73e7f": {"doc_hash": "ef90d46b04e2d35a1b96dbe99425aa9b9a068f0a72c0cfa6f3692842c596a5a7", "ref_doc_id": "7252af03-71cb-445b-a12f-81941ccc2c7d"}, "3d663289-cd76-4c2f-894e-7ce7bcad3814": {"doc_hash": "32db890cb8478ff0a0d3f62feed059f6c02b01263f97c00ddd05b5256a51a3a0", "ref_doc_id": "9d8c9bdf-3e0d-4834-a7ca-6dabb22f2715"}, "e2eac940-7f78-4ab6-84f1-cfb3195c30a7": {"doc_hash": "9fd4e6dea9ff8a8cf3ddfdc7cc6450f688a275914409372a5dfd26d4c7539fb2", "ref_doc_id": "8c172c88-07c3-427a-892a-4dc69cfa4a29"}, "9624842b-455e-4f8a-8198-b6c152ae0d2b": {"doc_hash": "291cff35920c4cd472368764c38922a566fda348c691a93e1d3a83ccde4b21d5", "ref_doc_id": "f78a7560-5db3-4461-b997-e5c527417ea0"}, "eb4af9c9-8c74-401f-8d85-696d35fc0240": {"doc_hash": "afc17d3809630bd4d11b95c292c54f2a2e6afeb3892c905d24925c425d6704e6", "ref_doc_id": "615ab3e8-b903-42bb-a59d-7e78592f570f"}, "cf539daa-7b59-4359-a1e2-81ae861ff258": {"doc_hash": "b76d8af83dde5694692534dd93cb2ea05c24c6db0be667f7f6a5ffff67096bc7", "ref_doc_id": "acfbf467-53db-471c-aa73-d59cc3134181"}, "55b9bc34-b44b-41b3-a717-6278e74b8afa": {"doc_hash": "e6b4e0083c4e71a13b7a2882f5a11233e238be2383fe6cb3369244fca851a231", "ref_doc_id": "5bee2a00-5b50-4551-8515-9d5fcc97f77b"}, "d1bbbe75-769d-46ab-971a-11c9569d8006": {"doc_hash": "d23f2902520be88fb449b3a4109edb6e6556e61ba2a3b23aed99b49fab8ef612", "ref_doc_id": "841ba144-1b63-4a63-97c7-291112e15838"}, "c8acb57d-693b-40c3-a097-7ee54cbc0699": {"doc_hash": "653187a9b95a551529a5b2f4d21846eaaef378f16679d7755f7a54baf382cf58", "ref_doc_id": "9013ded4-1762-49d5-91bc-def0ff7b91b8"}, "81153018-bbe9-4fe9-9e8d-7ede97af1c12": {"doc_hash": "153ef80d16a2e558605f6aecd6f4edcdff4f125f6c5ffca5733f917e475dba3c", "ref_doc_id": "7e54adc4-82f0-4e84-b055-7b6590ad07f1"}, "f4b2b73f-0e55-4b42-9914-e32f2c05e3fe": {"doc_hash": "7c187315e6a1fe67fa8184487c7459318456c187b07c163ae771439e6a1c43a3", "ref_doc_id": "70a02b2c-2f95-40a6-9814-945b3b497856"}, "f043bdd6-fede-43de-93ea-f6776d296b58": {"doc_hash": "0a8e059616d9efb27661b4c5702811506450fbca13a8f53d7ca1838474c57ec8", "ref_doc_id": "757cca39-2843-4aa9-8b2f-8a7e56343981"}, "e23dae61-93fa-4911-ab19-c2f315507a83": {"doc_hash": "75f4cea1b84b454540a427c4f154d123f02350207d0870463188ead1893f624d", "ref_doc_id": "29ce5e54-1b49-481f-b099-ab1565101583"}, "801163ce-56f3-403f-9308-2e5099ed20a2": {"doc_hash": "1e54d31aff202d7f37c44d9f563c162e28c6c7706346813d0e345c0fb94081be", "ref_doc_id": "f0bf208f-0cc5-416d-94bc-73deda7c5d18"}, "946bef85-aa76-411f-8e66-fbd8dbbb471b": {"doc_hash": "4e18f3d007c359a9cc825466cf3b600df9e4af2660b34748fbdb1883bcbb697f", "ref_doc_id": "555aaf8d-7dd2-4660-a131-2482d981597c"}, "70da071e-66e1-4a22-9bfa-4065306d0594": {"doc_hash": "9ff567a7e9d35fa654589d5ad07393d99efb64e3de8cbc68b023548e92cb87ed", "ref_doc_id": "00e016b1-3502-412f-a31c-36ea933c19dc"}, "bc7df002-326f-4923-9455-4efcece03069": {"doc_hash": "7e5b86e79b85dd8571e53c3996ad5886688a4755fa750140514f2b5e8975fe2a", "ref_doc_id": "a410d1ef-137e-49ba-a134-21e8f32b4101"}, "7626abe0-0045-4d95-af6c-d9120f273884": {"doc_hash": "28e4585c1c1c8a90a54bc65041df75b20f62da86f3fff4ed4df4e4930f376c80", "ref_doc_id": "bd74f75c-42ac-43e7-9153-b5cd59b466a0"}, "205ce612-7806-4949-85c0-e82d9e046536": {"doc_hash": "43c995d0742ceaafda9e9422d75c3c03943ae214eda829b1cc6c3b61b809c5f4", "ref_doc_id": "bd74f75c-42ac-43e7-9153-b5cd59b466a0"}, "6db496ab-94a9-452b-bc77-87f8629ae4ca": {"doc_hash": "2bfa1a684e60785aacd4362e209b5bf44853ab6fc5377b7beac9ca31e8eb150f", "ref_doc_id": "925173cd-6a72-4d51-a80a-38c426f92ac5"}, "573389c0-6864-4801-80f2-30dd61d2fb35": {"doc_hash": "f92484196361ebf17e085f878fcdfd7387189f8f1377ce8dd4f94a5b2d4bdc41", "ref_doc_id": "fa980610-b366-4dd2-8d61-860580f65cbb"}, "94309242-7634-4e76-a805-ea2cc88065fb": {"doc_hash": "0fe67959b8a6dfa8811bf5d3083e528d38e62cf6daac8244d48f326e12da7809", "ref_doc_id": "0bf3d763-f4a9-42e8-98bb-7d3e504fe767"}, "c34c0811-e53a-4cf6-ad09-3800caf0e899": {"doc_hash": "9f0d1b062ff579042ceb1888663da8d94540cb43229f303766241a6adec9c558", "ref_doc_id": "9259e996-030c-4ca6-a131-b18ca820d200"}, "066132bf-9db0-46c9-ad14-48d1861acd58": {"doc_hash": "5a612874cc5c148c2447c51b01bde17e87ad86813a89e7d4d8295301f010ed86", "ref_doc_id": "c0b2e08e-e40e-47b8-b15b-85c10dc0211d"}, "56773bd7-3947-4b54-9b44-cf9d03b08ab3": {"doc_hash": "bd0340723c2641d5864d8e7a130cc99c2d07b1a200811efb363f581f0a1fe3b6", "ref_doc_id": "00450d20-07ea-455b-b9c0-d85db7d808e3"}, "c5e773b8-db00-4db0-ba6c-f63a6ddc776f": {"doc_hash": "d373c0d9984ea80c1cf27c0c2d084bc1dbe377738fc8d59c386d78ed31b7acb2", "ref_doc_id": "d6b406bb-0b26-4e97-8ac1-33b02ded7af0"}, "8b4f663b-bda3-4b81-ab80-2461f95a1b14": {"doc_hash": "69f858dd531e696802e84122137954c60a9b2f797d7c2e8d8f6404ad6b885e84", "ref_doc_id": "2b1d2c20-2915-42ea-a791-9ba602761c76"}, "7c8de1fe-92b4-4a69-9ffa-bc4f3d8c8f2d": {"doc_hash": "1853571769925108f8fba4e0dfc72f18057c40b8223192b653cf55f0e3ed6dd1", "ref_doc_id": "32581fc6-5031-4cfe-8a78-864105c29e6e"}, "76176e66-6949-4bcc-99cf-e5a676f30fb7": {"doc_hash": "56b5d1d5a0ad8989ab016c5782d35d6f1663bdb9f459b85873cd98209466bd60", "ref_doc_id": "1252c255-e0a7-4dc4-b65a-531f173fd732"}, "931626f1-e4ba-473b-9e61-1cbfe8ba8897": {"doc_hash": "43160d47feacc8b567a5c77b03a91eb9ebf88a641f51582ee40f9f9b3c65cd4a", "ref_doc_id": "4d29a8ba-c633-4948-a8dc-99efda1dee42"}, "1b6e47f9-7ba0-4c2e-9d4a-4b8ac938bc15": {"doc_hash": "ba4c044dfd42daf7ac949de98e4567f084feddaf14ef3c4d6fd2dd566859bb21", "ref_doc_id": "39e154aa-18d7-4de0-9e9e-a99fc184da55"}, "fabb0d6a-27bc-4540-940d-4c38cbe21f99": {"doc_hash": "2241637b559272367e241c92401df4f167e509d95b8956f9ffb27ca277a4689c", "ref_doc_id": "80555ce4-3299-4865-b551-050066c5ddfe"}, "60cd1c40-e76d-48ca-985f-af89d5c52fc4": {"doc_hash": "7403326c959715ed9840248c2eccf8f5002598032ded188c3329f631db0bff04", "ref_doc_id": "39c4a9a8-95d0-4361-a5c0-304bcf56c27e"}, "e4576160-8ca0-41e1-8c6d-015b0513c61f": {"doc_hash": "d770998b5ce21600c7255dea4911ea00933f91aa991381bf2e4b7787ac2ec7d6", "ref_doc_id": "4dfbcd6c-658e-4f4b-89aa-2c1c3963a6ab"}, "72a8b52f-95ef-492d-a755-bdb5f0bbbf07": {"doc_hash": "0a7601a0898c145b5a165ff8f5539959ce0947ad6953bd8ae695c53f3f7932b2", "ref_doc_id": "07360a3e-73b6-4e43-979a-6ea11a5c0fb8"}, "1e8e2820-4201-4b93-9d67-2c285f5881bc": {"doc_hash": "edd580c3b4b8d7c31ee59c97e24a2d6b6a601f5587314017bd9ade731641fbab", "ref_doc_id": "2f304f0a-82ef-4eba-8166-106770bf2177"}, "4f206be0-3614-4d76-b775-a4dc0dc2f214": {"doc_hash": "82a60e65484d41e5fa7ec608bc36572c41dea47e28fdd01f559bd85eb4a410ac", "ref_doc_id": "756378d7-9f9e-441f-a7cb-ee1cb900c4fe"}, "e0ddaa09-fe68-4ed2-a5c3-16f2ff602e66": {"doc_hash": "d85a7931af621adb145d5402b004fbb0511cfeba80a364f69030ca498a52df54", "ref_doc_id": "c3f21140-36de-43e0-9523-24caf0f2b82e"}, "2664c39d-4217-470d-a9cf-5bdae871702f": {"doc_hash": "750313f217aaf3d2dc6dacdbce5e4287061510ea5d7c7707e22fd2a5545085aa", "ref_doc_id": "e46ee009-b0f2-4804-b1b1-207e02973f78"}, "cf9c02bb-3678-439c-b88f-8a0482b0352a": {"doc_hash": "592eae0956196d57e6088626df41475a2983019977cb982dc581a1926f2ab57c", "ref_doc_id": "6883460f-9a1f-4bc6-9911-50875b9f155c"}, "28e387eb-bdf7-4f55-8f62-d3c06cde150c": {"doc_hash": "eb46ce6b14a49f723cfd48fb29ee6ccd39ca9ea7dacbf857cac266500eaab58e", "ref_doc_id": "102557bf-8bd3-4aeb-b18e-751206ed15d8"}, "e9a55d8c-ad76-4248-bf18-d6067c16afe0": {"doc_hash": "c2163b0fa62f1fd94cc1e68748cfb862e6a760249801b140302c95dc5dca6220", "ref_doc_id": "8b766d04-b8ba-4d29-afbe-333f43449b1d"}, "11ed633e-182b-4aa8-892b-a8270dc4236e": {"doc_hash": "cd882e2242e9dcfe81aa6d18b1d3a7bdb134e4db7b3ccbff9d6aa8ce69190cb0", "ref_doc_id": "8086015f-2c38-4072-9d0b-f62337ee9ec2"}, "b0aec804-a0bc-45be-b7f4-3afeccdc6cc0": {"doc_hash": "67978f958db490b4382d4f09bb0d7ee1ba8ed4d7bfed8cdc258db22857abfcfa", "ref_doc_id": "b21c07ea-0fcd-48c4-962e-e9fe9f7044d3"}, "1c1a1e2d-27bb-485e-afd6-06074eb1ebd7": {"doc_hash": "e89148de433aaa49106ac250d2f65d37e14a2f0baef34797ceb721921d9758e1", "ref_doc_id": "3915477c-6ac5-41cc-81c7-4197ad83fd6a"}, "42203a99-12e7-4a2a-8098-7b89763ddc8f": {"doc_hash": "3de2c287f28ce1846e592c72644a147ac79f0271f43503c69c6a96b2121f054d", "ref_doc_id": "ecd9da7a-e45f-4cb8-af47-9d11d576b15e"}, "d7a588d5-0968-48ec-901f-e0f8c28aeb30": {"doc_hash": "862c6f06334eac495f54d1c6636b8c84376beb84801a4fc8a40bbf687d0e0de5", "ref_doc_id": "271d8a50-f3b3-45ea-9594-3e5df3a8b9c5"}, "7fddde73-a01b-4b36-ad9c-5fc99ed5eda0": {"doc_hash": "968270dc68778999f4bd1580093e5fcc22975982757ad30085d4edcebc5a9578", "ref_doc_id": "bdc3c139-a3fc-4444-a7a4-e9cb6ae40e70"}, "ca45af5a-98eb-4aba-9f87-ad7023655325": {"doc_hash": "f20a70e118aacc9ba32bfd629f974096b1a70493598d6f8485d3473ea0d41df2", "ref_doc_id": "8d44aff4-3cd0-4558-8552-89cc1a279971"}, "3a08b14b-3bed-4a55-81f4-90f89a9b628c": {"doc_hash": "950f1e78093bfa841eac4423f18ec02754f25afdce0909de4448811b5e586bf8", "ref_doc_id": "af33463e-e5d5-4335-bc6b-5554291aeefd"}, "c248dcbd-d79e-4cd4-a253-e77ac88efd6c": {"doc_hash": "22be7c0526f8d2a0d828bdb8200ce83ecd177d7e9cfba29c7a05766a00d1789e", "ref_doc_id": "6cdd57b8-6bb8-4213-b44b-ee3397a264f2"}, "1f7afc14-290b-4a47-a565-db8c02319567": {"doc_hash": "49b1c9d7ec4713d8aa9706295345fd067ce6453502848267d81b6cc1590e0921", "ref_doc_id": "3a8a8cea-f0a8-46ac-9f8a-298934109219"}, "6492d96f-9df2-4857-b4a0-35fb9a6206c8": {"doc_hash": "bef9066b9acdab7bad946ba64a23bbbdabaee511dc605c13772ef024f572e12a", "ref_doc_id": "b73213a9-ec26-4a13-bbcd-6c8007964f6d"}, "87ff6b14-7886-4bed-b106-e2e31e8d310e": {"doc_hash": "2f6f6b0d3e4c016c1703d2f0a29517e6b5988d3be1fbfa704eb74e23cef2e18d", "ref_doc_id": "5c797949-fbb7-46f8-b494-7b339f628870"}, "6bdea580-1aa6-4ac5-8dac-a89bae79b2ab": {"doc_hash": "2c0806d7fc5f713aa778d251ab019f85ada3e915041f3264bee82347af9a08b1", "ref_doc_id": "860672a3-ed29-4d6d-b380-6d47d4ee0743"}, "c217be73-3384-4f50-8caf-2d557c781f0c": {"doc_hash": "bdd95a5d04c5f6adc1a9ce9a6bdee8ae03271dc99314d0fc2d1d1b94b8cf99ca", "ref_doc_id": "4f88a276-5e16-4909-8cd1-f8b46652fce4"}, "81b1b9ac-08f3-4cd6-9a50-d3755d0cf28d": {"doc_hash": "b86aaee2fbad47c3cade899ad431c2a4aff6fd74e0059e6ed7a58232bf34998c", "ref_doc_id": "142d9263-0961-476c-ae2b-9a4e2bb2dc3c"}, "e26cdd6e-ebad-4b16-84c9-df65bfc215db": {"doc_hash": "2bddeac61adbbb786efe6c537f706a5dbc600171402e0ac379565bb5613455fb", "ref_doc_id": "9241a3a9-15e3-47d3-bb6b-741e9893dda0"}, "53099ab1-efc6-438f-b758-4a116e6fa706": {"doc_hash": "1748c7cd7d3bf2bd5c6b2be90d923dface4fb409347db957dd8b84600da50ea0", "ref_doc_id": "97e1251b-34a7-426b-bbf1-9551549dc081"}, "9f1ba99b-c8e2-47d0-8047-f103ef2da316": {"doc_hash": "c1be9c4109ed6e22aa2d06a2710d15fee529364c3bac9e2c8da7211efdb85acd", "ref_doc_id": "3c75563e-f953-4357-a441-2b5b7962b27a"}, "c7177a3b-0dc9-4daf-a796-740bf7f4df41": {"doc_hash": "d2fa6d139eed8de6f1702998f08b225f940410ac86cd5aab9f94b78d8f4fc0c3", "ref_doc_id": "bdad3839-00cf-4aac-a5aa-ab93af062155"}, "ab4759b4-0ba3-4ae7-9808-d4e430011161": {"doc_hash": "ab6a50ff6f2a18e0305b9a56c558674fd630ab792b6755f5633b02ac0de72548", "ref_doc_id": "00c2508f-ee35-45b1-a839-4ec02bfbaf96"}, "1b63b70d-9086-405b-aff4-2db2e835f8b3": {"doc_hash": "a8537c09c250e55c5adef588236453df557f2e47289e50f63b05bafefb1f04bf", "ref_doc_id": "31c20c2c-b3ae-4da3-98c6-a1f6e749b590"}, "f5fb68d4-438b-4bb9-b2c0-8dd4318ea2e4": {"doc_hash": "e9c2926bc79d464bd48c7b0009bcc695204022ea4558c55078088f177523466d", "ref_doc_id": "e42a07c4-b200-48b1-8f99-01712363c70d"}, "5675e2a7-0401-4ff1-b387-d2aa28239ec4": {"doc_hash": "2cf8bbca5dc96234d9ef19d38417e10f6886db16a73f8dcb8ceb9cbf3072d7d0", "ref_doc_id": "d4ae5f42-48a2-4757-b646-bb08d3ad3b35"}, "6730174c-22a4-4e60-b3e3-af469dca3671": {"doc_hash": "97a6f3ebf4f6ea36c661a005454be4a076f60cf147a3235d8964e2f982d3d01a", "ref_doc_id": "e3ac1f66-e70b-455f-9c24-a6a198fb2de2"}, "3dcd88bf-5098-49f8-a1ee-f90f846b3143": {"doc_hash": "38dada005c21f53c6c94e37f012eb85364bec4eaf694098c57ef2176edd1b661", "ref_doc_id": "35a66dba-3eb9-4927-8825-65ba4e6d27af"}, "ae730666-a1e8-4393-8879-b37844af9235": {"doc_hash": "2e01a5865742c4f6002a9d71d93ca5dcb8b63520b66debaedcfcf695c9428b22", "ref_doc_id": "056f3d1a-301d-449f-8ea4-0360d291149c"}, "047d9f42-05c6-42e6-8609-bb9a46ee8cc3": {"doc_hash": "5d0c443969bc5a02ebf86fed4a73b2f1f30ae36f813a9a839589e4b09b3593d6", "ref_doc_id": "6834392b-5c75-40e4-b58e-269b7b93fa60"}, "e8077700-db3c-4162-9464-78558266484b": {"doc_hash": "45dbff76a5d716dff466299cb78be8bffd790a8e888df855e6d6754a2cec58f7", "ref_doc_id": "83da4228-4dce-4a1d-883d-6297f68edaa6"}, "6546a1ca-9f9e-4389-8bc8-6d2dc3058f9c": {"doc_hash": "d3145daf2ab539ee0f94855cca8113093421e558b7105921816cd70c10577b11", "ref_doc_id": "7af7964d-b1b5-4fec-b811-4b7b132f8632"}, "5d665c65-9223-47b0-a3e7-21d72f7de13c": {"doc_hash": "24d8c362de802653a0585055f85d312155bf0146d51607eaac47dff99a6c16e6", "ref_doc_id": "cb9e88db-e31b-4e5c-b597-2d9386ab8948"}, "9974fad6-632a-4702-a8e7-9d00bb28ab2b": {"doc_hash": "d1b4ac6121af9316dea2173daa3b93214a734bf92122b257e6897bf6105c9e33", "ref_doc_id": "d6b41a4e-5207-4721-ae6f-d4634756f902"}, "87624707-c5db-4466-a4b0-9b6964b63367": {"doc_hash": "58e7fede2b1e32a4e0fb0fb36aac2c28490738ca724f54d57e2e866a6bd70450", "ref_doc_id": "c2f1bc2a-2639-4a46-bbe8-a527f33cd31e"}, "40715346-c0ec-47ed-8b72-7cd0e7d8a36b": {"doc_hash": "0f255deec1899c5f34d46d227dc5f3453f8f090e7d81d471184deefae63455bb", "ref_doc_id": "ea304fe0-f9f0-46d2-8cd0-8720dbda2475"}, "87eacd0c-6bbc-4a47-8ad3-e92348cca0b5": {"doc_hash": "a65c6d92738135d047df6d7f3a87cafa871ecd936d209a274873c348c04ae925", "ref_doc_id": "5e18b937-0919-463f-9268-ecefdbdd7de9"}, "18486283-0720-4ea5-8e51-a6f22b19eda8": {"doc_hash": "0cdb351392bec71f7ca060856da1937120ecaf56e2c3f0f3c7b688d8004a6e2c", "ref_doc_id": "cff79bfc-3dd3-41ad-bcbb-d1a4f3f8f799"}, "8f2ca47c-6aa9-4a10-a632-8feb5283c413": {"doc_hash": "5194fc53a95d191e12ce276be74b6cea9ca06bb54f410dc9d530e2561257084e", "ref_doc_id": "589056df-d92c-424c-96b5-76b51cf44058"}, "64bd4bcc-b0b1-4518-97c6-5556ee9c3d49": {"doc_hash": "e4fb3fb8940aafefaf452d009b7b46901d8f8ae620da93a65161c12499c0b284", "ref_doc_id": "ac5442a1-fc81-4bd9-9c7f-961298b71ddf"}, "c7716f1c-bcbb-4772-86f3-63e75be09c99": {"doc_hash": "1670621cf39867bb0a71be5f12cce93d71a73dce266c2df51547e334204ad7dd", "ref_doc_id": "6fc0a76c-a8b7-4bde-8fdf-b273cc017455"}, "ec42b19e-363a-4a2d-b158-9393fb2a5fe4": {"doc_hash": "2338f071ad7e5a9e0a0ad826fe733af484be5ee7034ae481c70cdd34322b7d02", "ref_doc_id": "bbadb0a8-2c10-46d1-9f02-5f71151a0037"}, "0f8a7190-da92-4e4c-a178-eb25323718c8": {"doc_hash": "538af029f614f36ee011e3eee57edb3f06e4f6da9ad6c42befc9bdd6f6b2a8bd", "ref_doc_id": "85b79eb6-99e6-4391-b81c-e3410f859cc6"}, "1288ca81-d6ec-4e3d-80d8-8e7153eca3a2": {"doc_hash": "2caf469c90399363560480fa7a6cc948a797aa4a45fd0a700795cd47d8516248", "ref_doc_id": "33c17082-6ab8-41f4-849e-83183d8a11ca"}, "fbc8bc4a-a18b-458b-a563-748392f5ec32": {"doc_hash": "50deab9999e553fb5584a3aeb5e6ff5d290087f02235ed1e90cc93cca31345ae", "ref_doc_id": "cec05833-1ed9-497d-babb-ed403630a957"}, "86f495b0-971d-4822-adb2-91e889b41f97": {"doc_hash": "590f866ccaafa72b33a584e1818210320eb57159c5e8d51dc4b9329bdc15689d", "ref_doc_id": "df77011e-f4b4-4eb4-a35a-e225907f98c5"}, "00707807-f127-4431-9b99-2131ebe1da35": {"doc_hash": "2cf352a409bc5df3f90ed73e336f0f245761ac4bfd02af7c4f8dc2d897054174", "ref_doc_id": "72f7d677-fe91-457b-980f-934bc2a8cb45"}, "9c220ed4-020d-4f7c-bda5-d97dbc34e50e": {"doc_hash": "8597017edf4b30840e1acc783a94da7007ac5a2d326cebda74279eb15cd3cffa", "ref_doc_id": "3fd3e473-b84f-4076-b739-3f8ffc6963d7"}, "6baba10d-56b5-40bf-92d8-bd19a8f5c671": {"doc_hash": "bdc463b5b29771ff3ba975c3df33a1055ed350e978010112d06569b275aa735c", "ref_doc_id": "8cc59ff2-6369-4b3a-984f-aaea016af9d9"}, "e057b290-19ba-46e9-867f-52fb7a4cca81": {"doc_hash": "8515b26a061633324055c9f6d800ca40794e18fa3ea8749e14cb43dd475456b6", "ref_doc_id": "359ff8ac-6fae-4c76-912b-bdd912750737"}, "2bf9fa07-6765-4e00-b376-1e54e56cb7ab": {"doc_hash": "f36a399863f44929cc5eda562bab0adce8a887e365a062a81ea676959e0083ab", "ref_doc_id": "f9d016ee-9a41-4742-84e5-c6a10fa19ec3"}, "cdfd755a-ff77-4825-9925-c582ff2b3881": {"doc_hash": "1a0a4fe183738b7698a01995bb315e4a60d7d3e9f5e85d24e74242ccdddf56bb", "ref_doc_id": "cfb2352a-270e-4dd1-89b2-a8ec184de755"}, "7c7bbf2d-ab4b-49ee-9ca6-de37e23ad015": {"doc_hash": "32908395db9d8f956205f2fd1e8781b3976935c1ca5b51aa6974cf8fd02a7eb6", "ref_doc_id": "88123956-0e14-4cb7-875d-3fef4af7b697"}, "47b8118c-ce0e-4d1f-9367-840af591d180": {"doc_hash": "f410c570651beff77684a0a03630f731f9ac07d782d91dd058e22afedf46efe5", "ref_doc_id": "5010012e-a9aa-49a2-bd31-9350c40eaa89"}, "7ffcecfa-9f95-43c6-9dfd-d9065b8eb1f5": {"doc_hash": "81b245f1354206bc86a5976e73fde136dc13cb79ef887022234fb29c9cfcaaa9", "ref_doc_id": "f5f8b438-8bdc-4a6f-9f60-707b17319f44"}, "09627079-fc92-42bc-a1bc-80e0ab5bde7d": {"doc_hash": "40b3c8ca371b54d44ca2ad5f54f96778c57be9971314301062481c866b9ed12e", "ref_doc_id": "50eaf83c-d976-49c7-a15d-9674eeaa545c"}, "2ff9ed9e-2a15-4e79-95c8-9537e945902d": {"doc_hash": "c12d9444ab4565a31d45be000904e2df3ff8f68b3cb271854f775b3601ba5b11", "ref_doc_id": "f4665b9c-6e30-434d-9005-98bfd950cb72"}, "bedb67a3-9b34-478b-8f85-d9793f037847": {"doc_hash": "8f81de043a798cfc258722a78c8280fb6c338e59b76f33399ab8e36977efb818", "ref_doc_id": "21f2a275-19eb-4b46-87a0-8b7b7a7b3d32"}, "83eafccf-0e65-4fb4-8bfd-f5ed96d5a101": {"doc_hash": "2a3f45f2494fceb53ab7943cfae1a3a20f18ef703b4d6029cf2d001cc4cdd463", "ref_doc_id": "9c3cc192-dea5-4708-b5b7-e98d3f9efb0a"}, "b6fcf6a7-6f0d-4065-87d4-14e8401eee14": {"doc_hash": "b4dd57b66d4b7b2a386204a9e220d234d3817fd20026296382d2c13f6f6612d2", "ref_doc_id": "f6b62b09-70dd-4c8a-b4fe-47f9e8798be4"}, "d913c455-ffa3-4452-82ae-54a4dbaa0508": {"doc_hash": "56400812097f5108fb14afbaa3689b94c282134d6274b23c08486e14c49a17ad", "ref_doc_id": "8f899831-3f9b-4ff8-b1e8-2772168585be"}, "c05b30d1-f014-4766-91aa-821cff38374a": {"doc_hash": "fc88f261a542a7af95c241e6f179a1b9d3b1016034e577cd37a16e5a5f89663d", "ref_doc_id": "6c006eef-31f5-4238-b302-5c53f1bc587b"}, "504dc761-e37b-4ec6-af67-2aedc85a98ce": {"doc_hash": "a83a6fb1e986ab8b2fb2d993de20259fcb82608d20b9e75dfabe80671e8de102", "ref_doc_id": "ef2599b8-5677-4da7-9950-f455a4cdf942"}, "ba962a80-6c2b-4015-a061-4b802e8b9d97": {"doc_hash": "09606c810535f7a434c2339ed82922707bef233439053335d7bc92ed1c2b4f32", "ref_doc_id": "b7d84534-175c-4364-a5a4-e962c42a5b1f"}, "7b4c2280-03bf-4d2f-9349-2c4ad8ad9110": {"doc_hash": "2bbcae0692cd45645024bede0fc11db7fc3e7f5c430f571d6a1fee7f672f6a8e", "ref_doc_id": "8d0a0166-8433-458a-8e8f-0289febbc65d"}, "dd88af43-1576-44b1-85dd-d1a72dc4bcb6": {"doc_hash": "afed42a958473c9a0d460a180c3a9d184857f92775af3a58769dda1ac4babff1", "ref_doc_id": "2201cc99-1fcb-4bde-a567-6d9af358b36c"}, "6796092f-470c-4dbc-9895-b86fb7164163": {"doc_hash": "a2f9a07023d381fc7ecaadf45fe53957044f79dc141a3bd75f78aecca3b8dc84", "ref_doc_id": "c367bc5f-a3f3-4c29-b135-8613ae39c7c5"}, "b201c8e3-b0dd-4c80-98a7-b393554a5e79": {"doc_hash": "465ecadee63ee6b64eb67008c6511f8a450dc523b696640f8474513a3084a284", "ref_doc_id": "3a36a136-4d87-4147-a7ad-dfe7f90d0bf7"}, "324bbf06-5e93-474a-a90f-c32d31e2d86a": {"doc_hash": "8f6dda95ad9a2bd47f9075267ae2e66c3b9079d088e345413370860a8ac59e8a", "ref_doc_id": "d8de9593-d5c6-41d2-af3e-f22c7c978418"}, "f8aefc65-20cf-4cfd-a6c6-ae9d00767249": {"doc_hash": "ec730b128f0ced3b8685a821a922395c94a43d37abe794fe51630bb6c7d46ea7", "ref_doc_id": "c19d391e-83ae-44a7-ba89-c7bf2d187c54"}, "3081e825-1471-4583-a136-4144e3b11824": {"doc_hash": "9cea56b595e9b839086786598aca12e534d189c74b262c202b5570ef16d92c42", "ref_doc_id": "b4878e10-eff6-44f7-8a28-8766defd733b"}, "ee97de96-831c-47b2-9b50-b92b8d342445": {"doc_hash": "0fa9f4da43bbfabf8fa3cdab57502e1889576aae22836ce420c1da917650437a", "ref_doc_id": "8267fa54-4104-47f9-94b1-3d80da08a9fb"}, "0564d3d4-c4b9-4cb2-ba84-6e78e3d9f694": {"doc_hash": "d0b2f04851e616802d1c48459bb223a0586e072034b593fc13843c56a9e3d72c", "ref_doc_id": "c56d22c3-8862-433f-9507-205e142fc1fa"}, "e289a735-d3f5-4fc5-b311-8a257c55bc57": {"doc_hash": "9445c635b68ef7aa33e07aa4cda1347d4f48b7bb841a651abab6fcc88c93a56e", "ref_doc_id": "76efc881-c6d8-40d2-bbd7-7aace2a13feb"}, "38ca2573-81c1-499f-8dd9-3e60ed589694": {"doc_hash": "21ce13c1c862b4c9248e983004a2f25beb72730b01b7c5a5748ee739fdca653c", "ref_doc_id": "3ea888d9-3145-44df-a967-c9d47f666c0c"}, "900e1a03-ecb6-43af-9da7-8af3b3ba0782": {"doc_hash": "f29cc2b6f05ac9219cba45758b756e6f3f19ace02fc80f7349366fde282b1f3d", "ref_doc_id": "0a4d7506-3ae4-4299-902e-fc5f38504598"}, "32c0ff5c-54d9-4a3a-bfb3-62b0c275ddfc": {"doc_hash": "fa0614709c26fb4662e75fe2f60ca3f4f5338a903cb3dab6afa0c2e844b3f400", "ref_doc_id": "109ff47f-f8f6-4ebf-9c5b-c422dc318065"}, "876a8aad-2a06-4f1d-ac79-b4eefb1f11cf": {"doc_hash": "5d7b1b55195eaa25c1b489eb5cba6ed79ce7fc0dfabbb7016c973a2fe24e08c2", "ref_doc_id": "fafaef31-8dcc-4f38-8090-6543e9d72eda"}, "5c7fcc58-ca54-4f17-aaf1-8187dc59a99b": {"doc_hash": "da2ffa3df06011b26bff1f6c8e5c5341bbc50ab6e8ac57365613f79d1f813cc7", "ref_doc_id": "2fca2bae-d674-43b1-9d71-382139fa5bf8"}, "81b5b975-83a6-4cc7-9e26-991e10f84e8c": {"doc_hash": "a2f2cb113ef453b19ae142a0b0ed41476d2234b478f92e8288597349e10cdf38", "ref_doc_id": "41e48f12-422d-4dae-956e-78b97a5071c4"}, "cd6fd487-ab62-456b-8fb9-3cd3716d97c2": {"doc_hash": "29dad83552fc42307d3b35ef365bdb92af989236134eba35bdd557038b3c2a4e", "ref_doc_id": "6478bf36-7600-488b-aab7-104d3b20fc80"}, "256d3256-c40e-422f-a39b-0630a2ad605e": {"doc_hash": "929a5494a6c0611a6f3d20f462ac0b5bccc6a6d4e3e5e4ed183ad446068294a1", "ref_doc_id": "ba8104a8-baa0-498f-88c5-98463eb849f8"}, "05e10e3c-0342-443e-a92c-1460be9d1a65": {"doc_hash": "9acdcce01b110e1723808d5fc456107b3555b975c82a5dbc18612257dd84e4b5", "ref_doc_id": "37038ff9-4ab5-47d5-825a-bb7237317e3b"}, "d02f51b9-d4b1-48b9-8165-6a0efd9f6f04": {"doc_hash": "0e5e1afd790f0b578ecb5f49f11998d818f447d3be6bc9899d80dbc5ffe5f7b8", "ref_doc_id": "19cf202e-a5c5-4ec9-804c-a344381e9e69"}, "035013fd-e35a-4303-88bf-b5ca79b6d988": {"doc_hash": "8fa98102064a8eb67d8fa20de054990f5d7909e9b0fdd5e31796aa7a535a66f2", "ref_doc_id": "19cf202e-a5c5-4ec9-804c-a344381e9e69"}, "4542dad7-b855-4649-80f1-6aa1a9000c24": {"doc_hash": "bf6dd91520b93a96a50ea6762335a263ba4179168136ab782d380f3ad0cb42b1", "ref_doc_id": "19cf202e-a5c5-4ec9-804c-a344381e9e69"}, "150a5ce4-6056-478e-8007-d41206454eec": {"doc_hash": "fc426ed695d3cb39583d5871a884aa20887bd156c9b14d2e8cab866f70b66241", "ref_doc_id": "19cf202e-a5c5-4ec9-804c-a344381e9e69"}, "a98f8dfb-90cd-4347-8a6d-d8f464a1c344": {"doc_hash": "ef891e03d2f2330b398198b1d9976e6780d33b1818d7d0e5d491ea0041fe9915", "ref_doc_id": "1e88bc9e-9a25-41a2-8e94-bd8eafd07eeb"}, "6da1aa32-f1fa-40c4-a070-acaa7212cd6f": {"doc_hash": "e1e5c3dc40e3cdf6d6da333d63953ae0574aca91c4daa67b610957c4f8ac9a83", "ref_doc_id": "af4afbb4-ec4c-4a14-97e1-776741a2c7a3"}, "e77d1cca-0ebb-4964-943a-eb4e919f9ee4": {"doc_hash": "a5b2f8ed1475107dbf221fb414ee7e5f2b98beaa4d81939a8352389aeb13fcf7", "ref_doc_id": "c7727236-55ce-4558-8bae-3920f124ce84"}, "9c0851cd-9f47-4da0-b4ff-2f2ee05b279a": {"doc_hash": "6b33e9e8a13d640ece5b3a2f1099e0ee370d7de5b0a210cf8523aff5d334199b", "ref_doc_id": "f2fadc58-4132-4a25-a79a-b79546430c41"}, "6264326f-279d-4707-a258-4c8ee330015a": {"doc_hash": "94acaab1de39be104ce936f7c456e77aa15158aee0a8174d4c9e10f0db93589f", "ref_doc_id": "b075cc6e-8044-46b2-8e7f-c27476c8cf77"}, "2fa82fb9-dcc2-4961-8dc0-e205f9e2e761": {"doc_hash": "dcc27186164dc8e7b8ed2a9cb2252e7d2ae44b92a7305ccb33c0211cf584ba3b", "ref_doc_id": "5d2417eb-a7d3-48df-b9f4-fb836ccb48dd"}, "8c9aa747-c4f4-40dc-bc83-c85ff30c58e1": {"doc_hash": "47272a28df3ac4a059e88ada05979f76467bb0fc67ce646f8dda54a55cb9daae", "ref_doc_id": "b1f958b8-d035-4618-8ce9-3293d6112ce8"}, "f7c0cbe9-aa63-4ab1-af1b-6ad372cc8412": {"doc_hash": "ca31dbcdf911683736a73ffd2f29ea4dc97691fd472f46fe93ec1d863fc3895f", "ref_doc_id": "8f0a029c-57fb-4c5d-8c22-1846db6899f7"}, "be642e0b-74d7-4566-ae3c-e3ea14b350b9": {"doc_hash": "0679758cd15867c3e904b2432ce8e8d3128ae53e26c8882ee52d9c66405a5fa2", "ref_doc_id": "69432ac8-c783-4a26-a4b9-11b9c9b9f1f6"}, "4e99ac59-1a1a-4f23-b9e2-7fdea21866b0": {"doc_hash": "c38dedf2e6b052cc7cd5c4bc75b00061d231b63a669dc669f4bf4176cc220e7d", "ref_doc_id": "02d5e802-ecb1-4d05-8270-2d64e77865fa"}, "5102c13a-0c74-4314-bbab-d2a99a072cf0": {"doc_hash": "707f673ec45dcd99835167c3ecc86a7118199a23cd2bad06a59d90306ae87bcd", "ref_doc_id": "3cd94c3d-0b8a-48dc-b4e3-53aee374b85d"}, "a87e24ba-999b-443f-8cfc-0208953b4b8d": {"doc_hash": "f59883f223a093f3d6cdf3e796b1d1c539a12c558cbc3b89c070ec8d8fb00375", "ref_doc_id": "e708c6a5-3510-4cb9-8afd-3410bb7e11f3"}, "8d71508f-fba5-4733-9b3f-8ecbc0f7f8e9": {"doc_hash": "c93ad020954cfcf28e5000410d188728b892ec51d2d8e411c0416027c74b1b4c", "ref_doc_id": "e68f92d7-7b5d-4b98-bd89-75eaf8ed455b"}, "b8d7b298-1b37-455d-b85c-90c2ecbe04b4": {"doc_hash": "5414266a4d45559a4dce75bd70d89f622280ddc59effe1be091c0352f2415d9f", "ref_doc_id": "3922944f-f77d-4ed1-9bab-28556bdbcec7"}, "5b8d9ee0-6ff1-4796-b305-e48a4a7027e3": {"doc_hash": "1ed0e038b27a9a9d45ea456d04839292c8fe319f9a290757cc4dcd50e2885906", "ref_doc_id": "6cb2ceea-79c7-47a5-a841-928a26acae7b"}, "9bc637df-c1dd-4b92-b27f-9d94b0292f53": {"doc_hash": "0ae18d4ccf7b2f47504f31e436866e2d3f787d9c44cdd0f672b665c4d272768d", "ref_doc_id": "6cb2ceea-79c7-47a5-a841-928a26acae7b"}, "874a7378-5f85-4372-9507-e47579495f79": {"doc_hash": "abba31ff3c3a0d25566b68395c7e1a2639e55204a688077da46bf18eb91e456f", "ref_doc_id": "b775bcce-c4b6-4f21-8615-a766da41dc10"}, "8bd65673-c377-4aeb-a465-9f4a6ae089ce": {"doc_hash": "eeb0c850ba3772a083978e91173bb4df9603e2056dc4dc50a191dd58baf6ee22", "ref_doc_id": "8cbb0c5b-bdf1-438c-8a61-8992fbed1bb0"}, "7203dd1e-42fb-4df3-a675-18675737496a": {"doc_hash": "96435bf7309bac094828020ba2daab219302113613d8e291502ba57982678e0e", "ref_doc_id": "a8aca62a-22b6-4267-960c-77ea9f8d1ebf"}, "9f33e847-510e-4375-9ce4-42e00ef37a0f": {"doc_hash": "07b0993c9dd1278ddc8bce4c84f9eb1286add0f752eeae609b8c277dc39c20c1", "ref_doc_id": "72438f1d-ab2b-4210-9852-07a084641bc2"}, "c9909dd0-8e0a-42af-8689-14ac3849e509": {"doc_hash": "b54be9270d03df42cf50574d09238e2796d8edaa301fe31bc8c4056b8a46bb63", "ref_doc_id": "a7ab99e2-013f-4291-8e9d-863e998ef394"}, "14a59bd9-507f-4ff6-9e1e-b411c5376979": {"doc_hash": "df4be9625e9fa87e89d23f93990f992b117682b7d285cbc194fee4a1586d8e01", "ref_doc_id": "3545eac7-5985-4e77-b3cb-4d4a566125bb"}, "dc324ef6-2901-4fa7-b820-065cc8a05d09": {"doc_hash": "5beddf7439a92a21c1cf695f0862678ce23b7ced58870cdbde6a001eff5c97fd", "ref_doc_id": "dff01cf3-8cc5-4d43-8397-8d77d2b43dff"}, "74501c2e-f208-4e17-8f61-ac8a602897c4": {"doc_hash": "0afca8d828af50a0cde876517bced2c5dada491f542bddca871d015c27d89853", "ref_doc_id": "92dbeddf-2a67-455a-8d08-4c6482a536c8"}, "6ea0ce86-dda2-472e-8335-d73645ccb207": {"doc_hash": "dcfc098823bc7787c059d98165d74430d6266e860d227dfa168efbf51e7ca2ad", "ref_doc_id": "df596790-5f64-4bc3-bc66-5b59e5b57f36"}, "e8a25bb1-5985-44e2-bea1-742cbbcbc8ac": {"doc_hash": "bf28c8f092c526d87fdaa785fefb670177e81f7ebb90279dfd406e6224f79035", "ref_doc_id": "a6a336e4-38bb-4156-b50f-269ecd3684c8"}, "97e81054-fd7b-45df-b787-6b6b1ad3de3c": {"doc_hash": "860edc8b260c610cf13129670739e7ece45e067b635b5b94d331c23bec85eacb", "ref_doc_id": "af7e00e5-f4c4-4de9-945b-358321c8d9d7"}, "12da7664-9c58-4457-ae58-ebfb0f3221a6": {"doc_hash": "1a52337e10a9748e40a55f20bd18387b0c5978a235eca22260c89e3c0e97530a", "ref_doc_id": "7c948eca-b46a-43f0-8a25-01ea1d288181"}, "9228d037-b2a5-41b3-ba44-8e115911b245": {"doc_hash": "5dd824661918435b646cc8af997a128f6f0b85b0489629af4f99642c263dbf7f", "ref_doc_id": "0736bf66-77dc-421d-81d2-fc655c9cdc10"}, "6b8d047e-57ad-4fad-b1ab-558ea31b3cfc": {"doc_hash": "417bd5cbac4342d4f3bc8059639691aefcd8ed5af47f0f9ec4cf5d9ce5750a1f", "ref_doc_id": "ef104253-682b-4cbc-9405-e9d34b30fea7"}, "1b16d8d7-437c-40a0-b93a-32cff5825bc4": {"doc_hash": "259911c9efe96b3ad9b28890840f059c3a8fa589f133defc4377e74123de939b", "ref_doc_id": "298d4e20-cd91-4e1b-a490-5357ca3a607e"}, "05bdd403-a9e9-4924-9326-b04d96d06db2": {"doc_hash": "4c293f8d40d6a3cbd1a2676a15ffa97d79744fcd1f5d3bc24c7056ab8c3d7a3c", "ref_doc_id": "3db04443-0ee6-43c5-99d6-fc37906ba0c8"}, "845b4678-69b8-44fa-a688-2394a30443d7": {"doc_hash": "5eb6f3cd6e4768bceef6fc0bd59da791b9debb7bc7105b89049d3bd8071faf35", "ref_doc_id": "3a9a8396-efe5-46eb-aee0-9db9ddf0211e"}, "1d970844-cac3-4ae6-a393-0dbc9e4df30d": {"doc_hash": "f5577389e0d25640546e333509278eacf89b7b09c23c7e5a9c2514eeeaf44ee1", "ref_doc_id": "da969fee-0714-40c2-b052-5b2c03eb16e8"}, "143fcc3e-22c9-4681-9110-0bb4e0401eca": {"doc_hash": "844517e404463e5b5e6d0036baebd871772b2b280c2d45d82a5441fac9678cfa", "ref_doc_id": "a3af2d2c-06b0-4aac-b00e-69a9a364e634"}, "2469ffd3-2b84-4d70-9f25-561381c9bdfd": {"doc_hash": "0d1c1f83c9ed3db507b3f2c7c4b639d3fb8decbdd48fd9fa012d9fa1953e0972", "ref_doc_id": "7da86549-b44d-4fa8-a839-a05f386c1bdd"}, "814b4227-38b5-44d8-af65-a093722e47d6": {"doc_hash": "545d8b4e75fd3a5334f44b2acd0cf4558dd3ee278885bd975d0330e647d3b0a3", "ref_doc_id": "f1096ec1-afdf-454d-9409-e13663bad36f"}, "55832ec6-828f-41a6-ba7a-1bd9260f1036": {"doc_hash": "4170e1975550672dd599d22b8c21d02a00ad8c7baa95af4428bc26ff9a4f2007", "ref_doc_id": "bcb2cab2-35b6-4f56-9d82-e5a8dfd69659"}, "4ff0195d-d70d-4271-996c-d81fd73e71bc": {"doc_hash": "5f789e39db56376b2288c22218bace70fb6f484365ba5cc24823fac55adc7eac", "ref_doc_id": "6a284268-e699-4a4e-8f55-1484f5ddfc55"}, "7866f26a-a9cd-4e31-8070-87f58a638f42": {"doc_hash": "c12d9444ab4565a31d45be000904e2df3ff8f68b3cb271854f775b3601ba5b11", "ref_doc_id": "25e9adf3-70df-4497-88de-f80fe85af8ac"}, "f1f35b64-99f8-4245-90eb-9e6c04312280": {"doc_hash": "1b607ae0c4e6f63c95c313b29eda5ba4f8675e02fa14ac7126ae9a278a6a5ecf", "ref_doc_id": "8be7d32e-7982-4348-ac05-7145c544d8fd"}, "b1af77dd-091a-4cc7-8c23-1a53382eb4dc": {"doc_hash": "ae27457b159b2d845cd2089af9134e2b6489f2eb512e9bf03f26f1de3750b1dd", "ref_doc_id": "8d121a9f-8fd7-4447-86f2-5a84baa36dc6"}, "8319827f-1512-4de5-ad27-645ff3500380": {"doc_hash": "166fd82d2a5d46279071754fbe6fd595aac76f7df37f40bf444545d8539b1b2b", "ref_doc_id": "1fc0df79-09fa-4cfa-bdd5-68cc605a48fb"}, "8115c30b-f849-4dfe-8492-746395b5328a": {"doc_hash": "91c36f6012a5c29dd174a82217cda2335914fdd8d25e9df16708b3fcb2f3000f", "ref_doc_id": "c79e4fc0-e973-404a-9865-c0eb9ba16eaf"}, "d6f98d06-dfa0-445a-8fde-60215206b3df": {"doc_hash": "861e0692ddccb9811d42b553961c1c7a4f6bb612cc8db31cffd8fd809294d556", "ref_doc_id": "3b921320-a539-4d56-bca8-74cf02c53be1"}, "979dc5fa-8498-4339-92c9-faa9b44d3788": {"doc_hash": "0e4f27882a48357dfd5e236c8c5bf76ea2851ff8328612057168c0ead2da121f", "ref_doc_id": "81b8d09a-0073-429e-b9bd-c2cef1e257e2"}, "456efb2f-eebb-4995-8f72-65d9d9eff97d": {"doc_hash": "9a2b7065476fcc8163aca03cd646e94538b8753017557a4db276bc06451c868f", "ref_doc_id": "65b0dd20-9ba1-47f7-8375-cc009fd7b9d3"}, "53e860cb-fd2f-430c-8813-5cc6cf392e34": {"doc_hash": "9420966b5cf9c3dc5b01367d9ad0c70e8fae39198c1555ef342838c51df6ebff", "ref_doc_id": "50a21d5b-cedb-4f6c-91b3-c942dc41a4a9"}, "291fcfe5-af67-48c0-8ab2-ae0614215d8c": {"doc_hash": "6162bd313d56e223646bad711c2d4568557b8c431a346b24d0752bf44f224858", "ref_doc_id": "ed9c2ae2-a9b8-471f-8137-2a1141f1cb3f"}, "7b345901-4f84-4d86-a16d-772a41bf414a": {"doc_hash": "abba31ff3c3a0d25566b68395c7e1a2639e55204a688077da46bf18eb91e456f", "ref_doc_id": "ba3817c7-060e-4112-afad-08241a21b540"}, "24db875a-ade1-47b3-881a-3d2a9ff0192b": {"doc_hash": "62903aa6ccce1fe8cf0a7f09ad38065b3cb62954daff4ac4e35a53876029c99b", "ref_doc_id": "16ca91ca-62ca-460b-9d6e-bea3a4c5365c"}, "aafc60bf-1628-4578-9fc3-fbc41fa6ca2c": {"doc_hash": "1787a3ed92cadc5627225b46a577fd81f2d1ea851e8669b4484a5e46855f6926", "ref_doc_id": "f102f3d4-3290-4458-8e8f-d40ea30f3252"}, "b888b850-dabe-41cb-b19a-347faf22dcc8": {"doc_hash": "c0e3ed07bdc0e7fbcc578e749144f818eade8cabf26381d1ab65ab26a6acbacc", "ref_doc_id": "a41e716f-6cad-4634-bb9f-0fb8a261743c"}, "2a7679b4-2e6a-4a77-9690-934ceb036135": {"doc_hash": "29e8720c781fb2410a7010dbec2599fd4c8da4fe54f135983652d287aa1c52c2", "ref_doc_id": "db49c8b2-9312-4063-afb3-4c8269b14b31"}, "b45ea252-1380-46e3-8031-a08ffee33d66": {"doc_hash": "0bbce3d18691150cd2ebd70a2b31c1748be3bf406f198fc72f2d7c693da08a98", "ref_doc_id": "04ce8def-87fa-4f79-8544-0926d67d5870"}, "00c05512-3063-4296-ac94-f4a6556718a4": {"doc_hash": "b4b7156ed39d161223a8d24deee96786c840f244f8bf42811a3449d00fec423e", "ref_doc_id": "50d566b9-ea78-433d-94d4-9735c1fea515"}, "a205db22-a30b-4b00-839e-e5f1f28b8e42": {"doc_hash": "3d53656d571f44c589c88a0b5a99e967f2e9704231458871f50cb060a123b207", "ref_doc_id": "d8f4db3e-05a8-46e3-b2b9-dcbe62e265ce"}, "359bc7e1-c368-4ac0-a510-b9bc3d0dc4d1": {"doc_hash": "0b877b1bc8ffc3527af0f6f4775d178d20fc7224b0fe389004651abe80653f18", "ref_doc_id": "4f7111d0-ef37-4df3-b8d9-82e8a971e408"}, "c48442e6-7ddd-43e6-a695-bca2be191a0e": {"doc_hash": "2eaed2e068f5c089b3d72a40ddf431ecbb47929e0c0578009f8290abb3c967c4", "ref_doc_id": "58c35991-7b06-4566-8f52-2106b0c0a7f0"}, "73ebb19f-02ae-4215-91ab-55cad4256c7d": {"doc_hash": "336dd03e5399225db3874d67bdc8a8cd0cbe645679a0bd2199c22c4b25a31430", "ref_doc_id": "501ea9ec-9900-47f3-843c-2258807b4558"}, "ebb61b8b-c6ab-4f90-bd0f-3e790d349b0b": {"doc_hash": "a754a51fe724e9d8e8cc3fa6dfb6cd334b02ad5b8ccc486210c3f67f290f0460", "ref_doc_id": "585619e0-a7c8-4b30-b022-a0b0c48dff01"}, "bd5fdac4-3a89-4b92-b7ae-037d10197f44": {"doc_hash": "c25d09420a033c88423b1e4896fc5099bab4b26506f77af06b43ec6f800070db", "ref_doc_id": "17fb7561-8789-4797-88fa-cdd7f993897e"}, "4e8d6785-f25e-4e77-91cc-9753a87dacc8": {"doc_hash": "ba178f00c21959d70b1e8a024104c561d4f3885c554c67796e9b2b2bf42ccb3a", "ref_doc_id": "79402688-9c9f-4789-a9bf-5b91203e8cfe"}, "cc55e1e1-ed2d-4fad-8b87-6b12a5600d0f": {"doc_hash": "4b98122f30936f82ecca459fe2b5706b108f90143edf773a84b4ad82887e30e4", "ref_doc_id": "7a2781af-9f18-44d0-a9c7-5d77b171d346"}, "f0da0a60-da81-46dc-b07a-bf2bcca188f5": {"doc_hash": "9e99ade08a27dd54e692419eaff7ba12cc856e72be6b02daa5badb7cc4f179cb", "ref_doc_id": "71746638-73df-42d3-bddf-868718d83a84"}, "5b591a44-78a0-4cf5-aa5a-017b321d55da": {"doc_hash": "df8dc49a016debe4111c3464c0eb025e94bfada174fd9d94618e2a21fcf7f045", "ref_doc_id": "b47cc354-d05d-4764-9aa4-966d1c68f1b8"}, "040d8fd2-759c-44f9-afe2-7d74802759e2": {"doc_hash": "60f8e99434e25d4e2c1aa7f22cc80a252bd352e9a90e928a38b6dd39adfa29c0", "ref_doc_id": "b47cc354-d05d-4764-9aa4-966d1c68f1b8"}, "69b9e15b-4f34-40b3-b2bd-9f26032ad67a": {"doc_hash": "a59cb3d2fbfc690346fa128dcaf3a74ea5a4221ff2374af36777cdec88cfba15", "ref_doc_id": "c26f8528-d784-4716-9157-2ac564ab3f68"}, "f5249563-ff07-4f3c-944e-64f1145d5801": {"doc_hash": "e1bc5148a57162f77a9594199bf4a7d363ef5a22122d8c0e499f624ed3cd0190", "ref_doc_id": "c26f8528-d784-4716-9157-2ac564ab3f68"}, "fbf42b81-aa4c-4965-9456-8475b073a225": {"doc_hash": "128c99e7897463cca5a745620d6f4b8f55df146070c46f670f1d0ab3c38c29c5", "ref_doc_id": "1da5111e-fa03-4c85-bb34-ca61e862500b"}, "19f2a03d-a54b-4941-ab45-bd1dce31b35e": {"doc_hash": "4f27c2f48044176b514982d22b94af78e2c87274b87a083535b4b519c0fbcf6d", "ref_doc_id": "cea92d82-b95c-4e0b-8ad2-b36ce8e4445b"}, "85c6c288-a334-494f-9d31-04893cf5f8d7": {"doc_hash": "5bdf757e3ac81a53417b21a701dac0a42de01dbd33050081a28cdfe91c909505", "ref_doc_id": "c0373184-b4a5-49b4-a780-f6174b48448a"}, "c1f45f79-49be-42eb-b8ae-fea7e01f17fc": {"doc_hash": "76341c9e97dbeed2fbe0e3fa446310467a1cb8cd61dae162bef0c00b278c9f97", "ref_doc_id": "f3786976-cf69-4179-81eb-9cfb59da5246"}, "e3aaa1f3-0aa0-4438-b28b-c4a05701f674": {"doc_hash": "ddd9658e6a2f585f384ba08c68fe38ca83a4ce656fb19e218ba5d4defa93cd7e", "ref_doc_id": "7ef81e8f-e17c-449f-8d45-058bfdaf7b98"}, "2cee5a43-8843-4b71-a7a0-c94d5636ff6b": {"doc_hash": "fde96a08507749c1606d9620344510b494817b9e9a469ff5c6746ff1ede1c662", "ref_doc_id": "d94921ae-3fa6-4e90-b875-066dd3aa4641"}, "3898940d-741f-4c2a-bbdb-2539f7523e80": {"doc_hash": "99a998996f1676478eccf236e61fb73961b7fb12c8f75eb7ff7a4ad6dc19b0fe", "ref_doc_id": "17ecf579-a533-4c9a-8ce7-6c2498102b76"}, "8ffb8816-f9f5-45c3-86d1-02f8de2f6342": {"doc_hash": "ea09bd3ac604d60161d7fc84308b406719b90377e56d171662da5efea4f62017", "ref_doc_id": "e78a337b-e8ed-4ea5-84e3-c6eaded79cb6"}, "da64bfa2-c9bb-4bfc-b266-1b17f1b1dbcc": {"doc_hash": "1cebc2d4f13fc888f5e9de13480f4dc4280a057b5f17bf9adff49e2643f323d1", "ref_doc_id": "312feb7a-b11c-4749-9151-3d6813321e91"}, "989b9e06-76b3-40fe-b020-5a68311df825": {"doc_hash": "f8a3461f99ab22b84e0845ec8457c0e189c14709018d9a9794c2aed318b39c58", "ref_doc_id": "a865d300-edcd-4f5e-b0e2-79c886a203bd"}, "628cb332-f563-4620-902b-4fee9465c0a5": {"doc_hash": "788e317255db7e53469b288dbaa8647d736fcb6c4f2a82633af930c3d0527981", "ref_doc_id": "78f6e9f2-7fb5-474d-a1b2-23ef03347e35"}, "2cc8224d-d522-4ae1-82d2-61b51be6776b": {"doc_hash": "74cd4cf71daceb314951057e17354738cefeca06f7a0c910fbbd0f6ee7adccd5", "ref_doc_id": "c7c18e67-b3d5-4cfa-9498-38e42a09e341"}, "6895aac4-b5c7-4e44-ad89-062a95637f16": {"doc_hash": "10f1a5a4ee25dea3f9e44bdcbb40084292af94be294539410fcac2dd3f13c0a7", "ref_doc_id": "0b9798df-553b-444d-baf7-48f84f4dd84c"}, "1f056ba7-2a2d-4a5e-b805-b1232878f4e0": {"doc_hash": "23f8f077f4486efc282dc6b38b1fac7a17b65fd06d8df4a20fa4a00b1e44aeeb", "ref_doc_id": "06786b1f-481c-46c8-b316-2803cc49276b"}, "204c9bb0-1ab8-48bc-82ff-61a80a786d98": {"doc_hash": "1d6fea739d016e94e8cbccaad876db4ff515f395efe5ff53a389fc3684604ac9", "ref_doc_id": "1ab6409e-a25f-4115-900e-e32d9761c9d0"}, "e9dc2d29-a9da-4862-8452-a5d2e8b580f4": {"doc_hash": "168b786e7d5825178cdcd7a39b1daea0a535db00ff67cdfa9464916aeb3b40f7", "ref_doc_id": "56ff04f7-2551-4b24-8211-c76e77faca1d"}, "902a5f04-5cbd-491d-a242-2896c68db5bc": {"doc_hash": "96e8cad8f366ecf486664bc0c52678ee4212a4f3e8ea3a635214a2054b4dab88", "ref_doc_id": "57a9f559-274e-4844-92c9-18b688d1fc3a"}, "e8dda79b-10d8-4aa2-9a50-8cdcb795bee4": {"doc_hash": "20fe1656e042195d8faf67498c5546bcce4fe4e1098a72512a47cfbc4cfb5d66", "ref_doc_id": "8fd60477-d022-4966-bdee-cb993a91fbd6"}, "ba90eae0-2021-48fa-93a9-58f1d221b780": {"doc_hash": "3e1742b76c8ddf41754e0c429a2c0df8b46f95c21cc39be065960c9d4b95ad8c", "ref_doc_id": "6f36de66-89cc-4777-8939-740fbcaddfa4"}, "dba8239a-eb99-48a0-be52-dde51c48370a": {"doc_hash": "50161297879d6050dfef41c812f0522db350ee84043b5ee4fa66169a762011f6", "ref_doc_id": "8f647bd0-5d71-4345-97a2-c469b8e5535c"}, "c1f110b9-2003-48f6-8885-b4ca5f32b8ca": {"doc_hash": "e4d2e7ebe9d0016214165c29eae840713a6397149d6a2a7222d3c545e32e5a97", "ref_doc_id": "4fa52b26-90bc-4cc2-9370-7dc73dfce2ac"}, "4e8c3bcb-2843-4e33-b5d8-220007a2765a": {"doc_hash": "09825623848eaf99048ef0d9ebefc81685f992f7e377be762918708b0debae6b", "ref_doc_id": "171b2a73-f432-4a5c-8f66-c8105c9d81c0"}, "aaa60dbe-4ba1-442b-8cdd-b585b31f5f7a": {"doc_hash": "943ea37b06032ca604dff8025c8ef13364bc23552562a9bb60af4fe23a6e3ef8", "ref_doc_id": "47e9544d-a13c-4232-90ec-2d3ecb63ad05"}, "2d1f9b31-7224-44fa-bbb3-d268b717f951": {"doc_hash": "5b2edc8326aac120ea42883beca7c262807d2fca6bc1f69969a89b180570bb07", "ref_doc_id": "8f2b5317-a3e3-429e-8cca-a8d3d12a550e"}, "f9d87ff6-19dc-4956-b64c-facba3507653": {"doc_hash": "6a6995f767101d6f5397abbda82cd5bb7ca64fcf0db5e44dbff779e64c0c0bb6", "ref_doc_id": "4fcf72d7-05c4-462b-9b7c-544a09b75e8f"}, "3683ec1d-b458-4b2f-bbfd-e0384cc59e3f": {"doc_hash": "90b4d18d81ea3b39b55eb9634828d51262f9eb1b03775bcc2baafe28e52e505f", "ref_doc_id": "33a5a766-7829-49cc-a83f-d43a13d24b9a"}, "87c2f682-740f-4346-acb9-e419e1730c6c": {"doc_hash": "7d2814e26e48417c85fdaa15ef8628667ac347c43eeafb3763c9f9ef86004f7c", "ref_doc_id": "84933b6d-6183-4147-aa60-84f082809887"}, "819ee16b-791e-434b-b096-94e4f69bb267": {"doc_hash": "65c373522f264cf257a517992bcd2a089cdbb2b17748428f3d1c8df2b9757b61", "ref_doc_id": "1833a642-96ba-49aa-80e6-d1280928ad5a"}, "2a40f61c-6d99-4ae3-8d30-f37e5e22e9b7": {"doc_hash": "160fe0ad9acea6b81a0ee0ab01c53617b73a1e7ee7591511cf50640d0cb9bc6d", "ref_doc_id": "9d4fa34f-6021-4bec-8493-f03fb3c7301b"}, "aa63ad2b-0546-4ea0-8e04-b9046eafb074": {"doc_hash": "5801149f25f64d8f8ed2b1a818bb56f58b7ab00c6767fc9f9297753d005280eb", "ref_doc_id": "b35d6b5b-ae3d-425a-83a5-71e25718e9a2"}, "5c8a400b-2bac-4ee4-864b-9e43db58931c": {"doc_hash": "1f1c32e207b55b61762b5318bd61c11ea6e61946c6d09861e69a70ecf4ca2e6f", "ref_doc_id": "d45eb9f2-fedc-4d49-9395-afe2b76da43b"}, "bbee888f-765b-4737-aa73-56cedc9bc29f": {"doc_hash": "ed7ee9f4af75f5029214ba4aad257e632c98a02e51bda79799dcfa2f1d481b1e", "ref_doc_id": "b349ed50-4458-44af-bc03-8c1d2942cbaa"}, "8dcb22c6-8fca-48e3-9bb5-ee10216c7b6e": {"doc_hash": "07c5ef8e368ef92cecccf4011192c035250bc3ee005cda020e31a7150977b116", "ref_doc_id": "cdfbf39b-17b6-4813-956a-bd99193eb07c"}, "aba4fc8b-ca4f-45ee-8e07-a90c491f32c9": {"doc_hash": "56da6ebe7f82eca4d98f839107deae2c7c250b44b603868f0620141a2b80acdc", "ref_doc_id": "b5e1977d-d91f-4013-ad28-bc2a587e45aa"}, "69ccc2a5-e9c3-4e49-83d8-be921ec6a1c9": {"doc_hash": "e2398e7c4d13d2361bfa5508288580ae64be4db74e702e1c0e381130ca01201c", "ref_doc_id": "8445d145-24b3-4a3c-b3ad-7a45f9c5ebdf"}, "1e694daa-8fb6-4270-b0bd-a9b5fbdd2e95": {"doc_hash": "059a253796a3cc99db82ff8439451ac6bbaaa2c9f58ab41695164bce118de717", "ref_doc_id": "8c01d67d-1123-4c56-9697-155638e038bc"}, "5c53ab64-b71e-4d47-8a14-0abb30623daf": {"doc_hash": "3cdba810313866b0d98fa8334f27f686f1395c823831c67d6d598ad7f04ba6b2", "ref_doc_id": "0ef3330e-031c-4c87-bec5-d92e7636e1f9"}, "e6d42bfa-6493-4515-97fc-3238396d4ada": {"doc_hash": "3b526146c8dd09770c5936b8d7d84d3c7f64f574f459af0b2c169bf6ee3769cf", "ref_doc_id": "92f4f13f-b2fd-49b7-abc9-db3f738807ff"}, "c01dd3a4-8754-4999-bdfb-d3c8eade7371": {"doc_hash": "8cdd786e328dffad81837285ac7042c076bc5e135716466fd06190972d03317a", "ref_doc_id": "1249d603-3649-4f52-a515-09dfce380cb8"}, "3d7e47ad-1f24-4a74-86ed-dbf83f6a48fd": {"doc_hash": "ebf4d014a2ea2a6e8a4247df9a0ba16ed5afd33adcf88db95253b797aab221f4", "ref_doc_id": "c1c43e89-737d-40e6-acef-194fdd1a16d2"}, "caecd940-d60a-44ea-b24c-ab33a103f55e": {"doc_hash": "7694231ed9ea764664802b1cfb225da69afa9dc1fee1416a9967b4d4a3634b71", "ref_doc_id": "1c1ff4b8-9689-49ea-b9c7-5cb531f60738"}, "2acc4bb0-e04d-429f-882f-4cd2553f77ab": {"doc_hash": "e54997b08c57430a28a7556b727c3da6091d589f49f035dfae3b335b4230b624", "ref_doc_id": "c2879172-ed9a-4603-bb08-eac0ee4c389c"}, "8752cf6b-bd6d-4316-bc83-faa17adc2569": {"doc_hash": "eb6458a5520515f8ddbafe5f9c2200c2ffcb0d67f194e1ad243346095f3d6016", "ref_doc_id": "6235f4a9-8616-48b9-a14e-7d95465a895b"}, "4ee455a3-929e-4fbb-9b77-fcaf8fe42865": {"doc_hash": "fc8060eb5906fcf651e6389a82f146d95336c939fda1df6664fffc190b546854", "ref_doc_id": "1ff4de14-7505-4fc0-b646-d3767121074b"}, "52419991-ec5e-46e4-9620-a2b668803171": {"doc_hash": "a102a33782164e791608bccabd292f25d44c7efaf25dc5c6c4c9855b048f69f3", "ref_doc_id": "533c5a8e-bc39-4593-962d-ca365256adff"}, "6124909f-f9d9-4d01-ae96-de74dd646e6f": {"doc_hash": "32cbb6246dff690611dc2ce5f5dac25f0900db595c82748f7a422151ee12cf3c", "ref_doc_id": "04294f1c-71a0-4899-88fc-349800d92151"}, "a34c8242-b6e3-4e6c-83c8-d625a391f0d3": {"doc_hash": "294602aaa133868e49b7860396c6d560bd8b30fde270c639806459fee63518ee", "ref_doc_id": "8410ad07-37d2-4cdc-bc18-9c980d8aa175"}, "c977fc0d-3442-4e34-a0f1-02d527180b59": {"doc_hash": "8c2979495fee370a14ea4608983f7be8367715e70c1c3f263a73f0e888966366", "ref_doc_id": "11b1da82-ba3d-4f5c-aa0b-6b06cab87792"}, "3f50c887-6e72-47cb-a7e6-e0b60cb3fe86": {"doc_hash": "5f9bdfe9ae9df3c7cc9845895874d8c5d81924e5c38e2c81fc3c60c918a070ad", "ref_doc_id": "d095d85a-7c48-4570-ab5b-050df9bb5e92"}, "b4526608-d931-403c-a801-686dfd8a63f9": {"doc_hash": "853c7f60b7871f0c4f4dc5a1fc1acba7907afd7ad4d3e43552af0a638ad4908b", "ref_doc_id": "24024247-bc77-432d-862b-70db80edcd60"}, "5ba2950b-6e25-4161-b908-e7de890f2a77": {"doc_hash": "9cda10e1f3da5743d2afc3fa7e424d74430ec3df4896910d0f8cacd15f2be05a", "ref_doc_id": "58368fc3-b269-4b2a-b848-e5bd6faba71c"}, "09f5b80f-a75d-4500-9e7c-90e000f59c83": {"doc_hash": "c093e4986f338e88a9e9b00b967da90980d57074d005b942c7aa0f64d2edce3a", "ref_doc_id": "035c54ee-d778-4022-959a-69509213bb95"}, "d9e978a6-bf9a-4deb-a890-a43d0cd95005": {"doc_hash": "afa3a48dc0616bb2be58cc1ebba0b0b8c382cf032bb49b15e1004c5f06dedcda", "ref_doc_id": "b34ec667-a13b-42a2-9170-347c47caf6c4"}, "dc09f10c-f53d-4d4f-9f53-8e2343382409": {"doc_hash": "bb709988b41bd81f079f29acea6840f35fad1fccde15e0851857102ff627257e", "ref_doc_id": "be981172-0b18-40a6-8036-444cc682f5bd"}, "be809530-1d4a-478b-afaa-082c9e270025": {"doc_hash": "e55ddb862bc1dffe9726d450ffea1af35eeda3a6f55f6dab9a6de167c9ff583d", "ref_doc_id": "13943530-2bf5-4b40-a5ec-a087febb7801"}, "958ec472-4aa3-4de6-879c-8bafdf7f4432": {"doc_hash": "3dfecda107ec178c15c8494545e7a3bf95dfe9b569f04db2ec7b1539c138281f", "ref_doc_id": "df4d6293-f49a-4a49-970e-b3e86bc0240d"}, "099dbf26-ec91-422b-b304-bfa396309a27": {"doc_hash": "2c84fb325175f214fe183d13fc618d1e09efe5d5ec80500aa304cc305bba8fcf", "ref_doc_id": "0a902ee8-2ffc-402a-96c4-f3023893ff86"}, "1fbfbe81-b31d-46fc-83e8-a2d1a3a91023": {"doc_hash": "cc9c673c5ab460fb6d784953a254306d9a81a68a133893bc90978c115e7f70bf", "ref_doc_id": "f34e2b29-07f5-453e-9b64-7514336d77e7"}, "2b78c71b-fef7-4f48-863b-bf68ac70fc73": {"doc_hash": "27c88e56160a6f546a40a76b9b74658c2a7e46e79a39d1e0beb7f04237bd6fe1", "ref_doc_id": "ff062794-0950-4a87-b9de-feb4aee16fd3"}, "94ecd2c2-e6cb-418d-9f3e-02a34b749a73": {"doc_hash": "42c4ea869761f2bc337ee5e0aca643e84ef4940d362c472312b380f2bd35fda2", "ref_doc_id": "454e9503-d98e-49ea-9458-365610a97b9a"}, "32e0bc6a-c2b4-47e7-919e-b51f1b35dd35": {"doc_hash": "90baf50dabea46ddc626a6a23f9b363f2c5041452d660cacc53220a1f645f80d", "ref_doc_id": "3daae4c6-1814-45cf-8cd0-9b68c57f83bf"}, "e91eac3c-6ae2-4f03-98d2-125c62621a53": {"doc_hash": "69dc507a5a06df8a45e8fd7f500b53de4f78e7a8d0c4de0d6122e1cdf88c0562", "ref_doc_id": "bfde8e0f-eacc-4c64-aff2-05cdd7e497da"}, "a240de8c-efb4-41f8-a39a-4e6b91c9f23d": {"doc_hash": "70cffd1a907d89d15583d3e2b305e6521bc705b494ef4da87def9bc9a73d6531", "ref_doc_id": "4b9389d6-1f83-45fd-b64d-734dc7f928ad"}, "07f3dc87-fe5f-4501-9106-9ede34d8b477": {"doc_hash": "6cae111ebff4dba2cbb080805bb7dd6ccbb35c19fcbb2c754d962d373d68537c", "ref_doc_id": "808f308f-e460-42de-8362-b0702ff3755a"}, "4fc12f3b-e61e-4040-a5e0-d8153e4e0a25": {"doc_hash": "a5f5e2501cf638b9299f0caa93cdd96cb387d7e00f8a4ca7e3b49ec6c6e7a5b6", "ref_doc_id": "c4a97738-6616-4a71-8a78-b267f224956b"}, "90048788-4aa4-402d-adca-9c591687f656": {"doc_hash": "c8a4d920b74557f52de114f9f6c2a203a250acc8be97b9ae05e899f725343e52", "ref_doc_id": "df2770b3-9ee9-418a-8651-e0313bb32899"}, "3a27b69d-8007-4d69-85ec-49e2b5280be4": {"doc_hash": "dc26cda3273b1eeebd451f2dfbf066d35359bc6967520bc43af90c55d138ffa4", "ref_doc_id": "04295ed5-60c8-482d-a7c2-070a3f51f4b8"}, "94855142-3dcf-495f-9daf-508d421b80e7": {"doc_hash": "f457a7f8c3dded1ee3a3bcee831b0ea6a04ff0be7d0e3b8629122674456ca399", "ref_doc_id": "2258c824-5608-416b-9c53-44ae5737ee66"}, "f20dbba1-6a60-46ef-b61b-1784cf2d7b24": {"doc_hash": "2f16d008394e89166806b2588d82e7f14353598580c0a21c60c1eb22e6ac8719", "ref_doc_id": "b446d297-1046-40f6-bd00-47300eac2ba5"}, "9cb1df69-7d3a-4047-9a3d-0c4471356714": {"doc_hash": "609cae2ad867abda20d64f00bb0c91f330be7ac3461dbfc81a525bd56c264ed2", "ref_doc_id": "e798042a-06ba-4c76-866b-62dd2d1878b3"}, "1548bcc4-fb39-4e83-bd7b-bed86c89ec86": {"doc_hash": "74ec34780fc7afbd86361c95c736a9062cdd86d81e108d12cefe69aa55d10ed0", "ref_doc_id": "b820ba46-023c-4fb2-8177-b50194f24470"}, "e40d7abd-836d-40e6-9540-606d351c4d29": {"doc_hash": "a18190eec7bca45fea4dca82a96b846959f175de503cb10bd6c621dc4ed0b458", "ref_doc_id": "2778ee9b-ff66-4da4-a9cc-152ca02d7574"}, "52b6094e-c72d-407f-bd63-430faee28a10": {"doc_hash": "f7c3e0888427cc7599c81aab1c0da9791f15a9c323fdef836fdf461c53c0f962", "ref_doc_id": "601bd0a5-b19e-4588-a58c-49a82cf26673"}, "596e6dec-b34d-462a-8a23-fc549fe5815f": {"doc_hash": "e74959575734d0be98625c4fdebfef99ca350c9285483ce6a668ec2adc2779c3", "ref_doc_id": "a3889e09-5033-4979-a2ff-1af3e00f8530"}, "99bbcd0f-b74c-4115-b3b5-dacc3c133609": {"doc_hash": "76d13538f7b4f673dcb6253aff99ad90d59207d6d4085ee32fd34654b6f93618", "ref_doc_id": "13e3f6ea-b1af-4bfc-8d48-3c9939c811a3"}, "f59aec9b-d983-46f1-9a13-ba2d59ebb311": {"doc_hash": "ed271e8d6af7b9a0a8ebef9617d7bfee7fd4c38e957e17c4e47f510626aa9f58", "ref_doc_id": "a4a3c2d4-bbce-4c48-bbf4-e81b3f0ddf8c"}, "57dd6901-b9a0-473a-a16e-d19bf38c57da": {"doc_hash": "e6c04eb034e57d2adb126a7599e4c4c1062b5f2c07007f794c039c614e9dce86", "ref_doc_id": "64724ef1-d87f-4202-baa1-312eee0c582f"}, "9d7556e0-061b-4a41-9aaa-6c814bf7f6b6": {"doc_hash": "36db8201c9ba7252541d98138f7f4de811fe3c14118e3cbd28f6adc04d005b9c", "ref_doc_id": "4e3c3ba2-ca60-41cf-8a94-283f49b67e70"}, "02186f82-816a-4dd8-b6ef-0bc78365da34": {"doc_hash": "1565652a32a29005da40d1efe1e6fea4960b2d5fdf070c8e1b538dacc54d4e75", "ref_doc_id": "a7998094-23d0-4a88-9e83-28e76a6e0cfe"}, "4ec68dab-20b4-4ae7-bc67-62d8e59a2843": {"doc_hash": "62fbf1acae77154c7def889fb9a18015b30951e20f5b3166c719903c202c08a1", "ref_doc_id": "c2d0205d-507d-4596-9e3b-b333903da97f"}, "6ce72456-a2fe-486b-95c5-16df95c6fa34": {"doc_hash": "157217ef1eef2f6f7f9970c8b063765d9f2538c0b046b8709a13a4df096533bf", "ref_doc_id": "79716b6f-0f56-46a7-b5df-1cf41524aca4"}, "380d898e-842b-4a2d-8bef-7d8255b646fb": {"doc_hash": "0a1de5c8c00f330ec535ae4fa3b15e7dd58c8cffa44173865433394e073c90b8", "ref_doc_id": "c621376c-b93d-4e1e-b3fa-2da335c2d91b"}, "4545f308-a994-45db-91e2-e4f81688b9d9": {"doc_hash": "70f8cfbe211271a2a8549eb70c35744f10298b36bfc24dfc0c447f685fd7fc42", "ref_doc_id": "523c34de-5d74-4b77-99fc-a7520615c1fd"}, "071aae5b-a021-4ec7-a6fc-f9984506b6cc": {"doc_hash": "6467b7bc867fbde4fb67303e861e248c3f1b4122064eb04389dbdba84fbafb46", "ref_doc_id": "fb163a1d-bef5-4b95-b080-639034e23e8d"}, "74d94166-fc6d-4c18-91e6-c4c75f52b0d0": {"doc_hash": "520910778d306a65bebbe655c682761ab70c11153e6c66e44cb8cbc9f00bf0e2", "ref_doc_id": "847dfa64-f363-420e-9173-de2ee0fe4307"}, "644c0c89-c28b-47e8-96bb-57b9b65dccd4": {"doc_hash": "1985c98e47def98e4980c82510cbfd3db0b775e2cf418e4b6c2b913d42fad165", "ref_doc_id": "96d1cb02-54f0-4260-baca-92e8ad4e99c4"}, "0905ff9b-827e-4f8d-acd6-e8277ba99faa": {"doc_hash": "5e448e88eb0818413a1732fadfe6f630c0aeaa28876dfbf4ade464a390cdfa4d", "ref_doc_id": "01590336-38dc-45d0-9ef7-b944aa65676c"}, "fbe334a2-241a-430a-874c-afe006b59e78": {"doc_hash": "2acaae6a3cee9410690fb6bbdcd7446d961e191542c0799a9a5a8aaa0c2f9c85", "ref_doc_id": "f761d854-bca0-4e36-9c41-653a1b4f3421"}, "ce9e733e-2bec-422e-a11a-2131a9edc608": {"doc_hash": "7a1c44f4c7723eed70df0193ac3901a91fda580716fa26f4ddbac28414404e1e", "ref_doc_id": "1d33d3a9-db58-473a-aa8d-d3e9a9b0eec7"}, "49bb6596-592b-4576-a78f-fc1e98978568": {"doc_hash": "77462c2c483efffbb92746b79fc19548d4d2b057881ba8bd24a31d2945d3966e", "ref_doc_id": "2087346d-2bc0-4689-b908-3c5f5b6089e8"}, "781f9dca-9303-48d0-b0ea-7d04139adf36": {"doc_hash": "6328da746cd2d50ed26a5560bb6171c5fabd0ca5addd044a509914a5e6a4270e", "ref_doc_id": "c9566022-c51a-4f4c-9846-1ed37524cb46"}, "bb8cf6d6-728b-4e60-8f6c-d88b783375e5": {"doc_hash": "73204f8c64caaee3726fdefaf6b6dfca2d29f97a3d6631aa0160d59beae7a706", "ref_doc_id": "d0b22fc4-e2f6-496b-a5cd-34514bee9af3"}, "ad760494-34a8-4114-bf90-aabb50109e51": {"doc_hash": "5654cbaaa2f0a1c8f71c6aedb0102eb6ee8c0ede63c83440d913e9a9468c6493", "ref_doc_id": "74390672-7491-44fc-b7bd-a6cfaf163da6"}, "d0166261-1ff5-4a63-a0fc-a047ba5cdd69": {"doc_hash": "d8af012ad85b57e09719064b451cac507eb7e76b497205e53cb09983c48e0710", "ref_doc_id": "77474efb-09f3-4ea6-bba1-e1bbf8f820c3"}, "e90db66c-dfa4-4214-b7a1-c1fa13da3494": {"doc_hash": "9009cb987ba9d7d568cc0e1caed9cd364b5f7477d3bf52dd70248e3469bec861", "ref_doc_id": "ce144022-ed5a-46df-b903-a8e29bfd86d2"}, "e2309667-b0b7-4b29-b0f3-72f5578f1e4e": {"doc_hash": "860270a69f2f5a2a5d53f39ebb96b6e21330f2d67d79851bce0123a649e9e83c", "ref_doc_id": "9c6b9848-8a82-4b2e-85e7-8623670ef543"}, "25dad700-0ee5-4c7f-a1b5-eddeb230dacb": {"doc_hash": "32e954d1a7ea4a0b16b55b9df32a5ba4ff32e182f9706cf82d02512fa2ea7772", "ref_doc_id": "61326df3-41a8-4410-aa6e-2b72e17b6f63"}, "b0277435-5bf0-4dfc-bdf0-6eeeb0d61777": {"doc_hash": "534923c8e7259cf6ffdae20e019f0030d1c5dd6762e23926e014ad45bde7e5ae", "ref_doc_id": "55b0e483-79e8-4911-a535-17ba40ef20e8"}, "6a9ecfb8-4eff-488f-9ad2-f1910439c077": {"doc_hash": "37d5dd4420316552ece99766a98d78db0c78c7f1be30198cd91427aca69337eb", "ref_doc_id": "f5ab284a-d13b-44ae-901e-696b7bf566f3"}, "e7e741f6-079a-4871-9ce7-6ec5c1262908": {"doc_hash": "66cfca47984a34fc0d2e69a4aed8ca960abe558de8c2132e6447929fb1ab6f91", "ref_doc_id": "65d615d4-9a7f-44ff-85d3-c9c12042a7f5"}, "8de6a5be-e0b6-4951-b91d-611ee4df0df2": {"doc_hash": "46925cdba8e3fff27272c3bbe910ae9870b1851771f4dfa23b2b0c4e50bcbb09", "ref_doc_id": "8aa45dd3-152e-4fe5-8a74-c33f9eddf7f1"}, "e008fb2e-ccc1-45ab-83cb-fd84607a641d": {"doc_hash": "d0ce4b3165ecc249ea414b9a17e12c31b933f4e604cd3820a1d4e7e6ab146707", "ref_doc_id": "d68912c7-b88f-47d7-9356-bf07853506bf"}, "06b59bae-6e1a-4db5-8d09-0a92fab4b64a": {"doc_hash": "73ffe4c4c521707a0d5c6cd3a19904ea915789c207ca0b9ffcc9980f1979515e", "ref_doc_id": "eccf149f-e6f8-4614-913f-7b7c9c723345"}, "336113e5-ed3f-4b4f-9c33-5831ba179c2e": {"doc_hash": "a33f84d4a14e329dadccdc977c0fc55babd2649d14a581a302fa194cf4975a2f", "ref_doc_id": "bb93b098-724a-40a0-bcc0-c7de610e9610"}, "5054f2c5-d0e2-4c60-9d80-d0605d34208d": {"doc_hash": "db8f5116755b7102d2d2d599237056c8dc2293214ef9db272f5502b31565c9bf", "ref_doc_id": "bb35a539-8298-468d-a515-eaa4ed534bb3"}, "060c4f46-4dbc-493e-a09d-36034f07f03a": {"doc_hash": "5c68c4951dfe7354347a2ab5df2a1694bc3814b1d3564928b6cc440dc328f576", "ref_doc_id": "95bd720a-5f31-45f1-aaa2-baf1a2b64a45"}, "6dc603e7-2a87-4f51-b8e5-840a0e661cd6": {"doc_hash": "600ff8128d9f1bc00bbe46cfa6a8e46743ad6fd7a15b696b3725a99d39689ba2", "ref_doc_id": "60f3ea0a-2521-4ea1-b7e1-2f329e4fb973"}, "7409358b-59c6-4556-90ff-2db600a4a5a2": {"doc_hash": "03ef41982e79be049520ce09f237b421364614b0b9738d8e78e4498d61fc2c26", "ref_doc_id": "3aec7351-eb52-4f0f-8299-c25d5f9ea2e2"}, "ae435997-7ca9-4647-a638-38ecd676bb2c": {"doc_hash": "4e1825ff5e1471d8c9b7fb5fbc6a834dca65f5359f8bb5b726cb4cc35bdaf404", "ref_doc_id": "7a5c7291-b112-479b-8e30-ce806822f728"}, "2b57bbaf-26cd-4308-ba38-360dedcea65b": {"doc_hash": "13b529caf8dc17345279be7ab6f6989209dc33dba06a35b38361d1f2970f46ed", "ref_doc_id": "3a4cdaaf-8893-47c6-a2d4-f8d507818a07"}, "139cdcdc-7cb5-4a10-bc44-2dd32cf32a21": {"doc_hash": "96430232e4c6da11ebe5c7e37cb556cb6c43d505dd6797e80a88cdc7eabf74f7", "ref_doc_id": "dd28ab8a-cfe0-47d3-95b3-81438f0bbd78"}, "fe26972b-5627-40ec-a02d-aadb916dcfe6": {"doc_hash": "f091f986a31345fc30ae153a3d58268d2a1bf78695a61c656ae1d7b8d4c052ff", "ref_doc_id": "fb467902-ca22-4239-9e1e-387fceb1f217"}, "827c9198-fb8a-4c4d-8063-8117c5652b97": {"doc_hash": "ad12e9e069f84b38edb1b28f6027fb962eca9ccdbe998ea0f388aa210ae378fb", "ref_doc_id": "5882ac51-25d2-45cc-9953-af0fbbac5da3"}, "799bd402-e64c-4dfe-9ba6-71345a3d3583": {"doc_hash": "f2e541db5f0591f44b6166c6cf9c6851f94b2e6aaea31c17a9c40f3724113f08", "ref_doc_id": "d3c06861-6c8b-4652-a4f7-ce2612691539"}, "d3dd9ed6-fbf3-4608-a05f-ff4312979f0b": {"doc_hash": "05197b309f395de88b19513f3a51c4bde47550606419a897351afcfd5e4bee84", "ref_doc_id": "50c24e6e-999b-495b-aa7d-fdf1f496d24c"}, "0bfbe2d5-8bfd-42fa-858e-51234ee0bbf8": {"doc_hash": "7091690d3aedfe74bad16da2c1090a3e9eb268423b6145fbeb5dc85f2134d7cf", "ref_doc_id": "984c85eb-9277-4c37-a8ab-92e2d5938a2c"}, "f8df0e82-8bb6-45f8-8576-622e50c8dc16": {"doc_hash": "6cb7967a185483f27216f6892a183e264d17b4682b28f5ff750ef58f5fd66aa1", "ref_doc_id": "9de54e9e-88dc-4d2f-9d3d-6f1b9dff59ce"}, "9a044e29-9fc0-4213-8869-aa3b9437d2bd": {"doc_hash": "fe3856e3c6fc32d415dbc0a05e2b0fdee6eea9885298d1f7e6b1924b83cd4fb7", "ref_doc_id": "84f5d966-dbe4-4ad4-931f-7bf5d6966061"}, "63a97347-6433-4c95-a2da-5b4b596b2b4b": {"doc_hash": "a833f705302c0113030e413e775c19fabea277f4755bad19852736ac629eb2ac", "ref_doc_id": "e9d940ef-32c1-4119-99b1-51f06458193e"}, "09ff7a9a-fcd5-4b84-b19a-7a461db93a6d": {"doc_hash": "826c7720e213adae45ed8062cb8911f73faced817d58b2a9621fabdda1cbd943", "ref_doc_id": "471da96d-5fee-4129-82e6-056c224d5a33"}, "ee10f033-f014-4bf1-b937-acefdfb37ef4": {"doc_hash": "6b0933e344626a14ba109d02e2297b214023a06d9a8ba8c3e7e15f077b49f18b", "ref_doc_id": "24b7968d-b5a8-4ac3-ac26-7c6362ab89f5"}, "11c1a613-4c85-4eff-9593-dfd2abd26013": {"doc_hash": "f0cb169032f0987b323d806e35f9b00cb1f7e00b1f27f83f99febad02007e0d6", "ref_doc_id": "4a6c5380-66d9-4789-b4f8-3fd17d182856"}, "c327a19f-e8ea-4ba5-8816-f1c7dcc2985c": {"doc_hash": "bcc09ec5f131e23448e8a3d1bbb11fb311fa650510b61cec620bc818dca3fa0d", "ref_doc_id": "9f846d56-e30c-473c-9ea3-178acfbd447e"}, "0085df9d-d226-4d41-b442-2588a2c4442d": {"doc_hash": "a1394953027c6502d1ef71acdb753f3cfdfcb59e8d4899d32d73912cd83a176f", "ref_doc_id": "142d367c-594b-47f6-a4e3-68d59385bc9e"}, "fd42cec0-79bd-4b74-a3f9-0132a6d3c7e7": {"doc_hash": "5e47bf9defc1f83459b75bc717095df9b14da9ae41df2415335cbd9ed03233c2", "ref_doc_id": "8e0711d4-22e9-4ea1-95d6-bf1c8509a9db"}, "68390780-d0bd-4ce6-9659-f7902935264b": {"doc_hash": "84e4d4054c18e704494045d2578dd55c619dca6d9102874015dfb72d4221f083", "ref_doc_id": "822fcbaf-3123-4ef2-baad-08a0f7fea783"}, "b4503e66-975b-43dc-86f2-4d7a396d91df": {"doc_hash": "387ae1318af298047d2b20701bd5b90a7560b1dd2584af85ada05a08d3d04bfe", "ref_doc_id": "c51c07ec-2e4c-4521-b7f8-43fdb988f86f"}, "c9c44dbc-63fb-4470-9350-6a26f8ef77c9": {"doc_hash": "18c4f31b5d0fda4910eded2e086b5eaed52a7250d885f38127cbf566865f0192", "ref_doc_id": "d06afe50-8986-4b0c-af49-18959ecb9aa8"}, "e559939e-9593-41c3-badf-14fd744c19ec": {"doc_hash": "6bde24d705eaae98dbfe675cea46a6687161d1c3c4a3ff549f8b43a23b7e98c7", "ref_doc_id": "6396a097-e849-4738-a924-29c7564d0e90"}, "49b57cb0-20e3-43e8-ae79-e20f549c7374": {"doc_hash": "bff37c65ef3eeb855299a6b6106bbe9a4b9b9e1b076dc24709c971a3e4fcb924", "ref_doc_id": "598bc73b-b6b6-48e1-a774-36cd6effe1fd"}, "589aeb82-7aa3-4d1b-9100-89daa199009e": {"doc_hash": "8d9d7c8320c149710d3c1c2ad55c403bc53ad01ef6fa895b8281b8d2ee887e39", "ref_doc_id": "8db89cd6-92ab-4be6-9c76-41038b231f8e"}, "426a1c47-70ec-489c-9826-72a21bc40ada": {"doc_hash": "eb7a981397f73dc465af22aae299aeb531f94e730a8dd84b6a903b6adc7e1a2d", "ref_doc_id": "9b5132cb-efb6-460c-a975-02f54ba474bf"}, "55283936-7099-4e90-a634-b81c58a732e6": {"doc_hash": "f7c29dd0794ccfc898608727a47f357e9e40f770cf80bb260783e3debb324326", "ref_doc_id": "59f72577-8c48-4a6d-b84b-84ea1416091b"}, "7dab53ae-b20f-4663-a4e4-1be961fcc323": {"doc_hash": "1c0362e3931345d1aa21ad5235231476ccfac43a8e7eedb865296733a106443e", "ref_doc_id": "dd43d9dc-91d9-4db7-a3c0-c23cd7942bc3"}, "71364cfc-2ac4-4885-96c4-cefca02899df": {"doc_hash": "04ee085244dfba0507b009e4bc50b08d224dd4cc243fe9f49d044e1a1ae29cc4", "ref_doc_id": "95d868bb-47ee-4780-ac71-97277bb5dd86"}, "4365e4e5-9b0d-4efd-80e4-9a6587e604ac": {"doc_hash": "fa9ab1a2cca8661c65a25a91276b28813f2a15856950c186e18357b00916d354", "ref_doc_id": "0073762c-c4ab-4bbe-b9a2-9e5aba83fb72"}, "e75c7588-5405-4798-9013-fbcf1e9f3ffd": {"doc_hash": "0e1196e6ee460ef87aac41a3edb23451eb8d704f4aaacc65b6a30d179406b66c", "ref_doc_id": "5c1d4580-b1c5-4ebe-9325-57f2738062ce"}, "45760e51-08ea-40ac-80c1-b84754d2c7ce": {"doc_hash": "e24553903480658f5ebeaf7539b5c5b2f0b60adbe36b0ad6661d156e2ca167dd", "ref_doc_id": "b49d7878-00ef-4604-8d31-de36f9ad50ca"}, "690c1bea-4c71-4c7c-8ddb-782007d94db7": {"doc_hash": "fe0d156ee182910820f38b8281ddfe01db4a5d19379a33fcfe0356e1a13505f3", "ref_doc_id": "47125f4d-f9e7-4cf8-bc34-51c8ae007c1f"}, "e6bc732b-3699-465c-989d-db98f75d551a": {"doc_hash": "f63197bd73f57c54febfc649a241d7f4ec7f28de1f21686903aa947a0501b1b0", "ref_doc_id": "9fc76c08-bbfe-416a-9eea-79e614d9385c"}, "2124c4b3-f47d-4654-a21d-661e664520f9": {"doc_hash": "b024b4543984a95ee3bed94da92c15a7166da9c4d6e7d4f0df0327ffadec62bf", "ref_doc_id": "6966981b-7338-44cc-917e-6a07200d0da6"}, "8ca19ebd-b3dd-42e3-a6e6-4bcfce4ea64b": {"doc_hash": "5ffd0fd633cbd216680e950474ae6df663f526897103e52c1ecdcc2a68afebc5", "ref_doc_id": "e05ca300-1142-40a3-a85c-0ca3867b0f9f"}, "6fd66580-b860-48f6-a6fa-639b81dba307": {"doc_hash": "64c3c367313d3dda0133e6f293ed5fb4ddb160b370dfe5fe3f61af0d69656cb9", "ref_doc_id": "4bda54dd-18a3-4bd3-b20c-23c67484fc82"}, "e02af1bc-7371-4182-a0ac-6b2a520b52e8": {"doc_hash": "944a5cbd4d5c22acdb20fa08a12d5cf1df5ed40bf64a339287a882f3d0d95566", "ref_doc_id": "101d9b50-5af3-4710-a1d7-be0be12ca6ca"}, "e45f7740-9e33-4c82-9dfe-2e1836f9422d": {"doc_hash": "2bfb69cf490583cded61ea613e7242756cb631fd17ff2fad0036c98b0052d594", "ref_doc_id": "bbf39dbb-a052-4d9f-bb1c-947a3c77009c"}, "82a97215-165d-40fa-ac3c-0ed1c0191a1e": {"doc_hash": "8cc236e8cdd0f4ed47a828f6bb3a1b64e9ab4fb0a371ca1eee380aeac35ba1de", "ref_doc_id": "f3dd3687-2097-4bdd-ad6d-766cd0641963"}, "98a479ca-df2d-423f-a5ee-9e31aca64036": {"doc_hash": "577e3b776c326ec1fe9649d35516ba5db769226114d26a2da02b9469c84db3ef", "ref_doc_id": "7abe729f-cba6-4d25-9fa4-a15abd1d80ed"}, "6501fdc8-b97b-4ed0-abb2-eee899af26c3": {"doc_hash": "8af4afb47181a5f51d1c04767f1cf5a33095526d908641b7266a343aeb58d73f", "ref_doc_id": "d3630451-9ef4-443f-b446-3e7c255fea8d"}, "c9d122d7-6ef9-4bf9-861d-40aec012c22b": {"doc_hash": "84b299a16cc6716290e567c7840ee8f39c0264ab79b23424b92bfcb9a018c434", "ref_doc_id": "c9044581-d8ad-4c29-b379-301c5253fedb"}, "cfe4887b-04ae-44f8-8f86-c7db9534f3b5": {"doc_hash": "cc970ede05aebe68cc3be59da3034454d3cd9d9e85a16be10a661bbf63433307", "ref_doc_id": "e3e1c423-adec-470b-a9f2-7320e8d42e9d"}, "1e899c7f-d55c-4bda-ae2a-d96cb8caabac": {"doc_hash": "9454fd56ea0c4ad31b083e9ad2ea4bdd68ba5216104f4621453cf721529814e7", "ref_doc_id": "0f35ac51-fcf1-4e6d-8a39-4c0a6e845348"}, "a374bcba-bffc-4e7b-83b3-74d98cd052b9": {"doc_hash": "7c2520856ca2a2f42dfec951b91b9931eb7cadd7574c565385344705035398d2", "ref_doc_id": "6766e09d-be70-4a7f-a0db-8062ffa906ca"}, "189a8a93-cbf7-41e9-8434-2410258f880c": {"doc_hash": "6ca347734e8a8378cad94e1f5e068eb9f79715ceeaa654b59197b78c25a30380", "ref_doc_id": "164f5556-1567-4c0f-8f56-12e246077b81"}, "81ad88f4-04bf-47a9-94c1-7dfbce849cb7": {"doc_hash": "d4644e19fc7869b6814ef643756e7f280d566e8f0f83f9c78c6a45e3135b5e10", "ref_doc_id": "ae08fb7b-2f0f-4945-b120-3b66f07f0ca7"}, "cc00ef9a-967f-41c2-85e9-a06182348206": {"doc_hash": "d4fc8819d63823ca95a6dc8054b565a6e07cc91878cc45b6b33242b7c8d5a9a0", "ref_doc_id": "08690d1b-ff95-4c65-b857-52b41a5fce68"}, "7416944d-dada-4a00-916f-1e7c8bccb085": {"doc_hash": "6cf9900deb03c5fab0be1a5b94d90b3b96c6a9fde189bdcdd85f51bfb5dd9275", "ref_doc_id": "7eb22a5f-6ba8-4a59-ac34-1f7ce983ec9d"}, "0ac11f3b-44ce-4fd9-814c-1b720a861867": {"doc_hash": "e9473098f5743a2226a0b4db4a8a38248a3c16da128461bc08d4d7e42ede744f", "ref_doc_id": "6383dcbd-5e80-4be5-a945-2fd09b3fecec"}, "5d538d51-2111-4a33-b6ac-9312bdd45c7f": {"doc_hash": "0496446b564f9cf7a4f41e7dbe27ac318914494ede42062ef0227b77386207f0", "ref_doc_id": "c56fd3fb-b2f9-470c-bfc8-dc44c85abcef"}, "c9e8d5ca-0a62-4871-9d03-c77dabab51d7": {"doc_hash": "ea4d9d3ec48335b8c64e7304768dec384e8d29dca5c527565c4751761349298b", "ref_doc_id": "8984e008-85af-42ae-921d-989fdce6fb29"}, "7469e56c-eb3f-4758-9a81-06d043031e09": {"doc_hash": "f3de1d3c097f65d1eca1928344f60d47279da6a3b972604d14d3648d24c40f28", "ref_doc_id": "9ece1d9f-b93d-44d4-b775-a76fc90b325f"}, "e83371bf-389e-44ad-881f-7e15b8019dcc": {"doc_hash": "70a4e9fcc236fb11efe5176a713c84d1321511c9683567d6f40abe9fe45d54de", "ref_doc_id": "0cc902f0-893d-4974-bb84-62d99cb8dbc2"}, "f7f56cfb-efc5-4dff-a7c2-252edb9ad702": {"doc_hash": "aad5297176d9d882905296282657eb769cbb81b8e04fbc48fe240951b75e98fc", "ref_doc_id": "0c14efea-afc4-48bd-8325-e1184438d847"}, "e10fba76-efb3-4c41-9e7c-cac075c20456": {"doc_hash": "b27f35550b4042d00c77d2a07b809b20ba9495eea4df84b50bfd6b74bef9c6af", "ref_doc_id": "8d55f6b1-4f6d-413b-a995-bd0584ca362b"}, "07001baf-0b5f-42ad-8337-e8a619212731": {"doc_hash": "278dff4b8eaec7ba40f85128243c366dd7257ff73d12af714ea8f0e20d67d257", "ref_doc_id": "4e8508c7-1655-402a-a44c-eae02ceb1211"}, "6dbdfca3-924b-4be4-8a57-cbfaddb10680": {"doc_hash": "d40b7c8d9df622a1e584d8b5665f77ca6890433227662ef94ab6489c92c6ea29", "ref_doc_id": "47831282-51f3-464c-b1b9-17c823220e95"}, "b7524b16-3059-4a41-b96d-90accc5bd682": {"doc_hash": "6fb286565627992b11d786fa462ce4d40bbb6565ebc478bc538ada4bdf5a12e1", "ref_doc_id": "d1968bf4-ebb8-484a-86a7-e65acb1eac7d"}, "46da6b03-644d-4e7a-b99e-4b565e1a54d8": {"doc_hash": "296ea5d965ed6f013046c23a9ab3b961ada39ed1e1da349db9b0cdcd4f927da6", "ref_doc_id": "52c6b19e-6042-40a3-b58d-6ae76e65fbc3"}, "7af87fe0-93ba-4cb7-aa6b-50f615d665e7": {"doc_hash": "5ea9c5e4d7e4c0f74fe59a486bab0accf530ae3911094f488a228fb9bac1bebd", "ref_doc_id": "e808703f-b0ef-49b5-a124-cc370047eda1"}, "fef74169-0d53-430c-93ac-26da4328f514": {"doc_hash": "f7a86eb37c4d422853efa495ed54068d7796a73d3e367d606c13057ba3affebd", "ref_doc_id": "7e2080aa-54d4-4cef-92d6-f7ca34245f66"}, "13db9405-9722-4b15-a11b-8322745040ef": {"doc_hash": "a76358a0b5e656813cd6ee2ffcd487cc5340237b81ade93f3d622f1a60df8735", "ref_doc_id": "7e2080aa-54d4-4cef-92d6-f7ca34245f66"}, "a18fb814-70f8-4dbc-90b8-b0918437d688": {"doc_hash": "5211479907cc17f82e7581ae854b281218a8fb94b7bfb40c4ed1cdc825a11919", "ref_doc_id": "7e2080aa-54d4-4cef-92d6-f7ca34245f66"}, "12a30353-565b-4d0b-ae1a-1b9f7cf4316d": {"doc_hash": "2f102a0559ac893974a80bd57bf51b81e46a1fcb64666912a24eb3ca6dd9c359", "ref_doc_id": "23480905-dd0b-459f-ac0b-44f8bb4b99df"}, "1c121e3b-71e5-4863-9f7a-bec3c781f99e": {"doc_hash": "e92d0ed1da0cc6c3ccc5ed92f1781a8fc8189df7df98e026cd5287421c828102", "ref_doc_id": "0c13dc53-0e41-4464-b694-f336f2ba61c3"}, "84153dd7-f43b-44f0-a864-70198a0b3e61": {"doc_hash": "9175922a06176452d81ba27c8358062b1a77226cce2eeb50d96accdf66f22fae", "ref_doc_id": "5a53e60e-69b8-4079-86ef-835b90a2d372"}, "9197d8af-55a6-4b0b-a846-238548e95cb3": {"doc_hash": "b62151891f688747b0de71070e629e94ff3c79b9a8ff39b3797dc4ff8c51e84d", "ref_doc_id": "aaf6782a-b13f-4e1e-8539-4c1138bab937"}, "3457e49a-a37d-4176-b5e4-669bbd004bc4": {"doc_hash": "336c09e4be89c4898890ce53a2bc2d5033fb0a3eb5ef1d651908d84c94d3af39", "ref_doc_id": "a12dd3a0-c76e-45f6-8cab-a9af636740be"}, "ae7f0a13-5f14-4148-91a1-2e44d834d43c": {"doc_hash": "4a6b371b60460e382c82c5cca3c814edda581e4c4b68c145d7b36b2a045b8556", "ref_doc_id": "35416d19-098e-41d7-a7ec-23e8b7fa581b"}, "1b0f8eed-a79a-4899-9951-ea8df3c3f7d1": {"doc_hash": "a3cd2ce737ce1bd6f368c59c6f6113081adaa681555f155a742f717fee578582", "ref_doc_id": "b6a2edac-6860-4bed-8853-a8ccd390f619"}, "f2c09f9c-78fe-48ec-8b13-7db8a5e8d8e1": {"doc_hash": "d84593ba3387944e16808073c21fdc0f4fb2efd55990cdf42f6a51e52e3bddce", "ref_doc_id": "0174ed96-4bf1-46e4-be9e-3c90009ffd85"}, "b0fd348f-5bdd-4b85-aee0-026b4e270cb0": {"doc_hash": "f6462ab1cb449c722b361f88e3c3ae2e374b3dd53d98891ed1bc98b950699b25", "ref_doc_id": "8f2108f9-9ca8-40e1-95ff-406b0629315a"}, "91a9f52e-1767-42c2-9e23-4aa5e1d7957d": {"doc_hash": "f2b8dd94a82637a5d36eea3f60e76c389adb0dba70b713c8aa2a131754228a6e", "ref_doc_id": "a4417c2b-bcec-4c78-ae7c-792c24060a77"}, "890112b2-d1ec-42e6-88ec-02f40f9ff734": {"doc_hash": "979c520d7c34057676123975296412a08fd695ff41154c8f3bc56e0f2db6a6e4", "ref_doc_id": "6350ea15-0206-4253-9718-fbcd3587e071"}, "3cd0919c-29dc-4411-a5b0-d9d68780255a": {"doc_hash": "95435ad764f1973bde1f4466c3e105555703758c070dadeeec4298ff6ff61742", "ref_doc_id": "6d11e0c1-396f-47d3-83b9-83bbcd2d25d7"}, "799b9920-3b8f-43c1-bee2-efc2194260d1": {"doc_hash": "8847d7b5e2da5f9b48e1037ede768a909199f9f406dcf8423fb350f5ea3cdbcd", "ref_doc_id": "d2e31e26-eaab-4475-bac1-c4f653e00610"}, "cbb34f1b-1869-4469-b5ec-552735a9b329": {"doc_hash": "01e56613444429826d77d42ca2931bf9985ee50b61e0911cabe50ff62b611720", "ref_doc_id": "2e59d76c-f196-44c8-86a9-4c078bbf38b2"}, "e64fdb30-ecb1-4488-bb61-facf45569c0b": {"doc_hash": "26bc0df0a3c83e884eb2952c937bc23eb1f32d9fbd31e91199e3e22fec7460f1", "ref_doc_id": "d9e7609a-b1e8-4256-95ec-409d18e1b8e2"}, "23daad27-fd80-4543-bcc4-6269007533e6": {"doc_hash": "ddb39e84c10f818abb3b558def6b0e394f7dfde5d2f261c64ec3c64d46a90b7c", "ref_doc_id": "66f7c7a1-9b8e-4577-af30-ba27f054fbe1"}, "f22d496d-fdac-4b2a-bfe9-ca968c44e58f": {"doc_hash": "031423ed0cee77cef326d958ca358da9bd33a0635fdbc312d3a655fa20cbfdd6", "ref_doc_id": "38b6e540-9bf6-4380-9766-667d13c44e44"}, "8b6b0983-0f95-46a4-b7f1-1a9985c0f824": {"doc_hash": "30a0b98912cab662f5798fcdac7d85111406f68317802e3ab318bda30bdfd0c9", "ref_doc_id": "6ed619fe-34f9-47e9-9647-da4041e186b6"}, "372b40fa-51b5-4398-89f3-b12b0faa7105": {"doc_hash": "280df94f40e42f19bc9097078cc08f5b3048420374dec8382756bfe11997cac2", "ref_doc_id": "bf7cad1e-ec36-447d-a6fc-834160aee001"}, "3b261782-6fab-4a58-b9bc-125587543f45": {"doc_hash": "8fe8390e8eb14a5c85a38f072e5642a7e3da0e3ef7b5b3e7868d19c046d54c41", "ref_doc_id": "97e6ffbc-0027-44b0-9d5e-a51446584ddf"}, "51a90574-87cf-4086-a9da-3d289697dde8": {"doc_hash": "7019f6bcac1aa133297a5b63dab5d2733c734b0d524a1ae1a53e7932cebd8548", "ref_doc_id": "d9702fe6-e7c4-4384-8759-55dab38049e3"}, "2ee2b17c-f240-48b2-9c0b-af6c697ee4dd": {"doc_hash": "da0d28e2e8b110ecb40df70e6ec56a177bacfe9dc252dabc0619af8bc2f8eff3", "ref_doc_id": "f9b9cc8b-e3a4-4ebd-8fb1-0f0dafc07391"}, "9ca7183e-2c2d-411d-acad-c51948c13b30": {"doc_hash": "29682a28b3f41ce77284ab5d202ae4751fa162719317136c40fc4ea18f879810", "ref_doc_id": "b7d0e819-7277-468a-a1fc-3c5a23b573ac"}, "6e092187-120a-465a-b0a2-30acab812dc0": {"doc_hash": "2e6b01412c2d083e633014a9f090343d81c2aa15c0ced37fe414aec603d50c21", "ref_doc_id": "8adf81da-ee6b-4ba6-ba04-9d3d38a8af94"}, "e3559b95-c245-46f4-9c56-b2b7d15c7f93": {"doc_hash": "9da5118da5bc7fac068b39acf80a6d9f5654cf84f9a2c08619e84647a1f5e485", "ref_doc_id": "1bed0ae0-8de1-4101-9dbd-3bdc3f94009b"}, "57450c33-f137-4b7c-a434-94e8e4782e8e": {"doc_hash": "b3f1f8615e5537c1c045ab9eaf2b2dc91e74f4b5a859bece690d6a875b4035df", "ref_doc_id": "1bed0ae0-8de1-4101-9dbd-3bdc3f94009b"}, "67e86cf0-ec9d-43aa-b07a-a5d56b796001": {"doc_hash": "59e62f4cbef9823e112613469dd837957db3c117b8e84a3307bfb429ef0813e8", "ref_doc_id": "1bed0ae0-8de1-4101-9dbd-3bdc3f94009b"}, "58aa267d-4b57-4bbe-81fa-183707c5aea1": {"doc_hash": "82e203547749d948de814c299ff79e8b01d8e371ad0d98dbe53f5e01b15d00c6", "ref_doc_id": "b6f0b1b2-2e91-475a-9be4-3c326b6692a6"}, "f311e31d-029e-4eae-97bb-287d700cc7b6": {"doc_hash": "39edb4a4b5a3e11a80ed10319324e10921e6c9e0c322f21fd93a1fe92a908acf", "ref_doc_id": "d7e82590-2655-4148-97e5-6c8858dd8207"}, "43bd16f8-d834-49ee-82b4-fc0c1747f4d9": {"doc_hash": "13d7052a95346b8468ccf62bd1966b182fbc82c7b5ebf869a5602c87dd5232ab", "ref_doc_id": "1dad0152-b339-4d5b-afb2-545f76225144"}, "cb701aba-7049-46c5-b66c-250100e765f4": {"doc_hash": "80cd8f42ebcebfd4eb1dd1b74ebdfe73c94b28bdc25981b27e0b86936e10ba1c", "ref_doc_id": "4944cfcf-209c-4154-85ca-7af5dcafa297"}, "7c0b040e-abfc-45a0-9556-c674b094f1db": {"doc_hash": "3658098ff0ef440884dfe2da1525f4b90b32366c157989f3c97c3f27e0650ed5", "ref_doc_id": "4e164241-db65-4bbd-9b55-8e826f0ed769"}, "1276f9d6-5850-4eb3-b575-aff28f3aac9b": {"doc_hash": "7fe1c14777c91ead422ae674ace752aca8f5e8f6f9feea6abd0326de66088129", "ref_doc_id": "559d3393-737b-4973-ac0c-1c4053d18064"}, "f0c78d05-e777-4b0e-8983-f103607e8d10": {"doc_hash": "488855d983a06c2d3aee19dcfad993db8e5e45ab35807bd08c21868c695518d7", "ref_doc_id": "37c0d72f-6c52-4add-91d6-6af2261f7a19"}, "62964911-0ce9-48e9-8c97-0a06bca9b9e8": {"doc_hash": "9270cbd8e0cc368a691c067e4a44197b6980069f6e2a374489b71392409f3ea5", "ref_doc_id": "98a7c29d-818a-41b0-80f7-566f0c25bd0d"}, "6c852197-2ccd-4605-9a5e-3c53661a9a3a": {"doc_hash": "41a757454df108e67b8052bdbe68920292c37f455e5fb6dfe9884cabb0414e02", "ref_doc_id": "158ebfb6-2b0b-44cb-a90f-8265433b43aa"}, "99335ceb-dfe6-43e5-a9a8-a394c7c0f3d8": {"doc_hash": "3f914403ecf3176b28c98d306769fe318cfe9f4e6748130f5be9dea974860f56", "ref_doc_id": "03d20b1f-3088-45ea-b30c-48f131bf6210"}, "48f7e8e0-f31d-47e9-a82a-77c791e01223": {"doc_hash": "c76b681c1001a7695a3f8929598f06b0314438c3f27d2c50fb906e46d3f9c3fe", "ref_doc_id": "d3511a93-f31b-47ed-9123-1db43f75db36"}, "ba85c09f-eeca-439c-bdb2-20746b277c51": {"doc_hash": "e2d117c8d754b96c1219668a3f74296f1fb1a4209b85c256d9763096d50ac6b4", "ref_doc_id": "10c864b3-12e3-493b-85cd-b66477a640b4"}, "92551a94-5a76-49b3-b0b4-5b89549d5cc0": {"doc_hash": "f69c64a5d75de67b0499798e389bfab1fdd4b4966697873a0c45f116154c3f78", "ref_doc_id": "9d6018c1-d7d8-46b8-b9aa-27e4a5593414"}, "7a19232f-14f9-444d-9fbf-dea1560cd52f": {"doc_hash": "2ab85dd806b1058b034246d01d6195ac20b8506a089cc73c04e811353bb9440c", "ref_doc_id": "3785f86a-f795-4fc3-8d5b-57380c0b5454"}, "a7913ba6-8abf-4be9-8955-5b651f2e39c6": {"doc_hash": "d15a2e79086b28bddeb536b331f61c0d3effa3b5f3b90c205819ad1191e13a01", "ref_doc_id": "ddb55fe3-ce37-43f6-a197-55ce72b546e8"}, "d8c81569-da9f-4d1e-9522-10bb14e1ead8": {"doc_hash": "9c02a5e74ff72f024f54b2781794a8c4847d5b6f07f7bdd40f20fdbef620f505", "ref_doc_id": "1c3b9119-c763-4351-a029-d8176748e49a"}, "b215efad-a837-4720-bf49-c5bd1c160a3b": {"doc_hash": "8a199fb13539ed3028668aa450dac50a0f9e4f889bdf0ac36c5592f9ad5abbaa", "ref_doc_id": "d24b6914-40bd-4c8e-80dc-215ca13f0a30"}, "aff7750a-b8ee-443e-9567-c511bb276073": {"doc_hash": "cc0737da4c162172974d9d120304eafa0fc372d7a1c0a78ba2ca0fc6b35ed801", "ref_doc_id": "62d2a812-84a2-4b7d-988e-5b48a2ecc60a"}, "75fd2a12-6f14-4fb3-b90d-afb845629938": {"doc_hash": "62ec1c44817a00beb52bc18dced6a56bcb6b63eb15f62a29e6ea8323a0983b66", "ref_doc_id": "1c386962-7580-42e5-8a3e-cd90f5b62749"}, "e6fa65d8-4559-4f89-a46a-de8e004e1989": {"doc_hash": "3ccb1c2dfaf2d8d3d718636d505ef602cb50a54232cc2cfb4a72d1caba4b6834", "ref_doc_id": "ae37075f-78f2-43a5-96a4-7dd4daf2a986"}, "20380602-cabd-43df-aa9e-a754fe9bb338": {"doc_hash": "7cdcb6e88948e451f3c544615b09b645ed87ff674737aa4279e917db95b533c3", "ref_doc_id": "05ef1353-2216-4276-8979-b308ab3505a0"}, "3ccfe536-b020-487c-a181-2b15a4cbbb63": {"doc_hash": "c33e7e7f03d473ee148224de9627690258ad41ab749d7a78413ef0c8619ca454", "ref_doc_id": "cf222b8c-7d58-4843-8345-7a17e2697730"}, "675aa5a0-37e8-4417-b03b-28b96c858333": {"doc_hash": "6f6a13aa8aa1d8caeafa374f073befb0752e8617226cb119bd43506753840d1d", "ref_doc_id": "e03b46e2-1d3e-48b4-9b81-13bcc41d6e39"}, "51ccfca3-9e80-488e-bc7f-164a04cd2be2": {"doc_hash": "3f3c9134e384c6556e895a093de964be940c4714b7e4cf8daa0e191475c82137", "ref_doc_id": "8257d49d-1b2a-4c05-a3ac-52da3cd51593"}, "ebff71f7-544e-44b5-bfbe-81cd8b005558": {"doc_hash": "7fb603a5958e3d9848589c79f013cd97dbe5e0d39530b78d15dd3edc2534e9c6", "ref_doc_id": "3bb978ba-518c-4ef9-bcf7-5bb5c92b409d"}, "c0464c49-0e9c-40e4-a146-e45cebf867cb": {"doc_hash": "956f7bfe832b180d0beaa39ffd17312636f7e0d1fdb00f69e379133b3704c103", "ref_doc_id": "ceaee474-275a-47fc-b924-2c2427f6eae0"}, "00480299-c7fd-42c9-b6f4-0ffaf7ea352d": {"doc_hash": "cfd4ff179720a7bcbd6954360f0d3478faa8856b0faa8c8dffde788c413c8661", "ref_doc_id": "a1d7f444-9de8-4e00-afdd-932cf54f89cd"}, "e8009d68-acd7-46b7-85e9-f2a0d5ebb42c": {"doc_hash": "e4150b63c53aa7f32db576bc8bd67eeb1465510d33413af22a49592c9961126e", "ref_doc_id": "baad1fa2-7af9-4df4-8f23-0639e2aa031b"}, "8b79e063-e0da-4c6a-b80f-114ca2ef8a13": {"doc_hash": "3b3f3a8af95a7778aa9602ffe3de0aee10b07ee2228529679fdcf4da95ed2bf8", "ref_doc_id": "12bc953c-96e3-4705-801a-376347ee59df"}, "baf2133c-01aa-453a-be80-78ced4d437ab": {"doc_hash": "61fc3bce6920ad85a5f067dd0a4b54a61be4cb632c665995ad90f8840128fe7b", "ref_doc_id": "ea107150-94cb-473e-b97c-e7e91768986d"}, "08eb1c1f-3642-4ce8-85eb-29b785901b37": {"doc_hash": "39ed0952e09b7aa20c0c6f91136cef088d0cf44f92ad9a541831b4a936bb9ec0", "ref_doc_id": "2c814c7d-18d0-4a21-ba32-34f97170a497"}, "bba9da09-aab6-4d14-9656-d146fe65bb79": {"doc_hash": "14b5f7cbe17d77705ff47c6f177bad2706e3294c6d849d6122cfaac541914706", "ref_doc_id": "82888a98-2bc1-4583-bf6b-79956ab74a22"}, "bda455ff-4b13-4e14-ac65-7b0cd404c1db": {"doc_hash": "a5a2684fd2346c107ed96e4ec329df6fe2a8058165d43716600acffbbc32eeed", "ref_doc_id": "e726c48b-0ebb-4ffa-99f7-d24c1f379003"}, "dd177d05-55d9-4da3-8ccc-12d33daf35d7": {"doc_hash": "e37d9b4be9654ce0b24f06c2b3a480570f7b78f6f200ebeb6ba5dac1669965d9", "ref_doc_id": "2b5fd0db-b1e4-4ede-b954-35b489783791"}, "ee986c72-d1a3-4b66-a1c3-5de48ef78e45": {"doc_hash": "abf1ddcaf49911a064ac09e437735aba410e6ef6379d5350308e7f5c20a6bb66", "ref_doc_id": "93f7c788-06af-4748-8b39-4c1d3f56e545"}, "35d6fe89-b60e-4a58-9b79-af4dcc8cd631": {"doc_hash": "fd4e35d4e8d0912d28235f32f1160892679a48e2bd136bb17701a9630fe830f1", "ref_doc_id": "2016e50c-034f-4ffd-96da-d44c14125cfe"}, "d70293ae-84c3-4411-8282-9b51f5a68533": {"doc_hash": "dbff79d9bad06c8043fd8ad54286f9211dfe6d24bced12fd5bc0fee92d789c46", "ref_doc_id": "a5b91fec-a11f-44fa-bf4b-232e0070a308"}, "43ceb549-3a93-463d-bcff-c122fa808b46": {"doc_hash": "077526e0acec0a26859b7382110a1677d513a9456c1d64c44c0f3ca09761534f", "ref_doc_id": "bb17e666-b7e5-4054-9001-2b5b109939c8"}, "21b424f4-cf9e-4c3f-a978-aba640343669": {"doc_hash": "74dbc0a1b23cc1252ecd222eacbf2293cafdfd4a9fa6df3ee0472f37fa3486b3", "ref_doc_id": "f5a205b6-1f4a-4388-9634-f6e4aa008177"}, "3a46ba33-fd4d-4ff2-91e9-8893958f96ed": {"doc_hash": "4a7ee9ead6277cc23f7f2dc257f3d7fed4fe1035f568ac2d1de0a9f5f529a88d", "ref_doc_id": "fb1bf3dc-e053-4443-8804-e91aafeeb452"}, "1957c8bf-245a-454c-a471-1ce5ad31e1eb": {"doc_hash": "8570be22d9ca3c140eab7e2a8e7d8616d625484eef5ddf5e9062a215b8bc9ec7", "ref_doc_id": "3f7ba9bc-cd29-477f-9e76-ab8f0e0b871d"}, "8ae5783e-f728-4c1f-ac0b-20d6f2e10dd6": {"doc_hash": "36813598a7c1e127ad52c08a75743b82fc0399db206fcfcd25bc266ccdc3d608", "ref_doc_id": "4d40f815-520a-496b-9477-c754fe5c523c"}, "14b6cba7-5bba-40b6-9240-a642af2953f7": {"doc_hash": "7ab65679260876ac2e9b49f92891d9276089d3db3563ca63cbafcb70f2abf636", "ref_doc_id": "d619a671-8390-41cb-9b86-56c068fe07b7"}, "a7d7c512-0ac1-41d6-97be-26458690334b": {"doc_hash": "e67b6da2780d1387d41ab3b17d3c2851945a6b874c9dd626a7d5dc46a4d966d5", "ref_doc_id": "ae4e1199-2d9f-49a8-a7ce-6116ef320f62"}, "dad646de-8764-4bca-881d-e3ebe05e96d2": {"doc_hash": "7a12c383d610f3e30ce55339900439dd8394dca37c0d1fa9438281e2033aa21d", "ref_doc_id": "876ddc53-d04f-478e-ab47-3902f8fb2425"}, "9bbe75e8-71e9-4d2d-8750-647e80b708c9": {"doc_hash": "e39b9df6efe6ce32754a69c95d9ee9e39eaa9848f3bc4294ae7d65bc62cdafa2", "ref_doc_id": "e8be341c-3dc6-4428-9356-ecfc9f712dac"}, "0fdb1556-102c-4f1f-b16c-782b6201522b": {"doc_hash": "0269f585852a70f70448719e4f9389a059dd24aebf81f346be9088cd00e8d204", "ref_doc_id": "a6d6026d-d67b-480a-bc73-5bf4b3f1a969"}, "260cb67e-92f7-4b28-8c0b-c31b848bdae4": {"doc_hash": "2d501b2082808edc736b22a18833c45c42fc09e6906e9d8a7e4d76242b2e48a4", "ref_doc_id": "b1be4d11-e41c-4c0c-8a75-94212634fc6a"}, "a883dc45-9050-4c89-8cf1-c31c71c1f5ee": {"doc_hash": "b65f411b21c66170c3e4a0c09c4e03842d6b6c3fde175537264a11520bb9a7d1", "ref_doc_id": "6984a120-3107-4103-862a-baf3f3011dea"}, "d51b6eec-2798-4dea-99e5-020892587ab7": {"doc_hash": "9eceea7e4ea364011a61c1ffd9d429285fe239455d27a8498bee7543ce3add60", "ref_doc_id": "1512dd2c-8738-4424-b798-19e468b80f25"}, "218ad2e2-bedf-437f-90d2-7ebe938afee2": {"doc_hash": "1ba38fa4ffd3400b5fa8aa4eedfc311db2f493575a6e9fad033c493f53ca200c", "ref_doc_id": "c67f00c0-a677-4dc8-ac43-7c367a1a3246"}, "6251535a-9dc5-4146-bbfa-5f3ed67db738": {"doc_hash": "18ec54eedc56a10e2bb2795afea17fb5358688b8e817c1b2c014ea2d5b0471c5", "ref_doc_id": "0b50f383-99e7-465c-bd21-64919075993a"}, "04c8a8b9-b3ff-4a6c-821d-fddb8ab76a45": {"doc_hash": "7e7be4b2d7d9967f211b8e499e2f6217c6357c7892bac276c890624c6239ed45", "ref_doc_id": "b19e5063-f1c7-410e-b848-00dcb0b32341"}, "5444f31f-5130-42ae-a4b1-0085bcb48670": {"doc_hash": "253ae7f18cc117308f6cad3c13fd67c4cafdee86b9444ee6dff93aaa8d0f6964", "ref_doc_id": "883a4cbc-5b3c-4a8b-9ecc-6d56add48842"}, "edcc3661-1d75-49dc-92ec-ec7db2ecd09e": {"doc_hash": "c329b8769735f3080ed1beef8512ced33ba50fee5f7ffedd4ff35749df7fb5fc", "ref_doc_id": "cbcb5efc-7380-4e77-a9c5-1a352ec67816"}, "59e4a2de-0d41-4798-b15f-0f0aae662c85": {"doc_hash": "d664efd8ac8725209f1758c626761698959a2dca9de68f47358b743f2abc2f8c", "ref_doc_id": "16bfc320-fa12-4597-9158-f7b5060f74f7"}, "4c1bd854-f82d-4ca3-85aa-42ecfec33433": {"doc_hash": "ff5954ca71a2f7ba63cf711688baa86435ec16dd21f0a6c3e5333027e3291c2b", "ref_doc_id": "dadbe380-9c08-476c-bcd7-b25e4712c2a9"}, "80b676af-96d1-4b61-a5b7-c4cf041187ba": {"doc_hash": "5a13051afabc929ac2ee6c67a23234b625612494990d17d51a36e150b1dc9bcc", "ref_doc_id": "11012a6c-eeec-4d81-ac52-a1a096e2a691"}, "f5ea9e7b-887c-414e-ab98-c2a5405b3d79": {"doc_hash": "8234cd29af229a4062db888745fe8b06e05b1d2b11b1351c134fb451e44fb4c9", "ref_doc_id": "fab48aeb-5ac7-4c18-8020-856e279fd32f"}, "3d991926-5fa8-49c8-ba64-a0ca1daf97be": {"doc_hash": "c29a99b29cce34f4412078fb3385f419181a2e9004defd4618c4ff72cc8f1774", "ref_doc_id": "cc5230cc-8299-4d1d-bb7f-2036f06ff729"}, "ba6882b4-2c71-42bc-8d1e-08c71db91ad2": {"doc_hash": "1e36e0c4499ace5452b9aa94899fc6a807565f253e39c9fcaa56c3341bb846f9", "ref_doc_id": "bc4e582e-6d5b-47c9-bcb1-3c5bffc6adcf"}, "afd8fed0-4a89-4744-9fc9-76f8737332ff": {"doc_hash": "5e51dabad05babdca37ff7be86cf91276644bf53b95b7e6c5eb979c1f8aac868", "ref_doc_id": "1322539f-9a5b-492f-a03d-39b84d23e53a"}, "e92fd708-263e-4157-b117-680be0173605": {"doc_hash": "90d9138b41f5b59274180009a4e3da9839c0bd43c7a36aee58c3d9de0d67cd1c", "ref_doc_id": "8ed59976-2676-44c9-a796-d9a0f5602b80"}, "ceb5b647-5d31-4238-a06b-a9438dcf370e": {"doc_hash": "0203e11aaafc28600162f364da5bdd0dd63c305f89efb81abeb5e01b1819cd9a", "ref_doc_id": "33b20e71-0905-43a1-b409-dd859f842f7f"}, "72d263c2-a03c-4714-a508-a75c5544d5aa": {"doc_hash": "f1384ba016acfeb7ff978e93c3b4a43aa2d2cc5bf2d8825f0efcd2243c8a1a5f", "ref_doc_id": "517244d7-1b7c-4563-be2f-662771fe1d1e"}, "ab8b169c-2d17-40ce-855d-49eb5e98196b": {"doc_hash": "228e7c2f7a41a7ebbe5bb49aea540d331b07beb01019cf68da685e815877eda1", "ref_doc_id": "e4be3a3c-b00f-4dd1-b3a4-271c552f0147"}, "53bf067c-4e23-4418-8b67-30fc5471721d": {"doc_hash": "779b97c7d7256daa8102e7acfe1c9db603ee222e14f5f48ec0e4b9eaa51a2ec6", "ref_doc_id": "130a131a-e3f2-47ce-80a7-350a6492f683"}, "43052fa2-ea0c-4efe-b86b-a6501cf489ba": {"doc_hash": "c5a010eb4b73c85ca0d0fde73fed4ee793ac2f65a62816fce7e867e8e2ab07e5", "ref_doc_id": "407b5493-35db-454c-84b2-78cf2a07b485"}, "b19a58c1-1d2f-450a-983e-3de78506ddf6": {"doc_hash": "b2b922e0733d14c3e273192ec68bf4e25ea768f0f66ee816ec326c84db2be6c8", "ref_doc_id": "d1a459e1-d6be-428f-8373-b399b5641d83"}, "0a3765de-aaae-4305-886d-51c802153a47": {"doc_hash": "fc732ca9c40ddfcb50ac620ef362a2c83fa83c0824aee24d5404912874930863", "ref_doc_id": "7c6f237b-d586-4352-aeaf-6c73f0c90c33"}, "c5b18191-9c25-4d4c-82e8-200acf9efc03": {"doc_hash": "2e60499289ed0d87b8fcdf0cc955e781834d6dc1281f599bd43a66a19e153210", "ref_doc_id": "548fa7f7-bbb4-47f2-82cb-f5b459b95ced"}, "c8c60a44-a1e0-4110-9f6c-c6306746b8ec": {"doc_hash": "5ea1c56ef95b77ddd485ae3b072f3e7a97bafee781f82befa31d9f381069a1b8", "ref_doc_id": "539cb582-1319-49a6-9f2a-1f25097643ea"}, "42170199-6641-43a2-a43d-ccef56ffa03c": {"doc_hash": "c39a897bf0ddeb2a591fea9979fd960dff9d4508a6c5b08da01757df63148b9e", "ref_doc_id": "028641ed-39d8-4ddd-985a-11731f105b4a"}, "3692206c-e9c1-4f07-82ca-072fa7b91a07": {"doc_hash": "e32f098dbdce8663cb19a98acf9c33eaa3260d0ecaf8c77afefad2f59bb444ba", "ref_doc_id": "457cf3f6-01f1-407b-8556-1cfc2837bbb9"}, "dd5ea695-dee7-4875-b28b-764449128450": {"doc_hash": "e65f8b2dc90768c551fc07654c6f8c8b77ccd8121c1da0cb6a951eef899b06ad", "ref_doc_id": "2936cbff-3487-43b8-a90c-b95311d06f0f"}, "d18551e0-28db-44fd-b550-681c1e2d4069": {"doc_hash": "2f3abd3c42ff81474f129bbf4a08d25010a31f496da9406d74d1a7ab7a715405", "ref_doc_id": "2cb2d22a-e4e7-4d68-bc32-69e7ac3287c8"}, "3cdeddbb-f961-4f46-ab91-40c5872f09f5": {"doc_hash": "17e87a3526537696047fa7c3ef23a6d60f03805c6fcab60c1489aa6af8e01ac4", "ref_doc_id": "61b2bd79-aeaf-4882-b9ea-8a93e8614b8f"}, "78219a75-7aa7-4444-8024-f60328c9514a": {"doc_hash": "e9a7c16a412de58fb86ee94d9d88bf61ae1b071f1ddf5fc97b0c0645293b5a1c", "ref_doc_id": "1fd11c13-f78f-4511-a6b9-153ab32a0350"}, "a90b891e-db9d-41fc-8456-52715b5ff9a7": {"doc_hash": "f952b680c8ecb3feeca4ebf76c29f0c197b798e2c0d49b5e7427ffdab60ef363", "ref_doc_id": "4b4db1f2-d6d5-4c2a-994c-b5458a6a628f"}, "82539f0f-7457-4759-ad04-0cfc31084464": {"doc_hash": "b4809552e79c5b2f2f91f4ed1ffb1544216af7eea541fd0698ee87d8d84ab949", "ref_doc_id": "d4355c97-b555-438a-8f09-476c4a9a4259"}, "31cd7a5e-093d-4c94-9f7e-de7ddb2e9fc2": {"doc_hash": "3e1291819743af7527665ffac29a5acc22e9ff23c760200a2c73e2a0672403f5", "ref_doc_id": "842d5836-607d-49ab-b5e9-444ab2cd156a"}, "4c63c702-24d5-46d6-9367-a931d84b1b57": {"doc_hash": "6e6d415e551b4ca690a4abc7ba15ad1a99365f7123bfbf0bcdfda92db97af3ff", "ref_doc_id": "a4d65481-ca5f-4435-922a-d857c433da89"}, "9643f40d-7b1a-4a05-bc15-10a061364113": {"doc_hash": "b86aaee2fbad47c3cade899ad431c2a4aff6fd74e0059e6ed7a58232bf34998c", "ref_doc_id": "ba766128-c191-4e19-8325-57fc2d1a20fb"}, "e593e093-c0af-4185-863b-f8a944e80226": {"doc_hash": "f823a409d03181d35e7154d3e9e2ca55a133eeb2b78294cf1ab5aa699a9e22cf", "ref_doc_id": "2d667203-d272-44b4-82cb-93f58a7c8bd8"}, "cdba7295-cc55-4f42-876a-6aeb6c04f577": {"doc_hash": "599e4c773e04e733d57075dc871da9a947b831bd251c07447b321790b2238e56", "ref_doc_id": "cffb763e-45bf-4f87-adbd-8b0d0962e658"}, "f72918de-e48a-4835-836e-10fd59d3416a": {"doc_hash": "4eb0b28556b9f2f684245ee43f7d3edccdfdb821735dbfa0dfc4962242a1811f", "ref_doc_id": "7a945c94-d5ba-436f-8ce7-67d43aef23a2"}, "39c8c0ea-31fa-48d3-8cc5-ec621c7cf73c": {"doc_hash": "dfa3ab3a2c0b2169669bc00b9e9740e2fe84cd651c3ea0d0e025613948b9c0e7", "ref_doc_id": "6610be3a-878b-47bc-b230-937cf9c3f9af"}, "5884a394-8f24-4c34-911e-fc013662041e": {"doc_hash": "4fdef919590db8210c9f78443ab104aadbe7c8eaff774350fea19e0df7349441", "ref_doc_id": "d5511293-510b-4489-8c1f-96dd238acdab"}, "f7000349-2325-44c2-ad54-f35d6d54ca9f": {"doc_hash": "eb5a888d58e32288db43d63d831c0af94f378e54b5c4fdd81239300d7c82b161", "ref_doc_id": "165931b9-bf35-41f8-b925-7a617ecc7ddb"}, "b98997ec-68ba-45da-8f8f-5a0a2d838e4b": {"doc_hash": "7ff3332ab6c7142f23d29a248252455be8d258f7055f0dcfd9de03e58f8bd61b", "ref_doc_id": "91110072-c5e0-4824-b744-901cbf470249"}, "fa530b26-1615-47ac-8648-ee999137ffbe": {"doc_hash": "36289157c814b692964541051e4b37c61f4b90ba708a8d41a404ddd70899edc7", "ref_doc_id": "99b52034-2daf-4c1c-b967-bbcea0533c95"}, "5fe80c59-c0e7-4b0c-9a25-3d4e9b004ef3": {"doc_hash": "4f599e71b81ce708a80052c9283c7ac00c7016c731cfb02d015f9472fc6037ef", "ref_doc_id": "a1ac84bc-643d-4ab2-ad8d-9b446e679898"}, "da583b14-65c0-4e94-901b-4906f2bed945": {"doc_hash": "07a7dd1111e3bf90d0a3abbec33158b6871eed53a6a4541f564eee39ba1dc194", "ref_doc_id": "6ec4dbee-87be-4943-bfb1-b69106e56285"}, "8c8df2c3-7874-4f1f-b6dd-2240aa7f1901": {"doc_hash": "413350ef8aceac65f181ce8e8d86853503a0e4bd08db5f279cec3ea4b2395e38", "ref_doc_id": "214e3a21-013b-40d6-a1e9-3fc880d3629d"}, "01c7aec7-d9aa-4ca1-a6c4-eb342d0e6340": {"doc_hash": "d288ab5b1f45831283fe453e80cc1b39a7fb117507205f04b704b94335a18ee0", "ref_doc_id": "f1e2505e-e74e-4814-8fbd-7d27de61db29"}, "9dcc3ce7-63b7-46b4-9242-e9850683f614": {"doc_hash": "cc914853614edc465b218e9bc60d30a5a618dc31d5dda64be2024cbb33635849", "ref_doc_id": "f45ec9bc-30bb-4a64-83dc-37e7ff21933e"}, "01e722f6-2c30-43dc-a581-7149f7c49c84": {"doc_hash": "bef0cc6829f3a63846efa02d1c5015326020d816072269f61125ba9f4f4b01d7", "ref_doc_id": "014d65e9-08ec-4269-8550-d2f83edb75f8"}, "3b04e5c6-776c-4206-b1be-627cc1b82fcc": {"doc_hash": "aa0f0728263ea9f25857ecc8b5925a1dcb39e7a38453df81d15c542f8e05c7bd", "ref_doc_id": "aa61189f-0f45-48db-8aee-c75f94c4a4c9"}, "bab3a49b-6ba3-4248-8891-c97b65a373b8": {"doc_hash": "6a0ac2d20044bed0043d4093e1344745c2fd0f808aec21f39673c20a31c2a8e8", "ref_doc_id": "e08696ee-af66-40aa-9392-1368cb5755f1"}, "9e9c4f42-4305-48db-901e-92bafac4674c": {"doc_hash": "9132274d2804582266494d720241cb6d3c08e18f7c5efba8a94e2c355c766764", "ref_doc_id": "0377b52e-95cc-42f1-9967-d4a79d2a608c"}, "59281d9f-d4b4-42a1-b871-8ebf64efc5d3": {"doc_hash": "091278aa5aca2469f74a73f8548abfe73b8fa8efdc2551eb7e7a73e3c86d7cc5", "ref_doc_id": "9477f9f3-ce09-424f-90da-1c7ef0922361"}, "dfbd2ab9-ef19-4d75-9acd-c0f68ef4876a": {"doc_hash": "5d365f6de482c4565fe8d851490dc56c56d85718f22fc151b0f4ca17b16122ff", "ref_doc_id": "b4d37783-faf9-4ec5-996a-94647d84e20e"}, "2e7b29af-d9a1-4e89-bc7a-bd5741d736ee": {"doc_hash": "6e83a80e6ea9d20c78fe7c3c78a33aacd2bbe1973e6be263e5fbd0dadd77acc9", "ref_doc_id": "fe1726ee-6806-4c26-bf31-57ed3f7611ca"}, "d98055a5-664c-48ed-8324-a4010d5aefc2": {"doc_hash": "1bb5e63f08edba1445eb49cd4d2f0e734469f253c4372691d459e793f178eee5", "ref_doc_id": "3fdd0d22-f411-4346-9819-1c1ba92fd8d7"}, "6003fec9-67d8-4bb2-ad58-621311dbe713": {"doc_hash": "ab711d0ab71da747d7cd5372f55122824df3d527e5c4b7d64348705e944e6216", "ref_doc_id": "8416965d-b33c-4570-bca4-5496e58b141b"}, "762eb054-1743-4d3b-abc1-89cb78c78c6b": {"doc_hash": "98674e6b1140cfc371ef99025a6712c716b8759e37908ce8932b5ad8a60ae03d", "ref_doc_id": "bf8b1ac5-3d41-486f-804b-87474480908d"}, "472e3e1a-0297-44f8-b140-9b8dda7d1501": {"doc_hash": "5dc797dbe3a657b10d9fa890849cba2c6db847b0d13bf2054fd77a56d51d4109", "ref_doc_id": "f9b84565-3152-4bb2-ac2e-8f878f1e53fc"}, "b96b2fd1-f272-41ef-b439-18710d29957d": {"doc_hash": "0815ebb3b3a73b929c84a685042bcafe106336249a90e29098ceeb7ffa08d147", "ref_doc_id": "d8919ac6-2966-454d-bea9-d8e80772dd07"}, "b2076c10-0578-41da-81c0-61310f463540": {"doc_hash": "b5973662750a8a6ee5d4d48c82e962fa0469083ae1c0b9ead8943fc43efd0a34", "ref_doc_id": "77acb53d-c679-4d36-84a2-f17dee175bd9"}, "6a1cc5f1-cc51-4f39-bd79-fc9866049b1c": {"doc_hash": "81be74b05ea126482ec165e996c3ae363ab59315de1f9ff33e09b0afa15011c9", "ref_doc_id": "54188f3d-1f91-41a9-a267-e8b1462f4550"}, "005f11ee-ea48-4a34-9526-847f1422613f": {"doc_hash": "d3317cf3fb3cf23749d5943efd3d781a40eb4fa5d7c952f4d5952112640bad48", "ref_doc_id": "bba398e9-39d4-4bf1-b111-352d7ddf10f0"}, "3f877dd4-c395-4447-955f-c0212e6f777e": {"doc_hash": "e3cf975353338736219a98ccefcdeab977f1fe94778aa4ba4139beffad8b47b1", "ref_doc_id": "04554470-6ccd-428b-99f5-89cbb40708f3"}, "16cacadd-9fc6-4f5a-9e50-0467dcc80c3d": {"doc_hash": "c38d389f555b51332cbdd4388982f3fdeb5047f08e8913ac8f856a71837e9ba0", "ref_doc_id": "b90b941b-3750-4ba8-83f3-dc3b5b867b7f"}, "bd884a08-5754-463d-bb27-34e23852e1b3": {"doc_hash": "1ae3acd4e49085af923b81de081fa3aca18ebeed7e42b201456fa48120518e34", "ref_doc_id": "086c144b-73ae-47a1-aa62-5d9379606791"}, "c7f0d252-448b-4acc-890b-d4b07fb2d229": {"doc_hash": "adbe10f539feb5079ea408cb56f6ad7197aabd94fea7307511101a791bb5a841", "ref_doc_id": "3710a977-9bfa-4f3a-aeda-713086fc6311"}, "129d0199-d028-4004-87aa-c747ea675567": {"doc_hash": "b66de2abd3fa96243283d7833f2038853367ae256d69e8173c637082cfbed528", "ref_doc_id": "2316e473-5af0-47dc-8029-f57fe058c2db"}, "3ec5e195-014b-45df-a3f4-33088fcaf1af": {"doc_hash": "4678b5ea3a3c197ad86dfcff2b1452fbed6350545eae37cc4bf78e0fd8a5dac7", "ref_doc_id": "66ae3e07-56ac-4e66-95fc-56c5303a3bdd"}, "4e15efd9-b38a-451a-a52a-0d9e3d37c7de": {"doc_hash": "4f6273a93c8c620270668f6ade396183615095227370a0c6457d25258cb08c74", "ref_doc_id": "5f5cdfe8-f192-46b2-a5f9-b2ba6839e380"}, "2bf6f771-2f3d-460d-9593-159c8e3ff654": {"doc_hash": "45361880f496e50902e72806661da8ce127c628d914535e01e45aeb8a1c49e0d", "ref_doc_id": "9084eb1e-a4f9-45de-beb6-21fa3058c65b"}, "72d3ef3b-b888-477a-a06d-605fd8c25cb1": {"doc_hash": "f070ba5f4145203115af719fce48f766710e476318959eba2cd4dbbfa0dc21d5", "ref_doc_id": "cfb0cb10-0fb9-4ee6-ac0c-986e82bdf14e"}, "c588525a-0139-4f00-94e8-7d4c2bf29d2b": {"doc_hash": "f1869c5ff28bbcde2e257df3512db3ef27f573c2a087b615c46ef8aefbc6e4bb", "ref_doc_id": "661001ad-4c45-4086-bbcc-606b8971863f"}, "9babe606-8c5d-49cb-8d66-fae12b506126": {"doc_hash": "ca2c3c8ff1b8a860a11730d8c4bf10f523e6dc88fe6de732c7dd341fd2feb313", "ref_doc_id": "660c4ad9-2762-47b0-b16a-eb2e29eeb473"}, "d8e7d793-0816-44b2-941b-9f9e705fabd6": {"doc_hash": "84cd47cd592818d15906a773dbc5755519d5acb1b0ba283713aaa4d00c30f615", "ref_doc_id": "3e15b8d5-7e3b-4b12-89fb-d28e4a1e9a0b"}, "81813613-ebf5-49d7-8e24-e80a9bfa845a": {"doc_hash": "46db73d5ccbe558a69eb2160ea5fba5797d6ab72c50464ac544dfaefae92aa9c", "ref_doc_id": "beead010-1548-4d9a-8e69-0bb41983a569"}, "5f2b5006-53d4-4be0-ba1d-d38f98b015aa": {"doc_hash": "1f82806b030946b85283b51fc45c369128328e995f41b5ad2cd211fc71615d40", "ref_doc_id": "16fb092f-9f03-4ef2-87c0-f33ddfc709aa"}, "914ea1f6-8933-4846-ab42-7d59535ab47c": {"doc_hash": "c2ae2de7bc55fe4b5b25b8b83c38f1c49f526943f96612dc8afaa7ba2ceb59f6", "ref_doc_id": "42769f65-36f6-418d-9c57-3ce67c55a317"}, "87d900a3-09c8-42fc-b381-c327bf054548": {"doc_hash": "48fb83fcf97646e94ef2cc9a83eb8318121ccaa52715018df66a5b1fce1d1500", "ref_doc_id": "60cfefcd-ac51-4d74-8e7a-1077cd0c311f"}, "9f87f4cc-5cec-4a81-b548-c751ac9a8c9e": {"doc_hash": "b569805929741d62fac16a4444131a4a790ade7f9e39f2b41d89db9dac0af8ae", "ref_doc_id": "a311f07a-812e-4372-ac85-c514bc0c33b8"}, "076d9138-0d66-4147-80ec-35d85560b6b5": {"doc_hash": "3d186a1aee95e5c284073d11cf791d5e1c3d05a4dad62462993a84a85ed7bc42", "ref_doc_id": "0a57c504-e3ed-4e3c-9667-6a4c0b72df97"}, "87f67c42-5e34-4acd-bd35-980f7d0a76bd": {"doc_hash": "1c7bc4da253d21ae3d4c1f04b646347cec093e2e5ec3f790cd4d0bebeff995f4", "ref_doc_id": "ea76278d-4153-4888-a0de-3bc7b34bc303"}, "82518187-ca61-46fa-97a7-ed6238613615": {"doc_hash": "a21940ba870d604e1dacf7b1a081352fff9bc1abb6af23bcb929d0e9e1a01bdc", "ref_doc_id": "c86e13df-b1c2-4861-a65e-9491f4899a68"}, "26b1f3df-a476-471c-b96b-9294ac491c75": {"doc_hash": "894a6274e26bed4dc68ae7e08f613eff197a4643be2f05468f7f156b6ef674cd", "ref_doc_id": "0a681277-6473-4aa8-b86b-5b0544049715"}, "ab676db0-6803-471d-aabf-8fee7a235214": {"doc_hash": "17b3737d5857ba194a98f500533462c2f1833c839591d2adeabbd171a48fc085", "ref_doc_id": "00ee4061-8b57-46b0-92c8-ef3bb8d099dc"}, "179c58d6-eb9f-43a4-9323-959078cc685a": {"doc_hash": "d7bc75505154958e310b1a1c72ea092c26b154b2f3e9443a1ddbd906b4d9b665", "ref_doc_id": "dc7aae3b-f893-4c0a-8fc9-d45a1ba84108"}, "7d37c550-dbf7-4a3b-ac5f-949b1d2d51bd": {"doc_hash": "5345c825bd41778260c884cc145e2630cbc130691305f4746d6443135ce78a60", "ref_doc_id": "8211bdc4-82fc-4984-b253-a5886046f5bf"}, "a38452fc-0933-4aa8-aa34-1766f4ad6158": {"doc_hash": "79038bcedd45d85f4676904ed48f0349a5ac8a10dc6467e2a721478d9be95552", "ref_doc_id": "ebf7421c-04db-4d17-af41-0cb5af0def4e"}, "8efbbdc8-989c-4c03-8055-c1a11713a61e": {"doc_hash": "6d844f0130288c1ccacb560a9fb7f58254694cfb92d0a94cb73ac1ddf7023206", "ref_doc_id": "27c1c53c-86ca-4b19-88d9-e79394ffac0b"}, "be95dd91-d0c9-4487-a8fd-cff3419af3c0": {"doc_hash": "f370ace1985f4c46f123fda8711e7a2958063cf1d14fbf1d2a854ad119bb2381", "ref_doc_id": "1d2d2a63-b6b1-4b77-bdb6-4adaecb5c135"}, "39b6b20a-d876-4920-89b5-bb3e0fdea27f": {"doc_hash": "fb235100b94b2ddc468320447084c1d590975b6dcf7eaf1f1d10019e85d9c350", "ref_doc_id": "1d2d2a63-b6b1-4b77-bdb6-4adaecb5c135"}, "ca8d5632-2480-4719-a0f1-8f13c5fddb22": {"doc_hash": "b6a7f7911ab69442c00f000fcf66f63267b911b3a07acc67196db50b196d1393", "ref_doc_id": "f2c4e4ee-df9b-41a7-8c1a-38f6839035fe"}, "5a3c49ae-69bc-4dde-bae0-3a38ca55d7ff": {"doc_hash": "2759451b6a346585c0f488ff5a64d558de168ea35c9b1705556d405307796a43", "ref_doc_id": "ede41dd0-12fc-4016-b38b-b81c3f145be1"}, "e06a1e59-be73-4d38-b61b-f29c04cfef34": {"doc_hash": "a6029a82c14e056d9011da861cb50de1ae609b41f5fc37a90de5eb5787490ceb", "ref_doc_id": "52edb485-6dd9-4f89-af30-14f33952bd08"}, "886c94f3-bcbf-4252-811c-3d1e306ec197": {"doc_hash": "3a4c2e408d6a3573846335d96cae04ca9375a86e01441dd8ec2fec1dd9d019bf", "ref_doc_id": "b4fb691c-fc79-41dd-9f1f-66f60c6a89e1"}, "ddaac2d6-1ca4-47f9-a5fa-4863fccfd733": {"doc_hash": "3a6dbeb0d96432022e0f3fff66396890087e7624b466e66f99a5f23510159de4", "ref_doc_id": "ebc73c7b-53af-4173-a894-17fe4066ec78"}, "d253b038-792e-4f94-90e9-9db8258380cf": {"doc_hash": "02a919428f90b0f69a2778e12d6c1bbd9047c11bc4aa22c906e511f412a95893", "ref_doc_id": "ebc73c7b-53af-4173-a894-17fe4066ec78"}, "e51c6ba7-c4b7-4bdd-9e9d-e9ef3071cc57": {"doc_hash": "3011fc674f0c43f3c3a0889140e59ace3dca3b950239a1a6c5232c152cec94ff", "ref_doc_id": "9ae2fa74-e356-4924-b0af-803b945fbb47"}, "f4cf72d3-2917-4d79-aac6-a9885f350ee0": {"doc_hash": "7ec743f4cac4b1aa20134dd7df7ad603e5528e5e773bbcf02de00f570cadaa4c", "ref_doc_id": "b3ba0163-1fcb-408e-9658-1a0450dc8e5c"}, "5fad983a-6a4f-40f3-a441-cf9de7aa6f23": {"doc_hash": "283da8da80543a1e35ae0ecb3cc56367c5d0b7a002eec31343e95d84f2d37691", "ref_doc_id": "14f3cfb8-6ce9-42b4-bd12-82a96a5547c2"}, "80330b9c-e34b-4c52-a24c-83da4b4612af": {"doc_hash": "e3f9458ee76735e864328929939d4048341a5ba0e216385d54e6e95cb22c73b1", "ref_doc_id": "011bdff6-b17e-4059-8edf-cffaadaec0ab"}, "2264bf48-3885-4400-9713-f380a67943ab": {"doc_hash": "a8a0b44bcf6f162c6774522e25c93fa063d10869b5373d0d83e3173d5f1677f8", "ref_doc_id": "2516f765-68d1-4eb7-b95c-cc16aefaed3b"}, "570e5d6c-079d-4b74-82be-db7433308e8d": {"doc_hash": "a36fcb9286fb45979da82c9edc7b47cc4580ad56ec4187141c4f453b1dac4c43", "ref_doc_id": "74cd6bf9-3950-4085-b298-b9d04786269d"}, "05e36b61-b374-4781-b6a5-0e4e5396c2dd": {"doc_hash": "956b24d917450f57b5994295c53c663ada15b9c4ce04caa2fa02e4a577933b8a", "ref_doc_id": "4a9c965a-3cc2-4473-b6d1-58ab13fa061a"}, "2f8c678b-2a62-44da-9c31-4d29cdbb2acf": {"doc_hash": "9d07cef1a90c867e840c1f14d9173812c93b7d4220b94901a8bf8ab62f8f6561", "ref_doc_id": "b4a7fd35-f20c-4430-9ffd-4a050514b6b6"}, "0ed4590e-9535-49cb-9733-3b8531938295": {"doc_hash": "bb5763e85e7e05bf333ea43286e0ff9d25bcc5b91c05d693cb29ace3131242fd", "ref_doc_id": "0a30dfb4-5906-44fb-9c7e-f20f658e54b6"}, "d06652d4-a693-4457-82f7-72b4ff5789d3": {"doc_hash": "c671847c9d23810cb9f86d15c69980637e9fdd6ffe6059f3d6616323fc7276d4", "ref_doc_id": "36cb1b30-1263-4004-a485-b18af7da0118"}, "5fc00aa9-796a-4cd8-b0ed-729bee6fc669": {"doc_hash": "a6f7962aa0140ab9032ec4d90da37058809ebdfaa5299f81cd04ac473a5aff40", "ref_doc_id": "ed2d2b84-3fef-4cf6-b5c6-bdbcef419768"}, "333a4df7-137a-4465-a950-363ef209c338": {"doc_hash": "caa3c8cc37e873f19e17538b57d77354dac5b523f4fde29efbbaab96a7a27381", "ref_doc_id": "4d0907c6-b3ae-4b90-983b-ca2bc70b4703"}, "89853f0a-f795-4442-8b8e-5d85844c1b06": {"doc_hash": "388a4e27777444bbeed4f7ff5a914f87939a1991d72e14ec23c1047cc6a79b73", "ref_doc_id": "8e870653-474a-44b5-8167-cd131017b377"}, "d99ed4ff-1f08-4375-afe3-042be5f318fe": {"doc_hash": "d4fa8fe2e2ae79e3c5da8a930badbf4a56796ef0c9e0ee6b5a15da352d2c77cf", "ref_doc_id": "69a7e25a-4896-47d6-92ad-1a02bd0dd7f3"}, "2458b51e-04a6-460f-bf4f-20d667d523a7": {"doc_hash": "80ba9ff72db1266f156ae885979dfd8721fd7420fcde0abc646b2d113315218e", "ref_doc_id": "8bc2ad6b-713c-46df-ac49-34b95d5ae24d"}, "eff62522-ab69-4f8b-8129-32d9fcbdfd64": {"doc_hash": "ec193222205e08274ac54f92cb2e7abaa0096db929ccdc985c678ae0f1c4eaff", "ref_doc_id": "c3819dcd-7312-4ffc-8b2f-c6f0b47ad3de"}, "6869dc04-d165-4d88-83a1-33cde89fa3ff": {"doc_hash": "04070817e181d5771768043c86e6b30fbede9719f726c5bd6d572ef309b83300", "ref_doc_id": "e18c450a-f356-44ab-b18e-df2a0c06e1a7"}, "1087aad5-b857-446d-b53c-8a2d104428d9": {"doc_hash": "c91dd74f88ff2b2a98b17cb3927907f9e3b6585e7d77c271e28fc5cfadd7c592", "ref_doc_id": "d85c347b-0f2c-4487-b0fb-5ff0af1e0efe"}, "c66226e5-5e25-40cd-8c54-d5ca6c62f77e": {"doc_hash": "0fb45a9f9d1719c5f1509b28f19b2dcd433fca8f8dd2a2a5a7db1a52dc39e2b5", "ref_doc_id": "598665dc-fe6a-480e-855e-52a42d70f418"}, "d8a1bf80-86c3-430d-9a5b-c33f1bed64d4": {"doc_hash": "2aa651c3c77ebba7932003f34ad73e740f7ef0eca0f585c9c613b01575cebc3d", "ref_doc_id": "71915d38-8ab5-4dda-9ae6-a84a5eb96c1a"}, "2f8a9a04-886a-442b-b648-79729db13a49": {"doc_hash": "33c865850c3f1e090ec2a5d62ea83819222cf9f0b04dbd3acec59974249a5191", "ref_doc_id": "ea0191da-d553-4f7b-9fbf-8dfb4d4924c4"}, "7446c5b2-a712-4ee3-86f8-5fd3789c3656": {"doc_hash": "6972b81c2a8c47d6c2f9f12fe57eb111b3135017fb80c3c16b9bc5483f679da1", "ref_doc_id": "9acde764-9cfd-485a-a46f-b33d37ef7853"}, "6b922572-6aa7-4efd-926a-972c35947ae5": {"doc_hash": "d00f1b95f0f816c82a77f088d15ed0119a738e9f475377108497bf395ce7233e", "ref_doc_id": "f43c9e5b-9548-4768-9bd3-0219d845256d"}, "3b2fc13a-cbb3-4563-a7e6-b4917c12a4a9": {"doc_hash": "61001facb8e6b9fb82dcce1b352ae693ec9d385584e76f932f461861e6bd43bd", "ref_doc_id": "ad3d4f9d-55a6-4d00-9df0-31b0d73c5054"}, "05f9294e-5e43-4da2-8679-8713989b96ee": {"doc_hash": "02e0d3515abe43c6f2303cdcef337f741ac2f410c6bfdb612be4a4906956ca4f", "ref_doc_id": "75d2a9f0-c2f4-4893-b9dc-459173ec6c74"}, "8acfb888-9850-4748-a761-231f7567824a": {"doc_hash": "e9236e8de7f1068af3ad45f539970d4743f5c731cfa614a4eafb9fd9f952bd58", "ref_doc_id": "abf08165-c48a-4a1a-9d40-abfd5425497f"}, "be7fbdbd-bad4-475e-8374-99b6467c20c8": {"doc_hash": "f98aa1fef3d9f39686531306b43c5ccedd6ea1af36898ac51084eaab1ae22ab0", "ref_doc_id": "783b95d7-80d2-4135-bb5d-24de0a9be358"}, "bcc37fba-23d6-4757-9649-7a16250a13b4": {"doc_hash": "07245dd40b3e807c8ceef495d3d8b26e87e1b41ce4e355d3a50c7dba9ff0ec4a", "ref_doc_id": "6171ba39-e2d2-4a28-aab0-c03c9ea66c76"}, "f79d7c27-ec50-4dc4-84dd-7407dc46a75a": {"doc_hash": "dfdc4d0d98ae91d1159b40020d32533ed5000362440655b15b735da603840d23", "ref_doc_id": "2a3c4e0b-79a4-4f70-b264-4bddc3ebadab"}, "7876f957-342d-4750-b4b7-1ac07f77ea67": {"doc_hash": "7b75f00466bdcb4603ff7826e67ac9cb4aa708c1eb973ee94fdd89dbd282ca97", "ref_doc_id": "5c045e2e-a7da-470d-aed9-b7731e44b275"}, "0a4805d4-3ce1-41de-a5d0-8142efe9ce5e": {"doc_hash": "e1ad313526d8dc5150a53ebc713e6fc6aafbe38cfba37eb4e901b3ad9a813755", "ref_doc_id": "b4aea5e0-0a83-4830-95d3-564957488e97"}, "c3892144-7387-43d3-bb8b-38b3dc53c9d9": {"doc_hash": "ecf1d7338e62d1bd991f2c80b245cca5e2ae679870678a5235a7c99a2c5f76aa", "ref_doc_id": "3a429f4a-46cb-4b24-835f-46f829038141"}, "18b7be6d-3183-4227-b3cd-4b90264a9b82": {"doc_hash": "d0af9240b9fbdff41b1c7fbd79fd928af80deb4018066375b407c54c001f6633", "ref_doc_id": "e3237477-2fc9-4c20-ada9-523625d7844d"}, "3b53df2e-0387-41b7-a72a-acc22d7378c2": {"doc_hash": "85672c6a1804f923ffa11651b69f156a5cec3428d54d81ec42fde7cd18fc04c3", "ref_doc_id": "8d94f83c-51d4-4179-b048-4c4abc730459"}, "e369744e-6776-48e5-97c3-663db652ab13": {"doc_hash": "3de07b8c293715563a4aba8a9d52af5b604b4c73c04781c93a422119d45e2425", "ref_doc_id": "32f939e6-58ea-44a4-8363-42290a531852"}, "04a8ba08-c4dd-4c5e-99db-7d836360565d": {"doc_hash": "3dd0abed5bb8f3dc5d74ce8a54bd08788b64080b536ee20dbd77a842224460a2", "ref_doc_id": "73b3ffca-2f97-4c14-aa32-f616e7d15c74"}, "8c550b07-d8e1-467f-a9e0-5531bd8e53f7": {"doc_hash": "b1b6b2e893ee183546dbf3e449367928697681e7c46ea2bcc978f280e6e7a39c", "ref_doc_id": "5aa3ec10-64d2-4134-a037-9dd0f46f6fe1"}, "31a8178c-ce79-4355-b41f-c4cc23b47ce4": {"doc_hash": "b58968aacf248352d6538cb7e90c3c4a65111598f9e551788486808d9c81d339", "ref_doc_id": "487f9f65-95ad-40e2-946f-5153420ccaa3"}, "df1f27d0-32c4-4761-953c-af9df82d91c1": {"doc_hash": "9b9c510b9c52b2dc38b90f85550588ee543d32b2508efdde86f5138375f808a3", "ref_doc_id": "be23b5d3-908e-493b-8058-1b1b5d78d29d"}, "1296455e-7a70-4b1b-bc77-05c93f8767a8": {"doc_hash": "011e08f83690fe21e9077318a514bfce7cca83f83a2e7c224e3f3a9b1827da8c", "ref_doc_id": "9acf9d41-5091-4b66-aec8-35139d4032e5"}, "9da93de3-f56e-4c8c-b579-684ec6454c69": {"doc_hash": "978cee9b92429a9649de84a07b9f79540f1c8c5e4b447e941a58e081b04523e4", "ref_doc_id": "8cdd5abb-7ffe-4521-9b39-326a0dd732ed"}, "f67acbc9-4790-4188-8e14-98f480111c19": {"doc_hash": "5249a98fae4126f228ad7eb26be4f9483a495c6d0b2fe4077c3e5dc32602a76c", "ref_doc_id": "26e4c87e-6c25-4db0-b675-f309ef19af28"}, "01f03347-89f9-4b11-9135-3d55706316fb": {"doc_hash": "6e8e1e75fa1a10046dedbeba6a8e2dc1e52390ce690d7decb903d02ed9eae8b8", "ref_doc_id": "59c07f44-38ec-4856-8fbe-20fe9a47295e"}, "b706c660-b8eb-401d-9839-74ecaf5080ab": {"doc_hash": "527d045eaa15552234e9355b123601d9a3f6738726af5ec0a0178197e37ceea9", "ref_doc_id": "98782230-b88e-47e2-8684-38b34c97269f"}, "2b67e6a2-476d-4f1a-8611-b1aa7f28f4a5": {"doc_hash": "12b889dd4238b27f5a7b9edeb613d23ec548476a0822e2d17ebd7060f4b44cc8", "ref_doc_id": "5838f44a-ddee-49b8-acbd-df04788be029"}, "115b00d0-9e53-43d9-8a47-0e274be8b662": {"doc_hash": "19c6dcb2245f00cfc1ecdd1671fb5df98db8cde1659b667997824c93128c9c1a", "ref_doc_id": "9e195151-c337-4ac6-918e-b030e39f2b09"}, "746d8951-770d-4b7f-ab61-4dc3f8578065": {"doc_hash": "0a6ce99c9bcb15e521ebfba1a118cbdd9d0d8fa7e6b963f4af803b26f59095cf", "ref_doc_id": "6a358fc5-8748-4cf2-840e-906d71a12939"}, "40789b85-d04f-4c08-9af7-8632cd1b0622": {"doc_hash": "1923123e4385436c59fc79adf5a38fd415a3ba2926655c5127ab26746c70d616", "ref_doc_id": "d15e8283-af52-43f2-a091-7bd3a7636882"}, "6ea5644b-6c63-4087-aef6-69ceb33d4e15": {"doc_hash": "736a03c30df18130f6df988a8822ded925a28af832616a8ede467e5d6085ef71", "ref_doc_id": "24d10531-5681-4164-bc46-a2dc03f2f4c2"}, "4b375220-97bc-4e9d-8ea0-cf237f2eb6bc": {"doc_hash": "6743c81bd3f06bdb9d3147557f5f522b6e1791a3df83e77c7696e1db4d53bb0b", "ref_doc_id": "9578c328-6bee-448e-8fb4-e14df0a5ac91"}, "2a4af46c-6460-4871-92ad-bad9c873de27": {"doc_hash": "031da213475b5a9cab663f15deca1ae6045a643125914b7ba96642f56386af84", "ref_doc_id": "24d2f58b-3250-4107-96c0-14e9cf9fe3db"}, "e5b5f6e5-deb6-4941-9f45-2b24d24fdb14": {"doc_hash": "096a04442ee58d0e25b8739961c6adc732c56b5db5259216d56f7e248ba4682c", "ref_doc_id": "a535cc6b-b4d4-4c06-8ec2-4e457061630b"}, "c7906b30-2775-4b2e-8c8a-7a2b3e83f7d1": {"doc_hash": "071e7069b728a8337087ba67e384640ec637965350349028bc378e198be83b01", "ref_doc_id": "9cb0bd8c-1322-4e5f-a421-ac7dd4f5d718"}, "5d0809a7-a295-4d48-a92f-41e2e5e5d584": {"doc_hash": "56661606a192dea69c83c8ab96f2275a3d5003709fae0c9b7c283dfdd3bfd60f", "ref_doc_id": "29605796-191f-4967-ab5a-61d3f97b206f"}, "686f63df-b155-4bbc-a430-92c2083bb249": {"doc_hash": "906080dbe5429887af0b401d9e74969059478071016536bf50f37040bda15111", "ref_doc_id": "a212e20d-762d-4fd4-9048-79552b7af016"}, "79633030-da17-4fcb-82b6-26d013783221": {"doc_hash": "786e55760948e53d30d94a26232f795abd4ca11586e3e6ca89317477dbe271f4", "ref_doc_id": "b819b81e-4531-40a4-81ca-edf98f1fd2bb"}, "662ef4b6-d0bb-4094-a5e0-a7005a6b49af": {"doc_hash": "5040357393e0644f2a6a7efbff6e0b07e1a0fa21849aafa529c9a2596e539ae4", "ref_doc_id": "8bf3a533-6109-4328-b5a1-99a14c7d5d9b"}, "b72019ac-90ad-4d3f-8818-adb91430c54a": {"doc_hash": "36261483502f95ec0cd7946de2ad5060fb9f240a0c4c67e730a93db9332750f7", "ref_doc_id": "e974bd45-15c5-4768-b1ae-ab8c1eaa7e64"}, "e41c6be4-cd30-436e-9c2c-edcf6d5cbe2c": {"doc_hash": "a2d3adeed76d6188cde20a7478cbc327cf148462a8a1e4310db44190eabd4f34", "ref_doc_id": "1c3de868-1c3f-4574-bcce-4541bd482fa9"}, "71703fae-c220-45bf-895c-202dcdc27923": {"doc_hash": "7df02bb00841d4a5c24fe7e8f3a95ae3d1ca1900cbe23571bb487e5f9877a280", "ref_doc_id": "a6278aa0-7018-4579-bf09-3c56eecf8de8"}, "42a040c2-7eb4-41dd-92f3-f9de86447d52": {"doc_hash": "007d7d0983c85600c976f35c3131e9c21712f9d3e713ea100845b0d1fae36061", "ref_doc_id": "d89920d6-94d2-412e-940a-814d973c74dd"}, "af4b7ae6-88d5-4714-99b0-51f964120e53": {"doc_hash": "a67e1b7f9608d623b0547378ec48ebaaee7941d302fd80bcd28ef9b0ab7e1335", "ref_doc_id": "0961aefb-a4c1-45a8-ab53-1d9704dd72be"}, "46e76dbc-dbe9-477d-8ab4-ba2138a3aeb8": {"doc_hash": "f9e3e065066991c0177e47b70c480b0add2fcb75a1ebdbb327f8aa056d630b22", "ref_doc_id": "c732dc34-ba8b-49e4-8e1c-1d19d141bc4c"}, "26af1c38-8658-49d3-af25-057d7e72703e": {"doc_hash": "ae012b910c2b71463cb83662c95af3293a11c0e02b77d00d9d5ab48e499ea93a", "ref_doc_id": "c569eab6-4949-4c2d-a265-844fe47b322b"}, "8e5f2c12-33f5-4098-b64a-b308e393aec0": {"doc_hash": "8c2f431f0c5cf5b00609213cbbf788dfdb9fcf0657e762f0edc216369ac9dbf6", "ref_doc_id": "17619d0e-7186-41b9-98db-da7dd0efcf0d"}, "6891b0f0-b660-4dd6-9ead-5c30b8d978ac": {"doc_hash": "4c136ace69312fc6e5e671dfdda9bd0c2dfc255a3e0d2f2ea85794905ccf637a", "ref_doc_id": "00d9327f-beb9-41ef-a6f9-0ef9d4ab008c"}, "d7890ec5-9c27-4a20-a302-0916ffa3e0af": {"doc_hash": "c1d29997c71c4d0b0bb171749f4afe661b98dedb1644111600b00b99db56397b", "ref_doc_id": "65a3930f-b620-4118-bc91-ac9d6f291a80"}, "ec26011d-9086-48c3-b74a-cd56c2c7ce36": {"doc_hash": "38fc927ad86d3312cd75f15d2c628d3c2d078f9a90b8793529d23dc771dbea1e", "ref_doc_id": "61d99f13-321e-4f8b-aa6d-be37ac8b6af9"}, "d4f8bd2b-4bd5-49af-bc0b-c0997ee95668": {"doc_hash": "30e878afad91220589437febf91037cfbc58b9c9a72e9a665a61214276353b25", "ref_doc_id": "a01b91a2-3c0b-409c-a07a-9aaf94e06adb"}, "05e912dc-eaa7-407a-9c96-bef2254b046c": {"doc_hash": "2bd8323b8b445244258a5d2894afa7b55d0eea0272444f4b722601434b1d8ed7", "ref_doc_id": "55400715-7065-4d18-b461-6ebfdb802fd8"}, "3cbe2521-7e4f-4139-8917-739059e7fb73": {"doc_hash": "f73f0803465de0e7b5c3f1fa8b790e5128657cb6a4d8e17fec3070f03d4d8bd2", "ref_doc_id": "4f89ebdd-1414-4d6b-98dc-8b2318a49253"}, "1908534d-52b8-4efc-9606-85300e320faa": {"doc_hash": "feeaca8b8b771f34c748c12349c8e036f542fcc62b69172215dd64bfc2e1f7a2", "ref_doc_id": "5bd9d1a6-ca28-4c2f-a65b-14115df67f49"}, "5f833865-2f81-4e82-8614-171260f9a45e": {"doc_hash": "872c8242cb4b0c1b6c5ad7e6168ef480f024fdaa72f973db1efa04911dfd02ce", "ref_doc_id": "49a05b2c-87eb-4791-84d8-4e20c1582291"}, "2ee1efa8-56f4-4865-862f-a03095534c62": {"doc_hash": "6b287a9cbaeaa26287a8da0eea264d2d5e2ca08a52939136852a8fc57c07af7c", "ref_doc_id": "c07bfb75-fad2-4781-b126-59fa6c226c67"}, "2f45b385-8e65-4e86-8ffe-3b6c72b42ed2": {"doc_hash": "aa43f96d21b9a1219d7c06f0d30a2879b683a5578544b28e599f80f15e69d8e9", "ref_doc_id": "d8ec71c4-6904-42e5-a4c5-f46f8c9b025c"}, "0939f166-3d51-48b4-a9b8-a29a0b826960": {"doc_hash": "4459f62cdd4b0333d710f812e9a313f6a6a040169c8605da4530685efef842e0", "ref_doc_id": "a5cddf89-73de-4614-a7fe-4f7ac2cef144"}, "bf46c7df-c02b-4866-9b39-1bb12669fcb0": {"doc_hash": "26a0fa18bbbf48daf2cc758ca8953e5cd7f374170cffbcadcb901f7c26b05b1f", "ref_doc_id": "2d90304c-56eb-49e9-866c-72f1dbc922b6"}, "c14b35aa-59d4-4a08-adeb-a20897d84274": {"doc_hash": "a20aec1dbb52316a9b46022cc32a84db3f840265d948def138939cec60ae203d", "ref_doc_id": "b09d3a78-d687-4288-b4b8-0d061e5f5c8e"}, "d46ef6e7-626d-40fb-b8e0-6cea86a967d8": {"doc_hash": "4dd7a3c9bddeca232f6a9d1a07a636f8bcc2c67ea0aca9d032000a26fb39b4ea", "ref_doc_id": "f108eacd-05e2-4d93-b762-57bc1a6e968c"}, "d8fbb70d-b9bf-46b2-accc-83b2086b1098": {"doc_hash": "d1fca399c4cbcdb711ea4e3d35b0f0a4af1dd2ccc299ab670cc99d51758ee466", "ref_doc_id": "f554ca92-c066-416b-ba8b-d313f5f28e5d"}, "4c4cf144-642f-44f9-87b6-590729242381": {"doc_hash": "ea392f33dabe57a0a553df6b955de4d18d94bf17a229fbe9d05114694d877b75", "ref_doc_id": "a23696d7-85c2-4c4c-b3cb-9d72638da642"}, "56f5df88-3e19-407c-aaeb-6cf007ab66c7": {"doc_hash": "3e1ebff854f5d45a823a85cb9f668b7f4945574e60824af0642274fd41d9f690", "ref_doc_id": "574df38e-51e8-4219-9cba-58e5af75dad8"}, "8aecb0d4-ad39-4bf6-84cc-3a314160ae56": {"doc_hash": "c08c24584dc9b199537e7fac692d500a1e63973c0ebde11c8f6fc0e0d2e36cd6", "ref_doc_id": "6022aa4c-ad2b-46f8-a2b5-2b9c50cf89d5"}, "33afcf23-993b-4c8c-9d2e-354bc030f869": {"doc_hash": "9c07da23803a730d4ca7600b10994dc7f578396bd464fac5c5a40352ff841671", "ref_doc_id": "781d69c4-8da8-40b9-ace9-8e565352deae"}, "3f765651-156d-4d02-a21f-d30a85e02848": {"doc_hash": "dba2f0aca48fe8e35ec56440c33abe35d12aacb8978f032fcf2bf669cf1e289b", "ref_doc_id": "24b91159-a3f3-4db5-8c42-eba9df13b49e"}, "643468c3-c392-46b8-bae0-165e6eb52a49": {"doc_hash": "dd8d9dc81ca0bc62952e795a07ad4dbc5c19fbe2053cc2c8daf0f66977368aa8", "ref_doc_id": "427ddeec-7a80-445c-9f8f-fc4551b8b49c"}, "ab611b19-76f6-40da-b591-2b807ba1144a": {"doc_hash": "7ac13c48a82e734f1909a8cdab82a3fe11ce9901354002c81ec4ed09cc1d7015", "ref_doc_id": "26d85472-3209-4c2b-8b18-983dba61d6b4"}, "0fcfd2b1-1d6b-4245-acbd-ab94d4da1557": {"doc_hash": "82c549db923fd79bcbedb073efa599c677f38cbed0c2d71a08254cb91adeba60", "ref_doc_id": "a53c22f8-f568-467d-b87f-9ab161827024"}, "81ed2236-7db2-4ed7-96ae-90e5f66581bf": {"doc_hash": "c4cffbc4c249f79a108382bca29cd89b196e1db15e7f842dfe8939fcf4a2266d", "ref_doc_id": "335a3f11-07db-4c3f-838a-bcf32f00400b"}, "3935c11e-60bb-4efe-8ee0-833f1dd4e48c": {"doc_hash": "908a1b00a9cdc979f3576dd5d037072882a52ad7a23c7f7559b76f524175baca", "ref_doc_id": "616bdf5d-6219-41d3-aae4-75eb04227a00"}, "25b19c38-92a0-474e-821e-26118035a3c5": {"doc_hash": "e7ad7b44fe912427e539d6e4d78b76aa2d154fd64859018a3605491e70936111", "ref_doc_id": "d53a6fd2-991d-4164-9322-3f6a74e5e4c5"}, "3ace0f1c-d1f5-4e8e-8cc1-7d4d0e981819": {"doc_hash": "e11e41333769f906f0c8573269bba4053cc3b2bbd1e04b0da322e708e8ae0628", "ref_doc_id": "2d8c1ac7-8f12-4394-a3ed-09449302782b"}, "f909cf2d-d59e-4d5d-bf63-4846a653bf28": {"doc_hash": "c0263f9d90937be70734c5507f1786873a4a6555f0ab928f7a4081222b8d4518", "ref_doc_id": "2d8c1ac7-8f12-4394-a3ed-09449302782b"}, "0e4c864e-37c7-4c04-94fd-e166b04af95a": {"doc_hash": "8bb9a3cb79353beb12819197559f66fc01e3e92c603e418f48d26f1e5e61db1c", "ref_doc_id": "2d8c1ac7-8f12-4394-a3ed-09449302782b"}, "3debcdde-65d7-4b54-8a7a-468a9aa0f027": {"doc_hash": "a03580c7fbbcc60df620ed14584da0d6f6db5a4d45755b915eaff35e0093a4cc", "ref_doc_id": "f2030e26-7e06-435c-9e81-0894353380cf"}, "433801c4-3a8d-490d-af89-acd167dee15d": {"doc_hash": "121a10a95ad855fc66dc14d4fe2f5ef5f3ca34038cccf124a5d2be8a92299e2c", "ref_doc_id": "33b9f2bd-ddf1-44db-b614-17ed25e84b67"}, "08c6b01c-f5f8-4354-9270-9e59330a64e7": {"doc_hash": "04ed0e44e58783563f0a002b5ba6769239f967949c14aff839798e57d309f1e6", "ref_doc_id": "ffc29bb1-2543-4ef0-9acf-ac780ab8ce46"}, "8f2faf24-1b9f-4ae2-9972-25861eec863f": {"doc_hash": "2699afbbe09124abcf27326d75ede4b0bf550b2db85754b7e7ce1a0aac0703fd", "ref_doc_id": "5b5f710a-3c14-4922-869c-b07750e89cb3"}, "cea1604d-62d3-44ff-90db-307140bd95e8": {"doc_hash": "c317f540e84d0f27cec014b581a540ab10d9e18927fd1e17c55d2200f133f6c0", "ref_doc_id": "1f3c59ee-61a2-4ad6-a5ac-f0b9689964e0"}, "5eb69553-ff78-401c-be31-2f40aa8b222c": {"doc_hash": "0fd16e6f065f570b11ea0473c00286eb8863182b66f4e7d508751d18d09fb8e8", "ref_doc_id": "54e0bd2b-d591-41dc-8fd9-45c25b37dd78"}, "c415a7ef-2f65-41e7-b039-fe7878c92311": {"doc_hash": "e15fb24b68894131af539908d20cb8b8456624932b708ec57f0b9e748a18b922", "ref_doc_id": "bffb57cf-f72b-440c-883b-956612d4d46a"}, "0a4b7f28-ceb7-49e1-bf32-63bbeb6be769": {"doc_hash": "9f6f38b801c3ad6929e9e9489392e38b1c5c72f1ae81ee4f80e56eee6c849274", "ref_doc_id": "76699e30-69e4-444c-a94c-cefd58a1bf9b"}, "cc8a1822-cffd-49ba-a624-9ffac49928ff": {"doc_hash": "394e17fc2009141f65cba6ece2949cea96b99adcfdf52d26228e23544eba71ab", "ref_doc_id": "5b50c707-eeee-41ee-a6de-0c669c2e14d4"}, "3935e44a-1e5b-48e0-b810-84149d0e31aa": {"doc_hash": "6cef536d3158f35ebbeb7a13c562df5e4ce5b57e6380782089bc828a158301ff", "ref_doc_id": "eea9a423-d085-45f5-93e4-199a005fbf98"}, "bdc77212-81f0-442a-9311-0cdc906b0aa7": {"doc_hash": "706a123434bd03764f9e67123c84e79ee928a33075791c48983e65fdbcffefd8", "ref_doc_id": "4b3945dd-5790-4796-a711-148619a0a4ef"}, "82a6739a-7841-4631-899c-19adaa93a3ea": {"doc_hash": "57a45c3c7209f005c18744fb9a3e72143350685dafee77cb05d19a79bbf41cf9", "ref_doc_id": "ed689a3c-e312-4bb9-a30b-3dd33f442c82"}, "de40bd37-7958-4fd6-9843-62c87ab1893c": {"doc_hash": "4ff149f0231281185e6c74b5708d7e3dbef900062dba622d84fec25ee26741e9", "ref_doc_id": "1e9502a4-775c-497a-af90-0ec208ddb99f"}, "635a0f74-1424-4131-bfb5-9e0bf9d16a5b": {"doc_hash": "799dcd3307d6b5151f853b666595c7e2595e7b49423962ab85732f40182f4ea8", "ref_doc_id": "365500a3-ba42-46f4-8215-c5b7d99f16e5"}, "bed8a470-0bff-4f26-906c-7f7e47e72d5d": {"doc_hash": "06ba0b2aa56e482771cb5e1279c81493f0d77af0f8167ddef09b2c82eaeae28d", "ref_doc_id": "bf68213f-f769-41ed-bd06-c213a6856d96"}, "7ec64273-ec55-48b5-a380-434a46279437": {"doc_hash": "124c9cc93aad7eaad5719b6b39afebe00fe3a5580a9d3a2dc0e656307a1c28d0", "ref_doc_id": "22350119-aa85-4630-ae47-3a6f950a674b"}, "74644080-9327-4f5d-b5f0-d659475493cb": {"doc_hash": "e2081d35636ffa3697955fab15e425d59a4331c3f0420c9e8843471355392c64", "ref_doc_id": "9e97531c-c57b-4897-97df-e84eb0666e56"}, "30fb00b8-84d8-46ca-94ae-4ad6219eb46d": {"doc_hash": "5b561f80a359adb684288d50b703ab22ee66eba91af85076e6808f5e65a12889", "ref_doc_id": "0489af4e-5b4f-4466-9250-820423a71d23"}, "31ca9bd8-4572-43f1-a542-f5b61f143bef": {"doc_hash": "2080e2a36494beea2ad9cb9c944682a6df5e84f3082e9dfd1b441de5cd865402", "ref_doc_id": "3d485b86-bd82-433b-b266-3d80f528e399"}, "b073b3af-f5d4-4827-8dbd-8b20a9915bfa": {"doc_hash": "a157d0d25b135e97a4bf478e84dcc6403091e41fb81c6c86752e0477d00b59d5", "ref_doc_id": "302a7dc0-fbae-4b20-9705-af639cd7c35d"}, "c93ce692-1c60-4973-97e2-fc11f327ee68": {"doc_hash": "910b04a78170a2d23327738d7306cf2bb69a374ceb70dc198c6c9a5e754b797c", "ref_doc_id": "0259fa54-b1ef-4ee5-a840-e68b0fb2be2d"}, "909d6227-a98b-47ff-96db-839747ec4555": {"doc_hash": "386654d28af826dc0ace4ed20e9efde9ca7b3890bacfd3a36e513a9724c091ac", "ref_doc_id": "c02802f2-676e-4e9d-8f17-c0823d30460b"}, "53067a20-ac7a-4d54-9a57-7fb41fcd828d": {"doc_hash": "edf79a421a5e21491d5d50df828ea4615d19dac78b75fbc4eff2d4edee30b866", "ref_doc_id": "61392398-ccf9-4c6d-9f8a-4b0b7f44d7df"}, "b83c42b7-6952-4134-8f82-d2e602fb14a7": {"doc_hash": "35d19fa9d1a49cc7ccbb3e4bb23e0151c25e672c7fcec696ffbf22167f6041df", "ref_doc_id": "bf169e3c-a3e3-4854-95ed-bccb74d06026"}, "2b8fb648-c1cf-4131-8d6e-b25c41056cbb": {"doc_hash": "b9548737e955adbbcbd6562160c885a1bbbc28eba448ddcffceb5e6f7a6480ae", "ref_doc_id": "aabaaa89-6995-4470-b40a-7d6dde1fc63b"}, "2dff17fa-0be3-448a-b897-136beedec035": {"doc_hash": "6f20995d2d94d15f565cdce8c5fefe418050c5862192f4689bba5e689bfa982a", "ref_doc_id": "b0ceb664-aa8b-4366-a9e7-8fdcd075c03b"}, "fdf5c36c-89b3-4575-879a-832f6061dcd0": {"doc_hash": "52a3921402998b1f10d7fbf803369b30b1c9cbeb2cfcd302673f372d0278f6f4", "ref_doc_id": "92888156-e050-4472-a195-0058b918f2b9"}, "03c70732-6c4f-4128-a114-57df7e974251": {"doc_hash": "545b4e2069de8859144d45360f37c18164bd04b6100a94bb9fc778e3ce4c1bd2", "ref_doc_id": "f75c245f-0f28-4627-8f7d-6a3620960027"}, "20fa44b5-2f40-44ec-b1df-1ac7089489e5": {"doc_hash": "4c1478dd84d5f504b1a14eb745525b555b1b11391ed58ffa1fbb47e54fc51759", "ref_doc_id": "6b5f6c97-0d7e-44ff-bcdc-554fa889027e"}, "31bc043a-a782-4edc-b16d-673edbb7467d": {"doc_hash": "f913a2e3ec46c74311adf4473ee906618e8e005e4395f2b36b62dcfafce56106", "ref_doc_id": "2433b6a6-1206-44d2-a513-7a79421e905b"}, "662814aa-17fd-478a-a6c9-92be503ed106": {"doc_hash": "6c0dd86291c30d173d2ab1d9ff14e80f4c8f61a2c877509a5dab16dfed5a3526", "ref_doc_id": "3067f711-3a00-43c8-9bbf-96f8f427a03a"}, "8d6cd795-7bb5-474e-bbdb-f298c7ac5365": {"doc_hash": "58637cf4ee441d0bd2eff1de362779dc0caf18b383be5d6c8bda64db328e36c1", "ref_doc_id": "91f7ba12-6697-4cce-b193-89437f192e35"}, "f0550d58-6420-4d5a-bb80-a7f88117a038": {"doc_hash": "b3ec80ceb9e1df2d48e6294865fa028de47e0ae9158ca0145c9f06e0b2b35b00", "ref_doc_id": "232da8db-59f9-4631-8269-7227d177a372"}, "95082344-5c17-4012-b1b1-7033bbaf65dd": {"doc_hash": "fda5921c0d5829ec81ce53292946b2449115479796c1ce76a90477c58f3b1e86", "ref_doc_id": "1b7368c6-c8c9-4ff4-9849-2e556712a34b"}, "fa6a335c-ef99-48bc-9a80-95b7b8d00aae": {"doc_hash": "f27aed934a8de60df6c7abe76582c8defb17d7994da440ce23aa6fb96cde6548", "ref_doc_id": "7bc16224-7f61-402b-924f-d333824012bd"}, "c647dd3a-cea2-4289-88d7-230326301b83": {"doc_hash": "c09a1bd82a28f9a4c4a1f24bf22aeb18ae11e9a5c7a59c9ba8bec03d781a22d4", "ref_doc_id": "3d317a3b-505d-4039-a095-bc5d9e62c4eb"}, "ce342e43-5618-46e2-83bc-4566e1fb8c27": {"doc_hash": "8321ef1f92e269cf69f7db40c00e095bfb260a06b99fd78611105a7109dc7542", "ref_doc_id": "f39fb86d-f545-4a82-a792-7945f9786038"}, "8388c5e4-c558-42a1-8c0d-94747aab5d2c": {"doc_hash": "f306d8ba4b81b68629a6b4d6de04341166ed1f95c0d88735c03e4702b9e29773", "ref_doc_id": "f9829659-5903-4fce-abea-11949279f4dc"}, "7c80b4f1-cd35-400d-9d14-87476bc82715": {"doc_hash": "405447ab22f252f0f6d78abf519c1526279981cb336ad96fec6dcd05aa842d52", "ref_doc_id": "41848eef-eb6a-4f90-8768-a0ef2088834d"}, "178a52b5-d837-4846-833c-91694198c4d4": {"doc_hash": "97500b452db8f2f01e9a545e156bd5fd7b3573e0f0bfde94dd84807e7c19b9b0", "ref_doc_id": "d22376bd-2dca-4253-bd20-4caea06233b3"}, "73e869bf-2b21-47aa-906a-3f727677667e": {"doc_hash": "908dc579c28487e83a63e30881dd58287413a9042781d041f08a57581265f583", "ref_doc_id": "8ee11e14-12d0-4bb7-ba6b-119ef4124dac"}, "4afe1d87-f8e9-44d3-b547-e6348e3e779c": {"doc_hash": "e3f8c934ee803822b27082ec36d00bf8b413f14d821e6180970aeecd1e7b90da", "ref_doc_id": "e7eb47a9-33e9-4359-aafe-102179019ed2"}, "a7be9e0b-37d8-44c0-af7c-ae3bd7683e5e": {"doc_hash": "d19ff556dcfa9c97d9cfe96809383a1e4708cdf97bbbd241e92c4e817e72a482", "ref_doc_id": "3a16a3a4-38af-483f-8980-f4f5d8669e49"}, "505c1941-0fb8-4431-abbc-eddca10a9c20": {"doc_hash": "5932c331724d72a4ff0a4c17a39f1313aeb5f7a0d7a59149ae17947164c7a795", "ref_doc_id": "9fc567e7-fad2-406a-a1bf-8ccc7e4f55d9"}, "c17799bf-895d-4a95-8828-c9e232c9b8b5": {"doc_hash": "1cf8a75537f80ae63e4634887c8f86c8cd81a93d475c0984fa877f900d730009", "ref_doc_id": "292a4e87-1f65-4a32-9761-e85d626713be"}, "2a6bb238-d446-446b-a5af-7696569f8c0f": {"doc_hash": "f8f6f9033465b21e39cbec904bcb5873c4f83aeae97d04f7efc97717037f10c5", "ref_doc_id": "7b3173b6-3b38-495d-aed5-49f5c9b4e910"}, "b83a2192-0830-4777-8402-9aa5c5bd16a6": {"doc_hash": "779f86b306c600f84d8cb0aaa9c94fba114ab813add479a4cc5af2b329bb3ae7", "ref_doc_id": "36cc2ab9-9ae5-41f4-9121-3203190bf773"}, "3ae3da5e-c560-44a6-917e-d1cf472067ab": {"doc_hash": "f0e87a148133dd5432fcfbbf99c4f7d43d01b529a8f0ebce5e46384f0c05a06c", "ref_doc_id": "9f1886ac-ee86-48c5-9c39-82ddc9ba1b73"}, "087ca9d0-a31f-4a35-beb1-0c698821f30b": {"doc_hash": "9851608b7ebc8c8a2b4241e72557800214e16e8c4327ef5cd659af57886a9a0b", "ref_doc_id": "adc7ff50-3b02-4cf8-9718-d858ac2f7789"}, "f1939ce9-54eb-4342-be0f-14680b307c4a": {"doc_hash": "e7bacc218fb83ba618ed917e408b684cb6cd69a137e83663815efd4ba2b2dd64", "ref_doc_id": "b0890d10-cda3-4616-abde-232d38e5030e"}, "3b9a0a3d-044e-42a3-b5a9-d65a513d2f87": {"doc_hash": "5e1fdf00505891538da11378bb8f0e53158390bbbbcd5647c115425b4dc1b4fa", "ref_doc_id": "f4b8cad4-d25c-4fa4-a16e-28bd09580d93"}, "7fe8aabf-383e-4b6d-942e-01d417bb1dfd": {"doc_hash": "4038a6dc248a0c2ee80a2c82718c1d0dca4cc5373345f69eaa44bbb3fc79994d", "ref_doc_id": "d32bb211-366a-4908-9141-0b41a37102d1"}, "9a5742c0-0fb6-45b9-8a8a-87e16d4ff88b": {"doc_hash": "39a2453f74243b60ae0f712e9dc9e84cd9c2efde0366c75cec8295a6b1b5dd60", "ref_doc_id": "525e48cc-bd07-42a4-a12a-ea15f7b960e7"}, "b4a11c68-a39f-4f88-97cd-0f74c8f2bb7e": {"doc_hash": "88be25bd58a9a49a87b94f9a63c6d133f9fad0750cb75edc3bfa4df2467f4682", "ref_doc_id": "d4647199-d2fd-4f96-a305-3c4fc481b852"}, "6a5cf043-3046-4445-931a-828d8e403f2b": {"doc_hash": "43aa86053dbc41ea541d8e43dae752b3fd77491d4b66a43abf897256c654d53d", "ref_doc_id": "42996860-f855-4f58-be01-d11fc0ad40a3"}, "faae5fee-00b8-449f-9c3f-8b8b6e55629e": {"doc_hash": "204ee5585163e932882806247240afad14c3590c61ff1f0830a8231802808c7d", "ref_doc_id": "6a3438e6-3866-4824-920e-49180f561e07"}, "428c3bde-9735-4e6c-8c82-226af0c8eb1e": {"doc_hash": "365ad8fc749ebe3017ac9a85bb1d64530f96061e7d26d0fc1d0a30c05d4c8bea", "ref_doc_id": "b9ce4dd4-201f-4572-9b1a-223dab0e551d"}, "5aed2a5a-3fb8-40a4-b592-f178585562b8": {"doc_hash": "99e1efa1829bc1bd50fa5f1676a60b49a1744d3e5204ab937d682e06252d5175", "ref_doc_id": "70e7c105-ea52-4031-a1db-f30798b8b42e"}, "2dfca10b-0936-48d3-920c-50a8b4c9a3e0": {"doc_hash": "27584f04c4ff3cd83672760788933ca6a998eebfc3759ca5112d59c25436b843", "ref_doc_id": "d1e59304-668a-4d1b-97b5-9600f71b292c"}, "56b34e8d-bf22-4821-ae71-bf5e38ee5865": {"doc_hash": "1e034cc668e30cf36b1ab22bbf6593607d441c7cf944facb9c75bb2bd4971e8c", "ref_doc_id": "9e1a3563-e49d-456c-b774-e7089a56134f"}, "11a4a2f2-8172-458e-91e4-165307f1040e": {"doc_hash": "edef7de8192e748977b08f58cfd3a90e42e61d9b39bf716c174964af6f91410d", "ref_doc_id": "ebb8dc06-5385-40d6-9b6e-8e8b65446197"}, "af33c1b7-e54a-450b-8633-9ca96e5be42d": {"doc_hash": "c2b0f32c2ca666e08d167d82b182881d79e5a54baa5fb6dcebf001e61ae760fc", "ref_doc_id": "b12a15cb-bbc2-484c-9ada-72acd83427b6"}, "d90b6749-600c-4a75-91bc-984f61b9e368": {"doc_hash": "23c080c4d6e5e3f9d5a710fa9b9025d00a63a1c0cc5d601f56be4edf38d23987", "ref_doc_id": "35db4f0d-4eaa-4437-aaa4-eec9eddc7341"}, "72b1c187-0328-4342-99ce-a998201deeab": {"doc_hash": "70ca62e23589f2a1193d8b12f99c9a9e217f0fd8ca6f69924dd6b6775046cde9", "ref_doc_id": "3e2cd287-959d-49ae-8c6a-44bb3de62fc7"}, "278a94c0-4741-4c9e-ab17-101b4b51eac1": {"doc_hash": "cdeb9e61874f6c4e994fb5eaaf3f220c0eda6b31be83da9e8686bd7c0cf29766", "ref_doc_id": "4a3fbf3e-eefe-481e-b906-29fdf65e76ad"}, "bf8fee0f-b9ba-41a2-a210-6e3f10309ff5": {"doc_hash": "20b979d943ca189aac63a8dffa8abdabef123bfea79158c76a81ba50d3c8f7a5", "ref_doc_id": "516ee85f-1c3b-45e6-808b-9368cbd93a59"}, "2d2dd0c2-7495-4d6b-9c0d-d7942ae760d6": {"doc_hash": "4b31ae7ed74119825ec14a38e037542a73febd58ffd38efefd2f3de0b1afa5a8", "ref_doc_id": "11d1b09f-820f-4704-babb-9aece43f6245"}, "c8927c13-fafa-4234-b40e-d4c7bb58d0c6": {"doc_hash": "f45ef86a0da023e581a533943dfd8a2e50af49b2dd0b6bfae21d5881dc54ea08", "ref_doc_id": "9e4dac57-c439-4546-b4c1-c6ee13a2de5d"}, "02f7697c-b8ab-4472-8b8e-dc1b9429df84": {"doc_hash": "7b95981e025dd153db452f633ec7b1c122c1c9d7fac4d996312863ba994b9e30", "ref_doc_id": "f949b24b-198b-46c4-8b66-6cd274a718bc"}, "70eac124-bcc9-4ee4-b5ef-d390799c22da": {"doc_hash": "eb02c32bcbe168e1d4f8b84796ba86d1ff046fd73febbc27126a8502065397e4", "ref_doc_id": "63344b16-1c73-4384-9d26-9d10fecbbdd7"}, "e6d9715b-fb29-48fc-becd-e16e358fb01d": {"doc_hash": "d7dbc9a9c79f905bb0efaec295e88878f13433165e080f9690449cc1f61392ed", "ref_doc_id": "42c3adae-c6de-40ea-8c04-de5fa5b77685"}, "b775945a-ebd1-4dda-948d-c51fd4fb5438": {"doc_hash": "0c480d9394d8c7f4b0b41d6b66b34502e34c1a4d50ef137af964fb1422d56b7b", "ref_doc_id": "f6a52afb-6d44-46d0-82d1-f3f6c24e73ac"}, "36000b42-7b33-403e-9485-cae1cf4082a0": {"doc_hash": "fef67931e4fe7fceb9be6820d20f38df7399f76f124028b83d8b7431863aa6a7", "ref_doc_id": "eedefd53-7c2b-49b9-82c1-dbba192de0b5"}, "506f49f7-9502-49f8-a1f4-0fb7ce4b43bf": {"doc_hash": "0c50c1267afc5115563ea6df10a0279c67fd39e7516e245280ff680b6b86debc", "ref_doc_id": "c4309c1e-addc-461c-803a-d365e04e5187"}, "969b9bcb-3525-42ba-a5dd-d57534df169c": {"doc_hash": "cac9fb0bbdf81468dfc0e83ffd54a02e69956490be71e55ebc6d7d2978bf090f", "ref_doc_id": "e95dc7b1-7c6b-4ce0-8adf-772283563727"}, "42cbb140-ebc3-4898-ba9d-7929683d76f9": {"doc_hash": "f0e137d6f159028c8c3d00a69ff342f466876f78be6d4e5cab0f534d1db528fe", "ref_doc_id": "d4265aea-6001-4ec9-92f9-c0c5d0ba3ed9"}, "3709203d-a02f-4a61-a6a3-c77072b5e0e0": {"doc_hash": "11fa50acb2051db8a3a6550399591c3e1c2933e005859c7c664d5e0050e2b965", "ref_doc_id": "5ea48a5a-de08-453f-a4b1-e19059cfdc88"}, "4f248227-2814-4df7-b3e7-cf69f808159f": {"doc_hash": "cba56f618b1f64ca0db3c29fe4f7739d0f3de14e4c399cfb14aaa8d43eca63ce", "ref_doc_id": "b72bf6f4-5a2a-4c24-8d86-03c87b241439"}, "143a6702-7ab7-4f13-953c-6d01e29ee2be": {"doc_hash": "f0d35286ef068654d09a9d596cbf5ffd3c462e8a39c1e675b2bee869ab44bde1", "ref_doc_id": "20fd9e77-6154-4250-b903-e92782c6ae98"}, "ace272cd-cf1f-481a-a6a4-03a6a879c5ad": {"doc_hash": "d58bf50c1538c92ab7ba5baba211e8cb3983f6cd51e6612ca8534aa981ddbba2", "ref_doc_id": "d77244ac-733b-4c96-b077-e6cea3d15a99"}, "d794497d-9582-4b4b-ab43-89d63139b342": {"doc_hash": "45cf6c33a850a7a4fc77d985ca05cdef27d29b8e42f9e1f364a51416a4021394", "ref_doc_id": "ae14016f-59a1-4cb1-9fc6-e575e46812fe"}, "2f90d0aa-73a5-4a4e-802c-6bc5f36e6ae0": {"doc_hash": "687c93e4bca557737365291483dae1965e39d37b630e989375ffdfc66bbf6dad", "ref_doc_id": "647c50d8-985f-450f-80fa-a172735f74d3"}, "59333a6c-d0d8-4ba0-8a9e-435fa8ff37f6": {"doc_hash": "671753e509b3bb0452bed2a5889c04235c281fc205ee87af17a5670c50bb8142", "ref_doc_id": "28897194-07be-4dfd-9363-9a5eca9c70cd"}, "e14ff0cc-884d-48ba-8b89-4db381c7899a": {"doc_hash": "d8eedb64e9b497879e7d708b4efc1a73c52c374f5154eccb40ce6627cde3efee", "ref_doc_id": "533a6283-1cb6-4bb5-82be-cffc88fd448a"}, "4b210af1-db05-413d-b545-88d345001cbf": {"doc_hash": "12382c8939ea707db3eaf916ba0218fd118771c5be6cc5635ead298826a386ca", "ref_doc_id": "c87fa656-9485-4d53-890b-e1df9b9b112a"}, "c14df170-b9fa-4f73-b63b-89bbcd041907": {"doc_hash": "c11b76d6c7f2c641609a1e72106c72a6595e7f4a5df1452f75f7896c15b7902c", "ref_doc_id": "c10dee32-ea0e-4091-8fc9-2b8f9e82a6ae"}, "801eebc7-b836-4a9b-84a9-6e6b72f63c9b": {"doc_hash": "a3e2d0865805c31c62f3b6abd59492bf70278b49e405d667eceeacf41440267f", "ref_doc_id": "cee6c402-3416-476e-8fcb-762367d59a9b"}, "91cae584-27a7-4526-ad1c-da7d14e86076": {"doc_hash": "44fcccb5f271d6a9587ed2f0f95f9be1eaf0182e9c3eb0bcc99ec303b347a080", "ref_doc_id": "6a039d49-7156-4163-8609-5fafa305f379"}, "5d90d68b-b7d9-4857-aee3-ee0163f69c79": {"doc_hash": "154aa938afcb0100735bedaf52e04409154c7a5974f5c9dea34e931dfe4077b9", "ref_doc_id": "3ae3bb19-a760-4ad9-af88-42e75ac8d559"}, "5107cd1c-5613-480b-a209-e2304b50c53b": {"doc_hash": "64bcba1077149c952861ec89890b2b512478472380f307127efa31547dba0dfe", "ref_doc_id": "236f1767-9490-4a7e-b565-bcaca2055d81"}, "324565e3-0a0a-4da1-ba34-0e55c45bca52": {"doc_hash": "e84e3b5b1c315ee127cd19c5cffbe76b89e207fd6e8be78f62f94abcdd02bd69", "ref_doc_id": "69a228ba-da2e-4500-9390-527a1a22b948"}, "7bfcb6ec-3f84-4b75-95b1-ae8b1213237e": {"doc_hash": "80cc72cb24cec79a65f02e26eea1b1f30666b41505cb7e9c74d316c6d5401a33", "ref_doc_id": "dfc2586d-fa5d-40d7-b2b1-1e4ea7f7dc11"}, "986709c1-a5f4-4c4a-889d-0a3a441a4662": {"doc_hash": "3c956ece81cb84d127fb8e7f9d5144304cbdb98a9c504883a87a5d246ec66c76", "ref_doc_id": "30e0de76-f876-433d-a241-2f8d10e0b6a5"}, "d79ee558-c492-45e4-8931-bd8d98547e93": {"doc_hash": "6d685b0135cec8b81f62e98351b2695c30294adbace057ab0604047583d19c71", "ref_doc_id": "c9a7daf4-170f-4737-949f-46f03f1cb49f"}, "9747262a-ed9a-47b3-98c0-a62f6faabf44": {"doc_hash": "6834cb6fc69bd92f69dfd2dd72053a325632554b8ffe41c11b86f217930a5624", "ref_doc_id": "f1bf9624-c2f3-408c-862d-f7bc4432779f"}, "5f1d76f0-0192-4647-b8d9-e6f4564f6e1d": {"doc_hash": "81227a27903d43add6d277cd8b41d8efb0a24b58779f3bbd86d10ac01742f901", "ref_doc_id": "b9a0eb37-cea0-489a-8fc1-91d70c0c06cd"}, "262e72e0-a4a4-4e76-97d1-bf57f6be4190": {"doc_hash": "dc41c6a5ce36a32a28e8da950833548b21d18f067364ed3c4a2538d9d84022b6", "ref_doc_id": "7b4e3ecd-7622-4247-8cf4-ac447425fc8e"}, "d483793d-9072-4987-a8a7-64fa92466e85": {"doc_hash": "4f3c0af103af8eecf4facb1e448be47dcd7ea97ee1d8e70cd8383338ab7e0289", "ref_doc_id": "2c45f928-8077-4a01-bae1-6366cd2839a1"}, "ccaf8787-528d-4694-bbcc-49fba19d8ad6": {"doc_hash": "5497d8e0bef43d6db491d043082e0fe52484b38c6f15c6b2ecf193f6fc3481a9", "ref_doc_id": "2c45f928-8077-4a01-bae1-6366cd2839a1"}, "856e2df4-16e6-4a73-a3d6-e8fa8e253837": {"doc_hash": "0ea1f3b5a2e9344a0b3b01855ac2d1e59233619fb6be0034d77aef46743473a3", "ref_doc_id": "109bae82-767f-42df-bd79-6d3758343c8b"}, "3b4589c0-b7fa-4f8e-ad95-52757591c475": {"doc_hash": "35d6ad2a05223b724ca4f5033b9def18117098a8ee3c6142caeac8e63ca26777", "ref_doc_id": "9b61be97-f134-4785-8a0a-422a47ac24fb"}, "dbdc807f-899c-40b4-b72b-cc8af0663e11": {"doc_hash": "1abe1e0b94102263c40e768fdd4f613c4ecb9da70441dde490d55aae8a715ad0", "ref_doc_id": "61be7ca4-9110-453a-bf72-bed86c7fa77c"}, "2807264b-f9d8-41d1-898f-f68350f12587": {"doc_hash": "4aad135de80ff0d9bda0351758027461c7d8fd5f22397e2b11d395e3fc5331b2", "ref_doc_id": "d9813d11-1c9f-402f-b405-3cecf6096157"}, "a99ef410-0db6-42ee-b6c6-fcd901610caa": {"doc_hash": "84b180a5e5e5e1b237e64a0f1e4d46d5fa0a3f59437571a6f65a21831261350c", "ref_doc_id": "3b7e844b-bf38-483d-9606-492c4adced2c"}, "b80eacd9-96ac-403d-b061-41c8e0de9bc2": {"doc_hash": "a16e5a7409c1eb9621d89a94a5a6ed492da2d94f7410e7fb4cda15aa8a52ae16", "ref_doc_id": "229bff9f-fe1d-4592-89d4-31b20d67b052"}, "8ccbd774-a61c-4f7a-91eb-56e6af7cbc29": {"doc_hash": "c1670e8a1bb1f8513e3b4f72cbdc88202051bd198b5fc7e46434e63a956ec510", "ref_doc_id": "a5eeb29b-fa46-47c1-b3dd-24f661fff565"}, "26a01425-7f52-4e47-9598-f1f6558c4e38": {"doc_hash": "369ea01fe8207bf0288b8322cc8291117cc71bb4e0ac032467dd4523b1f104e7", "ref_doc_id": "5ef426aa-ecb6-4cb3-b042-f3abebe067d4"}, "f53e9e5c-269c-4681-abfa-ebcbd953b449": {"doc_hash": "7f200067568253ef9f9106238641a9338d9469627273dfa9e010ce0d030de983", "ref_doc_id": "7fee1e16-9b2a-4116-aea3-85d7d8164b64"}, "23b6bbee-56db-4773-bb8e-c8ef17a0d354": {"doc_hash": "9d74561f90f60a5136468edfb0adee1a3de9a2eb0de1f79f856a6d7608018330", "ref_doc_id": "a4b6c717-2916-48dd-a718-96ade104ff55"}, "cb11c95c-9701-420d-aa13-01e97c432785": {"doc_hash": "01e4fbe317cc4f0ab593b979a7cd2bd47cd1a55b103d4d36cdad3298008dbde1", "ref_doc_id": "c9cd7b53-638d-4240-8167-fff590c8e4b3"}, "73f2e2d5-ba77-4372-941c-adf338edfbd6": {"doc_hash": "4b547379ae4c45c3007d84c4f41acb5758d02c9fd5bade3170c76d46d1865c21", "ref_doc_id": "4d496f11-9210-463b-9de7-3c8777964888"}, "32df15e8-4c04-4fbd-b25d-792fd7739fa3": {"doc_hash": "d8efc82607434308c9aae4e35b44fcb48ca9a80481727b5176d28bf549168880", "ref_doc_id": "b9df10b7-cbb7-465f-9cdb-af9c405a4ec4"}, "40e43fd0-3aa4-4125-9ab5-16c313525000": {"doc_hash": "b16079ea6e5d6338a6b9904148e386cd24c4dd2fd8e040e65517645f197ba0bb", "ref_doc_id": "3772b072-e19d-41f2-8387-e4ab9a4d99b7"}, "201b982e-2488-438b-856d-edf4afbc9abd": {"doc_hash": "e7899452dcd70aa7522c418a22328b67deaa0b41c5530429dd70ae02b855032a", "ref_doc_id": "9dfbcf5f-d75b-4df7-9b17-fd73622ad14d"}, "b3ef7acc-af82-44dd-9e56-1ca45e9c569e": {"doc_hash": "07658526e00c3fe2cd046245c26859f79b171f3e8e3555233781e349cdbf5a83", "ref_doc_id": "4270275a-b6c3-4c3c-95fb-73a22970fdcd"}, "718fe3c6-62b7-4675-9a59-fd6656853f8f": {"doc_hash": "aec9923ce716a6315ac01c01c92f16b004f9bc7ea33016b6118c9e328aa0645d", "ref_doc_id": "fc595921-c3b0-47c7-ad65-ef84b94e6f4a"}, "0e93e10e-ad58-4075-a605-8a70cd7ad790": {"doc_hash": "2699afbbe09124abcf27326d75ede4b0bf550b2db85754b7e7ce1a0aac0703fd", "ref_doc_id": "e8d1cc0a-56f1-436b-a665-f90298471ac5"}, "0c8c3fc5-7e56-4df4-b8ad-7d7457effb44": {"doc_hash": "c317f540e84d0f27cec014b581a540ab10d9e18927fd1e17c55d2200f133f6c0", "ref_doc_id": "81aeca97-73fa-4066-9e61-a9495b041d2f"}, "7ee8a884-ed1c-48ca-ae96-a406f7cfb9cf": {"doc_hash": "1679d6f09e94a2dbafac81a544d7e0dce1b68253a7c05ead127289b840d701aa", "ref_doc_id": "bfb68a4f-d92b-4192-b874-89bd7558906c"}, "6ba24e00-5ced-4b59-9a7b-4f16dd7521f9": {"doc_hash": "9173c7856ed95b6913e600de59bd81c84737215729ff1f1a5b121c46abefa20a", "ref_doc_id": "9158c608-b1a6-47fb-9566-c00c9ebbca89"}, "c341b9df-20c6-42c0-aef0-6a8aa633a9cf": {"doc_hash": "bbaa5caf3f28bf0c5e5fe421e5a1aa1da76b1e93d4cedef57a309c7d8ca215bd", "ref_doc_id": "31542d1f-cf14-4256-a40e-020f0bf56662"}, "362c5ed2-0a84-47d9-8df6-0f324a08ef83": {"doc_hash": "baa995a692e0794af5a7001c5a7a67ce056f32242b00769a3ea74ea0c392112b", "ref_doc_id": "582ab7e0-44e0-483f-a48e-0ca058315199"}, "89fbfed4-f06d-4e63-bb5d-a883cb7cc895": {"doc_hash": "b6ae6e243a854025d919ca315f0640817831c9d463bf2f62b4c16f86443e511b", "ref_doc_id": "acab5894-b1b3-4568-b1b5-d98b3720dc6f"}, "c0e183e4-3be6-4a97-941b-e48f710f6993": {"doc_hash": "f10e5646b089f9b8e1a450f333b5ed0956da79e758b21cb324350850036080b7", "ref_doc_id": "64ec9b29-17f4-4975-8027-959ce2dbfb07"}, "e514cac2-2a3a-4a45-976a-b5a4bfd3066e": {"doc_hash": "758169a99fe7429a85571553da56e9053f5d7dc3a89aa708d9ec4a35e56138cf", "ref_doc_id": "35bf44aa-a223-4ba2-9c0a-d75127723a07"}, "4da301f7-2c3c-47dc-b2e6-214fcf6f1b9c": {"doc_hash": "e30e8049f5b1dfb6ec0afce08212ec7adc3cc49abde8a4c250ffa6b54405aadc", "ref_doc_id": "afaabe26-565f-498d-a50a-659a9a058f77"}, "bc3cf4c7-bf74-4664-890a-6d66e8b15d9e": {"doc_hash": "d32857d4002078bfd8b1cc32aa715e80f5fc122b2add3e6c5e74ac3d009e71ab", "ref_doc_id": "792baa73-e0bc-4a2f-8b3d-c2002fd8f2b3"}, "9f14249c-cb90-431e-9db8-eca983dd0436": {"doc_hash": "545d6bfebb4dbe048d151ad2ee875ec041d25286b187db12ae31fed4bfa2665e", "ref_doc_id": "769930bf-d3b2-4e08-a265-d2c6d5a87827"}, "07c44aa8-672a-45b7-a757-cc3f896ccf7e": {"doc_hash": "fc8f11bc3c3b7edf08134c45ea2b2c46e565853e1c97529373279d4766bc984c", "ref_doc_id": "9b858b8b-fe69-4133-afee-9df70d2ddeed"}, "a9c12783-fdd3-48e4-8428-0089464a9fa6": {"doc_hash": "311ea8bc5e2dd8e0e0c38ceae94f25670094de56b24c8fbde8d9f1224c6495eb", "ref_doc_id": "a03e2141-0da3-45ab-8809-269a065fbe0e"}, "7fd87b2c-04a5-48dc-a9b3-9b0ed40818cf": {"doc_hash": "a561cac5663e347465b20f0ec086542e0988bbe8014c558528d4f40282f22a6c", "ref_doc_id": "deff5334-e69b-4144-ad04-85c36578fda4"}, "c0267acd-ae2a-4a9d-bf3b-fc7eaba6dae7": {"doc_hash": "d341772ed0d0059799c92fd4ea0e1d4fd67983d29d722aaa347c578a0dcc5bff", "ref_doc_id": "a8d66870-36cc-4e8f-bce2-3c143aa4fe5d"}, "e5e7e471-ae09-4872-bfb0-aabc2a87cfaa": {"doc_hash": "9fbf8d676c77a2cb208f53adf6b9ac8c72404518509ec41337d814b62d472cbd", "ref_doc_id": "29932d69-88da-4e6a-b72f-7db508a893ed"}, "a44c5e7b-9784-4ad2-bfdc-f0efa9ee7c8f": {"doc_hash": "790b6a6f3ce3441fcd1fe05a2a31bf1419e08ff8284d6267d38685c3ff2b7ed5", "ref_doc_id": "c79ff2e6-2200-4025-bda7-d86d30ed906d"}, "3f114365-777f-410b-b59d-f6e3cf018439": {"doc_hash": "bd47f04db44ad9b5ae913035c2ddb57d9805aeb90e0187ffee0e680de31abae1", "ref_doc_id": "76db04df-509c-4525-bac8-657eb8e573b2"}, "396b4d10-06dc-4598-ab2e-62c6b0ac0b02": {"doc_hash": "8f7c232597708ac4ba3ecea54efaf890154821d460bd72ccd46d3615db1a46f7", "ref_doc_id": "06020f69-c3f4-493a-b6f8-f4ccd857c7db"}, "ff225bd4-065d-47e3-a284-3725d21fb482": {"doc_hash": "f516ab03dcb9bd3d4f040b23e98758797c24e758578bfd47cd804724b9890987", "ref_doc_id": "5a74bf6e-d141-4b97-b53e-08a7b884207e"}, "b62465da-281b-4995-820e-bada9a5d4e10": {"doc_hash": "b317869762d732dffc0d0f23646ebb0cede01c8d2b84a6b74d59d733d227963e", "ref_doc_id": "5986b8ad-b245-402d-a8d2-bd37144def2a"}, "8a4b2a9f-409c-4d7e-88a8-2b6aa1d086ba": {"doc_hash": "ea285d86c1cf3c49cd86c08f2accc0b337d57e45b2ec19b68fb5322eb11d4132", "ref_doc_id": "848a1b62-e41a-48cc-97f5-13e24a322e6b"}, "f7eb527b-b499-4ba4-839e-04301b3c7b70": {"doc_hash": "1c30810a98b97d6116f4b58ba4498db903a4011615951ed76e74e2dd11553e44", "ref_doc_id": "6fa7f371-8a2a-49a7-a274-013c0d588e8c"}, "076ed0fb-1460-46b1-8555-546477a99aa8": {"doc_hash": "c987dc85c44fa0d292969b2d8837703780c4c6cb51f58af8b8c9af61eb66b4cd", "ref_doc_id": "23a3b558-c573-4e5b-b797-f81b74a802a0"}, "a5c4ec88-5db2-4dcf-9d2b-01d4bedc008e": {"doc_hash": "af385bc02c756106feda5f3d7265f8a7bb99267b282dd495ef5a4378c207a5dc", "ref_doc_id": "eac779ea-3a7a-4412-84ce-1835ca79dba9"}, "ff9d706a-7d73-4945-b431-b0b37dd1289b": {"doc_hash": "08192bc4ac665b31ad09e8251096738d1155fae3220bf7db9384c7d4432ee482", "ref_doc_id": "3b0170cc-f73d-4671-9751-4644d5b8455c"}, "709dbdea-ba70-474b-9f38-6e3bd01abf3c": {"doc_hash": "c95e2b392df51519a2465a46a0b0646c0a618d263cfe5a844cc3c827bd7bf248", "ref_doc_id": "26a8c209-88cc-458a-acfb-1a33092706ce"}, "d705891c-51ee-4abd-9279-c54799b769aa": {"doc_hash": "186ea6278ca6e2df3b28ba1ad8a644996c63e201910e6ac0b64b9b09d33e7c8f", "ref_doc_id": "3a78d674-db06-429c-a8fc-ab9cfe64aa3b"}, "73637c4c-17e2-4922-bf63-2caac86d577f": {"doc_hash": "4359f5e23dbb49b47865398604ae9b267b93dd80118921553a5201fed0292868", "ref_doc_id": "fc0d9066-066c-4883-9523-7fd76aa1511e"}, "69e3e2b8-9778-4a98-825e-b06068534c48": {"doc_hash": "3717dc6044569bbfb606082d84cc0d2ed90d9d9a204cb0a60510b50de832917c", "ref_doc_id": "fc0d9066-066c-4883-9523-7fd76aa1511e"}, "83a81b29-3541-4298-8658-c3aaa68e8570": {"doc_hash": "bcbaef557029c7c71d7b9ae5b4f22089955cfbd0392a5989b65452ee61c787c8", "ref_doc_id": "0b2f1043-6815-4bb4-bb3b-6dbb4c9c4d39"}, "e2652d65-6374-488e-ba91-f79207ee74ff": {"doc_hash": "7e42cd104f547ba296c3e382e9538fbf631f8a74c0528de43f0f90566bb03b72", "ref_doc_id": "7b174519-ba3f-4025-a2a9-24a6f62fadf1"}, "e96bb609-a8c8-494d-8662-47871b6e0bab": {"doc_hash": "4d7d96176b85fbe02f5ce460f0e79eaa7d290c77af0a6c4c7756cceb038d45d1", "ref_doc_id": "92a95340-b8ec-46e9-91e0-b6ef998445b7"}, "018c5f12-0f0f-4c3c-9198-d67afd537100": {"doc_hash": "8cb08e9d267f5a5e1b12d07a14403e20a696820e46d3750ddc678008e4774324", "ref_doc_id": "8beded6e-8050-4951-9dff-cd18b351fa1c"}, "4a61aa76-aa5e-47ea-aece-934fa411d3d1": {"doc_hash": "a895edca49f7e50f1c29db9bd18228016486ef088246d0d191eccbcd8443b79a", "ref_doc_id": "db0f3715-2657-4354-87e0-517d78f607ff"}, "e11ecad1-218a-4aa9-b4c0-2a2e5ab8f193": {"doc_hash": "4ef611851c0495d10f7bc0d17db66ff017a4b29f2ad83f21b9556549f48dca10", "ref_doc_id": "4c4ea074-a551-4fef-a529-942ed5bbacf9"}, "2e20cb90-453a-4e9c-97f5-36bf756600fe": {"doc_hash": "fd72143ee9d53645955a244f7ca30b1fc3730c0814b76b8ff677f5177fc4b105", "ref_doc_id": "b9ae9e52-75da-47da-8d08-6bbe290893ea"}, "8ad5a9af-a439-4ef1-9f2e-56ef55010efd": {"doc_hash": "8ff5142a68af536cf35d44bc1a752779529ec9590b89d8dafac4cc2f6e3d6bb9", "ref_doc_id": "4b24bc49-b631-4809-8873-ee3888833e5d"}, "ca1615e4-3ca2-4637-9237-412c84f910b4": {"doc_hash": "649d151f225f2edba2430164422e2c84acced5e9a22e89bd3c3bf2d1f165dc51", "ref_doc_id": "e27c7a37-c793-469a-b527-904ac82572f3"}, "98b9b876-6a23-46cf-be28-479b238bb17f": {"doc_hash": "9f2d2dc07e5e14a447cf6032b0d7bf6baa11bd7b4ce01110ed870f5ddb25f0d1", "ref_doc_id": "6035f3e4-b42d-49fa-92af-c7e91ed69c0b"}, "c79efdb0-2251-4df0-8654-16eaf9eaddb4": {"doc_hash": "ed98d74addc69fce7a1e30f482712aa64171d547a1b86c1009fa20a91fe2ee9c", "ref_doc_id": "dc30af87-d86e-4517-ac77-f59eb102af6d"}, "955ddbe5-dcca-4572-b203-747836816a9c": {"doc_hash": "d50468389a217840c452cbd502c38be94d1521be7449e93a0da1d14d61cdeab9", "ref_doc_id": "4fa48adb-260e-4c39-986f-566607a2857f"}, "7763e508-2c9e-40d6-9d3d-8822eff53f89": {"doc_hash": "27bce68c26aee54dfa788de089541a635c28f6e43450181c28e4df7e62e5143a", "ref_doc_id": "443c7f33-d717-4a58-853d-ce552f83f6ac"}, "f9eeebf8-b390-4d7e-9bf3-bde050251f23": {"doc_hash": "391eba3123b79f83220458d3532b551cfe41f01e761f744115afb3501896d00e", "ref_doc_id": "73e78c0f-43ce-4c5e-8809-1a76302e85c3"}, "6bd66141-d912-499d-b055-5a4556386f22": {"doc_hash": "538f393c9a3369fb39bff8e36c0c7ae46d88ce145c5937772af69dc7423513c9", "ref_doc_id": "bac1a5c7-3ea5-490d-b9a5-f5e1e8195faa"}, "ab415a56-9812-44e6-8808-e65ea9443d3f": {"doc_hash": "ef37c7c4b37ae7a6349cb5675f05b92aecba7f3799bfdc98a03d50b95ef329b9", "ref_doc_id": "7642a021-1b00-4821-bf18-5079d21147f5"}, "121ce724-55da-4b95-81b4-53c984623e8e": {"doc_hash": "bcccf506b3aabc63af4c9c714c0112ea73a127bfcee0c183de31c2461fbe75fb", "ref_doc_id": "95e0f128-550a-4267-a914-57516abbfed7"}, "3c779643-5e10-437d-a088-9ad6f6b24a64": {"doc_hash": "22a347ad7bb71e120e2e0762c377d1a858776c7bea919ed7ba3a241a15d20c41", "ref_doc_id": "d54f9510-2dba-4223-b39f-88ad6c7b2c55"}, "30ec6867-cd20-4cb2-9be2-c194c5eb70ba": {"doc_hash": "8abfc9320979c537d2403ef30d4faecd97be827ece22b3d88fdd20e294f21026", "ref_doc_id": "240753c1-a9e0-4ec9-a61d-4a80068a02be"}, "cfc2b5e7-71d6-4b80-a30c-3642051aedf0": {"doc_hash": "242d90690c4a888d106f7cf93a21f811f2131859149a54ce79fb6ab5fb30cb71", "ref_doc_id": "ed04f952-2b9f-485c-94f5-b552ec3f4880"}, "edc85236-27e7-4a7c-9ef4-f12425915dd4": {"doc_hash": "bc1e59ff02f39506b974b06c7f3a0504f6a244e46fce3188ccf9f29e30d6f94c", "ref_doc_id": "b8022a1c-b153-4c0d-9f8f-be853f942dee"}, "13606472-3242-4888-b72e-6b777d0dfa90": {"doc_hash": "631ee3af75db07df2faf43e48ad127a1ee622de3b7088dd72d88300b8a25d96b", "ref_doc_id": "023f8638-78a5-44d6-9a38-77831d7f3b20"}, "cda774f5-1564-4e84-a418-098736e9256a": {"doc_hash": "ff366bb84c88aba77278f0f450f4741636e1681779504d33c4b5be3366f4c9ab", "ref_doc_id": "6e51b324-e3cf-4cb5-a0db-b3452483f906"}, "0d264520-2ab8-4adc-a72b-3a85c270d44c": {"doc_hash": "c49c8c35ddfe2530de056b1d9b912c5d1129ef0610f15d31848e38f323e5aad6", "ref_doc_id": "389cbf80-5582-4fdc-9006-6ffd0d713360"}, "a995e6fc-a3e2-4943-aac7-ce4750ecb3ef": {"doc_hash": "30d0afbe7856c4caf6ff2f74b6ccd96dfa3882b2f6faf976ad76e9461f4cd7e7", "ref_doc_id": "38830d6f-2a8d-43b9-a468-8795e65f34d6"}, "1752fe98-b578-4712-ab7f-4105f16983f1": {"doc_hash": "6f70f38c534b3b2fcf79839a5be56e2a194a3cce7d3c340cfaeb7fdf357fb55e", "ref_doc_id": "2d98a228-a166-43b2-b95b-b5921c96f2ce"}, "55a44aac-758b-4ad3-9b36-85a11e342e87": {"doc_hash": "09c718102d680c14d5a5c414129c77ff322a333397807a87bf5dec66dbde1d00", "ref_doc_id": "0787496d-d332-48a6-8fe4-91183fa2febf"}, "1ddd08b5-03be-4935-ab39-a2f6d88aec00": {"doc_hash": "547bd914b1d81c95a3a5b989265f80c91ad5b6b266eeaec0b7222b7c25f5d10c", "ref_doc_id": "00ee8221-5fa2-4baa-b81d-d0fb17492a48"}, "983428ec-f179-4683-a447-305dac7a4a15": {"doc_hash": "b7e3561e6dfba4738fe1265f03148e57da8fab291ee6b6beed976c32139adc57", "ref_doc_id": "de6053b8-2caa-4b56-91c6-be3e6279a69e"}, "99a7e504-4a3b-41a7-8f12-a20123304343": {"doc_hash": "102ccad49b912487a9ed6a5011c2c76f62740b07d983077c68730ef98985bae2", "ref_doc_id": "b0f58e17-adaa-49ea-baf9-d0516229cae6"}, "7f993bf8-d40c-48f6-bede-919abee52ff0": {"doc_hash": "0108fd8e72189999096683e7786ba750538af0e0dbaef5b66c8dcd2a6f68c08a", "ref_doc_id": "f374ceb2-8e59-44cf-9c4d-3097016c0e36"}, "c501fb0a-0d68-440b-983e-008daa02afd3": {"doc_hash": "b640100c2dcb0002e69d3fa62a8f8314f6adaf1fbeca542867618446f537a1a2", "ref_doc_id": "8d3dcac7-9b8b-48f9-b4cd-183a8ea86d29"}, "cc987ece-ae6f-4158-b00d-5d21919b8504": {"doc_hash": "d7ce97815e3e5524743166dfa3c5c025aafbfb6109da9257230eb33bc3e253ab", "ref_doc_id": "b0c6df8d-1c84-4bf8-9241-3615149e1923"}, "600cfbf4-fae6-4ec6-b642-4b0e318bcf91": {"doc_hash": "3901277a1af02bc86f6e464e71f2ed1e2dd4064952894c7881167439b324f547", "ref_doc_id": "898e7e62-d843-4612-9649-5878c691e41c"}, "47a74155-9f56-42cc-8384-06c8585b6f74": {"doc_hash": "71c5bebf4fbe53d689c26c18783ebe4089d6270d327c9bb7a16159a345542d7e", "ref_doc_id": "6cc14e35-7a4a-408b-84b9-443447c1b84c"}, "da62c221-f983-4b96-b414-80462caedef7": {"doc_hash": "b34b45f198354297ba660410f6316b3763d981d2559e2a8081c6802a95eaaed1", "ref_doc_id": "47e95695-8266-42af-adcc-4114dee9afb6"}, "b7eb00dc-ce58-4d78-be9b-33e69d9dee26": {"doc_hash": "946e49fb499821a8c849ff43922bb3e02286800cc533697cbf97a0e44ae9a7ce", "ref_doc_id": "0e2fb333-5f20-4ef4-874b-6a6b15e3e9fe"}, "03fb213f-ec2c-46a7-b6fc-c95ffcf645ec": {"doc_hash": "88f04f212cf2ca018919f2d690447ee015c19de8a7f67d38f0c3c6392201263d", "ref_doc_id": "9bd8b487-80cd-415c-8bd4-b4253824d14b"}, "20124605-a8e0-45a8-bd81-03ee568e27d8": {"doc_hash": "152fd5aedb02c4bc1499528c5065578908fe4ab1c9ccfd587730cf30f1e186b5", "ref_doc_id": "e80f900c-222a-4779-98a2-6f689b41b812"}, "9596622b-cd21-4561-a71f-4f208da31ef4": {"doc_hash": "d7ed2682d7c93b37e30ba395b69534496a3c1cca3803e1b2a385da6a03fa87a2", "ref_doc_id": "81e3a590-2639-42d4-a43d-8d6131d91357"}, "944e7a93-e8b8-45e5-b043-810f864f5f9f": {"doc_hash": "cda81394e389b1da9d1b50c9d0a65bf4109ca94e92ce2fea47492bde86c4aced", "ref_doc_id": "a6310032-c0f5-46d1-9ccf-07ef75c7c220"}, "e3683ec0-bf02-4e2d-ba76-818c0bc420f4": {"doc_hash": "50431ae52f8690665ac395aedcd9f6a28e1463685785cb6d0812b3ddb8cc9a6e", "ref_doc_id": "cd1cdf00-711a-4ce8-9607-4eb3a9322376"}, "15a903fe-681f-4183-b884-b2cb73af3460": {"doc_hash": "4b4914a8aba116ec34b0dc3044aeef901b8f01cfbfc34fd28e67d185db6a817a", "ref_doc_id": "ef077fd3-f941-47b4-ad1d-97364dc887de"}, "c6c280e2-02a9-47b0-a4d7-6271f5f43bab": {"doc_hash": "225bb5ff8e83701df1098365bb918f2c5df427311e48dee376cd918dfbe0a43e", "ref_doc_id": "312d8d37-b471-4e18-8f88-d496cc8fb0ac"}, "6d096ce4-43df-4405-b046-682eac18874c": {"doc_hash": "0ec7ccce2c10f2e7cdba2e7a753c635a9d2170322544737a9bf1b460bf2cd204", "ref_doc_id": "168f2bd7-a1a3-4add-9dab-23cf371fc18a"}, "336a7fca-30b3-4856-b8d4-d42996eb3a58": {"doc_hash": "0da86b4c56c9536e696fc9ba605b25ed456b75add587e2766f0d6b28e72fd858", "ref_doc_id": "b805e8f6-e13f-4395-934e-b6f2e15de3c9"}, "a9fa2482-203c-4041-9b42-3f3b9aadbab4": {"doc_hash": "b29e947751d83f915ecb5d838f50288ae31dd15366177aa1e546cf73bdf929e1", "ref_doc_id": "f34f0121-5fac-402b-9898-c3183188df34"}, "c34d9611-c1ab-49d2-a4ec-2f09cc9abeb3": {"doc_hash": "edc2cb484ee52c59b268ae5d34f702bb2f3f481dcc918e98d61a74e45d564831", "ref_doc_id": "8aa3958d-9b15-4b06-bbd2-a6a06f97136e"}, "6c5cc375-6433-412d-bdc4-8676fce82635": {"doc_hash": "263ddfe789035ae2a1b03276b7b2257c95c704a8b82da169cea2c99e465f3ca2", "ref_doc_id": "504741b8-7fe5-4ce3-9b39-fca626fc6873"}, "8eb8dd7c-c5fb-4857-88d3-0021505c729d": {"doc_hash": "dbb9a53c22b877513c2b90e13a89c8747d3c7d19a279106121bb1870d60c891d", "ref_doc_id": "121470c7-26dd-4419-aef1-891846bdaaf6"}, "85c65eea-1a14-4db0-8879-6034cf65eb27": {"doc_hash": "a1b59ca34000f1cdadb7b4748234583642edcfc166f290d61ff4e0c9959dfbd2", "ref_doc_id": "5ef30bd3-43db-404e-983b-fce444ff31df"}, "72aae80b-53c4-4fa3-a203-ca136cb3d9ed": {"doc_hash": "b5e626e0e3641e793bce2d5bfd32cc5a4424fda321a6489f0d1e3be714d1f759", "ref_doc_id": "609e60a6-6eb9-4dee-b259-dfb783745534"}, "4a2864d0-b56c-4178-b572-21266c5b7ea5": {"doc_hash": "067429d798e17918a317408df7d1434c9a55991a4494e34d2a967a7cc3cc500c", "ref_doc_id": "afc67e15-c2ad-4962-8b16-1d33ae4237f0"}, "135f80f8-7b8b-490e-92bb-3e050ccaf723": {"doc_hash": "1d76f9a63105666818ba0753d70d9332fb7326b09273558b25ea6ca6d9d12454", "ref_doc_id": "af8cf072-472c-4a2e-bf68-baa1a9e331c8"}, "873c3315-5018-42bc-9c3c-623e0a5258a5": {"doc_hash": "7b927be4b1e20301215966abb7d03a6926131afc9584cb06fda392eac72e6714", "ref_doc_id": "2d378677-c7ac-40c5-9cbb-4281cd27359b"}, "e7f9df2e-2b83-4e81-aa4e-f6440f514c51": {"doc_hash": "2656e5f8935648e1face96527993b84aa06826008c0c6186b3c8f816c1aefc7f", "ref_doc_id": "ea33f85e-1939-454d-ac47-351885ed5c3b"}, "de1ebb2e-7627-4369-b21a-7c38ddae7c93": {"doc_hash": "41044a2af14485c9d46f67195b86eddba67e1ce834ccda554e6e818d6caf48bc", "ref_doc_id": "9651d5ce-b3a6-4e3c-a26a-6c2aaae7ab3b"}, "548bbb84-dd27-41c3-b141-280cdbeffd55": {"doc_hash": "db52c45f5504a18e11284a9718f0354b8d37a4b87bdb759336f2e212390d7eba", "ref_doc_id": "bc2473c4-cdeb-453f-a53b-1d079892cf69"}, "c80ac901-1553-4f79-af5b-6b3cc8da4a99": {"doc_hash": "179c3ea4a1731dad4c4cd85dbc4f563cec33a3a63a322495cab196bcbbcd2195", "ref_doc_id": "023aa0b2-94f1-4b65-ba6c-c95104dec923"}, "d967ea30-3291-450e-8c0c-8c44b1680e7b": {"doc_hash": "713fb3c57c052c0cc889813bb2eb621a44802bd3e53be6f7c84aae9790c86284", "ref_doc_id": "47988ee7-2b74-4c9b-95a1-7bd08f56889d"}, "16b32db5-59ae-4b3b-933c-9087c15ada37": {"doc_hash": "411b994714c7dc94efe6ee47e302ede55a7a25f815f71c1350701512e592d2cb", "ref_doc_id": "9b23b307-6366-4fb2-92e6-0d429e66bd53"}, "04f92352-7c93-47b0-9641-5841aef55978": {"doc_hash": "584062fde89014d009776ccdb93109d99d7e9847454471d65b3b5e8182c355dd", "ref_doc_id": "5fea1050-d96e-4666-8e4f-3c8375fc3615"}, "ae6e7350-2411-440f-887e-b7bd29f9e240": {"doc_hash": "549cf4bc0163339c14d50833f117b1eb92459fb72df2c9b449cce17a2ef2321d", "ref_doc_id": "b54fc7a1-a217-4d00-a9b5-3fdd67f35bdb"}, "cd611e1a-2807-4be3-882c-98af66ffc6da": {"doc_hash": "7c3953f3e8a0fa975dd71d1dc1d7f6edd7050f35721504088bc301173aef921a", "ref_doc_id": "270bad2f-426f-40f8-b5c0-8094f5ff9ea7"}, "235efd0c-3768-461c-9bd7-d6fdd5b4cc1f": {"doc_hash": "69f8b5b17d8991111d94b364f71395a30406438691de22919c574db3fa159fcc", "ref_doc_id": "10e9808c-7009-4f0b-b2b7-55291c06118c"}, "f7c20cf4-5598-408e-abbe-5ea845297d23": {"doc_hash": "f8aab604698587e23d015165ac39530c6f31b9ca4bb127458c59bc2ae9aa6e17", "ref_doc_id": "ba75c909-cd34-498d-aa23-86f05df10292"}, "6aaf9e53-ccd5-4e4c-9429-84aec36ee11c": {"doc_hash": "d9a26f823668f312e3c65c59e85564bcc1b56418b31ae322aefa12234043d4f2", "ref_doc_id": "d9152f50-5636-409a-b40e-fd3b82f7ced5"}, "27924567-3d35-4bc7-9cab-74fbcc9d8058": {"doc_hash": "3fd5ab05ca1bf243757b3b9058a751dd73c2a7ee2a89d31784f5e9b6f9ced7cc", "ref_doc_id": "272a0285-1392-46e1-8b9a-b161c0235156"}, "bbdbb814-7156-4ec5-b44d-7722a8283e56": {"doc_hash": "a1410faa8a4ceffa2c1629281edebc875d37e2137f4a7c92ba65be2e9bc42a7e", "ref_doc_id": "45b8cea3-2033-4594-bc0c-359b76f7ae99"}, "38e2311e-995f-477a-8a4f-f752cb272459": {"doc_hash": "7eda5a1c7a8aac42275b7d9bb1b66a9b76beb203a2cfa6caa55d86d05bfeec1e", "ref_doc_id": "525de054-5655-45fe-9873-5d8e50e2d959"}, "7b01556e-802c-490f-b13c-c3ce5c0c1536": {"doc_hash": "13ee4ec65bac2355eaf7280e06dce884945bf6bb8ec28f3f41f7e7214bfa0c2a", "ref_doc_id": "2aa95c5f-ae1c-4f02-b090-86e2d953a135"}, "3b1a955b-ba31-4832-8ebc-1d5931826429": {"doc_hash": "aac26dc84016b801e763e64ba2fc92879a60b89c7348cdf075343570a53f12ea", "ref_doc_id": "69a9bde2-5724-440d-8228-f60e333866c2"}, "bbfd043d-d3b0-4e55-9843-4121b3afcbef": {"doc_hash": "352f1708a1e2a379a778694b2f77ff13bbd5337be3e0ccc723db137bfb279da0", "ref_doc_id": "3789d72f-58ed-4fb4-9f15-1dd8abb9811b"}, "826ed24a-c373-4ea6-a5ca-9440ede5e176": {"doc_hash": "a5f2be01d20a7626864e486ff38c74301570d4f58a4dddccceacd3b2eca60ab8", "ref_doc_id": "c5fc2d84-afde-4b59-a06e-4aacf528b6c0"}, "3c2572d2-fd30-4c50-9d76-50a8b3b845ab": {"doc_hash": "d9ca171a5773922dbbb8084e9378b676b3e5b52bf417722d14c2494a5123da24", "ref_doc_id": "157d664b-0d36-4c16-b776-18a32d46b7ff"}, "e77b85cf-41fc-4a05-88f4-c1bfde303819": {"doc_hash": "94d70d15ec34d0ca0fb434ee93c9e48dfecb4c6f7643c6277499ab6c32b64025", "ref_doc_id": "1f312d57-e547-447e-8831-659fbd3d5a95"}, "d2a61fbd-6f53-4ef9-b874-62d217c1bfe7": {"doc_hash": "33ee787f9804a5dc66d679081cd8e6aeca6e03c119cf6249ee43f7fafc301257", "ref_doc_id": "eca08ce0-72ba-49e4-b097-0cdf2c313d45"}, "27e18dc6-f4b9-4f46-b1a2-2fd8b9e86042": {"doc_hash": "bfe6f213a6ef20fa8a149fa9d626cd10ecda4fb9e95a25574ee78167bc0de165", "ref_doc_id": "7cd3dd37-5acc-46d4-9870-13555b01f87a"}, "6713d61e-cbac-47ec-98a6-85551bf52e09": {"doc_hash": "f3b12d1bb3d27a61a3a16a07a43e87bbeeb38995ccbbf6df5dc8490cd621bcef", "ref_doc_id": "299535c2-c70e-45cf-9736-a663c9984d59"}, "91804449-3e9e-47c1-afed-44b65ea7955c": {"doc_hash": "253d995c258ab5f5d10b1c109d1705758ad3d65f39566d8d01dbeef5bd1729c1", "ref_doc_id": "3f52ea2c-41a8-4cd1-8ff7-46ee68f6d872"}, "fbc125cf-25ad-4ef7-b27c-56270f9716fe": {"doc_hash": "4499e1e0c68b480ec7d6cb011bbe2916fc1278b888b85be35b4216f3474262ae", "ref_doc_id": "14633f91-9d9f-4b90-a0fa-00e942f268b1"}, "16d9c34c-5210-4160-b69e-f9fc311cb6d5": {"doc_hash": "205135eb56863e411f25d6f8ad12df58c2e1e5e6422448b4a38aa452d08eda29", "ref_doc_id": "cfd596cc-3b8a-4dd4-935d-610f62e95576"}, "e2a30632-6aca-4355-980e-8f336aa5b728": {"doc_hash": "55b127073a763b48a18d98c2d7503b38bb20c08ee15c6b02a54bd5afa6b2e128", "ref_doc_id": "0e3a7c7b-8517-47ae-ac4a-5156475c71f6"}, "df848441-e320-431d-b58e-402377365d64": {"doc_hash": "c6f5438055250aa5cd60b7fe306fff2ed7a84eb6cd791ccda6c6aa1f48ea713c", "ref_doc_id": "d38339ca-c680-4d64-a924-cfc6b6ff8e81"}, "1ef9d2c5-063f-4a57-94d5-6be070f9de56": {"doc_hash": "149e3cbcc6f71b0c059ef8091cc5430b6b15655fa4763134597757d8b1801179", "ref_doc_id": "a67c5113-9ec6-4cfb-a6e4-ea025cf9cfce"}, "40ac6578-5219-4fc1-b501-e71c0b7108a2": {"doc_hash": "04ea0c47a12e66a97b2eea0d38e7b2ce717b3c964d07e62c4c04069564f98559", "ref_doc_id": "625b1f0f-d407-412d-9971-586ec4d72f37"}, "1c8e332b-5396-413d-90f5-26afb805a713": {"doc_hash": "be7243ea1a18941887d6d9bd797755873cb9d79e7a39a05125e68dd76c0b750e", "ref_doc_id": "4305f178-8fa0-4e2e-98ee-95058197992c"}, "9d26f3d5-15ed-42ca-a32b-08804913d6bc": {"doc_hash": "c920387687885e095245131c85c1a75b47227ab64645ff5d2a9923da7e786c2c", "ref_doc_id": "a9b664ac-03ad-4448-9a55-55221d6aa9db"}, "55cb4855-da17-47f5-aa96-814cdce00e62": {"doc_hash": "e70bd43f6494849a9a472b5284da4ff482bbf98f9e2305a01e10888e604ddeae", "ref_doc_id": "48abef9a-c1bd-414a-be05-56f296bec395"}, "dc6efd91-5945-43c2-a957-c402f42c8b34": {"doc_hash": "e1700d6e5a61ce8c4163afc319c8d7388e7ba8b4daf569224b0c2297397fde6f", "ref_doc_id": "86c053e9-7e50-4562-8f4a-2b7ce2e6fa00"}, "49f0d9ee-f74b-4fd3-b598-4ce1eecf617b": {"doc_hash": "19e93dd7d1cb6672a6cbf3916d511ec983caf0f84b6c1c296d7af37ac288d798", "ref_doc_id": "86c053e9-7e50-4562-8f4a-2b7ce2e6fa00"}, "c7ec98a4-9faa-4c22-9736-11fc6c4de196": {"doc_hash": "2ebe6a6060c11c1601c94ec289b195d111d8b369dcdbae4a8e7cc8026c39ae9d", "ref_doc_id": "63cdbb72-8753-40c7-a677-65c432cde1f9"}, "95f58beb-bf27-4195-bd9a-90d451ff55b7": {"doc_hash": "00ec1b58dec24feab8f0d9b5a63542eb40495e152e52a8b2a6064db02e468406", "ref_doc_id": "47e362fc-6b38-47f4-9908-fd5498e41469"}, "52c5b349-40fe-4451-b697-99c59bd33ff1": {"doc_hash": "bf789d84af6da5b7fbcc764237674b8da14e887a4ebd371516ff301058c65a95", "ref_doc_id": "62400041-44cd-44fa-8f64-a6e9b2b2f289"}, "5b9b11ac-d1fc-4240-9ede-03125b7382a5": {"doc_hash": "66e3fa0755d01807f852657850c1330fc7a939b205596520aab5d3107a43e932", "ref_doc_id": "8402448f-d475-4c33-89d9-eeb317819125"}, "42310c2f-f970-4fb4-91a4-833ad0f95f17": {"doc_hash": "652b38e3fa43c8d200cc7adbb062f4c574d53f94ced27cead0b2d020ec841c4f", "ref_doc_id": "96bb5190-fb40-4472-b942-a3503e58aaf7"}, "ff04b1e4-324e-467b-b4d1-cb4b5134543d": {"doc_hash": "b471778c9141c3de3b04f0450b069a7044abdee97dbfc30fdb0340c1e3faff83", "ref_doc_id": "337b0cc9-c799-4fcd-91c4-500aac430e8b"}, "5130ab31-7065-476d-8d30-26230695de52": {"doc_hash": "9a6793c60852660529369d26ab91aa7df451995336f30bc73dacab67f1a7ed52", "ref_doc_id": "ed231a9a-d15f-4f80-b4f2-bff0dcd36fde"}, "f4eb04f7-f1fc-4599-86ff-9b7171412102": {"doc_hash": "aa953f5adb786da3dd8fe664a2154a67ec1f591d19016ad97faf68e08fc3a832", "ref_doc_id": "7a214dcc-6e75-4adf-8726-7c9d2c3cdead"}, "1d6ee096-ed52-4d98-9da5-134c76ffaede": {"doc_hash": "121950cc0eeea775eceffc7bedfc52d208ddcf11b4a9e0068ea83651552e2ea5", "ref_doc_id": "149509e7-458c-435f-9cbe-024fd66ad7b0"}, "d796c9a5-881f-4128-9eab-967c306e55fd": {"doc_hash": "7a60d0eaa1cad0e9e027b5e6f9b48a895d526cbce51732be682aeafd66a8967f", "ref_doc_id": "b2a9c8af-fb59-490b-8e11-9927c5a23a6d"}, "92cbf362-09a3-4248-92cc-5285cdde50ea": {"doc_hash": "c87eb2bb626d788a09aea51928c2e9ef957d67dd6f2a4aa22f6824817773a44b", "ref_doc_id": "54dec6bd-bc24-42d8-b1de-a632bcd56df1"}, "9894ebb5-698c-45c0-a375-8bb08ad21ee7": {"doc_hash": "95a4dcadebb5fa71c0eca09cc9d3eb8380cf7207e29350ea2890d1ebf3965c6d", "ref_doc_id": "2a48d303-9ff8-4376-9595-8e059618afea"}, "11df7f5a-b2bb-4a86-bbfb-5dab76b946b9": {"doc_hash": "05a76cfb3a36e1d98989973b05c3fcebcd6d16145a20b578989b6272d4d5289a", "ref_doc_id": "9358028a-d373-40cd-818a-5a7e59623d8c"}, "163b9794-43df-44a3-984e-b49c3c0c1a2c": {"doc_hash": "4890ae8c528caa29f3474ca264451a8701b6249cc2e69da412e86e8fdfee5c54", "ref_doc_id": "e0aa6df7-0612-41ff-a17f-1293a55df7d5"}, "6cc096c5-5222-42e1-b0c7-1a7dcd55ff7e": {"doc_hash": "62a9084983ddf2a66dad49070d3df9608310a6ea1e9a94dea7c30b1045480667", "ref_doc_id": "359a6c78-a474-4902-930b-561eb6589902"}, "8cc68a55-f039-4999-a5bc-90e687a10a02": {"doc_hash": "b26b6a96220bdf8cf2a68376630f6bdde1c7805b8e5100985dca19de8d2b72d5", "ref_doc_id": "fa171fb1-0cf0-4779-9db2-bed5e5c643d9"}, "79f5caf6-076d-498f-b0d9-eb8c615a460f": {"doc_hash": "c3f2a8b916c95c66d387cbfb9affb56ed2f1a53d72f6f32e5d3b741512d82e3b", "ref_doc_id": "6a7df70b-48c6-4840-861c-db2734ca2d00"}, "80e343db-878c-41da-ab2f-6fcf7d82341a": {"doc_hash": "27c0072b811aef259bb03b297b6eae24e611dddb86e79b6ec56e8f816f429cfa", "ref_doc_id": "3d87035e-b396-4fe9-901f-74b845ab58ff"}, "513b0573-f3f1-410d-935b-123fb1129c0b": {"doc_hash": "011f2f7556f183789d7c3ea721da17af07be5932757ebd8341bf438848eb1696", "ref_doc_id": "4ac69c36-5e22-424a-b556-7e819b62303a"}, "a9d93fc6-74d8-4016-a0b2-d700e3c63622": {"doc_hash": "80af7939bb6758fa0edebaacc7466297fb0d9fac07c220c296cbcfc26b6ae3e9", "ref_doc_id": "76c07f39-80da-44e1-87c1-5bcce15f84ad"}, "c6fc8783-0b4c-4997-a766-8320ddbda3d4": {"doc_hash": "c03e20cd4de759e5c0314a39e3ba6b9aa79e3c4fd11159b2e1ff1ba16651386f", "ref_doc_id": "c5fb0790-302c-408c-80ae-3f3d04956a1c"}, "f164c1a7-2d20-4259-9a5c-d89220a502b2": {"doc_hash": "1c2d00b7afa426546c46bd35665cc684dc05bbe0a594e34537b087aedc6eb22b", "ref_doc_id": "513b5028-e3d5-4f67-b543-9e47f96a1867"}, "c2a8e743-6304-449e-a23e-0be920ade4c4": {"doc_hash": "676c3b4e4164e2882cd30417a8c0fb9998ec8367af731068a0d6b65cd00d0b8a", "ref_doc_id": "9b1f4c6c-eda1-4d17-aa65-859eec503a54"}, "03378c35-f875-40d4-be33-a7d9de77b5ad": {"doc_hash": "381ba65589fe79975d3cd1c3b1c84c2f008e66e56c77cb9a7aa59aa493123677", "ref_doc_id": "cccc3194-95a8-4d40-8b46-212d6d25623c"}, "6eb9c33b-1d1c-4a60-8279-a1f43a40c733": {"doc_hash": "6bf750af83792c98a672418771356962060f36155ab9170e944ec4f46f368035", "ref_doc_id": "93f79f1e-b4d4-4b53-8d96-31ec1acb6f90"}, "9ef4516a-b40d-4fc5-9e77-7dd72545f194": {"doc_hash": "b25c342db3606e199d3edc69e8d35a5ca6be9f09bbdcd286fc943879be457540", "ref_doc_id": "7d26710a-4300-4e6a-bc13-93d847be4023"}, "48f7bee5-9a3f-4fe4-997d-6ca903ed1056": {"doc_hash": "1692601ea16f022c3df531f2d5945e82a3d6c125910a9a59ffa3e2ed85011f5c", "ref_doc_id": "920383ab-1808-481d-abb4-5f32152e7854"}, "f59b49ee-1594-4adc-a604-8feb1409ed78": {"doc_hash": "9c04ad8eccfdd6f76cfcae6960e4e7573b7733cf73f988676052919c8fa3f0a4", "ref_doc_id": "4bd5e4a5-f2e1-4749-946c-5cce718930c1"}, "6b0381e5-33d9-4e7b-b28f-4e97c1d1fefc": {"doc_hash": "b4e7101700d8f692968ad03f82f73dcd1fa77f1f58f2da02b261d617dfb640af", "ref_doc_id": "9cb34304-3618-45e5-8b2a-b2f5eeef0d25"}, "5c051288-cedf-41c3-9eee-9a2b6a52985b": {"doc_hash": "4ce74b4f6653ae7174455acfd646dddaa5a887c58fdaeaf665f60b5d9e5fb829", "ref_doc_id": "8b0a18ed-414c-4ab9-b428-6859f2da2281"}, "35922585-4c8e-4730-b94c-906e560ed9c4": {"doc_hash": "7fdc7992b34725e292d332978f5192013c023b305240cb4987c6a55d60ec8ea1", "ref_doc_id": "022e1d47-4fc1-4bce-8ef5-6166c85ba220"}, "60b49cdc-f1a3-471f-aa70-c38361cb9216": {"doc_hash": "4d047df40cc280c3d0dcee89b70be22511003d2c8278aeff96f499c551bcfd26", "ref_doc_id": "d68b242a-b075-4e1b-8d15-a9226d12c701"}, "1faf470a-e633-4712-ab48-7b63ed602744": {"doc_hash": "83311b1e52b8ea719726a51d3d249bfc2b5a0846e16229a7bde3798b7444ddb1", "ref_doc_id": "2ced535a-9ebe-4a5b-828b-b23ff54b46c8"}, "4f5beb71-30af-4890-9555-bd582beee8c1": {"doc_hash": "4af0ba89a7724c83cb35f4c7c0df9c3d6e4463d2cc2804ad907b9aafdce5adb8", "ref_doc_id": "bdd52db6-e7eb-45f3-be37-62e074ad3fd3"}, "e52b7b30-2492-4e74-a94a-9a509aa4bc43": {"doc_hash": "5bf39fb19ef3ca0eae79986ede7820cfe8d7377358c9e0e032990dcc102af830", "ref_doc_id": "3e533497-8316-4c4d-a004-74cdc51e41d2"}, "e1ea34e4-b604-443e-b9ee-105d81cf08fe": {"doc_hash": "a5cd3e6f5a31efdb5d932e4b51870e2ec8d021043798b5a9e21882a291458a89", "ref_doc_id": "b110cf64-198e-4f50-8593-6a7e4d1997b8"}, "7c5263d7-34e5-4e0e-9468-fcafb4947bf8": {"doc_hash": "6cba1dfe93859fec2638cc2adf31573636799656d439d8878d7d13df96de040c", "ref_doc_id": "bf337b4b-b75e-424e-a8bc-01878f9b16c9"}, "9331480f-9d73-4883-a521-d105d3df326b": {"doc_hash": "b44e81b35cd6d11fb4c735424bd073847e5d868a84e1ec92b65ba88cd8ea5503", "ref_doc_id": "c0e881fb-013c-4036-bcd5-4d700ac547a9"}, "c4582dd8-9f61-4e94-b1fc-cd44e36489b6": {"doc_hash": "fa2ac63e8927d7fcd4a0e7757314d1118a60143ee86510379e40fad9c56c5d18", "ref_doc_id": "db640c5a-8af1-462b-8b15-edea96b9f266"}, "010d5821-2029-466c-be89-9a107ef92bf4": {"doc_hash": "02106213cff755ce40ca30d473d5536aeb99beb57f02066727762c73c4c4c6bc", "ref_doc_id": "fc80591b-64d8-4036-a7ab-9e4058684158"}, "ddd5b546-976e-4bc3-bede-b78b662c819e": {"doc_hash": "8e969214ecd4761b9c636024a8ad2a41b02adc1f3ce14b70529f85aea6fac968", "ref_doc_id": "b1ae1876-157a-47a4-8efc-f90c7e17891c"}, "7f4ed12b-88d0-40b6-aa48-63f28a1647b2": {"doc_hash": "76c0f0edfd0db8483b832b311a753011969996ec9ed2c3bb34870fa2bb4d0a15", "ref_doc_id": "600f4a19-c25d-4702-a3ac-ddfe5eec293e"}, "ef6c9e02-31bb-4ec5-958d-129d7c2740fd": {"doc_hash": "735519cba3e07e2eaddac76933000670cdfcbae44cf91293929cddbfa8471129", "ref_doc_id": "800936e6-81d3-4667-acb5-b4c2484426ab"}, "9285de61-fcc1-4026-be54-fe146db8bbab": {"doc_hash": "9a76eaaec7681f8676449335c192368c2b7606ffaf750cf3c11cb912fdad75d9", "ref_doc_id": "cbb09a51-e2c8-4653-a587-f9094bce6319"}, "1c89744b-02e1-4f67-bad0-5f17d214ecde": {"doc_hash": "0bbcb23ce6c36d2af2670ae76b9202ee01c1751bc01cb2741d2376455c61752b", "ref_doc_id": "ec6db6ed-b4c3-4981-a896-ce26f0d35ee4"}, "e391ebdd-3d65-48a1-861c-65776bdff53f": {"doc_hash": "7c632ac15a3c816e4f46860c35dd673281eace47603aadc57e0bbb7596699508", "ref_doc_id": "c3338335-2ade-40f6-92b9-b5aa56433aa4"}, "06f05b4d-a4eb-4587-94ab-54854d624f50": {"doc_hash": "3684c002c273b641c4aaaf29d837e5a7009e4b28579818204a79cedfa792664e", "ref_doc_id": "b9ab4fb9-f341-47df-9d86-42a6f565a1ca"}, "2a8e3297-b022-496b-ba46-bd734b9a133a": {"doc_hash": "0d31a7193b9e236f14e5263bbc6d030a405e10e3244ff320d810459e63fb4251", "ref_doc_id": "0131f74a-7f00-454d-b249-edb01211b270"}, "816f5c2e-1389-41a9-8988-751c161ceb71": {"doc_hash": "24f357bf6b2b0026d668a5b8b9b8e804f6e08059951672d4144892d1283bfd8a", "ref_doc_id": "5f864fa1-42ae-4deb-b41d-0f810e1abb04"}, "4f213565-c113-43d0-9b21-64a42df79b0b": {"doc_hash": "fd4454aa74a3d61e37e47d91c23142ccd57b76ed05ea8db38de66d7e445d19d0", "ref_doc_id": "8410bc92-0872-44d1-a21f-e53a0a8084fd"}, "2591b56e-9a75-442e-b921-fd290e32e4ea": {"doc_hash": "e43a1dcd209a59d16b742493eea3f8578a714b1cb92ea113e09a079362ba8c6a", "ref_doc_id": "bbe8c3a1-9065-46a8-b0ac-7c70a9c57093"}, "7287b834-279f-479b-b3cc-ea6d0b686bb8": {"doc_hash": "36d23eb52b0d95be66e3114973e1f581b1b2564c6158d0e31f78823dc65c47a9", "ref_doc_id": "dfc35ed4-8b1f-4070-8587-aecf08e752b5"}, "f7bb44a9-b6e8-4def-96b1-13becac0d3cb": {"doc_hash": "7a5487fc45c6adcca7346b5834eec419f5a6df61989a3b1df5e2811cf2f6cd04", "ref_doc_id": "3f847a75-c249-4a09-836a-63c53edfb0b8"}, "6149579e-d50c-4156-8149-695d2f0da6cf": {"doc_hash": "b888215209b20f411f4563abfb0fb3138d74039f56e3767dce97632bd838fe89", "ref_doc_id": "3f54e163-e4bc-4955-9267-478dd82b4952"}, "de1536c8-5099-46b2-8b14-f2308cfd15be": {"doc_hash": "9493b311ecf7bbb2b364b59ff69c0a83dda7767f3f0007aa3c5544d5c58c6eec", "ref_doc_id": "c3f1d4fa-4236-4854-9c0e-ffb05e47ab88"}, "51bffc9e-a39f-49fd-8ce8-7b829707e35e": {"doc_hash": "048389334943d3b09edafda52df337a4c972ede183be9d24b6e8cba9cef31caa", "ref_doc_id": "4982be47-220e-4c3a-a4ab-7c228b5f64dc"}, "b9717575-b758-44fe-ba2f-a8350a188b9e": {"doc_hash": "2f34395793bb7f2902e6e00698126c28e012d55c9bf21b5a841305a433cef90d", "ref_doc_id": "fff8be58-a74a-489e-996e-aa329f897d9b"}, "5a0813ef-8116-4b6a-92c5-e27a7f092b24": {"doc_hash": "3b7075554b5179dca2c0575483c23f663e16a391709e276d9a3f8b55a11cabc9", "ref_doc_id": "2d192661-f6ff-4b76-9058-34bdf05761b2"}, "be46c27c-cdbd-449d-b281-76aa03e332ed": {"doc_hash": "891b565717f8ccc1e3cb843c184cd3147521d7f6b69dd0e28d5a75a05712c480", "ref_doc_id": "482359b2-b025-47b5-b353-c9026b88fbdc"}, "414bb0ea-65f3-4078-a25d-77c545a1ef4b": {"doc_hash": "c2871b4cf3d03122d1f078728baee98de4098e7e993a4e2f0bb765b8f7e7853f", "ref_doc_id": "ef8c5f66-058e-46d2-b1dc-661522aabf56"}, "2283d7b1-e61c-4653-9aea-2f271a563a3e": {"doc_hash": "25a2c0481c42e8ea5a3beb918799126aa3f6d29a3036382fc9a5a6099f8f12bc", "ref_doc_id": "33860fb8-8309-4a28-a3cc-768688d604a9"}, "be4bfbfb-280a-438b-b0f0-dbcda1b39d2f": {"doc_hash": "806d7d99e9d8a0370cd7068ec6c245d2b8b4dfb697caf6172af601df9003dcd3", "ref_doc_id": "aa412820-3185-45fa-bc25-37fdc5b92838"}, "0f9670d8-480f-41e8-9571-4e94679ed520": {"doc_hash": "2080f87ddc6b63d2838b716841e9616efaa1ccb49d35a99c17076d3508957a8a", "ref_doc_id": "4466ac1f-2dfd-4a21-81f6-15b1ebea3674"}, "718a3c32-2a7e-47e6-a508-fa1484235e99": {"doc_hash": "b71ef1c62c855fe9cfd08bd4ff521a0c03755ffa5be4407e82c0759810ff77e1", "ref_doc_id": "2b06bc1c-8968-455e-8ae4-a5281b360fef"}, "2f8adb88-dca2-4bce-bf31-1b522af6ecad": {"doc_hash": "78f3c9291fb01774d0ad93d60710af79f4386b48872fe4937a89e65c596196b8", "ref_doc_id": "32c16837-79d5-456b-82e8-8d5697fb646e"}, "e1bc8cf3-0634-4341-a451-290f561de2b0": {"doc_hash": "570dfbdbc2777030d4a617ef15af68a2870b2de2bb8c245a9cfa74a7b443bbde", "ref_doc_id": "1eb6c8a3-0fa7-479c-9a7d-17803e189977"}, "bc00240c-3736-44a5-ac79-2448a31f45cb": {"doc_hash": "335b143a9294c8b749304d9ea42665b3f4b7c0e78d6bfd1dc826857933e5c96b", "ref_doc_id": "96829249-2d44-45e8-a547-463ae291b704"}, "a792345e-1360-4d9d-994f-d31680d678af": {"doc_hash": "43db5368d86ebd894ae694eb69fecbce1703d9080918b285c96b1e49749fca00", "ref_doc_id": "29455fd2-d7f6-4378-973d-7d90cc31303b"}, "93481645-ba84-4f1b-a5e2-6bc297e5425f": {"doc_hash": "a09260112495cbabb2b87e1cf072a3d9e632f2a5c85308b0704c8cd195f1e86a", "ref_doc_id": "df9e2b78-62cb-4ce0-8b13-9596da33c07e"}, "114089bb-6b9f-4344-a089-4400a4cd7ccb": {"doc_hash": "c9ceaf14bee2c155b86c6f69d03a567e33e8df15a9304bb1dfa6506c3b1d3721", "ref_doc_id": "528532d3-941b-40bc-bb21-a87f3f89e843"}, "1d4fdd58-4142-46bd-9f84-1066501cd99b": {"doc_hash": "aeb315bb26749bc9d71f9224f86b59291e96523c0ce4994915bfe3dde4d123ef", "ref_doc_id": "09a1b9de-1548-42e9-b666-b33ddd784a5d"}, "05961b69-203e-43ae-8e2f-679935c170d7": {"doc_hash": "0c6f3a6c91ce46e23d6f65e8624e48f04084d238633e87817c7f12beb43a89ed", "ref_doc_id": "28ba7f3f-c1b9-4a46-baba-d39cebcb8e9e"}, "bcc7bc1a-f003-4764-82bf-0193d12fecc6": {"doc_hash": "f6d2ed2df07406af0ca5649866cef463635541730f971d7a430a478596f31e69", "ref_doc_id": "ec595bd8-ee7d-4cfd-b32e-da66fcabf45a"}, "09b7637d-6384-4b44-90eb-cfd61fc33db3": {"doc_hash": "0629fd839ac13ad585d4fa36d883e9562b877707ef713ae6e74f3ba49248617b", "ref_doc_id": "f4186876-cc32-4542-a1d1-5fe251e5eee0"}, "41f2f310-db19-495f-9b82-4c34a0f38a50": {"doc_hash": "14196a7186677ebb3960c23d939d9afc643ac7b09ff523ef2a2161a03ae43cf7", "ref_doc_id": "b8c4c7e4-b1d1-4e01-82b6-afabd45680af"}, "fc4924a3-c2dc-4282-86fc-0f022d36c530": {"doc_hash": "3148581536fc420da19ba5e470c0d58f001ae9d3825e2d1bd8346b8e19a8e54b", "ref_doc_id": "ee41cd0e-d485-41b6-88b8-0615adfbc078"}, "55a456b2-c22f-4ea6-9469-7b1a1a1cbb22": {"doc_hash": "002bdd1b65d76607e1590e2e8763a5b6b4756ce054229ea32eef1e6b5553a600", "ref_doc_id": "6ccbe62f-c607-44b7-9fd1-0e1bbfb69527"}, "69b4878b-f952-467d-be65-e3354b8f7005": {"doc_hash": "9059fae747a80e623d44a82018fa8f7e5da4fe329a8eb855153dd7db8dcd3be1", "ref_doc_id": "4b0c1853-a4ca-4a0d-b34f-24b3336d5e73"}, "f2e094a2-941b-4ce7-960c-af147c283bf4": {"doc_hash": "6c2460a78b830762423651d2297d1863783a68351cba46c9cff5a02eaed0a891", "ref_doc_id": "29248eed-6eac-4733-adf4-dfac56258a18"}, "c8207db6-402e-42bb-9614-786d57725b8a": {"doc_hash": "f156b9576e3acbc327f744a1a7dab7adce938c198e63745f30c509bcf9c01435", "ref_doc_id": "a422f517-606b-442b-9a0f-541e3d12d650"}, "8d2993c8-463c-4b17-bd0e-db3288deae95": {"doc_hash": "4c98ce6d29066ed3a62b028b94c346ed783735a9376bb758ecc26f7793e8b101", "ref_doc_id": "37ec8820-9f49-4b2f-8487-03c2ea7eb4d2"}, "fa80d6d2-c5fe-4ed7-b809-672d76811bee": {"doc_hash": "c26f4ac137c83b1d87093e8ff24ed032477b304c150bf338987773e746f03be4", "ref_doc_id": "de5f076b-4338-4a55-85f2-84c42797762e"}, "49cfd540-8563-4396-80c9-a17281ca76e8": {"doc_hash": "10921eea7d301b90bbad172eb90fb186678e14f935a231b767ff1de119ded070", "ref_doc_id": "92083c6d-a1c7-4423-8c07-e9d43603d486"}, "5a338ee1-95bb-4bd3-a181-2e5224836a46": {"doc_hash": "309b675f67b2757ec52c52e4c6efe7f6041ad2853ed923812d79d9c7d6551b84", "ref_doc_id": "fc4cb2bf-54b1-4cf1-a0a1-5ad4c93f6dbd"}, "564da7f2-d0e3-45c3-a5bf-c980db0da36e": {"doc_hash": "eef63f865b49ab46a596a032ab3415a13960cdecb8803f5a16fdb899e1d3ee6b", "ref_doc_id": "3ec1a921-4acc-4391-9d64-70e1678bb70d"}, "3cde85af-64f0-4757-af2d-6300ced79930": {"doc_hash": "41e8c9a1231451846ca0e8bc489edd9e6701e3538d80171605505670958b91ab", "ref_doc_id": "bc4fb7b7-df38-444c-b862-1b950c9fade4"}, "4a392f2e-9c74-4da2-bacb-b13ba29b91a3": {"doc_hash": "dc93d8431c089b6e0f5ceec8ea1962f4e415d46289349dc6f99613ecf4eb8d69", "ref_doc_id": "5d68115f-96ca-4936-b3c7-74b9f1d60096"}, "f444cb44-5c94-446d-9f71-a4e75787d942": {"doc_hash": "eecd275152f2b156edf86ab1739e098a84dea5546e6bb18fe5ca4e6c9ffac2e6", "ref_doc_id": "2b61c3d8-ee1c-4560-b21d-0fe469bd0f2f"}, "4da04bb1-75b9-40f7-8e6a-4a0046520155": {"doc_hash": "3f6bd570aa9934d74a1b1e6d01336b71c907e23a9524924fcfc1b0c817c72154", "ref_doc_id": "3bc5e304-82ab-4712-a8f3-4499d3b43643"}, "fd7890b4-97c9-4eac-9b3c-a1eced6d70ba": {"doc_hash": "3ccc81f917597347c547edb3850647e949b71cd9167897fcd51cb4849216ce73", "ref_doc_id": "635bf8a3-d21e-4c4d-aa36-45bf126018e3"}, "353b2628-d652-417b-a97c-a16857f6a94d": {"doc_hash": "29f1ecf6629cd9806571bfdb665b62665e5b84607e1a35189466b9350aebaf05", "ref_doc_id": "9b01fb8e-2518-4e7b-9132-dc625df874a5"}, "cb145650-1a07-41c2-8bb2-7d2c47ee6462": {"doc_hash": "058f914abe4388acd038c3f5a9a4885fddbb3760b6d8d83de162a9c4e5dddc4f", "ref_doc_id": "c0332bdf-7601-4b92-be55-738055f7f538"}, "9222a1bb-2ec9-4af2-980b-f1edbe0b4305": {"doc_hash": "8f2bf629d82c0a382d97669189354d851a59094374c055d4a8f6740dd1c95ec0", "ref_doc_id": "78e6f5cc-382a-47db-a820-6500eabe4388"}, "0febcfd4-721a-48ce-a60e-364c6779defd": {"doc_hash": "aff7e4ad89c5426251ef2e861311741f94cb0da05f78a60ae0b4d11a21f85510", "ref_doc_id": "d3152062-230b-4c6b-9eb7-76e65d1b0196"}, "fdf5ab63-3285-4fb9-9227-1830fe69fcf0": {"doc_hash": "7cf8a39a4a09c5c3aefa3bcdf4921fa220baa0cf05a447263539cf5c04a67158", "ref_doc_id": "464a62c6-0ae4-4a09-b08a-3d3400fe48e0"}, "d6957582-12fe-40b3-abbb-0f5c220c5948": {"doc_hash": "3edb71c4c72101f6eb977c29e47771a63393cfd8f0e5bcc0b42cb8d7a7658fe2", "ref_doc_id": "a80b27a0-7386-4bde-81db-8f9d5a8063f3"}, "0404ee00-fbcb-4be5-bd9c-813538cca4a4": {"doc_hash": "c07573d54b592d50388257b2308b698eed0c7d28f019dc56ad32fa90699fd3df", "ref_doc_id": "314468db-88d5-499c-9184-fa047bb50a9c"}, "b9083c4f-a8f4-4aa2-8be6-6a2a1e02a4e7": {"doc_hash": "6a090adb9d2a7970d6483c1d9041a037db71edc3bd87bb9cce8721326d5318b0", "ref_doc_id": "5c7b8178-1276-4f29-999e-e90cffaa4371"}, "e0e35d51-9376-47ec-8717-e9d25720e85f": {"doc_hash": "5915398d5930f8da1199bd3acf37a91349bfaf2ad5c27b01087f333a0c504aec", "ref_doc_id": "39ab9096-240c-4dfe-9f5b-e2cf1ea7a326"}, "6be95b81-fabe-44a8-87aa-ab3007dcf54a": {"doc_hash": "cf560a21b79eca38201d51fe0cf3fcea8c5ce5459d03872b9945de896d3c7c2c", "ref_doc_id": "de179760-36f1-467c-abae-dbe9e281b20a"}, "7e4add9f-7855-41ab-bc9c-c6cbfdca0c17": {"doc_hash": "d401157f39ed243b071245bedbf74dd25500aeeb3a9d20eefb55a0306a631ca1", "ref_doc_id": "24bcce7a-10d6-4636-8835-bf9902a2c2b2"}, "dfb155ee-b45f-40cf-abaa-e203368ccc20": {"doc_hash": "d0a8829ed44711fcf6edc0853ea82e0395550a0cdac017627a66ca8289a92865", "ref_doc_id": "d4e8f040-7f2c-48de-91ec-768a9a7fc92d"}, "e54c3bd8-5c04-4bd5-8f38-cb8d6c68d6fb": {"doc_hash": "569a37f48d2e9f20c46719eface66c73263f780a0d6041c1f2022d3b99bdea66", "ref_doc_id": "d9c50519-44ce-40b7-8d71-3e7696e23169"}, "2efd8fcf-d67b-460f-9f53-90cb76c3eb42": {"doc_hash": "87b9d4b49ac4ae701452801fd10b586f23157db9831b2ff5647e532162308cf4", "ref_doc_id": "6ddbad0f-78bd-4c37-b410-c1807a498ecf"}, "ca434ecd-3fa1-48d2-b582-358641e5e8ae": {"doc_hash": "7b2f6d4bd74a3835ce31aa6e0177d57656a95b8127caf3e5045ec19838e06a8f", "ref_doc_id": "d91affbe-7afe-454c-95e1-5e4c31102413"}, "884a25c5-6c84-437e-9b04-2652cd1b05e2": {"doc_hash": "aebd2232ad6e34350a00208f1c4721e5e0bad29cd9fe02305bf046d82485fd8a", "ref_doc_id": "7cda03cb-4d25-4f0a-ac76-29a6b4a1c650"}, "1e040288-8cb8-4d52-b56e-6a59ef3c03da": {"doc_hash": "fd4c6a3264e8fe19de0765378b76dac843496e26c949dbfba9251c12f6d0a250", "ref_doc_id": "bdde51ca-ec79-4b3d-a255-71aca643a708"}, "b2b88e06-ea6f-41fa-8449-90d382cfa1cc": {"doc_hash": "6f102f0ddcb7854aeb9a9f113c563b1ee18f5f1beaa39361eaa1573160c91103", "ref_doc_id": "ad23926d-9e15-48ae-97e2-dce20cef5193"}, "ab749fe2-a01f-46c4-8c2f-a35380b0b1a7": {"doc_hash": "5e2916d274a1a9b5b89ca99cbb352642f37ed10404d552acbabd7c8d602f7445", "ref_doc_id": "b77f9edf-7dba-47cc-bedf-97510554aaf6"}, "2622841f-d329-412a-af65-bee6443301c1": {"doc_hash": "166d22e746486bf33ae805a011f64fbce8d5dd0d064329c33d2b61cf5a3bc02a", "ref_doc_id": "fb8c1c6f-89b7-42ec-82cc-ad7def8915ca"}, "74906d56-fffa-40e7-bca6-681dc226a9ea": {"doc_hash": "33ca1153aa838d2039d77a3ff943fd93051d53a9aa5ca4622fe14797e4aef264", "ref_doc_id": "4d8cc184-cfb9-4b85-a112-6b0f4f75d520"}, "8f33848e-564f-4ebd-b9ec-79a34d79a58a": {"doc_hash": "af3119282e7ea80dc83e1f3b8b74f6456c58a07a49b96a27833accd92e18b912", "ref_doc_id": "6fd92e3d-4ef7-4c17-8086-29da7a14a205"}, "7fba70df-407b-4ab1-a522-e0da9950c6d5": {"doc_hash": "09e1164dfdd640b3335a95aaaf65dd34cccc88ba3b66fb253d96eab5dca4035f", "ref_doc_id": "28bc469f-1271-484b-a3b1-604e8d7728ef"}, "1f627210-df9b-44e1-a905-cbfa3b833b6c": {"doc_hash": "e14090b02ca249985fa82d6f89a1a0e3ec94314fe2177d49382437a4dced8a6b", "ref_doc_id": "e5232443-99cc-49d6-b355-aeafc9ac6d9b"}, "6fdd4c7d-cdf3-4462-8d7e-0f3fb923b5eb": {"doc_hash": "e3d833641e062abba78b2d5edc8b28b25a8c897f6a6f9b8e3c635bf0bd3eb612", "ref_doc_id": "76d1af34-31fa-4897-b1af-ade4d0310ff6"}, "f28091c4-aff5-4a48-8518-605883333786": {"doc_hash": "4723eaca7473a82cfb46d222d030e0dada82eb95ae46a14f2fd66f94c2e48f43", "ref_doc_id": "a02d4b5d-0a47-48e6-b326-34383214a156"}, "5b97a494-f3c2-45fd-8b5f-5ff218a4ec5a": {"doc_hash": "f7d94f369b5121cbc7e6906aef9f9370a8011bf025e265203edc239f5eacc90e", "ref_doc_id": "ccf43b44-db36-498f-ab8d-72e5b4f74f7b"}, "b63c6a83-de90-416a-aa53-b9c328617c3b": {"doc_hash": "30d9fba0e41cc488379069a192b046418dca379c939502cfe092ebe4d6b516de", "ref_doc_id": "c58962f2-6d6e-4015-b59e-d096954f8424"}, "ded2e9a6-ef95-43be-87e2-9227cb1bdb2a": {"doc_hash": "e4f82a0f6929bd9d8948e0cc8206a22761c2e3b41d5dcc35777f7309e2394f75", "ref_doc_id": "600f88ea-66a9-4424-aedd-943712ba9c5a"}, "6dcd0992-a9c9-413f-a15a-87df2ef6e9b1": {"doc_hash": "b59c4d77832b1e2c60195d15456c9aca7a052866e190262b234c2336b3e7c579", "ref_doc_id": "2a69d1ec-4b09-4d09-b4ca-16be643faf22"}, "44dfba42-53a3-4b83-ba1c-027c7bbe597b": {"doc_hash": "64f3dddf17b83f30d8fed0865fff18ae01bf335b5214a9c2f33536681ba6ab9f", "ref_doc_id": "2aea2173-26fa-4de2-b15f-8e977322dcaa"}, "c0e598d5-a09f-4da7-a720-a81427dbb9c1": {"doc_hash": "2a4e2f1b6d1eec2201739055d468494d26522508cd80852f753c9c8f436b1aad", "ref_doc_id": "f52a23c6-0f46-4878-97c5-21834789748b"}, "78f51487-51af-4daf-a9c2-6524c42eca04": {"doc_hash": "4936033da9d23bd6f2eb0f85787c5a4858c7f299d76f56c4cbbb060ef459ccdb", "ref_doc_id": "62411fdb-4bd5-4d1e-acfe-a2b7d86afb21"}, "a80bf28c-2e01-48f8-87c3-c69cbada69c8": {"doc_hash": "c83db5d41928cfaf1fd032dedfe6a977e84a854d7cd78be9f7c7981a38488120", "ref_doc_id": "22d932e2-0133-44a5-8c4f-edc46ac69cb3"}, "3ca1c72c-fe1c-457f-abfe-3f7ab1214f4e": {"doc_hash": "dbcda4a8ad6cbca3ce10d524e390e5bcc014f64fbc1c811e052feff3fb8827dd", "ref_doc_id": "54dd75a3-9ce8-4959-bb07-45d5c2363a0b"}, "c7d5f6b3-7062-4f0b-9bf4-df5452f7a8c5": {"doc_hash": "65c456c3993cd9e944155a53463c22e5bdd4714baa16f34320d3c15727b451b8", "ref_doc_id": "30361869-3185-4e0f-af29-c866d7ddcf22"}, "cf3be81e-82bf-490e-9b72-968d88334bc5": {"doc_hash": "62264e304c84acadf405941142734d9b5c4a8f84286a19b755e26c6914838e0f", "ref_doc_id": "3cda91a2-269e-47b6-ae87-b2ca335fdc3a"}, "a24f0ebc-23ad-41b7-80d4-211acefc3f7b": {"doc_hash": "d8aa8273916dc2a1451fa752a1034083e771be6923ca49096141b849fadca9fe", "ref_doc_id": "7b59ebee-ff08-4dae-ae61-86596c04f0b6"}, "8d5fe856-19ea-4265-a13b-54f9a04e0f56": {"doc_hash": "72731c3469d8827c053a4cbb5af1fe88b23161147baa301fc80ed04717d39ea4", "ref_doc_id": "8a2fa8bb-14e4-48e8-a733-349f8cb91e5c"}, "a8b3f668-087b-4fa3-b9b8-2bd1a6a10210": {"doc_hash": "794b4695aab148cc1a928751df0ff2089111439798e26f5a92e915b37e6b9b2a", "ref_doc_id": "399f65fa-63c4-4d44-a458-b47dd8fc666d"}, "17d030fb-4e7f-40e9-8dfc-f4e50a925048": {"doc_hash": "bd824f80239d6a8958da88d76623465d3f18cafe3f33a004189bd93f834b9b11", "ref_doc_id": "13508d43-153f-4c09-9f17-1ea07fe6190f"}, "1d9fc99d-fe46-4db5-b783-01eeb84d9cfc": {"doc_hash": "abcfa99c700d9862d7b6cc272f59c01e56b3affd8e42073b2c95e3b4924ed1a2", "ref_doc_id": "c36d01de-f694-4fc6-a364-8e3d15c5e1a2"}, "7e085521-ad64-4d51-907d-fa679fc682d5": {"doc_hash": "754810699ae13a926796c6e27fb0c2c58ca7f17dc29c9f0fd8240fc39bdcd1bc", "ref_doc_id": "1f35b895-e184-4819-8372-fcc26c248eef"}, "60c57da6-c438-442b-b963-ef15c8b5c190": {"doc_hash": "7515fadb90a261fcadbc7afccc0618972b118bfcc6ebd8c140c846519971568d", "ref_doc_id": "e36dda78-0a4d-4cff-8faa-3b1b7d99d176"}, "5b3e12cb-17e4-4e6f-a0aa-8f5c584365a2": {"doc_hash": "1f226948f253622aec761aff82263c5a46cc626a84553b806b837db9e2594cfc", "ref_doc_id": "0decf9c1-23bd-479b-ac7f-3e4909a8dbea"}, "d968534c-11e2-47e1-83f0-7223297ec686": {"doc_hash": "a1b291f2ac874cdd2c3fa9b8d0ad504d2ed6cfb68dd7fb1c8562efa82c010bad", "ref_doc_id": "f42f6e3a-b94d-4ec6-8849-442bd4150082"}, "44f32fc5-0f81-4726-a430-210215598d07": {"doc_hash": "b7e4be50883a7a8eb9ac4aca0512d89beec04e621916308822f7c4017c6870cb", "ref_doc_id": "5e24f85e-fd1c-40d7-8155-2bc8cf6dbe46"}, "d2436ae2-beb9-41b0-a224-6c85f830f846": {"doc_hash": "dcc5b7c1359bf139f8ad3fd4798bd9ed496e23a51d6959af0c00c888e98c4f65", "ref_doc_id": "5e24f85e-fd1c-40d7-8155-2bc8cf6dbe46"}, "1417c6d2-51cd-462d-9c9d-c18f11f3c337": {"doc_hash": "147bf195d17083c82d9c7ca100ac39c0eb88dbf3d3317f4175b56577a2526b6f", "ref_doc_id": "1dcc5f25-5cea-4c28-96b0-855bc0bf7ab1"}, "a2090b78-5c81-4310-a6b4-1f4826399b37": {"doc_hash": "ce48cadcbf499908b2918d69d15d30bb21205b4707708c7adbb3b37a8b756c9d", "ref_doc_id": "bf41b39c-cf3a-4fcf-8620-bd592e617f8a"}, "43915f52-f078-4567-bc8b-a50f65437baa": {"doc_hash": "f90d464ff3438659d82cbcd3d15701cf170d1d497624008b731d1a420a842dc9", "ref_doc_id": "bf41b39c-cf3a-4fcf-8620-bd592e617f8a"}, "afa3dec8-db24-44f4-b409-90a2187e9935": {"doc_hash": "7451d01f632dcbe78891fd734ffce91fa0b320f6e98a9c09a0d88705b6615da1", "ref_doc_id": "bf41b39c-cf3a-4fcf-8620-bd592e617f8a"}, "a8083994-6c5c-4849-bf4d-1fb447ad9f6e": {"doc_hash": "66100755a4ff596f1522d2bd0415a880d9dc5bc2160b07d397eb8746579c81bb", "ref_doc_id": "1b39d59a-701d-4ac2-b298-916d5a46cc9f"}, "9d685139-471d-4da7-8798-ead4c3a30acb": {"doc_hash": "103a1808e8326b13c3c4d89e6ec6d0cceeba7fff0ac66cde87fb7ca446dd86dd", "ref_doc_id": "074934b3-7540-45c4-a34c-0a74a6ea9678"}, "f129a839-06d6-4875-bf8d-e3de20e34869": {"doc_hash": "5e5688d5b38532e19ef95f88b76c5e8c4471c57a75bb59597c7906e07d584197", "ref_doc_id": "1e21dbe2-3613-4336-8bf9-cda84a9ee3d0"}, "0a6b3f70-b103-490d-babb-638d866192b5": {"doc_hash": "1e20650108d2036fc694ee87a826cbb521d5f5dbaafae07684a79e026b592e53", "ref_doc_id": "f7453658-ea72-4bf3-b1bc-c8c61368543b"}, "2f4bec7a-45fe-4e31-b6df-f5625f011431": {"doc_hash": "0bc2dd7a91b6e6f4874cdb0f5f922bd42981a65546d87c9f43c86c0ec5a7d93a", "ref_doc_id": "084fe246-0032-48a1-811f-c4f5f726acb2"}, "26eace89-25bc-4a6a-b774-febffad8cd82": {"doc_hash": "1a786560045814577b97d17f7d61bcee37eb406dea8d928bd2dff012ee1d8fff", "ref_doc_id": "bdc3ef0f-3d61-441a-ac95-10dcf14779dc"}, "01f25a36-0f7a-4846-bf78-7085ebd9c91e": {"doc_hash": "80f464f3781e31a362112edabfd3d3b656d49234139697fa1be690ffa73612b5", "ref_doc_id": "76593497-7a61-44f0-884d-1cd6d8011b60"}, "b0e1b43c-a272-4a42-888e-197a9eae281e": {"doc_hash": "7ed95ea320ec19d6caa5869d509a520d05001e9d0811b17eaccc30a1347c20cc", "ref_doc_id": "ca31a339-378b-46c5-86fa-f70aacb529f8"}, "a63ac02f-bc4b-432d-8622-c70b807cc27f": {"doc_hash": "f797ab3ea72f5352d13bf97809f6df9e3c69af4785edb4e173916e801ee5f174", "ref_doc_id": "ddae4f08-d1cd-468c-9d82-bdb3aa996bfa"}, "422a91b3-65f2-4ffc-83ea-0bae72e36d3b": {"doc_hash": "9143d552a233213c03efecf7f23b621aa895bdc67e6d8d37e9056c9b2aa9344d", "ref_doc_id": "d20a5861-9dfd-4512-8921-bf4ccff1cd0a"}, "391f0c52-05b7-49bd-a64e-d2aaf36629c5": {"doc_hash": "89298d0735a5e5983993157dabb8a14d805a6914aa9a651d71425544aa04a086", "ref_doc_id": "ea55f3f5-cc26-4a77-834a-0ecaf25e78c7"}, "9e7d5f2c-fd47-4624-b05c-ba04de157294": {"doc_hash": "4603637b889e12d972e20b2598fdb4d5199bec8929a1562e641f044f7b18cb55", "ref_doc_id": "32c15dcc-d719-48e3-8a47-1dc2fd7e3e3b"}, "360b4132-d33e-402a-8c1c-c8c98c0de717": {"doc_hash": "21b29605a52ac6a8daed76df1f257a671076b0f377775b38d7cb5cc9e34d0ee4", "ref_doc_id": "9c4c9204-08a8-4f68-9e7e-ed65c28ae00e"}, "2c325ac0-6c62-430c-aecd-f8da9c4c8dcf": {"doc_hash": "c06f82b79f858af8d87f08436f3a9046712f23959484c27f31a00a65562dc033", "ref_doc_id": "8294ba6e-b813-49ec-89c4-ca9bfef8eab3"}, "245ed105-20f0-4c61-9652-d066e52a07fd": {"doc_hash": "3e1291819743af7527665ffac29a5acc22e9ff23c760200a2c73e2a0672403f5", "ref_doc_id": "69e06097-7a69-4178-9fc6-a3e6b7619e0e"}, "a2dfc354-e042-4324-a5e3-ee757300456e": {"doc_hash": "6e6d415e551b4ca690a4abc7ba15ad1a99365f7123bfbf0bcdfda92db97af3ff", "ref_doc_id": "80be6656-f922-4e0c-be06-b181be357347"}, "268fd373-0e07-4f11-9f53-6ebe528daf17": {"doc_hash": "b86aaee2fbad47c3cade899ad431c2a4aff6fd74e0059e6ed7a58232bf34998c", "ref_doc_id": "91a4469f-c365-45e9-b93c-1fed5d0091c5"}, "bbcf3cc8-1f0b-4397-ba17-8aec7c9396b2": {"doc_hash": "f823a409d03181d35e7154d3e9e2ca55a133eeb2b78294cf1ab5aa699a9e22cf", "ref_doc_id": "85df7906-10a2-4c85-8d5c-c5bff903eb21"}, "519b7b2e-c08d-4fb0-8f0e-5149550e2da8": {"doc_hash": "b74622b2155280c85e783368554f682cd4a267ca5c30352e2df0059c0f6169e7", "ref_doc_id": "5b040e50-b341-4b9d-8464-740db2bce610"}, "25ddce80-0767-46f2-a083-1b1fe86243e9": {"doc_hash": "37befb957ad737c42f5390dac3cd132594550c1daaf490b7a0224eb0fd926715", "ref_doc_id": "5d19d1a3-ef65-4a04-9d53-ba3ad26d89d3"}, "4e44ba04-63bf-4ae2-9b2a-6df29d115ff4": {"doc_hash": "d0b08f91942957ed8363708acf6373146ff2c617ce897b364182d36b5b1512b5", "ref_doc_id": "228a903c-770a-48f6-8656-bb641b735031"}, "9e26b319-2c54-4887-8ad7-e0a14a6b1a5e": {"doc_hash": "7427cabe38e4592ef3239a0647538d75edd5acdab2f15223c028e310c86c8e5f", "ref_doc_id": "6f9e8176-7bbf-471f-a531-50558efcb973"}, "85344793-965e-49c9-b8f5-433917072eb2": {"doc_hash": "3b6bade4ed7b5e1d6967f502cd3d9f644f625fb7e3b242420ca8448a0578362a", "ref_doc_id": "84636044-f482-4299-95ef-cd11a3778d57"}, "c6c6a3e1-4624-4576-8538-6b125c23f1f8": {"doc_hash": "28c808eecbe6c6c94ec3d90b9fa8d1e7fba3f78350369d164a764e8cafbe0e84", "ref_doc_id": "9e0df448-0e49-4a58-9688-4a619a52682c"}, "7bf78801-4499-4fdc-be01-f109c93a9414": {"doc_hash": "e016c238a3ce3d08b1849474b83ba76f18d6c50d4b72f06fcef577e86d12e1cf", "ref_doc_id": "883d7a47-a5d8-4550-ad08-0fb7c636e1a9"}, "dcac5974-6946-4688-ad00-d7e0ab79382e": {"doc_hash": "254224637ca8206807025d89c3fbb190f48202a9b1c0150ba867542ba2372101", "ref_doc_id": "d571f5ab-a1d7-4ff7-b2a7-365256c56a62"}, "5a9fdd64-02b6-4b70-8409-e256dedff314": {"doc_hash": "9bb09f4d3b6fb8e9f1da55e32d45e173b1ce87bbcc3380fb607b52bb9bd42119", "ref_doc_id": "49ca5cae-a400-4bee-a971-8677047ef459"}, "5dbd453e-dfd6-44fe-8506-6bb51bd0796f": {"doc_hash": "40299fe57e1b42f7bba58f9a6f68870e1cbd2efe0d333724cf892637f7d99c7f", "ref_doc_id": "eefa2431-1f72-4987-8c4d-af5db0af3436"}, "be290f6d-369b-40c3-a4e4-ee83c3113859": {"doc_hash": "0cc3e7b56e2cf6e7469bc1505a832338b3dbc88ac61b99e58b40217e922497a8", "ref_doc_id": "32f6d3b0-dc03-4bb8-ae45-2b6b391bdb45"}, "99839779-bb5b-403d-bff6-45125ea2b67c": {"doc_hash": "728a23b92c3c3d2103f9cada49cfac2f0b8dc74e2273ab0c8ddcf5ffbf974501", "ref_doc_id": "4a28e09c-a123-47d1-a7ed-2156fb4a9e56"}, "0f0da1ce-9419-45a8-938e-bd51fab26b80": {"doc_hash": "356aebceb110a74196cef5a7937fe10900e91b4a3446a498e624a3ab6786a261", "ref_doc_id": "6d251701-c3eb-4641-bf13-37f61e22ad28"}, "9210c69b-eeeb-42f1-bca5-0db669ac3726": {"doc_hash": "a9f6437d7c2eb3dff7599b37922b9ec198934cc4ce6db8eec17dc1359d3698ad", "ref_doc_id": "7eb393ae-e10b-447e-9004-30f5733f2f54"}, "0175dfdc-91ab-42e1-84e3-7bfd1e44edc8": {"doc_hash": "56ef3cbb62dd8e46bd6a058c5d130c775db17c46a08bfaf75a6ec43cb3414a9d", "ref_doc_id": "8b5e710a-0004-4b41-be55-e4f1387f7a86"}, "ff20376e-a0ef-4687-abfe-6d85e4698498": {"doc_hash": "475b061b6a6d60d98d28e15002fe4287c16eca1f08364d13cd7fbf45f5b23311", "ref_doc_id": "1aed152d-a210-4124-931d-fd5f9c302e59"}, "e5673f51-e27e-40c4-b44f-d25aeb011c6d": {"doc_hash": "02c19ba45feab5c9e6c6427ba08b5df778cfe5f17bf88870d45b56f98a06d5a1", "ref_doc_id": "1fbaa9c6-55cb-41b7-b4a0-468d6b05634c"}, "1d18b58b-c308-43dc-b0ee-33d91da94252": {"doc_hash": "d57e5d6c249e558d2b689bf04d58dd8c8278ca33c15cd132a602cee3ace701a1", "ref_doc_id": "cdb55de7-f71b-4cac-a1c3-cb5f24d1c365"}, "da0f4bf5-fe4d-44be-9f67-6d09def7e7ed": {"doc_hash": "0bf55ac2621faad056e6318363a64386fc1af6e47ab69e200a0444ffba20ab39", "ref_doc_id": "d24619ce-8b30-42c8-9934-ca6c33dd2e6f"}, "7645ed15-a932-496c-a422-832a9c3fbb2b": {"doc_hash": "27db192311ce3a9cea4ed41ad37175b23715b238b7d12120ec1b12d99d98fec5", "ref_doc_id": "8a1ef665-146b-4d21-a039-10771e83bf41"}, "602e7225-8872-487c-abef-2a14fe5cc8e6": {"doc_hash": "ad1911e1d743118022109883c446c0aa1296b146633ace211ecfb2e8a212dd1f", "ref_doc_id": "19d4deb6-6683-484d-88d0-1131f2fbc216"}, "7773dd60-314d-4ef0-8ad2-69cbcc114322": {"doc_hash": "ed6d2ba0550c44d99d5da28889f970d6c43aadc90b38112a8957d67eec00c61e", "ref_doc_id": "fd442170-c614-449c-9060-75569e08767e"}, "518dfff3-bd7e-46bd-a370-fc6e3bdcecf4": {"doc_hash": "3dd1aa89a2533afd2399a019f2a308fe17adf5bd52ad37b1500617d025b0b998", "ref_doc_id": "7b26534b-7226-4301-94cd-131655f96310"}, "016e7c62-af41-4d80-8e11-1b01419606f6": {"doc_hash": "77e518738403003506ed748672de6a23f371e445b08743c620a9b87dee9f7233", "ref_doc_id": "184dfea6-674b-40d5-9bba-00aabfdbbe77"}, "56f71d68-588f-41df-b735-ebfd6802d53e": {"doc_hash": "79f731fab8fdf9a13edd1cdf914bf5144368e39936c0f15f9b119ebd11661f83", "ref_doc_id": "47859c0e-bcb7-44af-bc0c-5332d02e9042"}, "a546422e-2189-4c3d-8464-2ca5f03b2f48": {"doc_hash": "9bb36030225a5429d600ce3c3b6e6e1ecef586dc811c433dd949ee60ac7a8b21", "ref_doc_id": "78cacd3f-ceb6-469c-b180-2e454f47906b"}, "4f6bc843-904e-4f2d-b4b3-f13d560f521f": {"doc_hash": "c1b190f6a7b7d21af0cf1aceb99b2e424b1bc15768125500140c3b804e9e3f12", "ref_doc_id": "0d7952c2-b040-4b3a-9ac8-f41316999168"}, "d1e1d171-7925-4f8c-9aee-c15ee79d6ff3": {"doc_hash": "d9616215914c57f164e4e18729cf95eb034ef99242e4ab2a4ae073c92d3c1126", "ref_doc_id": "9e5b374a-7350-4bed-aa79-90347b432c94"}, "f599d3a1-3114-4264-af57-f565692703f9": {"doc_hash": "2c40dd6d01451ab2485343ee6d98647e244af2674f734f083faf4a3dd49ed027", "ref_doc_id": "8bb3f53c-c879-4934-9de7-3ef90cdeee6e"}, "fb20a7f9-807e-4151-b7c9-1a4aea17ed55": {"doc_hash": "1a6141204f825e437fc5006beacce38d583b7df5617e5ac8ca8840035f6e0e38", "ref_doc_id": "c540eb63-ff4c-48c2-a7ff-a0778c54486e"}, "ede988f0-374d-4009-83e7-317f174af24c": {"doc_hash": "311716728cb686d3686b0f57423209cd87d5d8790f8788c7c85b751684e6c64d", "ref_doc_id": "b2446e6f-d5e0-4c31-820a-5ae996921571"}, "6bba2efa-bcb0-4075-bad9-abd72fbeaa5b": {"doc_hash": "60a2d657ade91c2b615df43da2e74fda7211b38fbb4de7a1493c4957cece9a3d", "ref_doc_id": "ed13d6cd-2525-43ab-9d13-6c7561d84493"}, "7b8e9e95-f95c-488f-8434-ec57622d1901": {"doc_hash": "de61d22b0468901a34afcd05037033661cbc660edca6ed6e0a0fac26a83f740b", "ref_doc_id": "7d625ab5-5385-4d31-9c9e-2fadfe519fe1"}, "c33e3b59-4dac-4ed7-8726-df37db548638": {"doc_hash": "09c45928d3190ce86ddb291b886e5b10bb6153719ca3586f08c61758b42a2604", "ref_doc_id": "290ee3e6-9a6a-4b91-a3a2-ffb85d561896"}, "e91792ff-0c66-4873-bf49-1f4ee434c9c7": {"doc_hash": "a49ca02b58e780500f9077fd4a445c0beb6991a0da128b3489ee2911f2b7f56e", "ref_doc_id": "cd481830-eca5-4f27-88d4-e3b0f3a9c9fa"}, "44726e6a-1517-4935-b3ce-bb58e5d90994": {"doc_hash": "b6bbafd4f0c832388a18f30ba9962f48d07b129e8df85456e6d0f16d9563b1c6", "ref_doc_id": "7af792b9-ca80-478f-9409-b6f2ce6a11dd"}, "4f3a8ce5-17ec-4381-b00b-79aa6e97fdb2": {"doc_hash": "5482feac85b1fbb728f979a845798120a6e9c90173114be63f3f3f968cab4ac6", "ref_doc_id": "da1f0b1b-0c84-4d21-9465-9d3bebc182e7"}, "7bb760df-c7da-4bca-bde0-1673e76fb318": {"doc_hash": "7c24d8bfd04e950f89c525175581a5bf7616816dfb51a2cd4cae125d8dfc7b71", "ref_doc_id": "6d4e6100-04fe-40cd-ba8a-8aaecbeef9af"}, "60a267b7-169e-423f-9841-5e5ef726f076": {"doc_hash": "88f790de322f6cecf19e62139707a3b1066db2e8a5babd110640beba3e64bbc0", "ref_doc_id": "6d4e6100-04fe-40cd-ba8a-8aaecbeef9af"}, "8cccd77b-f1cd-46f5-92dd-9c5b6a574e5a": {"doc_hash": "bddafe34d0db3ee830504409f79b9c2c2c498a3bc7d7bbfb8d9ac36eb16ebd67", "ref_doc_id": "dd695a6c-7f70-40c4-8789-86dd3af727c0"}, "51e4b525-0884-439d-99c5-e4ab0c1010ed": {"doc_hash": "e6487d8dd6bf4dafdb2328f19becbeffacdad1c5b84752339becd5c27c5b8535", "ref_doc_id": "1c117f25-4ece-4b66-b14e-69408b02928a"}, "aab3f92a-cbb6-4247-b572-d385f629db8a": {"doc_hash": "11a20b9dc2305ba99f96e7392651b1115702552f2fc87026fea267b8e1234ce1", "ref_doc_id": "c48dc9dd-aac6-46f8-bc8e-26ec3f77ddbb"}, "f3e579ed-75ad-48e6-b0af-46fe5d30faa7": {"doc_hash": "4313b6c6c63c01e6989c912c7396aaa0fb273b5b5586a1af2604790c17c6eb7f", "ref_doc_id": "1909c798-ae88-443d-b7ee-d7f9ac2f820b"}, "f7e217cc-9cb1-4cfb-82e1-32b56f824da3": {"doc_hash": "6e4eb098ea89ebef9f1125848064bde19b85f602a53be89546c1ec5fe6c7e007", "ref_doc_id": "7e9ede49-f923-4460-8c28-c6be1a876c2f"}, "9a03c141-f5ca-415f-af18-5336403955ea": {"doc_hash": "ad8d9c446f33dc447aa06e9f56ade85d42d575d97e639039d456b2ff6372d2ed", "ref_doc_id": "64dd360a-d3f1-417d-87e9-422cd0da13da"}, "e4ee87e6-64a7-4cf7-82e7-fa6fe5374af7": {"doc_hash": "5296721454cce71819239f1d1ffdfa831cbc8014325c1ead3630fc9b580d3e32", "ref_doc_id": "ded880db-84d7-41d1-b57a-254e64eb03d8"}, "31b81a9a-4b8c-45cd-85a6-24b07d118c06": {"doc_hash": "b54df2b2e35987cb7266fff2652a3fb8c31239917b1601951847927928eeaad9", "ref_doc_id": "99091625-b68a-4829-8e62-4ca0d9d1b226"}, "b37c8ef2-6820-489b-8ac6-0226467171f0": {"doc_hash": "0fa9f4da43bbfabf8fa3cdab57502e1889576aae22836ce420c1da917650437a", "ref_doc_id": "6380944e-6722-4673-b2fe-19babf9c6bef"}, "7994f0b7-3796-4d9c-85af-80e49fdee035": {"doc_hash": "f74c238a5c07b0d3f7eac3d757bee335c767c8f985a399f81499c47e550b67b5", "ref_doc_id": "67ac6720-232e-448c-beec-9c6c86c19c74"}, "f29cfe10-df2f-49be-8877-3eaf58a42cbe": {"doc_hash": "4c5cf38c492ca6344add7e66b426868c356fb8d72cff3c08db74e46f0e96d786", "ref_doc_id": "3dbb50c9-b4c4-4ab5-827b-d5ac576c812a"}, "33543272-296a-46a3-aa3e-d3d0c078faef": {"doc_hash": "c2d143de2f4302bbc809898dadc8536a9c7656f662afae8cd31e25a0bd58d03b", "ref_doc_id": "a3dfdfc2-d0d3-4949-8754-dd78d3ee355d"}, "519c7cd7-deae-4128-94d2-a38187fb4bd0": {"doc_hash": "1680cecac19d2729b5a771eace8e3b1c2f11f017fbcd041e03c8625ea7e7ab86", "ref_doc_id": "a427153b-3821-49c7-bd47-55d004472d7f"}, "e7dc9d8c-0d30-4122-bb15-e36bdecdc5dc": {"doc_hash": "600037cfdfddfde06a27ff8e03ad02d92bd906baa90740191070e2c6f2a1d4ae", "ref_doc_id": "b3fc7d0c-a894-4362-b8d4-d798b845d5ce"}, "304c57af-7394-4d42-87e8-0a34929dd796": {"doc_hash": "8bf849a7341fbe7710d2ba0af84a1dd85e0dc1fb3bfacd89d2707f46317a5d5c", "ref_doc_id": "17a02afb-21c1-410c-8c21-b9bb4f6f44dd"}, "c76ee1dc-8fda-4d5a-bb46-2f05d9be2048": {"doc_hash": "72173bc17c5c01f5923f94f7fb4af796e9665ce52ee600244497d811759b6721", "ref_doc_id": "566eaffa-4346-41e5-9fa5-d02ae478e049"}, "d6e5f82c-8afa-4410-bfd2-c0f5f54ac549": {"doc_hash": "5a0d76d95d3a5f09c106926d9cdda07d39ee1611a6f234170c27fd033d63ffcb", "ref_doc_id": "bbc64c2d-8646-4e41-b7cd-ffffd0e65616"}, "111743cd-b1d4-4091-9517-73ba62a41d63": {"doc_hash": "73501f0c065fd9bba9627704eeba354d09354f611a61016d02c48bd2a70ee173", "ref_doc_id": "23028639-7754-485d-ae96-debf811fe9d8"}, "f1c5e974-978d-415d-8dbc-64838198ed34": {"doc_hash": "c04c9ab866f00790d2504e5d64cc6f9ff810952cbf4c941387d5dc73fb322ee6", "ref_doc_id": "27e5896f-c2c8-41dd-baeb-bc35b78a4964"}, "0b005e26-6aee-4568-89e7-c339c363cae6": {"doc_hash": "59ae4edd874930e7232b964012c788bf7976b11dd7a533768aca0961244eaa12", "ref_doc_id": "4865069c-a78a-4b62-8870-8e6950d965ce"}, "de83e0e3-fcba-4096-ab72-e93d0c817865": {"doc_hash": "0e354401e1f0465adf06ec7f43bf6e22db91ae3106f5207cc24dddcac0ceaa6b", "ref_doc_id": "1bb596d0-e9c2-470b-8e59-4f1a8abf4b7e"}, "d363c1d5-7f07-4d65-abec-a896bd539aa2": {"doc_hash": "a62da9a507951b7b318bae8220628e9e61d9e542571864dab265a304607df856", "ref_doc_id": "43da827b-cc90-45b9-af46-de5dfaba1fbb"}, "db2c2a45-9d2e-4e9e-b701-1338a7ea60f8": {"doc_hash": "fa64f07e244750629cd0f6accbe303540331bf43829fdf4c84aee7a71b858283", "ref_doc_id": "6816907c-bd57-4261-9a32-5b3f2fcf6dd6"}, "35fe173d-f240-4c7c-9673-0bf2089c6d81": {"doc_hash": "2699afbbe09124abcf27326d75ede4b0bf550b2db85754b7e7ce1a0aac0703fd", "ref_doc_id": "c80da1fa-6222-4dee-aeac-23bf74194d9b"}, "baeebca7-ae49-4533-9622-2733a195ecfb": {"doc_hash": "96347e32bed84fcd49fe2c6dbb640acbe42cc7bd1870f392b2caa30cb16eccd0", "ref_doc_id": "314263eb-7a32-4cfb-abd9-cf508d7d28c3"}, "6ca82379-ca90-47c1-9766-36177a54fd77": {"doc_hash": "8877888fb177024d3727b307e240d0dfa59f87eb93f523a953c825aaf552ea19", "ref_doc_id": "66451282-083c-4663-b240-deaa2e5d1896"}, "1b3d93a5-ec3a-4704-b6d8-815ae663faa4": {"doc_hash": "430190095b3ac6a58a940a33effd59b61075694914cf9338910f4608d92d701a", "ref_doc_id": "58625cbf-d2c4-48a0-ad02-83b06153c409"}, "0c92341d-569f-43b2-8e0d-33edc428d2ec": {"doc_hash": "7d823530c4fc57a9effc7c6a197b2e3b6fced9da7f7b5d4fab2b9fbc901ec5f3", "ref_doc_id": "4e86bd02-dd1c-4c11-95ad-ca947b49b30f"}, "93017111-f625-47f6-955a-5ac529d10860": {"doc_hash": "b80a477199afcc7a23575cfbe7e3cedb3e6b1569fabfb3d5863a1dccfe04afee", "ref_doc_id": "321e2a20-7675-40d8-b51e-d532a1092821"}, "2c667993-f991-4008-815f-1832f35a9107": {"doc_hash": "5d462df51bec471a5f9018d4051f3b82a92efdacdcbdf484597914d83f9e613a", "ref_doc_id": "d3c1d79b-b236-415f-a790-25da8640ea5b"}, "ccab170e-dc33-4349-870f-9ae2703f41b5": {"doc_hash": "57a0e4f6629cd3977e1ee596e22fcbfdbfbca12acaf923d9a599fcd9cda9fd21", "ref_doc_id": "fa978c6b-6d35-46aa-9b87-9cb5c6dbd969"}, "c3b1199d-927c-4f48-8966-1126babe6a98": {"doc_hash": "f92ffd9cfce30a5318ae0bcdefd7009b8ccd6f6adcce10c827bc9c8686bcc69f", "ref_doc_id": "7dc66e51-14fc-48c4-be39-3fdc0d12e950"}, "3e3c2318-b9fe-4dab-b96d-5f707dcf0bda": {"doc_hash": "fab23a2055a93e24c6825912cab3a5a2655817da25302a2ad6ba661e64ca9afe", "ref_doc_id": "744922ec-9e6a-45e4-aa82-83b5b133d924"}, "218ee187-cb06-471a-ada8-e532b4ebef8e": {"doc_hash": "2e465e31c869499df8eadc2938afabd4660b4d546bd4416dd1133d986ddbcff1", "ref_doc_id": "094c1eef-bf04-4550-9310-5ef4757bcdd1"}, "39599c6f-2c15-4455-be3b-ccb52538ea43": {"doc_hash": "16110f0c73832c107f2b90256002c4ddd15939655de36a85d14538a9c68ae6e8", "ref_doc_id": "06a1345e-48c0-40b0-b35e-2cbb389e81e2"}, "bb50b8e5-49bc-4d58-942b-db080250e72f": {"doc_hash": "3be6b8c0960b3f95fbef84134b18451584a9e8f0e0a9e227f99cffb8480711ff", "ref_doc_id": "ff6d4719-6e4d-472f-8866-0bc917f7d988"}, "288ce556-e2cf-453a-9bec-26a527c5b5eb": {"doc_hash": "1f6c4dcb70d17e74df09d0592128b3a747771a3fc1f6048d3399dac4ff9cc357", "ref_doc_id": "64509b96-6c87-435b-a5e2-d5838b1dd525"}, "53e5cf56-3161-4a85-96bc-770fcc6e25d8": {"doc_hash": "e4d58e61f64b3c21a2dd07c587408c6d2f3ac9126856ce0dd86553d7acfc218f", "ref_doc_id": "f11da7a0-2c05-470a-b402-a9aab16a8b6b"}, "3c4937bf-edbb-48cd-b183-fbcb2d83201e": {"doc_hash": "d305faeb921743cd9ec8a405109f19f14d8250825797541db0033d8911cdf1e6", "ref_doc_id": "8f2a2635-20d9-46a2-91d5-844b7c62519a"}, "a3e815fb-0793-407f-84e7-e8e1b7ce2f51": {"doc_hash": "a814386d72fc09c05a9836f356dcc7a69112795e71557fdd677c5373fcb9e8dc", "ref_doc_id": "f73a9593-5224-44ed-bd00-5c2dcd420b0b"}, "dcdbd115-1657-453c-b646-12d7c74e7bb2": {"doc_hash": "5fafd6abf2ba801b4e2d728d490dc1adac4b70edfb987b6a3ca1da3308454e2f", "ref_doc_id": "4ba368c7-fd83-44d2-a9e3-fce946819c6a"}, "e73b7bbb-36b5-41cf-b451-661eccad3ae7": {"doc_hash": "cb094285d5b355485e80fc87228080348e1c4ac2a359bc5c14b2259e2a7a1159", "ref_doc_id": "2bd41d16-0667-4ba8-b730-ca9a65222220"}, "914911ea-104b-4eb4-9997-5e5e62ce90f6": {"doc_hash": "02d9500c4ab8e86ee7b15bb27d61bb288bd6edef3755f59e26a4fc6494213592", "ref_doc_id": "71451cab-5fcc-47d8-ad30-58e27cbd6e00"}, "c31931bf-daea-48d0-9868-c1bb9b6fbee3": {"doc_hash": "c523be213e4ca857bf388065fd506ed5a151753866dd6b641be5151d73e9ef86", "ref_doc_id": "9344601a-4276-448f-9de7-89f987b786e6"}, "60c1970b-1eaa-40ce-8568-3e170a29369b": {"doc_hash": "b593ac825f380cfe42c420230c61ece90990aa144d5dfa012774584634c7eaff", "ref_doc_id": "9344601a-4276-448f-9de7-89f987b786e6"}, "ea456ade-cbbe-4d71-9c5e-46982c71f49a": {"doc_hash": "44f236a58366b1a0032f03f2772ff5e1c88cfd44f7b6c8cf3c63ea84f094ed09", "ref_doc_id": "f0018629-aa45-4b70-b59f-42884725aa01"}, "10512caf-9615-464b-88aa-65d016542c30": {"doc_hash": "92fe0c602b676f9771d4daf11275bfb6b97a1c74f38b0a9f0597b7a27545a4d5", "ref_doc_id": "68376670-ad8b-4fa3-8dce-33fa372c44a0"}, "a120454d-a516-48ec-92de-437fe2049b25": {"doc_hash": "5b73714a3223c8970c88616c8f5809f72b68555fd826313c94e73c6f807754ce", "ref_doc_id": "117a4e26-abba-4415-a119-6c5488c2db0b"}, "5073e8b3-520a-432b-a7ea-31f2010d2acf": {"doc_hash": "0de41d2fd26617fb1ec84f40a472a712bd71282fdb60574761a8013eeac2de4f", "ref_doc_id": "117a4e26-abba-4415-a119-6c5488c2db0b"}, "065d6e37-0389-46f8-bdd7-8e90f2b8be43": {"doc_hash": "d23ceaa4f0e9766182730b1459576619861f4dd0f643325764e50fd9acc4517e", "ref_doc_id": "d587a149-8d1f-4335-9e0a-282bcb59014b"}, "92bc3cb8-846c-4303-9b0d-da1a9114d0f1": {"doc_hash": "4d22b2a71ba7b50fcb011ed848de598791dbef3b6f29136130c0a71583db21e1", "ref_doc_id": "d587a149-8d1f-4335-9e0a-282bcb59014b"}, "8cc11796-f540-4a50-ad60-a87b43d513a5": {"doc_hash": "4efd297424fcf5f8a521532914dfbe28bac46170ec5a68c221cceb15fc69eace", "ref_doc_id": "68153e60-bf78-48fc-8d9d-dca458e6ee9b"}, "aa04f68b-ea79-4091-9126-7c9a0ad10546": {"doc_hash": "651a7db0bf3be243ab660972d009e7ccb812a9fd420b329d226aabf58d7113ed", "ref_doc_id": "d19d3da6-099d-4fc5-8334-f24219dad542"}, "f7e17ee5-d1d3-41b7-9a8a-2ebf4549fd7d": {"doc_hash": "ba666fe6dd0f6b67ff1b7dc952169f1ff7430de8f324cfe03e9d06ee6c03fff6", "ref_doc_id": "41f05fd5-b18a-4cc3-b09b-89b4288b237b"}, "208ebd50-d6e9-4a4b-b378-93f032771f87": {"doc_hash": "6d94a4bbbca7ae929585a8ce9148f1cd3d540f19fd6d069481db060a7d4ef7eb", "ref_doc_id": "004273ed-9969-4452-a051-f661a501f7b3"}, "15fbc4ce-7cf4-4ce7-a0f0-81914d613de2": {"doc_hash": "4e9eb4f5bb46248f49aceba08bfac8d1e47bf061f2c1e2a85662a15e0bce1d00", "ref_doc_id": "1f17ec0a-ed05-409d-bb2b-d1d26bfbe7c6"}, "fd9b2669-8ed4-42dc-a1d5-da40b096d354": {"doc_hash": "1772897a032962333cb655441597af5030f24a9f626431b06da27de4a65e8726", "ref_doc_id": "136747d6-2d9b-4e02-adf6-4649bc9bd02c"}, "36dcaa6f-2e5c-42f1-842b-b469dfec64bc": {"doc_hash": "5020593a57e4e9cfd9d7cb8fa4595a11a0cfc1a6ca5330ff46fade3ce9d340b1", "ref_doc_id": "4008a406-b6e5-4c82-ac2f-5cb975bdcb59"}, "baa61102-3de7-4260-97b7-04960231ce5c": {"doc_hash": "68237a88ed2678dfd05aeeac1fe65078857b5b7d7f81c7282128fb1c639cdda0", "ref_doc_id": "ddd25c5c-ee33-4a1a-9b77-aa37e84b6ad7"}, "570dd69c-c269-4264-a6fa-2e8f1f4971f9": {"doc_hash": "88f4cdb8a290ad4d26012c6c3c3bac11a3c10c42162d259cbe8061396b222dc9", "ref_doc_id": "b12fb077-4187-467e-9e81-4c860f7a50dd"}, "395114b4-a9b4-477b-9dc0-f293a6034feb": {"doc_hash": "fd8cc46922c978cc726de99517d7a511920c9b0ee28a2b26e5b2f9f959e13d04", "ref_doc_id": "78a7021a-ab06-46d8-80aa-42aa6533a511"}, "e684f512-1a03-4d79-8939-3815c4300b54": {"doc_hash": "97a5e0bf0ed82340a80d6401aa21086c36cbc6f09748cbc670a67800f564a83c", "ref_doc_id": "5a620005-b083-4b74-9166-c192eea712ef"}, "ebd36a78-967c-4bc3-b645-5be64d08039b": {"doc_hash": "1d425bdc1459dfa148839b9953f7067c520a606175286b884a7484456846926f", "ref_doc_id": "729d1764-401c-4bf9-9fca-9d2ac4cdc48c"}, "0aa21cd3-65df-4465-9e79-cc15f2f4104d": {"doc_hash": "a31f6cd84974de12b2133ae5e9fe8b96efa81362ab05cc7bade17d934ea4b512", "ref_doc_id": "319976d3-0944-4e42-83aa-660e4b53e28c"}, "e97b5c3c-6120-4950-9e92-a3a627ade833": {"doc_hash": "573872fe5d1c2a12c46eb17c6f08bc7e492d539f738423f480e5e3f6dfd89567", "ref_doc_id": "c1332201-3272-4c9b-afb9-0d679e36d22a"}, "0c9e2255-8137-4c62-9640-eedca97a76a3": {"doc_hash": "a45f806b3f3e096153a20f5c0b3ca935c685980ddcfeea738cb28a8ead56cc44", "ref_doc_id": "8e4419b6-5584-40ee-aa34-f33a7580ce93"}, "61e3f52b-c6a9-40a0-a9f4-210e69afb9a6": {"doc_hash": "c50170c2b6cd15de3026d6afa795d230594e2160c9a4d397a970cf27f704b0ab", "ref_doc_id": "425d2acb-225b-4363-a9cd-80aa741a12ce"}, "370d24b3-da77-4a51-8d0d-2d8c8fa329d3": {"doc_hash": "618344365ac2772858df17542da62f70e2bdff707419957ab5bd92e527c6f78c", "ref_doc_id": "74c93c81-9bdc-4d76-abc7-422a2a3b2da6"}, "f20bc99b-7cda-42b5-b3a7-89eddf792090": {"doc_hash": "80c40f46c290830d7baf54aeb506f59eff7ff71c2e38e491397ec65cb9c277bc", "ref_doc_id": "74c93c81-9bdc-4d76-abc7-422a2a3b2da6"}, "761ee269-03a4-4be8-8187-ba632fb6124d": {"doc_hash": "d49935d7e12e0a831e90b8517550380f72b1a088525a8f6e9276d1313053e6f6", "ref_doc_id": "1affa2f0-8940-4201-bcf2-8d5e83dfb859"}, "694368ff-1b11-47ac-8bef-470b9cfd73c0": {"doc_hash": "d412a697feb8e1a83c3953d1b6c495eda40b458d7c26a8013b8d651f525b5177", "ref_doc_id": "aaaa2579-0099-411d-afac-6f80bf3a9c73"}, "4c0c472f-9c78-4113-bac6-a2c142f37b81": {"doc_hash": "6941d3010d739b1aa28f41d9d7c1fb447697cb6ddc426b9d1c271c6c8e69f138", "ref_doc_id": "c98e50d0-1999-484f-9d5a-054aeb3a3284"}, "849d5761-7653-4ddd-bdbb-899409fec252": {"doc_hash": "5cbf661e0bb7f8ad5bf9a4c97026b8c20b89774acd34522f38b9427162801ab8", "ref_doc_id": "a6668007-c8d2-4949-ac10-9cfe48732f2c"}, "72b799e4-b3c9-4fc8-a0ad-e9f3eb702740": {"doc_hash": "3ec7afdc45b9c5fb851246be15437a35247428c5f4d28c63b9c64f678524a48b", "ref_doc_id": "53ee57af-c5d0-4f0e-bfc8-4cfbae125f7a"}, "bb9d5e63-18a1-4b67-b2c6-fb65193a4a49": {"doc_hash": "a6b8d2784cebd9799cfb78b08ed30e5b70d4378bb432302e4d23372b6902bcc6", "ref_doc_id": "357833bc-6454-415a-b9df-3b7fa9b835a2"}, "e8ae2bc6-35a4-4589-9059-1c261a20b6d5": {"doc_hash": "c937491cf6e4dcbfe79dd262326e4fcabd99acfb5c03a96a92e3287ad0d80116", "ref_doc_id": "c9f46c1f-5e38-469a-a891-4fbb8822c628"}, "ea591c76-3c27-4ce0-b903-435e6d63f52b": {"doc_hash": "3987568383d724df15eea7a9be0a9889468b2a7f5a243bf54857b8fb32ad6853", "ref_doc_id": "66002699-0984-471a-9c11-ad465ad51ff5"}, "4a410add-ad39-4796-8609-5d1027f848a7": {"doc_hash": "5b0c84360643c199170c53a485c265378cd461ee0e79a597a43a12f45acc4b30", "ref_doc_id": "90dd0750-bcbb-4d1c-8eda-2b69f485cdbe"}, "722baf16-76c0-417e-a479-87c092a62277": {"doc_hash": "c526d0567c47e1a6e1e84a2df8872e1ba0a88b2cf220ff05269ae6b0179355f8", "ref_doc_id": "90dd0750-bcbb-4d1c-8eda-2b69f485cdbe"}, "a38a784f-d8b5-47de-aca3-ed072ee21363": {"doc_hash": "1dab8226a855519e31af4de9b737d0ff4854c88484872289a28daf305a517aba", "ref_doc_id": "90dd0750-bcbb-4d1c-8eda-2b69f485cdbe"}, "bce3aa62-2a98-44c7-bbd6-b59de023adf7": {"doc_hash": "5ef2144209229fbbeecea42f703afe4542647853f1d6e02a90274ab42ee3b488", "ref_doc_id": "2fff4c5c-850a-413c-8ad6-6f91a1f4a06a"}, "919b7805-0149-41c2-9bc7-651f737f43d5": {"doc_hash": "11a48de31377d45602967dc53809ea4aad3e4a8dec7a2067af45b237bad52dc0", "ref_doc_id": "ab487f54-30dd-49f6-8986-01c600cf96bc"}, "6f692f7b-5fbf-427c-9db1-5e5aeda5ddc4": {"doc_hash": "ed4c76294d7f945319e7241d8cc653d4d0245d1987f7918f031f8664844e1213", "ref_doc_id": "1daa8e6b-c55c-49d9-a49c-916798ab0615"}, "cf18ed15-3a42-4d1a-b41e-2591f02b0c93": {"doc_hash": "d7c6857ceb1be43d8a8da4dbda78f75a102d1e66f237e79de05919aa29ff1e01", "ref_doc_id": "1daa8e6b-c55c-49d9-a49c-916798ab0615"}, "fba905f2-06a2-4e34-b877-84dfe8a8b7f1": {"doc_hash": "957d56c7b49a0607fd91cb94ff890ed2204746eeeba86b50a7605fb51eb7335f", "ref_doc_id": "1daa8e6b-c55c-49d9-a49c-916798ab0615"}, "f86d3d75-ede4-4c6e-8e31-fdb5b4ae26c2": {"doc_hash": "749e7c0726fe5798039a2284fae87d1d60484b7a6a155f14e857a9686e29b8e6", "ref_doc_id": "eae58f4c-084d-4afa-8ecf-d782735d7bdc"}, "9812fe1e-a51f-42d0-8ad8-05e4bd3dbd5d": {"doc_hash": "10b4366fd1758f709345a118c42a55241d59957b9936ae90672110d830df1138", "ref_doc_id": "94e2c4a8-3db2-4a09-b873-9592bc957c8b"}, "6f5f6b61-f7ff-44b4-b0fb-93ed40a5b812": {"doc_hash": "9a665f2a7c6b17470ab81191114e6db65edaf2aefe8d3ee432515fc7fc5eca56", "ref_doc_id": "ca800075-ff3a-4c2f-81f2-a988eb59be6c"}, "3c8cc045-900f-4cef-a40f-f35337ab6192": {"doc_hash": "aa69ca7e3575d1393f46a33a1ba0db2c3912e629882cce5fae40742e8ac652b1", "ref_doc_id": "14cc388f-8fcf-45e3-95c1-fc3bb8364424"}, "6458d844-4b2e-46dd-a543-416f1130703f": {"doc_hash": "36326cd39b1cf15dd1f56a7ddaae6369856f3aadf0b38e4c412186928a1970f4", "ref_doc_id": "1ac635cf-91f6-4da8-aea2-5e651de9e824"}, "140d1dbc-c0a5-49f4-a864-c5a9cd35d5c1": {"doc_hash": "146a1478e24e9d5e33197923927d903739ca1180d5d41ca045472d465ab296ff", "ref_doc_id": "ae5c7ef0-578e-47c8-b72b-d15ccd90c34b"}, "e882f680-0624-4b2c-b88c-7be92c72572e": {"doc_hash": "62544e279dc25f2992e461ff02d13f59ff4541cc06aada8745d0edcbdc398990", "ref_doc_id": "685fa6da-14e4-408c-a555-ef0ad539dd1c"}, "47bd05b1-6683-4959-af0e-6cdd9cd99a1e": {"doc_hash": "0fd9b61a69ac504d541460d67f5225f61750adaf29b369792d7e0a4644e0baee", "ref_doc_id": "4163b22f-91bd-42d1-879e-18bf056ab8a7"}, "9c1de593-9875-46ae-aacb-6e4eb41488b7": {"doc_hash": "9167a18895dde77eab20c79f2c2cc3ecf93eafbaea0c9a2062d1bf23b91cad08", "ref_doc_id": "7c8775ff-46b8-4888-9436-fabaabf740e1"}, "02b65357-586a-46bf-8c8c-6c0b20c86128": {"doc_hash": "43160be2267cc5a929e47007a88e89d6abb865ae3a25377ba7471cebeee871e7", "ref_doc_id": "087f0b1a-a6b5-409b-b30f-ee2af80687ab"}, "e865aede-17d3-4657-af05-09f27a3ad50c": {"doc_hash": "5d59a6bbeaf445d43b795ddbc9474af66f9ec5ec69f6225c1c6156a4a169ea60", "ref_doc_id": "1862086e-6f60-42e1-94e4-430d7d42dd71"}, "f92d9c7e-3c10-489a-ad61-fa78d5aa925a": {"doc_hash": "946d481647c896f0fd6ffb6f8e9cfb189fa33808d29728847f95766fa33839ec", "ref_doc_id": "98014916-1d82-43df-b8df-3c9fe3ea96ff"}, "424537c2-990a-48d1-945d-467151de05e6": {"doc_hash": "1cb08fb22915fb2ac1f23725d3ef3f173a665659bae8545c4f86747d160694c2", "ref_doc_id": "98014916-1d82-43df-b8df-3c9fe3ea96ff"}, "9c851ee5-256e-4ae5-b728-11b8dfd7634f": {"doc_hash": "cd575b34c0ca40909571eea291a6061a32f95bc377755886ef732008e141f2c8", "ref_doc_id": "7da4226b-d4a5-413a-9c00-29f4dfcc3c94"}, "2d6fcb7a-43f7-471e-b89f-c746cc7c914d": {"doc_hash": "0560f290c2d0acb0c6bf5fc08934193b79b5ddac031a950acc082640d1c99a07", "ref_doc_id": "2c88e603-4b57-4071-afcf-3bc559d981b7"}, "8efb4ba1-534a-48a2-9526-6e1bd5ec3c47": {"doc_hash": "1bed77b41d59568296de601e930ad56c04c06ee87fd337cf6fe8f9e46725c766", "ref_doc_id": "906a6d5c-31d4-40d6-8d2e-6b376231a80a"}, "3e0f5c7d-1499-49d2-a125-c905a32cd639": {"doc_hash": "18db941450c1b4a9f6b70ba58134cda87930108c5a70d4d3791b95c297364bb3", "ref_doc_id": "906a6d5c-31d4-40d6-8d2e-6b376231a80a"}, "2a6a4d0a-198b-42dc-8e66-b57e17280b7f": {"doc_hash": "391ed99682fd3d8e6684cc1e5f43ad1a111904fdb96ee393635f58cd8d0099ed", "ref_doc_id": "906a6d5c-31d4-40d6-8d2e-6b376231a80a"}, "d5b681a6-3923-4d2f-81e4-171f8932bd4f": {"doc_hash": "b60122114843cca1481f4ce1271abf4a9be3e23969a12c067bac5cac542bb4b6", "ref_doc_id": "1643f25b-bf8d-4019-a251-aad866b37a36"}, "14eb1aef-2190-4085-8b91-74d270a2349d": {"doc_hash": "b504e4e7142afae0c8a719408e27da6a7294bd8550a28232659fa0ac05bf4b72", "ref_doc_id": "a0ea7eea-2101-4f3d-a946-468ad4ad58bb"}, "27618d07-ce5f-4f9d-9c36-3971f75950cb": {"doc_hash": "7c8d3770c497894685b76eb3a8739a50f6e42a25409fd8f421855f3be89470d0", "ref_doc_id": "4a925ab7-8475-48cb-ba0e-a7072a5fc3c6"}, "835f2f0c-ddb4-4244-84fc-3b7088d6acb3": {"doc_hash": "f34e3feed4d3585bc1fcd5576fcb1ecd763c186eab3d7ef31af845aa0f1abdb7", "ref_doc_id": "4a925ab7-8475-48cb-ba0e-a7072a5fc3c6"}, "18f87ee0-0851-4d26-9eb7-6c9a6286e5bc": {"doc_hash": "eaa44eaa48f04f64f14b3de5ab47b8c486248aa97081efb180a010870d757ae9", "ref_doc_id": "4a925ab7-8475-48cb-ba0e-a7072a5fc3c6"}, "5f355cb6-731d-4175-b4bf-6f8e39e000a0": {"doc_hash": "bbd2674546815d265d2e185d5e3ccca744c1b6cb1e3a9014c0f252205591d9d8", "ref_doc_id": "0a4b4bbc-1134-4f2c-8da5-79e8cd8c71f4"}, "5e08349a-fb36-4990-b6cc-ec00517f6cd9": {"doc_hash": "a401e4d62e5d92bb55a24ace871cbefb3f1c2288559c671749f7bbb3e89716b0", "ref_doc_id": "66a9ebb8-2d7d-4033-944f-31dfa035e3f4"}, "e2c10ae7-4391-461e-af2f-1b10610c4688": {"doc_hash": "9c68210fc991a7f6294249cc81c0223bb384bfbb7021c46145cd5341a3e2eb66", "ref_doc_id": "7f36b59e-7a17-4a2a-9c87-d2c46ce144b5"}, "96225bdf-9956-4e65-99a6-d9ef34e41676": {"doc_hash": "4c60fe104506855f4f5216a0b80ca0935e8f5a02a1bdaa29689dc1fa684d5218", "ref_doc_id": "fee04062-d9e9-4f4e-93b3-0b3c0b7fd57a"}, "5c6c28e3-6719-4d2e-883f-7f2b29dd3921": {"doc_hash": "78a53149ea29db6bfedf46a0fef181f83914ddd92d3cc15d06cf58ed2ef408ac", "ref_doc_id": "d4eedcf5-8f83-4f80-99bd-760fb2e0a8f5"}, "63f2a70d-b1bb-4073-8cd0-c5ea6fe4039b": {"doc_hash": "1beadba9209f46c25623acc9ee721b879f1e714e3e3a86ead67975d29b7f7eae", "ref_doc_id": "8eac5dbe-53b8-494d-acfc-2d24367a9cb0"}, "f0872759-3614-4332-ac74-eaed71a29c9f": {"doc_hash": "b430491fa85c1d4402f19a99f73dd6803c3444ee636e7b96330d4be3d7f82759", "ref_doc_id": "50a69a24-dd76-4846-b447-9e97b867e21e"}, "640c4f9c-613a-401b-a11a-9b0fd1254400": {"doc_hash": "9ff8f1f2829ed701accf609862602eccb28d46939367918ff6e8f8107a2dd5ca", "ref_doc_id": "73f32951-5420-4e3e-959b-c1e71c864935"}, "2363ae16-c968-4dc0-8c13-a65f2944ff36": {"doc_hash": "7fc3cbd2de47203420f937a69c06059a1718ccf860812fd663f77f5f97b867c2", "ref_doc_id": "e7009818-9d87-4b7d-b982-10ca75472538"}, "6b62e60c-f904-46f4-8977-445abb028091": {"doc_hash": "802711d2d624eaa8342908575ee5791a97fcef237aba847af655ab90bb9120af", "ref_doc_id": "8a2aa7c1-5de2-4928-9b30-79be88185d29"}, "2ffae7a9-2fd9-4e76-bf41-38eb7c22eadd": {"doc_hash": "b484f08336c7bd438a842eaa8395b306d23ac51d23158cfdf2bda6ca76a9d69e", "ref_doc_id": "77e6d8b0-5302-4c9a-9962-bba9057c5ab9"}, "09443a1f-4958-4b00-8149-8a211c93d123": {"doc_hash": "a6b43e85a5be8d3a403a91d03aa62f855f2b33bad9fe24c2dda6e5ad73fd7bfd", "ref_doc_id": "f0bbbd54-e161-42dc-9909-5ce62ec548c5"}, "71bc19a5-d4b2-4dfb-a813-75e5cfbb1497": {"doc_hash": "1324c096f6b4f401241c02f5bc2e859c3848332c49869d3b28c3dc0b7c30904c", "ref_doc_id": "dd9de3db-2f73-4134-a1f2-617527889fef"}, "c6f490c0-acc3-476b-8730-f28773cc2272": {"doc_hash": "3f208ef5047aca2121e9881fefc5212f521e5ae7fcb78764da755aa63ae1e72f", "ref_doc_id": "67a7f74a-fde1-4848-aab8-bcf4f864ec87"}, "f765e994-25ae-4ac4-8970-6be95a4c8349": {"doc_hash": "7fcf4af551bf05e349bd23759237fbbe83f6112fad6e09451ace5b25211c66fa", "ref_doc_id": "bf952e89-2bf4-4e7b-8cf0-a415f6c47131"}, "9a2e7cc4-1a03-4596-bd09-495f62b75938": {"doc_hash": "9e59f09f8f3cdad49743ae15bef3ad1d1c89423976cc7ab5bdf3871fd2d27c59", "ref_doc_id": "87cb8f35-a6fe-40fd-825f-c0bdc8106d9f"}, "d9852cf3-5ba7-4313-a173-9e94b45c192a": {"doc_hash": "b6e44cb4a581e7512c456ba535f085d04b2eaf90063ca654c783efa604c58c14", "ref_doc_id": "bc08992e-48bb-4a55-b67d-7090e3ca19e1"}, "0bd39614-36c2-42d3-befc-06268c1a1cdc": {"doc_hash": "8f12e2ddc8a2bacdd1111f5574fd6935628b93707164d9af02eb616a7b24efc5", "ref_doc_id": "5f99039b-bd1d-492a-ac3e-ee13446c2aba"}, "b1dc4539-5b2a-468e-a2bc-599f8bd9602b": {"doc_hash": "8804f6ceb0ae5327906c05f66c24481d5b29bc5541a675e32be3534d5acb8758", "ref_doc_id": "6d98052f-d0e6-4008-b556-ba61fa988b34"}, "cefbf7a8-6b14-46e6-9539-ed31ee66633d": {"doc_hash": "6032c80b1fbce8ef7a1eecd6c75647d1855737aeff699fb6277953821a2d2caa", "ref_doc_id": "9d62d84f-c614-419d-94aa-bbf2d17c286f"}, "63cad995-66d6-43b8-8b24-6a0cb5b64859": {"doc_hash": "a754190f26a69ae77ba902dd675f5ad6a25e42a35d4374aa893dc8336d5c70a6", "ref_doc_id": "6df539b4-6169-4b1a-97fe-d94cd4f30b6c"}, "8c079ec6-d4ff-48ca-b6ab-b6f562a23b8a": {"doc_hash": "abad916364acd8e222d1d4c354fb858125f6d9f4dcfa7d961b55fd1fdc0e4ff1", "ref_doc_id": "6df539b4-6169-4b1a-97fe-d94cd4f30b6c"}, "4d94d903-2506-4918-bc38-924812f2c211": {"doc_hash": "df869de4b06c12861fe2e29f710f1a443306212dbb8a5f09f553f009ae347395", "ref_doc_id": "4e1c1368-a13d-4141-b95e-c4d5f873ff2e"}, "9f42217d-9e8f-4576-a5f9-90931ec18875": {"doc_hash": "68fe4c240adacdc4c7d469986bfd8adc5b3bf1f0781540bbf6fb2d06c1f39f3c", "ref_doc_id": "812c67d5-460e-4140-9919-e587f6e1b2b7"}, "acbf7747-2575-4b28-99fc-053af0aac528": {"doc_hash": "2136a912057eb852bce588388714a22e00771aa0fbb8419492537e6615e7ee5d", "ref_doc_id": "385198ab-f870-4641-a034-2f70e4751837"}, "9358824d-159c-4714-b9f6-cc0238b33f88": {"doc_hash": "6d8a4bc7cfea5ce76027dfa39be71b1e048fa91d535c71c956cbbcab52e21b52", "ref_doc_id": "893c6a73-f294-40c8-a873-ddf955c97f2d"}, "7dd1e180-6cba-4f25-8347-d48f033c8e33": {"doc_hash": "380dd75bea2a6c0d152878e7609169a1ca42f365123b5997da2a6e35d165aa8d", "ref_doc_id": "5ce2d8e3-7f30-41aa-a707-422cdc8b0611"}, "efd3ab6f-b65d-4bdd-8c58-1381683947be": {"doc_hash": "fd9d353327b28b7b437240770c3319964b4eb5c4827abc8ea06ba31c603a50bf", "ref_doc_id": "95606300-9d38-4d08-a9fc-8efcecfd23fd"}, "6ecb030c-4719-4817-8854-f261ea4edc32": {"doc_hash": "25acfce206475ff451eea9914fb3e11840c390e4a0354f97f37d54977eacaa55", "ref_doc_id": "52d4800f-bc8c-40dc-abeb-c4a3480935cd"}, "068f4680-cf34-4921-a4d8-43038e557013": {"doc_hash": "1cdafbdcca685e45cfc475429e4622164fc5d74d13fdfde0a5a4a4a5d54b1d5f", "ref_doc_id": "1a41e542-bfe1-4d1e-8a63-f439a06cbe05"}, "05a301aa-7061-442d-95d6-83ab460334a7": {"doc_hash": "9fb31826b1f5a5520d5d27bbbafbea1f66829948c2eb9b5a5bb0e82033c6caa4", "ref_doc_id": "14cecdfb-e805-46f5-b10c-5ea85f917aeb"}, "75c238fc-67a0-4207-90ce-f3f8c446177f": {"doc_hash": "07a1012f4d5fc77a22962a478892eafa166cfe8ce7a6fe1025d4630ebc71f139", "ref_doc_id": "5c683314-9def-4a78-bcf3-3acb4dc17cd2"}, "510a45e3-7324-497d-b2a5-4adf3ae351e9": {"doc_hash": "fe2decf249d819cc238cf8550f535d414af252d021b88adcbba3c7188dbefc1c", "ref_doc_id": "012b16a2-c3fb-4a62-94de-048dafb57f42"}, "2f237685-74d4-4a7e-b6d2-bb1b59046321": {"doc_hash": "36747395f188e63d08629dc24c0e40c0194d693fcbd58e3e27174fb71afd89ec", "ref_doc_id": "42838366-923c-407b-a86e-097ffaafadca"}, "e2813c8b-e846-47ac-aaa1-9dde8079d6d8": {"doc_hash": "73af3a8eb8ed24ff81c1e383d03785d76a2b00bd1fb4b877ce23c30817287662", "ref_doc_id": "47210118-0b8d-4f8d-b208-fdbeb9f15966"}, "1d4b9382-f628-44e1-8635-b76b426150ed": {"doc_hash": "2912f83fa5daa1a2bfaa0c30ce2e881903aeaae851fe1cb7e40b5b72c4d0580e", "ref_doc_id": "9f6b21a5-6667-4cd3-a4d6-beb87e76fd13"}, "3af76dec-1b35-481a-ad58-e137b565fd7d": {"doc_hash": "e655c32befa6d71886e2db2f797d4def0068566909ab0d139c6a6250c5bff54c", "ref_doc_id": "01c33ddd-f6f4-4a73-beb1-f908cf6653f4"}, "9184b44e-0730-4d2d-b76e-6b57b7140983": {"doc_hash": "7f3f3c4f811643446d64235f5865cc7d78185ba4b5ccb940069f5d15b1cc0173", "ref_doc_id": "8dde4150-f9da-4f16-8d50-64f5293024be"}, "05e78092-cebe-4215-b28f-38625a1d3a09": {"doc_hash": "e8f980b0c049cc3a9f802800122f940fcc3e77e0f4810d68463a6195f07178fc", "ref_doc_id": "0941afea-38a8-4271-88ff-736791108b69"}, "c3be207e-6294-4cfb-827c-05c705709fdf": {"doc_hash": "d106c9ac12e0e4a55ffbfd2aa17fa4de6081dffb98c0977a17df5195e46fe7cb", "ref_doc_id": "85d72868-6376-4f0b-a46b-da2d05c9ee2a"}, "a1bfb670-b317-46e1-a17b-aeb4387f7a06": {"doc_hash": "804619820a1e8c017a42c4d9a41ce0992840d8e94bdf595328c6ef3656b9b6a4", "ref_doc_id": "85d72868-6376-4f0b-a46b-da2d05c9ee2a"}, "7ba320ad-220f-4464-9b8c-f53269644fa7": {"doc_hash": "ae9a65475bdb54f63ba9bbb38bc56740deef37cd42e5299556be6ffa8a4fdc0b", "ref_doc_id": "85d72868-6376-4f0b-a46b-da2d05c9ee2a"}, "00f9d740-be97-4eb5-b5cf-6b48c753f58c": {"doc_hash": "43648de3cc7a5ad7f353fd56e8d1523051f34e9e51734375711e57e0a2f05c9f", "ref_doc_id": "85d72868-6376-4f0b-a46b-da2d05c9ee2a"}, "c06466da-640a-4406-8f94-c49150026062": {"doc_hash": "bd2f25d51db99dde6e774a637b505b84051a1bf639c230abe197c527ab95cc92", "ref_doc_id": "85d72868-6376-4f0b-a46b-da2d05c9ee2a"}, "78962a5b-a98c-41f1-8222-5e1fe06e7414": {"doc_hash": "831e762363f3eb6b63b24f2133eb5f2b4da3de39687e85233043bba045d4c7f2", "ref_doc_id": "13859f3f-3f3d-44c9-a6fd-6f063e83df0a"}, "a865d871-ce12-4a69-95f9-830cf95048a3": {"doc_hash": "d372b7f7768c2fdfb5af929b3dbcaba6f063a8b11ce157f5d7345d7e3f15365a", "ref_doc_id": "09071137-bd59-40ab-bcb3-5a5d24805ab6"}, "cf4c8b54-d9cf-478d-898c-a474c19626c4": {"doc_hash": "74bf1f2f921767c06d72bf76644975b436750a1b8fbf438791f4a63acfc74fa4", "ref_doc_id": "bfdc3d4c-1178-4d6b-8273-4ab7ea6a0ae3"}, "bc4382a1-f3b2-418a-8686-effa957f26b6": {"doc_hash": "9eeb75cf65f508f7d96cbe697b0f248fb5bdcb75b684f8a714ad9938999dbd6b", "ref_doc_id": "813a9462-ef0f-46c9-8d02-20a748d3d629"}, "beb8ee1b-2a29-4a7a-9c70-b1072cdbc2a4": {"doc_hash": "c2565aa9b85c521071e6a771d2cfbd869a1dbc0f9c334ae4d1bf5c4c52987133", "ref_doc_id": "f7e6d588-eee7-440e-943e-bca5582980f0"}, "74830b19-fd7e-425f-bb2d-4a446bd8c522": {"doc_hash": "6bfc2d6335ebe8cb34b175f0201d03c6dd92dd95d1b8e01a90aa242086040faa", "ref_doc_id": "9d223b58-94e9-4466-ad0c-87839b0051eb"}, "44c9ec2f-f7b4-410e-b057-aa50eef896bc": {"doc_hash": "6894120c89d7233fcd9c3d59b179d91d624fe5221dda5c52edf87b80855c1760", "ref_doc_id": "b26551e5-eb1e-434b-97fd-6ca38a4b89e0"}, "05f7a5c7-8347-4eb0-a339-ac065a983f81": {"doc_hash": "8a7be325ea43ac07c4552633e24025214152a242bc5bbd2ccf45e574368afc46", "ref_doc_id": "6547f6fb-0665-4ce6-9b79-34954f7c2a1a"}, "47a0c3a4-423b-4026-a7a4-ef91d8874436": {"doc_hash": "2180e64e3c4761ac9909b98b7620ae5bac42573e7fc7f27dee766f7b8b3065dd", "ref_doc_id": "84fea6b6-a3df-4f8f-b367-3957138deac4"}, "4a570697-4ceb-47e4-8058-6dc713eec23a": {"doc_hash": "86a4cd22a607dd87100210a739d10e2ceef465a73da467fd20b00ec0f2f12331", "ref_doc_id": "2b826aca-59cb-4b74-a6b6-ab2ac9192d2e"}, "950757bc-476d-49b4-a0cf-3c5824406bcc": {"doc_hash": "600251b063f4ccafc1676ad7dbecf4e932404da9fca06c9c092147e0663a1526", "ref_doc_id": "0abafea0-5d4c-4370-9132-53f5737b6d5c"}, "0d52ba0f-2dba-4bfb-98a2-236fa147adb1": {"doc_hash": "c163ff7d0de90ef0817f879b09b87340ce62bf192676540fa9e619bb3cad1f85", "ref_doc_id": "eccb97c4-2bcd-439c-b0dd-a86f559ce4bf"}, "ed8455e9-8b56-431a-a35e-f16befb74d7e": {"doc_hash": "140c068c34630a714a9168c5b3ce1caea03ee264b68800a15147e4ff2c1303bd", "ref_doc_id": "3c168929-5d1f-44f4-ac01-11a65e852015"}, "2e07f0b5-c38e-456f-bfc3-bb329e50770c": {"doc_hash": "a52ecdeb36adc8d27854453d81251b69ad45030447804d5dd27720127c82c4bf", "ref_doc_id": "6e604459-6531-455c-ad69-65f7761cab99"}, "c9d1b47f-74bf-4756-98ae-0b1d85d7880c": {"doc_hash": "b9311297423310372217fb5f580275543ce9f20632782d5da4869adae23b6e0d", "ref_doc_id": "2fc2ffac-6f4d-47cb-9c98-da88d7ede231"}, "40e6c752-7d55-49e7-b733-3eedd0a05807": {"doc_hash": "7fae97673be66b9b90acd51c76d1d133a95b47c054a75ddaf906bb18ebc72c93", "ref_doc_id": "023b8181-ac92-4c27-9781-76ca52c2f8d7"}, "f75fa702-4ccc-40a7-8d78-ff4ad06fad3f": {"doc_hash": "94f08ac338c7068b261084a1c1a22967dfc0af250ad8a1178ce4b8b1ff2ab1a8", "ref_doc_id": "ff8a5cda-9e4d-49d4-b1f2-83f421093075"}, "7b84c757-2073-456d-9903-c10a7a8bac61": {"doc_hash": "5da0605d9d30be63e29a98dd5b6e19006c0a63b2b084fb09734910442842ac6b", "ref_doc_id": "dbd76588-bba0-49e2-8692-fa5c1a46c360"}, "181c5b35-e490-4707-ba02-5722e589d823": {"doc_hash": "ce8d03673e8043943ef132e71467c7971394d96f2f77f3260d5029247ae645c0", "ref_doc_id": "a427716c-0e64-4e9f-854d-af1e8f9d0958"}, "b03e1baf-421b-4e4f-b8f1-a99034a9e8f6": {"doc_hash": "46bf419e8dad59ca11e8297260240f33072b51dc8947cd26106bfb0102ef0c70", "ref_doc_id": "c3969c8a-2398-4920-a5a4-37a344863fc7"}, "151de829-a402-4137-b1f6-c847d2b61a7c": {"doc_hash": "424850688b9b75ba94376b4ad68cb9fc4d0e185f5cb4cfa1029fe725d9bd69f4", "ref_doc_id": "174919ae-0848-4af3-916d-575d0472267a"}, "9b9386f3-4831-404b-9171-145120d1679c": {"doc_hash": "7322dbe1de8b3bef607bbf39f034584c2258a5835e3d63410b0ebdc05ce3a07f", "ref_doc_id": "05ceede8-e65f-4061-8d62-bc7d51904657"}, "49917dca-60b0-4472-b86f-2c31a0855068": {"doc_hash": "a879f6e2ff7717267b8272d970688c7aa0b68c4c4185a5a3acc57254beeebcc6", "ref_doc_id": "ab43ff75-1814-4397-ac42-fc58a215c673"}, "a22a4875-6b65-4c6d-a523-a0994e0fcca4": {"doc_hash": "8e22779ed0cdba6348879af1f054f7f676a73baab6823aeacef5048c0126b5be", "ref_doc_id": "ce388f5d-1102-4812-b6cd-8e04cbd37f76"}, "7e9c3597-8f6d-4b13-934e-3e83c2057445": {"doc_hash": "30da1708fafc9620d2683ae95ef1294324809c37a3b9aa230874a7036095f3f7", "ref_doc_id": "21bb3c55-f515-441d-9468-371840d43113"}, "631d50f0-40b4-4d09-b9bc-c66b8a2a3e19": {"doc_hash": "b42f87ab78f92fd72df421ec7b6dd37a22d721a67db151b87c054ae725136958", "ref_doc_id": "91cc3a09-f8bd-4a7b-8d50-2f35a6233a7c"}, "01b4f08d-5398-45ba-b597-88a20cdd6f47": {"doc_hash": "85b57a00580f5fa09ebeed657289099accac7f106a33e9231de3fb4589a6b49b", "ref_doc_id": "f37cdc50-bed5-43f3-8bc8-e48418d264ff"}, "c1523ce5-f585-4023-8dae-472fc56c235c": {"doc_hash": "d7402a85fc706b6b8b60888439214cbef2adc7fc97250f8e93eeee179722bfc1", "ref_doc_id": "2de384b8-23c6-4e42-92a6-492e23422c31"}, "ea24c53a-b5d2-49b7-a9d4-5fac13f4cf31": {"doc_hash": "8b36ffedff6e4b597506db2e7059182ed917bb746ecec889bc7186f9ca681240", "ref_doc_id": "9a43479a-b1b4-43d6-985b-f8e5b6fb41e9"}, "b4aa846f-0a39-4b9f-a47d-e97088e11533": {"doc_hash": "0ab7815f9632fd2ed09d9f2fe4271aab43034b0b83f7b20d4690a70523850772", "ref_doc_id": "9d2dab06-3dc4-401f-ad8c-9d32e9709ded"}, "8a9c877d-711d-41a9-99ab-e758b2587cb5": {"doc_hash": "1b5c24f62de72a46a439956e250dcc5d7c3c10384d9ed49cc067c13031c47226", "ref_doc_id": "9ac15ac2-f46e-4984-88e6-6ae350330bb5"}, "e3486861-9b36-40aa-8339-564143dcf2cf": {"doc_hash": "21cbba4e16ad21d6d16b7e285f9ca6fa58b9ceb012df99845adcdd1038fc195c", "ref_doc_id": "924da62a-aaeb-47ff-8acf-c8dd15b063bc"}, "d3ef65fd-12d9-4587-86ba-b4fe870f5d8a": {"doc_hash": "96e8350a156faf7ce65f497fdb2024eda2e3ea1f2b6576d69ed25e102f1d448d", "ref_doc_id": "d7ec9cf6-65f6-4174-ae43-0922a3394670"}, "d7bd2fc5-bf52-47b6-8e83-6552e311e785": {"doc_hash": "7438b6c76b3771da28ead008d86591aaca6b6a1524f93326aa2cfcb52f5facb3", "ref_doc_id": "676d8269-66c3-4cd5-9bba-a955ca564115"}, "d7a0db4f-56fc-4fae-8556-42df62d6d8f2": {"doc_hash": "c12d9444ab4565a31d45be000904e2df3ff8f68b3cb271854f775b3601ba5b11", "ref_doc_id": "a5877363-4d15-4d73-8e04-d4a6e97d211a"}, "90d56980-48a1-42a3-a2d9-dc1f1f67abf1": {"doc_hash": "e51048bd63559a0e87c7e0ea3b26f77c2343fc14179462b84d752645587d6b9d", "ref_doc_id": "17bd61e7-0654-4a47-a97e-f812218d35d1"}, "50c85f6f-70ae-45d8-ad86-6da34b0229ec": {"doc_hash": "049c6c80f16837435dcd2e00253c69ca52e3f15ce996ec5ae266bbbd275b9405", "ref_doc_id": "7df94b79-6f03-4bc5-acce-7f3cf5f68605"}, "1a38b4cb-95eb-42d4-8c47-af911c31beef": {"doc_hash": "a7ebacf6da2d62cc696b8289c93b7cc9f1d0b6a6e43a1caf77104e31c9271ca2", "ref_doc_id": "063762fe-2274-47f0-a715-0be672971055"}, "607a202c-c01e-48a2-ad12-38cfd9602a71": {"doc_hash": "54d29063d3b8b77177179636dfd4e3af32816aa934c1f099df6e355a7e32148c", "ref_doc_id": "d3be3cbe-ef6f-4acd-baa4-761564685da6"}, "3779cbe3-e90c-4ad0-9d3d-3234a71a13bf": {"doc_hash": "e77c112de0a07a4beab468f5dd622a937509b9992a1037fa13e6aac3193c504f", "ref_doc_id": "d51b39fc-0e1f-4ce9-9d94-99c72fb5473e"}, "8b06ec3b-f6b1-47a0-9d46-838b633ad369": {"doc_hash": "a7df24e74b0ba81bbeb42a603f1b9b90194cf677be65b968776941411f9b973a", "ref_doc_id": "370c37c4-6380-4876-9239-7edd31278eea"}, "f552fd06-02fa-4830-832e-f57c6ae58d06": {"doc_hash": "0f8f1f9c7a41b7495dacd4917c485722b8a4781fb8a723977eb7e19e8e39c936", "ref_doc_id": "49d3424d-68ba-47a0-a9b1-784dee3d5bfe"}, "ffe673dd-67de-47c5-bc44-3c8db0d8098a": {"doc_hash": "93792902a73bd7def4341cca5df45e0d1cbe160c4b75c958f19ba6ae3fc9bebb", "ref_doc_id": "1f3d11fe-535d-42dd-ac7e-d08768a040c0"}, "65a52edd-ea72-49c2-a1d1-2f3b1af01d29": {"doc_hash": "e945a89a092ba423fa5a166e6fa283b9d7bea50c4c415c948c4e5e04aa082d00", "ref_doc_id": "6e3cb22d-07ea-40ba-90c5-0b521d59715d"}, "b3e15362-a41b-438e-a522-9ffcb899f9ee": {"doc_hash": "4ff38b02eec820205fddfe23c3d2f2780fddaed8293be6ca8441ef702ff2a78f", "ref_doc_id": "c7100ffd-9d3d-40f6-8868-73b9d6fcdc6e"}, "214858a3-6254-4b85-9a4a-c9867385bb7f": {"doc_hash": "1adf5083d9d10db54d8d3107631cefbe2d07fa05138352b7f22265e78415977a", "ref_doc_id": "756ea687-1802-45b2-b54b-1e4372fabfaf"}, "8199fd02-73ee-479e-87e4-46db5155337d": {"doc_hash": "92e0132225d7d644edc139dae416e006f03b894c3b0fc30259f4008113d12daa", "ref_doc_id": "af923364-82d2-4714-8db8-cbb12845cbe7"}, "9b022e6b-4577-453b-9b39-613388e1e2fe": {"doc_hash": "abba31ff3c3a0d25566b68395c7e1a2639e55204a688077da46bf18eb91e456f", "ref_doc_id": "ce79de12-7223-4fa2-9f79-aa918ac3818e"}}, "docstore/data": {"411c7e3c-1beb-43ac-9197-bb109604c743": {"__data__": {"text": "\n\n1. Create a Smart Contract\n\nThis is the first chapter of the tutorial on building an end-to-end dapp on Aptos. If you haven\u2019t done it, review that introduction, and ensure your environment meets the prerequisites listed there.\n\nNow that you are all set up and at your terminal:\n\n1.  `cd` into the `my-first-dapp` root directory, and create a new `move` directory.\n2.  `cd` into the new `move` directory and run: `aptos move init --name my_todo_list`\n    That command creates a `sources/` directory and `Move.toml` file inside the `move` directory.\n3.  Your new `move` directory should now resemble:\n\n    !move-directory\n\n", "doc_id": "411c7e3c-1beb-43ac-9197-bb109604c743", "embedding": null, "doc_hash": "4113e35b85d3c273c3b4124ac0ee1ec7ccecf39ece7374369c08a52ea7274a51", "extra_info": null, "node_info": {"start": 0, "end": 623, "_node_type": "1"}, "relationships": {"1": "1520839c-39c6-4606-9374-c85298f07d84"}}, "__type__": "1"}, "750533ba-74dd-4054-a8cf-0fe3fae5281d": {"__data__": {"text": "\n\nWhat is a `Move.toml` file?\n\nA `Move.toml` file is\u00a0a manifest file that contains metadata such as name, version, and dependencies for the package.\n\nTake a look at the new `Move.toml` file. You should see your package information and an `AptosFramework` dependency. Note that the `name` property is the same `--name` attribute we passed to the `aptos move init` command before. The `AptosFramework` dependency points to the `aptos-core/aptos-move/framework/aptos-framework` GitHub repo main branch.\n\n", "doc_id": "750533ba-74dd-4054-a8cf-0fe3fae5281d", "embedding": null, "doc_hash": "65521b1fc81a5ce6f97a8bf0cdd5e2d193ae8f39b91f0bfa5f71f272da73032c", "extra_info": null, "node_info": {"start": 0, "end": 501, "_node_type": "1"}, "relationships": {"1": "c620ee1e-fdc3-4aa3-94e3-f1587528637e"}}, "__type__": "1"}, "721cbe13-c4a5-4567-bd94-660289ad9ade": {"__data__": {"text": "\n\nWhy `sources` directory?\n\nThe `sources` directory holds a collection of `.move` modules files. And later when we want to compile the package using the CLI, the compiler will look for that `sources` directory and its `Move.toml` file.\n\n", "doc_id": "721cbe13-c4a5-4567-bd94-660289ad9ade", "embedding": null, "doc_hash": "339044e7e6f2fc97976d425b452e1cede7321f543375ade7dc9c353094149759", "extra_info": null, "node_info": {"start": 0, "end": 237, "_node_type": "1"}, "relationships": {"1": "02afa3e4-b312-497a-bb70-d5522a5ac7c3"}}, "__type__": "1"}, "09bcf07d-8a64-43df-9f6d-176ff6df47db": {"__data__": {"text": "\n\nCreate a Move module\n\nAn account is needed to publish a Move module. So first we need to create an account. Once we have the account's private key, we can create a module under its account address and publish the module using that account.\n\n1. In our `move` directory, run `aptos init --network devnet`. Press enter when prompted.\n\n   This creates for us a `.aptos` directory with a `config.yaml` file that holds our profile information. In the `config.yaml` file, we now have our profiles list that holds a `default` profile. If you open that file, you will see content resembling:\n\n   ```yaml\n   profiles:\n     default:\n       private_key: \"0xee8f387ef0b4bb0018c4b91d1c0f71776a9b85935b4c6ec2823d6c0022fbf5cb\"\n       public_key: \"0xc6c07218d79a806380ca67761905063ec7a78d41f79619f4562462a0f8b6be11\"\n       account: cbddf398841353776903dbab2fdaefc54f181d07e114ae818b1a67af28d1b018\n       rest_url: \"https://fullnode.devnet.aptoslabs.com\"\n       faucet_url: \"https://faucet.devnet.aptoslabs.com\"\n   ```\n\n   From now on, whenever we run a CLI command in this `move` directory, it will run with that default profile.\n   We use the `devnet` network flag so eventually when we publish our package it will get published to the `devnet` network.\n\n   :::tip\n   You just created a new account on the Aptos (dev) network! Yay! You can see it by going to the Aptos Explorer Devnet network view, pasting the `account` address value from your configuration file into the search field, and clicking on the dropdown option!\n   :::\n\nAs mentioned, our `sources` directory holds our `.move` module files; so let\u2019s add our first Move file.\n\n2. Open the `Move.toml` file.\n3. Add the following code to that Move file, substituting your actual default profile account address from `.aptos/config.yaml`:\n\n```toml\n[addresses]\ntodolist_addr=''\n```\n\nIf the default profile account address is `cbddf398841353776903dbab2fdaefc54f181d07e114ae818b1a67af28d1b018`, your `Move.toml` file should look like:\n\n```toml\n[addresses]\ntodolist_addr='cbddf398841353776903dbab2fdaefc54f181d07e114ae818b1a67af28d1b018'\n```\n\n4. Create a new `todolist.move` file within the `sources` directory and add the following to that file:\n\n```rust\nmodule todolist_addr::todolist {\n\n}\n```\n\n:::tip\nA Move module is stored under an address (so when it published anyone can access it using that address); the syntax for a Move module is\n\n```rust\nmodule :: {\n\n}\n```\n\nIn our module, the `account-address` is `todolist_addr` (a variable we just declared on the `Move.toml` file in the previous step that holds an `address`), and the `module-name` is `todolist` (a random name we selected).\n:::\n\n", "doc_id": "09bcf07d-8a64-43df-9f6d-176ff6df47db", "embedding": null, "doc_hash": "6a14babbf35e7dfff92762daaf61adfb49900476dd1a316e84afbaaf7cd0e086", "extra_info": null, "node_info": {"start": 0, "end": 2635, "_node_type": "1"}, "relationships": {"1": "d7fb17a1-fcc9-472a-9602-01fa4c10391e"}}, "__type__": "1"}, "6147e316-8824-461a-bbab-7dfceaa53ded": {"__data__": {"text": "\n\nOur contract logic\n\nBefore jumping into writing code, let\u2019s first understand what we want our smart contract program to do. For ease of understanding, we will keep the logic pretty simple:\n\n1. An account creates a new list.\n2. An account creates a new task on their list.\n   - Whenever someone creates a new task, emit a `task_created` event.\n3. Let an account mark their task as completed.\n\n:::tip\nCreating an event is not mandatory yet useful if dapps/users want to monitor data, such as how many people create a new task, using the Aptos Indexer.\n:::\n\nWe can start with defining a `TodoList` struct, that holds the:\n\n- tasks array\n- new task event\n- a task counter that counts the number of created tasks (we can use that to differentiate between the tasks)\n\nAnd also create a `Task` struct that holds:\n\n- the task ID - derived from the TodoList task counter.\n- address - the account address who created that task.\n- content - the task content.\n- completed - a boolean that marks whether that task is completed or not.\n\nOn the `todolist.move` file, update the content in the module with:\n\n```rust\n...\nstruct TodoList has key {\n    tasks: Table,\n    set_task_event: event::EventHandle,\n    task_counter: u64\n  }\n\nstruct Task has store, drop, copy {\n    task_id: u64,\n    address:address,\n    content: String,\n    completed: bool,\n  }\n...\n```\n\n**What did we just add?**\n\n**TodoList**\n\nA struct that has the `key` and `store` abilities:\n\n- `Key` ability allows struct to be used as a storage identifier. In other words,\u00a0`key`\n  \u00a0is an ability to be stored at the top-level and act as a storage. We need it here to have `TodoList` be a resource stored in our user account.\n\nWhen a struct has the `key` ability, it turns this struct into a `resource`:\n\n- `Resource` is stored under the account - therefore it\u00a0*exists* only when assigned to an account and can be\u00a0*accessed* through this account only.\n\n**Task**\n\nA struct that has the `store`, `drop` and `copy`abilities.\n\n\u2022 `Store` - Task needs `Store` as it\u2019s stored inside another struct (TodoList)\n\n\u2022 `Copy`\u00a0- value can be\u00a0*copied*\u00a0(or cloned by value).\n\n\u2022 `Drop`\u00a0- value can be\u00a0*dropped*\u00a0by the end of scope.\n\nLet\u2019s try to compile what we have now:\n\n1. `cd` into the `move` directory.\n2. Run: `aptos move compile`\n\n**Seeing errors?!** Let\u2019s understand them.\n\nWe have some errors on `Unbound type`- this is happening because we used some types but never imported them, and the compiler doesnt know where to get them from.\n\n3. On the top of the module, import those types by adding:\n\n```rust\n...\nuse aptos_framework::event;\nuse std::string::String;\nuse aptos_std::table::Table;\n...\n```\n\nThat will tell the compiler where it can get those types from.\n\n4. Run the `aptos move compile` command again; If all goes well, we should see a response resembling (where the resulting account address is your default profile account address):\n\n```rust\nINCLUDING DEPENDENCY AptosFramework\nINCLUDING DEPENDENCY AptosStdlib\nINCLUDING DEPENDENCY MoveStdlib\nBUILDING myTodolist\n{\n\"Result\": [\n    \"cbddf398841353776903dbab2fdaefc54f181d07e114ae818b1a67af28d1b018::todolist\"\n  ]\n}\n```\n\nAt this point, we have successfully compiled our Move module. Yay!\n\nWe", "doc_id": "6147e316-8824-461a-bbab-7dfceaa53ded", "embedding": null, "doc_hash": "33c946e3650232f5244aa37f8c1e8744b6b9af8077396c18afc9bddcd06ecb39", "extra_info": null, "node_info": {"start": 0, "end": 3188, "_node_type": "1"}, "relationships": {"1": "3d52337a-3302-407c-a581-19b7605e4fc4", "3": "41345f25-7df1-4145-b9e0-bf0eaa8cdaa5"}}, "__type__": "1"}, "41345f25-7df1-4145-b9e0-bf0eaa8cdaa5": {"__data__": {"text": "this point, we have successfully compiled our Move module. Yay!\n\nWe also have a new `move/build` directory (created by the compiler) that holds our compiled modules, build information and `sources` directory.\n\n", "doc_id": "41345f25-7df1-4145-b9e0-bf0eaa8cdaa5", "embedding": null, "doc_hash": "1a0579ab02a52edb994569edeac588c5edf312de3848c84d70f5e13853d9a9cc", "extra_info": null, "node_info": {"start": 3121, "end": 3331, "_node_type": "1"}, "relationships": {"1": "3d52337a-3302-407c-a581-19b7605e4fc4", "2": "6147e316-8824-461a-bbab-7dfceaa53ded"}}, "__type__": "1"}, "4d8c05d9-29f7-442f-ba30-8be612426e3a": {"__data__": {"text": "\n\nCreate list function\n\nThe first thing an account can and should do with our contract is create a new list.\n\nCreating a list is essentially submitting a transaction, and so we need to know the `signer` who signed and submitted the transaction:\n\n1. Add a `create_list` function that accepts a `signer`\n\n```rust\npublic entry fun create_list(account: &signer){\n\n}\n```\n\n**Let\u2019s understand the components of this function**\n\n- `entry` - an _entry_ function is a function that can be called via transactions. Simply put, whenever you want to submit a transaction to the chain, you should call an entry function.\n\n- `&signer` - The **signer** argument is injected by the Move VM as the address who signed that transaction.\n\nOur code has a `TodoList` resource. Resource is stored under the account; therefore, it\u00a0*exists* only when assigned to an account and can be\u00a0*accessed* only through this account.\n\nThat means to create the `TodoList` resource, we need to assign it to an account that only this account can have access to.\n\nThe `create_list` function can handle that `TodoList` resource creation.\n\n2. Add the following to the `create_list` function\n\n```rust\npublic entry fun create_list(account: &signer){\n  let tasks_holder = TodoList {\n    tasks: table::new(),\n    set_task_event: account::new_event_handle(account),\n    task_counter: 0\n  };\n  // move the TodoList resource under the signer account\n  move_to(account, tasks_holder);\n}\n```\n\nThis function takes in a `signer`, creates a new `TodoList` resource, and uses `move_to` to have the resource stored in the provided signer account.\n\n", "doc_id": "4d8c05d9-29f7-442f-ba30-8be612426e3a", "embedding": null, "doc_hash": "1f57d5808f1f4fdf656e991327da57f3ea30f03ccf79d6b703ad1867b5868aa4", "extra_info": null, "node_info": {"start": 0, "end": 1591, "_node_type": "1"}, "relationships": {"1": "7b7ace7e-79ea-4921-b878-96b3786f4d87"}}, "__type__": "1"}, "625dd722-6d69-4d33-b6a6-0655d687a78a": {"__data__": {"text": "\n\nCreate task function\n\nAs mentioned before, our contract has a create task function that lets an account create a new task. Creating a task is also essentially submitting a transaction, and so we need to know the `signer` who signed and submitted the transaction. Another element we want to accept in our function is the task `content`.\n\n1. Add a `create_task` function that accepts a `signer` and task `content` and the function logic.\n\n```rust\npublic entry fun create_task(account: &signer, content: String) acquires TodoList {\n    // gets the signer address\n    let signer_address = signer::address_of(account);\n    // gets the TodoList resource\n    let todo_list = borrow_global_mut(signer_address);\n    // increment task counter\n    let counter = todo_list.task_counter + 1;\n    // creates a new Task\n    let new_task = Task {\n      task_id: counter,\n      address: signer_address,\n      content,\n      completed: false\n    };\n    // adds the new task into the tasks table\n    table::upsert(&mut todo_list.tasks, counter, new_task);\n    // sets the task counter to be the incremented counter\n    todo_list.task_counter = counter;\n    // fires a new task created event\n    event::emit_event(\n      &mut borrow_global_mut(signer_address).set_task_event,\n      new_task,\n    );\n  }\n```\n\n2. Since we now use two new modules - signer and table (you can see it being used in `signer::` and `table::`) - we need to import these modules.\n   At the top of the file, add those two use statements:\n\n```rust\nuse std::signer;\nuse aptos_std::table::{Self, Table}; // This one we already have, need to modify it\n```\n\n**Back to the code; what is happening here?**\n\n- First, we want to get the signer address so we can get this account\u2019s `TodoList` resource.\n- Then, we retrieve the `TodoList` resource with the `signer_address`; with that we have access to the `TodoList` properties.\n- We can now increment the `task_counter` property, and create a new `Task` with the `signer_address`, `counter` and the provided `content`.\n- We push it to the `todo_list.tasks` table that holds all of our tasks along with the new `counter` (which is the table key) and the newly created Task.\n- Then we assign the global `task_counter` to be the new incremented counter.\n- Finally, we emit the `task_created` event that holds the new Task data. `emit_event` is an `aptos-framework` function that accepts a reference to the event handle and a message. In our case, we are passing the function a reference (using the sign &) to the account\u2019s `TodoListresource` `set_task_event` property as the first argument and a second message argument which is the new Task we just created. Remember, we have a `set_task_event` property in our `TodoList` struct.\n\n", "doc_id": "625dd722-6d69-4d33-b6a6-0655d687a78a", "embedding": null, "doc_hash": "3a55fc7d6f3e9307ceddae1e0e8805685d6ac28ef20c3dc9895395c348de000d", "extra_info": null, "node_info": {"start": 0, "end": 2725, "_node_type": "1"}, "relationships": {"1": "fc905d70-937f-40ff-841e-29863618b4c3"}}, "__type__": "1"}, "8b62d72d-b688-4af1-aad3-9118ed72f9eb": {"__data__": {"text": "\n\nComplete task function\n\nAnother function we want our contract to hold is the option to mark a task as completed.\n\n1. Add a `complete_task` function that accepts a `signer` and a `task_id`:\n\n```rust\npublic entry fun complete_task(account: &signer, task_id: u64) acquires TodoList {\n  // gets the signer address\n  let signer_address = signer::address_of(account);\n  // gets the TodoList resource\n  let todo_list = borrow_global_mut(signer_address);\n  // gets the task matches the task_id\n  let task_record = table::borrow_mut(&mut todo_list.tasks, task_id);\n  // update task as completed\n  task_record.completed = true;\n}\n```\n\n**Let\u2019s understand the code.**\n\n- As before in our create list function, we retrieve the `TodoList` struct by the signer address so we can have access to the tasks table that holds all of the account tasks.\n- Then, we look for the task with the provided `task_id` on the `todo_list.tasks` table.\n- Finally, we update that task completed property to be true.\n\nNow try to compile the code:\n\n2. Run: `aptos move compile`\n3. Another `Unbound` error? To fix this, add a `use` statement to use the `account` module.\n\n```rust\nuse aptos_framework::account;\n```\n\n4. run `aptos move compile` again.\n\n", "doc_id": "8b62d72d-b688-4af1-aad3-9118ed72f9eb", "embedding": null, "doc_hash": "74360c9bd9ff9f5adf9fa00b41ebef7cbd1362527e5c3c41206b71453c8a0e47", "extra_info": null, "node_info": {"start": 0, "end": 1217, "_node_type": "1"}, "relationships": {"1": "c7ca15ff-0101-4c1a-a907-cb3ab559ea80"}}, "__type__": "1"}, "519e137c-f816-4cfb-99d2-d0f7be89ca4d": {"__data__": {"text": "\n\nAdd validations\n\nAs this code now compiles, we want to have some validations and checks before creating a new task or updating the task as completed so we can be sure our functions work as expected.\n\n1. Add a check to the `create_task` function to make sure the signer account has a list:\n\n```rust\npublic entry fun create_task(account: &signer, content: String) acquires TodoList {\n  // gets the signer address\n  let signer_address = signer::address_of(account);\n\n  // assert signer has created a list\n  assert!(exists(signer_address), 1);\n\n  ...\n}\n```\n\n1. Add a check to the `complete_task` function to make sure the:\n   - signer has created a list.\n   - task exists.\n   - task is not completed.\n\nWith:\n\n```rust\npublic entry fun complete_task(account: &signer, task_id: u64) acquires TodoList {\n  // gets the signer address\n  let signer_address = signer::address_of(account);\n  // assert signer has created a list\n  assert!(exists(signer_address), 1);\n  // gets the TodoList resource\n  let todo_list = borrow_global_mut(signer_address);\n  // assert task exists\n  assert!(table::contains(&todo_list.tasks, task_id), 2);\n  // gets the task matched the task_id\n  let task_record = table::borrow_mut(&mut todo_list.tasks, task_id);\n  // assert task is not completed\n  assert!(task_record.completed == false, 3);\n  // update task as completed\n  task_record.completed = true;\n}\n```\n\nWe just added our first `assert` statements!\n\nIf you noticed, `assert` accepts two arguments: the first is what to check for, and the second is an error code. Instead of passing in an arbitrary number, a convention is to declare `errors` on the top of the module file and use these instead.\n\nOn the top of the module file (under the `use` statements), add those error declarations:\n\n```rust\n// Errors\nconst E_NOT_INITIALIZED: u64 = 1;\nconst ETASK_DOESNT_EXIST: u64 = 2;\nconst ETASK_IS_COMPLETED: u64 = 3;\n```\n\nNow we can update our asserts with these constants:\n\n```rust\npublic entry fun create_task(account: &signer, content: String) acquires TodoList {\n  // gets the signer address\n  let signer_address = signer::address_of(account);\n\n  // assert signer has created a list\n  assert!(exists(signer_address), E_NOT_INITIALIZED);\n\n  ...\n}\n\n\n\npublic entry fun complete_task(account: &signer, task_id: u64) acquires TodoList {\n  // gets the signer address\n  let signer_address = signer::address_of(account);\n  assert!(exists(signer_address), E_NOT_INITIALIZED);\n  // gets the TodoList resource\n  let todo_list = borrow_global_mut(signer_address);\n  // assert task exists\n  assert!(table::contains(&todo_list.tasks, task_id), ETASK_DOESNT_EXIST);\n  // gets the task matched the task_id\n  let task_record = table::borrow_mut(&mut todo_list.tasks, task_id);\n  // assert task is not completed\n  assert!(task_record.completed == false, ETASK_IS_COMPLETED);\n  // update task as completed\n  task_record.completed = true;\n}\n```\n\n**WONDERFUL!!**\n\nLet\u2019s stop for one moment and make sure our code compiles by running the `aptos move compile` command. If all goes well, we should output resembling:\n\n```rust\nINCLUDING DEPENDENCY", "doc_id": "519e137c-f816-4cfb-99d2-d0f7be89ca4d", "embedding": null, "doc_hash": "451f9f4902ac738ea3af9a1ad3c19cfb11ff3e3e3a824bbe202d81896ed7601f", "extra_info": null, "node_info": {"start": 0, "end": 3094, "_node_type": "1"}, "relationships": {"1": "2867605b-1d27-4763-be0c-87296155048c", "3": "60c52bd9-ae3d-44ac-85b2-5609f92059be"}}, "__type__": "1"}, "60c52bd9-ae3d-44ac-85b2-5609f92059be": {"__data__": {"text": "we should output resembling:\n\n```rust\nINCLUDING DEPENDENCY AptosFramework\nINCLUDING DEPENDENCY AptosStdlib\nINCLUDING DEPENDENCY MoveStdlib\nBUILDING myTodolist\n{\n\"Result\": [\n    \"cbddf398841353776903dbab2fdaefc54f181d07e114ae818b1a67af28d1b018::todolist\"\n  ]\n}\n```\n\nIf you encounter errors, make sure you followed the steps above correctly and try to determine the cause of the issues.\n\n", "doc_id": "60c52bd9-ae3d-44ac-85b2-5609f92059be", "embedding": null, "doc_hash": "077074f94607018a9479f8d3eb99fa48ccdbedd7d2497ff120c3941937f69a42", "extra_info": null, "node_info": {"start": 3036, "end": 3422, "_node_type": "1"}, "relationships": {"1": "2867605b-1d27-4763-be0c-87296155048c", "2": "519e137c-f816-4cfb-99d2-d0f7be89ca4d"}}, "__type__": "1"}, "a00fe0da-04ba-4371-a27f-6431475f383f": {"__data__": {"text": "\n\nWrite tests\n\nNow that we have our smart contract logic ready, we need to add some tests for it.\n\nTest functions use the `#[test]` annotation.\n\n1. Add the following code to the bottom of the file:\n\n```rust\n#[test]\npublic entry fun test_flow() {\n\n}\n```\n\n:::tip\nwe need to use `entry` here because we are testing an `entry` function.\n:::\n\n2. For simplicity, and because we don't have much code to test, we use one function to test the whole flow of the app.\n   The test steps are:\n\n```\n  // create a list\n  // create a task\n  // update task as completed\n```\n\nUpdate the test function to be:\n\n```rust\n#[test(admin = @0x123)]\npublic entry fun test_flow(admin: signer) acquires TodoList {\n  // creates an admin @todolist_addr account for test\n  account::create_account_for_test(signer::address_of(&admin));\n  // initialize contract with admin account\n  create_list(&admin);\n\n  // creates a task by the admin account\n  create_task(&admin, string::utf8(b\"New Task\"));\n  let task_count = event::counter(&borrow_global(signer::address_of(&admin)).set_task_event);\n  assert!(task_count == 1, 4);\n  let todo_list = borrow_global(signer::address_of(&admin));\n  assert!(todo_list.task_counter == 1, 5);\n  let task_record = table::borrow(&todo_list.tasks, todo_list.task_counter);\n  assert!(task_record.task_id == 1, 6);\n  assert!(task_record.completed == false, 7);\n  assert!(task_record.content == string::utf8(b\"New Task\"), 8);\n  assert!(task_record.address == signer::address_of(&admin), 9);\n\n  // updates task as completed\n  complete_task(&admin, 1);\n  let todo_list = borrow_global(signer::address_of(&admin));\n  let task_record = table::borrow(&todo_list.tasks, 1);\n  assert!(task_record.task_id == 1, 10);\n  assert!(task_record.completed == true, 11);\n  assert!(task_record.content == string::utf8(b\"New Task\"), 12);\n  assert!(task_record.address == signer::address_of(&admin), 13);\n}\n```\n\nOur `#[test]` annotation has changed and declares an account variable.\n\nAdditionally, the function itself now accepts a signer argument.\n\n**Let\u2019s understand our tests.**\n\nSince our tests runs outside of an account scope, we need to _create_ accounts to use in our tests. The `#[test]` annotation gives us the option to declare those accounts. We use an `admin` account and set it to a random account address (`@0x123`). The function accepts this signer (account) and creates it by using a built-in function to create an account for test.\n\nThen we simply go through the flow by:\n\n- creating a list\n- creating a task\n- updating a task as completed\n\nAnd assert the expected data/behavior at each step.\n\nBefore running the tests again, we need to import (`use`) some new modules we are now employing in our code:\n\n3. At the top of the file, add this `use` statement:\n\n```rust\nuse std::string::{Self, String}; // already have it, need to modify\n```\n\n4. Run the `aptos move test` command. If all goes right, we should see a success message like:\n\n```rust\nRunning Move unit tests\n[ PASS    ] 0xcbddf398841353776903dbab2fdaefc54f181d07e114ae818b1a67af28d1b018::todolist::test_flow\nTest result: OK. Total tests: 1; passed: 1;", "doc_id": "a00fe0da-04ba-4371-a27f-6431475f383f", "embedding": null, "doc_hash": "3121c682f17aa6060cac48f1ca35a791f85faec5acb15a9c73646f840bdc8b98", "extra_info": null, "node_info": {"start": 0, "end": 3101, "_node_type": "1"}, "relationships": {"1": "e6597174-9728-495a-b3d4-3816822ec4ee", "3": "5327bda1-38e7-4f26-9b71-ab256e56194d"}}, "__type__": "1"}, "5327bda1-38e7-4f26-9b71-ab256e56194d": {"__data__": {"text": "result: OK. Total tests: 1; passed: 1; failed: 0\n{\n  \"Result\": \"Success\"\n}\n```\n\n5. Let\u2019s add one more test to make sure our `complete_task` function works as expected. Add another test function with:\n\n```rust\n#[test(admin = @0x123)]\n#[expected_failure(abort_code = E_NOT_INITIALIZED)]\npublic entry fun account_can_not_update_task(admin: signer) acquires TodoList {\n  // creates an admin @todolist_addr account for test\n  account::create_account_for_test(signer::address_of(&admin));\n  // account can not toggle task as no list was created\n  complete_task(&admin, 2);\n}\n```\n\nThis test confirms that an account can\u2019t use that function if they haven\u2019t created a list before.\n\nThe test also uses a special annotation `#[expected_failure]` that, as the name suggests, expects to fail with an `E_NOT_INITIALIZED` error code.\n\n6. Run the `aptos move test` command. If all goes right, we should see a success message like:\n\n```rust\nRunning Move unit tests\n[ PASS    ] 0xcbddf398841353776903dbab2fdaefc54f181d07e114ae818b1a67af28d1b018::todolist::account_can_not_update_task\n[ PASS    ] 0xcbddf398841353776903dbab2fdaefc54f181d07e114ae818b1a67af28d1b018::todolist::test_flow\nTest result: OK. Total tests: 2; passed: 2; failed: 0\n{\n  \"Result\": \"Success\"\n}\n```\n\nNow that everything works, we can compile the Move modules and publish the Move package to chain so our React app (and everyone else) can interact with our smart contract!\n\n", "doc_id": "5327bda1-38e7-4f26-9b71-ab256e56194d", "embedding": null, "doc_hash": "2a79f2c6f0731d0135884e6f1013b9f7864411e9a0008e2749f5a90661e5f137", "extra_info": null, "node_info": {"start": 3063, "end": 4487, "_node_type": "1"}, "relationships": {"1": "e6597174-9728-495a-b3d4-3816822ec4ee", "2": "a00fe0da-04ba-4371-a27f-6431475f383f"}}, "__type__": "1"}, "0dae7551-e030-4e4b-a1f0-90c4857c644a": {"__data__": {"text": "\n\nPublish todolist module to chain\n\nFor now, the easiest way to publish a Move package to chain is using the CLI:\n\n1. `cd` into our `move` directory, and run: `aptos move compile`\n\nWe are getting some _Unused alias_ errors. This is because we added the `string` alias before since we use it in our tests. But we don't use this alias in our smart contract code.\n\nThis is why we are getting this error when we want to compile the module but not are getting it when we only run tests.\n\nTo fix it, we can add a `use` statement that would be used only in tests.\n\nAdd the following `use` statement where we have all of our import statements.\n\n```rust\nuse std::string::String; // change to this\n...\n#[test_only]\nuse std::string; // add this\n```\n\n2. Run: `aptos move test` and `aptos move compile` - all should work without errors.\n3. Run: `aptos move publish`\n4. Enter `yes` in the prompt.\n5. That will compile, simulate and finally publish you module into devnet. You should see a success message:\n\n```rust\n{\n  \"Result\": {\n    \"transaction_hash\": \"0x96b84689a53a28db7be6346627a99967f719946bc22766811a674e69da7783fa\",\n    \"gas_used\": 7368,\n    \"gas_unit_price\": 100,\n    \"sender\": \"cbddf398841353776903dbab2fdaefc54f181d07e114ae818b1a67af28d1b018\",\n    \"sequence_number\": 2,\n    \"success\": true,\n    \"timestamp_us\": 1674246585276143,\n    \"version\": 651327,\n    \"vm_status\": \"Executed successfully\"\n  }\n}\n```\n\n6. You can now head to the Aptos Explorer, change the dropdown on the top right to the _Devnet_ network and look for that `transaction_hash` value - this will show you the transaction details.\n\nNow let's set up a React app in chapter 2.\n\n", "doc_id": "0dae7551-e030-4e4b-a1f0-90c4857c644a", "embedding": null, "doc_hash": "aca33be37187bbf43e26de1f066e2fc9357ea03b3b8dec361567cd71e5489d0e", "extra_info": null, "node_info": {"start": 0, "end": 1640, "_node_type": "1"}, "relationships": {"1": "34b1a7ec-c755-43dd-8f4d-a04633757216"}}, "__type__": "1"}, "951e3c2e-0348-42bc-acd1-957de2ddf34e": {"__data__": {"text": "\n\n2. Set up React App\n\nThis is the second chapter of the tutorial on building an end-to-end dapp on Aptos where you have already created a smart contract and are now setting up a React app.\n\n", "doc_id": "951e3c2e-0348-42bc-acd1-957de2ddf34e", "embedding": null, "doc_hash": "8dece0ae06355bc5b6cc37d59948af2c1f3b9e2f96d5e2e9b9418315d4103b06", "extra_info": null, "node_info": {"start": 0, "end": 191, "_node_type": "1"}, "relationships": {"1": "38d218d5-3bd3-47e2-a03b-556729d42419"}}, "__type__": "1"}, "4e58f121-b7b7-4464-aac0-25cb44382e34": {"__data__": {"text": "\n\nSet up the app\n\nWe will use the `react` library to build the client side with Create React App.\n\nFor the UI, we will use Ant Design. This is just a personal decision; you are welcome to use any different UI library/framework you wish.\n\n1. In the root folder of the `my-first-dapp` project, run:\n\n```js\nnpx create-react-app client --template typescript\n```\n\nThat will create a new `client` folder in the current path:\n\n2. Your file structure should look something like:\n\n   !client-folder\n\n3. Run: `cd client`\n4. Run: `npm start`\n\n   At this point you should have your app running on http://localhost:3000, which displays the default React layout.\n\n5. In the `client/src` directory, find all of the React app files. Let\u2019s clean it up a bit.\n6. Open the `App.tsx` file and update its content to be:\n\n```js\nfunction App() {\n  return My app goes here;\n}\n\nexport default App;\n```\n\nOnce you save the changes, you should see that the app content has changed in the browser and displays `My app goes here`.\n\n7. Open the `App.tsx` file and remove the `import './App.css';` and `import logo from './logo.svg';` lines. Since we remove the default imports on this file, we can remove some files in our project. Delete the files `App.css` and `logo.svg`.\n8. Open the `index.tsx` file and remove the `import './index.css';` line at the top of the file.\n   Now you can also delete the `src/index.css` file.\n\n", "doc_id": "4e58f121-b7b7-4464-aac0-25cb44382e34", "embedding": null, "doc_hash": "641c547b3bc6adc77e0c19c447559537cd6a23a7c2acaca6702cffa02dfd7305", "extra_info": null, "node_info": {"start": 0, "end": 1395, "_node_type": "1"}, "relationships": {"1": "7a037782-4e87-4084-b156-f352b0bd0e7e"}}, "__type__": "1"}, "e5a1d780-ec91-4478-9641-51635f395bdd": {"__data__": {"text": "\n\nOur dapp UI\n\nFirst we will build the dApp UI layout. We have two UI states for the app:\n\n- When an account hasn\u2019t created a list yet (on the left).\n- When an account has created a list and can now add tasks to it (on the right).\n  !dapp-ui\n\nWe will use the Ant Design library for our UI:\n\n1. Stop the local server if running.\n2. On to the `client` directory and install our UI library package: `npm i antd@5.1.4`\n3. Update `App.tsx` with the initial state UI:\n\n```jsx\nreturn (\n  \n    \n      \n        \n          Our todolist\n        \n        \n          Connect Wallet\n        \n      \n    \n  \n);\n```\n\n4. Dont forget to import the _components_ we just added:\n\n```js\nimport { Layout, Row, Col } from \"antd\";\n```\n\n5. Run the local server with `npm start`, you should see the _header_ that matches our UI mockup.\n\nIt is now time to add wallet support in chapter 3.\n\n", "doc_id": "e5a1d780-ec91-4478-9641-51635f395bdd", "embedding": null, "doc_hash": "c4933a6e715877ff48d5d047a29ac30c9786e4d84b89537580168ccf5f1ee9be", "extra_info": null, "node_info": {"start": 0, "end": 862, "_node_type": "1"}, "relationships": {"1": "c0744271-6b6e-4eee-9915-9c457e109d4b"}}, "__type__": "1"}, "52a0eea5-76f6-421b-a4e1-63150bbc74a1": {"__data__": {"text": "\n\n3. Add Wallet Support\n\nIn the third chapter of the tutorial on building an end-to-end dapp on Aptos, you will be adding _wallet_ support to your React app. You now need a wallet to submit a transaction to the blockchain.\n\nAptos provides a wallet adapter that supports many ecosystem wallets to offering a common interface and UI package that can be used to add a wallet connect button and a wallet selector modal.\n\n1. Stop the local server if running.\n2. In the `client` folder, run:\n\n```cmd\nnpm i @aptos-labs/wallet-adapter-react@1.0.2\n```\n\n```cmd\nnpm i @aptos-labs/wallet-adapter-ant-design@1.0.0\n```\n\nThis installs two packages:\n\n- the adapter React provider that holds the logic.\n- a wallet connect UI package.\n\n3. We now need to add wallets to our app. There is a list of wallets the adapter supports; but to keep this tutorial simple, we will use only one wallet.\n   Still in the `client` folder, run\n\n```cmd\nnpm i petra-plugin-wallet-adapter\n```\n\n:::tip\nIf you haven't installed the Petra wallet extension yet:\n\n1. Install Petra Wallet and open the Chrome extension.\n2. Follow the\u00a0user instructions\u00a0on petra.app for help.\n3. Switch to the Devnet network by clicking **Settings** > **Network** and selecting\u00a0**devnet**.\n4. Click the **Faucet** button to ensure you can receive test tokens.\n\n:::\n\n4. Open `Index.tsx` file. At the top of the file, add the following:\n\n```js\nimport { PetraWallet } from \"petra-plugin-wallet-adapter\";\nimport { AptosWalletAdapterProvider } from \"@aptos-labs/wallet-adapter-react\";\n```\n\n5. Still in `Index.tsx`, add a constant that holds an array of wallets:\n\n```js\n...\nconst wallets = [new PetraWallet()];\n...\n```\n\n6. Inside the `render` method, update the code with the following:\n\n```jsx\n...\n\n  \n\n...\n```\n\nThat wraps our app with the adapter provider and initializes it with our wallets. It also sets the provider to autoConnect a wallet.\n\n7. Open the `App.tsx` file and import the wallet connect UI package we installed in the previous step. At the top of the file add the following:\n\n```js\nimport { WalletSelector } from \"@aptos-labs/wallet-adapter-ant-design\";\n```\n\n8. The UI package uses a style `.css` file; let's import that one also at the bottom of the import statements.\n\n```js\n...\nimport \"@aptos-labs/wallet-adapter-ant-design/dist/index.css\";\n```\n\n9. In the `return` statement, remove the `Connect Wallet` text and add the `WalletSelector` component:\n\n```jsx\n...\n\n  \n\n...\n```\n\n10. Start the local server with `npm start` and open the app in the browser.\n\nWe now have a working Wallet connect button and a wallet selector modal. Feel free to play with it and connect a wallet with it.\n\nThen learn how to fetch data from chain in chapter 4.\n\n", "doc_id": "52a0eea5-76f6-421b-a4e1-63150bbc74a1", "embedding": null, "doc_hash": "0b53ad44760e1217915d62bab427d83d73277d28c9bff0ee5f1d3157adefd7f5", "extra_info": null, "node_info": {"start": 0, "end": 2690, "_node_type": "1"}, "relationships": {"1": "852ea680-098d-40d4-b489-7e2c705c32fa"}}, "__type__": "1"}, "0fd4c9b8-6283-494c-baa9-f449deaf5759": {"__data__": {"text": "\n\n4. Fetch Data from Chain\n\nIn the fourth chapter of the tutorial on building an end-to-end dapp on Aptos, you will be learning to fetch data from chain.\n\nOur UI logic relies on whether the connected account has created a todo list. If the account has created a todo list, our app should display that list; if not, the app should display a button offering the option to create a new list.\n\nFor that, we first need to check if the connected account has a `TodoList` resource. In our smart contract, whenever someone creates a todo list we create and assign a `TodoList` resource to their account.\n\nTo fetch data from chain, we can use the Aptos TypeScript SDK. The SDK provides classes and functions for us to easily interact and query the Aptos chain.\n\nTo get started:\n\n1. Stop the local server if running.\n2. In the `client` directory, run: `npm i aptos`\n3. In the `App.tsx` file, import the `Provider` class and the `Network` type like so:\n\n```js\nimport { Provider, Network } from \"aptos\";\n```\n\nThe TypeScript SDK provides us with a `Provider` class where we can initialize and query the Aptos chain and Indexer. `Provider` expects `Network` type as an argument, which is the network name we want to interact with.\n\n:::tip\nRead more about the `Provider` class in the Aptos TypeScript SDK overview.\n:::\n\n1. In the `App.tsx` file, add:\n\n```js\nconst provider = new Provider(Network.DEVNET);\n```\n\nThis will initialize a `Provider` instance for us with the devnet network.\n\nOur app displays different UIs based on a user resource (i.e if a user has a list \u21d2 if a user has a `TodoList` resource). For that, we need to know the current account connected to our app.\n\n1. Import wallet from the wallet adapter React provider:\n\n```js\nimport { useWallet } from \"@aptos-labs/wallet-adapter-react\";\n```\n\n2. Extract the account object from the wallet adapter:\n\n```js\nfunction App (\n\tconst { account } = useWallet();\n\t...\n)\n```\n\nThe `account` object is `null` if there is no account connected; when an account is connected, the `account` object holds the account information, including the account address.\n\n3. Next, we want to fetch the account\u2019s TodoList resource.\n   Begin by importing `useEffect` by using `jsx import useEffect from \"react\"; `\n   Let\u2019s add a `useEffect` hook to our file that would call a function to fetch the resource whenever our account address changes:\n\n```jsx\nfunction App() {\n  ...\n  useEffect(() => {\n    fetchList();\n  }, [account?.address]);\n  ...\n}\n```\n\n4. Before creating our `fetchList` function, let\u2019s also create a local state to store whether the account has a list:\n\n```js\nfunction App (\n  ...\n  const [accountHasList, setAccountHasList] = useState(false);\n  ...\n)\n```\nalso import `useEffect` using \n```import { useState, useEffect } from \"react\"; ```\n\n5. Our `useEffect` hook is calling a `fetchList` function; let\u2019s create it:\n\n```jsx\nconst fetchList = async () => {\n  if (!account) return [];\n  // change this to be your module account address\n  const moduleAddress = \"0xcbddf398841353776903dbab2fdaefc54f181d07e114ae818b1a67af28d1b018\";\n  try {\n    const TodoListResource = await provider.getAccountResource(\n      account.address,\n      `${moduleAddress}::todolist::TodoList`\n    );\n    setAccountHasList(true);\n  } catch (e: any) {\n  ", "doc_id": "0fd4c9b8-6283-494c-baa9-f449deaf5759", "embedding": null, "doc_hash": "4acbd238bd69c53cb2a56fcfba678a0954ab2dc58e1dd15a0c83a0f90d12b6a2", "extra_info": null, "node_info": {"start": 0, "end": 3265, "_node_type": "1"}, "relationships": {"1": "616ff216-04a1-45f7-9302-bcc4a19410b3", "3": "5bd49d81-5a52-40a4-b934-6e5443a3cf30"}}, "__type__": "1"}, "5bd49d81-5a52-40a4-b934-6e5443a3cf30": {"__data__": {"text": "setAccountHasList(true);\n  } catch (e: any) {\n    setAccountHasList(false);\n  }\n};\n```\n\nThe `moduleAddress` is the address we publish the module under, i.e the account address you have in your `Move.toml` file (`myaddr`).\n\nThe `provider.getAccountResource()`expects an _account address_ that holds the resource we are looking for and a string representation of an on-chain _Move struct type_.\n\n- account address - is the current connected account (we are getting it from the wallet account object)\n- Move struct type string syntax:\n  - The account address who holds the move module = our profile account address (You might want to change the `moduleAddress` const to be your own account address)\n  - The module name the resource lives in = `todolist`\n  - The resource name = `TodoList`\n\nIf the request succeeds and there is a resource for that account, we want to set our local state to `true`; otherwise, we would set it to `false`.\n\n6. Let\u2019s update ```import { Layout, Row, Col } from \"antd\"; ``` to import Button:\n   ```import { Layout, Row, Col, Button  } from \"antd\"; ```\n\n7. Let\u2019s update our UI based on the `accountHasList` state:\n\n```jsx\nreturn (\n  \n    \n      \n        \n          Our todolist\n        \n        \n          \n        \n      \n    \n    {!accountHasList && (\n      \n        \n          \n            Add new list\n          \n        \n      \n    )}\n  \n);\n```\n\nWe now have an **Add new list** button that appears only if the account doesn\u2019t have a list.\n\nStart the local server with `npm start`. You should see the **Add new list** button.\n\nNext, let\u2019s understand how to create a new list by submitting data to chain in chapter 5.\n\n", "doc_id": "5bd49d81-5a52-40a4-b934-6e5443a3cf30", "embedding": null, "doc_hash": "b222d074efade68b09dccb44a46aaa9126e95138351b50bfea1babcf2aff0faf", "extra_info": null, "node_info": {"start": 3217, "end": 4863, "_node_type": "1"}, "relationships": {"1": "616ff216-04a1-45f7-9302-bcc4a19410b3", "2": "0fd4c9b8-6283-494c-baa9-f449deaf5759"}}, "__type__": "1"}, "4bce45a6-d73e-4fe8-916d-d7a6e2443c33": {"__data__": {"text": "\n\n5. Submit Data to Chain\n\nIn the fifth chapter of the tutorial on building an end-to-end dapp on Aptos, you will be submitting data to the chain.\n\nSo now we have an **Add new list** button that appears if the connected account hasn\u2019t created a list yet. We still don't have a way for an account to create a list, so let\u2019s add that functionality.\n\n1. First, our wallet adapter provider has a `signAndSubmitTransaction` function; let\u2019s extract it by updating the following:\n\n```js\nconst { account, signAndSubmitTransaction } = useWallet();\n```\n\n2. Add an `onClick` event to the new list button:\n\n```js\n\n  Add new list\n\n```\n\n3. Add the `addNewList` function:\n\n```js\nconst addNewList = async () => {\n  if (!account) return [];\n  // build a transaction payload to be submited\n  const payload = {\n    type: \"entry_function_payload\",\n    function: `${moduleAddress}::todolist::create_list`,\n    type_arguments: [],\n    arguments: [],\n  };\n  try {\n    // sign and submit transaction to chain\n    const response = await signAndSubmitTransaction(payload);\n    // wait for transaction\n    await provider.waitForTransaction(response.hash);\n    setAccountHasList(true);\n  } catch (error: any) {\n    setAccountHasList(false);\n  }\n};\n```\n\n4. Since our new function also uses `moduleAddress`, let\u2019s get it out of the `fetchList` function scope to the global scope so it can be used globally.\n\nIn our `fetchList` function, find the line:\n\n```js\n// replace with your own address\nconst moduleAddress = \"0xcbddf398841353776903dbab2fdaefc54f181d07e114ae818b1a67af28d1b018\";\n```\n\nAnd move it to outside of the main `App` function, right beneath our const `provider` declarations.\n\n```js\nexport const provider = new Provider(Network.DEVNET);\n// change this to be your module account address\nexport const moduleAddress = \"0xcbddf398841353776903dbab2fdaefc54f181d07e114ae818b1a67af28d1b018\";\n```\n\n**Let\u2019s go over the `addNewList` function code.**\n\nFirst, we use the `account` property from our wallet provider to make sure there is an account connected to our app.\n\nThen we build our transaction payload to be submitted to chain:\n\n```js\nconst payload = {\n  type: \"entry_function_payload\",\n  function: `${moduleAddress}::todolist::create_list`,\n  type_arguments: [],\n  arguments: [],\n};\n```\n\n- `type` is the function type we want to hit - our `create_list` function is an `entry` type function.\n- `function`- is built from the module address, module name and the function name.\n- `type_arguments`- this is for the case a Move function expects a generic type argument.\n- `arguments` - the arguments the function expects, in our case it doesn\u2019t expect any arguments.\n\nNext, we submit the transaction payload and wait for its response. The response returned from the `signAndSubmitTransaction` function holds the transaction hash. Since it can take a bit for the transaction to be fully submitted to chain and we also want to make sure it is submitted successfully, we `waitForTransaction`. And only then we can set our local `accountHasList` state to `true`.\n\n5. Before testing our app, let\u2019s tweak our UI a bit and add a Spinner component to show up while we are waiting for the transaction.\n   Add a local state to keep track whether a transaction is in progress:\n\n```ts\nconst [transactionInProgress, setTransactionInProgress] =", "doc_id": "4bce45a6-d73e-4fe8-916d-d7a6e2443c33", "embedding": null, "doc_hash": "08bf4c2e93f32f2b7906a3f15c23bfb8c03d0bb2eef0dc5e7ce1cd49d82ccdf4", "extra_info": null, "node_info": {"start": 0, "end": 3303, "_node_type": "1"}, "relationships": {"1": "bc802574-270a-43db-822e-82d22157fcce", "3": "626e2c5b-854b-4417-b876-799fdebd0d23"}}, "__type__": "1"}, "626e2c5b-854b-4417-b876-799fdebd0d23": {"__data__": {"text": "[transactionInProgress, setTransactionInProgress] = useState(false);\n```\n\n6. Update our `addNewList` function to update the local state:\n\n```js\nconst addNewList = async () => {\n  if (!account) return [];\n  setTransactionInProgress(true);\n  // build a transaction payload to be submited\n  const payload = {\n    type: \"entry_function_payload\",\n    function: `${moduleAddress}::todolist::create_list`,\n    type_arguments: [],\n    arguments: [],\n  };\n  try {\n    // sign and submit transaction to chain\n    const response = await signAndSubmitTransaction(payload);\n    // wait for transaction\n    await provider.waitForTransaction(response.hash);\n    setAccountHasList(true);\n  } catch (error: any) {\n    setAccountHasList(false);\n  } finally {\n    setTransactionInProgress(false);\n  }\n};\n```\n\n7. Update our UI with the following:\n\n```jsx\nreturn (\n  \n    ...\n    \n      {!accountHasList && (\n        \n          \n            \n              Add new list\n            \n          \n        \n      )}\n    \n  \n);\n```\n\nNow you can head over to our app, and add a new list!\n\nSince you haven\u2019t made the user interface able to handle cases where an account has created a list, you will do so next handling tasks in chapter 6.\n\n", "doc_id": "626e2c5b-854b-4417-b876-799fdebd0d23", "embedding": null, "doc_hash": "e27ada8bfa8600df830bc5a62344ce8292c4c78a0fed591a3273813218b4af52", "extra_info": null, "node_info": {"start": 3252, "end": 4463, "_node_type": "1"}, "relationships": {"1": "bc802574-270a-43db-822e-82d22157fcce", "2": "4bce45a6-d73e-4fe8-916d-d7a6e2443c33"}}, "__type__": "1"}, "9f370f1f-1b39-4d12-94c0-93d1b1b917fb": {"__data__": {"text": "\n\n6. Handle Tasks\n\nIn the sixth and final chapter of the tutorial on building an end-to-end dapp on Aptos, you will add functionality to the app so the user interface is able to handle cases where an account has created a list.\n\nWe have covered how to fetch data (an account\u2019s todo list) from chain and how to submit a transaction (new todo list) to chain using Wallet.\n\nLet\u2019s finish building our app by implementing fetch tasks and adding a task function.\n\n", "doc_id": "9f370f1f-1b39-4d12-94c0-93d1b1b917fb", "embedding": null, "doc_hash": "7d98d57d8ee92eb1d9aaa0b234261588d7fd942890573c8eb3382071fe5d33c2", "extra_info": null, "node_info": {"start": 0, "end": 458, "_node_type": "1"}, "relationships": {"1": "2ccb1719-8203-4770-ba8a-13dd6d357f9f"}}, "__type__": "1"}, "97941345-80e0-421d-8aac-b39f09e86a5a": {"__data__": {"text": "\n\nFetch tasks\n\n1. Create a local state `tasks` that will hold our tasks. It will be a state of a Task type (that has the same properties we set on our smart contract):\n\n```ts\ntype Task = {\n  address: string;\n  completed: boolean;\n  content: string;\n  task_id: string;\n};\n\nfunction App() {\n\tconst [tasks, setTasks] = useState([]);\n\t...\n}\n```\n\n2. Update our `fetchList` function to fetch the tasks in the account\u2019s `TodoList` resource:\n\n```js\nconst fetchList = async () => {\n  if (!account) return [];\n  try {\n    const TodoListResource = await provider.getAccountResource(\n      account?.address,\n      `${moduleAddress}::todolist::TodoList`\n    );\n    setAccountHasList(true);\n\t\t// tasks table handle\n    const tableHandle = (TodoListResource as any).data.tasks.handle;\n\t\t// tasks table counter\n    const taskCounter = (TodoListResource as any).data.task_counter;\n\n    let tasks = [];\n    let counter = 1;\n    while (counter <= taskCounter) {\n      const tableItem = {\n        key_type: \"u64\",\n        value_type: `${moduleAddress}::todolist::Task`,\n        key: `${counter}`,\n      };\n      const task = await provider.getTableItem(tableHandle, tableItem);\n      tasks.push(task);\n      counter++;\n    }\n\t\t// set tasks in local state\n    setTasks(tasks);\n  } catch (e: any) {\n    setAccountHasList(false);\n  }\n};\n```\n\n**This part is a bit confusing, so stick with us!**\n\nTasks are stored in a table (this is how we built our contract). To fetch a table item (i.e a task), we need that task's table handle. We also need the `task_counter` in that resource so we can loop over and fetch the task with the `task_id` that matches the `task_counter`.\n\n```js\nconst tableHandle = (TodoListResource as any).data.tasks.handle;\nconst taskCounter = (TodoListResource as any).data.task_counter;\n```\n\nNow that we have our tasks table handle and our `task_counter` variable, lets loop over the `taskCounter` . We define a `counter` and set it to 1 as the task_counter / task_id is never less than 1.\n\nWe loop while the `counter` is less then the `taskCounter` and fetch the table item and push it to the tasks array:\n\n```js\nlet tasks = [];\nlet counter = 1;\nwhile (counter <= taskCounter) {\n  const tableItem = {\n    key_type: \"u64\",\n    value_type: `${moduleAddress}::todolist::Task`,\n    key: `${counter}`,\n  };\n  const task = await provider.getTableItem(tableHandle, tableItem);\n  tasks.push(task);\n  counter++;\n}\n```\n\nWe build a `tableItem` object to fetch. If we take a look at our table structure from the contract:\n\n```rust\ntasks: Table,\n```\n\nWe see that it has a `key` type `u64` and a `value` of type `Task`. And whenever we create a new task, we assign the `key` to be the incremented task counter.\n\n```rust\n// adds the new task into the tasks table\ntable::upsert(&mut todo_list.tasks, counter, new_task);\n```\n\nSo the object we built is:\n\n```js\n{\n  key_type: \"u64\",\n ", "doc_id": "97941345-80e0-421d-8aac-b39f09e86a5a", "embedding": null, "doc_hash": "9b482a162dc8c2fccbae9e9217297c8b2da05d157ef971c1ac107603214f4e70", "extra_info": null, "node_info": {"start": 0, "end": 2863, "_node_type": "1"}, "relationships": {"1": "c80a44ff-692b-402c-a86c-adca9eca169c", "3": "adee4b3f-f712-4a3e-8109-9a4aa4bb855f"}}, "__type__": "1"}, "adee4b3f-f712-4a3e-8109-9a4aa4bb855f": {"__data__": {"text": " key_type: \"u64\",\n  value_type:`${moduleAddress}::todolist::Task`,\n  key: `${taskCounter}`,\n}\n```\n\nWhere `key_type` is the table `key` type, `key` is the key value we are looking for, and the `value_type` is the table `value` which is a `Task` struct. The Task struct uses the same format from our previous resource query:\n\n- The account address who holds that module = our profile account address\n- The module name the resource lives in = `todolist`\n- The struct name = `Task`\n\nThe last thing we want to do is display the tasks we just fetched.\n\n6. In our `App.tsx` file, update our UI with the following code:\n\n```jsx\n{\n  !accountHasList ? (\n    \n      \n        <Button\n          disabled={!account}\n          block\n          onClick={addNewList}\n          type=\"primary\"\n          style={{ height: \"40px\", backgroundColor: \"#3f67ff\" }}\n        >\n          Add new list\n        \n      \n    \n  ) : (\n    \n      \n        {tasks && (\n          <List\n            size=\"small\"\n            bordered\n            dataSource={tasks}\n            renderItem={(task: any) => (\n              ]}>\n                <List.Item.Meta\n                  title={task.content}\n                  description={\n                    <a\n                      href={`https://explorer.aptoslabs.com/account/${task.address}/`}\n                      target=\"_blank\"\n                    >{`${task.address.slice(0, 6)}...${task.address.slice(-5)}`}\n                  }\n                />\n              \n            )}\n          />\n        )}\n      \n    \n  );\n}\n```\n\nThat will display the **Add new list** button if account doesn\u2019t have a list or instead the tasks if the account has a list.\n\nGo ahead and refresh your browser - see the magic!\n\nWe haven\u2019t added any tasks yet, so we simply see a box of empty data. Let\u2019s add some tasks!\n\n", "doc_id": "adee4b3f-f712-4a3e-8109-9a4aa4bb855f", "embedding": null, "doc_hash": "f43d6fffdc72f50932816d68e503f174a17125430455c3959a17ff993ca3d731", "extra_info": null, "node_info": {"start": 2844, "end": 4649, "_node_type": "1"}, "relationships": {"1": "c80a44ff-692b-402c-a86c-adca9eca169c", "2": "97941345-80e0-421d-8aac-b39f09e86a5a"}}, "__type__": "1"}, "44f68be3-69a6-4fa9-9c58-3807afaebca1": {"__data__": {"text": "\n\nAdd task\n\n1. Update our UI with an _add task_ input:\n\n```jsx\n{!accountHasList ? (\n  ...\n) : (\n  \n\t\t// Add this!\n    \n      \n        <Input\n          style={{ width: \"calc(100% - 60px)\" }}\n          placeholder=\"Add a Task\"\n          size=\"large\"\n        />\n        <Button\n          type=\"primary\"\n          style={{ height: \"40px\", backgroundColor: \"#3f67ff\" }}\n        >\n          Add\n        \n      \n    \n    ...\n  \n)}\n```\n\nWe have added a text input to write the task and a button to add the task.\n\n2. Create a new local state that holds the task content:\n\n```jsx\nfunction App() {\n  ...\n  const [newTask, setNewTask] = useState(\"\");\n  ...\n}\n```\n\n3. Add an `onWriteTask` function that will get called whenever a user types something in the input text:\n\n```jsx\nfunction App() {\n  ...\n  const [newTask, setNewTask] = useState(\"\");\n\n  const onWriteTask = (event: React.ChangeEvent) => {\n    const value = event.target.value;\n    setNewTask(value);\n  };\n  ...\n}\n```\n\n4. Find our `` component, add the `onChange` event to it, pass it our `onWriteTask` function and set the input value to be the `newTask` local state:\n\n```jsx\n<Input\n  onChange={(event) => onWriteTask(event)} // add this\n  style={{ width: \"calc(100% - 60px)\" }}\n  placeholder=\"Add a Task\"\n  size=\"large\"\n  value={newTask} // add this\n/>\n```\n\nCool! Now we have a working flow that when the user types something on the Input component, a function will get fired and set our local state with that content.\n\n5. Let\u2019s also add a function that submits the typed task to chain! Find our Add `` component and update it with the following\n\n```jsx\n<Button\n  onClick={onTaskAdded} // add this\n  type=\"primary\"\n  style={{ height: \"40px\", backgroundColor: \"#3f67ff\" }}\n>\n  Add\n\n```\n\nThat adds an `onClickevent` that triggers an `onTaskAdded` function.\n\nWhen someones adds a new task we:\n\n- want to verify they are connected with a wallet.\n- build a transaction payload that would be submitted to chain.\n- submit it to chain using our wallet.\n- wait for the transaction.\n- update our UI with that new task (without the need to refresh the page).\n\n6. Add an `onTaskAdded` function with:\n\n```jsx\n  const onTaskAdded = async () => {\n    // check for connected account\n    if (!account) return;\n    setTransactionInProgress(true);\n    // build a transaction payload to be submited\n    const payload = {\n      type: \"entry_function_payload\",\n      function: `${moduleAddress}::todolist::create_task`,\n      type_arguments: [],\n      arguments: [newTask],\n    };\n\n    // hold the latest task.task_id from our local state\n    const latestId = tasks.length > 0 ? parseInt(tasks[tasks.length - 1].task_id) + 1 : 1;\n\n    // build a newTaskToPush object into our local state\n    const newTaskToPush = {\n      address: account.address,\n ", "doc_id": "44f68be3-69a6-4fa9-9c58-3807afaebca1", "embedding": null, "doc_hash": "7bc72acc1d509619f0b5e6ed5c68bdfd74742270296029c0e4817b6a4e01420e", "extra_info": null, "node_info": {"start": 0, "end": 2778, "_node_type": "1"}, "relationships": {"1": "fa7129c9-b9b8-4c19-8933-89496232481e", "3": "5e0b0153-a2f8-45da-bb63-d0a798bba14b"}}, "__type__": "1"}, "5e0b0153-a2f8-45da-bb63-d0a798bba14b": {"__data__": {"text": "newTaskToPush = {\n      address: account.address,\n      completed: false,\n      content: newTask,\n      task_id: latestId + \"\",\n    };\n\n    try {\n      // sign and submit transaction to chain\n      const response = await signAndSubmitTransaction(payload);\n      // wait for transaction\n      await provider.waitForTransaction(response.hash);\n\n      // Create a new array based on current state:\n      let newTasks = [...tasks];\n\n      // Add item to the tasks array\n      newTasks.push(newTaskToPush);\n      // Set state\n      setTasks(newTasks);\n      // clear input text\n      setNewTask(\"\");\n    } catch (error: any) {\n      console.log(\"error\", error);\n    } finally {\n      setTransactionInProgress(false);\n    }\n  };\n```\n\n**Let\u2019s go over on what is happening.**\n\nFirst, note we use the `account` property from our wallet provider to make sure there is an account connected to our app.\n\nThen we build our transaction payload to be submitted to chain:\n\n```js\nconst payload = {\n  type: \"entry_function_payload\",\n  function: `${moduleAddress}::todolist::create_task`,\n  type_arguments: [],\n  arguments: [newTask],\n};\n```\n\n- `type` is the function type we want to hit - our `create_task` function is an `entry` type function.\n- `function`- is built from the module address, module name and the function name.\n- `type_arguments`- this is for the case a Move function expects a generic type argument.\n- `arguments` - the arguments the function expects, in our case the task content.\n\nThen, within our try/catch block, we use a wallet provider function to submit the transaction to chain and an SDK function to wait for that transaction.\nIf all goes well, we want to find the current latest task ID so we can add it to our current tasks state array. We will also create a new task to push to the current tasks state array (so we can display the new task in our tasks list on the UI without the need to refresh the page).\n\nTRY IT!\n\nType a new task in the text input, click **Add**, approve the transaction and see it being added to the tasks list.\n\n", "doc_id": "5e0b0153-a2f8-45da-bb63-d0a798bba14b", "embedding": null, "doc_hash": "2c04560cecd22accae43df38ae1d9113d3eea634d09eac8450f1b64ef640e2ff", "extra_info": null, "node_info": {"start": 2727, "end": 4773, "_node_type": "1"}, "relationships": {"1": "fa7129c9-b9b8-4c19-8933-89496232481e", "2": "44f68be3-69a6-4fa9-9c58-3807afaebca1"}}, "__type__": "1"}, "dfb62857-07b2-404a-8e30-abfedbb91abd": {"__data__": {"text": "\n\nMark task as completed\n\nNext, we can implement the `complete_task` function. We have the checkbox in our UI so users can mark a task as completed.\n\n1. Update the `` component with an `onCheck` property that would call an `onCheckboxChange` function once it is checked:\n\n```jsx\n<List.Item actions={[\n   onCheckboxChange(event, task.task_id)}/>\n]}>\n```\n\n2. Create the `onCheckboxChange` function (make sure to import `CheckboxChangeEvent` from `antd` - `import { CheckboxChangeEvent } from \"antd/es/checkbox\";`):\n\n```js\nconst onCheckboxChange = async (\n    event: CheckboxChangeEvent,\n    taskId: string\n  ) => {\n    if (!account) return;\n    if (!event.target.checked) return;\n    setTransactionInProgress(true);\n    const payload = {\n      type: \"entry_function_payload\",\n      function:\n        `${moduleAddress}::todolist::complete_task`,\n      type_arguments: [],\n      arguments: [taskId],\n    };\n\n    try {\n      // sign and submit transaction to chain\n      const response = await signAndSubmitTransaction(payload);\n      // wait for transaction\n      await provider.waitForTransaction(response.hash);\n\n      setTasks((prevState) => {\n        const newState = prevState.map((obj) => {\n          // if task_id equals the checked taskId, update completed property\n          if (obj.task_id === taskId) {\n            return { ...obj, completed: true };\n          }\n\n          // otherwise return object as is\n          return obj;\n        });\n\n        return newState;\n      });\n    } catch (error: any) {\n      console.log(\"error\", error);\n    } finally {\n      setTransactionInProgress(false);\n    }\n  };\n```\n\nHere we basically do the same thing we did when we created a new list or a new task.\n\nWe make sure there is an account connected, set the transaction in progress state, build the transaction payload, submit the transaction, wait for it and update the task on the UI as completed.\n\n3. Update the `Checkbox` component to be checked by default if a task has already marked as completed:\n\n```jsx\n...\n<List.Item\n  actions={[\n    \n      {task.completed ? (\n        \n      ) : (\n        <Checkbox\n          onChange={(event) =>\n            onCheckboxChange(event, task.task_id)\n          }\n        />\n      )}\n    ,\n  ]}\n>\n...\n```\n\nTry it! Check a task\u2019s checkbox, approve the transaction and see the task marked as completed.\n\nYou have now learned how to build a dapp on Aptos from end to end. Congratulations! Tell your friends. :-)\n\n", "doc_id": "dfb62857-07b2-404a-8e30-abfedbb91abd", "embedding": null, "doc_hash": "58b45baf6059075f2655a9de6df6bfad71b1415db3fd54b73259cfce521e1a71", "extra_info": null, "node_info": {"start": 0, "end": 2446, "_node_type": "1"}, "relationships": {"1": "ad7614c5-43d0-433d-ab59-ad929c72e48d"}}, "__type__": "1"}, "7d0b7723-1ed1-4ed7-ad73-3da0f732276b": {"__data__": {"text": "\n\nAbilities\n\nAbilities are a typing feature in Move that control what actions are permissible for values of a given type. This system grants fine grained control over the \"linear\" typing behavior of values, as well as if and how values are used in global storage. This is implemented by gating access to certain bytecode instructions so that for a value to be used with the bytecode instruction, it must have the ability required (if one is required at all\u2014not every instruction is gated by an ability).\n\n<!-- TODO future section on detailed walk through maybe. We have some examples at the end but it might be helpful to explain why we have precisely this set of abilities\n\nIf you are already somewhat familiar with abilities from writing Move programs, but are still confused as to what is going on, it might be helpful to skip to the motivating walkthrough section to get an idea of what the system is setup in the way that it is. -->\n\n", "doc_id": "7d0b7723-1ed1-4ed7-ad73-3da0f732276b", "embedding": null, "doc_hash": "5fc431075aefb86b64151d39d6a70e9de62586688a386abe21b6611a1c07f978", "extra_info": null, "node_info": {"start": 0, "end": 939, "_node_type": "1"}, "relationships": {"1": "3d68960d-0f3e-43fc-9a89-0990de81e123"}}, "__type__": "1"}, "db308281-f993-42f8-87f3-b90b32a73077": {"__data__": {"text": "\n\nThe Four Abilities\n\nThe four abilities are:\n\n* `copy`\n    * Allows values of types with this ability to be copied.\n* `drop`\n    * Allows values of types with this ability to be popped/dropped.\n* `store`\n    * Allows values of types with this ability to exist inside a struct in global storage.\n* `key`\n    * Allows the type to serve as a key for global storage operations.\n\n", "doc_id": "db308281-f993-42f8-87f3-b90b32a73077", "embedding": null, "doc_hash": "6e99cea5d6df444b6bf3ff3825d5dd731c10c7f243898b4a178b3b4acdc2c2a9", "extra_info": null, "node_info": {"start": 0, "end": 376, "_node_type": "1"}, "relationships": {"1": "127239ca-bb93-43f0-a835-e3f7acc14d03"}}, "__type__": "1"}, "d29701f8-ca52-4c09-99be-1f36b19ec8fc": {"__data__": {"text": "\n\n`copy`\n\nThe `copy` ability allows values of types with that ability to be copied. It gates the ability to copy values out of local variables with the `copy` operator and to copy values via references with dereference `*e`.\n\nIf a value has `copy`, all values contained inside of that value have `copy`.\n\n", "doc_id": "d29701f8-ca52-4c09-99be-1f36b19ec8fc", "embedding": null, "doc_hash": "16b8f7648447afb4952a7ae0455e7f468ebe83462e38c31078d2f41fc7e7052a", "extra_info": null, "node_info": {"start": 0, "end": 305, "_node_type": "1"}, "relationships": {"1": "eadb8659-0ccd-4f68-b08e-ede2cd89269f"}}, "__type__": "1"}, "63548690-6b01-4522-be60-a751655d1aa4": {"__data__": {"text": "\n\n`drop`\n\nThe `drop` ability allows values of types with that ability to be dropped. By dropped, we mean that value is not transferred and is effectively destroyed as the Move program executes. As such, this ability gates the ability to ignore values in a multitude of locations, including:\n* not using the value in a local variable or parameter\n* not using the value in a sequence via `;`\n* overwriting values in variables in assignments\n* overwriting values via references when writing `*e1 = e2`.\n\nIf a value has `drop`, all values contained inside of that value have `drop`.\n\n", "doc_id": "63548690-6b01-4522-be60-a751655d1aa4", "embedding": null, "doc_hash": "d107738f4cdd7e2764fd6f97054519a56feeb84b4f3bd050ac02b4bf93d46663", "extra_info": null, "node_info": {"start": 0, "end": 580, "_node_type": "1"}, "relationships": {"1": "42d78ba7-1a94-4b69-a217-844868fca407"}}, "__type__": "1"}, "00c4a71e-c1ed-4e72-9f83-bbea15acf663": {"__data__": {"text": "\n\n`store`\n\nThe `store` ability allows values of types with this ability to exist inside of a struct (resource) in global storage, *but* not necessarily as a top-level resource in global storage. This is the only ability that does not directly gate an operation. Instead it gates the existence in global storage when used in tandem with `key`.\n\nIf a value has `store`, all values contained inside of that value have `store`\n\n", "doc_id": "00c4a71e-c1ed-4e72-9f83-bbea15acf663", "embedding": null, "doc_hash": "d6e34c477c03d2f0e7e2114c5b059d8cdb52a576afb787b0b8b39a0378db9602", "extra_info": null, "node_info": {"start": 0, "end": 424, "_node_type": "1"}, "relationships": {"1": "a06ce028-8075-43be-a84e-ae5847f35efc"}}, "__type__": "1"}, "df07ca71-4e08-46e9-bfa9-aacecd4ea723": {"__data__": {"text": "\n\n`key`\n\nThe `key` ability allows the type to serve as a key for global storage operations. It gates all global storage operations, so in order for a type to be used with `move_to`, `borrow_global`, `move_from`, etc., the type must have the `key` ability. Note that the operations still must be used in the module where the `key` type is defined (in a sense, the operations are private to the defining module).\n\nIf a value has `key`, all values contained inside of that value have `store`. This is the only ability with this sort of asymmetry.\n\n", "doc_id": "df07ca71-4e08-46e9-bfa9-aacecd4ea723", "embedding": null, "doc_hash": "63faf3581da8f566248491a8fab16c0e55313a820f0089ef01d8439797462d65", "extra_info": null, "node_info": {"start": 0, "end": 545, "_node_type": "1"}, "relationships": {"1": "6759507f-de90-4879-a266-d2a74d7f4120"}}, "__type__": "1"}, "57df0268-a30f-4a93-ba49-28addb4a164a": {"__data__": {"text": "\n\nBuiltin Types\n\nMost primitive, builtin types have `copy`, `drop`, and `store` with the exception of `signer`, which just has `drop`\n\n* `bool`, `u8`, `u16`, `u32`, `u64`, `u128`, `u256`, and `address` all have `copy`, `drop`, and `store`.\n* `signer` has `drop`\n    * Cannot be copied and cannot be put into global storage\n* `vector` may have `copy`, `drop`, and `store` depending on the abilities of `T`.\n    * See Conditional Abilities and Generic Types for more details.\n* Immutable references `&` and mutable references `&mut` both have `copy` and `drop`.\n    * This refers to copying and dropping the reference itself, not what they refer to.\n    * References cannot appear in global storage, hence they do not have `store`.\n\nNone of the primitive types have `key`, meaning none of them can be used directly with the global storage operations.\n\n", "doc_id": "57df0268-a30f-4a93-ba49-28addb4a164a", "embedding": null, "doc_hash": "b9032ec61ba0f0a1a51ac533467f89af574cac396ceaafee1deedd33aab5b3e1", "extra_info": null, "node_info": {"start": 0, "end": 850, "_node_type": "1"}, "relationships": {"1": "bb5ca9b3-4884-427f-86a0-6b1604dc1ac1"}}, "__type__": "1"}, "6ff35f43-5d4d-4473-a1aa-3c8309d2d489": {"__data__": {"text": "\n\nAnnotating Structs\n\nTo declare that a `struct` has an ability, it is declared with `has ` after the struct name but before the fields. For example:\n\n```move\nstruct Ignorable has drop { f: u64 }\nstruct Pair has copy, drop, store { x: u64, y: u64 }\n```\n\nIn this case: `Ignorable` has the `drop` ability. `Pair` has `copy`, `drop`, and `store`.\n\n\nAll of these abilities have strong guarantees over these gated operations. The operation can be performed on the value only if it has that ability; even if the value is deeply nested inside of some other collection!\n\nAs such: when declaring a struct\u2019s abilities, certain requirements are placed on the fields. All fields must satisfy these constraints. These rules are necessary so that structs satisfy the reachability rules for the abilities given above. If a struct is declared with the ability...\n\n* `copy`, all fields must have `copy`.\n* `drop`, all fields must have `drop`.\n* `store`, all fields must have `store`.\n* `key`, all fields must have `store`.\n    * `key` is the only ability currently that doesn\u2019t require itself.\n\nFor example:\n\n```move\n// A struct without any abilities\nstruct NoAbilities {}\n\nstruct WantsCopy has copy {\n    f: NoAbilities, // ERROR 'NoAbilities' does not have 'copy'\n}\n```\n\nand similarly:\n\n```move\n// A struct without any abilities\nstruct NoAbilities {}\n\nstruct MyResource has key {\n    f: NoAbilities, // Error 'NoAbilities' does not have 'store'\n}\n```\n\n", "doc_id": "6ff35f43-5d4d-4473-a1aa-3c8309d2d489", "embedding": null, "doc_hash": "64b17015cae21bfe5f18d74a4d1f89dc4219fb7825795592b0005382928ccb54", "extra_info": null, "node_info": {"start": 0, "end": 1437, "_node_type": "1"}, "relationships": {"1": "169621a5-afd6-4fcf-9f20-6a261fe91a8e"}}, "__type__": "1"}, "6495f373-84de-43f8-8a48-1eb964a6faef": {"__data__": {"text": "\n\nConditional Abilities and Generic Types\n\nWhen abilities are annotated on a generic type, not all instances of that type are guaranteed to have that ability. Consider this struct declaration:\n\n```\nstruct Cup has copy, drop, store, key { item: T }\n```\n\nIt might be very helpful if `Cup` could hold any type, regardless of its abilities. The type system can *see* the type parameter, so it should be able to remove abilities from `Cup` if it *sees* a type parameter that would violate the guarantees for that ability.\n\nThis behavior might sound a bit confusing at first, but it might be more understandable if we think about collection types. We could consider the builtin type `vector` to have the following type declaration:\n\n```\nvector has copy, drop, store;\n```\n\nWe want `vector`s to work with any type. We don't want separate `vector` types for different abilities. So what are the rules we would want? Precisely the same that we would want with the field rules above.  So, it would be safe to copy a `vector` value only if the inner elements can be copied. It would be safe to ignore a `vector` value only if the inner elements can be ignored/dropped. And, it would be safe to put a `vector` in global storage only if the inner elements can be in global storage.\n\nTo have this extra expressiveness, a type might not have all the abilities it was declared with depending on the instantiation of that type; instead, the abilities a type will have depends on both its declaration **and** its type arguments. For any type, type parameters are pessimistically assumed to be used inside of the struct, so the abilities are only granted if the type parameters meet the requirements described above for fields. Taking `Cup` from above as an example:\n\n* `Cup` has the ability `copy` only if `T` has `copy`.\n* It has `drop` only if `T` has `drop`.\n* It has `store` only if `T` has `store`.\n* It has `key` only if `T` has `store`.\n\nHere are examples for this conditional system for each ability:\n\n", "doc_id": "6495f373-84de-43f8-8a48-1eb964a6faef", "embedding": null, "doc_hash": "9e5a570c7beb9aa50ffa7ba85b0145fe2672425f39b502f8cf7272081df28c79", "extra_info": null, "node_info": {"start": 0, "end": 1991, "_node_type": "1"}, "relationships": {"1": "c84e89d2-1666-413d-8ba2-01d029871434"}}, "__type__": "1"}, "e1fb0f0f-72f2-4469-9630-56b431c19109": {"__data__": {"text": "\n\nExample: conditional `copy`\n\n```\nstruct NoAbilities {}\nstruct S has copy, drop { f: bool }\nstruct Cup has copy, drop, store { item: T }\n\nfun example(c_x: Cup, c_s: Cup) {\n    // Valid, 'Cup' has 'copy' because 'u64' has 'copy'\n    let c_x2 = copy c_x;\n    // Valid, 'Cup' has 'copy' because 'S' has 'copy'\n    let c_s2 = copy c_s;\n}\n\nfun invalid(c_account: Cup, c_n: Cup) {\n    // Invalid, 'Cup' does not have 'copy'.\n    // Even though 'Cup' was declared with copy, the instance does not have 'copy'\n    // because 'signer' does not have 'copy'\n    let c_account2 = copy c_account;\n    // Invalid, 'Cup' does not have 'copy'\n    // because 'NoAbilities' does not have 'copy'\n    let c_n2 = copy c_n;\n}\n```\n\n", "doc_id": "e1fb0f0f-72f2-4469-9630-56b431c19109", "embedding": null, "doc_hash": "ff29726f02a3c08ca97081c92680ec53c0235c7c160e3d5f31000ff3b234e59d", "extra_info": null, "node_info": {"start": 0, "end": 710, "_node_type": "1"}, "relationships": {"1": "15a569d1-0086-472a-bdc1-00c7bc5ffb8a"}}, "__type__": "1"}, "d9721f30-1880-4e87-b774-e719f2f47ae1": {"__data__": {"text": "\n\nExample: conditional `drop`\n\n```\nstruct NoAbilities {}\nstruct S has copy, drop { f: bool }\nstruct Cup has copy, drop, store { item: T }\n\nfun unused() {\n    Cup { item: true }; // Valid, 'Cup' has 'drop'\n    Cup { item: S { f: false }}; // Valid, 'Cup' has 'drop'\n}\n\nfun left_in_local(c_account: Cup): u64 {\n    let c_b = Cup { item: true };\n    let c_s = Cup { item: S { f: false }};\n    // Valid return: 'c_account', 'c_b', and 'c_s' have values\n    // but 'Cup', 'Cup', and 'Cup' have 'drop'\n    0\n}\n\nfun invalid_unused() {\n    // Invalid, Cannot ignore 'Cup' because it does not have 'drop'.\n    // Even though 'Cup' was declared with 'drop', the instance does not have 'drop'\n    // because 'NoAbilities' does not have 'drop'\n    Cup { item: NoAbilities {}};\n}\n\nfun invalid_left_in_local(): u64 {\n    let n = Cup { item: NoAbilities {}};\n    // Invalid return: 'c_n' has a value\n    // and 'Cup' does not have 'drop'\n    0\n}\n```\n\n", "doc_id": "d9721f30-1880-4e87-b774-e719f2f47ae1", "embedding": null, "doc_hash": "521949a5a771340ce24782c8549af485642a9871a0bf00059f8a2e7432fb6279", "extra_info": null, "node_info": {"start": 0, "end": 936, "_node_type": "1"}, "relationships": {"1": "71993c31-065d-432f-9d2c-9217c5da13da"}}, "__type__": "1"}, "45c89050-beb0-4af6-81c4-faf8a2598825": {"__data__": {"text": "\n\nExample: conditional `store`\n\n```\nstruct Cup has copy, drop, store { item: T }\n\n// 'MyInnerResource' is declared with 'store' so all fields need 'store'\nstruct MyInnerResource has store {\n    yes: Cup, // Valid, 'Cup' has 'store'\n    // no: Cup, Invalid, 'Cup' does not have 'store'\n}\n\n// 'MyResource' is declared with 'key' so all fields need 'store'\nstruct MyResource has key {\n    yes: Cup, // Valid, 'Cup' has 'store'\n    inner: Cup, // Valid, 'Cup' has 'store'\n    // no: Cup, Invalid, 'Cup' does not have 'store'\n}\n```\n\n", "doc_id": "45c89050-beb0-4af6-81c4-faf8a2598825", "embedding": null, "doc_hash": "7b57489ff8ea4051e04e8ab79f91fdc5e5c62dadda66fe1688dd82cf520695bd", "extra_info": null, "node_info": {"start": 0, "end": 528, "_node_type": "1"}, "relationships": {"1": "c0aa0062-8c4a-4d38-b09b-8773dbb9f14a"}}, "__type__": "1"}, "087c3f1d-4d98-480f-a16c-76a5ff174ab7": {"__data__": {"text": "\n\nExample: conditional `key`\n\n```\nstruct NoAbilities {}\nstruct MyResource has key { f: T }\n\nfun valid(account: &signer) acquires MyResource {\n    let addr = signer::address_of(account);\n     // Valid, 'MyResource' has 'key'\n    let has_resource = exists>(addr);\n    if (!has_resource) {\n         // Valid, 'MyResource' has 'key'\n        move_to(account, MyResource { f: 0 })\n    };\n    // Valid, 'MyResource' has 'key'\n    let r = borrow_global_mut>(addr)\n    r.f = r.f + 1;\n}\n\nfun invalid(account: &signer) {\n   // Invalid, 'MyResource' does not have 'key'\n   let has_it = exists>(addr);\n   // Invalid, 'MyResource' does not have 'key'\n   let NoAbilities {} = move_from(addr);\n   // Invalid, 'MyResource' does not have 'key'\n   move_to(account, NoAbilities {});\n   // Invalid, 'MyResource' does not have 'key'\n   borrow_global(addr);\n}\n```\n\n", "doc_id": "087c3f1d-4d98-480f-a16c-76a5ff174ab7", "embedding": null, "doc_hash": "7cbc518d0ecfb5822df54ac0b0aa11dc7ab74d27474d1a2e5f3845258d53a865", "extra_info": null, "node_info": {"start": 0, "end": 842, "_node_type": "1"}, "relationships": {"1": "2b7ad00b-c21c-460c-913b-18a72b3b1757"}}, "__type__": "1"}, "4be38050-a07e-4c68-873d-ff7598505063": {"__data__": {"text": "\n\nAbort and Assert\n\n`return` and `abort` are two control flow constructs that end execution, one for\nthe current function and one for the entire transaction.\n\nMore information on `return` can be found in the linked section\n\n", "doc_id": "4be38050-a07e-4c68-873d-ff7598505063", "embedding": null, "doc_hash": "77b30e8e6441f7cc5c01c6531216a8e39f78f33033afeab2a3642252f515cdf4", "extra_info": null, "node_info": {"start": 0, "end": 224, "_node_type": "1"}, "relationships": {"1": "48522e48-0ac6-440f-9ce9-ada4b1cfc603"}}, "__type__": "1"}, "0dec15f5-2d53-4565-bd11-acee7319c413": {"__data__": {"text": "\n\n`abort`\n\n`abort` is an expression that takes one argument: an **abort code** of type `u64`. For example:\n\n```move\nabort 42\n```\n\nThe `abort` expression halts execution the current function and reverts all changes made to global\nstate by the current transaction. There is no mechanism for \"catching\" or otherwise handling an\n`abort`.\n\nLuckily, in Move transactions are all or nothing, meaning any changes to global storage are made all\nat once only if the transaction succeeds. Because of this transactional commitment of changes, after\nan abort there is no need to worry about backing out changes. While this approach is lacking in\nflexibility, it is incredibly simple and predictable.\n\nSimilar to `return`, `abort` is useful for exiting control flow when some\ncondition cannot be met.\n\nIn this example, the function will pop two items off of the vector, but will abort early if the\nvector does not have two items\n\n```move=\nuse std::vector;\nfun pop_twice(v: &mut vector): (T, T) {\n    if (vector::length(v) < 2) abort 42;\n\n    (vector::pop_back(v), vector::pop_back(v))\n}\n```\n\nThis is even more useful deep inside a control-flow construct. For example, this function checks\nthat all numbers in the vector are less than the specified `bound`. And aborts otherwise\n\n```move=\nuse std::vector;\nfun check_vec(v: &vector, bound: u64) {\n    let i = 0;\n    let n = vector::length(v);\n    while (i < n) {\n        let cur = *vector::borrow(v, i);\n        if (cur > bound) abort 42;\n        i = i + 1;\n    }\n}\n```\n\n", "doc_id": "0dec15f5-2d53-4565-bd11-acee7319c413", "embedding": null, "doc_hash": "50663b8fe2bbafc00ef21aee5ca75d71f09a2b8443fdfef73558c89effda8749", "extra_info": null, "node_info": {"start": 0, "end": 1505, "_node_type": "1"}, "relationships": {"1": "972e2322-4782-4eb4-a2b2-24e415edbe53"}}, "__type__": "1"}, "2f572ca5-f8ad-4a71-bfb5-6fee986fe1e9": {"__data__": {"text": "\n\n`assert`\n\n`assert` is a builtin, macro-like operation provided by the Move compiler. It takes two arguments, a\ncondition of type `bool` and a code of type `u64`\n\n```move\nassert!(condition: bool, code: u64)\n```\n\nSince the operation is a macro, it must be invoked with the `!`. This is to convey that the\narguments to `assert` are call-by-expression. In other words, `assert` is not a normal function and\ndoes not exist at the bytecode level. It is replaced inside the compiler with\n\n```move\nif (condition) () else abort code\n```\n\n`assert` is more commonly used than just `abort` by itself. The `abort` examples above can be\nrewritten using `assert`\n\n```move=\nuse std::vector;\nfun pop_twice(v: &mut vector): (T, T) {\n    assert!(vector::length(v) >= 2, 42); // Now uses 'assert'\n\n    (vector::pop_back(v), vector::pop_back(v))\n}\n```\n\nand\n\n```move=\nuse std::vector;\nfun check_vec(v: &vector, bound: u64) {\n    let i = 0;\n    let n = vector::length(v);\n    while (i < n) {\n        let cur = *vector::borrow(v, i);\n        assert!(cur <= bound, 42); // Now uses 'assert'\n        i = i + 1;\n    }\n}\n```\n\nNote that because the operation is replaced with this `if-else`, the argument for the `code` is not\nalways evaluated. For example:\n\n```move\nassert!(true, 1 / 0)\n```\n\nWill not result in an arithmetic error, it is equivalent to\n\n```move\nif (true) () else (1 / 0)\n```\n\nSo the arithmetic expression is never evaluated!\n\n", "doc_id": "2f572ca5-f8ad-4a71-bfb5-6fee986fe1e9", "embedding": null, "doc_hash": "5f0372f08f08d14047612e1f1f10a742929e29c91ba80ca77d6587b3838c076d", "extra_info": null, "node_info": {"start": 0, "end": 1416, "_node_type": "1"}, "relationships": {"1": "7bb67514-d18c-4ee8-95c3-d6241fdc23d5"}}, "__type__": "1"}, "36b07d8d-96dd-4dc9-b672-5128d1a01497": {"__data__": {"text": "\n\nAbort codes in the Move VM\n\nWhen using `abort`, it is important to understand how the `u64` code will be used by the VM.\n\nNormally, after successful execution, the Move VM produces a change-set for the changes made to\nglobal storage (added/removed resources, updates to existing resources, etc).\n\nIf an `abort` is reached, the VM will instead indicate an error. Included in that error will be two\npieces of information:\n\n- The module that produced the abort (address and name)\n- The abort code.\n\nFor example\n\n```move=\naddress 0x2 {\nmodule example {\n    public fun aborts() {\n        abort 42\n    }\n}\n}\n\nscript {\n    fun always_aborts() {\n        0x2::example::aborts()\n    }\n}\n```\n\nIf a transaction, such as the script `always_aborts` above, calls `0x2::example::aborts`, the VM\nwould produce an error that indicated the module `0x2::example` and the code `42`.\n\nThis can be useful for having multiple aborts being grouped together inside a module.\n\nIn this example, the module has two separate error codes used in multiple functions\n\n```move=\naddress 0x42 {\nmodule example {\n\n    use std::vector;\n\n    const EMPTY_VECTOR: u64 = 0;\n    const INDEX_OUT_OF_BOUNDS: u64 = 1;\n\n    // move i to j, move j to k, move k to i\n    public fun rotate_three(v: &mut vector, i: u64, j: u64, k: u64) {\n        let n = vector::length(v);\n        assert!(n > 0, EMPTY_VECTOR);\n        assert!(i < n, INDEX_OUT_OF_BOUNDS);\n        assert!(j < n, INDEX_OUT_OF_BOUNDS);\n        assert!(k < n, INDEX_OUT_OF_BOUNDS);\n\n        vector::swap(v, i, k);\n        vector::swap(v, j, k);\n    }\n\n    public fun remove_twice(v: &mut vector, i: u64, j: u64): (T, T) {\n        let n = vector::length(v);\n        assert!(n > 0, EMPTY_VECTOR);\n        assert!(i < n, INDEX_OUT_OF_BOUNDS);\n        assert!(j < n, INDEX_OUT_OF_BOUNDS);\n        assert!(i > j, INDEX_OUT_OF_BOUNDS);\n\n        (vector::remove(v, i), vector::remove(v, j))\n    }\n}\n}\n```\n\n", "doc_id": "36b07d8d-96dd-4dc9-b672-5128d1a01497", "embedding": null, "doc_hash": "70bee72c612bf8e111eb91c0b8e6114251e4cc7990fc9869dc255d36a01221e6", "extra_info": null, "node_info": {"start": 0, "end": 1915, "_node_type": "1"}, "relationships": {"1": "fc87315e-111c-49a6-aea1-d906443f0c9a"}}, "__type__": "1"}, "e17fe6f2-360c-489c-9641-3c38069e7301": {"__data__": {"text": "\n\nThe type of `abort`\n\nThe `abort i` expression can have any type! This is because both constructs break from the normal\ncontrol flow, so they never need to evaluate to the value of that type.\n\nThe following are not useful, but they will type check\n\n```move\nlet y: address = abort 0;\n```\n\nThis behavior can be helpful in situations where you have a branching instruction that produces a\nvalue on some branches, but not all. For example:\n\n```move\nlet b =\n    if (x == 0) false\n    else if (x == 1) true\n    else abort 42;\n//       ^^^^^^^^ `abort 42` has type `bool`\n```\n\n", "doc_id": "e17fe6f2-360c-489c-9641-3c38069e7301", "embedding": null, "doc_hash": "56d517acbf07484e3833db366b3dd1ab8aabeca99e5c1edaa0d14e0b500826ec", "extra_info": null, "node_info": {"start": 0, "end": 571, "_node_type": "1"}, "relationships": {"1": "4dbe88b8-5415-4ed5-9dfe-3ced5bbb3ab6"}}, "__type__": "1"}, "70fcada0-7b8a-4bdd-95ce-8447db9075e6": {"__data__": {"text": "\n\nAccounts\n\nAn account on the Aptos blockchain contains blockchain assets. These assets, for example, coins and NFTs, are by nature\nscarce and must be access-controlled. Any such asset is represented in the blockchain account as a **resource**.\nA resource is a Move language primitive that emphasizes access control and scarcity in its representation.\nHowever, a resource can also be used to represent other on-chain capabilities, identifying information, and access control.\n\nEach account on the Aptos blockchain is identified by a 32-byte account address. An account can store data, and the account stores\nthis data in resources. The initial resource is the account data itself (authentication key and sequence number).\nAdditional resources like currency or NFTs are added after creating the account. And you can employ the Aptos Name Service at www.aptosnames.com to secure .apt domains for key accounts to make them memorable and unique.\n\nDifferent from other blockchains where accounts and addresses are implicit, accounts on Aptos are explicit and need to be\ncreated before they can hold resources and modules. The account can be created explicitly or implicitly by transferring Aptos tokens (APT) there.\nSee the Creating an account section for more details. In a way, this is similar to other chains where an address needs\nto be sent funds for gas before it can send transactions.\n\nExplicit accounts allow first-class features that are not available on other networks such as:\n* Rotating authentication key. The account's authentication key can be changed to be controlled via a different private \nkey. This is similar to changing passwords in the web2 world.\n* Native multisig support. Accounts on Aptos support multi-ed25519 which allows for a multisig authentication scheme when\nconstructing the authentication key. In the future, more authentication schemes can be introduced easily.\n* More integration with the rest of ecosystem to bring in features such as profiles, domain names, etc. that can be seamlessly\nintegrated with the Aptos account.\n\nThere are two types of accounts in Aptos:\n  * *Standard account* - This is a typical account corresponding to an address with a corresponding pair of public/private keys.\n  * *Resource account* - An autonomous account without a corresponding private key used by developers to store resources or publish modules on chain.\n\n:::tip Account address example\nAccount addresses are 32-bytes. They are usually shown as 64 hex characters, with each hex character a nibble.\nSometimes the address is prefixed with a 0x. See the Your First Transaction for an example\nof how an address appears, reproduced below:\n\n```text\nAlice: 0xeeff357ea5c1a4e7bc11b2b17ff2dc2dcca69750bfef1e1ebcaccf8c8018175b\nBob: 0x19aadeca9388e009d136245b9a67423f3eee242b03142849eb4f81a4a409e59c\n```\n\nIf there are leading 0s, they may be excluded:\n```text\nDan: 0000357ea5c1a4e7bc11b2b17ff2dc2dcca69750bfef1e1ebcaccf8c8018175b \nDan: 0x0000357ea5c1a4e7bc11b2b17ff2dc2dcca69750bfef1e1ebcaccf8c8018175b\nDan: 0x357ea5c1a4e7bc11b2b17ff2dc2dcca69750bfef1e1ebcaccf8c8018175b\n```\n:::\n\n", "doc_id": "70fcada0-7b8a-4bdd-95ce-8447db9075e6", "embedding": null, "doc_hash": "e5d97d5c2f55551b9531b0b47ab28730c1b69afa42e96092651b9e14ae0f30d2", "extra_info": null, "node_info": {"start": 0, "end": 3093, "_node_type": "1"}, "relationships": {"1": "1b87fece-b1b5-4b1e-8558-98ffa1d0f476"}}, "__type__": "1"}, "279b3cd3-102d-42eb-b93e-a04c6d983d90": {"__data__": {"text": "\n\nAccount identifiers\nCurrently, Aptos supports only a single, unified identifier for an account. Accounts on Aptos are universally\nrepresented as a 32-byte hex string. A hex string shorter than 32-bytes is also valid; in those scenarios,\nthe hex string can be padded with leading zeroes, e.g., 0x1 => 0x0000000000000...01.\n\n", "doc_id": "279b3cd3-102d-42eb-b93e-a04c6d983d90", "embedding": null, "doc_hash": "3621154c1b7638bfd733ca168a052a136f79f1adbd2a839b220efeaad1a3aba9", "extra_info": null, "node_info": {"start": 0, "end": 325, "_node_type": "1"}, "relationships": {"1": "f831ea3d-9558-42b4-b53c-686901ecc8c7"}}, "__type__": "1"}, "fcbe9c2c-b5d7-44d8-b53a-01eabeff1f64": {"__data__": {"text": "\n\nCreating an account\n\nWhen a user requests to create an account, for example by using the Aptos SDK, the following cryptographic steps are executed:\n\n- Start by generating a new private key, public key pair.\n- From the user, get the preferred signature scheme for the account: If the account should use a single signature or if\nit should require multiple signatures for signing a transaction. \n- Combine the public key with the user's signature scheme to generate a 32-byte authentication key. \n- Initialize the account sequence number to 0. Both the authentication key and the sequence number are stored in the\naccount as an initial account resource. \n- Create the 32-byte account address from the initial authentication key. \n\nFrom now on, the user should use the private key for signing the transactions with this account. \n\n", "doc_id": "fcbe9c2c-b5d7-44d8-b53a-01eabeff1f64", "embedding": null, "doc_hash": "5f83483c164ca3b87a713fcfc8b7812fd7565c15f0289fbd05db67f0db923375", "extra_info": null, "node_info": {"start": 0, "end": 829, "_node_type": "1"}, "relationships": {"1": "78d90413-a3e7-4b1f-a049-bb717a56bf23"}}, "__type__": "1"}, "b0f9b828-9fba-4cc0-941e-fa8c3075e8ff": {"__data__": {"text": "\n\nAccount sequence number\n\nThe sequence number for an account indicates the number of transactions that have been submitted and committed on chain\nfrom that account. It is incremented every time a transaction sent from that account is executed or aborted and stored in\nthe blockchain.\n\nEvery transaction submitted must contain the current sequence number for the sender account. When the Aptos blockchain\nprocesses the transaction, it looks at the sequence number in the transaction and compares it with the sequence number in\nthe account (as stored on the blockchain at the current ledger version). The transaction is executed only if the sequence\nnumber in the transaction is the same as the sequence number for the sender account; and it is rejected if they do not match.\nIn this way, past transactions - which necessarily contain older sequence numbers - cannot be replayed, hence preventing replay attacks. \n\nThese transactions will be held in mempool until they are the next sequence number for that account (or until they expire).\nWhen the transaction is applied, the sequence number of the account will be incremented by 1. The account has a strictly\nincreasing sequence number.\n\n", "doc_id": "b0f9b828-9fba-4cc0-941e-fa8c3075e8ff", "embedding": null, "doc_hash": "bda43d27d3c5ee549c94cee115c3cc9aad843a7b80a625787f80aed07a45645e", "extra_info": null, "node_info": {"start": 0, "end": 1188, "_node_type": "1"}, "relationships": {"1": "16c41b01-544a-4a87-b5e0-8270585aa7d2"}}, "__type__": "1"}, "9e7d32fb-4430-4aa7-ae72-1254daf80de7": {"__data__": {"text": "\n\nAccount address\n\nDuring the account creation process, a 32-byte authentication key comes to exist first. This authentication key is\nthen returned as it is as the 32-byte account address. \n\nHowever, the authentication key may subsequently change, for example when you generate a new public-private key pair,\npublic keys to rotate the keys. But the account address will not change. Hence, **only initially** the 32-byte authentication\nkey will be the same as the 32-byte account address. After an account is created, the account address will remain unchanged\neven though the private key, public key and authentication keys may change. There is nothing called that changes the address\nof the existing account. \n\n", "doc_id": "9e7d32fb-4430-4aa7-ae72-1254daf80de7", "embedding": null, "doc_hash": "50394cbc487956b75e84874facc07ca207aba48688f632b71e68a73020d68601", "extra_info": null, "node_info": {"start": 0, "end": 711, "_node_type": "1"}, "relationships": {"1": "e9827f02-ee2a-417a-83c0-99eeec2abd1f"}}, "__type__": "1"}, "933a0c68-4100-4e27-beec-07d8458e2997": {"__data__": {"text": "\n\nSignature schemes\n\nAn account can send transactions. The Aptos blockchain supports the following signature schemes: \n\n1. The Ed25519 for single signature transactions, and\n2. The MultiEd25519, for multi-signature transactions. \n\n:::note\nThe Aptos blockchain defaults to single signature transactions.\n:::\n\n", "doc_id": "933a0c68-4100-4e27-beec-07d8458e2997", "embedding": null, "doc_hash": "cb74712d1228422871dbe2f6935a69dbbff87e9e319bc17a49b7ba9a2fc4fab0", "extra_info": null, "node_info": {"start": 0, "end": 308, "_node_type": "1"}, "relationships": {"1": "bc797cf0-0a9d-4a2a-afa2-be40ef1f34a9"}}, "__type__": "1"}, "cbd09dab-640d-45dd-9d6f-bb9a118a233f": {"__data__": {"text": "\n\nSignature scheme identifiers\n\nGenerating the authentication key for an account requires that you provide one of the below 1-byte signature scheme\nidentifiers for this account, i.e., whether the account is a single signature or a multisig account:\n\n- **1-byte single-signature scheme identifier**: `0x00`.\n- **1-byte multisig scheme identifier**: `0x01`. Make sure to also provide the value of `K` to generate the K-of-N multisig authentication key.\n\n", "doc_id": "cbd09dab-640d-45dd-9d6f-bb9a118a233f", "embedding": null, "doc_hash": "bd6b2f0ea1e241485bef6d912b049c84b3d9417076da12e86e0938aeab02c0ef", "extra_info": null, "node_info": {"start": 0, "end": 452, "_node_type": "1"}, "relationships": {"1": "5d8f268f-3d2e-4da4-a63b-2b102ab57a65"}}, "__type__": "1"}, "bba20394-f3a3-44ff-bc73-6b5663b4e763": {"__data__": {"text": "\n\nSingle-signer authentication\n\nTo generate an authentication key and the account address for a single signature account:\n\n1. **Generate a key-pair**: Generate a fresh key-pair (`privkey_A`, `pubkey_A`). The Aptos blockchain uses the PureEdDSA scheme over the Ed25519 curve, as defined in RFC 8032.\n2. **Derive a 32-byte authentication key**: Derive a 32-byte authentication key from the `pubkey_A`:\n     ```\n     auth_key = sha3-256(pubkey_A | 0x00)\n     ```\n     where `|` denotes concatenation. The `0x00` is the 1-byte single-signature scheme identifier. \n3. Use this initial authentication key as the permanent account address.\n\n", "doc_id": "bba20394-f3a3-44ff-bc73-6b5663b4e763", "embedding": null, "doc_hash": "db40494b48be3cc89e0a33ea9676b34960da8128deb2f405178b2227695e224d", "extra_info": null, "node_info": {"start": 0, "end": 634, "_node_type": "1"}, "relationships": {"1": "16c70f3f-9048-4398-bd57-080878d6b14e"}}, "__type__": "1"}, "d7203086-1578-412b-aded-7815fc5da8db": {"__data__": {"text": "\n\nMulti-signer authentication\n\nWith K-of-N multisig authentication, there are a total of N signers for the account, and at least K of those N signatures\nmust be used to authenticate a transaction.\n\nTo generate a K-of-N multisig account's authentication key and the account address:\n\n1. **Generate key-pairs**: Generate `N` ed25519 public keys `p_1`, ..., `p_n`.\n2. Decide on the value of `K`, the threshold number of signatures needed for authenticating the transaction.\n3. **Derive a 32-byte authentication key**: Compute the authentication key as described below:\n    ```\n    auth_key = sha3-256(p_1 | . . . | p_n | K | 0x01)\n    ```\n    The `0x01` is the 1-byte multisig scheme identifier.\n4. Use this initial authentication key as the permanent account address.\n\n:::tip Accounts on Aptos Testnet\nIn order to create accounts, the Aptos testnet requires the account's public key and an amount of `Coin` to\nadd to that account, resulting in the creation of a new account with those two resources.\n:::\n\n", "doc_id": "d7203086-1578-412b-aded-7815fc5da8db", "embedding": null, "doc_hash": "673a6de13a37c194ce94f79b52ea80137e3a9886cbebd3aea83d9600455a8408", "extra_info": null, "node_info": {"start": 0, "end": 1003, "_node_type": "1"}, "relationships": {"1": "99474d3e-4c2f-41da-8971-95815d7cc847"}}, "__type__": "1"}, "e4ff1d3b-3cc4-4efa-a069-6276adda50e5": {"__data__": {"text": "\n\nRotating the keys\nAn Account on Aptos has the ability to rotate keys so that potentially compromised keys cannot be used to access the accounts.\nKeys can be rotated via the account::rotate_authentication_key function.\n\nRefreshing the keys is generally regarded as good hygiene in the security field. However, this presents a challenge for\nsystem integrators who are used to using a mnemonic to represent both a private key and its associated account.\nTo simplify this for the system integrators, Aptos provides an on-chain mapping via aptos account lookup-address.\nThe on-chain data maps an effective account address as defined by the current mnemonic to the actual account address.\n\nFor more information, see `account.move`.\n\n", "doc_id": "e4ff1d3b-3cc4-4efa-a069-6276adda50e5", "embedding": null, "doc_hash": "27b4ad389374aac72c369e40b5eac797a86f12896f0c299992c09776ca4a30c8", "extra_info": null, "node_info": {"start": 0, "end": 729, "_node_type": "1"}, "relationships": {"1": "4dc290df-e91b-483e-8886-53eb1e39cdcc"}}, "__type__": "1"}, "50cd5873-0d7d-49f5-8070-c6617cef4f11": {"__data__": {"text": "\n\nAccess control with signers\n\nThe sender of a transaction is represented by a signer. When a function in a Move module takes `signer` as an argument,\nthen the Aptos Move VM translates the identity of the account that signed the transaction into a signer in a Move module entry point.\nSee the below Move example code with `signer` in the `initialize` and `withdraw` functions. When a `signer` is not specified\nin a function, for example, the below `deposit` function, then no access controls exist for this function:\n\n```rust\nmodule Test::Coin {\n  struct Coin has key { amount: u64 }\n\n  public fun initialize(account: &signer) {\n    move_to(account, Coin { amount: 1000 });\n  }\n\n  public fun withdraw(account: &signer, amount: u64): Coin acquires Coin {\n    let balance = &mut borrow_global_mut(Signer::address_of(account)).amount;\n    *balance = *balance - amount;\n    Coin { amount }\n  }\n\n  public fun deposit(account: address, coin: Coin) acquires Coin {\n      let balance = &mut borrow_global_mut(account).amount;\n      *balance = *balance + coin.amount;\n      Coin { amount: _ } = coin;\n  }\n}\n```\n\n", "doc_id": "50cd5873-0d7d-49f5-8070-c6617cef4f11", "embedding": null, "doc_hash": "f8b64353472649795acb7644580bd011e950de0298670400b0b9986713d591aa", "extra_info": null, "node_info": {"start": 0, "end": 1103, "_node_type": "1"}, "relationships": {"1": "b56fc14b-bf76-4dcb-97c8-7f68e13f6a19"}}, "__type__": "1"}, "9952510b-61c2-4822-ae61-5c2afb794e6b": {"__data__": {"text": "\n\nState of an account\n\nThe state of each account comprises both the code (Move modules) and the data (Move resources). An account may contain an\narbitrary number of Move modules and Move resources:\n\n- **Move modules**: Move modules contain code, for example, type and procedure declarations; but they do not contain data.\nA Move module encodes the rules for updating the Aptos blockchain's global state.\n- **Move resources**: Move resources contain data but no code. Every resource value has a type that is declared in a module\npublished in the Aptos blockchain's distributed database.\n\n", "doc_id": "9952510b-61c2-4822-ae61-5c2afb794e6b", "embedding": null, "doc_hash": "5ed8c943203eefefedfe83038f3b9d5d08f5dc269c91ec76612fcf64d36c5e24", "extra_info": null, "node_info": {"start": 0, "end": 587, "_node_type": "1"}, "relationships": {"1": "6abbc342-b6fd-493f-a448-ee6643ea6d46"}}, "__type__": "1"}, "fc48ae4d-74c7-40fc-9885-afd357f4ffb5": {"__data__": {"text": "\n\nPreventing replay attacks\nWhen the Aptos blockchain processes the transaction, it looks at the sequence number in the transaction and compares it\nwith the sequence number in the sender\u2019s account (as stored on the blockchain at the current ledger version).\n\nThe transaction is executed only if the sequence number in the transaction is the same as the sequence number for the\nsender account; and the transaction is rejected if those two numbers do not match. In this way, past transactions - which\nnecessarily contain older sequence numbers - cannot be replayed, hence preventing replay attacks.\n\n", "doc_id": "fc48ae4d-74c7-40fc-9885-afd357f4ffb5", "embedding": null, "doc_hash": "227a0fd567893c29b7cf19a7f87cf0c7c95d4c8164ee204bbe3d1c3689089db1", "extra_info": null, "node_info": {"start": 0, "end": 598, "_node_type": "1"}, "relationships": {"1": "6a0ad71d-74c8-4615-ab1e-c991ddf7fcd6"}}, "__type__": "1"}, "824fd1d0-9e0d-4b4d-95a2-56cffff14119": {"__data__": {"text": "\n\nResource accounts\nA resource account is a developer feature used to manage resources independent of an account managed by a user, specifically\npublishing modules and automatically signing for transactions.\n\nFor example, a developer may use a resource account to manage an account for module publishing, say managing a contract. The contract itself does not require a signer post initialization. A resource account gives you the means for the module to provide a signer to other modules and sign transactions on behalf of the module.\n\nTypically, a resource account is used for two main purposes:\n\n- Store and isolate resources; a module creates a resource account just to host specific resources.\n- Publish module as a standalone (resource) account, a building block in a decentralized design where no private keys can control the resource account. The ownership (SignerCap) can be kept in another module, such as governance.\n\nFind more details on creating and using these at using resource accounts in your app.\n\n", "doc_id": "824fd1d0-9e0d-4b4d-95a2-56cffff14119", "embedding": null, "doc_hash": "7f1c94e89292b46ace12281860df42e7ecca49f0e41b5df37b1d2bb969c0fe69", "extra_info": null, "node_info": {"start": 0, "end": 1015, "_node_type": "1"}, "relationships": {"1": "aea2a5f4-3ef7-4350-b5a6-773655c459c1"}}, "__type__": "1"}, "a452aecc-4a55-48f1-aa3f-0a14b9244d1e": {"__data__": {"text": "\n\nAddress\n\n`address` is a built-in type in Move that is used to represent locations (sometimes called accounts) in global storage. An `address` value is a 256-bit (32-byte) identifier. At a given address, two things can be stored: Modules and Resources.\n\nAlthough an `address` is a 256-bit integer under the hood, Move addresses are intentionally opaque---they cannot be created from integers, they do not support arithmetic operations, and they cannot be modified. Even though there might be interesting programs that would use such a feature (e.g., pointer arithmetic in C fills a similar niche), Move does not allow this dynamic behavior because it has been designed from the ground up to support static verification.\n\nYou can use runtime address values (values of type `address`) to access resources at that address. You *cannot* access modules at runtime via address values.\n\n", "doc_id": "a452aecc-4a55-48f1-aa3f-0a14b9244d1e", "embedding": null, "doc_hash": "683cdcd19929d7822ced1feaa969a0422a52958bd9bea2aff8064dda8f98fcaf", "extra_info": null, "node_info": {"start": 0, "end": 881, "_node_type": "1"}, "relationships": {"1": "ca498721-dbc3-4b95-92a2-57b45eb12cd2"}}, "__type__": "1"}, "927b5f40-cbdb-45ec-9783-2734eb463dba": {"__data__": {"text": "\n\nAddresses and Their Syntax\n\nAddresses come in two flavors, named or numerical. The syntax for a named address follows the\nsame rules for any named identifier in Move. The syntax of a numerical address is not restricted\nto hex-encoded values, and any valid `u256` numerical value can be used as an\naddress value, e.g., `42`, `0xCAFE`, and `2021` are all valid numerical address\nliterals.\n\nTo distinguish when an address is being used in an expression context or not, the\nsyntax when using an address differs depending on the context where it's used:\n* When an address is used as an expression the address must be prefixed by the `@` character, i.e., `@` or `@`.\n* Outside of expression contexts, the address may be written without the leading `@` character, i.e., `` or ``.\n\nIn general, you can think of `@` as an operator that takes an address from being a namespace item to being an expression item.\n\n", "doc_id": "927b5f40-cbdb-45ec-9783-2734eb463dba", "embedding": null, "doc_hash": "efbc5ecaecfa0f894f55d13055f2c17babb73b905d075b50d0e514ac3e7ed81c", "extra_info": null, "node_info": {"start": 0, "end": 904, "_node_type": "1"}, "relationships": {"1": "47ec0cf2-b9d5-461b-bea3-b6b2f9ec1f92"}}, "__type__": "1"}, "db5b05d5-67f2-433f-a45c-9860f0cbf739": {"__data__": {"text": "\n\nNamed Addresses\n\nNamed addresses are a feature that allow identifiers to be used in place of\nnumerical values in any spot where addresses are used, and not just at the\nvalue level.  Named addresses are declared and bound as top level elements\n(outside of modules and scripts) in Move Packages, or passed as arguments\nto the Move compiler.\n\nNamed addresses only exist at the source language level and will be fully\nsubstituted for their value at the bytecode level. Because of this, modules\nand module members _must_ be accessed through the module's named address\nand not through the numerical value assigned to the named address during\ncompilation, e.g., `use my_addr::foo` is _not_ equivalent to `use 0x2::foo`\neven if the Move program is compiled with `my_addr` set to `0x2`. This\ndistinction is discussed in more detail in the section on [Modules and\nScripts](./modules-and-scripts.md).\n\n", "doc_id": "db5b05d5-67f2-433f-a45c-9860f0cbf739", "embedding": null, "doc_hash": "08ea14c52fd67f38ca513701a9d4145e672b94d68f5860e023063c7b290a2f64", "extra_info": null, "node_info": {"start": 0, "end": 893, "_node_type": "1"}, "relationships": {"1": "a12e6d2d-8d38-42c9-9146-77685bd8c8eb"}}, "__type__": "1"}, "4050cd38-124c-4968-8da2-0d9b2d5d377b": {"__data__": {"text": "\n\nExamples\n\n```move\nlet a1: address = @0x1; // shorthand for 0x0000000000000000000000000000000000000000000000000000000000000001\nlet a2: address = @0x42; // shorthand for 0x0000000000000000000000000000000000000000000000000000000000000042\nlet a3: address = @0xDEADBEEF; // shorthand for 0x00000000000000000000000000000000000000000000000000000000DEADBEEF\nlet a4: address = @0x000000000000000000000000000000000000000000000000000000000000000A;\nlet a5: address = @std; // Assigns `a5` the value of the named address `std`\nlet a6: address = @66;\nlet a7: address = @0x42;\n\nmodule 66::some_module {   // Not in expression context, so no @ needed\n    use 0x1::other_module; // Not in expression context so no @ needed\n    use std::vector;       // Can use a named address as a namespace item when using other modules\n    ...\n}\n\nmodule std::other_module {  // Can use a named address as a namespace item to declare a module\n    ...\n}\n```\n\n", "doc_id": "4050cd38-124c-4968-8da2-0d9b2d5d377b", "embedding": null, "doc_hash": "8e552442a6ed1c04cfd0b99ded849211acc955abd81b006e9324471ddaf2f40c", "extra_info": null, "node_info": {"start": 0, "end": 928, "_node_type": "1"}, "relationships": {"1": "6e102e31-b24c-4557-a46e-af2087419c8d"}}, "__type__": "1"}, "3782b676-55b8-4b9e-957f-18eed6bb5846": {"__data__": {"text": "\n\nGlobal Storage Operations\n\nThe primary purpose of `address` values are to interact with the global storage operations.\n\n`address` values are used with the `exists`, `borrow_global`, `borrow_global_mut`, and `move_from` operations.\n\nThe only global storage operation that *does not* use `address` is `move_to`, which uses `signer`.\n\n", "doc_id": "3782b676-55b8-4b9e-957f-18eed6bb5846", "embedding": null, "doc_hash": "c99fc0478ce84c21b8c5ef7cbe742ded2389b2aa61b697152a96828ae8721981", "extra_info": null, "node_info": {"start": 0, "end": 334, "_node_type": "1"}, "relationships": {"1": "074dc6b8-d518-4198-862f-6700ab846e76"}}, "__type__": "1"}, "442f3e60-8ab6-42ed-8b26-5998d961189c": {"__data__": {"text": "\n\nOwnership\n\nAs with the other scalar values built-in to the language, `address` values are implicitly copyable, meaning they can be copied without an explicit instruction such as `copy`.\n\n", "doc_id": "442f3e60-8ab6-42ed-8b26-5998d961189c", "embedding": null, "doc_hash": "e703aea9f2e8ee01fe865b1f13048b33502513375f7e07d998950cefc603ee77", "extra_info": null, "node_info": {"start": 0, "end": 189, "_node_type": "1"}, "relationships": {"1": "8a87c489-d355-4fd0-9590-a87dc827b308"}}, "__type__": "1"}, "fb9de402-f21a-4d20-abc3-d82702ddd3e5": {"__data__": {"text": "---title: \"Aptos API Spec\"slug: \"aptos-api-spec\"hide_table_of_contents: truehide_title: true---import ApiExplorer from \"@site/src/components/ApiExplorer\";import Tabs from '@theme/Tabs';import TabItem from '@theme/TabItem';<Tabs groupId=\"network\">  <TabItem value=\"mainnet\" label=\"Mainnet\">    <ApiExplorer network=\"mainnet\" layout=\"stacked\" />  </TabItem>  <TabItem value=\"testnet\" label=\"Testnet\">    <ApiExplorer network=\"testnet\" layout=\"stacked\" />  </TabItem>  <TabItem value=\"devnet\" label=\"Devnet\">    <ApiExplorer network=\"devnet\" layout=\"stacked\" />  </TabItem></Tabs>", "doc_id": "fb9de402-f21a-4d20-abc3-d82702ddd3e5", "embedding": null, "doc_hash": "6b42295ab95b770d385bd8bfb38127d85f250f92955cd7b746498db871c3f60c", "extra_info": null, "node_info": {"start": 0, "end": 577, "_node_type": "1"}, "relationships": {"1": "d6730067-f0d8-48a5-8645-7c3fb76580a6"}}, "__type__": "1"}, "c16a6d07-90a5-4533-b4a2-dbb7896be4a0": {"__data__": {"text": "\n\nUse the Aptos REST Read API\n\nIf you provide blockchain services to your customers and wish to employ the Aptos API, then this guide is for you. This guide will walk you through all you need to integrate the Aptos blockchain into your platform with the Aptos API.\n\n:::tip\nAlso see the System Integrators Guide for a thorough walkthrough of Aptos integration.\n:::\n\n", "doc_id": "c16a6d07-90a5-4533-b4a2-dbb7896be4a0", "embedding": null, "doc_hash": "18bc0d94783009454c17735704579486261d249ea023c11b0ad16fbf8f355eb4", "extra_info": null, "node_info": {"start": 0, "end": 365, "_node_type": "1"}, "relationships": {"1": "982d037b-8336-499e-80ee-479990351182"}}, "__type__": "1"}, "9908ad1c-b84b-4431-8d60-a5d859f0a4e3": {"__data__": {"text": "\n\nUnderstanding rate limits\n\nAs with the Aptos Indexer, the Aptos REST API has a rate limit of 1000 requests per five minutes by IP address, whether submitting transactions or querying the API on Aptos-provided nodes. (As a node operator, you may raise those limits on your own node.) Note that this limit can change with or without prior notice.\n\n", "doc_id": "9908ad1c-b84b-4431-8d60-a5d859f0a4e3", "embedding": null, "doc_hash": "394ce923bcbe06a020297e353e4323c8f7ce3a8220624534d62358aab15a445e", "extra_info": null, "node_info": {"start": 0, "end": 348, "_node_type": "1"}, "relationships": {"1": "df8a357d-ce98-41d3-b845-626634805c64"}}, "__type__": "1"}, "fbdca8b9-8848-4cdf-a1e7-178045536364": {"__data__": {"text": "\n\nViewing current and historical state\n\nMost integrations into the Aptos blockchain benefit from a holistic and comprehensive overview of the current and historical state of the blockchain. Aptos provides historical transactions, state, and events, all the result of transaction execution.\n\n* Historical transactions specify the execution status, output, and tie to related events. Each transaction has a unique version number associated with it that dictates its global sequential ordering in the history of the blockchain ledger.\n* The state is the representation of all transaction outputs up to a specific version. In other words, a state version is the accumulation of all transactions inclusive of that transaction version.\n* As transactions execute, they may emit events. Events are hints about changes in on-chain data.\n\n:::important\nEnsure the fullnode you're communicating with is up to date. The fullnode must reach the version containing your transaction to retrieve relevant data from it. There can be latency from the fullnodes retrieving state from validator fullnodes, which in turn rely upon validator nodes as the source of truth.\n:::\n\nThe storage service on a node employs two forms of pruning that erase data from nodes: \n\n* state\n* events, transactions, and everything else\n\nWhile either of these may be disabled, storing the state versions is not particularly sustainable. \n\nEvents and transactions pruning can be disabled via setting the `enable_ledger_pruner` to `false` in `storage_config.rs`. This is default behavior in Mainnet. In the near future, Aptos will provide indexers that mitigate the need to directly query from a node.\n\nThe REST API offers querying transactions and events in these ways:\n\n* Transactions for an account\n* Transactions by version\n* Events by event handle\n\n", "doc_id": "fbdca8b9-8848-4cdf-a1e7-178045536364", "embedding": null, "doc_hash": "34a232d668c17722563638a9a1482d4f2775223f447fae72015ff3e6a802e164", "extra_info": null, "node_info": {"start": 0, "end": 1810, "_node_type": "1"}, "relationships": {"1": "c2363f73-4099-4a2d-96e8-3b0f840267fb"}}, "__type__": "1"}, "0bf87865-677d-4c2d-804c-411d9bcba782": {"__data__": {"text": "\n\nReading state with the View function\n\nView functions do not modify blockchain state. A View function and its input can be used to read potentially complex on-chain state using Move. For example, you can evaluate who has the highest bid in an auction contract. Here are related files:\n\n* `view_function.rs` for an example\n* related Move code\n* specification.\n\nThe View function operates like the Aptos Simulation API, though with no side effects and a accessible output path. The function is immutable if tagged as `#[view]`, the compiler will confirm it so and if fail otherwise. View functions can be called via the `/view` endpoint. Calls to view functions require the module and function names along with input type parameters and values.\n\nIn order to use the View functions, you need to pass `--bytecode-version 6` to the Aptos CLI when publishing the module.\n\n> Note: Calling View functions is not yet supported by the Aptos CLI.\n\nIn the TypeScript SDK, a view function request would look like this:\n```\n    const payload: Gen.ViewRequest = {\n      function: \"0x1::coin::balance\",\n      type_arguments: [\"0x1::aptos_coin::AptosCoin\"],\n      arguments: [alice.address().hex()],\n    };\n\n    const balance = await client.view(payload);\n\n    expect(balance[0]).toBe(\"100000000\");\n```\n\nThe view function returns a list of values as a vector. By default, the results are returned in JSON format; however, they can be optionally returned in Binary Canonical Serialization (BCS) encoded format.\n\n", "doc_id": "0bf87865-677d-4c2d-804c-411d9bcba782", "embedding": null, "doc_hash": "bd162067e92d17a2d41a712263342212b2442ce10d5f571ef916fc87fe9170f4", "extra_info": null, "node_info": {"start": 0, "end": 1495, "_node_type": "1"}, "relationships": {"1": "94a74655-b6bc-4ec0-93af-d85a2cfc4dd1"}}, "__type__": "1"}, "4c3cca50-b920-4a22-be2b-09a5a8a9dc3a": {"__data__": {"text": "\n\nExchanging and tracking coins\n\nAptos has a standard *Coin type* define in `coin.move`. Different types of coins can be represented in this type through the use of distinct structs that symbolize the type parameter or use generic for `Coin`. \n\nCoins are stored within an account under the resource `CoinStore`. At account creation, each user has the resource `CoinStore` or `CoinStore`, for short. Within this resource is the Aptos coin: `Coin`.\n\n", "doc_id": "4c3cca50-b920-4a22-be2b-09a5a8a9dc3a", "embedding": null, "doc_hash": "c12aa4e2b3824846adb51373046955771fb96e6ec255dd286eed72e12a9af9e2", "extra_info": null, "node_info": {"start": 0, "end": 448, "_node_type": "1"}, "relationships": {"1": "e2164619-e248-41e9-a9fa-65f78be79521"}}, "__type__": "1"}, "b6cccba3-5b59-4e2d-ba8a-80d2797e2d4a": {"__data__": {"text": "\n\nTransferring coins between users\n\nCoins can be transferred between users via the `coin::transfer` function for all coins and `aptos_account::transfer` for Aptos coins. The advantage of the latter function is that it creates the destination account if it does not exist. \n\n:::caution\nIt is important to note that if an account has not registered a `CoinStore` for a given `T`, then any transfer of type `T` to that account will fail.\n:::\n\n", "doc_id": "b6cccba3-5b59-4e2d-ba8a-80d2797e2d4a", "embedding": null, "doc_hash": "2f1980d833b398e7f7483137e85ce86afa9e066f747986233ff0fefc54a5a8eb", "extra_info": null, "node_info": {"start": 0, "end": 440, "_node_type": "1"}, "relationships": {"1": "5fdd3446-ea35-47bf-b266-689389375fed"}}, "__type__": "1"}, "806d4fce-13c1-4bca-ba65-d5a0864c443d": {"__data__": {"text": "\n\nCurrent balance for a coin\n\nThe current balance for a `Coin` where `T` is the Aptos coin is available at the account resources URL: `https://{rest_api_server}/accounts/{address}/resource/0x1::coin::CoinStore`. The balance is stored within `coin::amount`. The resource also contains the total number of deposit and withdraw events, and the `counter` value within `deposit_events` and `withdraw_events`, respectively.\n\n```\n{\n  \"type\": \"0x1::coin::CoinStore\",\n  \"data\": {\n    \"coin\": {\n      \"value\": \"3927\"\n    },\n    \"deposit_events\": {\n      \"counter\": \"1\",\n      \"guid\": {\n        \"id\": {\n          \"addr\": \"0xcb2f940705c44ba110cd3b4f6540c96f2634938bd5f2aabd6946abf12ed88457\",\n          \"creation_num\": \"2\"\n        }\n      }\n    },\n    \"withdraw_events\": {\n      \"counter\": \"1\",\n      \"guid\": {\n        \"id\": {\n          \"addr\": \"0xcb2f940705c44ba110cd3b4f6540c96f2634938bd5f2aabd6946abf12ed88457\",\n          \"creation_num\": \"3\"\n        }\n      }\n    }\n  }\n}\n```\n\n", "doc_id": "806d4fce-13c1-4bca-ba65-d5a0864c443d", "embedding": null, "doc_hash": "a1b291f2ac874cdd2c3fa9b8d0ad504d2ed6cfb68dd7fb1c8562efa82c010bad", "extra_info": null, "node_info": {"start": 0, "end": 967, "_node_type": "1"}, "relationships": {"1": "b77d12ca-f1e7-4a9e-a82e-de322ea5c482"}}, "__type__": "1"}, "4cf5c43b-1259-42a2-aa66-21e53a0fa11f": {"__data__": {"text": "\n\nQuerying transactions\n\nIn Aptos, each transaction is committed as a distinct version to the blockchain. This allows for the convenience of sharing committed transactions by their version number; to do so, query: `https://{rest_server_api}/transactions/by_version/{version}`\n\nTransactions submitted by an account can also be queried via the following URL where the `sequence_number` matches the sequence number of the transaction: `https://{rest_server_api}/account/{address}/transactions?start={sequence_number}&limit=1`\n\nA transfer transaction would appear as follows:\n\n```\n{\n  \"version\": \"13629679\",\n  \"gas_used\": \"4\",\n  \"success\": true,\n  \"vm_status\": \"Executed successfully\",\n  \"changes\": [\n    {\n      \"address\": \"0xb258b91eee04111039320a85b0c24a2dd433909e14a6b5c32ee722e0fdecfddc\",\n      \"data\": {\n        \"type\": \"0x1::coin::CoinStore\",\n        \"data\": {\n          \"coin\": {\n            \"value\": \"1000\"\n          },\n          \"deposit_events\": {\n            \"counter\": \"1\",\n            \"guid\": {\n              \"id\": {\n                \"addr\": \"0x5098df8e7969b58ab3bd2d440c6203f64c60a1fd5c08b9d4abe6ae4216246c3e\",\n                \"creaton_num\": \"2\",\n              }\n            }\n          },\n          ...\n        }\n      },\n      \"type\": \"write_resource\"\n    },\n    ...\n  ],\n  \"sender\": \"0x810026ca8291dd88b5b30a1d3ca2edd683d33d06c4a7f7c451d96f6d47bc5e8b\",\n  \"sequence_number\": \"0\",\n  \"max_gas_amount\": \"2000\",\n  \"gas_unit_price\": \"1\",\n  \"expiration_timestamp_secs\": \"1660616127\",\n  \"payload\": {\n    \"function\": \"0x1::coin::transfer\",\n    \"type_arguments\": [\n      \"0x1::aptos_coin::AptosCoin\"\n    ],\n    \"arguments\": [\n      \"0x5098df8e7969b58ab3bd2d440c6203f64c60a1fd5c08b9d4abe6ae4216246c3e\",\n      \"1000\"\n    ],\n    \"type\": \"entry_function_payload\"\n  },\n  \"events\": [\n    {\n      \"key\": \"0x0300000000000000810026ca8291dd88b5b30a1d3ca2edd683d33d06c4a7f7c451d96f6d47bc5e8b\",\n      \"guid\": {\n        \"id\": {\n          \"addr\": \"0x810026ca8291dd88b5b30a1d3ca2edd683d33d06c4a7f7c451d96f6d47bc5e8b\",\n         ", "doc_id": "4cf5c43b-1259-42a2-aa66-21e53a0fa11f", "embedding": null, "doc_hash": "b7e4be50883a7a8eb9ac4aca0512d89beec04e621916308822f7c4017c6870cb", "extra_info": null, "node_info": {"start": 0, "end": 2015, "_node_type": "1"}, "relationships": {"1": "2eca615b-bd56-41c7-9e50-67b350bd68f0", "3": "f4856a62-7150-4152-b5bb-b3b80e86f26b"}}, "__type__": "1"}, "f4856a62-7150-4152-b5bb-b3b80e86f26b": {"__data__": {"text": "         \"creation_num\": \"3\"\n          }\n        }\n      },\n      \"sequence_number\": \"0\",\n      \"type\": \"0x1::coin::WithdrawEvent\",\n      \"data\": {\n        \"amount\": \"1000\"\n      }\n    },\n    {\n      \"key\": \"0x02000000000000005098df8e7969b58ab3bd2d440c6203f64c60a1fd5c08b9d4abe6ae4216246c3e\",\n      guid\": {\n        \"id\": {\n          \"addr\": \"0x5098df8e7969b58ab3bd2d440c6203f64c60a1fd5c08b9d4abe6ae4216246c3e\",\n          \"creation_num\": \"2\"\n          }\n        }\n      },\n      \"sequence_number\": \"0\",\n      \"type\": \"0x1::coin::DepositEvent\",\n      \"data\": {\n        \"amount\": \"1000\"\n      }\n    }\n  ],\n  \"timestamp\": \"1660615531147935\",\n  \"type\": \"user_transaction\"\n}\n\n```\n\nHere is a breakdown of the information in a transaction:\n* `version` indicates the globally unique identifier for this transaction, its ordered position in all the committed transactions on the blockchain\n* `sender` is the account address of the entity that submitted the transaction\n* `gas_used` is the units paid for executing the transaction\n* `success` and `vm_status` indicate whether or not the transaction successfully executed and any reasons why it might not have\n* `changes` include the final values for any state resources that have been modified during the execution of the transaction\n* `events` contain all the events emitted during the transaction execution\n* `timetstamp` is the near real-time timestamp of the transaction's execution\n\nIf `success` is false, then `vm_status` will contain an error code or message that resulted in the transaction failing to succeed. When `success` is false, `changes` will be limited to gas deducted from the account and the sequence number incrementing. There will be no `events`.\n\nEach event in `events` is differentiated by a `key`. The `key` is derived from the `guid` in `changes`. Specifically, the `key` is a 40-byte hex string where the first eight bytes (or 16 characters) are the little endian representation of the `creation_num` in the `guid` of the `changes` event, and the remaining characters are the account address.\n\nAs events do not dictate what emitted them, it is imperative to track the path in `changes` to determine the source of an event. In particular, each `CoinStore` has both a `WithdrawEvent` and a `DepositEvent`, based upon the type of coin. In order to determine which coin type is used in a transaction, an indexer can compare the `guid::creation_num` in a `changes` event combined with the address to the `key` for events in `events`.\n\nUsing the above example, `events[1].guid` is equivalent to `changes[0].data.data.deposit_events.guid`, which is `{\"addr\": \"0x5098df8e7969b58ab3bd2d440c6203f64c60a1fd5c08b9d4abe6ae4216246c3e\", \"creation_num\": \"2\"}`.\n\n:::tip\nThe `key` field will be going away in favor of `guid`\n:::\n\n", "doc_id": "f4856a62-7150-4152-b5bb-b3b80e86f26b", "embedding": null, "doc_hash": "dcc5b7c1359bf139f8ad3fd4798bd9ed496e23a51d6959af0c00c888e98c4f65", "extra_info": null, "node_info": {"start": 2007, "end": 4785, "_node_type": "1"}, "relationships": {"1": "2eca615b-bd56-41c7-9e50-67b350bd68f0", "2": "4cf5c43b-1259-42a2-aa66-21e53a0fa11f"}}, "__type__": "1"}, "6d6922fd-5666-40e6-abdb-15ff50079e80": {"__data__": {"text": "\n\nQuerying events\n\nAptos provides clear and canonical events for all withdraw and deposit of coins. This can be used in coordination with the associated transactions to present to a user the change of their account balance over time, when that happened, and what caused it. With some amount of additional parsing, you can share metadata such as the transaction type and the other parties involved.\n\nQuery events by handle URL: `https://{rest_api_server}/accounts/{address}/events/0x1::coin::CoinStore/withdraw_events`\n\n```\n[\n  {\n    \"version\":\"13629679\",\n    \"key\": \"0x0300000000000000cb2f940705c44ba110cd3b4f6540c96f2634938bd5f2aabd6946abf12ed88457\",\n    \"guid\": {\n      \"id\": {\n        \"addr\": \"0x810026ca8291dd88b5b30a1d3ca2edd683d33d06c4a7f7c451d96f6d47bc5e8b\",\n        \"creation_num\": \"3\"\n        }\n      }\n    },\n    \"sequence_number\": \"0\",\n    \"type\": \"0x1::coin::WithdrawEvent\",\n    \"data\": {\n      \"amount\": \"1000\"\n    }\n  }\n]\n```\n\nGather more information from the transaction that generated the event by querying `https://{rest_server_api}/transactions/by_version/{version}` where `{version}` is the same value as the `{version}` in the event query.\n\n:::tip\n\nWhen tracking full movement of coins, normally events are sufficient. `0x1::aptos_coin::AptosCoin`, however, requires considering `gas_used` for each transaction sent from the given account since it represents gas in Aptos. To reduce unnecessary overhead, extracting gas fees due to transactions does not emit an event. All transactions for an account can be retrieved from this API: `https://{rest_server_api}/accounts/{address}/transactions`\n\n:::\n\n", "doc_id": "6d6922fd-5666-40e6-abdb-15ff50079e80", "embedding": null, "doc_hash": "4683eae784caaa6572f23d2ccbd267b6469907c567881dd7a7bb40e83f251289", "extra_info": null, "node_info": {"start": 0, "end": 1619, "_node_type": "1"}, "relationships": {"1": "1c11c3be-df1f-4dd3-93af-94c49aac4d9a"}}, "__type__": "1"}, "3aa7fdc2-c9bb-40b9-889b-b83be8d89823": {"__data__": {"text": "\n\nTracking coin balance changes\n\nConsider the transaction from the earlier section, but now with an arbitrary coin `0x1337::my_coin::MyCoin` and some gas parameters changed:\n```\n{\n  \"version\": \"13629679\",\n  \"gas_used\": \"20\",\n  \"success\": true,\n  \"vm_status\": \"Executed successfully\",\n  \"changes\": [\n    {\n      \"address\": \"0xb258b91eee04111039320a85b0c24a2dd433909e14a6b5c32ee722e0fdecfddc\",\n      \"data\": {\n        \"type\": \"0x1::coin::CoinStore\",\n        \"data\": {\n          \"coin\": {\n            \"value\": \"1000\"\n          },\n          \"deposit_events\": {\n            \"counter\": \"1\",\n            \"guid\": {\n              \"id\": {\n                \"addr\": \"0x5098df8e7969b58ab3bd2d440c6203f64c60a1fd5c08b9d4abe6ae4216246c3e\",\n                \"creaton_num\": \"2\",\n              }\n            }\n          },\n          ...\n        }\n      },\n      \"type\": \"write_resource\"\n    },\n    ...\n  ],\n  \"sender\": \"0x810026ca8291dd88b5b30a1d3ca2edd683d33d06c4a7f7c451d96f6d47bc5e8b\",\n  \"sequence_number\": \"0\",\n  \"max_gas_amount\": \"2000\",\n  \"gas_unit_price\": \"110\",\n  \"expiration_timestamp_secs\": \"1660616127\",\n  \"payload\": {\n    \"function\": \"0x1::coin::transfer\",\n    \"type_arguments\": [\n      \"0x1337::my_coin::MyCoin\"\n    ],\n    \"arguments\": [\n      \"0x5098df8e7969b58ab3bd2d440c6203f64c60a1fd5c08b9d4abe6ae4216246c3e\",\n      \"1000\"\n    ],\n    \"type\": \"entry_function_payload\"\n  },\n  \"events\": [\n    {\n      \"key\": \"0x0300000000000000810026ca8291dd88b5b30a1d3ca2edd683d33d06c4a7f7c451d96f6d47bc5e8b\",\n      \"guid\": {\n        \"id\": {\n          \"addr\": \"0x810026ca8291dd88b5b30a1d3ca2edd683d33d06c4a7f7c451d96f6d47bc5e8b\",\n          \"creation_num\": \"3\"\n          }\n        }\n      },\n      \"sequence_number\": \"0\",\n      \"type\": \"0x1::coin::WithdrawEvent\",\n      \"data\": {\n        \"amount\": \"1000\"\n      }\n    },\n    {\n  ", "doc_id": "3aa7fdc2-c9bb-40b9-889b-b83be8d89823", "embedding": null, "doc_hash": "ce48cadcbf499908b2918d69d15d30bb21205b4707708c7adbb3b37a8b756c9d", "extra_info": null, "node_info": {"start": 0, "end": 1804, "_node_type": "1"}, "relationships": {"1": "d8cbd086-abfa-4833-af4e-85261e474969", "3": "f85c4806-2300-401c-ab74-8550c071a440"}}, "__type__": "1"}, "f85c4806-2300-401c-ab74-8550c071a440": {"__data__": {"text": "     }\n    },\n    {\n      \"key\": \"0x02000000000000005098df8e7969b58ab3bd2d440c6203f64c60a1fd5c08b9d4abe6ae4216246c3e\",\n      guid\": {\n        \"id\": {\n          \"addr\": \"0x5098df8e7969b58ab3bd2d440c6203f64c60a1fd5c08b9d4abe6ae4216246c3e\",\n          \"creation_num\": \"2\"\n          }\n        }\n      },\n      \"sequence_number\": \"0\",\n      \"type\": \"0x1::coin::DepositEvent\",\n      \"data\": {\n        \"amount\": \"1000\"\n      }\n    }\n  ],\n  \"timestamp\": \"1660615531147935\",\n  \"type\": \"user_transaction\"\n}\n```\n\nThere are three balance changes in this transaction:\n1. A withdrawal of `1000` of `0x1337::my_coin::MyCoin` from the transaction sending account `0x810026ca8291dd88b5b30a1d3ca2edd683d33d06c4a7f7c451d96f6d47bc5e8b`\n2. A deposit of `1000` of `0x1337::my_coin::MyCoin` to receiving account `0x5098df8e7969b58ab3bd2d440c6203f64c60a1fd5c08b9d4abe6ae4216246c3e`\n3. A gas fee `2200` of `0x1::aptos_coin::AptosCoin` from the sending account `0x810026ca8291dd88b5b30a1d3ca2edd683d33d06c4a7f7c451d96f6d47bc5e8b`\n\nTo retrieve the withdrawal information:\n1. Scan the `changes` for `0x1::coin::CoinStore`.  Note the `CoinType` is a generic signifying which coin is stored in the store.  In this example, the `CoinType` is `0x1337::my_coin::MyCoin`.\n2. Retrieve the `guid` for `withdraw_events`. In this example, the `guid` contains `addr` `0x810026ca8291dd88b5b30a1d3ca2edd683d33d06c4a7f7c451d96f6d47bc5e8b` and `creation_num` `3`.\n3. Scan for events with this `guid` and extract the event associated with it.  In this example, it is the `0x1::coin::WithdrawEvent`.\n4. Note the `amount` field will be the number of `CoinType` removed from the account in the `guid`. In this example, it is `1000`.\n\nTo retrieve the deposit information, it's the same as withdrawal except:\n1. The `guid` used is under: `deposit_events`\n2. The `amount` will be a positive increase on the account's balance.\n3. The event's name will be: `0x1::coin::DepositEvent`\n\nTo retrieve the gas fee:\n1. The `gas_used` field must be multiplied times the `gas_unit_price`.  In this example, `gas_used=20` and `gas_unit_price=110` so the total gas coins withdrawn is `2200`.\n2. Gas is always: `0x1::aptos_coin::AptosCoin`\n\nTo retrieve information about the number of decimals of the coin:\n1. You can retrieve the number of decimals for a coin via its: `0x1::coin::CoinInfo`\n2. This will be located at the address of the coin type.  In this example, you would need to look up", "doc_id": "f85c4806-2300-401c-ab74-8550c071a440", "embedding": null, "doc_hash": "e9bbfa07fee0a4ee1ee80746bc0732550cae4099a5a3bf4108d796c802050d35", "extra_info": null, "node_info": {"start": 1798, "end": 4225, "_node_type": "1"}, "relationships": {"1": "d8cbd086-abfa-4833-af4e-85261e474969", "2": "3aa7fdc2-c9bb-40b9-889b-b83be8d89823", "3": "0e91573e-d513-457c-8033-8458449dc3d3"}}, "__type__": "1"}, "0e91573e-d513-457c-8033-8458449dc3d3": {"__data__": {"text": "at the address of the coin type.  In this example, you would need to look up `0x1::coin::CoinInfo` at address `0x1337`.\n\n:::tip\nIf you always use the events in this manner, you won't miss any balance changes for an account.\nBy monitoring the events, you will find all balance changes in the `0x1::coin::CoinStore`:\n1. Coin mints\n2. Coin burns\n3. Coin transfers\n4. Staking coins\n5. Withdrawing staked coins\n6. Transfers not derived from `coin::transfer`\n\n:::\n\nTo create some sample data to explore, conduct \"Your first transaction\".\n\nTo learn more about coin creation, make \"Your First Coin\".\n\n", "doc_id": "0e91573e-d513-457c-8033-8458449dc3d3", "embedding": null, "doc_hash": "7451d01f632dcbe78891fd734ffce91fa0b320f6e98a9c09a0d88705b6615da1", "extra_info": null, "node_info": {"start": 4156, "end": 4749, "_node_type": "1"}, "relationships": {"1": "d8cbd086-abfa-4833-af4e-85261e474969", "2": "f85c4806-2300-401c-ab74-8550c071a440"}}, "__type__": "1"}, "b706254b-b3c3-4341-8d0e-104a73d6b198": {"__data__": {"text": "\n\nUsage\n\nTo use the `AptosClient` class, you will need to create an instance of `AptosClient` and call the desired API method. The `AptosClient` object will handle the HTTP requests and responses and return the result to your application.\n\n", "doc_id": "b706254b-b3c3-4341-8d0e-104a73d6b198", "embedding": null, "doc_hash": "ceaafe9ba80c64dcf0757d6207c1e7eaf3a92c14dde0bc9ba3852ad03d405e9c", "extra_info": null, "node_info": {"start": 0, "end": 240, "_node_type": "1"}, "relationships": {"1": "143da180-8f56-4001-873c-aa822b6df721"}}, "__type__": "1"}, "adb3d872-89d7-41be-92b4-b1b9539378b9": {"__data__": {"text": "\n\nConfiguration\n\nBefore using the `AptosClient` class, you will need to configure it with the necessary parameters. These parameters may include the network endpoint URL, custom configuration, and any other required settings. You can configure the `AptosClient` class by passing in the necessary parameters when you initialize the client object.\n\n", "doc_id": "adb3d872-89d7-41be-92b4-b1b9539378b9", "embedding": null, "doc_hash": "a9601fa0de591988b34ad4d9bd28774d2651d9e282fa76e4617a849f1a14eab4", "extra_info": null, "node_info": {"start": 0, "end": 347, "_node_type": "1"}, "relationships": {"1": "cd7a6bdf-b758-4eb2-ab2d-bc2e75d27bb1"}}, "__type__": "1"}, "e497892f-1099-4896-a258-43a835eba53f": {"__data__": {"text": "\n\nInitialization\n\nHere is an example of how to initialize an `AptosClient`:\n\n```ts\nimport { AptosClient } from \"aptos\";\n\nconst client = new AptosClient(\"https://fullnode.testnet.aptoslabs.com\");\n```\n\n", "doc_id": "e497892f-1099-4896-a258-43a835eba53f", "embedding": null, "doc_hash": "2829030f37bd71987b0a541ec9294f2c0835bd508c610628cef59bef4a0e8246", "extra_info": null, "node_info": {"start": 0, "end": 200, "_node_type": "1"}, "relationships": {"1": "f3043cae-38f6-4ca5-9ee4-04bff38b0f59"}}, "__type__": "1"}, "52bd3a08-a49c-4932-90d6-82c955b31bdb": {"__data__": {"text": "\n\nMaking API fetch calls\n\nTo make an API call, you will need to call the appropriate method on the `AptosClient` object. The method name and parameters will depend on the specific API you are using. Here is an example:\n\n```ts\nconst accountResources = await client.getAccountResources(\"0x123\");\n```\n\nIn this example, we are using the `getAccountResources()` method to retrieve the resources of an account with the address `0x123`.\n\n", "doc_id": "52bd3a08-a49c-4932-90d6-82c955b31bdb", "embedding": null, "doc_hash": "60bd3b26397c2aa4c6c143b8c93c929c894933c535fb9a2b10e51b5027795b12", "extra_info": null, "node_info": {"start": 0, "end": 431, "_node_type": "1"}, "relationships": {"1": "4c7cbde9-3a96-48f0-b793-24ad309aae6d"}}, "__type__": "1"}, "f929d05c-e837-4800-972e-22df56efaec6": {"__data__": {"text": "\n\nSubmit transaction to chain\n\nTo submit a transaction to the blockchain, you will need to build a transaction payload to be submitted. Here is an example:\n\n```ts\nconst alice = new AptosAccount();\n\nconst payload: Types.EntryFunctionPayload = {\n  function: \"0x123::todolist::create_task\",\n  type_arguments: [],\n  arguments: [\"read aptos.dev\"],\n};\n\nconst rawTxn = await client.generateTransaction(alice.address(), payload);\nconst bcsTxn = AptosClient.generateBCSTransaction(alice, rawTxn);\nconst transactionRes = await client.submitSignedBCSTransaction(bcsTxn);\n```\n\nTransaction payload contents:  \n`function` \u2013 This must be a fully qualified function name and composed of `module address`, `module name` and `function name` separated by `::`.\n`type_arguments` \u2013 This is for the case a Move function expects a generic type argument.\n`arguments` \u2013 The arguments the function expects.\n\n:::tip\nYou can use the `AptosClient` class directly or the Provider class (preferred).\n:::\n\n", "doc_id": "f929d05c-e837-4800-972e-22df56efaec6", "embedding": null, "doc_hash": "1cab07b3f84ab07b2705abbe85d4b3c575f451f35b4b1f0ece7c49f889b8849f", "extra_info": null, "node_info": {"start": 0, "end": 974, "_node_type": "1"}, "relationships": {"1": "e778b77b-1d64-409d-92c4-e12eab16249e"}}, "__type__": "1"}, "d04faab0-4766-42fb-bbaa-4831489305a3": {"__data__": {"text": "\n\nAptos Coin\n\nCoin provides a standard, typesafe framework for simple, fungible tokens or coins. \n\n:::tip \nCoin is stored in `0x1::coin`.\n:::\n\n", "doc_id": "d04faab0-4766-42fb-bbaa-4831489305a3", "embedding": null, "doc_hash": "a44721e696bbab6406b5cf60cf22d416b1fa3c9a3a2a83cb18d8c808bfecf9a5", "extra_info": null, "node_info": {"start": 0, "end": 143, "_node_type": "1"}, "relationships": {"1": "cb8e1227-91f5-42d8-be1e-eb5206bf63e6"}}, "__type__": "1"}, "7576d806-0a40-4f2e-a9e0-584c991d563c": {"__data__": {"text": "\n\nStructures\n\n", "doc_id": "7576d806-0a40-4f2e-a9e0-584c991d563c", "embedding": null, "doc_hash": "319522891bbfdc842c97b54c270a00f8b811882da60b2e5e700ce744243553f7", "extra_info": null, "node_info": {"start": 0, "end": 14, "_node_type": "1"}, "relationships": {"1": "0db51218-efd5-4721-a94c-80012873040e"}}, "__type__": "1"}, "1af32867-a0ed-4695-b3a0-283ca8bf68b1": {"__data__": {"text": "\n\nReusability\n\nA coin is defined in Move as:\n\n```rust\nstruct Coin has store {\n    /// Amount of coin this address has.\n    value: u64,\n}\n```\n\nA Coin uses the `CoinType` to support re-usability of the Coin framework for distinct Coins. For example, `Coin` and `Coin` are two distinct coins.\n\n", "doc_id": "1af32867-a0ed-4695-b3a0-283ca8bf68b1", "embedding": null, "doc_hash": "ec74d6eb322f29327f777912e7ddf7d82576084221d644c8b804a454a95e0cd1", "extra_info": null, "node_info": {"start": 0, "end": 291, "_node_type": "1"}, "relationships": {"1": "915214af-22ba-4b5a-93cf-b22c6fff174a"}}, "__type__": "1"}, "6b332c13-3788-4953-ba16-6c28a361de69": {"__data__": {"text": "\n\nGlobal store\n\nCoin also supports a resource for storing coins in global store:\n\n```rust\nstruct CoinStore has key {\n    coin: Coin,\n    frozen: bool,\n    deposit_events: EventHandle,\n    withdraw_events: EventHandle,\n}\n```\n\nCoin information or metadata is stored in global store under the coin creators account:\n\n```rust\nstruct CoinInfo has key {\n    name: string::String,\n    /// Symbol of the coin, usually a shorter version of the name.\n    /// For example, Singapore Dollar is SGD.\n    symbol: string::String,\n    /// Number of decimals used to get its user representation.\n    /// For example, if `decimals` equals `2`, a balance of `505` coins should\n    /// be displayed to a user as `5.05` (`505 / 10 ** 2`).\n    decimals: u8,\n    /// Amount of this coin type in existence.\n    supply: Option,\n}\n```\n\n", "doc_id": "6b332c13-3788-4953-ba16-6c28a361de69", "embedding": null, "doc_hash": "213667a41b223ade52750b46ec6018e9559072c050f35dfe9dd090ffce4e5b1f", "extra_info": null, "node_info": {"start": 0, "end": 810, "_node_type": "1"}, "relationships": {"1": "60ff1628-1648-45d4-be36-305c633525bc"}}, "__type__": "1"}, "ab626cdb-b650-4d20-9d49-d943c64cdbfe": {"__data__": {"text": "\n\nPrimitives\n\nCoin provides the primitives for users creating and managing the coin and the users who use it.\n\n", "doc_id": "ab626cdb-b650-4d20-9d49-d943c64cdbfe", "embedding": null, "doc_hash": "f55c5a0182fd02d203be62bc98e33709b21989a1385ca06da114071edd31a9cb", "extra_info": null, "node_info": {"start": 0, "end": 111, "_node_type": "1"}, "relationships": {"1": "aa89e85d-8568-4848-a27e-cfd9332e8540"}}, "__type__": "1"}, "13eab271-b08d-46d3-8643-c6b06e9fbd5d": {"__data__": {"text": "\n\nCreators\n\nCoin creators and managers can:\n\n- Initialize a coin and set its metadata and supply monitoring.\n- Minting and burning Coin value.\n- Burning coins from a `CoinStore`.\n- Freezing mobility into and out of a `CoinStore`.\n\n", "doc_id": "13eab271-b08d-46d3-8643-c6b06e9fbd5d", "embedding": null, "doc_hash": "478458e59c872b973f8bcbe725dc2f6664d184e83dbec331b57d73b8a6cb1873", "extra_info": null, "node_info": {"start": 0, "end": 231, "_node_type": "1"}, "relationships": {"1": "c45899ae-fcf9-47f0-805b-14e22ce238da"}}, "__type__": "1"}, "1f34fd93-ef76-4618-8f44-5d8e74b289ee": {"__data__": {"text": "\n\nUsers\n\nCoin users can:\n\n- Merging two Coin structs of the same type.\n- Extracting value from a Coin struct into a new Coin struct.\n- Ability to deposit and withdraw from a `CoinStore` and emit events as a result.\n- Allows for users to register a `CoinStore` in their account to handle coin.\n\n", "doc_id": "1f34fd93-ef76-4618-8f44-5d8e74b289ee", "embedding": null, "doc_hash": "75fe8e0b1c4b7b037a9556632aa4616060d711aca5f5f8b79f7b2dc07c9e43c0", "extra_info": null, "node_info": {"start": 0, "end": 294, "_node_type": "1"}, "relationships": {"1": "9d24696c-f5c0-4ee3-af7d-d939184c52d5"}}, "__type__": "1"}, "7635db93-f5ef-43d4-8e6f-68a734da3f0b": {"__data__": {"text": "\n\nCoin module key struct\n\nThe following tables describe fields at the struct level. For the definitive list, see the Aptos Framework containing `coin`.\n\n", "doc_id": "7635db93-f5ef-43d4-8e6f-68a734da3f0b", "embedding": null, "doc_hash": "b9699f9b6ddd4578ca78de19fb1693afee838822bf7f1227c68d8807dbe99980", "extra_info": null, "node_info": {"start": 0, "end": 153, "_node_type": "1"}, "relationships": {"1": "791c4164-2c00-4a8b-b551-29f35937a60b"}}, "__type__": "1"}, "8574282d-bd2d-4ac2-b54b-52cc3c8d1ce3": {"__data__": {"text": "\n\n`Coin`\n\n| Field | Type | Description |\n| --- | --- | --- |\n| `value` | u64 | Value of the token, eg: 1000000000 |\n\n", "doc_id": "8574282d-bd2d-4ac2-b54b-52cc3c8d1ce3", "embedding": null, "doc_hash": "75ce03cd4ff1c9ff54a6dd3e82c89f52d0de22670f5b8c0aeb0ec03327a37aa1", "extra_info": null, "node_info": {"start": 0, "end": 117, "_node_type": "1"}, "relationships": {"1": "8b4151a6-a91b-446e-85f8-a1bdfe0fda5e"}}, "__type__": "1"}, "2b2d754e-aa60-4871-a8c9-56657d530e1c": {"__data__": {"text": "\n\n`CoinInfo`\n\n| Field | Type | Description |\n| --- | --- | --- |\n| `name` | String | Name of the token, eg: Aptos Coin |\n| `symbol` | String | Symbol for the token, eg: APT |\n| `decimals` | u8 | Determines how the value of coin is represented; for example APT\u2019s decimal is 8, so a value of 100000000 is represented by 1 APT |\n| `supply` | Option&lt;OptionalAggregator&gt; | option::some(optional_aggregator::new(MAX_U128, parallelizable)) |\n\n", "doc_id": "2b2d754e-aa60-4871-a8c9-56657d530e1c", "embedding": null, "doc_hash": "630e91af04e2ce1fe02f3c4c71936761e575511c070efbb42960ec9b64d385b2", "extra_info": null, "node_info": {"start": 0, "end": 442, "_node_type": "1"}, "relationships": {"1": "46ff51c5-57d1-44e1-a847-ac2896405454"}}, "__type__": "1"}, "1d9c8842-ea6e-47c4-9062-fcfe7da23aa9": {"__data__": {"text": "\n\nCreating a new CoinType\n\nA coin creator can publish to an on-chain account a new module that defines a struct to represent a new `CoinType`. The coin creator will then call `coin:initialize` from that account to register this as a valid coin, and in return receive back structs that enable calling the functions to burn and mint coins and freeze `CoinStore`s. These will need to be stored in global storage by the creator to manage the use of the coin.\n\n```rust\npublic fun initialize(\n    account: &signer,\n    name: string::String,\n    symbol: string::String,\n    decimals: u8,\n    monitor_supply: bool,\n): (BurnCapability, FreezeCapability, MintCapability) {\n```\n\nThe creator has the opportunity to define a name, symbol, decimals, and whether or not the total supply for the coin is monitored. The following applies:\n\n- The first three of the above (`name`, `symbol`, `decimals`)  are purely metadata and have no impact for on-chain applications. Some applications may use decimal to equate a single Coin from fractional coin. \n- Monitoring supply (`monitor_supply`) helps track total coins in supply. However, due to the way the parallel executor works, turning on this option will prevent any parallel execution of mint and burn. If the coin will be regularly minted or burned, consider disabling `monitor_supply`.\n\n", "doc_id": "1d9c8842-ea6e-47c4-9062-fcfe7da23aa9", "embedding": null, "doc_hash": "262e67a076cf899411520c6ed4ef765f1fa836ca924f581f975eed6a332961aa", "extra_info": null, "node_info": {"start": 0, "end": 1323, "_node_type": "1"}, "relationships": {"1": "ec15ed41-bd22-44d3-a967-1dd29e6ee0e5"}}, "__type__": "1"}, "a0577b15-3d3f-437b-88d6-1d9104e222da": {"__data__": {"text": "\n\nMinting Coins\n\nIf the creator or manager would like to mint coins, they must retrieve a reference to their `MintCapability`, which was produced in the `initialize`, and call:\n\n```rust\npublic fun mint(\n    amount: u64,\n    _cap: &MintCapability,\n): Coin acquires CoinInfo {\n```\n\nThis will produce a new Coin struct containing a value as dictated by the `amount`. If supply is tracked, then it will also be adjusted.\n\n", "doc_id": "a0577b15-3d3f-437b-88d6-1d9104e222da", "embedding": null, "doc_hash": "bf429c8f6d5065afd0b20cb23acaacd4b59f92a75c7288a8f6fd24d9b2b678c3", "extra_info": null, "node_info": {"start": 0, "end": 418, "_node_type": "1"}, "relationships": {"1": "ce69f219-7c3e-4016-9a66-b59697f8bf6a"}}, "__type__": "1"}, "052aa8ac-ce78-40f9-9db8-b6676a58931a": {"__data__": {"text": "\n\nBurning Coins\n\nIf the creator or manager would like to burn coins, they must retrieve a reference to their `BurnCapability`, which was produced in the `initialize`, and call:\n\n```rust\npublic fun burn(\n    coin: Coin,\n    _cap: &BurnCapability,\n) acquires CoinInfo {\n```\n\nThe creator or manager can also burn coins from a `CoinStore`:\n\n```rust\npublic fun burn_from(\n    account_addr: address,\n    amount: u64,\n    burn_cap: &BurnCapability,\n) acquires CoinInfo, CoinStore {\n```\n\n:::tip burn vs burn_from\nThe function `burn` eliminates the total value stored in the coin, while `burn_from` only eliminates a given amount of value from a `CoinStore`. If supply is tracked, then it will also be adjusted.\n\nBurning coins from an account does not emit a `WithdrawEvent` as the `withdraw` function does.\n:::\n\n\n\n", "doc_id": "052aa8ac-ce78-40f9-9db8-b6676a58931a", "embedding": null, "doc_hash": "93320bead3baa43132965b68ebf3adaeaad9c2c017226f848570e339085db29d", "extra_info": null, "node_info": {"start": 0, "end": 806, "_node_type": "1"}, "relationships": {"1": "6a5f5c7f-cfe5-46eb-9fed-eb66533e3e9b"}}, "__type__": "1"}, "1451b517-b8c7-42b9-9b9a-82262e95c71f": {"__data__": {"text": "\n\nFreezing Accounts\n\nIf the creator or manager would like to freeze a `CoinStore` on a specific account, they must retrieve a reference to their `FreezeCapability`, which was produced in `initialize`, and call:\n\n```rust\npublic entry fun freeze_coin_store(\n    account_addr: address,\n    _freeze_cap: &FreezeCapability,\n) acquires CoinStore {\n```\n\n", "doc_id": "1451b517-b8c7-42b9-9b9a-82262e95c71f", "embedding": null, "doc_hash": "0f6b28d1c034646c3443061df2b446d81d0f2f8864e06c674f6d8ef5ac06745c", "extra_info": null, "node_info": {"start": 0, "end": 347, "_node_type": "1"}, "relationships": {"1": "c0161f82-09b2-4c03-9d14-72e032de3e8b"}}, "__type__": "1"}, "5f050d11-e4e6-4335-951f-ed1617f0fd0f": {"__data__": {"text": "\n\nMerging Coins\n\nTwo coins of the same type can be merged into a single Coin struct that represents the accumulated value of the two coins independently by calling:\n\n```rust\npublic fun merge(\n    dst_coin: &mut Coin,\n    source_coin: Coin,\n) {\n```\n\n", "doc_id": "5f050d11-e4e6-4335-951f-ed1617f0fd0f", "embedding": null, "doc_hash": "67b37cea8c129ddb008ea9d2637a0ca2afbc60536aceff16d3231f06a64d9818", "extra_info": null, "node_info": {"start": 0, "end": 249, "_node_type": "1"}, "relationships": {"1": "1d64d596-a2a1-4e17-abca-4cccf2c335d3"}}, "__type__": "1"}, "a7d56ef0-fad3-4168-a247-e7852e5c1ecd": {"__data__": {"text": "\n\nExtracting Coins\n\nA Coin can have value deducted to  create another Coin by calling:\n\n```rust\npublic fun extract(\n\t\tcoin: &mut Coin,\n\t\tamount: u64,\n): Coin {\n```\n\n", "doc_id": "a7d56ef0-fad3-4168-a247-e7852e5c1ecd", "embedding": null, "doc_hash": "418282e13610c764594727df745c4240e30db60f02c11302bf708f955bfebf3f", "extra_info": null, "node_info": {"start": 0, "end": 165, "_node_type": "1"}, "relationships": {"1": "e49cd0fb-6d4a-4540-9c1f-36f38636079f"}}, "__type__": "1"}, "94c6cffb-53fa-41eb-bf44-3df541e56edf": {"__data__": {"text": "\n\nWithdrawing Coins from CoinStore\n\nA holder of a `CoinStore` can extract a Coin of a specified value by calling:\n\n```rust\npublic fun withdraw(\n    account: &signer,\n    amount: u64,\n): Coin acquires CoinStore {\n```\n\n:::tip\nThis function will emit a `WithdrawEvent`.\n:::\n\n", "doc_id": "94c6cffb-53fa-41eb-bf44-3df541e56edf", "embedding": null, "doc_hash": "de5e9c885c54cd5c1b7aadc76ad067dfffe0189476bb51edd628306f26077d6d", "extra_info": null, "node_info": {"start": 0, "end": 272, "_node_type": "1"}, "relationships": {"1": "a937eb7e-c6ef-46b5-98d0-7067879a157c"}}, "__type__": "1"}, "076eb649-1213-4614-ad9c-87bb8a69f825": {"__data__": {"text": "\n\nDepositing Coins into CoinStore\n\nAny entity can deposit coins into an account\u2019s `CoinStore` by calling:\n\n```rust\npublic fun deposit(\n\t\taccount_addr: address,\n\t\tcoin: Coin,\n) acquires CoinStore {\n```\n:::tip\nThis function will emit a `DepositEvent`.\n:::\n\n", "doc_id": "076eb649-1213-4614-ad9c-87bb8a69f825", "embedding": null, "doc_hash": "c0126c3a2b5bb2473517cad1c7785815e2bed1f0e99d50c55b28073b914faf96", "extra_info": null, "node_info": {"start": 0, "end": 255, "_node_type": "1"}, "relationships": {"1": "8894a1d6-7e1f-437d-9f89-d42648400a64"}}, "__type__": "1"}, "cbb96750-30cb-4d1e-8c66-94c024c37306": {"__data__": {"text": "\n\nTransferring Coins\n\nA holder of a `CoinStore` can directly transfer coins from their account to another account\u2019s `CoinStore` by calling:\n\n```rust\npublic entry fun transfer(\n    from: &signer,\n    to: address,\n    amount: u64,\n) acquires CoinStore {\n```\n\n:::tip\nThis will emit both a `WithdrawEvent` and `DepositEvent` on the respective `CoinStore`s.\n:::\n\n", "doc_id": "cbb96750-30cb-4d1e-8c66-94c024c37306", "embedding": null, "doc_hash": "0b8ae324b3901b5a67a3f91a3d49f70b58ad5bb0ff6940ade118917daf92a23b", "extra_info": null, "node_info": {"start": 0, "end": 358, "_node_type": "1"}, "relationships": {"1": "25fe72cd-2b18-4c74-9af8-e44db8c3c117"}}, "__type__": "1"}, "23a62729-e019-4516-8bf5-8bb24bcfb6ba": {"__data__": {"text": "\n\nEvents\n\n```rust\nstruct DepositEvent has drop, store {\n    amount: u64,\n}\n```\n\n```rust\nstruct WithdrawEvent has drop, store {\n    amount: u64,\n}\n```\n\n", "doc_id": "23a62729-e019-4516-8bf5-8bb24bcfb6ba", "embedding": null, "doc_hash": "e47bf09680d9f07679b3342f2acbaec5d4fc6d8881f60762ea94b5ce7c60ca3a", "extra_info": null, "node_info": {"start": 0, "end": 151, "_node_type": "1"}, "relationships": {"1": "f973fbf2-9044-4e55-ae3f-1b6b49d1f7f8"}}, "__type__": "1"}, "33c84929-7654-408d-aa21-cc1c553e07e2": {"__data__": {"text": "\n\nIntegrate with Aptos Names Service\nThe Aptos Name Service provides a React UI package that offers developers a customizable button and modal to enable users to search for and mint Aptos names directly from their website.\n\n", "doc_id": "33c84929-7654-408d-aa21-cc1c553e07e2", "embedding": null, "doc_hash": "0e27fd64781be3fc0a3c8608332f731542a277b63bba6d5b8079aecab56eee0d", "extra_info": null, "node_info": {"start": 0, "end": 224, "_node_type": "1"}, "relationships": {"1": "1f57575c-cca8-466c-93de-8c6c24409656"}}, "__type__": "1"}, "c6090a20-e9a4-4e43-a505-8ab2a5d8636a": {"__data__": {"text": "\n\nPrerequisites\n- React project\n- Supporting dependencies installed in the root directory of your React project with npm or yarn:  \n    - `npm install @emotion/styled @emotion/react`\n    - `yarn add @emotion/styled @emotion/react react-copy-to-clipboard`\n\n", "doc_id": "c6090a20-e9a4-4e43-a505-8ab2a5d8636a", "embedding": null, "doc_hash": "2d2f83f192ee470d996a6b24ec158dc33140a18e8898491fb3cdf5310976b3a9", "extra_info": null, "node_info": {"start": 0, "end": 256, "_node_type": "1"}, "relationships": {"1": "48176a9f-be9f-4c2e-bda2-c62f3cc8fb76"}}, "__type__": "1"}, "2a241c10-6ec5-402f-ba9e-6ee1ae445fa1": {"__data__": {"text": "\n\nUse Aptos Names Service Connector\n1. Open a terminal session and navigate to the root directory of your React project.\n1. Install the `aptos-names-connector` package using npm or yarn:  \n    - `npm install \"@aptos-labs/aptos-names-connector\"`\n    - `yarn add \"@aptos-labs/aptos-names-connector\"`\n1. Once you have installed the package, you can import the `AptosNamesConnector` component and use it in your React application (by default in `./src/App.js`):\n    ```\n    import { AptosNamesConnector } from \"@aptos-labs/aptos-names-connector\";\n\n    function MyComponent() {\n      const handleSignTransaction = async () => {\n        // Handle signing of transaction\n      };\n\n      return (\n        <AptosNamesConnector\n          onSignTransaction={handleSignTransaction}\n          isWalletConnected={true}\n          network=\"mainnet\"\n          buttonLabel=\"Claim\"\n        />\n      );\n    }\n    ```\n 1. To see your changes, start a development server using npm or yarn. The following commands will open the React application in your default web browser (typically to `localhost:3000`):\n    - `npm start`\n    - `yarn start`\n\n", "doc_id": "2a241c10-6ec5-402f-ba9e-6ee1ae445fa1", "embedding": null, "doc_hash": "d289cae36f75265bbc886887c317ab971f3492e895bbe76882d5af69a61b7de5", "extra_info": null, "node_info": {"start": 0, "end": 1122, "_node_type": "1"}, "relationships": {"1": "2ad8bd47-dfb8-4743-b9d9-48e7cbb50dec"}}, "__type__": "1"}, "fc2a32e5-7430-497c-b0a1-25a86a8e2ca0": {"__data__": {"text": "\n\nConfigure `AptosNamesConnector` properties\nThe `AptosNamesConnector` component accepts the following props:\n\n- `onSignTransaction`: A required callback function that is called when the user clicks the \"Mint\" button in the modal. This function should handle the signing of the transaction.\n- `isWalletConnected`: A boolean value that indicates whether the user's wallet is connected.\n- `network`: A string value that specifies whether the component should connect to the mainnet or testnet.\n- `buttonLabel`: A string value that specifies the text to display on the button.\n\n", "doc_id": "fc2a32e5-7430-497c-b0a1-25a86a8e2ca0", "embedding": null, "doc_hash": "6582cccc9ca1d78f851e94521a13022bd9aa4d3a0a3bc4f672119c1c9df76763", "extra_info": null, "node_info": {"start": 0, "end": 575, "_node_type": "1"}, "relationships": {"1": "334efaae-9363-4e9e-914d-d4626e4c6ebb"}}, "__type__": "1"}, "82e352f1-1933-4d47-802b-6bf7a0cdc952": {"__data__": {"text": "\n\nCustomize button label and appearance\nThe button label can be customized by passing a string value to the buttonLabel prop.\nThe appearance of the button in the `AptosNamesConnector` component can be customized to fit in your website. The button has the CSS class name of `ans_connector_button`:\n\n```\n.ans-connector-button {\n  background-color: #000000;\n  border: none;\n  border-radius: 4px;\n  color: #ffffff;\n  cursor: pointer;\n  font-size: 16px;\n  font-weight: bold;\n  padding: 12px 16px;\n}\n```\nTo use `ans_connector_button` in your React application, add `import \"@aptos-labs/aptos-names-connector/dist/index.css\";` to the top of your App.js file and reference it with ``\n\n", "doc_id": "82e352f1-1933-4d47-802b-6bf7a0cdc952", "embedding": null, "doc_hash": "e65f706298c8fd72cd0425666c8ffb82da1dd94d465f9d6a75e1a2cac603683b", "extra_info": null, "node_info": {"start": 0, "end": 677, "_node_type": "1"}, "relationships": {"1": "6d991e6f-9ec8-4e21-8746-5fb68288b04c"}}, "__type__": "1"}, "72bb9198-4203-43be-b525-b85a39784ba8": {"__data__": {"text": "\n\nSupported networks\nThe `AptosNamesConnector` component supports both mainnet and testnet. To connect to the mainnet, set the network prop to \"mainnet\". To connect to the testnet, set the network prop to \"testnet\".\n\n", "doc_id": "72bb9198-4203-43be-b525-b85a39784ba8", "embedding": null, "doc_hash": "75e9ecf63573f497096c725f0529e7faf42e94cc396894cc3b6133ded4bfbd1f", "extra_info": null, "node_info": {"start": 0, "end": 217, "_node_type": "1"}, "relationships": {"1": "edbaf2b5-1201-4996-b9de-3522e2567006"}}, "__type__": "1"}, "1024b064-b8d1-4207-a813-2ad702ac6f5c": {"__data__": {"text": "\n\nExample\nThe following example shows how to use the `AptosNamesConnector` component in a React application:\n\n\n\n- Add a \u2018claim name\u2019 button to any page in your application. This allows your users to directly create an Aptos name, giving them a human-readable .apt name for their Aptos wallet address. You can customize the look of the button to suit your application. Here is an example on the profile page of an NFT marketplace.\n\n!Claim name\n\n- When the button is clicked, the Aptos Names modal will show up, and the user can search for a name and mint it directly in your application.\n\n!Show Aptos Name Service modal\n\n- Once the user has minted their name, you can replace their Aptos wallet address by querying from Aptos fullnodes. Now your users have a human-readable .apt name.\n\n!Claim another name\n\n", "doc_id": "1024b064-b8d1-4207-a813-2ad702ac6f5c", "embedding": null, "doc_hash": "9f896b2f73db9a6d4f74d1be1740de2917fa857753bc9564b20f7b2794ad38af", "extra_info": null, "node_info": {"start": 0, "end": 806, "_node_type": "1"}, "relationships": {"1": "87b743ce-cf39-43b2-a7e8-940b5a027300"}}, "__type__": "1"}, "2b0965a3-d815-4710-87d1-03735f1c8c5f": {"__data__": {"text": "\n\nObject\nThe Object model allows Move to represent a complex type as a set of resources stored within a single address and offers a rich capability model that allows for fine-grained resource control and ownership management.\n\nIn the object model, an NFT or token can place common token data within a Token resource, object data within an ObjectCore resource, and then specialize into additional resources as necessary. For example, a Player object could define a player within a game and be an NFT at the same time. The ObjectCore itself stores both the address of the current owner and the appropriate data for creating event streams.\n\n", "doc_id": "2b0965a3-d815-4710-87d1-03735f1c8c5f", "embedding": null, "doc_hash": "a24e0ebd50dd426c114fdd32e4156522cfa44d92f6053dc4ffec7f582487d193", "extra_info": null, "node_info": {"start": 0, "end": 638, "_node_type": "1"}, "relationships": {"1": "2e04bd15-4cdb-46b0-90a5-9d13ee32fe73"}}, "__type__": "1"}, "3445b1a1-75a7-4de5-973d-e8b589db8476": {"__data__": {"text": "\n\nComparison with the account resources model\nThe existing Aptos data model emphasizes the use of the store ability within Move. Store allows for a struct to exist within any struct that is stored on-chain. As a result, data can live anywhere within any struct and at any address. While this provides great flexibility it has many limitations:\n\n1. Data is not be guaranteed to be accessible, for example, it can be placed within a user-defined resource that may violate expectations for that data, e.g., a creator attempting to burn an NFT put into a user-defined store. This can be confusing to both the users and creators of this data.\n2. Data of differing types can be stored to a single data structure (e.g., map, vector) via `any`, but for complex data types `any` incurs additional costs within Move as each access requires deserialization. It also can lead to confusion if API developers expect that a specific any field changes the type it represents.\n3. While resource accounts allow for greater autonomy of data, they do so inefficiently for objects and do not take advantage of resource groups.\n4. Data cannot be recursively composable, because Move currently prohibits recursive data structures. Furthermore, experience suggests that true recursive data structures can lead to security vulnerabilities.\n5. Existing data cannot be easily referenced from entry functions, for example, supporting string validation requires many lines of code. Attempting to make tables directly becomes impractical as keys can be composed of many types, thus specializing to support within entry functions becomes complex.\n6. Events cannot be emitted from data but from an account that may not be associated with the data.\n7. Transferring logic is limited to the APIs provided in the respective modules and generally requires loading resources on both the sender and receiver adding unnecessary cost overheads.\n\n:::tip\nObject is a core primitive in Aptos Move and created via the object module at 0x1::object\n:::\n\n", "doc_id": "3445b1a1-75a7-4de5-973d-e8b589db8476", "embedding": null, "doc_hash": "b8f53083bb72872d509d8534da0b183ed4733f7fb119312371ab07c437638883", "extra_info": null, "node_info": {"start": 0, "end": 2007, "_node_type": "1"}, "relationships": {"1": "f0054e68-0b29-4f1b-960b-7a6a40e683b4"}}, "__type__": "1"}, "c40312e3-5840-429c-b6de-18b90730de14": {"__data__": {"text": "\n\nStructure\nAn object is stored in the ObjectGroup resource group, which enables other resources within the object to be co-located for data locality and data cost savings. It's important to note that not all resources within an object need to be co-located within the ObjectGroup, and it's up to the developer of an object to determine their data layout.\n\n", "doc_id": "c40312e3-5840-429c-b6de-18b90730de14", "embedding": null, "doc_hash": "9f9d04a8f683cc1acf12a4eca7840dc246e4f694317582baeea89561f5ffbb41", "extra_info": null, "node_info": {"start": 0, "end": 357, "_node_type": "1"}, "relationships": {"1": "2b7b65f6-e522-4990-a42f-85ce5351cb27"}}, "__type__": "1"}, "ba93bc63-b4ba-42b6-a426-f3b3c3745d41": {"__data__": {"text": "\n\nObject resource group\n\nObject is a container for resources that are stored within a single address. These resources usually represent related data often accessed together and should be stored within a single address for data locality and cost savings.\nWhen created, an object has a resource group, ObjectGroup, by default:\n```rust\n#[resource_group(scope = global)]\nstruct ObjectGroup { }\n```\n\nEach object also has the core ObjectCore resource with fundamental properties:\n```rust\n#[resource_group_member(group = aptos_framework::object::ObjectGroup)]\nstruct ObjectCore has key {\n    /// Used by guid to guarantee globally unique objects and create event streams\n    guid_creation_num: u64,\n    /// The address (object or account) that owns this object\n    owner: address,\n    /// Object transferring is a common operation, this allows for disabling and enabling\n    /// transfers. Bypassing the use of a the TransferRef.\n    allow_ungated_transfer: bool,\n    /// Emitted events upon transferring of ownership.\n    transfer_events: event::EventHandle,\n}\n```\n\nAfter creating an object, creators can extend with additional resources. For example, an exchange can create an object for each of its liquidity pools and add a resource to track the pool's liquidity.\n```rust\n#[resource_group_member(group = aptos_framework::object::ObjectGroup)]\nstruct LiquidityPool has key {\n    token_a: Object,\n    token_b: Object,\n    reserves_a: u128,\n    reserves_b: u128\n}\n```\n\nIn the above code, `token_a` and `token_b` are references to other objects. Specifically, `Object` is a reference to an object stored at a given address that contains `T` resource. In this example, they're fungible assets (similar to coins). This will be covered in more detail in the fungible asset standard.\nLiquidityPool resource is part of the ObjectGroup resource group. This means that the LiquidityPool resource is stored in the same storage slot as the ObjectCore resource. This is more storage and gas efficient for reading and writing data.\n\nLiquidityPool resource can be added during construction of the object:\n```rust\nuse aptos_framework::object::Object;\nuse aptos_framework::fungible_asset::FungibleAsset;\n\npub fun create_liquidity_pool(\n    token_a: Object,\n    token_b: Object,\n    reserves_a: u128,\n    reserves_b: u128\n): Object {\n    let exchange_signer = &get_exchange_signer();\n    let liquidity_pool_constructor_ref = &object::create_object_from_account(exchange_signer);\n    let liquidity_pool_signer = &object::generate_signer(liquidity_pool_constructor_ref);\n    move_to(liquidity_pool_signer, LiquidityPool {\n        token_a: token_a,\n        token_b: token_b,\n        reserves_a: reserves_a,\n        reserves_b: reserves_b\n    });\n}\n```\n\nMore resources can also be added post-creation if the exchange module stores the ExtendRef. This is covered in more detail in the Capabilities section.\n\n", "doc_id": "ba93bc63-b4ba-42b6-a426-f3b3c3745d41", "embedding": null, "doc_hash": "f33094be3a27cc4c6e6df7f605f9e4c3288e8deff80d0762cbe1f8a9b7e736b8", "extra_info": null, "node_info": {"start": 0, "end": 2881, "_node_type": "1"}, "relationships": {"1": "480c4c50-01de-47c1-8976-b5499d5727ee"}}, "__type__": "1"}, "33b024b0-0ce9-432e-81b1-29602b820587": {"__data__": {"text": "\n\nObject Lifecycle\nObjects can be created via several different functions provided in the object module:\n```rust\n/// Create a new named object and return the ConstructorRef. Named objects can be queried globally\n/// by knowing the user generated seed used to create them. Named objects cannot be deleted.\npublic fun create_named_object(creator: &signer, seed: vector): ConstructorRef;\n\n/// Create a new object from a GUID generated by an account.\npublic fun create_object_from_account(creator: &signer): ConstructorRef;\n\n/// Create a new object from a GUID generated by an object.\npublic fun create_object_from_object(creator: &signer): ConstructorRef;\n```\n\nThese functions generate object addresses in different schemas:\n1. `create_named_object` generates an address from the caller-provided seed and creator address. This is a deterministic address that can be queried globally. The formula used is sha3(creator address + seed + 0xFD).\n2. `create_object_from_account` generates an address from the caller's address and a GUID generated by the caller's account. The formula used is sha3(creator address + account guid + 0xFD).\n3. `create_object_from_object` generates an address from the caller's address and a GUID generated by the caller's object. The formula used is sha3(creator address + object guid + 0xFD).\nThe domain separation ensures there's no conflict among objects created via these different functions.\n\nNote that since named objects have deterministic addresses, they cannot be deleted. This is to prevent a malicious user from creating an object with the same seed as a named object and deleting it.\n\n", "doc_id": "33b024b0-0ce9-432e-81b1-29602b820587", "embedding": null, "doc_hash": "8407a4d0a9e09f69102f9b4934f5fddbdb2f47940d5c6e943d7d8c56f202ffa5", "extra_info": null, "node_info": {"start": 0, "end": 1618, "_node_type": "1"}, "relationships": {"1": "f74b6d1d-2f4b-4dbe-926a-df80adc0c30d"}}, "__type__": "1"}, "15cf9b35-256d-48a8-acef-6b1f4cd1683e": {"__data__": {"text": "\n\nObject capabilities (refs)\nThe object creation functions all return a transient ConstructorRef that cannot be stored. ConstructorRef allows adding resources to an object (see example from the previous section).\nConstructorRef can also be used to generate the other capabilities (or \"refs\") that are used to manage the object:\n```rust\n/// Generates the DeleteRef, which can be used to remove Object from global storage.\npublic fun generate_delete_ref(ref: &ConstructorRef): DeleteRef;\n\n/// Generates the ExtendRef, which can be used to add new events and resources to the object.\npublic fun generate_extend_ref(ref: &ConstructorRef): ExtendRef;\n\n/// Generates the TransferRef, which can be used to manage object transfers.\npublic fun generate_transfer_ref(ref: &ConstructorRef): TransferRef;\n\n/// Create a signer for the ConstructorRef\npublic fun generate_signer(ref: &ConstructorRef): signer;\n```\nThese refs can be stored and used to manage the object.\n\nDeleteRef can be used to delete the object:\n```rust\nuse aptos_framework::object::{Object, DeleteRef};\n\nstruct DeleteRefStore has key {\n    delete_ref: DeleteRef,\n}\n\npublic fun delete_liquidity_pool(liquidity_pool: Object) {\n    let liquidity_pool_address = object::object_address(liquidity_pool);\n    // Remove all resources added to the liquidity pool object.\n    let LiquidityPool {\n        token_a: _,\n        token_b: _,\n        reserves_a: _,\n        reserves_b: _\n    } = move_from(liquidity_pool_address);\n    let DeleteRefStore { delete_ref } = move_from(liquidity_pool_address);\n    // Delete the object itself.\n    object::delete_object(delete_ref);\n}\n```\n\nExtendRef can be used to add resources to the object like the LiquidityPool resource in the previous section:\nTransferRef can be used to disable owner-transfer when `ungated_transfer_allowed = true` or to forcefully transfer the object without the owner being involved:\n```rust\nuse aptos_framework::object::{Object, TransferRef};\n\nstruct TransferRefStore has key {\n    transfer_ref: TransferRef,\n}\n\npublic fun disable_owner_transfer(liquidity_pool: Object) {\n    let liquidity_pool_address = object::object_address(liquidity_pool);\n    let transfer_ref = &borrow_global_mut(liquidity_pool_address).transfer_ref;\n    object::disable_ungated_transfer(transfer_ref);\n}\n\npublic fun creator_transfer(liquidity_pool: Object, new_owner: address) {\n    let liquidity_pool_address = object::object_address(liquidity_pool);\n    let transfer_ref = &borrow_global_mut(liquidity_pool_address).transfer_ref;\n    object::transfer_with_ref(object::generate_linear_transfer_ref(transfer_ref), new_owner);\n}\n```\n\nOnce the resources have been created on an object, they can be modified by the creator modules without the refs/ Example:\n```rust\npublic entry fun modify_reserves(liquidity_pool: Object) {\n    let liquidity_pool = &mut borrow_global_mut(liquidity_pool);\n    liquidity_pool.reserves_a = liquidity_pool.reserves_a + 1000;\n}\n```\n\n", "doc_id": "15cf9b35-256d-48a8-acef-6b1f4cd1683e", "embedding": null, "doc_hash": "bfbd7eadd211b3464e1d026af651facd2962eb47e754999aa1a8cfdc4b8afa98", "extra_info": null, "node_info": {"start": 0, "end": 2945, "_node_type": "1"}, "relationships": {"1": "c0d31a33-b34e-41a2-8c2b-dc2ceb8588d3"}}, "__type__": "1"}, "98c1df8d-e712-4769-8ce8-d5b9de0325ce": {"__data__": {"text": "\n\nObject reference\nA reference to the object can be generated any time and stored in a resource as part of an object or account:\n```rust\n/// Returns the address of within a ConstructorRef\npublic fun object_from_constructor_ref(ref: &ConstructorRef): Object;\n```\n`Object` is a reference around the object address with the guarantee that `T` exists when the reference is created. For example, we can create an `Object` for a liquidity pool object.\nCreating an object reference with a non-existent `T` will fail at runtime.\nNote that after references are created and stored, they do not guarantee that the resource `T` or the entire object itself has not been deleted.\n\n", "doc_id": "98c1df8d-e712-4769-8ce8-d5b9de0325ce", "embedding": null, "doc_hash": "6c0b19122d8583e4ec64765c99aea1ab698f686edf14a33fe2f00cae67f66f42", "extra_info": null, "node_info": {"start": 0, "end": 667, "_node_type": "1"}, "relationships": {"1": "660fef90-a5d6-47e1-8c2d-e6d626375228"}}, "__type__": "1"}, "7a07104c-80b3-48c6-bf3b-16686c2d1bcd": {"__data__": {"text": "\n\nEvents\nObjects come with transfer_events by default, which are emitted when the object is transferred. Transfer events are stored in the ObjectCore resource.\n\nAdditionally, similar to account resources, events can be added in an object' resources. The object module offers the following functions to create event handles for objects:\n```rust\n/// Create a guid for the object, typically used for events\npublic fun create_guid(object: &signer): guid::GUID;\n\n/// Generate a new event handle.\npublic fun new_event_handle(object: &signer): event::EventHandle;\n```\n\nThese event handles can be stored in the custom resources added to the object. Example:\n```rust\nstruct LiquidityPoolEventStore has key {\n    create_events: event::EventHandle,\n}\n\nstruct CreateLiquidtyPoolEvent {\n    token_a: address,\n    token_b: address,\n    reserves_a: u128,\n    reserves_b: u128,\n}\n\npublic entry fun create_liquidity_pool_with_events() {\n    let exchange_signer = &get_exchange_signer();\n    let liquidity_pool_constructor_ref = &object::create_object_from_account(exchange_signer);\n    let liquidity_pool_signer = &object::generate_signer(liquidity_pool_constructor_ref);\n    let event_handle = object::new_event_handle(liquidity_pool_signer);\n    event::emit(event_handle, CreateLiquidtyPoolEvent {\n        token_a: token_a,\n        token_b: token_b,\n        reserves_a: reserves_a,\n        reserves_b: reserves_b,\n    });\n    let liquidity_pool = move_to(liquidity_pool_signer, LiquidityPool {\n        token_a: token_a,\n        token_b: token_b,\n        reserves_a: reserves_a,\n        reserves_b: reserves_b,\n        create_events: event_handle,\n    });\n}\n```\n\n", "doc_id": "7a07104c-80b3-48c6-bf3b-16686c2d1bcd", "embedding": null, "doc_hash": "979240d9177b65c32b42fd13601e7d3ef45b24aae4051ca6bdbc22003b33f5b5", "extra_info": null, "node_info": {"start": 0, "end": 1647, "_node_type": "1"}, "relationships": {"1": "e9507ee7-c46c-47c7-9bc8-dd1f6990dd02"}}, "__type__": "1"}, "715267d3-7b86-4204-b0a1-63eb6c544727": {"__data__": {"text": "\n\nFollow Aptos Writing Style\n\nWhen making site updates, Aptos recommends adhering to this writing and formatting style guide for consistency with the rest of Aptos.dev, as well as accessibility directly in GitHub.com and source code editors.\n\n", "doc_id": "715267d3-7b86-4204-b0a1-63eb6c544727", "embedding": null, "doc_hash": "ece8d6ad85c10e0eb0fc02b26e31c19edeec52e4db9c175b70f435a064ad1eb9", "extra_info": null, "node_info": {"start": 0, "end": 243, "_node_type": "1"}, "relationships": {"1": "3befa9a3-4162-49db-831f-bb041d738bf4"}}, "__type__": "1"}, "57a0a0d0-71a9-4632-bb1c-451b00081118": {"__data__": {"text": "\n\nHold contributions to high standards\n\nAll doc updates should be thorough and tested. This includes external contributions from the community.\n\nSo when reviewing changes, do not merge them in unless all feedback has been addressed.\n\n", "doc_id": "57a0a0d0-71a9-4632-bb1c-451b00081118", "embedding": null, "doc_hash": "6bf756cb1d0939e0179f8580748bfc1686bea59aa5e9f18730d19b05da930b4e", "extra_info": null, "node_info": {"start": 0, "end": 234, "_node_type": "1"}, "relationships": {"1": "89d6e540-9406-485b-b05d-5e4e70f73459"}}, "__type__": "1"}, "d92bfbdb-c38e-4607-8327-d83160e686e0": {"__data__": {"text": "\n\nSingle source in Markdown\n\nThere should be one external upstream source of truth for Aptos development. And we aim for that to be Aptos.dev. Edit away in Markdown format using our instructions for making site updates.\n\nNote, you can easily convert Google Docs to Markdown format using the Docs to Markdown add-on.\n\n", "doc_id": "d92bfbdb-c38e-4607-8327-d83160e686e0", "embedding": null, "doc_hash": "d317bd8c4ab5e0b3c6911d32257271540db7ef61f6be75d6fa027a07edafca90", "extra_info": null, "node_info": {"start": 0, "end": 317, "_node_type": "1"}, "relationships": {"1": "0e9b29f6-0cee-4649-8cf6-228a644c6dbb"}}, "__type__": "1"}, "67074dff-6e94-49ea-8925-fe62c5024871": {"__data__": {"text": "\n\nLink from product to docs\n\nWhether you work on an external product or an internal tool, your work likely has an interface. From it, you should link to your user docs, along with bug queues and contact information.\n\n", "doc_id": "67074dff-6e94-49ea-8925-fe62c5024871", "embedding": null, "doc_hash": "65b63a25336ac46d22249b0371fbd0bab7374b83edead202fdb28a75b82147b3", "extra_info": null, "node_info": {"start": 0, "end": 217, "_node_type": "1"}, "relationships": {"1": "fac6f5af-4365-44ae-b719-3e5ae6e78f2e"}}, "__type__": "1"}, "753661b2-0bcb-476f-8b92-a7d1f0e9b914": {"__data__": {"text": "\n\nPeer review docs\n\nYour users should not be the first people to use your documentation. Have your peers review your docs just as they review your code. Walk through the flow. If they cannot, your users can't either.\n\n", "doc_id": "753661b2-0bcb-476f-8b92-a7d1f0e9b914", "embedding": null, "doc_hash": "880fde48531931cf6e7b9b5d6f9c32ca2fbdd45c196219d2196b322e6b203cea", "extra_info": null, "node_info": {"start": 0, "end": 218, "_node_type": "1"}, "relationships": {"1": "cc02173f-aa3f-4345-a477-dd38f0185ab2"}}, "__type__": "1"}, "6c950f35-9098-470a-97db-0bc7dc87ed24": {"__data__": {"text": "\n\nForm links properly\n\nWhen linking to absolute files (code, reference) not on Aptos.dev, always use the fully qualified domain. Else, use relative links. Always include the file extension (`.md` for Markdown).\n\nCorrect:\n\n```markdown\nHow Base Gas Works\n```\n\nIncorrect:\n\n```markdown\nHow Base Gas Works\n```\n\nThe second example will work in Aptos.dev but not when navigating the docs via GitHub.com or in source viewer/editor. For links to files in the same directory, include the leading `./` like so:\n\n```markdown\nproofs\n```\n\n", "doc_id": "6c950f35-9098-470a-97db-0bc7dc87ed24", "embedding": null, "doc_hash": "fae164d78a276ee91083b9773df5fc9babee1e868389f1e78ca39509192876f3", "extra_info": null, "node_info": {"start": 0, "end": 525, "_node_type": "1"}, "relationships": {"1": "e8f2ce55-2328-4ab0-9130-ff7b98722d45"}}, "__type__": "1"}, "2ac21c51-a88e-4ab6-8a0e-cc4b5bb95a33": {"__data__": {"text": "\n\nUse permanent links to code\n\nWhen linking to code files in GitHub, use a permanent link to the relative line or set of lines.\n\n", "doc_id": "2ac21c51-a88e-4ab6-8a0e-cc4b5bb95a33", "embedding": null, "doc_hash": "7d80e745b1c54a7975035756676273d211830a27919998953cc01f6f0bddbcf4", "extra_info": null, "node_info": {"start": 0, "end": 129, "_node_type": "1"}, "relationships": {"1": "8c040cb0-0710-48a2-97ae-a417bd913d89"}}, "__type__": "1"}, "61d30b08-831a-45c9-bda4-0071ab9b9a43": {"__data__": {"text": "\n\nLink check your pages\n\nIt never hurts to run a link check against your pages or entire site. Here are some freely available and useful tools for **public** site checking:\n\n  * https://validator.w3.org/checklink\n  * https://www.drlinkcheck.com/\n\nSet recursion depth accordingly to delve into sub-links.\n\n", "doc_id": "61d30b08-831a-45c9-bda4-0071ab9b9a43", "embedding": null, "doc_hash": "6964b37304cd6ff087779ea06c702c25ee186dc7bf6957b73fcd15cb41f19766", "extra_info": null, "node_info": {"start": 0, "end": 305, "_node_type": "1"}, "relationships": {"1": "a0165a7c-cf46-4f17-a0e1-12fa39b78104"}}, "__type__": "1"}, "97d16bb8-1c3d-44d5-87fb-1bc582e1000f": {"__data__": {"text": "\n\nAdd images to `static` directory\n\nPlace all images in the `developer-docs-site/static/img` directory and use relative links to include them. See the image paths in Set up a React app for examples.\n\n", "doc_id": "97d16bb8-1c3d-44d5-87fb-1bc582e1000f", "embedding": null, "doc_hash": "ae84348911ca88a8f25a7e031137834e49d4e08a32e8ab0c84edb2eb29bb783e", "extra_info": null, "node_info": {"start": 0, "end": 200, "_node_type": "1"}, "relationships": {"1": "9ddbb61e-a411-4a8f-8781-8b2ff7884fe6"}}, "__type__": "1"}, "97d9ad51-0302-4585-80aa-88e51ad85a7d": {"__data__": {"text": "\n\nRedirect moved pages\n\nAvoid losing users by adding redirects for moved and renamed Aptos.dev pages in:\nhttps://github.com/aptos-labs/aptos-core/blob/main/developer-docs-site/docusaurus.config.js\n\n", "doc_id": "97d9ad51-0302-4585-80aa-88e51ad85a7d", "embedding": null, "doc_hash": "ccd229d6240a7462d1858b4eaedd3c4d5d655200b5ceaa2c662406b87d85ae05", "extra_info": null, "node_info": {"start": 0, "end": 198, "_node_type": "1"}, "relationships": {"1": "7327a7e5-c961-4af7-b8a4-4fcfbf6ad829"}}, "__type__": "1"}, "a2d22b37-4a1f-4560-8d77-916c352d054b": {"__data__": {"text": "\n\nName files succinctly\n\nUse short, detailed names with no spaces:\n* hyphenate rather than underscore\n\n* be descriptive\n* use noun (topic) first, with verb optional: ex. accounts.md, site-updates.md\n\n", "doc_id": "a2d22b37-4a1f-4560-8d77-916c352d054b", "embedding": null, "doc_hash": "6dffff358845a83df9a07fe6fae7661b830b87afcf27c1a700b3237761f2af2c", "extra_info": null, "node_info": {"start": 0, "end": 200, "_node_type": "1"}, "relationships": {"1": "cbbfc76b-afc7-4aeb-bd00-f31c4ee55c19"}}, "__type__": "1"}, "66f8b6db-168d-4910-b7b0-520ff0e29691": {"__data__": {"text": "\n\nUse active tense\n\nAvoid passive tense and gerunds when possible:\n\n- Good - Use Aptos API\n- Not-so-good - Using Aptos API\n- Needs improvement - Aptos API Use\n\n", "doc_id": "66f8b6db-168d-4910-b7b0-520ff0e29691", "embedding": null, "doc_hash": "da8b4959d00bd0baf2393fe7673fc691544143b8167187d085a5d5199a5e38d0", "extra_info": null, "node_info": {"start": 0, "end": 160, "_node_type": "1"}, "relationships": {"1": "2b6a8d17-e2b3-46d9-882d-6785df726956"}}, "__type__": "1"}, "1ed62257-1252-454e-9b08-e38240061494": {"__data__": {"text": "\n\nEmploy direct style and tone\n\n- Address the user directly. Use \"you\" instead of \"user\" or \"they\".\n- Avoid writing the way you speak, i.e., avoid using contractions, jokes or using colloquial content.\n    \n    \ud83d\udca1 **Example**:\n    \n    - **Preferred**: \u201cit will\u201d or \u201cwe will\u201d or \u201cit would\u201d.\n    - **Avoid**: \u201cit\u2019ll\u201d or \u201cwe\u2019ll\u201d or \u201cit\u2019d\u201d.\n    \n- Use the active voice.\n    \n    \ud83d\udca1 **Example**:\n    \n    - **Preferred**: Fork and clone the Aptos repo.\n    - **Avoid**: The Aptos repo should be cloned.\n    - **Preferred**: Copy the\u00a0`Config path`\u00a0information from the terminal.\n    - **Avoid**: The `Config path` information should be copied from the terminal.\n    \n- Avoid hypothetical future \"would\". Instead, write in present tense.\n    \n    \ud83d\udca1 **Example**:\n    \n    - **Preferred**: \"The compiler sends\".\n    - **Avoid**: \u201cThe compiler would then send\u201d.\n\n", "doc_id": "1ed62257-1252-454e-9b08-e38240061494", "embedding": null, "doc_hash": "bb383499a1a396f4de63c415194da35a5f844a91af5f6a50787ba20e88b5de5b", "extra_info": null, "node_info": {"start": 0, "end": 852, "_node_type": "1"}, "relationships": {"1": "c2836ab8-82ba-42df-a0e3-1f96e1835ab1"}}, "__type__": "1"}, "d6e9306b-a779-454b-a57f-71f59b0e914c": {"__data__": {"text": "\n\nEnsure readability\n\n- Break up walls of text (long passages of text) into smaller chunks for easier reading.\n- Use lists. When you use lists, keep each item as distinct as you can from another item.\n- Provide context. Your readers can be beginner developers or experts in specialized fields. They may not know what you are talking about without any context.\n- Use shorter sentences (26 words or less) They are easier to understand (and translate).\n- Define acronyms and abbreviations at the first usage in every topic.\n- Keep in mind our documentation is written in US English, but the audience will include people for whom English is not their primary language.\n- Avoid culturally specific references, humor, names.\n- Write dates and times in unambiguous and clear ways using the international standard. Write \"27 November 2020\" instead of either \"11/27/2020\" or \"27/11/2020\" or \"November 27, 2020\".\n- Avoid negative sentence construction.\n    \n    \ud83d\udca1 **Example**:\n    \n    - **Preferred**: It is common.\n    - **Avoid**: It is not uncommon.\n    \n    Yes there is a subtle difference between the two, but for technical writing this simplification works better.\n    \n- Avoid directional language (below, left) in procedural documentation, **unless** you are pointing to an item that is immediately next to it.\n- Be consistent in capitalization and punctuation.\n- Avoid the `&` character in the descriptive text. Use the English word \"and\".\n\n", "doc_id": "d6e9306b-a779-454b-a57f-71f59b0e914c", "embedding": null, "doc_hash": "2e87103d3699e3777e583e097ab243c46cf53b9fcab6c8fea6086366260ba8fe", "extra_info": null, "node_info": {"start": 0, "end": 1442, "_node_type": "1"}, "relationships": {"1": "8b0f27cc-d560-43c2-b10b-0d96526e2775"}}, "__type__": "1"}, "85cf6a96-c68f-487b-a5f0-93527898bcf5": {"__data__": {"text": "\n\nAvoid foreshadowing\n\n- Do not refer to future features or products.\n- Avoid making excessive or unsupported claims about future enhancements.\n\n", "doc_id": "85cf6a96-c68f-487b-a5f0-93527898bcf5", "embedding": null, "doc_hash": "7a42fe55c28ceea7125a05c63e65abe7ef26fe7adf0efe1fa79065a4975c25cf", "extra_info": null, "node_info": {"start": 0, "end": 145, "_node_type": "1"}, "relationships": {"1": "e33be43f-fdd9-42b5-995e-69d8b96d1eb3"}}, "__type__": "1"}, "4b64d12a-2ae9-423f-b5a7-81528d83bc0f": {"__data__": {"text": "\n\nUse proper casing\n\nUse title case for page titles and sentence case for section headers. Ex:\n\n- Page title - Integrate Aptos with Your Platform\n- Section title - Choose a network\n\nOf course, capitalize proper nouns, such as \u201cAptos\u201d in \u201cAccounts on Aptos\u201d\n\n", "doc_id": "4b64d12a-2ae9-423f-b5a7-81528d83bc0f", "embedding": null, "doc_hash": "07744089c874796b966552070833b35dc3f1e1b5e32a2d022ee6bd4001c03fe8", "extra_info": null, "node_info": {"start": 0, "end": 258, "_node_type": "1"}, "relationships": {"1": "c3295986-18be-4111-ada4-6bb2ad802981"}}, "__type__": "1"}, "1c0e5835-7a7d-415d-9673-43a782c2acee": {"__data__": {"text": "\n\nWrite clear titles and headings\n\n- Document titles and section headings should:\n    - Explicitly state the purpose of the section.\n    - Be a call to action, or intention.\n\nThis approach makes it easier for the reader to get her specific development task done.\n\n\ud83d\udca1 **Examples**\n\n- **Preferred**: Running a fullnode (section heading)\n- **Avoid**: FullNode running fundamentals (title is not purpose-driven)\n- **Preferred**: Creating your first Move module\n- **Avoid**: Move module\n\n**Document titles (h1)**\n\n- Use title case. For example: \"Running a Model\"\n\nA document title is the main title of a document page. A document has only one document title.\n\n\ud83d\udca1 **Example**: \"Writing Style Guide\" at the beginning of this page. The document title also appears at the top level in the navigation bar, so it must be short, preferably four to five words or less.\n\n\n**Section headings within a document (h2, h3, h4, h5)**\n\n- Use sentence case. **For example**: \"Verify initial synchronization\"\n\nA section heading is the title for an individual section within a document page. \n\n\ud83d\udca1 **Example**: \"Titles and headings\" at the top of this section. A document page can have multiple sections, and hence multiple section headings.\n\n- Use a heading hierarchy. Do not skip levels of the heading hierarchy. **For example**, put h3 only under h2.\n- To change the visual formatting of a heading, use CSS instead of using a heading level that does not fit the hierarchy.\n- Do not keep blank headings or headings with no associated content.\n- Avoid using question mark in document titles and section headings.\n    \n    \ud83d\udca1 **Example**:\n    \n    - **Preferred**: How it works\n    - **Avoid**: How it works?\n    \n- Avoid using emphasis or italics in document titles or section headings.\n- Avoid joining words using a slash.\n    \n    \ud83d\udca1 **Example**:\n    \n    - **Preferred**: Execute on your macOS or Linux system\n    - **Avoid**: Execute on your macOS/Linux system\n\n", "doc_id": "1c0e5835-7a7d-415d-9673-43a782c2acee", "embedding": null, "doc_hash": "551968bfb0532a8dc7dfaa38e2db371a15c3f1de83a9fadd6a1484ee409b1464", "extra_info": null, "node_info": {"start": 0, "end": 1937, "_node_type": "1"}, "relationships": {"1": "1e963e75-85fb-480e-b55a-4e886d4c3957"}}, "__type__": "1"}, "aa9fd927-84de-4a37-879f-6e059a033e62": {"__data__": {"text": "\n\nAvoid duplication\n\nWe face too many challenges to tackle the same one from scratch again or split our efforts into silos. We must collaborate to make best use of our diverse and growing skillset.\n\nSearch and navigate across this site to see if an existing document already serves your purpose and garners an update before starting anew. As with code, don't repeat yourself.\n    \n", "doc_id": "aa9fd927-84de-4a37-879f-6e059a033e62", "embedding": null, "doc_hash": "cf22ee8b38741bb7f74bc23d534d58c66d67305d9a27cf7515824cb12a0d1dc5", "extra_info": null, "node_info": {"start": 0, "end": 381, "_node_type": "1"}, "relationships": {"1": "525e365a-d540-4232-9e3a-7c5e101f45ee"}}, "__type__": "1"}, "9d568610-fe3b-486d-be66-00a7a9a7fa0b": {"__data__": {"text": "\n\nUse these Aptos words and phrases consistently\n\nThe below table lists the correct usage of Aptos words and phrases. \n\n| Recommended way to use in mid-sentence  | Avoid these forms |\n| --- | --- |\n| First letter uppercase if appearing at the start of a sentence. |  |\n| fullnode (FN) | FullNode, Fullnode |\n| validator or validator node (VN) | Validator Node, ValidatorNode |\n| validator fullnode (VFN) | Validator FullNode or ValidatorFullNode |\n| public fullnode | Public FullNode |\n| Aptos blockchain | Aptos Blockchain |\n| Move module | Move Module |\n| Move resource | Move Resource |\n| Aptos framework | Aptos Framework |\n| Faucet | faucet |\n| mempool | Mempool |\n| bytecode | bytecodes |\n| MoveVM | Move VM |\n| REST service | REST Service |\n| upgradeable | upgradable |\n\n", "doc_id": "9d568610-fe3b-486d-be66-00a7a9a7fa0b", "embedding": null, "doc_hash": "7c0cd4f3be2d1161a76bfa1b38c13f3dcf935fab7c6954d3804c70ade2b926c8", "extra_info": null, "node_info": {"start": 0, "end": 778, "_node_type": "1"}, "relationships": {"1": "27e58da6-334f-4b03-910e-7af9f3965d60"}}, "__type__": "1"}, "dacea7d4-1102-477c-9e18-88d30d66f9bd": {"__data__": {"text": "\n\nCompare Aptos Token Standards\n\n:::tip Aptos token standard\nFor details, see the official Aptos Token standard.\n:::\n\nOne of the major applications of blockchains is token generation and use; this use requires a standard defining\nthe pattern a token must comply with. The Aptos team and communities have been moving\nfast and steadily to support various projects and creators to launch their tokens on the Aptos\nblockchain. As a new L1 blockchain equipped with the Move programming language - a relatively new language exclusively designed for the safety of smart contracts - our token standard inevitably differs from other\nblockchains. In this document, we will briefly compare the token standard of Aptos with those of Ethereum and Solana.\n\n", "doc_id": "dacea7d4-1102-477c-9e18-88d30d66f9bd", "embedding": null, "doc_hash": "73f08855b166659a38c60d8c237f63eab03bb1967c5f9abcdcf665189dbbe130", "extra_info": null, "node_info": {"start": 0, "end": 743, "_node_type": "1"}, "relationships": {"1": "2abeee9f-fd82-487f-97cf-7c6032be04b4"}}, "__type__": "1"}, "5320f622-ad68-4ca2-b2c0-51aa0d674451": {"__data__": {"text": "\n\nAccount model\nIn order to understand tokens, we have to compare the account model across different\nblockchains. This section contains a brief summary.\n\n", "doc_id": "5320f622-ad68-4ca2-b2c0-51aa0d674451", "embedding": null, "doc_hash": "ca97d8373460350eb7163325505c5750af8ba3e8e1a4fbc3cb55bdc17d559c1b", "extra_info": null, "node_info": {"start": 0, "end": 154, "_node_type": "1"}, "relationships": {"1": "af0f35e2-f78a-47a6-a58e-7d851bd35cdc"}}, "__type__": "1"}, "6109c1f2-7cb4-4ce3-981d-52f22320ab3d": {"__data__": {"text": "\n\nEthereum\nEthereum has two types of accounts: Externally-owned accounts essentially just stores\na balance of Ether. Contract accounts manage their underlying smart contracts and have an associated \nstorage map that stores all the persisted data, which can be mutated only by the contract, enforced \nby EVM.\n\n", "doc_id": "6109c1f2-7cb4-4ce3-981d-52f22320ab3d", "embedding": null, "doc_hash": "80becc0590e5afc66bc3c1397a1a2a1d2f9a0e37d5b7b3b6bffcdbb6f9513d4e", "extra_info": null, "node_info": {"start": 0, "end": 309, "_node_type": "1"}, "relationships": {"1": "b1acbcd0-8366-4a23-95bf-536b71626ba9"}}, "__type__": "1"}, "1e7691bd-1046-4969-aec0-3266ce2693fc": {"__data__": {"text": "\n\nSolana\nThere are also two types of accounts on the Solana blockchain: executable and non-executable.\nBut how the data and code are stored and managed is different. In Ethereum, the data is stored\nunder the same contract account that manages this piece of data. In the Solana blockchain,\nthe data store and program are separated into different accounts. An executable account\nstores only contract code while all the associated data is stored in non-executable accounts owned\nby the executable account.\n\n", "doc_id": "1e7691bd-1046-4969-aec0-3266ce2693fc", "embedding": null, "doc_hash": "6f68c477808706b294fbbb29e6e9285443ad2c42b6ef137ac3123591d8b8ec7e", "extra_info": null, "node_info": {"start": 0, "end": 504, "_node_type": "1"}, "relationships": {"1": "ab059d8c-b34e-4b71-9c3e-40248d1d66c6"}}, "__type__": "1"}, "613fb520-f3d0-45f4-ad89-ae824daf140b": {"__data__": {"text": "\n\nAptos\nThe accounts in Aptos are homogeneous in that they can store both smart contracts and data. But\ndistinct from Ethereum, the associated data of a smart contract is distributed across the space\nof all accounts. The associated data of a contract in Ethereum is broken into pieces\nstored in its owner's account. For example, an NFT smart contract will store all the NFTs and their\nholders in the mapping and other metadata like supply in a state variable; both belong to this\ncontract account.\n\nHowever, in Aptos, NFTs are stored under each owner's account, respectively. Other\ntoken metadata will be kept under the creator account but not the account owning the contract code.\nIt is similar to Solana in the way that the contract code can be written to achieve maximum code\nreuse instead of deploying similar code again and again just for domain separation. Meanwhile, the\naccess control mechanism and generics in Move natively enable this pattern and asset security.\n\nAnother interesting trade-off between the account models of Ethereum and Solana/Aptos is data locality.\nFor Ethereum, it is hard to know all the tokens owned by a specific account but easy to get all the\nowners of a token type. For Solana and Aptos, the opposite is true if no indexing is built. Ethereum\ncode can be easily written to do some operations like airdrop to all the holders relying on on-chain\ndata only while Solana/Aptos facilitate listing all the tokens an account owns.\n\n", "doc_id": "613fb520-f3d0-45f4-ad89-ae824daf140b", "embedding": null, "doc_hash": "ea79e97029136d87ff74a224c179e1b8452163866eb7d07c49cefca656841a50", "extra_info": null, "node_info": {"start": 0, "end": 1461, "_node_type": "1"}, "relationships": {"1": "2e19d76e-c578-4a7c-af63-162a9180d567"}}, "__type__": "1"}, "c8574707-f114-4542-84da-d7012ba066e2": {"__data__": {"text": "\n\nToken standard comparison\nIn Ethereum or even the whole blockchain world, the Fungible Token (FT) was initially introduced by\nEIP-20, and Non-Fungible Token (NFT) was defined in \nEIP-721. Later, EIP-1155\nwas proposed to combine FT and NFT or even Semi-Fungible Token (SFT) into the one standard. \n\nOne deficiency of the Ethereum token contract is each token having to deploy individual contract code onto\na contract account to distinguish it from other tokens even if it simply differs by name.\nSolana account model enables another pattern where code can be reused so that one generic program operates on\nvarious data. To create a new token, you could create an account that can mint tokens and more accounts that can\nreceive them. The mint account itself uniquely determines the token type instead of contract account, and these are all\npassed as arguments to the one contract deployed to some executable account.\n\nThe Aptos token standard shares some similarities with Solana, especially how it covers FT, NFT and SFT in one standard and\nalso has a similar generic token contract, which also implicitly defines token standard. Basically, instead of deploying\na new ERC20 smart contract for each new token, all you need to do is call a function in the contract with necessary\narguments. Depending on what function you call, the token contract will mint/transfer/burn/... tokens.\n\n", "doc_id": "c8574707-f114-4542-84da-d7012ba066e2", "embedding": null, "doc_hash": "5404357b3969964c7a06f9ab02ac383899eac3ab56463c910983976dbf0c2a37", "extra_info": null, "node_info": {"start": 0, "end": 1383, "_node_type": "1"}, "relationships": {"1": "bf67c4bc-99f4-44e7-8483-9fa0335fd078"}}, "__type__": "1"}, "e8538c10-c54c-444c-aaae-8f0a549c3103": {"__data__": {"text": "\n\nToken identification\nAptos identifies a token by its `TokenId` that includes `TokenDataId` and `property_version`. The\n`property_version` shares the same concept with *Edition Account* in Solana, but there is no explicit\ncounterpart in Ethereum as it is not required in any token standard interface.\n\n`TokenDataId` is  a globally unique identifier of token group sharing all the metadata except for\n`property_version`, including token creator address, collection name and token name. In Ethereum,\nthe same concept is implemented by deploying a token contract under a unique address so an FT type or\na collection of NFTs is identified by different contract addresses. In Solana, the similar\nconcept for token identifier is implemented as mint account, each of which will represent\none token type. In Aptos, a creator account can have multiple token types created by giving\ndifferent collections and token names. \n\n\n", "doc_id": "e8538c10-c54c-444c-aaae-8f0a549c3103", "embedding": null, "doc_hash": "4ae838c8059f90574af7a43c2dd80737f009846597f4ae9e88f1c683a78a1784", "extra_info": null, "node_info": {"start": 0, "end": 916, "_node_type": "1"}, "relationships": {"1": "019a6994-3a13-4dca-926e-fe8bbf87282e"}}, "__type__": "1"}, "a834b0ee-fe41-4e2e-91e1-23a33db2490a": {"__data__": {"text": "\n\nToken categorization\nit is critical to understand, in Aptos, how to categorize different tokens to expect different sets\nof features:\n- `Fungible Token`: Each FT has one unique `TokenId`, which means tokens sharing the same creator, collection,\n  name and property version are fungible.\n- `Non-Fungible Token`: NFTs always have different `TokenId`s, but it is noted that NFTs belonging to the same\n  collection (by nature also the same creator) will share the same `creator` and `collection`\n  fields in their `TokenDataId`s.\n- `Semi-Fungible Token`: The crypto communities lack a common definition for SFT. The only consensus is\n  SFTs are comparatively new types of tokens that combine the properties of NFTs and FTs.\n  Usually this is realized via the customized logic based on different customized properties.\n\nIt's worth noting that Solana has an `Edition` concept that represents an NFT that was copied from a Master Edition NFT.\nThis can apply to use cases such as tickets in that they are almost exactly the same except for some properties, for\nexample, serial numbers or seats for tickets. They could be implemented in Aptos by bumping the token `property_version` and\nmutating corresponding fields in `token_properties`.\nIn a nutshell, `Edition` is to Solana token is what `property_version` is to Aptos token; but there is no similar concept\nin Ethereum token standard.\n\n", "doc_id": "a834b0ee-fe41-4e2e-91e1-23a33db2490a", "embedding": null, "doc_hash": "402f6e2e718f0c7b066e018082d93764a6fd1a58e142fe9f8a8146ef5e9bbf7f", "extra_info": null, "node_info": {"start": 0, "end": 1384, "_node_type": "1"}, "relationships": {"1": "e6f32e24-2597-409d-9317-7bebed40e495"}}, "__type__": "1"}, "9324f572-8a9b-48a7-812d-c5e36a2559a8": {"__data__": {"text": "\n\nToken metadata\nAptos token has metadata defined in `TokenData` with the multiple fields that describe widely\nacknowledged property data that needs to be understood by dapps. To name a few fields:\n- `name`: The name of the token. It must be unique within a collection. \n- `description`: The description of the token.\n- `uri`: A URL pointer to off-chain for more information about the token. The asset could be media such as an image or video or more metadata in a JSON file.\n- `supply`: The total number of units of this token.\n- `token_properties`: a map-like structure containing optional or customized metadata not covered by existing fields.\n\nIn Ethereum, only a small portion of such properties are defined as methods, such as `name()`, `symbol()`,\n`decimals()`, `totalSupply()` of ERC-20; or `name()` and `symbol()` and `tokenURI()` of the optional metadata extension\nfor ERC-721; ERC-1155 also has a similar method `uri()` in its own optional metadata extension. Therefore, for tokens\non Ethereum, that token metadata is not standardized so that dapps have to take special treatment case by case,\nwhich incurs unnecessary overhead for developers and users.\n\nIn Solana, the Token Metadata program offers a Metadata Account defining numerous metadata fields associated\nwith a token as well, including `collection` which is defined in `TokenDataId` in Aptos. Unfortunately, it fails\nto provide on-chain property with mutability configuration, which could improve the usability of the token\nstandard by enabling more innovative smart contract logic based on on-chain properties. SFT is a good\nexample of this. Instead, the `Token Standard` field introduced to Token Metadata v1.1.0 only provides `attributes`\nas a container to hold customized properties. However, it is neither mutable nor on-chain, as an off-chain JSON\nstandard.\n\n", "doc_id": "9324f572-8a9b-48a7-812d-c5e36a2559a8", "embedding": null, "doc_hash": "23cb62079dd4487373a74b739ba10896f6f2b4f079f572472ed8c01b23fd3d2b", "extra_info": null, "node_info": {"start": 0, "end": 1836, "_node_type": "1"}, "relationships": {"1": "5a1ebc21-d77f-4d58-b6ac-3c3b9fee89d7"}}, "__type__": "1"}, "f68c731f-71a8-41a6-a68d-16ec2cafe2e6": {"__data__": {"text": "\n\nAptos Token V2\n\n", "doc_id": "f68c731f-71a8-41a6-a68d-16ec2cafe2e6", "embedding": null, "doc_hash": "787b7b813e176d3af9dcb06441c1408cf4cbfc66288a2d9c4ae0818c906b2429", "extra_info": null, "node_info": {"start": 0, "end": 18, "_node_type": "1"}, "relationships": {"1": "7bc21c50-0754-471a-ad86-434d5a2bd58d"}}, "__type__": "1"}, "31752edc-484e-4fd1-8558-8acab22aca26": {"__data__": {"text": "\n\nOverview of NFTs\nAn NFT is a non-fungible token \nor data stored on a blockchain that uniquely defines ownership of an asset. NFTs were first defined in \nEIP-721 and later expanded upon in EIP-1155. \nNFTs are typically defined using the following properties:\n\n- `name`: The name of the asset. It must be unique within a collection.\n- `description`: The description of the asset.\n- `uri`: A URL pointer to off-chain for more information about the asset. The asset could be media such as an image or video or more metadata.\n- `supply`: The total number of units of this NFT. Many NFTs have only a single supply, while those that have more than one are referred to as editions.\n\nAdditionally, most NFTs are part of a collection or a set of NFTs with a common attribute, for example, a theme, creator,\nor minimally contract. Each collection has a similar set of attributes:\n\n- `name`: The name of the collection. The name must be unique within the creator's account.\n- `description`: The description of the collection.\n- `uri`: A URL pointer to off-chain for more information about the asset. The asset could be media such as an image or video or more metadata.\n- `supply`: The total number of NFTs in this collection. \n- `maximum`: The maximum number of NFTs that this collection can have. If `maximum` is set to 0, then supply is untracked. \n\n", "doc_id": "31752edc-484e-4fd1-8558-8acab22aca26", "embedding": null, "doc_hash": "18b7cb2804ac73c14659e992d31a8bcb22c05aa76a798d02fee9f99962cf76cf", "extra_info": null, "node_info": {"start": 0, "end": 1342, "_node_type": "1"}, "relationships": {"1": "92f89d70-1049-465a-b918-24d4b82c8255"}}, "__type__": "1"}, "da1dd7fb-38d8-4c8e-8ad3-47dc2841c682": {"__data__": {"text": "\n\nDesign principles\nThe Aptos token v2 standard \nwas developed with the following as an improvement on the Aptos Token standard. It has these ideas in mind:\n* **Flexibility** - NFTs are flexible and can be customized to accommodate any creative designs.\n* **Composability** - Multiple NFTs can be easily composed together, such that the final object is greater than the sum of its parts\n* **Scalability** - Greater parallelism between tokens\n\nThe base token only provides minimal functionalities and is meant to build upon to add more functionalities. All of its\nfunctions are non-entry and thus not callable directly from off chain. Creators need to write their own modules that use\nthese fuctionalities or use \"no code\" solutions also provided in the framework. One such solution is aptos_token\nwhich provides functionalities such as custom metadata (via PropertyMap) and soul bound.\n\n", "doc_id": "da1dd7fb-38d8-4c8e-8ad3-47dc2841c682", "embedding": null, "doc_hash": "bb91449f274983e0834be312b15844155db47d076c44a8d69319cd50a9ea553a", "extra_info": null, "node_info": {"start": 0, "end": 887, "_node_type": "1"}, "relationships": {"1": "2af9cf63-18ee-4378-bf28-ca38b05aeed5"}}, "__type__": "1"}, "ecc52911-30ae-41f5-83e6-571558f54e8b": {"__data__": {"text": "\n\nComparison to Token V1\n\nToken V2 uses Aptos objects\nrather than account resources traditionally used in Move. This allows for storing data outside the account and adding\nflexibility in this way. \n* Tokens can be easily extended with custom data and functionalities without requiring any changes in the framework\n* Transfers are simply a reference update\n* Direct transfer is allowed without an opt in\n* NFTs can own other NFTs adding easy composability\n* Soul bound tokens can be easily supported\n\n", "doc_id": "ecc52911-30ae-41f5-83e6-571558f54e8b", "embedding": null, "doc_hash": "f32956b43d345e4d7fa2c0b8107b166a056a42a548590576ab7ca6ebfab52a7b", "extra_info": null, "node_info": {"start": 0, "end": 500, "_node_type": "1"}, "relationships": {"1": "f5cf5591-567a-4231-b384-22d7fc4f09bc"}}, "__type__": "1"}, "6444e38d-9df2-47bd-bc0f-245cc0d5de18": {"__data__": {"text": "\n\nRoyalties\nRoyalties are simply another module\nthat is attached to a collection. They're allowed to be updated as long as a `MutatorRef` is generated at creation time.\nThe royalty can also be set directly on a token if it has a different royalty config than the collection's.\n\n", "doc_id": "6444e38d-9df2-47bd-bc0f-245cc0d5de18", "embedding": null, "doc_hash": "a3a26880a808ca2a0395e097851e107b104df00fb1d775cdd23eeb9d377690f9", "extra_info": null, "node_info": {"start": 0, "end": 278, "_node_type": "1"}, "relationships": {"1": "e5045bf5-591d-425b-adc1-4d69fa4675e2"}}, "__type__": "1"}, "d7f03896-1ed3-43fa-9e77-3556d3c93939": {"__data__": {"text": "\n\nToken lifecycle\n\n", "doc_id": "d7f03896-1ed3-43fa-9e77-3556d3c93939", "embedding": null, "doc_hash": "e9cfb6cbe82cd182337c395bda5af4d0d1233dc317388aa522adac53bb8d641b", "extra_info": null, "node_info": {"start": 0, "end": 19, "_node_type": "1"}, "relationships": {"1": "3b3852e2-127f-47c5-90fc-585a9859c0d3"}}, "__type__": "1"}, "f2b7d0d0-a598-48b2-843f-ac56c74194c5": {"__data__": {"text": "\n\nCollection creation\nEvery token belongs to a collection. The developer first needs to create a collection with:\n1. A fixed maximum supply. Current supply is tracked and cannot exceed the maximum set.\n```rust\nuse aptos_token_objects::collection;\n\npublic entry fun create_collection(creator: &signer) {\n    let max_supply = 1000;\n    collection::create_fixed_collection(\n        creator,\n        \"My Collection Description\",\n        max_supply,\n        \"My Collection\",\n        royalty,\n        \"https://mycollection.com\",\n    );\n}\n```\n2. Unlimited supply. Current supply is still tracked but there's no maximum enforced.\n```rust\npublic entry fun create_collection(creator: &signer) {\n    collection::create_unlimited_collection(\n        creator,\n        \"My Collection Description\",\n        \"My Collection\",\n        royalty,\n        \"https://mycollection.com\",\n    );\n}\n```\nNote that both track the current supply. Maximum supply cannot be changed after the collection is created, and a\ncollection cannot be converted from unlimited to fixed supply or vice versa.\n\nA collection has the following attributes:\n* Collection name - unique within each account. This means a single creator account cannot create more than one\ncollection with the same name.\n* Description - modifiable with a `MutatorRef` and smaller than 2048 characters\n* URI length - modifiable with a `MutatorRef` and smaller than 512 characters\n* Royalty - specifies how many % of the sale price goes to the creator of the collection. This can be changed with a\n`MutatorRef` generated by the Royalty module.\n\nA `MutatorRef` can be generated only during creation of the collection. If created, the holder of the `MutatorRef` can\nchange the `description` and the `URI length` of the collection.\n```rust\npublic entry fun create_collection(creator: &signer) {\n    let collection_constructor_ref = &collection::create_unlimited_collection(\n        creator,\n        \"My Collection Description\",\n        \"My Collection\",\n        royalty,\n        \"https://mycollection.com\",\n    );\n    let mutator_ref = collection::get_mutator_ref(collection_constructor_ref);\n    // Store the mutator ref somewhere safe\n}\n```\n\n", "doc_id": "f2b7d0d0-a598-48b2-843f-ac56c74194c5", "embedding": null, "doc_hash": "8f426c2263c60d23f2058feba0a2c7841591b786e93154e3193bf53f916b1902", "extra_info": null, "node_info": {"start": 0, "end": 2169, "_node_type": "1"}, "relationships": {"1": "ecb07da7-2655-4d33-bd9b-f77e05d05d44"}}, "__type__": "1"}, "d6d468f3-26a5-4b46-80d8-1982b0779661": {"__data__": {"text": "\n\nCollection customization\nA collection can be customized by adding more data (as resources) or functionalities. For example, a collection can track\nwhen it was created in order to limit when tokens can be minted.\n```rust\nstruct MyCollectionMetadata has key {\n    creation_timestamp_secs: u64,\n}\n\npublic entry fun create_collection(creator: &signer) {\n    let collection_constructor_ref = &collection::create_unlimited_collection(\n        creator,\n        \"My Collection Description\",\n        \"My Collection\",\n        royalty,\n        \"https://mycollection.com\",\n    );\n    // Constructor ref can be exchanged for signer to add resources to the collection object.\n    let collection_signer = &object::generate_signer(collection_constructor_ref);\n    move_to(collection_signer, MyCollectionMetadata { creation_timestamp_secs: timestamp::now_seconds() } })\n}\n```\n\n", "doc_id": "d6d468f3-26a5-4b46-80d8-1982b0779661", "embedding": null, "doc_hash": "430cf5437529610e5fa6794806595959e2981456db6984626d9b7c246ac285a0", "extra_info": null, "node_info": {"start": 0, "end": 862, "_node_type": "1"}, "relationships": {"1": "0749b119-995e-48ae-bb69-fe09f09a9850"}}, "__type__": "1"}, "f51dc0a9-0540-45b7-a7f8-7c9639e695da": {"__data__": {"text": "\n\nToken creation\nCreators can mint tokens, which are separate objects from the collection. This allows for greater customization.\nTokens can be created in two ways:\n1. Named tokens. These tokens have deterministic addresses that are sha256 hash of the creator address, collection name,\nand a custom seed value, concatenated. This allows for predictable addresses and easier querying of tokens. However,\nnamed tokens are fully deletable and thus burning them will only delete the token data and not fully delete the underlying\nobject\n```rust\nuse aptos_token_objects::token;\n\npublic entry fun mint_token(creator: &signer) {\n    token::create_named_token(\n        creator,\n        \"My Collection\",\n        \"My named Token description\",\n        \"My named token\",\n        royalty,\n        \"https://mycollection.com/my-named-token.jpeg\",\n    );\n}\n```\n2. (Unnamed) tokens based on the creator account's guid. These tokens have addresses are generated based on the creator\naccount's incrementing guid. The addresses of unnamed tokens are not deterministic as the account's guid can change outside\nof minting. Thus, querying for unnamed tokens is more difficult and requires indexing.\n```rust\nuse aptos_token_objects::token;\n\npublic entry fun mint_token(creator: &signer) {\n    token::create_from_account(\n        creator,\n        \"My Collection\",\n        \"My named Token description\",\n        \"My named token\",\n        royalty,\n        \"https://mycollection.com/my-named-token.jpeg\",\n    );\n}\n```\n\n", "doc_id": "f51dc0a9-0540-45b7-a7f8-7c9639e695da", "embedding": null, "doc_hash": "5512044132f00f1406f9f77dc6bc61468f4f830fa02a5650245043cb4c74a081", "extra_info": null, "node_info": {"start": 0, "end": 1490, "_node_type": "1"}, "relationships": {"1": "d1806af9-bfb9-4d8d-acf4-5d4246216d6d"}}, "__type__": "1"}, "34e3298b-96b3-4482-bbc8-18b0f8ac3fa9": {"__data__": {"text": "\n\nToken properties\nTokens by default have the following properties:\n* Token name - unique within each collection. A collection cannot have more than one token with the same name.\n* Token description - modifiable with a `MutatorRef` and smaller than 2048 characters\n* Token URI length - modifiable with a `MutatorRef` and smaller than 512 characters\n* Royalty - It's less common to have royalty setting on the token instead of collection. But this allows a token to have\na different royalty setting than the collection's.\n\nA `MutatorRef` can be generated only during creation of the token.\n```rust\npublic entry fun mint_token(creator: &signer) {\n    let token_constructor_ref = &token::create_from_account(\n        creator,\n        \"My Collection\",\n        \"My named Token description\",\n        \"My named token\",\n        royalty,\n        \"https://mycollection.com/my-named-token.jpeg\",\n    );\n    let mutator_ref = token::generate_mutator_ref(token_constructor_ref);\n    // Store the mutator ref somewhere safe\n}\n```\n\n", "doc_id": "34e3298b-96b3-4482-bbc8-18b0f8ac3fa9", "embedding": null, "doc_hash": "01650dfb41d9b3e0e977204b809816fe48225c4292d3e1da6ca9865cecb3b955", "extra_info": null, "node_info": {"start": 0, "end": 1017, "_node_type": "1"}, "relationships": {"1": "a9eb8193-9069-4b90-a2d5-d447a2dc961e"}}, "__type__": "1"}, "36803657-4964-486c-b4ec-ea415145fe6f": {"__data__": {"text": "\n\nToken customization\nMore data can be added to the token as resources, similar to for collections.\n\n", "doc_id": "36803657-4964-486c-b4ec-ea415145fe6f", "embedding": null, "doc_hash": "b964ad4a67ca355f1ad75aba0a175b1d1f41ece730513c0c33f850eabcad5f76", "extra_info": null, "node_info": {"start": 0, "end": 101, "_node_type": "1"}, "relationships": {"1": "02eb04c9-a672-415f-bc5c-c5e935a50e3c"}}, "__type__": "1"}, "2eda3da2-bd5d-4c22-90f8-ebe8bd22343a": {"__data__": {"text": "\n\nToken burn\nTokens can be burned by the creator if they generated and stored a `BurnRef` during the creation of the token.\n```rust\npublic entry fun mint_token(creator: &signer) {\n    let token_constructor_ref = &token::create_from_account(\n        creator,\n        \"My Collection\",\n        \"My named Token description\",\n        \"My named token\",\n        royalty,\n        \"https://mycollection.com/my-named-token.jpeg\",\n    );\n    let burn_ref = token::generate_burn_ref(token_constructor_ref);\n    // Store the burn ref somewhere safe\n}\n\npublic entry fun burn_token(token: Object) {\n    // Remove all custom data from the token object.\n    let token_address = object::object_address(&token);\n    let CustomData { ... } = move_from(token_address);\n\n    // Retrieve the burn ref from storage    \n    let burn_ref = ...;\n    token::burn(burn_ref);\n}\n```\nNote that if any custom data was added to the token objects, the `burn_token` function needs to first remove those data.\ntoken::burn only deletes the object if it was created as an unnamed token. Named token will have all token data removed,\nbut the object will stay, thus creating a \"burned\" defunct object.\n\n", "doc_id": "2eda3da2-bd5d-4c22-90f8-ebe8bd22343a", "embedding": null, "doc_hash": "211225e2a296ba5ca178b41026070453aee3387ef53cc77c8c489bae47cfc3ff", "extra_info": null, "node_info": {"start": 0, "end": 1162, "_node_type": "1"}, "relationships": {"1": "cbad586d-0a93-4906-ab69-4cb6bf4aa99a"}}, "__type__": "1"}, "034ea6d9-316c-4e3d-840e-4d38a832d120": {"__data__": {"text": "\n\nToken transfer\nTokens can be simply transferred as objects to any user via `object::transfer`\n\n", "doc_id": "034ea6d9-316c-4e3d-840e-4d38a832d120", "embedding": null, "doc_hash": "b9e2624e5147d181972da023b6473a06df70a2e1753cd246a3582ba6b670e2bf", "extra_info": null, "node_info": {"start": 0, "end": 97, "_node_type": "1"}, "relationships": {"1": "c83121a1-c44f-43bd-824c-94c26f6c8c1d"}}, "__type__": "1"}, "bf92c302-03e5-4455-8751-a824acd64ca0": {"__data__": {"text": "\n\nAptos Token\nAptos Token\nis a \"no code\" solution that builds on top of the base token v2 standard and provides a more complete solution that\nallows creators to mint NFTs without writing any code. It provides the following main features:\n* Soul bound tokens which are non-transferable by holders\n* Custom defined properties stored in a PropertyMap, a simple map data structure of attribute name (string) -> values (bytes).\n* Freezing and unfreezing transfers of non-soul bound tokens\n* Creator management functionalities - modify a collection or token's metadata\n\n", "doc_id": "bf92c302-03e5-4455-8751-a824acd64ca0", "embedding": null, "doc_hash": "7f9933a6c7ed5db353af5ba6dbaf852e411931022912826029e17426ca056b19", "extra_info": null, "node_info": {"start": 0, "end": 564, "_node_type": "1"}, "relationships": {"1": "b6a0e7b1-764d-4d32-99c5-24f5c5b8d10f"}}, "__type__": "1"}, "0b9e85ec-1210-4d3e-9fdc-ec0348ca9ca6": {"__data__": {"text": "\n\nProperty Map\nSimilar to in Token Standard v1, Aptos Token provides an extensible PropertyMap\nthat provides type safe, but generic properties for a given NFT. Creators can set pass initial properties when minting a\ntoken and can freely add or remove properties later.\n\nTokens can be minted using the provided `aptos_token::mint`. This is an entry function and can be called via a transaction\ndirectly.\n```rust\npublic entry fun mint(\n    creator: &signer,\n    collection: String,\n    description: String,\n    name: String,\n    uri: String,\n    property_keys: vector,\n    property_types: vector,\n    property_values: vector>,\n    ) acquires AptosCollection, AptosToken\n```\n\nTo mint a soul bound token, the creator can call `aptos_token::mint_soul_bound` instead. This will create a token that\nthe holder cannot transfer.\n```rust\npublic entry fun mint_soul_bound(\ncreator: &signer,\ncollection: String,\ndescription: String,\nname: String,\nuri: String,\nproperty_keys: vector,\nproperty_types: vector,\nproperty_values: vector>,\nsoul_bound_to: address,\n) acquires AptosCollection\n```\n\n", "doc_id": "0b9e85ec-1210-4d3e-9fdc-ec0348ca9ca6", "embedding": null, "doc_hash": "ae449f18f810b3c5c707459b2b430d5bdaa830b0358f8a4a7752be4ae5a26767", "extra_info": null, "node_info": {"start": 0, "end": 1077, "_node_type": "1"}, "relationships": {"1": "80b37a02-ff7d-43dd-b8f2-d3829ae02fa1"}}, "__type__": "1"}, "ea23e135-a3df-4861-9be5-69209e2898c1": {"__data__": {"text": "\n\nCreator management\nBy default, the creator can do the following:\n* Mint and burn tokens, including soul bound tokens\n* Disallow transferring a token (freeze) and allow transferring a token (unfreeze)\n* Update the collection's description and uri\n* Add/Remove metadata properties from a token's property map\n* Update a collection's royalty setting\n* Update a token's name, description and uri\n\n", "doc_id": "ea23e135-a3df-4861-9be5-69209e2898c1", "embedding": null, "doc_hash": "4000193c1016197fc17d4dfd6dc6b8504298bb9d81e0e15be3bab5ade0280a32", "extra_info": null, "node_info": {"start": 0, "end": 395, "_node_type": "1"}, "relationships": {"1": "5234c9e3-9cbf-4951-ada4-5c1405dffa2b"}}, "__type__": "1"}, "88c53405-c0c0-4345-8082-7b2b4c345102": {"__data__": {"text": "\n\nFurther customization\nAptos Token is provided as a \"no code\" convenient solution, but it's not extensible. This is evident as most functions\nare entry functions and do not return any ref (constructor, mutator, etc.). The `aptos_token` module stores and manages\nthe refs obtained from creating the collection and token objects and do not expose raw access to them.\n\nIf a creator wants more custom functionalities such as being able to forcefully transfer a soul bound token, they would\nneed to write their own custom module that builds on top of the base token v2 standard. They can of course borrow inspiration\nand code from the Aptos Token module.\n\n", "doc_id": "88c53405-c0c0-4345-8082-7b2b4c345102", "embedding": null, "doc_hash": "245c39e797c0e16b90c2b055510dd967f1d7d1aa77343a55614245372eaff9f6", "extra_info": null, "node_info": {"start": 0, "end": 652, "_node_type": "1"}, "relationships": {"1": "1f0d5694-8e26-4de8-9db9-60e1993a68eb"}}, "__type__": "1"}, "c15ec020-a243-495a-8d56-0a8b7cb157d6": {"__data__": {"text": "\n\nAptos Token\n\n:::tip Aptos Token standards compared\nAlso see the comparison of Aptos Token standards.\n:::\n\n\n", "doc_id": "c15ec020-a243-495a-8d56-0a8b7cb157d6", "embedding": null, "doc_hash": "b8ed2f640a8ed59bbd8f127f69dadfe2e98d0061a6b323c27d8eb115b92a8ecd", "extra_info": null, "node_info": {"start": 0, "end": 109, "_node_type": "1"}, "relationships": {"1": "3bc63d9a-e8f3-40e4-b7a5-f5edc7364a22"}}, "__type__": "1"}, "b96994cf-ea91-401c-bc81-23329451d513": {"__data__": {"text": "\n\nOverview of NFT\n\nAn NFT is a non-fungible token or data stored on a blockchain that uniquely defines ownership of an asset. NFTs were first defined in EIP-721 and later expanded upon in EIP-1155. NFTs are typically defined using the following properties:\n\n- `name`: The name of the asset. It must be unique within a collection.\n- `description`: The description of the asset.\n- `uri`: A URL pointer to off-chain for more information about the asset. The asset could be media such as an image or video or more metadata.\n- `supply`: The total number of units of this NFT. Many NFTs have only a single supply, while those that have more than one are referred to as editions.\n\nAdditionally, most NFTs are part of a collection or a set of NFTs with a common attribute, for example, a theme, creator, or minimally contract. Each collection has a similar set of attributes:\n\n- `name`: The name of the collection. The name must be unique within the creator's account.\n- `description`: The description of the collection.\n- `uri`: A URL pointer to off-chain for more information about the asset. The asset could be media such as an image or video or more metadata.\n- `supply`: The total number of NFTs in this collection. \n- `maximum`: The maximum number of NFTs that this collection can have. If `maximum` is set to 0, then supply is untracked. \n\n", "doc_id": "b96994cf-ea91-401c-bc81-23329451d513", "embedding": null, "doc_hash": "4b7c3827e7fb32d84fc88b07e737552289ba763aaba19a007f23cdd278fc7a76", "extra_info": null, "node_info": {"start": 0, "end": 1339, "_node_type": "1"}, "relationships": {"1": "522a6bed-c8f3-4c5a-89bf-dd917a2c5e35"}}, "__type__": "1"}, "996e9cfe-52b9-4741-8e7f-527e55b88d4a": {"__data__": {"text": "\n\nDesign principles\n\nThe Aptos token standard is developed with the following principles:\n\n- **Interoperability**: Provide a standard implementation to improve interoperability across the ecosystem projects. Moreover, Move being a static language without dynamic dispatch makes this principle even more imperative.\n- **Liquidity**: Achieve maximal liquidity by defining the NFT, fungible (non-decimal) and semi-fungible tokens in one contract. These different types of tokens can be easily stored, transferred and transacted in the same way. As a consequence, it becomes easier to achieve maximal interoperability across the marketplaces, exchanges, and other methods of exchange.\n- **Rich on-chain token properties**: Enable the customization of on-chain token properties. Users can define their own properties and store them on-chain. This can potentially eliminate the need for the off-chain metadata.\n- **Reduced overhead**: Reduce the cost of creating large amounts of NFTs from fungible tokens. This can lead to, for example, reduced overhead for similar tokens by the reuse of on-chain metadata for certain fungible tokens.\n\n:::tip Fungible token \u2192 NFT\nThe Aptos token standard supports mutation of a fungible token to an NFT.\n:::\n\n", "doc_id": "996e9cfe-52b9-4741-8e7f-527e55b88d4a", "embedding": null, "doc_hash": "73912541fe1631bba6cb98e1595f02db1a9f3d1d91ffec3ec116a9794b5f035d", "extra_info": null, "node_info": {"start": 0, "end": 1239, "_node_type": "1"}, "relationships": {"1": "18f49c3f-2db3-408a-a525-b8d57fa44643"}}, "__type__": "1"}, "b732f938-a3df-428c-8bb0-979ee91e76d2": {"__data__": {"text": "\n\nStoring customized token properties on-chain\n\nThe Aptos token standard uses the `PropertyMap` module to store on-chain properties of tokens. `PropertyMap` maps a string key to a property value on-chain, which stores the value in Binary Canonical Serialization (BCS) format and its type. Currently, only primitive types (bool, u8, u64, u128, address and String) are supported in `PropertyMap`. Applications, such as Aptos Names, define application specific properties that are read and written by the applications smart contract.\n\n", "doc_id": "b732f938-a3df-428c-8bb0-979ee91e76d2", "embedding": null, "doc_hash": "d95cd0904d8aaa57ea7a90a95c4721927b5109e9ee4e30b13ab8ec75964531e8", "extra_info": null, "node_info": {"start": 0, "end": 532, "_node_type": "1"}, "relationships": {"1": "25da778e-e907-47c2-9bfa-bcfa55b7ba9e"}}, "__type__": "1"}, "54552430-52b1-4a39-a7ba-c5171a45c41f": {"__data__": {"text": "\n\nDefault properties\n\nYou can add your properties to `default_properties` in the TokenData. The properties defined here are shared by all tokens by default.\n\nThe `default_properties` field is a key-value store with type information. It leverages the PropertyMap module which contain functions for serializing and deserializing different primitive types to the property value.\n\n", "doc_id": "54552430-52b1-4a39-a7ba-c5171a45c41f", "embedding": null, "doc_hash": "a0039c7b34fa1d9e01bcddb4f2f4bb004cc08fcf8e15b3e091ad7fd561967839", "extra_info": null, "node_info": {"start": 0, "end": 377, "_node_type": "1"}, "relationships": {"1": "2d52fc64-e7b9-40a6-afb5-e83119374233"}}, "__type__": "1"}, "56b25cff-580e-4468-8d15-3c0ff0dbacd2": {"__data__": {"text": "\n\nToken properties\n\nYou can also use the `token_properties` defined in the token itself for customization on-chain. You can create customized values for a property of this  specific token, thereby allowing a token to have a different property value from its default.\n\nNote that limits exist to storing customized token properties on-chain, namely 1000 properties per token with field names limited to 128 characters.\n\n", "doc_id": "56b25cff-580e-4468-8d15-3c0ff0dbacd2", "embedding": null, "doc_hash": "edfd27a63ec39d71951cae9d28c103f2708e13d685969ec6e15d0caa42d437c2", "extra_info": null, "node_info": {"start": 0, "end": 418, "_node_type": "1"}, "relationships": {"1": "061cb74b-7640-4c77-9259-96388bbf537e"}}, "__type__": "1"}, "b1c24deb-3844-4b92-bb21-f382d7763dd4": {"__data__": {"text": "\n\nEvolving from fungible token to NFT\n\nFungible tokens share the same default property values. However, these property values can evolve over time and become different from each other. To support such evolution of token properties, the Aptos token standard provides the `property_version` field. Here is how it works:\n\n- During the token creation (minting), all tokens initially have `property_version` set to `0` and these tokens can be stacked together as fungible token. \n- When the creators mutate the default properties of a token, the mutated token will be assigned a unique `property_version` to create a new `token_id` to differentiate it from other fungible tokens. This unique `token_id` allows the token to have its own property values, and all further mutation of this token does **not** change the `property_version` again. This token essentially becomes an NFT now. \n\n", "doc_id": "b1c24deb-3844-4b92-bb21-f382d7763dd4", "embedding": null, "doc_hash": "fd9efea242fc5e6e3c3dc0229b22fc941f11531d1fb60d77f9c4a214df26190e", "extra_info": null, "node_info": {"start": 0, "end": 882, "_node_type": "1"}, "relationships": {"1": "6699188b-eb96-450a-b050-011964163429"}}, "__type__": "1"}, "98a0a9c3-1882-4a79-9760-e62711664b48": {"__data__": {"text": "\n\nConfiguring mutability\n\nTo make mutability explicit for both the creator and owner, the Aptos token standard provides `mutability_config` at both the collection level and the token level to control which fields are mutable. Configurable here means the creator can configure this field to be mutable or immutable during creation.\n\n", "doc_id": "98a0a9c3-1882-4a79-9760-e62711664b48", "embedding": null, "doc_hash": "00314eb0e23e676c42ef50fabfd85c5c160f82f0593b6e2e16e7bd13d3ee50e0", "extra_info": null, "node_info": {"start": 0, "end": 332, "_node_type": "1"}, "relationships": {"1": "5908dc10-f8a5-4543-99f9-b134434cf24f"}}, "__type__": "1"}, "6dc0edeb-a33f-483f-b16c-0210c6a38186": {"__data__": {"text": "\n\nStoring metadata off-chain\n\nFollow the standard below to ensure your NFT can be correctly displayed by various wallets.\n\nYou should store the metadata in a JSON file located in an off-chain storage solution such as arweave and provide the URL to the JSON file in the `uri` field of the token or the collection. We recommend the developers follow the ERC-1155 off-chain data schema to format their JSON files.\n```json\n{\n  \"image\": \"https://www.arweave.net/abcd5678?ext=png\",\n  \"animation_url\": \"https://www.arweave.net/efgh1234?ext=mp4\",\n  \"external_url\": \"https://petra.app/\",\n  \"attributes\": [\n    {\n      \"trait_type\": \"web\",\n      \"value\": \"yes\"\n    },\n    {\n      \"trait_type\": \"mobile\",\n      \"value\": \"yes\"\n    },\n    {\n      \"trait_type\": \"extension\",\n      \"value\": \"yes\"\n    }\n  ],\n  \"properties\": {\n    \"files\": [\n      {\n        \"uri\": \"https://www.arweave.net/abcd5678?ext=png\",\n        \"type\": \"image/png\"\n      },\n      {\n        \"uri\": \"https://watch.videodelivery.net/9876jkl\",\n        \"type\": \"unknown\",\n        \"cdn\": true\n      },\n      {\n        \"uri\": \"https://www.arweave.net/efgh1234?ext=mp4\",\n        \"type\": \"video/mp4\"\n      }\n    ],\n    \"category\": \"video\",\n  }\n}\n```\n* `image`: URL to the image asset. You may use the `?ext={file_extension}` query to provide information on the file type.\n* `animation_url`: URL to the multimedia attachment of the asset. You may use the same `file_extension` query to provide the file type.\n* `external_url`: URL to an external website where the user can also view the image.\n* `attributes` - Object array, where an object should contain `trait_type` and `value` fields. `value` can be a string or a number.\n* `properties.files`: Object array, where an object should contain the URI and type of the file that is part of the asset. The type should match the file extension. The array should also include files specified in `image` and `animation_url` fields, as well as any other files associated with the asset. You may use the `?ext={file_extension}` query to provide information on the file type.\n* `properties.category`: Has supported categories:\n  * `image` - PNG, GIF, JPG\n  * `video` - MP4, MOV \n  * `audio` - MP3, FLAC, WAV\n  * `vr` - 3D models; GLB, GLTF \n  * `html` - HTML pages; scripts and relative paths within the HTML page are also supported\n\nYou can also host your files on CDN to provide faster loading time by using the `cdn` flag in the file object. \nWhen the file exists, this should be the primary location to read the media file (`video`, `audio`, `vr`) by wallet. \nIf the file is no longer available, the wallet can fall back to use the `animation_url` to load the file. \n```json\n\"properties\": {\n  \"files\": [\n    ...\n    {\n      \"uri\": \"https://watch.videodelivery.net/52a52c4a261c88f19d267931426c9be6\",\n   ", "doc_id": "6dc0edeb-a33f-483f-b16c-0210c6a38186", "embedding": null, "doc_hash": "6c8571ac03f03ccf030271c8e525f6606225cb6e87bcf80b12ce41f1057a0bc6", "extra_info": null, "node_info": {"start": 0, "end": 2793, "_node_type": "1"}, "relationships": {"1": "1ceed36b-12ab-45ca-b86d-80891d687c4d", "3": "d44fcdf2-d0c7-4eda-8b95-36d3566cefa3"}}, "__type__": "1"}, "d44fcdf2-d0c7-4eda-8b95-36d3566cefa3": {"__data__": {"text": "     \"type\": \"unknown\",\n      \"cdn\": true\n    },\n    ...\n  ]\n}\n```\n\n", "doc_id": "d44fcdf2-d0c7-4eda-8b95-36d3566cefa3", "embedding": null, "doc_hash": "d3ea606f756f4434eb7205fffc3fe0ad866f0d8273a85357011f145e250f1b88", "extra_info": null, "node_info": {"start": 2791, "end": 2859, "_node_type": "1"}, "relationships": {"1": "1ceed36b-12ab-45ca-b86d-80891d687c4d", "2": "6dc0edeb-a33f-483f-b16c-0210c6a38186"}}, "__type__": "1"}, "5bd7b091-0e07-4803-b11c-6d20e9b1ee60": {"__data__": {"text": "\n\nToken data model\n\nThe following diagram depicts the flow of token data through Aptos.\n\n<ThemedImage\nalt=\"Signed Transaction Flow\"\nsources={{\nlight: useBaseUrl('/img/docs/aptos-token-standard-flow.svg'),\ndark: useBaseUrl('/img/docs/aptos-token-standard-flow-dark.svg'),\n}}\n/>\n\n", "doc_id": "5bd7b091-0e07-4803-b11c-6d20e9b1ee60", "embedding": null, "doc_hash": "33e8840fffbdb38b7b75d665f077d5629a044f9b3c0e008d469e59b19eb17d79", "extra_info": null, "node_info": {"start": 0, "end": 278, "_node_type": "1"}, "relationships": {"1": "de7c6581-002a-4218-af66-7fe54b219450"}}, "__type__": "1"}, "32aaa329-d9b6-486e-91d7-4e4185849b5a": {"__data__": {"text": "\n\nToken resources\n\nAs shown in the diagram above, token-related data are stored at both the creator\u2019s account and the owner\u2019s account.\n\n", "doc_id": "32aaa329-d9b6-486e-91d7-4e4185849b5a", "embedding": null, "doc_hash": "c00ea8c241d0f1e4e83cf0b6db585c114c6fb51d081f9cb89ebbbf833a72a1a3", "extra_info": null, "node_info": {"start": 0, "end": 136, "_node_type": "1"}, "relationships": {"1": "ff27052e-3693-411c-b33a-59ca82263b83"}}, "__type__": "1"}, "04f37cf7-793e-4e0e-a103-8c08c5d0b6fd": {"__data__": {"text": "\n\nStruct-level resources\n\nThe following tables describe fields at the struct level. For the definitive list, see the Aptos Token Framework.\n\n", "doc_id": "04f37cf7-793e-4e0e-a103-8c08c5d0b6fd", "embedding": null, "doc_hash": "1cc34b304e3c3edf0fcd633c520b5b62f8f8d616fd54893ca97a7d6dbacded19", "extra_info": null, "node_info": {"start": 0, "end": 141, "_node_type": "1"}, "relationships": {"1": "4114f7e1-083d-49c0-ae4f-c466644ca45a"}}, "__type__": "1"}, "f64c5735-6f22-4761-8db2-d4cfc5618688": {"__data__": {"text": "\n\nResource stored at the creator\u2019s address\n\n| Field | Description |\n| --- | --- |\n| `Collections` | Maintains a table called `collection_data`, which maps the collection name to the `CollectionData`. It also stores all the `TokenData` that this creator creates. |\n| `CollectionData` | Stores the collection metadata. The supply is the number of tokens created for the current collection. The maxium is the upper bound of tokens in this collection. |\n| `CollectionMutabilityConfig` | Specifies which field is mutable. |\n| `TokenData` | Acts as the main struct for holding the token metadata. Properties is a where users can add their own properties that are not defined in the token data. Users can mint more tokens based on the `TokenData`, and those tokens share the same `TokenData`. |\n| `TokenMutabilityConfig` | Controls which fields are mutable. |\n| `TokenDataId` | An ID used for representing and querying `TokenData` on-chain. This ID mainly contains three fields including creator address, collection name and token name. |\n| `Royalty` | Specifies the denominator and numerator for calculating the royalty fee. It also has the payee account address for depositing the royalty. |\n| `PropertyValue` | Contains both value of a property and type of property. |\n\n", "doc_id": "f64c5735-6f22-4761-8db2-d4cfc5618688", "embedding": null, "doc_hash": "031b0c88f0cf50c8da7c3614dbd5ff63f4bd1397e5175b437f10b9c5e787df42", "extra_info": null, "node_info": {"start": 0, "end": 1266, "_node_type": "1"}, "relationships": {"1": "128e1942-554b-42f7-9af7-dc702c902eea"}}, "__type__": "1"}, "45229e73-85a4-43c4-822a-d9d7cab01705": {"__data__": {"text": "\n\nResource stored at the owner\u2019s address\n\n| Field | Description |\n| --- | --- |\n| `TokenStore` | The main struct for storing the token owned by this address. It maps `TokenId` to the actual token. |\n| `Token` | The amount is the number of tokens. |\n| `TokenId` | `TokenDataId` points to the metadata of this token. The `property_version` represents a token with mutated `PropertyMap` from `default_properties` in the `TokenData`. |\n\nFor more detailed descriptions, see Aptos Token Framework.\n\n", "doc_id": "45229e73-85a4-43c4-822a-d9d7cab01705", "embedding": null, "doc_hash": "07ee57f861c73380dfa72d30e057f68f3c37913543dd72fa4cc0565b1b46d19a", "extra_info": null, "node_info": {"start": 0, "end": 493, "_node_type": "1"}, "relationships": {"1": "0b31f048-b4e4-4572-aa9a-a5d82641ffbf"}}, "__type__": "1"}, "9f47141c-c399-4800-903d-fd2fce7489fa": {"__data__": {"text": "\n\nToken lifecycle\n\n", "doc_id": "9f47141c-c399-4800-903d-fd2fce7489fa", "embedding": null, "doc_hash": "e9cfb6cbe82cd182337c395bda5af4d0d1233dc317388aa522adac53bb8d641b", "extra_info": null, "node_info": {"start": 0, "end": 19, "_node_type": "1"}, "relationships": {"1": "dd9f3609-b86f-4182-9cd3-3235904e2b2d"}}, "__type__": "1"}, "6bf38941-9d51-491b-ae6a-781b7b049fff": {"__data__": {"text": "\n\nToken creation\n\nEvery Aptos token belongs to a collection. The developer first needs to create a collection through `create_collection_script` and then create the token belonging to the collection `create_token_script`.\nTo achieve parallel `TokenData` and `Token` creation, a developer can create unlimited collection and `TokenData` where the `maximum` of the collection and `TokenData` are set as 0. With this setting, the token contract won\u2019t track the supply of types of token (`TokenData` count) and supply of token within each token type. As the result, the `TokenData` and token can be created in parallel.\n\nAptos also enforces simple validation of the input size and prevents duplication:\n* Token name - unique within each collection\n* Collection name - unique within each account\n* Token and collection name length - smaller than 128 characters\n* URI length - smaller than 512 characters\n* Property map - can hold at most 1000 properties, and each key should be smaller than 128 characters\n\n", "doc_id": "6bf38941-9d51-491b-ae6a-781b7b049fff", "embedding": null, "doc_hash": "8ab31f7580c5ed69dd96d10b913cf6ce894e5f36118c2fc9f46cd0f8e6432ae8", "extra_info": null, "node_info": {"start": 0, "end": 1002, "_node_type": "1"}, "relationships": {"1": "d1ba25db-df33-4f07-a7a8-3d2f199e2657"}}, "__type__": "1"}, "c68845f2-4dff-416d-82ca-f2a777e77034": {"__data__": {"text": "\n\nToken mutation\n\nOur standard supports mutation with a principle that the mutable fields are specified during the token creation. This allows the token owner to be informed which fields are mutable when they get the token from the creator.\nOur contract uses `CollectionMutabilityConfig` to check if a field is mutable. Our contract uses `TokenMutabilityConfig` to check if a `TokenData` field is mutable.\n\nFor mutation of properties, we have both\n* `default_properties` stored in `TokenData` shared by all tokens belonging to the `TokenData`\n* `token_properties` stored in the token itself\n\nTo mutate `default_properties`, developers can use `mutate_tokendata_property` to mutate the properties when `TokenMutabilityConfig` is set to `true`.\n\n> **CAUTION: Set the `TokenMutabilityConfig` field to `false` unless it is absolutely necessary. Allowing `default_properties` to be mutable provides creators too much power; creators can change the burnable config to provide themselves the authority to burn tokens after token creation.**\n\nTo mutate `token_properties` stored in the token, our standard uses the `TOKEN_PROPERTY_MUTABLE` property stored in `default_properties`. When the creator creates the `TokenData` with the `TOKEN_PROPERTY_MUTABLE` property set to `true`, the creator can mutate `token_properties`. Note that if the `mutate_tokendata_property` is set to `true`, creators can mutate the `token_properties` anyway since they can overwrite the setting in `default_properties`.\n\n", "doc_id": "c68845f2-4dff-416d-82ca-f2a777e77034", "embedding": null, "doc_hash": "05d6b9aa2b989d0e4cd8fe183bd1e10dea86dd83e3635177d07cb2382636e41a", "extra_info": null, "node_info": {"start": 0, "end": 1491, "_node_type": "1"}, "relationships": {"1": "d0c32e8a-c81d-4c90-a150-7d4c4e836cce"}}, "__type__": "1"}, "7b2817a9-e8a6-48af-9cfb-0cb8fb4e6fae": {"__data__": {"text": "\n\nToken burn\n\nWe provide `burn` and `burn_by_creator` functions for token owners and token creators to burn (or destroy) tokens. However, these two functions are also guarded by configs that are specified during the token creation so that both creator and owner are clear on who can burn the token.\nBurn is allowed only when the `BURNABLE_BY_OWNER` property is set to `true` in `default_properties`. Burn by creator is allowed when `BURNABLE_BY_CREATOR` is `true` in `default_properties`.\nOnce all the tokens belonging to a `TokenData` are burned, the `TokenData` will be removed from the creator\u2019s account. Similarly, if all `TokenData` belonging to a collection are removed, the `CollectionData` will be removed from the creator\u2019s account.\n\n", "doc_id": "7b2817a9-e8a6-48af-9cfb-0cb8fb4e6fae", "embedding": null, "doc_hash": "7ab8681bd96ce03e5371741b62b035e2d1c401c8039acfb478653b3700f304c4", "extra_info": null, "node_info": {"start": 0, "end": 743, "_node_type": "1"}, "relationships": {"1": "efaf5069-4788-46dc-a699-d5c6b7b44391"}}, "__type__": "1"}, "360d4418-8d59-44d8-9cd9-45be6d2480fa": {"__data__": {"text": "\n\nToken transfer\n\nWe provide three different modes for transferring tokens between the sender and receiver.\n\n", "doc_id": "360d4418-8d59-44d8-9cd9-45be6d2480fa", "embedding": null, "doc_hash": "f3188efe426ecb89ddd1635907254346d90f34ecb35168e9839616f696e49fec", "extra_info": null, "node_info": {"start": 0, "end": 109, "_node_type": "1"}, "relationships": {"1": "df74bdb3-b37d-41f0-a89b-fdbb015384dd"}}, "__type__": "1"}, "08c9a0bd-e818-44d6-879e-d462df175309": {"__data__": {"text": "\n\nTwo-step transfer\n\nTo protect users from receiving undesired NFTs, they must be first offered NFTs, and then accept the offered NFTs. Then only the offered NFTs will be deposited in the users' token stores. This is the default token transfer behavior. For example:\n1. If Alice wants to send Bob an NFT, she must first offer Bob this NFT. This NFT is still stored under Alice\u2019s account.\n2. Only when Bob claims the NFT, will the NFT be removed from Alice\u2019s account and stored in Bob\u2019s token store.\n\n:::tip Token transfer module\nThe token transfer is implemented in the `token_transfers` module.\n:::\n\n", "doc_id": "08c9a0bd-e818-44d6-879e-d462df175309", "embedding": null, "doc_hash": "0755bf63d2443a065f548adf1d96f37dbebea534350095d10d23c3e665d4aab6", "extra_info": null, "node_info": {"start": 0, "end": 601, "_node_type": "1"}, "relationships": {"1": "e4d0a55b-4ec4-4c38-beb6-3c9af10c7908"}}, "__type__": "1"}, "06eda633-268b-488f-9f60-0ea995646847": {"__data__": {"text": "\n\nTransfer with opt-in\n\nIf a user wants to receive direct transfer of the NFT, skipping the initial steps of offer and claim, then the user can call `opt_in_direct_transfer` to allow other people to directly transfer the NFTs into the user's token store. After opting into direct transfer, the user can call `transfer` to transfer tokens directly. For example, Alice and anyone can directly send a token to Bob's token store once Bob opts in.\n\n:::tip Turning off direct transfer\nThe user can also turn off this direct transfer behavior by calling the same `opt_in_direct_transfer` function to reset to the default behavior.\n:::\n\n", "doc_id": "06eda633-268b-488f-9f60-0ea995646847", "embedding": null, "doc_hash": "505f71437ecbc7aec3f5e73779b050e260c2c5e921d3f71e15bbd31f18746123", "extra_info": null, "node_info": {"start": 0, "end": 629, "_node_type": "1"}, "relationships": {"1": "6faed02b-71c5-4fd8-a2ab-53ff77e143d4"}}, "__type__": "1"}, "a84e3752-d4c4-4713-98e4-37211d342cc6": {"__data__": {"text": "\n\nMulti-agent transfer\n\nThe sender and receiver can both sign a transfer transaction to directly transfer a token from the sender to receiver `direct_transfer_script`. For example, once Alice and Bob both sign the transfer transaction, the token will be directly transferred from Alice's account to Bob.\n\n\n", "doc_id": "a84e3752-d4c4-4713-98e4-37211d342cc6", "embedding": null, "doc_hash": "47f6d098d01be08395eb8e6274e8b4c7ee70af1a23bf7f529e3ef95ccfbbb5c4", "extra_info": null, "node_info": {"start": 0, "end": 306, "_node_type": "1"}, "relationships": {"1": "fa9b0ef8-52fb-4144-a48f-841daee99727"}}, "__type__": "1"}, "051ef653-4db7-443b-8130-cacec4a11a8d": {"__data__": {"text": "\n\nThe Aptos Blockchain\n\nAbstract\n\nThe rise of blockchains as a new Internet infrastructure has led to developers deploying tens of\nthousands of decentralized applications at rapidly growing rates. Unfortunately, blockchain usage\nis not yet ubiquitous due to frequent outages, high costs, low throughput limits, and numerous\nsecurity concerns. To enable mass adoption in the web3 era, blockchain infrastructure needs\nto follow the path of cloud infrastructure as a trusted, scalable, cost-efficient, and continually\nimproving platform for building widely-used applications.\n\nWe present the Aptos blockchain, designed with scalability, safety, reliability, and upgradeability\nas key principles, to address these challenges. The Aptos blockchain has been developed over the\npast three years by over 350+ developers across the globe. It offers new and novel innovations\nin consensus, smart contract design, system security, performance, and decentralization. The\ncombination of these technologies will provide a fundamental building block to bring web3 to the\nmasses:\n\n- First, the Aptos blockchain natively integrates and internally uses the Move language for fast\nand secure transaction execution. The Move prover, a formal verifier for smart contracts\nwritten in the Move language, provides additional safeguards for contract invariants and\nbehavior. This focus on security allows developers to better protect their software from\nmalicious entities.\n- Second, the Aptos data model enables flexible key management and hybrid custodial options.\nThis, alongside transaction transparency prior to signing and practical light client protocols,\nprovides a safer and more trustworthy user experience.\n- Third, to achieve high throughput and low latency, the Aptos blockchain leverages a pipelined\nand modular approach for the key stages of transaction processing. Specifically, transaction\ndissemination, block metadata ordering, parallel transaction execution, batch storage, and\nledger certification all operate concurrently. This approach fully leverages all available physical resources, improves hardware efficiency, and enables highly parallel execution.\n- Fourth, unlike other parallel execution engines that break transaction atomicity by requiring\nupfront knowledge of the data to be read and written, the Aptos blockchain does not put\nsuch limitations on developers. It can efficiently support atomicity with arbitrarily complex\ntransactions, enabling higher throughput and lower latency for real-world applications and\nsimplifying development.\n- Fifth, the Aptos modular architecture design supports client flexibility and optimizes for\nfrequent and instant upgrades. Moreover, to rapidly deploy new technology innovations\nand support new web3 use cases, the Aptos blockchain provides embedded on-chain change\nmanagement protocols.\n- Finally, the Aptos blockchain is experimenting with future initiatives to scale beyond individual validator performance: its modular design and parallel execution engine support internal\nsharding of a validator and homogeneous state sharding provides the potential for horizontal\nthroughput scalability without adding additional complexity for node operators.\n\n", "doc_id": "051ef653-4db7-443b-8130-cacec4a11a8d", "embedding": null, "doc_hash": "4d7107c96942dfd72495de8b20dfc86c103232387a976c1c493ae996a7e88879", "extra_info": null, "node_info": {"start": 0, "end": 3198, "_node_type": "1"}, "relationships": {"1": "29955402-1da1-4d29-b740-c589706aa431"}}, "__type__": "1"}, "995b239d-fb2b-422a-a19f-bd547dcc5b55": {"__data__": {"text": "\n\nFull PDF versions\n\n:::tip Full PDF versions\n\n- **English**: Get the full PDF of the Aptos White Paper.\n- **Korean**: Get the Korean version full PDF of the Aptos White Paper.\n:::\n\n", "doc_id": "995b239d-fb2b-422a-a19f-bd547dcc5b55", "embedding": null, "doc_hash": "616aa03467a5703f9e6ee2cbb66004a29c7b06c7fce5d4437e0c52775ef42ed3", "extra_info": null, "node_info": {"start": 0, "end": 182, "_node_type": "1"}, "relationships": {"1": "442a9249-faf3-4a71-94db-9fbd3112f40c"}}, "__type__": "1"}, "8a7c525d-9c82-4b8f-b8e8-d1b7a467a143": {"__data__": {"text": "\n\nInstall CLI by script\n\nThe `aptos` tool is a command line interface (CLI) for developing on the Aptos blockchain, debugging Move contracts, and conducting node operations. This document describes how to install the `aptos` CLI tool using the automated install script.\n\n", "doc_id": "8a7c525d-9c82-4b8f-b8e8-d1b7a467a143", "embedding": null, "doc_hash": "0f9de6686cbeab4c57379e920f1931894a37b035c42a635e704ddcc909fa296c", "extra_info": null, "node_info": {"start": 0, "end": 271, "_node_type": "1"}, "relationships": {"1": "5b37c3be-6f48-47ec-8c84-4a3c332328b3"}}, "__type__": "1"}, "1f3a9443-5f90-463d-a05e-7f07feaf50ef": {"__data__": {"text": "\n\nPrerequisites\n\nFirst, ensure you have Python 3.6+ installed:\n```\n$ python3 --version\nPython 3.9.13\n```\nIf it is not installed, you can find installation instructions on python.org.\n\n", "doc_id": "1f3a9443-5f90-463d-a05e-7f07feaf50ef", "embedding": null, "doc_hash": "41379a62c77827bbfec09d5fd5ad22eb3bfe5dc99e06345358a64a777c70f6e9", "extra_info": null, "node_info": {"start": 0, "end": 184, "_node_type": "1"}, "relationships": {"1": "f5439aab-9a86-4a5d-ba94-7032115affba"}}, "__type__": "1"}, "5b3ac9e7-30ee-4e50-8d72-79ed7982b554": {"__data__": {"text": "\n\nInstall\n\nFollow these instructions to install the Aptos CLI on various operating systems. Regardless of the operating system, you will always be directed to the latest release of the Aptos CLI. \n\n\nmacOS / Linux / Windows Subsystem for Linux (WSL)\n\n:::tip\nThese instructions have been tested on Ubuntu 20.04, Ubuntu 22.04, Arch Linux, MacOS (ARM), and WSL and assume you have either `curl` or `wget` installed to download the script.\n:::\n\nIn your terminal, run the following `curl` command:\n\n```\ncurl -fsSL \"https://aptos.dev/scripts/install_cli.py\" | python3\n```\n\nOr with `wget`:\n```\nwget -qO- \"https://aptos.dev/scripts/install_cli.py\" | python3\n```\n\n\n\n\n\nWindows (NT)\n\n:::tip\nThese instructions have been tested on Windows 11.\n:::\n\nIn Powershell:\n```\niwr \"https://aptos.dev/scripts/install_cli.py\" -useb | Select-Object -ExpandProperty Content | python3\n```\n\n\n\n", "doc_id": "5b3ac9e7-30ee-4e50-8d72-79ed7982b554", "embedding": null, "doc_hash": "03cd7f4ef86301dd6071b0a9f4477c5b2ea0255696b17c85198239f683ee1fe2", "extra_info": null, "node_info": {"start": 0, "end": 864, "_node_type": "1"}, "relationships": {"1": "48a3c0a7-2482-4429-8572-715e3d1e9724"}}, "__type__": "1"}, "950b29a9-855c-4af3-9277-df62f998997b": {"__data__": {"text": "\n\nUpdate\n\nTo trigger an update to the Aptos CLI, run `aptos update` and see output indicating success:\n```\n{\n  \"Result\": \"CLI already up to date (v1.0.4)\"\n}\n```\n\nAlternatively, you may update your CLI by running the `python3 install_cli.py` installation script again and receiving output resembling:\n\n```\nLatest CLI release: 1.0.4\nCurrently installed CLI: 1.0.4\n\nThe latest version (1.0.4) is already installed.\n```\n\n\n\n\n", "doc_id": "950b29a9-855c-4af3-9277-df62f998997b", "embedding": null, "doc_hash": "50770055dc8f63d1fc398d4f1aba6c13dd95b204b4f6109bc22dad00943ea621", "extra_info": null, "node_info": {"start": 0, "end": 420, "_node_type": "1"}, "relationships": {"1": "2b76a650-8dc7-458f-ae36-8c49b36ca506"}}, "__type__": "1"}, "f9a1890b-148b-4093-8905-b6d6d05d35ac": {"__data__": {"text": "\n\nComputing Transaction Gas\n\nAptos transactions by default charge a base gas fee, regardless of market conditions.\nFor each transaction, this \"base gas\" amount is based on three conditions:\n\n1. Instructions.\n2. Storage.\n3. Payload.\n\nThe more function calls, branching conditional statements, etc. that a transaction requires, the more instruction gas it will cost.\nLikewise, the more reads from and writes into global storage that a transaction requires, the more storage gas it will cost.\nFinally, the more bytes in a transaction payload, the more it will cost.\n\nAs explained in the optimization principles section, storage gas has by far the largest effect on base gas. For background on the Aptos gas model, see The Making of the Aptos Gas Schedule.\n\n\n", "doc_id": "f9a1890b-148b-4093-8905-b6d6d05d35ac", "embedding": null, "doc_hash": "05444ee6ae807279e9a10888ea29b539fceb4bf7cfda3cc50657dd99e53ef1e5", "extra_info": null, "node_info": {"start": 0, "end": 755, "_node_type": "1"}, "relationships": {"1": "db9ab3a4-4029-4b9b-9bf1-c7c0820b31f9"}}, "__type__": "1"}, "faf54e05-1451-4772-8779-db33bf6cc6e2": {"__data__": {"text": "\n\nInstruction gas\n\nBasic instruction gas parameters are defined at [`instr.rs`] and include the following instruction types:\n\n", "doc_id": "faf54e05-1451-4772-8779-db33bf6cc6e2", "embedding": null, "doc_hash": "fd9ef6e4f0baf252912d50eddb8f8a5e6d547a5b258503c5dea65f325a47babf", "extra_info": null, "node_info": {"start": 0, "end": 126, "_node_type": "1"}, "relationships": {"1": "e34d5acc-9fb3-479f-9493-8000dc79513b"}}, "__type__": "1"}, "08f62edf-c8b3-4132-a70f-2b25b8cd648f": {"__data__": {"text": "\n\nNo-operation\n\n| Parameter | Meaning        |\n|-----------|----------------|\n| `nop`     | A no-operation |\n\n", "doc_id": "08f62edf-c8b3-4132-a70f-2b25b8cd648f", "embedding": null, "doc_hash": "b5280b368d2204ef32c2282fce31d7cf33e86754d9f7b027158d59a4d0f21ba1", "extra_info": null, "node_info": {"start": 0, "end": 110, "_node_type": "1"}, "relationships": {"1": "42adfb17-c62e-4f3f-b881-439956e8b16f"}}, "__type__": "1"}, "69e3a16e-06a5-4ba9-83b5-5a3816d39229": {"__data__": {"text": "\n\nControl flow\n\n| Parameter  | Meaning                          |\n|------------|----------------------------------|\n| `ret`      | Return                           |\n| `abort`    | Abort                            |\n| `br_true`  | Execute conditional true branch  |\n| `br_false` | Execute conditional false branch |\n| `branch`   | Branch                           |\n\n", "doc_id": "69e3a16e-06a5-4ba9-83b5-5a3816d39229", "embedding": null, "doc_hash": "f317488b47960cfcf599229382150fc4252ddfb3de00d1eca6351ae9c60e12a6", "extra_info": null, "node_info": {"start": 0, "end": 367, "_node_type": "1"}, "relationships": {"1": "5d3f7d14-9f3e-4257-9da5-be08d1f01d32"}}, "__type__": "1"}, "a781a603-3ad2-4a38-96a3-d7783c83b952": {"__data__": {"text": "\n\nStack\n\n| Parameter           | Meaning                          |\n|---------------------|----------------------------------|\n| `pop`               | Pop from stack                   |\n| `ld_u8`             | Load a `u8`                      |\n| `ld_u16`            | Load a `u16`                     |\n| `ld_u32`            | Load a `u32`                     |\n| `ld_u64`            | Load a `u64`                     |\n| `ld_u128`           | Load a `u128`                    |\n| `ld_256`            | Load a `u256`                    |\n| `ld_true`           | Load a `true`                    |\n| `ld_false`          | Load a `false`                   |\n| `ld_const_base`     | Base cost to load a constant     |\n| `ld_const_per_byte` | Per-byte cost to load a constant |\n\n", "doc_id": "a781a603-3ad2-4a38-96a3-d7783c83b952", "embedding": null, "doc_hash": "8e1cc528b68ee959a588f3fbee989e8b74a88c3cf3704a4108bb70c114582e1b", "extra_info": null, "node_info": {"start": 0, "end": 777, "_node_type": "1"}, "relationships": {"1": "78532feb-7f19-4be6-b28d-52d5413e794d"}}, "__type__": "1"}, "5273de13-3ebc-4e36-b2b1-6833df7888e9": {"__data__": {"text": "\n\nLocal scope\n\n| Parameter                   | Meaning                  |\n|-----------------------------|--------------------------|\n| `imm_borrow_loc`            | Immutably borrow         |\n| `mut_borrow_loc`            | Mutably borrow           |\n| `imm_borrow_field`          | Immutably borrow a field |\n| `mut_borrow_field`          | Mutably borrow a field   |\n| `imm_borrow_field_generic`  |                          |\n| `mut_borrow_field_generic`  |                          |\n| `copy_loc_base`             | Base cost to copy        |\n| `copy_loc_per_abs_val_unit` |                          |\n| `move_loc_base`             | Move                     |\n| `st_loc_base`               |                          |\n\n", "doc_id": "5273de13-3ebc-4e36-b2b1-6833df7888e9", "embedding": null, "doc_hash": "cb81d72fe5a4e19055daa4369ce4c9d2aa28eaa3c7a0762b17ad9265dc548d9a", "extra_info": null, "node_info": {"start": 0, "end": 724, "_node_type": "1"}, "relationships": {"1": "850f017c-2fab-46b4-b053-e1115354b550"}}, "__type__": "1"}, "42faf02e-4bf1-417b-a2b0-2f5647ae6f47": {"__data__": {"text": "\n\nCalling\n\n| Parameter                 | Meaning                         |\n|---------------------------|---------------------------------|\n| `call_base`               | Base cost for a function call   |\n| `call_per_arg`            | Cost per function argument      |\n| `call_per_local`          | Cost per local argument         |\n| `call_generic_base`       |                                 |\n| `call_generic_per_ty_arg` | Cost per type argument          |\n| `call_generic_per_arg`    |                                 |\n| `call_generic_per_local`  | Cost generic per local argument |\n\n", "doc_id": "42faf02e-4bf1-417b-a2b0-2f5647ae6f47", "embedding": null, "doc_hash": "db92880acdf7ef4cf55cc865ad8786e136d3d1d983d5314a0a1281c0584f4f37", "extra_info": null, "node_info": {"start": 0, "end": 588, "_node_type": "1"}, "relationships": {"1": "f066d93f-2f82-4bc8-b8df-7693408984a9"}}, "__type__": "1"}, "45c27638-5c07-47d9-9351-fe8452311504": {"__data__": {"text": "\n\nStructs\n\n| Parameter                  | Meaning                              |\n|----------------------------|--------------------------------------|\n| `pack_base`                | Base cost to pack a `struct`         |\n| `pack_per_field`           | Cost to pack a `struct`, per field   |\n| `pack_generic_base`        |                                      |\n| `pack_generic_per_field`   |                                      |\n| `unpack_base`              | Base cost to unpack a `struct`       |\n| `unpack_per_field`         | Cost to unpack a `struct`, per field |\n| `unpack_generic_base`      |                                      |\n| `unpack_generic_per_field` |                                      |\n\n", "doc_id": "45c27638-5c07-47d9-9351-fe8452311504", "embedding": null, "doc_hash": "5ecf9e15f80ad9bbb482bdb8207bbb2d1b95b34ba8e232861bc6e2252071e0fa", "extra_info": null, "node_info": {"start": 0, "end": 712, "_node_type": "1"}, "relationships": {"1": "0476a1a0-316e-44b1-b5fe-32e0c9019f5f"}}, "__type__": "1"}, "ba71bf30-1e37-4715-a97b-55ebb8d8f947": {"__data__": {"text": "\n\nReferences\n\n| Parameter                   | Meaning                            |\n|-----------------------------|------------------------------------|\n| `read_ref_base`             | Base cost to read from a reference |\n| `read_ref_per_abs_val_unit` |                                    |\n| `write_ref_base`            | Base cost to write to a reference  |\n| `freeze_ref`                | Freeze a reference                 |\n\n", "doc_id": "ba71bf30-1e37-4715-a97b-55ebb8d8f947", "embedding": null, "doc_hash": "9e243c5533f98f1766d45d9cf6b610485ebca42454e77b4195402ad0af9f562c", "extra_info": null, "node_info": {"start": 0, "end": 429, "_node_type": "1"}, "relationships": {"1": "aeb1d1bf-eaf6-4f83-977b-191495aa6420"}}, "__type__": "1"}, "e89d05d6-241a-4006-9120-c0fa83a47b75": {"__data__": {"text": "\n\nCasting\n\n| Parameter   | Meaning          |\n|-------------|------------------|\n| `cast_u8`   | Cast to a `u8`   |\n| `cast_u16`  | Cast to a `u16`  |\n| `cast_u32`  | Cast to a `u32`  |\n| `cast_u64`  | Cast to a `u64`  |\n| `cast_u128` | Cast to a `u128` |\n| `cast_u256` | Cast to a `u256` |\n\n", "doc_id": "e89d05d6-241a-4006-9120-c0fa83a47b75", "embedding": null, "doc_hash": "a6265f51bb7423c645b06a351b12e9ac53afcf3c8d46adacc28fca4fe51fad26", "extra_info": null, "node_info": {"start": 0, "end": 292, "_node_type": "1"}, "relationships": {"1": "7aa89f3c-f597-4fe2-930f-448e48f2e81d"}}, "__type__": "1"}, "123c764a-33e8-4668-b8a0-ee0446e00c25": {"__data__": {"text": "\n\nArithmetic\n\n| Parameter | Meaning  |\n|-----------|----------|\n| `add`     | Add      |\n| `sub`     | Subtract |\n| `mul`     | Multiply |\n| `mod_`    | Modulo   |\n| `div`     | Divide   |\n\n\n", "doc_id": "123c764a-33e8-4668-b8a0-ee0446e00c25", "embedding": null, "doc_hash": "6574e21cd6d86053bb001fdf23b5e44b254be1d14a8c40dd13ad7a31ee8c2ad2", "extra_info": null, "node_info": {"start": 0, "end": 191, "_node_type": "1"}, "relationships": {"1": "123438ef-52b1-482e-8c0b-2cb3f7e7092d"}}, "__type__": "1"}, "e5981211-a8f7-4ce4-97fa-ab4c1bc8f5b7": {"__data__": {"text": "\n\nBitwise\n\n| Parameter | Meaning                   |\n|-----------|---------------------------|\n| `bit_or`  | `OR`: &#124; |\n| `bit_and` | `AND`: `&`                |\n| `xor`     | `XOR`: `^`                |\n| `shl`     | Shift left: `<<`          |\n| `shr`     | Shift right: `>>`         |\n\n", "doc_id": "e5981211-a8f7-4ce4-97fa-ab4c1bc8f5b7", "embedding": null, "doc_hash": "4f550c707196c34587da2beda87433183910748bb0fdd4078cca21103aaab9b4", "extra_info": null, "node_info": {"start": 0, "end": 293, "_node_type": "1"}, "relationships": {"1": "ec52dc37-042f-410c-bec9-7173ff7f0d40"}}, "__type__": "1"}, "765b82b3-4543-4060-a2a5-b3d27c7daafe": {"__data__": {"text": "\n\nBoolean\n\n| Parameter | Meaning                         |\n|-----------|---------------------------------|\n| `or`      | `OR`: &#124;&#124; |\n| `and`     | `AND`: `&&`                     |\n| `not`     | `NOT`: `!`                      |\n\n\n", "doc_id": "765b82b3-4543-4060-a2a5-b3d27c7daafe", "embedding": null, "doc_hash": "94940eae09682d465778f36d88d62dc18bd6fc360ee1292f006acf59f3ad8cdf", "extra_info": null, "node_info": {"start": 0, "end": 240, "_node_type": "1"}, "relationships": {"1": "2e207cf5-b76a-41a5-8ead-11d362b852b7"}}, "__type__": "1"}, "2a354da0-4a3b-4205-948e-04ac4388d5df": {"__data__": {"text": "\n\nComparison\n\n| Parameter              | Meaning                        |\n|------------------------|--------------------------------|\n| `lt`                   | Less than: `<`                 |\n| `gt`                   | Greater than: `>`              |\n| `le`                   | Less than or equal to: `<=`    |\n| `ge`                   | Greater than or equal to: `>=` |\n| `eq_base`              | Base equality cost: `==`       |\n| `eq_per_abs_val_unit`  |                                |\n| `neq_base`             | Base not equal cost: `!=`      |\n| `neq_per_abs_val_unit` |                                |\n\n", "doc_id": "2a354da0-4a3b-4205-948e-04ac4388d5df", "embedding": null, "doc_hash": "4546386a0b7337101cb6d90b4acc579bf6d61814e03e532ef68e12fce61eee64", "extra_info": null, "node_info": {"start": 0, "end": 615, "_node_type": "1"}, "relationships": {"1": "e1ba55db-d93f-4e1d-bd80-bde049101faf"}}, "__type__": "1"}, "122af864-590e-485b-912b-513748c08483": {"__data__": {"text": "\n\nGlobal storage\n\n| Parameter                        | Meaning                                               |\n|----------------------------------|-------------------------------------------------------|\n| `imm_borrow_global_base`         | Base cost to immutably borrow: `borrow_global()`   |\n| `imm_borrow_global_generic_base` |                                                       |\n| `mut_borrow_global_base`         | Base cost to mutably borrow: `borrow_global_mut()` |\n| `mut_borrow_global_generic_base` |                                                       |\n| `exists_base`                    | Base cost to check existence: `exists()`           |\n| `exists_generic_base`            |                                                       |\n| `move_from_base`                 | Base cost to move from: `move_from()`              |\n| `move_from_generic_base`         |                                                       |\n| `move_to_base`                   | Base cost to move to: `move_to()`                  |\n| `move_to_generic_base`           |                                                       |\n\n", "doc_id": "122af864-590e-485b-912b-513748c08483", "embedding": null, "doc_hash": "f00b59846d1b87d52ee3b6ec576367c3dfd0d0347850430ec0a9301bc70cbc0a", "extra_info": null, "node_info": {"start": 0, "end": 1120, "_node_type": "1"}, "relationships": {"1": "d1807085-5672-4567-8bba-f74d0d5cd341"}}, "__type__": "1"}, "74367b87-b94e-4801-bd25-50ee1687000b": {"__data__": {"text": "\n\nVectors\n\n| Parameter                      | Meaning                                  |\n|--------------------------------|------------------------------------------|\n| `vec_len_base`                 | Length of a vector                       |\n| `vec_imm_borrow_base`          | Immutably borrow an element              |\n| `vec_mut_borrow_base`          | Mutably borrow an element                |\n| `vec_push_back_base`           | Push back                                |\n| `vec_pop_back_base`            | Pop from the back                        |\n| `vec_swap_base`                | Swap elements                            |\n| `vec_pack_base`                | Base cost to pack a vector               |\n| `vec_pack_per_elem`            | Cost to pack a vector per element        |\n| `vec_unpack_base`              | Base cost to unpack a vector             |\n| `vec_unpack_per_expected_elem` | Base cost to unpack a vector per element |\n\nAdditional storage gas parameters are defined in [`table.rs`], [`move_stdlib.rs`], and other assorted source files in [`aptos-gas/src/`].\n\n", "doc_id": "74367b87-b94e-4801-bd25-50ee1687000b", "embedding": null, "doc_hash": "175c9faacb4a4aa0d679c95cb5d9e07039a7e6006037d7a6ae0ca19f51501ea4", "extra_info": null, "node_info": {"start": 0, "end": 1087, "_node_type": "1"}, "relationships": {"1": "04616866-bb08-4070-9503-4a73d73f6a23"}}, "__type__": "1"}, "545aaa64-2edb-4b1d-86d4-119cc4152733": {"__data__": {"text": "\n\nStorage gas\n\nStorage gas is defined in [`storage_gas.move`], which is accompanied by a comprehensive and internally-linked DocGen file at [`storage_gas.md`].\n\n\nIn short:\n\n1. In [`initialize()`], [`base_8192_exponential_curve()`] is used to generate an exponential curve whereby per-item and per-byte costs increase rapidly as utilization approaches an upper bound.\n2. Parameters are reconfigured each epoch via [`on_reconfig()`], based on item-wise and byte-wise utilization ratios.\n3. Reconfigured parameters are stored in [`StorageGas`], which contains the following fields:\n\n| Field             | Meaning                                     |\n|-------------------|---------------------------------------------|\n| `per_item_read`   | Cost to read an item from global storage    |\n| `per_item_create` | Cost to create an item in global storage    |\n| `per_item_write`  | Cost to overwrite an item in global storage |\n| `per_byte_read`   | Cost to read a byte from global storage     |\n| `per_byte_create` | Cost to create a byte in global storage     |\n| `per_byte_write`  | Cost to overwrite a byte in global storage  |\n\nHere, an *item* is either a resource having the `key` attribute, or an entry in a table, and notably, per-byte costs are assessed on the *entire* size of an item.\nAs stated in [`storage_gas.md`], for example, if an operation mutates a `u8` field in a resource that has five other `u128` fields, the per-byte gas write cost will account for $(5 * 128) / 8 + 1 = 81$ bytes.\n\n", "doc_id": "545aaa64-2edb-4b1d-86d4-119cc4152733", "embedding": null, "doc_hash": "0fdf2179749d3477deb192b86a84a86f664bd6432ee22d7d3f66618b741022a4", "extra_info": null, "node_info": {"start": 0, "end": 1498, "_node_type": "1"}, "relationships": {"1": "778564a2-6a62-4091-9748-3fb368964a46"}}, "__type__": "1"}, "16bed9d8-d320-4c24-8e70-06481789cd40": {"__data__": {"text": "\n\nVectors\n\nByte-wise fees are similarly assessed on vectors, which consume $\\sum_{i = 0}^{n - 1} e_i + b(n)$ bytes, where:\n\n* $n$ is the number of elements in the vector\n* $e_i$ is the size of element $i$\n* $b(n)$ is a \"base size\" which is a function of $n$\n\nSee the [BCS sequence specification] for more information on vector base size (technically a `ULEB128`), which typically occupies just one byte in practice, such that a vector of 100 `u8` elements accounts for $100 + 1 = 101$ bytes.\nHence per the item-wise read methodology described above, reading the last element of such a vector is treated as a 101-byte read.\n\n", "doc_id": "16bed9d8-d320-4c24-8e70-06481789cd40", "embedding": null, "doc_hash": "6b9f7be9bc422c9a2e56e059fea7b7f0aacade5f490bb50fbce1c44415f8b985", "extra_info": null, "node_info": {"start": 0, "end": 624, "_node_type": "1"}, "relationships": {"1": "d204ce5c-6a34-47a0-9a89-4779c41c3ff2"}}, "__type__": "1"}, "5233599d-26e2-4730-8a7a-1058eac68f2a": {"__data__": {"text": "\n\nPayload gas\n\nPayload gas is defined in `transaction/mod.rs`, which incorporates storage gas with several payload- and pricing-associated parameters:\n\n| Parameter                       | Meaning                                                                                |\n|---------------------------------|----------------------------------------------------------------------------------------|\n| `min_transaction_gas_units`     | Minimum internal gas units for a transaction, charged at the start of execution        |\n| `large_transaction_cutoff`      | Size, in bytes, above which transactions will be charged an additional amount per byte |\n| `intrinsic_gas_per_byte`        | Internal gas units charged per byte for payloads above `large_transaction_cutoff`      |\n| `maximum_number_of_gas_units`   | Upper limit on external gas units for a transaction                                    |\n| `min_price_per_gas_unit`        | Minimum gas price allowed for a transaction                                            |\n| `max_price_per_gas_unit`        | Maximum gas price allowed for a transaction                                            |\n| `max_transaction_size_in_bytes` | Maximum transaction payload size in bytes                                              |\n| `gas_unit_scaling_factor`       | Conversion factor between internal gas units and external gas units                    |\n\nHere, \"internal gas units\" are defined as constants in source files like [`instr.rs`] and [`storage_gas.move`], which are more granular than \"external gas units\" by a factor of `gas_unit_scaling_factor`:\nto convert from internal gas units to external gas units, divide by `gas_unit_scaling_factor`.\nThen, to convert from external gas units to octas, multiply by the \"gas price\", which denotes the number of octas per unit of external gas.\n\n", "doc_id": "5233599d-26e2-4730-8a7a-1058eac68f2a", "embedding": null, "doc_hash": "36dd4742a77bf9fab22f9f4901948c2b69d1bb0853888e33fa4233ed6f4b2435", "extra_info": null, "node_info": {"start": 0, "end": 1843, "_node_type": "1"}, "relationships": {"1": "7fd45288-d5a3-4ce1-ab1b-dcb0a1caaf27"}}, "__type__": "1"}, "44582310-04d9-4c0a-bbb0-ce411eefd82e": {"__data__": {"text": "\n\nOptimization principles\n\n", "doc_id": "44582310-04d9-4c0a-bbb0-ce411eefd82e", "embedding": null, "doc_hash": "13d8faa297332da0909c2e22aa78f446ed0b243a3fc9e9dd64289e3062d8e15e", "extra_info": null, "node_info": {"start": 0, "end": 27, "_node_type": "1"}, "relationships": {"1": "0d5fa7a0-761d-46fe-966d-47e47e162753"}}, "__type__": "1"}, "40aac283-0f28-4e97-aaaf-dcdbc0bcf488": {"__data__": {"text": "\n\nUnit and pricing constants\n\nAs of the time of this writing, `min_price_per_gas_unit` in `transaction/mod.rs` is defined as `aptos_global_constants`]`::GAS_UNIT_PRICE` (which is itself defined as 100), with other noteworthy [`transaction/mod.rs` constants as follows:\n\n| Constant                  | Value  |\n|---------------------------|--------|\n| `min_price_per_gas_unit`  | 100    |\n| `max_price_per_gas_unit`  | 10,000 |\n| `gas_unit_scaling_factor` | 10,000 |\n\nSee Payload gas for the meaning of these constants.\n\n", "doc_id": "40aac283-0f28-4e97-aaaf-dcdbc0bcf488", "embedding": null, "doc_hash": "e9f6066c5a2187905fa86cc7724ecb1c0813ea838d47376e2c90f4a15d884805", "extra_info": null, "node_info": {"start": 0, "end": 519, "_node_type": "1"}, "relationships": {"1": "b61e3725-e94e-4d76-9a57-6df93d1751a9"}}, "__type__": "1"}, "ca4934a0-4b94-40d9-ae6b-fa40e845451c": {"__data__": {"text": "\n\nStorage gas\n\nAs of the time of this writing, [`initialize()`] sets the following minimum storage gas amounts:\n\n| Data style | Operation | Symbol | Minimum internal gas |\n|------------|-----------|--------|----------------------|\n| Per item   | Read      | $r_i$  | 300,000              |\n| Per item   | Create    | $c_i$  | 5,000,000            |\n| Per item   | Write     | $w_i$  | 300,000              |\n| Per byte   | Read      | $r_b$  | 300                  |\n| Per byte   | Create    | $c_b$  | 5,000                |\n| Per byte   | Write     | $w_b$  | 5,000                |\n\nMaximum amounts are 100 times the minimum amounts, which means that for a utilization ratio of 40% or less, total gas costs will be on the order of 1 to 1.5 times the minimum amounts (see [`base_8192_exponential_curve()`] for supporting calculations).\nHence, in terms of octas, initial mainnet gas costs can be estimated as follows (divide internal gas by scaling factor, then multiply by minimum gas price):\n\n| Operation       | Operation | Minimum octas |\n|-----------------|-----------|---------------|\n| Per-item read   | $r_i$     | 3000          |\n| Per-item create | $c_i$     | 50,000        |\n| Per-item write  | $w_i$     | 3000          |\n| Per-byte read   | $r_b$     | 3             |\n| Per-byte create | $c_b$     | 50            |\n| Per-byte write  | $w_b$     | 50            |\n\nHere, the most expensive per-item operation by far is creating a new item (via either `move_to()` or adding to a table), which costs nearly 17 times as much as reading or overwriting an old item: $c_i = 16.\\overline{6} r_i = 16.\\overline{6} w_i$. Additionally:\n\n* Writes cost the same as reads on a per-item basis: $w_i = r_i$\n* On a per-byte basis, however, writes cost the same as creates: $w_b = c_b$\n* Per-byte writes and creates cost nearly 17 times as much as per-byte reads: $w_b = c_b = 16.\\overline{6} r_b$\n* Per-item reads cost 1000 times as much as per-byte reads: $r_i = 1000 r_b$\n* Per-item creates cost 1000 times as much as per-byte creates: $c_i = 1000 c_b$\n* Per-item writes cost 60 times as much as per-byte writes: $w_i = 60 w_b$\n\nHence per-item operations cost 1000 times more than per-byte operations for both reads and creates, but only 60 times more for writes.\n\nThus, in the absence of a legitimate economic incentive to deallocate from global storage (via either `move_from()` or by removing from a table), the most effective storage gas optimization strategy is as follows:\n\n1. Minimize per-item creations\n2. Track unused items and overwrite them, rather than creating new items, when possible\n3. Contain per-item writes to as few items as possible\n4. Read, rather than write,", "doc_id": "ca4934a0-4b94-40d9-ae6b-fa40e845451c", "embedding": null, "doc_hash": "980171c442975df3f5db84e6ff29dc59dbd5d2d1a73e18bde671132353ce9192", "extra_info": null, "node_info": {"start": 0, "end": 2683, "_node_type": "1"}, "relationships": {"1": "f70da5c0-82bb-40e7-b217-5b54cbf85e60", "3": "48ac38cc-2bbb-4f45-a8e1-4a67a66cce98"}}, "__type__": "1"}, "48ac38cc-2bbb-4f45-a8e1-4a67a66cce98": {"__data__": {"text": "writes to as few items as possible\n4. Read, rather than write, whenever possible\n5. Minimize the number of bytes in all operations, especially writes\n\n", "doc_id": "48ac38cc-2bbb-4f45-a8e1-4a67a66cce98", "embedding": null, "doc_hash": "665d0c4cf72d06891d0238f6c0d1183e522f56dbabe2240b8f46156e7c643806", "extra_info": null, "node_info": {"start": 2621, "end": 2772, "_node_type": "1"}, "relationships": {"1": "f70da5c0-82bb-40e7-b217-5b54cbf85e60", "2": "ca4934a0-4b94-40d9-ae6b-fa40e845451c"}}, "__type__": "1"}, "e4f53e06-056e-4d56-805b-9f2a0fa2078f": {"__data__": {"text": "\n\nInstruction gas\n\nAs of the time of this writing, all instruction gas operations are multiplied by the `EXECUTION_GAS_MULTIPLIER` defined in [`gas_meter.rs`], which is set to 20.\nHence the following representative operations assume gas costs as follows (divide internal gas by scaling factor, then multiply by minimum gas price):\n\n| Operation                    | Minimum octas |\n|------------------------------|---------------|\n| Table add/borrow/remove box  | 240           |\n| Function call                | 200           |\n| Load constant                | 130           |\n| Globally borrow              | 100           |\n| Read/write reference         | 40            |\n| Load `u128` on stack         | 16            |\n| Table box operation per byte | 2             |\n\n(Note that per-byte table box operation instruction gas does not account for storage gas, which is assessed separately).\n\nFor comparison, reading a 100-byte item costs $r_i + 100 * r_b = 3000 + 100 * 3 = 3300$ octas at minimum, some 16.5 times as much as a function call, and in general, instruction gas costs are largely dominated by storage gas costs.\n\nNotably, however, there is still technically an incentive to reduce the number of function calls in a program, but engineering efforts are more effectively dedicated to writing modular, decomposed code that is geared toward reducing storage gas costs, rather than attempting to write repetitive code blocks with fewer nested functions (in nearly all cases).\n\nIn extreme cases it is possible for instruction gas to far outweigh storage gas, for example if a loopwise mathematical function takes 10,000 iterations to converge; but again this is an extreme case and for most applications storage gas has a larger impact on base gas than does instruction gas.\n\n", "doc_id": "e4f53e06-056e-4d56-805b-9f2a0fa2078f", "embedding": null, "doc_hash": "df714c7c3c9e665c84987caa057b529c71fb9281b51fdb17893a7c931176fb07", "extra_info": null, "node_info": {"start": 0, "end": 1786, "_node_type": "1"}, "relationships": {"1": "4b1a6b4f-ca64-45d5-9d90-d39b7a4e9520"}}, "__type__": "1"}, "fc1cc1d3-3b62-4f97-b1d3-11ed4ed7c2de": {"__data__": {"text": "\n\nPayload gas\n\nAs of the time of this writing, `transaction/mod.rs` defines the minimum amount of internal gas per transaction as 1,500,000 internal units (15,000 octas at minimum), an amount that increases by 2,000 internal gas units (20 octas minimum) per byte for payloads larger than 600 bytes, with the maximum number of bytes permitted in a transaction set at 65536.\nHence in practice, payload gas is unlikely to be a concern.\n\n\n\n[#4540]:                           https://github.com/aptos-labs/aptos-core/pull/4540/files\n[`aptos-gas/src/`]:                https://github.com/aptos-labs/aptos-core/blob/main/aptos-move/aptos-gas/src/\n[`aptos_global_constants`]:        https://github.com/aptos-labs/aptos-core/blob/main/config/global-constants/src/lib.rs\n[`base_8192_exponential_curve()`]: https://github.com/aptos-labs/aptos-core/blob/main/aptos-move/framework/aptos-framework/doc/storage_gas.md#0x1_storage_gas_base_8192_exponential_curve\n[BCS sequence specification]:      https://github.com/diem/bcs#fixed-and-variable-length-sequences\n[`gas_meter.rs`]:                  https://github.com/aptos-labs/aptos-core/blob/main/aptos-move/aptos-gas/src/gas_meter.rs\n[`initialize()`]:                  https://github.com/aptos-labs/aptos-core/blob/main/aptos-move/framework/aptos-framework/doc/storage_gas.md#0x1_storage_gas_initialize\n[`instr.rs`]:                      https://github.com/aptos-labs/aptos-core/blob/main/aptos-move/aptos-gas/src/instr.rs\n[`move_stdlib.rs`]:                https://github.com/aptos-labs/aptos-core/blob/main/aptos-move/aptos-gas/src/move_stdlib.rs\n[`on_reconfig()`]:                 https://github.com/aptos-labs/aptos-core/blob/main/aptos-move/framework/aptos-framework/doc/storage_gas.md#@Specification_16_on_reconfig\n[`storage_gas.md`]:                https://github.com/aptos-labs/aptos-core/blob/main/aptos-move/framework/aptos-framework/doc/storage_gas.md\n[`storage_gas.move`]:              https://github.com/aptos-labs/aptos-core/blob/main/aptos-move/framework/aptos-framework/sources/storage_gas.move\n[`StorageGas`]:                    https://github.com/aptos-labs/aptos-core/blob/main/aptos-move/framework/aptos-framework/doc/storage_gas.md#resource-storagegas\n[`table.rs`]:                     ", "doc_id": "fc1cc1d3-3b62-4f97-b1d3-11ed4ed7c2de", "embedding": null, "doc_hash": "5b00d524fa281f98e76bcaa8b02ab8c1e67c2b8cbb51a080dffcebd75599f674", "extra_info": null, "node_info": {"start": 0, "end": 2243, "_node_type": "1"}, "relationships": {"1": "328664f8-28cc-4db7-b69f-9d60546f065b", "3": "0ece86ea-2471-4723-abff-6b610d0ae0c6"}}, "__type__": "1"}, "0ece86ea-2471-4723-abff-6b610d0ae0c6": {"__data__": {"text": "                    https://github.com/aptos-labs/aptos-core/blob/main/aptos-move/aptos-gas/src/table.rs\n[`transaction.rs`]:                https://github.com/aptos-labs/aptos-core/blob/main/aptos-move/aptos-gas/src/transaction.rs\n\n", "doc_id": "0ece86ea-2471-4723-abff-6b610d0ae0c6", "embedding": null, "doc_hash": "cd40b3021b83f5a4d7615fad1a76e3e9faeee96ca0634cfecd9f06b93d25d77b", "extra_info": null, "node_info": {"start": 2224, "end": 2456, "_node_type": "1"}, "relationships": {"1": "328664f8-28cc-4db7-b69f-9d60546f065b", "2": "fc1cc1d3-3b62-4f97-b1d3-11ed4ed7c2de"}}, "__type__": "1"}, "f1921a70-df3a-4fa6-b682-226675790ad6": {"__data__": {"text": "\n\nAptos Blockchain Deep Dive\n\nFor a deeper understanding of the lifecycle of an Aptos transaction (from an operational perspective), we will follow a transaction on its journey, from being submitted to an Aptos fullnode, to being committed to the Aptos blockchain. We will then focus on the logical components of Aptos nodes and take a look how the transaction interacts with these components.\n\n", "doc_id": "f1921a70-df3a-4fa6-b682-226675790ad6", "embedding": null, "doc_hash": "0ad9e4a4275e793cd3bdae5fd320f88380a3dc547accd306976f129fd0ef815c", "extra_info": null, "node_info": {"start": 0, "end": 395, "_node_type": "1"}, "relationships": {"1": "3a92a60c-fea1-4e6b-8bb8-b5cc2c8fed6d"}}, "__type__": "1"}, "7b1d5d43-1f68-49d2-a970-f7f8a07377b6": {"__data__": {"text": "\n\nLife of a Transaction\n\n* Alice and Bob are two users who each have an account on the Aptos blockchain.\n* Alice's account has 110 Aptos Coins.\n* Alice is sending 10 Aptos Coins to Bob.\n* The current sequence number of Alice's account is 5 (which indicates that 5 transactions have already been sent from Alice's account).\n* There are a total of 100 validator nodes &mdash; V1 to V100 on the network.\n* An Aptos client submits Alice's transaction to a REST service on an Aptos Fullnode. The fullnode forwards this transaction to a validator fullnode which in turn forwards it to validator V1.\n* Validator V1 is a proposer/leader for the current round.\n\n", "doc_id": "7b1d5d43-1f68-49d2-a970-f7f8a07377b6", "embedding": null, "doc_hash": "fbd23cf0539f4f9ee0b1aaade9a894854b65b7f2e291dbbced525b66310b3638", "extra_info": null, "node_info": {"start": 0, "end": 653, "_node_type": "1"}, "relationships": {"1": "dd5d86fb-bf34-4b80-a174-4cfafb15813a"}}, "__type__": "1"}, "b2665a36-479c-453c-8b63-58b8b4c3e668": {"__data__": {"text": "\n\nThe Journey\n\nIn this section, we will describe the lifecycle of transaction T5, from when the client submits it to when it is committed to the Aptos blockchain.\n\nFor the relevant steps, we've included a link to the corresponding inter-component interactions of the validator node. After you are familiar with all the steps in the lifecycle of the transaction, you may want to refer to the information on the corresponding inter-component interactions for each step.\n\n\n<ThemedImage\nalt=\"Lifecycle of a transaction\"\nsources={{\n    light: useBaseUrl('/img/docs/1-life-of-txn.svg'),\n    dark: useBaseUrl('/img/docs/1-life-of-txn-dark.svg'),\n  }}\n/>\n\n\n:::tip Alert\nThe arrows in all the visuals in this article originate on the component initiating an interaction/action and terminate on the component on which the action is being performed. The arrows do not represent data read, written, or returned.\n:::\n\nThe lifecycle of a transaction has five stages:\n\n* **Accepting**: Accepting the transaction\n* **Sharing**: Sharing the transaction with other validator nodes\n* **Proposing**: Proposing the block\n* **Executing and Consensus**: Executing the block and reaching consensus\n* **Committing**: Committing the block\n\nWe've described what happens in each stage below, along with links to the corresponding Aptos node component interactions.\n\n", "doc_id": "b2665a36-479c-453c-8b63-58b8b4c3e668", "embedding": null, "doc_hash": "bd7972eae0a5c01fff4e9809c8249e07c9c56d2d5da9269a366aeee5f0bc8b69", "extra_info": null, "node_info": {"start": 0, "end": 1338, "_node_type": "1"}, "relationships": {"1": "bba3e6d3-d535-46a0-83b0-3a532723cf63"}}, "__type__": "1"}, "28327558-152b-403a-b517-04eafcce2695": {"__data__": {"text": "\n\nClient submits a transaction\n\nAn Aptos **client constructs a raw transaction** (let's call it Traw5) to transfer 10 Aptos Coins from Alice\u2019s account to Bob\u2019s account. The Aptos client signs the transaction with Alice's private key. The signed transaction T5 includes the following:\n\n* The raw transaction.\n* Alice's public key.\n* Alice's signature.\n\nThe raw transaction includes the following fields:\n\n| Fields | Description |\n| ------ | ----------- |\n| Account address | Alice's account address |\n| Move module | A module (or program) that indicates the actions to be performed on Alice's behalf. In this case, it contains:  - A Move bytecode peer-to-peer transaction script - A list of inputs to the script (for this example the list would contain Bob's account address and the payment amount in Aptos Coins). |\n| Maximum gas amount | The maximum gas amount Alice is willing to pay for this transaction. Gas is a way to pay for computation and storage. A gas unit is an abstract measurement of computation. |\n| Gas price | The amount (in Aptos Coins) Alice is willing to pay per unit of gas, to execute the transaction. |\n| Expiration time | Expiration time of the transaction. |\n| Sequence number  | The sequence number (5, in this example) for an account indicates the number of transactions that have been submitted and committed on-chain from that account. In this case, 5 transactions have been submitted from Alice\u2019s account, including Traw5. Note: a transaction with sequence number 5 can only be committed on-chain if the account sequence number is 5. |\n| Chain ID | An identifier that distinguishes the Aptos network deployments (to prevent cross-network attacks). |\n\n", "doc_id": "28327558-152b-403a-b517-04eafcce2695", "embedding": null, "doc_hash": "cc47144983d3e5be247da0dd57d3dd0d7a08a51908be45c0ad322dcddf3ec2b2", "extra_info": null, "node_info": {"start": 0, "end": 1681, "_node_type": "1"}, "relationships": {"1": "d9f064a3-8a25-4556-9900-4f839327a67a"}}, "__type__": "1"}, "409950e6-63c1-4565-9e48-590de53bb4cd": {"__data__": {"text": "\n\nAccepting the transaction\n\n| Description                                                  | Aptos Node Component Interactions                           |\n| ------------------------------------------------------------ | ---------------------------------------------------------- |\n| 1. **Client \u2192 REST service**: The client submits transaction T5 to the REST service of an Aptos fullnode. The fullnode uses the REST service to forward the transaction to its own mempool, which then forwards the transaction to mempools running on other nodes in the network. The transaction will eventually be forwarded to a mempool running on a validator fullnode, which will send it to a validator node (V1 in this case). | 1. REST Service                  |\n| 2. **REST service \u2192 Mempool**: The fullnode's mempool transmits transaction T5 to validator V1's mempool. | 2. REST Service, 1. Mempool |\n| 3. **Mempool \u2192 Virtual Machine (VM)**: Mempool will use the virtual machine (VM) component to perform transaction validation, such as signature verification, account balance verification and replay resistance using the sequence number. | 4. Mempool, 3. Virtual Machine |\n\n\n", "doc_id": "409950e6-63c1-4565-9e48-590de53bb4cd", "embedding": null, "doc_hash": "7aafaa2509a41dac9aa081e517572ace2962a3c5550828ec1e2f3b14cfab3e36", "extra_info": null, "node_info": {"start": 0, "end": 1160, "_node_type": "1"}, "relationships": {"1": "a50d9036-3872-48e0-944c-f6d688d902c3"}}, "__type__": "1"}, "a96b5ea9-50a3-452e-b243-4f15b1c9e3b9": {"__data__": {"text": "\n\nSharing the transaction with other validator nodes\n\n| Description                                                  | Aptos Node Component Interactions |\n| ------------------------------------------------------------ | -------------------------------- |\n| 4. **Mempool**: The mempool will hold T5 in an in-memory buffer. Mempool may already contain multiple transactions sent from Alice's address. | Mempool                  |\n| 5. **Mempool \u2192 Other Validators**: Using the shared-mempool protocol, V1 will share the transactions (including T5) in its mempool with other validator nodes and place transactions received from them into its own (V1) mempool. | 2. Mempool               |\n\n", "doc_id": "a96b5ea9-50a3-452e-b243-4f15b1c9e3b9", "embedding": null, "doc_hash": "e1395b975f148e6ebe201e0ec16e0be9c7394a2257d1622d9bd8a4afe4251473", "extra_info": null, "node_info": {"start": 0, "end": 687, "_node_type": "1"}, "relationships": {"1": "842dc08a-b4c1-4ff7-88af-a33309cccf21"}}, "__type__": "1"}, "04deb919-40dc-4dd5-8fdc-1499557b84f4": {"__data__": {"text": "\n\nProposing the block\n\n| Description                                                  | Aptos Node Component Interactions         |\n| ------------------------------------------------------------ | ---------------------------------------- |\n| 6. **Consensus \u2192 Mempool**: &mdash; As validator V1 is a proposer/leader for this transaction, it will pull a block of transactions from its mempool and replicate this block as a proposal to other validator nodes via its consensus component. | 1. Consensus, 3. Mempool |\n| 7. **Consensus \u2192 Other Validators**: The consensus component of V1 is responsible for coordinating agreement among all validators on the order of transactions in the proposed block. | 2. Consensus                     |\n\n", "doc_id": "04deb919-40dc-4dd5-8fdc-1499557b84f4", "embedding": null, "doc_hash": "e4d41a25ab28035092a5f8c486d519c351951f0ce2ad2dea2b0e3ed813296be0", "extra_info": null, "node_info": {"start": 0, "end": 735, "_node_type": "1"}, "relationships": {"1": "99df9c16-d2ed-4d05-a172-b7492a68a5b5"}}, "__type__": "1"}, "9eac3eb7-7ba4-40fd-9db7-fa048ec6c49f": {"__data__": {"text": "\n\nExecuting the block and reaching consensus\n\n| Description                                                  | Aptos Node Component Interactions                 |\n| ------------------------------------------------------------ | ------------------------------------------------ |\n| 8. **Consensus \u2192 Execution**: As part of reaching agreement, the block of transactions (containing T5) is shared with the execution component. | 3. Consensus, 1. Execution       |\n| 9. **Execution \u2192 Virtual Machine**: The execution component manages the execution of transactions in the VM. Note that this execution happens speculatively before the transactions in the block have been agreed upon. | 2. Execution, 3. Virtual Machine |\n| 10. **Consensus \u2192 Execution**: After executing the transactions in the block, the execution component appends the transactions in the block (including T5) to the Merkle accumulator (of the ledger history). This is an in-memory/temporary version of the Merkle accumulator. The necessary part of the proposed/speculative result of executing these transactions is returned to the consensus component to agree on. The arrow from \"consensus\" to \"execution\" indicates that the request to execute transactions was made by the consensus component. | 3. Consensus, 1. Execution       |\n| 11. **Consensus \u2192 Other Validators**: V1 (the consensus leader) attempts to reach consensus on the proposed block's execution result with the other validator nodes participating in consensus. | 3. Consensus                             |\n\n", "doc_id": "9eac3eb7-7ba4-40fd-9db7-fa048ec6c49f", "embedding": null, "doc_hash": "46c6754fdf8d278f015040f83371d23dd98e22468d3e3d94b43116ec02f1f50b", "extra_info": null, "node_info": {"start": 0, "end": 1535, "_node_type": "1"}, "relationships": {"1": "53fdd8c9-fdd8-43ec-8d3d-b75cd6ab3877"}}, "__type__": "1"}, "3c5ea5ee-f94e-4e99-836d-3f9fb818cd3b": {"__data__": {"text": "\n\nCommitting the block\n\n| Description                                                  | Aptos Node Component Interactions                             |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 12. **Consensus \u2192 Execution**, **Execution \u2192 Storage**: If the proposed block's execution result is agreed upon and signed by a set of validators that have the quorum of votes, validator V1's execution component reads the full result of the proposed block execution from the speculative execution cache and commits all the transactions in the proposed block to persistent storage with their results. | 4. Consensus, 3. Execution, 4. Execution, 3. Storage |\n\nAlice's account will now have 100 Aptos Coins, and its sequence number will be 6. If T5 is replayed by Bob, it will be rejected as the sequence number of Alice's account (6) is greater than the sequence number of the replayed transaction (5).\n\n", "doc_id": "3c5ea5ee-f94e-4e99-836d-3f9fb818cd3b", "embedding": null, "doc_hash": "fe9a64abea39a4f1626012d559ec05d694bb048d101bda6436dad27383858a7b", "extra_info": null, "node_info": {"start": 0, "end": 985, "_node_type": "1"}, "relationships": {"1": "171ca159-8773-41fc-85cd-711f33e71e65"}}, "__type__": "1"}, "c5f22aaf-9146-4a0c-979b-7b8cd96ebd1b": {"__data__": {"text": "\n\nAptos node component interactions\n\nIn the Life of a Transaction section, we described the typical lifecycle of a transaction (from transaction submission to transaction commit). Now let's look at the inter-component interactions of Aptos nodes as the blockchain processes transactions and responds to queries. This information will be most useful to those who:\n\n* Would like to get an idea of how the system works under the covers.\n* Are interested in eventually contributing to the Aptos blockchain.\n\nYou can learn more about the different types of Aptos nodes here:\n* Validator nodes\n* Fullnodes\n\nFor our narrative, we will assume that a client submits a transaction TN to a validator VX. For each validator component, we will describe each of its inter-component interactions in subsections under the respective component's section. Note that subsections describing the inter-component interactions are not listed strictly in the order in which they are performed. Most of the interactions are relevant to the processing of a transaction, and some are relevant to clients querying the blockchain (queries for existing information on the blockchain).\n\nThe following are the core components of an Aptos node used in the lifecycle of a transaction:\n\n**Fullnode**\n\n* REST Service\n\n**Validator node**\n\n* Mempool\n* Consensus\n* Execution\n* Virtual Machine\n* Storage\n\n", "doc_id": "c5f22aaf-9146-4a0c-979b-7b8cd96ebd1b", "embedding": null, "doc_hash": "2ee02b76607f04d7ec2ee186818f61c0b161326e728b91f5eae5c1fa4fd0d323", "extra_info": null, "node_info": {"start": 0, "end": 1365, "_node_type": "1"}, "relationships": {"1": "6988ece9-622f-4d47-b902-3ad82393e5f3"}}, "__type__": "1"}, "2fbdbb6f-5c5e-47c6-99ad-4052779dad2e": {"__data__": {"text": "\n\nREST Service\n\n\n<ThemedImage\nalt=\"Lifecycle of a transaction\"\nsources={{\n    light: useBaseUrl('/img/docs/7-life-of-txn.svg'),\n    dark: useBaseUrl('/img/docs/7-life-of-txn-dark.svg'),\n  }}\n/>\n\n\nAny request made by a client goes to the REST Service of a fullnode first. Then, the submitted transaction is forwarded to the validator fullnode, which then sends it to the validator node VX.\n\n", "doc_id": "2fbdbb6f-5c5e-47c6-99ad-4052779dad2e", "embedding": null, "doc_hash": "23ec0f2b7ea5eeecdb6774198064b2714ec7826ff847ffb578f63652e9d2a7fc", "extra_info": null, "node_info": {"start": 0, "end": 390, "_node_type": "1"}, "relationships": {"1": "d6fcea82-25ed-4d11-a68d-46265344d24a"}}, "__type__": "1"}, "f6de8a16-16d3-4dc1-bc48-8bd4b77b4490": {"__data__": {"text": "\n\n1. Client \u2192 REST Service\n\nA client submits a transaction to the REST service of an Aptos fullnode.\n\n", "doc_id": "f6de8a16-16d3-4dc1-bc48-8bd4b77b4490", "embedding": null, "doc_hash": "76452221eac23e8de10877f912fcccf0664bc854ef6343c8eaf4388f0fe2013e", "extra_info": null, "node_info": {"start": 0, "end": 102, "_node_type": "1"}, "relationships": {"1": "6ce1634c-5a67-4ca8-9cca-1dbe6fd8bf32"}}, "__type__": "1"}, "a6e39607-edf2-4235-81d9-55cc1f0240af": {"__data__": {"text": "\n\n2. REST Service \u2192 Mempool\n\nThe REST service of the fullnode puts the transaction in its mempool. After mempool does some initial checks, REST Service will return a status to the client indicating whether the transaction was accepted or rejected. For example, out-of-date transactions will be rejected: mempool will accept the transaction TN only if the sequence number of TN is greater than or equal to the current sequence number of the sender's account.\n\n", "doc_id": "a6e39607-edf2-4235-81d9-55cc1f0240af", "embedding": null, "doc_hash": "bef0c8ca250f163187bd54429ae1cd5f13443d26818f6c4b2c08bf7d88cccf0f", "extra_info": null, "node_info": {"start": 0, "end": 459, "_node_type": "1"}, "relationships": {"1": "7cd94887-6b5d-45d2-a0bf-2ff0df89f9d5"}}, "__type__": "1"}, "a07bd7b7-8d7f-4a68-8357-eda51cd2be7f": {"__data__": {"text": "\n\n3. Mempool -> Mempool\n\nThe mempool on the fullnode sends the transaction to the mempool of a validator fullnode, which then sends the transaction to validator node VX's mempool.  Note that the transaction will not be sent to the next mempool (or passed to consensus) until the sequence number matches the sequence number of the sender\u2019s account.\n\n", "doc_id": "a07bd7b7-8d7f-4a68-8357-eda51cd2be7f", "embedding": null, "doc_hash": "747353b56a3717b67e2518814b04ad5ea3662643e5302cbfaba4e4e9c3856374", "extra_info": null, "node_info": {"start": 0, "end": 349, "_node_type": "1"}, "relationships": {"1": "eed8bd9c-ec00-482e-9eba-bbde50b70942"}}, "__type__": "1"}, "2e796f85-8b2d-4bd8-8a94-c3a236ce83e9": {"__data__": {"text": "\n\n4. REST Service \u2192 Storage\n\nWhen a client performs a read query on the Aptos blockchain (for example, to get the balance of Alice's account), the REST service interacts with the storage component directly to obtain the requested information.\n\n", "doc_id": "2e796f85-8b2d-4bd8-8a94-c3a236ce83e9", "embedding": null, "doc_hash": "551da4a4069a61c819d70957ccfad7e2b916cf86fd40c11209189423897018e3", "extra_info": null, "node_info": {"start": 0, "end": 244, "_node_type": "1"}, "relationships": {"1": "676a5ca2-fe51-4fce-a7cb-fc8db1e432d1"}}, "__type__": "1"}, "d00f6a41-97e0-4ea8-881c-b77d5fbb41a3": {"__data__": {"text": "\n\nVirtual Machine (VM)\n\n\n<ThemedImage\nalt=\"Lifecycle of a transaction\"\nsources={{\n    light: useBaseUrl('/img/docs/2-life-of-txn.svg'),\n    dark: useBaseUrl('/img/docs/2-life-of-txn-dark.svg'),\n  }}\n/>\n\n\nThe Move VM verifies and executes transaction scripts written in Move bytecode.\n\n", "doc_id": "d00f6a41-97e0-4ea8-881c-b77d5fbb41a3", "embedding": null, "doc_hash": "183df46469def1d30380c712e3c6d66931489e8f97db8a716661fd824d9cc1a9", "extra_info": null, "node_info": {"start": 0, "end": 285, "_node_type": "1"}, "relationships": {"1": "9f12f578-ed3d-413d-acfc-abc59c25ec81"}}, "__type__": "1"}, "c837218f-c1ca-4bd3-b9cf-0058745498c6": {"__data__": {"text": "\n\n1. Virtual Machine \u2192 Storage\n\nWhen mempool requests the VM to validate a transaction via `VMValidator::validate_transaction()`, the VM loads the transaction sender's account from storage and performs verifications, some of which have been described in the list below.\n\n* Checks that the input signature on the signed transaction is correct (to reject incorrectly signed transactions).\n* Checks that the sender's account authentication key is the same as the hash of the public key (corresponding to the private key used to sign the transaction).\n* Verifies that the sequence number for the transaction is greater than or equal to the current sequence number for the sender's account. Completing this check prevents the replay of the same transaction against the sender's account.\n* Verifies that the program in the signed transaction is not malformed, as a malformed program cannot be executed by the VM.\n* Verifies that the  sender's account balance contains at least the maximum gas amount multiplied by the gas price specified in the transaction, which ensures that the transaction can pay for the resources it uses.\n\n", "doc_id": "c837218f-c1ca-4bd3-b9cf-0058745498c6", "embedding": null, "doc_hash": "9329debc3c86621aa70c1a13833836c997e083a6d98eeca2303249d3fa07869d", "extra_info": null, "node_info": {"start": 0, "end": 1123, "_node_type": "1"}, "relationships": {"1": "9cc93c36-c7b3-46b2-91c2-c4f6909a131d"}}, "__type__": "1"}, "5313a296-d5a0-4f1f-8596-23518e03ef54": {"__data__": {"text": "\n\n2. Execution \u2192 Virtual Machine\n\nThe execution component utilizes the VM to execute a transaction via `ExecutorTask::execute_transaction()`.\n\nIt is important to understand that executing a transaction is different from updating the state of the ledger and persisting the results in storage. A transaction TN is first executed as part of an attempt to reach agreement on blocks during consensus. If agreement is reached with the other validators on the ordering of transactions and their execution results, the results are persisted in storage and the state of the ledger is updated.\n\n", "doc_id": "5313a296-d5a0-4f1f-8596-23518e03ef54", "embedding": null, "doc_hash": "e8d8a3d93eda6fc348cefab9799e646215e01c166e2b7a4e87fe14336b7d368a", "extra_info": null, "node_info": {"start": 0, "end": 585, "_node_type": "1"}, "relationships": {"1": "c14133fa-da23-43de-83ea-f1a9935c0bb7"}}, "__type__": "1"}, "7be333a3-6400-4f32-81f2-420671029c2e": {"__data__": {"text": "\n\n3. Mempool \u2192 Virtual Machine\n\nWhen mempool receives a transaction from other validators via shared mempool or from the REST service, mempool invokes `VMValidator::validate_transaction()` on the VM to validate the transaction.\n\nFor implementation details refer to the Move Virtual Machine README.\n\n", "doc_id": "7be333a3-6400-4f32-81f2-420671029c2e", "embedding": null, "doc_hash": "12ca17b636e07a4fbbecc1c0221da0932acbae7060887d74526b9d44b7764556", "extra_info": null, "node_info": {"start": 0, "end": 299, "_node_type": "1"}, "relationships": {"1": "1624a9e3-8fba-47fb-8c80-ccb8b90908f5"}}, "__type__": "1"}, "908d3137-073a-4ac4-a546-f2684799fbec": {"__data__": {"text": "\n\nMempool\n\n\n<ThemedImage\nalt=\"Lifecycle of a transaction\"\nsources={{\n    light: useBaseUrl('/img/docs/3-life-of-txn.svg'),\n    dark: useBaseUrl('/img/docs/3-life-of-txn-dark.svg'),\n  }}\n/>\n\n\nMempool is a shared buffer that holds the transactions that are \u201cwaiting\u201d to be executed. When a new transaction is added to the mempool, the mempool shares this transaction with other validator nodes in the system. To reduce network consumption in the \u201cshared mempool,\u201d each validator is responsible for delivering its own transactions to other validators. When a validator receives a transaction from the mempool of another validator, the transaction is added to the mempool of the recipient validator.\n\n", "doc_id": "908d3137-073a-4ac4-a546-f2684799fbec", "embedding": null, "doc_hash": "b3ef4d5ee92791f110eb286c7012c5374c0941f432233db5e2aac78570d71df6", "extra_info": null, "node_info": {"start": 0, "end": 697, "_node_type": "1"}, "relationships": {"1": "aafcd750-c7b9-47ba-946d-b5e39a0818e6"}}, "__type__": "1"}, "85364e6b-360d-4c8b-b230-d11dcd456242": {"__data__": {"text": "\n\n1. REST Service \u2192 Mempool\n\n* After receiving a transaction from the client, the REST service sends the transaction to its own mempool, which then shares the transaction with the mempool of a validator fullnode. The mempool on the validator fullnode then shares the transaction with the mempool of a validator.\n* The mempool for validator node VX accepts transaction TN for the sender's account only if the sequence number of TN is greater than or equal to the current sequence number of the sender's account.\n\n", "doc_id": "85364e6b-360d-4c8b-b230-d11dcd456242", "embedding": null, "doc_hash": "9cc67e62634ada34fa6ce72240407553d86a2f0160b3af5c747360a73ede4429", "extra_info": null, "node_info": {"start": 0, "end": 512, "_node_type": "1"}, "relationships": {"1": "c46a4e4a-b041-4772-84b1-81a36d40084c"}}, "__type__": "1"}, "6c85adb2-f390-49c6-b6ca-04164bbab5ec": {"__data__": {"text": "\n\n2. Mempool \u2192 Other validator nodes\n\n* The mempool of validator node VX shares transaction TN with the other validators on the same network.\n* Other validators share the transactions in their respective mempools with VX\u2019s mempool.\n\n", "doc_id": "6c85adb2-f390-49c6-b6ca-04164bbab5ec", "embedding": null, "doc_hash": "531c0a0dc81a8531b0a58f8105a0396e814f28812396738efe3cd17444d56a15", "extra_info": null, "node_info": {"start": 0, "end": 233, "_node_type": "1"}, "relationships": {"1": "37a745dd-e3e4-4ba2-ab10-aa61416fa95c"}}, "__type__": "1"}, "77134024-a0bf-4c28-bf40-1cbdec248b53": {"__data__": {"text": "\n\n3. Consensus \u2192 Mempool\n\n* When the transaction is forwarded to a validator node and once the validator node becomes the leader, its consensus component will pull a block of transactions from its mempool and replicate the proposed block to other validators. It does this to arrive at a consensus on the ordering of transactions and the execution results of the transactions in the proposed block.\n* Note that just because a transaction TN was included in a proposed consensus block, it does not guarantee that TN will eventually be persisted in the distributed database of the Aptos blockchain.\n\n\n", "doc_id": "77134024-a0bf-4c28-bf40-1cbdec248b53", "embedding": null, "doc_hash": "f82d3f91e39e3564dcacee8734dc12a220c403640bcc433dbdcb03fd60fb4948", "extra_info": null, "node_info": {"start": 0, "end": 598, "_node_type": "1"}, "relationships": {"1": "882af3dd-c765-4f20-b2ff-2e77e955160c"}}, "__type__": "1"}, "78fc2642-bce6-459d-a084-135cf7aa0806": {"__data__": {"text": "\n\n4. Mempool \u2192 VM\n\nWhen mempool receives a transaction from other validators, mempool invokes VMValidator::validate_transaction() on the VM to validate the transaction.\n\n", "doc_id": "78fc2642-bce6-459d-a084-135cf7aa0806", "embedding": null, "doc_hash": "a0296b403149ea8f1d873b4642e53bb0cbce81797dc0d8e2b57591b04832648a", "extra_info": null, "node_info": {"start": 0, "end": 170, "_node_type": "1"}, "relationships": {"1": "9dde165d-31e2-44e1-a80d-33926f4e2063"}}, "__type__": "1"}, "63754755-9f89-4da2-a683-3cf91479ce17": {"__data__": {"text": "\n\nConsensus\n\n\n<ThemedImage\nalt=\"Lifecycle of a transaction\"\nsources={{\n    light: useBaseUrl('/img/docs/4-life-of-txn.svg'),\n    dark: useBaseUrl('/img/docs/4-life-of-txn-dark.svg'),\n  }}\n/>\n\n\nThe consensus component is responsible for ordering blocks of transactions and agreeing on the results of execution by participating in the consensus protocol with other validators in the network.\n\n\n", "doc_id": "63754755-9f89-4da2-a683-3cf91479ce17", "embedding": null, "doc_hash": "eca7cf7c7daa1fb29ae0d9a0d6ee9c9c0ae462e50410db86e6f6ce2416838330", "extra_info": null, "node_info": {"start": 0, "end": 392, "_node_type": "1"}, "relationships": {"1": "739b06ff-2040-4d6f-aa4a-1445d3a20e57"}}, "__type__": "1"}, "3de5373a-998d-4c3c-9703-95ff3401e551": {"__data__": {"text": "\n\n1. Consensus \u2192 Mempool\n\nWhen validator VX is a leader/proposer, the consensus component of VX pulls a block of transactions from its mempool via: `Mempool::get_batch()`, and forms a proposed block of transactions.\n\n", "doc_id": "3de5373a-998d-4c3c-9703-95ff3401e551", "embedding": null, "doc_hash": "a8cb4d072dc26e1f5f9315531d601b19ca6800da7bb5219587ccbe6082750de4", "extra_info": null, "node_info": {"start": 0, "end": 217, "_node_type": "1"}, "relationships": {"1": "026b5cff-17cc-4ebd-9450-6d636889a505"}}, "__type__": "1"}, "961c979a-1b75-4760-8222-13f6e51385b8": {"__data__": {"text": "\n\n2. Consensus \u2192 Other Validators\n\nIf VX is a proposer/leader, its consensus component replicates the proposed block of transactions to other validators.\n\n", "doc_id": "961c979a-1b75-4760-8222-13f6e51385b8", "embedding": null, "doc_hash": "2762af9374f1484bfebd2fb0235f7331df7e37db0bbaa29cf684c9c26e614e53", "extra_info": null, "node_info": {"start": 0, "end": 155, "_node_type": "1"}, "relationships": {"1": "d044ac4c-377e-4219-b45c-fa9d5d47937c"}}, "__type__": "1"}, "a7629812-b74b-4aa0-8d86-eedd1c9cabd0": {"__data__": {"text": "\n\n3. Consensus \u2192 Execution, Consensus \u2192 Other Validators\n\n* To execute a block of transactions, consensus interacts with the execution component. Consensus executes a block of transactions via `BlockExecutorTrait::execute_block()` (Refer to Consensus \u2192 execution)\n* After executing the transactions in the proposed block, the execution component responds to the consensus component with the result of executing these transactions.\n* The consensus component signs the execution result and attempts to reach agreement on this result with other validators.\n\n", "doc_id": "a7629812-b74b-4aa0-8d86-eedd1c9cabd0", "embedding": null, "doc_hash": "4ae5147c6e1ead71035d2ac952a5ca2793d05b071226a4e1e3d160d10adb9bde", "extra_info": null, "node_info": {"start": 0, "end": 555, "_node_type": "1"}, "relationships": {"1": "deb6d478-1fe6-4c12-84e4-5b579d00f3a1"}}, "__type__": "1"}, "3059b44d-b2e1-4f17-a458-56424fe2f2ab": {"__data__": {"text": "\n\n4. Consensus \u2192 Execution\n\nIf enough validators vote for the same execution result, the consensus component of VX informs execution via `BlockExecutorTrait::commit_blocks()` that this block is ready to be committed.\n\n", "doc_id": "3059b44d-b2e1-4f17-a458-56424fe2f2ab", "embedding": null, "doc_hash": "1cd0342662019cf8ccd2195e26c6871bbe84666d252666c65c38a9c6b0067fa0", "extra_info": null, "node_info": {"start": 0, "end": 218, "_node_type": "1"}, "relationships": {"1": "1638afb5-ca11-4b9e-b3dd-18cbece95b1f"}}, "__type__": "1"}, "c2d9f4ff-5bc0-4558-9f77-063e4ca4422e": {"__data__": {"text": "\n\nExecution\n\n\n<ThemedImage\nalt=\"Lifecycle of a transaction\"\nsources={{\n    light: useBaseUrl('/img/docs/5-life-of-txn.svg'),\n    dark: useBaseUrl('/img/docs/5-life-of-txn-dark.svg'),\n  }}\n/>\n\n\nThe execution component coordinates the execution of a block of transactions and maintains a transient state that can be voted upon by consensus. If these transactions are successful, they are committed to storage.\n\n", "doc_id": "c2d9f4ff-5bc0-4558-9f77-063e4ca4422e", "embedding": null, "doc_hash": "8ee9cd730a96627126c4c1cd131de7b170f5fbf33e52d13ff8a9f76ca7a7db42", "extra_info": null, "node_info": {"start": 0, "end": 409, "_node_type": "1"}, "relationships": {"1": "7841e194-0874-4213-b615-7c5468ba124d"}}, "__type__": "1"}, "1790d48d-6ed3-4ba1-abc6-604cf1feaf84": {"__data__": {"text": "\n\n1. Consensus \u2192 Execution\n\n* Consensus requests execution to execute a block of transactions via: `BlockExecutorTrait::execute_block()`.\n* Execution maintains a \u201cscratchpad,\u201d which holds in-memory copies of the relevant portions of the Merkle accumulator. This information is used to calculate the root hash of the current state of the Aptos blockchain.\n* The root hash of the current state is combined with the information about the transactions in the proposed block to determine the new root hash of the accumulator. This is done prior to persisting any data, and to ensure that no state or transaction is stored until agreement is reached by a quorum of validators.\n* Execution computes the speculative root hash and then the consensus component of VX signs this root hash and attempts to reach agreement on this root hash with other validators.\n\n", "doc_id": "1790d48d-6ed3-4ba1-abc6-604cf1feaf84", "embedding": null, "doc_hash": "c488977c8da17280ecbe2d7adc3349bc6adcddcf6e4383e91822fe9f85086b56", "extra_info": null, "node_info": {"start": 0, "end": 852, "_node_type": "1"}, "relationships": {"1": "3c5ae2f9-8c4a-482c-8a9d-9b4d6424e26f"}}, "__type__": "1"}, "ae20c680-4415-44f5-bd69-0c3a1337419d": {"__data__": {"text": "\n\n2. Execution \u2192 VM\n\nWhen consensus requests execution to execute a block of transactions via `BlockExecutorTrait::execute_block()`, execution uses the VM to determine the results of executing the block of transactions.\n\n", "doc_id": "ae20c680-4415-44f5-bd69-0c3a1337419d", "embedding": null, "doc_hash": "9ec2da51b44b81cb1b9f5c51e4f4deddb29294bb604f95c4d92609af8d01501e", "extra_info": null, "node_info": {"start": 0, "end": 221, "_node_type": "1"}, "relationships": {"1": "63ba3fe7-dd7e-4a55-bc0b-0c5160d71a1d"}}, "__type__": "1"}, "08c97fc7-a3cb-4824-bc65-07114344eb79": {"__data__": {"text": "\n\n3. Consensus \u2192 Execution\n\nIf a quorum of validators agrees on the block execution results, the consensus component of each validator informs its execution component via `BlockExecutorTrait::commit_blocks()` that this block is ready to be committed. This call to the execution component will include the signatures of the validators to provide proof of their agreement.\n\n", "doc_id": "08c97fc7-a3cb-4824-bc65-07114344eb79", "embedding": null, "doc_hash": "ed0e188b30b6764c3f328f24efef1b7fb6ea33af6a702e0c0b8def6f35bab19e", "extra_info": null, "node_info": {"start": 0, "end": 372, "_node_type": "1"}, "relationships": {"1": "e4c033bf-a1fe-4582-849b-6d9b80f42ec5"}}, "__type__": "1"}, "ef7e9920-acc9-460d-a85b-b3d6806acba8": {"__data__": {"text": "\n\n4. Execution \u2192 Storage\n\nExecution takes the values from its \u201cscratchpad\u201d and sends them to storage for persistence via `DbWriter::save_transactions()`. Execution then prunes the old values from the \u201cscratchpad\u201d that are no longer needed (for example, parallel blocks that cannot be committed).\n\nFor implementation details refer to the Execution README.\n\n", "doc_id": "ef7e9920-acc9-460d-a85b-b3d6806acba8", "embedding": null, "doc_hash": "0f7b94ab1567ba8e0b8551495c6336f6aa68b3d2ff50ded4d094d100fc9ea907", "extra_info": null, "node_info": {"start": 0, "end": 356, "_node_type": "1"}, "relationships": {"1": "84e34e1d-2a5a-4695-89f5-6b265871f4f8"}}, "__type__": "1"}, "feb11b0b-3b02-4ddd-a881-d99198af929b": {"__data__": {"text": "\n\nStorage\n\n\n<ThemedImage\nalt=\"Lifecycle of a transaction\"\nsources={{\n    light: useBaseUrl('/img/docs/6-life-of-txn.svg'),\n    dark: useBaseUrl('/img/docs/6-life-of-txn-dark.svg'),\n  }}\n/>\n\n\nThe storage component persists agreed upon blocks of transactions and their execution results to the Aptos blockchain. A block of transactions (which includes transaction TN) will be saved via storage when there is agreement between more than a quorum (2f+1) of the validators participating in consensus. Agreement must include all of the following:\n* The transactions to include in the block\n* The order of the transactions\n* The execution results of the transactions in the block\n\nRefer to Merkle accumulator for information on how a transaction is appended to the data structure representing the Aptos blockchain.\n\n", "doc_id": "feb11b0b-3b02-4ddd-a881-d99198af929b", "embedding": null, "doc_hash": "6ab32396e458068f19f63583f954df69246326ebc8decc65140a0b4c0265d08c", "extra_info": null, "node_info": {"start": 0, "end": 809, "_node_type": "1"}, "relationships": {"1": "9ce0a442-120c-42a5-b806-f484a9c562fe"}}, "__type__": "1"}, "cc1952d5-359f-4fa8-bd1b-8e2e94526d60": {"__data__": {"text": "\n\n1. VM \u2192 Storage\n\nWhen mempool invokes `VMValidator::validate_transaction()` to validate a transaction, `VMValidator::validate_transaction()` loads the sender's account from storage and performs read-only validity checks on the transaction.\n\n", "doc_id": "cc1952d5-359f-4fa8-bd1b-8e2e94526d60", "embedding": null, "doc_hash": "35a85220960dd8d4b97f3d0c32e698ad8e2de0aefd46b0762331fd26992c7246", "extra_info": null, "node_info": {"start": 0, "end": 243, "_node_type": "1"}, "relationships": {"1": "40fa11ca-84da-4d5e-932c-9617ed39dec1"}}, "__type__": "1"}, "e4d1cdc4-f4b9-4b65-8909-08bd21be7ef1": {"__data__": {"text": "\n\n2. Execution \u2192 Storage\n\nWhen the consensus component calls `BlockExecutorTrait::execute_block()`, execution reads the current state from storage combined with the in-memory \u201cscratchpad\u201d data to determine the execution results.\n\n", "doc_id": "e4d1cdc4-f4b9-4b65-8909-08bd21be7ef1", "embedding": null, "doc_hash": "f39c16743f186cc79097cff56332636a75c96d1a53356ba1bf3773045fc03336", "extra_info": null, "node_info": {"start": 0, "end": 230, "_node_type": "1"}, "relationships": {"1": "77e18644-e53c-4fb5-bb25-d7053f8a3d17"}}, "__type__": "1"}, "6fcba275-e07c-4747-9954-e216007c2b97": {"__data__": {"text": "\n\n3. Execution \u2192 Storage\n\nOnce consensus is reached on a block of transactions, execution calls storage via `DbWriter::save_transactions()` to save the block of transactions and permanently record them. This will also store the signatures from the validator nodes that agreed on this block of transactions. The in-memory data in \u201cscratchpad\u201d for this block is passed to update storage and persist the transactions. When the storage is updated, every account that was modified by these transactions will have its sequence number incremented by one.\n\nNote: The sequence number of an account on the Aptos blockchain increments by one for each committed transaction originating from that account.\n\n", "doc_id": "6fcba275-e07c-4747-9954-e216007c2b97", "embedding": null, "doc_hash": "763e062897608e9468ac7dd86cee40d2ab00c4aef7686ecabe31db736c90aa5a", "extra_info": null, "node_info": {"start": 0, "end": 694, "_node_type": "1"}, "relationships": {"1": "086f6b3f-9638-4238-8afd-7387de81564c"}}, "__type__": "1"}, "d0527de7-a03f-4842-8dc2-16b1c5a686f1": {"__data__": {"text": "\n\n4. REST Service \u2192 Storage\n\nFor client queries that read information from the blockchain, the REST service directly interacts with storage to read the requested information.\n\nFor implementation details refer to the Storage README.\n\n", "doc_id": "d0527de7-a03f-4842-8dc2-16b1c5a686f1", "embedding": null, "doc_hash": "9754668f2e5ba53973ce727f4cf6990a24c5e9d3cf7c9823ee215f029f6a092f", "extra_info": null, "node_info": {"start": 0, "end": 233, "_node_type": "1"}, "relationships": {"1": "92eda3a0-f480-491c-95c1-283d6fe206b8"}}, "__type__": "1"}, "e82bb758-0e0a-422e-a45e-19b802d01e1f": {"__data__": {"text": "\n\nBlocks\n\nAptos is a per-transaction versioned database. When transactions are executed, the resulting state of each transaction is stored separately and thus allows for more granular data access. This is different from other blockchains where only the resulting state of a block (a group of transactions) is stored.\n\nBlocks are still a fundamental unit within Aptos. Transactions are batched and executed together in a block. In addition, the proofs within storage are at the block-level granularity. The number of transactions within a block varies depending on network activity and a configurable maximum block size limit. As the blockchain becomes busier, blocks will likely contain more transactions.\n\n", "doc_id": "e82bb758-0e0a-422e-a45e-19b802d01e1f", "embedding": null, "doc_hash": "050f86e2adaefc7559749c7a309b95b1c0e267262efa6ca96753679e607b2fe2", "extra_info": null, "node_info": {"start": 0, "end": 707, "_node_type": "1"}, "relationships": {"1": "e2642afd-645a-4401-ab45-09b84f85191f"}}, "__type__": "1"}, "3c31bc52-c2fc-4164-923a-5844a1760648": {"__data__": {"text": "\n\nSystem transactions\n\nEach Aptos block contains both user transactions and special system transactions to *mark* the beginning and end of the transaction batch. Specifically, there are two system transactions:\n1. `BlockMetadataTransaction` - is inserted at the beginning of the block. A `BlockMetadata` transaction can also mark the end of an epoch and trigger reward distribution to validators.\n2. `StateCheckpointTransaction` - is appended at the end of the block and is used as a checkpoint milestone.\n\n", "doc_id": "3c31bc52-c2fc-4164-923a-5844a1760648", "embedding": null, "doc_hash": "84b0ccbdbeaf28c5eccc4c3443e3bbc250ae2da9da14445b243b9911e813629b", "extra_info": null, "node_info": {"start": 0, "end": 507, "_node_type": "1"}, "relationships": {"1": "0ba39a2b-459e-42db-b24b-1f53b2ceb9ff"}}, "__type__": "1"}, "8deef6f4-ada5-44f9-b60b-ed724c76fa4d": {"__data__": {"text": "\n\nEpochs\n\nIn Aptos, epochs represent a longer period of time in order to safely synchronize major changes such as validator set additions/removals. An epoch is a fixed duration of time, currently defined as two hours on mainnet. The number of blocks in an epoch depends on how many blocks can execute within this period of time. It is only at the start of a new epoch that major changes such as a validator joining the validator set don't immediately take effect among the validators.\n\n", "doc_id": "8deef6f4-ada5-44f9-b60b-ed724c76fa4d", "embedding": null, "doc_hash": "013a585d4c6d32a207f9263eb988da5b371aed584bd9ec95c431af4a34286e20", "extra_info": null, "node_info": {"start": 0, "end": 486, "_node_type": "1"}, "relationships": {"1": "7e8e4f41-f6b1-4058-b257-fa6494470603"}}, "__type__": "1"}, "365ec670-08f7-4ea3-afed-50f1b75394ad": {"__data__": {"text": "\n\nBool\n\n`bool` is Move's primitive type for boolean `true` and `false` values.\n\n", "doc_id": "365ec670-08f7-4ea3-afed-50f1b75394ad", "embedding": null, "doc_hash": "61b818ea915aa116343d098da6dd58c19d067bb27f3fa4d0291ce1d92fc4cd05", "extra_info": null, "node_info": {"start": 0, "end": 80, "_node_type": "1"}, "relationships": {"1": "897346e4-49e3-41d8-8edf-115b8d17befc"}}, "__type__": "1"}, "6083bf8a-ccc8-45d4-96e3-e12f062f927e": {"__data__": {"text": "\n\nLiterals\n\nLiterals for `bool` are either `true` or `false`.\n\n", "doc_id": "6083bf8a-ccc8-45d4-96e3-e12f062f927e", "embedding": null, "doc_hash": "28ccd0d67ab846a032b58526c6cc68d1ee07a3431e5d4bdf859e3566fd15e43b", "extra_info": null, "node_info": {"start": 0, "end": 63, "_node_type": "1"}, "relationships": {"1": "213f6128-74d8-4e8b-85ad-194fefbe6196"}}, "__type__": "1"}, "7a5faf1d-43c8-42d2-8b5c-53b4442845e5": {"__data__": {"text": "\n\nOperations\n\n", "doc_id": "7a5faf1d-43c8-42d2-8b5c-53b4442845e5", "embedding": null, "doc_hash": "18ec54eedc56a10e2bb2795afea17fb5358688b8e817c1b2c014ea2d5b0471c5", "extra_info": null, "node_info": {"start": 0, "end": 14, "_node_type": "1"}, "relationships": {"1": "e6821d4d-606e-437b-96c0-029346c8e313"}}, "__type__": "1"}, "f9dc9180-a52c-4fa4-8ef1-c9c00064d07b": {"__data__": {"text": "\n\nLogical\n\n`bool` supports three logical operations:\n\n| Syntax                    | Description                  | Equivalent Expression                                               |\n| ------------------------- | ---------------------------- | ------------------------------------------------------------------- |\n| `&&`                      | short-circuiting logical and | `p && q` is equivalent to `if (p) q else false`                     |\n| &vert;&vert; | short-circuiting logical or  | p &vert;&vert; q is equivalent to `if (p) true else q` |\n| `!`                       | logical negation             | `!p` is equivalent to `if (p) false else true`                      |\n\n", "doc_id": "f9dc9180-a52c-4fa4-8ef1-c9c00064d07b", "embedding": null, "doc_hash": "01f5fa8c9e22b332855040d7fd386469d0abedbfe6e1f178ac8127a8ade507a4", "extra_info": null, "node_info": {"start": 0, "end": 684, "_node_type": "1"}, "relationships": {"1": "f50872f6-76a7-412e-a5ff-dd29b2807800"}}, "__type__": "1"}, "5de54361-9138-47ca-83d7-a99ae4b69ee6": {"__data__": {"text": "\n\nControl Flow\n\n`bool` values are used in several of Move's control-flow constructs:\n\n- `if (bool) { ... }`\n- `while (bool) { .. }`\n- `assert!(bool, u64)`\n\n", "doc_id": "5de54361-9138-47ca-83d7-a99ae4b69ee6", "embedding": null, "doc_hash": "d00cbd083d7ed757d277a463367ed24c55add435adb16a1c7eb1d696f93f462b", "extra_info": null, "node_info": {"start": 0, "end": 156, "_node_type": "1"}, "relationships": {"1": "38a4369a-6922-4ed9-8b04-f828d8f40fd8"}}, "__type__": "1"}, "88db2b08-8d98-4b3d-851b-040f8e42b208": {"__data__": {"text": "\n\nOwnership\n\nAs with the other scalar values built-in to the language, boolean values are implicitly copyable,\nmeaning they can be copied without an explicit instruction such as\n`copy`.\n\n", "doc_id": "88db2b08-8d98-4b3d-851b-040f8e42b208", "embedding": null, "doc_hash": "16f694a8ec4a9fb4417e891a46543efb1687ca9d63396ee599e699aaf568b961", "extra_info": null, "node_info": {"start": 0, "end": 187, "_node_type": "1"}, "relationships": {"1": "56fe2284-6610-41d4-aa2f-f5a1610d8df1"}}, "__type__": "1"}, "92697345-6ef4-428f-af8a-636fa649c249": {"__data__": {"text": "\n\nBootstrap a New Fullnode from Snapshot\n\nThis document describes how to bootstrap a new Aptos fullnode quickly using a snapshot. Although you may bootstrap a new fullnode using state-sync, this might not be an optimal approach after the network has been running for a while; it can either take too much time, or it won't be able to fetch all required data since most nodes have already pruned ledger history. The easiest way to bootstrap a new fullnode is using an existing _fullnode snapshot_. A fullnode snapshot is simply a copy of the storage data of an existing fullnode that can be used to help start other fullnodes more quickly.\n\n:::caution Proceed with caution\nIt is not recommended to use fullnode snapshots for running fullnodes in production on **mainnet**. This is because snapshots are not fully verified by the fullnode software. As a result, the snapshot may be invalid or contain incorrect data. To prevent security issues, we recommend bootstrapping from snapshot only for test environments, e.g., **devnet** and **testnet**. If you wish to bootstrap from snapshot for **mainnet**, do not use that node in a production environment. Finally, you should always verify that any snapshot you download comes from a reputable source to avoid downloading malicious files.\n:::`\n\n", "doc_id": "92697345-6ef4-428f-af8a-636fa649c249", "embedding": null, "doc_hash": "90e9b6bba94488fc4a31ae4014fa5e5bb74a4f6e2036f9da73d1a3e1b45c9c8f", "extra_info": null, "node_info": {"start": 0, "end": 1290, "_node_type": "1"}, "relationships": {"1": "df5b1a5d-5cb4-4142-ae9a-7b257987a3f0"}}, "__type__": "1"}, "397530f3-7b8e-47f2-bb2f-f8a20f5bd2fc": {"__data__": {"text": "\n\nFind an existing fullnode snapshot\n\nThere are a number of fullnode snapshots that can be downloaded from different Aptos community members. These include:\n- BWareLabs (Testnet and Mainnet): BWareLabs Aptos Node Snapshots\n- Polkachu (Mainnet): Polkachu Aptos Node Snapshots\n\n:::tip Questions about snapshot data\nDepending on how the snapshot is constructed and compressed, the snapshot files may be different sizes. If you have any questions about the snapshot data, or run into any issues, please reach out to the Aptos community members directly via the #node-support channel in Aptos Discord.\n:::\n\n", "doc_id": "397530f3-7b8e-47f2-bb2f-f8a20f5bd2fc", "embedding": null, "doc_hash": "c5b932760f5840dfed3ec1efcc3480a0047dd77869cbd3535f1bee4961c7b6ed", "extra_info": null, "node_info": {"start": 0, "end": 602, "_node_type": "1"}, "relationships": {"1": "4acd98d5-1ab2-4420-8e01-4094905af87f"}}, "__type__": "1"}, "e83a2979-8a02-4776-929b-8246f60b4b37": {"__data__": {"text": "\n\nUse an existing fullnode snapshot\n\nTo use a snapshot, simply download and copy the files to the location of your storage database for the fullnode. This location can be found and updated in the fullnode `yaml` configuration file under `data_dir`. See Start a public fullnode for more information.\n", "doc_id": "e83a2979-8a02-4776-929b-8246f60b4b37", "embedding": null, "doc_hash": "79a35061a054ac6b04b0d67ad5c66bb6bfee36e0c3e54628e44a52233b343103", "extra_info": null, "node_info": {"start": 0, "end": 299, "_node_type": "1"}, "relationships": {"1": "ea41ab8c-021c-446f-960e-f1fb5fc9a975"}}, "__type__": "1"}, "b6766e02-599e-4de7-845e-140e8c537425": {"__data__": {"text": "\n\nBuild an End-to-End Dapp on Aptos\n\nA common way to learn a new framework or programming language is to build a simple todo list. In this tutorial, we will learn how to build an end-to-end todo list dapp, starting from the smart contract side through the front-end side and finally use of a wallet to interact with the two.\n\nSee the completed code in the my_first_dapp.\n\n", "doc_id": "b6766e02-599e-4de7-845e-140e8c537425", "embedding": null, "doc_hash": "ea5b89e9405ecf8fc0646a96a8254989019dd35583675e219c95ab435756aed6", "extra_info": null, "node_info": {"start": 0, "end": 372, "_node_type": "1"}, "relationships": {"1": "45282625-a843-45c1-a473-33e8e11644af"}}, "__type__": "1"}, "9b866eb8-2778-4856-a723-ee36b5c3e503": {"__data__": {"text": "\n\nChapters\n\nAfter meeting the prerequisites and getting set up as described below, you will follow this tutorial in this order:\n\n1. Create a smart contract\n2. Set up React app\n3. Add Wallet support\n4. Fetch Data from Chain\n5. Submit data to chain\n6. Handle Tasks\n\n", "doc_id": "9b866eb8-2778-4856-a723-ee36b5c3e503", "embedding": null, "doc_hash": "f8f25df0db0a71265c8c146601c2953a4874390aa509bbaa4c8122d3cfe9ef83", "extra_info": null, "node_info": {"start": 0, "end": 264, "_node_type": "1"}, "relationships": {"1": "fcbf8d6e-1c56-461c-955f-61aa6017ca89"}}, "__type__": "1"}, "1909b55f-514b-4549-8660-1d1d594c9ac9": {"__data__": {"text": "\n\nPrerequisites\n\nYou must have:\n\n* Aptos CLI `@1.0.4` or later\n* Aptos TypeScript SDK `@1.7.1` or later\n* Aptos Wallet Adapter `@1.0.2` or later\n* Create React App\n* node and npm\n\nAlthough we will explain some React decisions, we are not going to deep dive into how React works; so we assume you have some previous experience with React.\n\n", "doc_id": "1909b55f-514b-4549-8660-1d1d594c9ac9", "embedding": null, "doc_hash": "e4f5559acb2f00c6a249886c42909347ec5dbb8d815bd8c5598971884eea9a64", "extra_info": null, "node_info": {"start": 0, "end": 339, "_node_type": "1"}, "relationships": {"1": "f312117c-4b19-4c25-8733-95ebdb7ca4d4"}}, "__type__": "1"}, "906ebbe9-d84a-4a5b-bf8f-730dd678bbfe": {"__data__": {"text": "\n\nSetup\n\nIn this section, we will create a `my-first-dapp` directory to hold our project files, both client-side code (React based)and the Move code (our smart contract).\n\n1. Open a terminal and navigate to the desired directory for the project (for example, the `Desktop` directory).\n2. Create a new directory called `my-first-dapp`, for example:\n  ```shell\n  mkdir my-first-dapp\n  ```\n3. Navigate into that directory:\n  ```shell\n  cd my-first-dapp\n  ```\n\n  Now let's create a smart contract.\n\n", "doc_id": "906ebbe9-d84a-4a5b-bf8f-730dd678bbfe", "embedding": null, "doc_hash": "1da3de5d2dc9b62378775276373347e890234ebe7ad8372fa84fd5c356abec6f", "extra_info": null, "node_info": {"start": 0, "end": 495, "_node_type": "1"}, "relationships": {"1": "0bba3072-35df-4775-bd0d-69e5557f52d4"}}, "__type__": "1"}, "8713c129-2af8-4af9-b07f-c0c5f067e1d5": {"__data__": {"text": "\n\nBuild Aptos CLI from Source Code\n\nIf you are an advanced user and would like to build the CLI binary by downloading the source code, follow the below steps, selecting the network branch that meets your use case. Otherwise, install the prebuilt CLI binaries to ease ramp up and reduce variables in your environment.\n\nBegin by preparing your environment by following the instructions in building Aptos from source, note, you can skip the last section on *Building Aptos* as the instructions below build in release mode.\n\n\nLinux / macOS\n\n", "doc_id": "8713c129-2af8-4af9-b07f-c0c5f067e1d5", "embedding": null, "doc_hash": "f8d800d2960137546138daa9239f9cf93ab08cfbdf89a66df90cd5c5fef4962f", "extra_info": null, "node_info": {"start": 0, "end": 537, "_node_type": "1"}, "relationships": {"1": "b19d0396-ea41-45e2-82a7-49a449911fc2"}}, "__type__": "1"}, "889cc128-bd90-451f-b758-bfda94d4e193": {"__data__": {"text": "\n\nLinux / macOS\n\n", "doc_id": "889cc128-bd90-451f-b758-bfda94d4e193", "embedding": null, "doc_hash": "041b3d35c1b0bc3027bd94353d582f5a40f6369e959c4e65d8f223f893baa895", "extra_info": null, "node_info": {"start": 0, "end": 17, "_node_type": "1"}, "relationships": {"1": "492007ca-4d7c-45c5-ba42-586493db8b1d"}}, "__type__": "1"}, "76c84b2f-7c2b-42cd-80cc-6eb9ef1495b9": {"__data__": {"text": "\n\nBuilding the Aptos CLI\n\n1. Build the CLI tool: `cargo build --package aptos --release`\n1. The binary will be available in at `target/release/aptos`\n1. (Optional) Move this executable to a place on your path. For example: `~/bin/aptos`\n1. View help instructions by running `~/bin/aptos help`\n\n\n\n\nWindows\n\n", "doc_id": "76c84b2f-7c2b-42cd-80cc-6eb9ef1495b9", "embedding": null, "doc_hash": "422249a41773627307617d50c55b6aed540bbd5bf4c07bc2061f055829ed754f", "extra_info": null, "node_info": {"start": 0, "end": 306, "_node_type": "1"}, "relationships": {"1": "3fcbc9f1-cf00-401f-beb6-0bbab0998763"}}, "__type__": "1"}, "c1caac64-6b69-4b21-9255-267eacad7e2a": {"__data__": {"text": "\n\nWindows\n\n", "doc_id": "c1caac64-6b69-4b21-9255-267eacad7e2a", "embedding": null, "doc_hash": "5b6ec4be294c135fad73d086ee29a2336c84ee4fbbfe659a07e849d3d079dab6", "extra_info": null, "node_info": {"start": 0, "end": 11, "_node_type": "1"}, "relationships": {"1": "f18e0a6d-c879-4819-8e43-ed2a4813a509"}}, "__type__": "1"}, "b31a4351-0f61-44a7-a91e-ee201407401e": {"__data__": {"text": "\n\nBuilding aptos-core\n    \n1. Build the CLI tool: `cargo build --package aptos --release`\n1. The binary will be available at `target\\release\\aptos.exe`\n1. View help instructions by running `target\\release\\aptos.exe`\n\n\n\n", "doc_id": "b31a4351-0f61-44a7-a91e-ee201407401e", "embedding": null, "doc_hash": "9d040c6230fc8e2d3e6dd90175b963540b919a9fb341b918a23e77094c65ae86", "extra_info": null, "node_info": {"start": 0, "end": 219, "_node_type": "1"}, "relationships": {"1": "4b49ab8c-6058-47a3-a28c-26220dab32f9"}}, "__type__": "1"}, "6829c7f1-07aa-4239-a2da-36bd71d2bd9e": {"__data__": {"text": "\n\nBuilding Aptos From Source\n\nBinary releases are available, but if you want to build from source or develop on the Aptos tools, this is how.\n\n", "doc_id": "6829c7f1-07aa-4239-a2da-36bd71d2bd9e", "embedding": null, "doc_hash": "5ee010ce792387f017931b2a16a1ed825b9e3e4e27df057507ed981bf64bd274", "extra_info": null, "node_info": {"start": 0, "end": 143, "_node_type": "1"}, "relationships": {"1": "1260e740-fec1-4b71-89a6-44f4dc2c2bcc"}}, "__type__": "1"}, "98e07415-d72b-4fd1-8873-681891774194": {"__data__": {"text": "\n\nSupported operating systems\n\nAptos can be built on various operating systems, including Linux, macOS. and Windows. Aptos is tested extensively on Linux and macOS, and less so on Windows. Here are the versions we use:\n\n* Linux - Ubuntu version 20.04 and 22.04\n* macOS - macOS Monterey and later\n* Microsoft Windows - Windows 10, 11 and Windows Server 2022+\n\n", "doc_id": "98e07415-d72b-4fd1-8873-681891774194", "embedding": null, "doc_hash": "5f2fb0d5de3299a2fef80f64b2f5a22533eafd1a664e94999260f0f758835f12", "extra_info": null, "node_info": {"start": 0, "end": 359, "_node_type": "1"}, "relationships": {"1": "7c87e48d-f831-4771-a897-411832e4ce01"}}, "__type__": "1"}, "e97b81f9-d2ac-44a2-9f4b-0a49c7e124f2": {"__data__": {"text": "\n\nClone the Aptos-core repo\n\n\n1. Install Git. Git is required to clone the aptos-core repo, and will be need to be installed prior to continuing.  You can install it with the instructions on the official Git website.\n\n1. Clone the Aptos repository. To clone the Aptos repository (repo), you first need to open a command line prompt (Terminal on Mac / Linux, Powershell on Windows).  Then run the following command to clone the Git repository from GitHub.\n\n      ```\n      git clone https://github.com/aptos-labs/aptos-core.git\n      ```\n\n1. Now let's go into the newly created directory `aptos-core` by *changing directory* or `cd`ing into it:\n    ```\n    cd aptos-core\n    ```\n\n", "doc_id": "e97b81f9-d2ac-44a2-9f4b-0a49c7e124f2", "embedding": null, "doc_hash": "5250b4ccb34bf7fdcf1187aaf2b26a58d8babe9cca4f094ed5f93400a61731b6", "extra_info": null, "node_info": {"start": 0, "end": 679, "_node_type": "1"}, "relationships": {"1": "f747fd90-81df-4229-a772-917138d41918"}}, "__type__": "1"}, "6ebcf898-026b-4a7c-b921-6ed40845ad50": {"__data__": {"text": "\n\n(Optional) Check out release branch\n\nOptionally, check out a release branch to install an Aptos node. We suggest you check out `devnet` for your first development. See Choose a network for an explanation of their differences.\n\n\nRelease Branches\n\n    \n\n    git checkout --track origin/devnet\n\n\n    \n\n    git checkout --track origin/testnet\n\n\n\n\n    git checkout --track origin/mainnet\n\n\n\n\n\n", "doc_id": "6ebcf898-026b-4a7c-b921-6ed40845ad50", "embedding": null, "doc_hash": "66ea95e48e9b2b14bf475e730fa6d0ef1367337da1d7a281a28ec627968d87c4", "extra_info": null, "node_info": {"start": 0, "end": 390, "_node_type": "1"}, "relationships": {"1": "f43eacd5-490b-4c0b-9256-585f557f2c9a"}}, "__type__": "1"}, "8d07a67f-0b88-409d-964d-a2f13d08bb99": {"__data__": {"text": "\n\nSet up build dependencies\n\nPrepare your developer environment by installing the dependencies needed to build, test and inspect Aptos Core.\nNo matter your selected mechanism for installing these dependencies, **it is imperative you keep your entire toolchain up-to-date**. If you encounter issues later, update all packages and try again.\n\n\nmacOS\n\n**> Using the automated script**\n\n1. Ensure you have `brew` package manager installed: https://brew.sh/\n1. Run the dev setup script to prepare your environment: `./scripts/dev_setup.sh`\n1. Update your current shell environment: `source ~/.cargo/env`.\n\n:::tip\nYou can see the available options for the script by running `./scripts/dev_setup.sh --help`\n:::\n\n**> Manual installation of dependencies**\n\nIf the script above doesn't work for you, you can install these manually, but it's **not recommended**.\n\n1. Rust\n1. CMake\n1. LLVM\n1. LLD\n\n\n\n\nLinux\n\n**> Using the automated script**\n\n1. Run the dev setup script to prepare your environment: `./scripts/dev_setup.sh`\n1. Update your current shell environment: `source ~/.cargo/env`\n\n:::tip\nYou can see the available options for the script by running `./scripts/dev_setup.sh --help`\n:::\n\n**> Manual installation of dependencies**\n\nIf the script above does not work for you, you can install these manually, but it is **not recommended**:\n\n1. Rust.\n1. CMake.\n1. LLVM.\n1. libssl-dev and libclang-dev\n\n\n\n\nWindows\n\n**> Using the automated script**\n\n1. Open a PowerShell terminal as an administrator.\n1. Run the dev setup script to prepare your environment: `PowerShell -ExecutionPolicy Bypass -File ./scripts/windows_dev_setup.ps1`\n\n**> Manual installation of dependencies**\n\n1. Install Rust.\n1. Install LLVM.  Visit their GitHub repository for the latest prebuilt release.\n1. Install Microsoft Visual Studio Build Tools for Windows. During setup, select \"Desktop development with C++\" and three additional options: MSVC C++ build tools, Windows 10/11 SDK, and C++ CMake tools for Windows.\n1. If on Windows ARM, install Visual Studio.\n1. If not already installed during Visual Studio/Build Tools installation, install CMake.\n\n1. Open a new PowerShell terminal after installing all dependencies\n\n\n\n", "doc_id": "8d07a67f-0b88-409d-964d-a2f13d08bb99", "embedding": null, "doc_hash": "16223e785fe812a7654200c05d3bbd29d41ede555bb9c8b54fa8b9f0c70e5c7f", "extra_info": null, "node_info": {"start": 0, "end": 2185, "_node_type": "1"}, "relationships": {"1": "11088382-e955-4371-b310-88f9d2fe4f10"}}, "__type__": "1"}, "c1eefae3-cc67-48e5-9d9f-00a4b7e6b7f6": {"__data__": {"text": "\n\nAdditional Tools\n\nIf you used `scripts/dev_setup.sh` for MacOS or Linux setup, additional tools are optionally available.\n\n", "doc_id": "c1eefae3-cc67-48e5-9d9f-00a4b7e6b7f6", "embedding": null, "doc_hash": "cb4f5bd1a6af0f9c89b8c48d9f6b3ec2d8f5fc4e2138a20a08b032844cffe966", "extra_info": null, "node_info": {"start": 0, "end": 125, "_node_type": "1"}, "relationships": {"1": "a1e84941-134a-4ead-9087-44c3502bd625"}}, "__type__": "1"}, "933f5af3-8554-4e36-8a70-892baf030120": {"__data__": {"text": "\n\nTypeScript\nTypically only needed for _developing_ the TypeScript SDK.\nUsing the released SDK can be achieved from npm/pnpm/yarn.\n```bash\nscripts/dev_setup.sh -J\n```\n\n", "doc_id": "933f5af3-8554-4e36-8a70-892baf030120", "embedding": null, "doc_hash": "b0f826b03ee37f6fda8076e7ce3317b731574ca13fb1a56d3f076a059d666a36", "extra_info": null, "node_info": {"start": 0, "end": 168, "_node_type": "1"}, "relationships": {"1": "d8d08908-1033-493f-9b7c-46e34b7f604d"}}, "__type__": "1"}, "d60190fa-b811-41b8-9393-d38ea1570bf9": {"__data__": {"text": "\n\nPostgreSQL\nUsed in the Indexer.\n```bash\nscripts/dev_setup.sh -P\n```\n\n", "doc_id": "d60190fa-b811-41b8-9393-d38ea1570bf9", "embedding": null, "doc_hash": "4bba4dfdd0f83df9ede6132b4e616f6bbce2f795ff73293634eacb427ba1795c", "extra_info": null, "node_info": {"start": 0, "end": 71, "_node_type": "1"}, "relationships": {"1": "71002fdb-a68e-4667-adb5-cffbe9a02352"}}, "__type__": "1"}, "2aa28232-03ac-4d78-8548-04c36b65dd2f": {"__data__": {"text": "\n\nMove Prover Tools\n```bash\nscripts/dev_setup.sh -y -p\n```\n\n\n\nNow your basic Aptos development environment is ready. Head over to our Developer Tutorials to get started in Aptos.\n\n", "doc_id": "2aa28232-03ac-4d78-8548-04c36b65dd2f", "embedding": null, "doc_hash": "6183b4254c51fcf2620b1a0fb1f92eac4a81ec01e11592cdac9f1e1b6b416473", "extra_info": null, "node_info": {"start": 0, "end": 180, "_node_type": "1"}, "relationships": {"1": "6195b433-c2f9-42f2-8215-2fb70725e328"}}, "__type__": "1"}, "732dbef7-b531-4412-9213-b31609853961": {"__data__": {"text": "\n\nBuilding Aptos\n\nThe simplest check that you have a working environment is to build everything and run the tests.\n\n```bash\ncargo build\ncargo test -- --skip prover\n```\n\nIf you installed the Move Prover Tools above then you don't need to skip the prover tests.\n\nOther documentation of specific tools has recommended patterns for `cargo build` and `cargo run`\n\n* Run a Local Testnet\n* Indxer\n* Node Health Checker\n* Develop in a Local Testnet\n* Running a Local Multinode Network\n\n", "doc_id": "732dbef7-b531-4412-9213-b31609853961", "embedding": null, "doc_hash": "01df2c49eb9ab47e912987a50c594186ba3558f1818cfd6c5685ff7c5630786b", "extra_info": null, "node_info": {"start": 0, "end": 478, "_node_type": "1"}, "relationships": {"1": "5737f903-a9fc-4369-9036-259efba234c7"}}, "__type__": "1"}, "6944bd0d-e3e7-4aa6-a476-41e754ebaae5": {"__data__": {"text": "\n\nUse the Aptos Move CLI\n\nThe `aptos` tool is a command line interface (CLI) for developing on the Aptos blockchain, debugging, and for node operations. This document describes how to use the `aptos` CLI tool. To download or build the CLI, follow Install Aptos CLI.\n\n", "doc_id": "6944bd0d-e3e7-4aa6-a476-41e754ebaae5", "embedding": null, "doc_hash": "2a0321334c8699f6d04102ce3d8c27653d1ea7994e48f77174427f9c65e3c2c9", "extra_info": null, "node_info": {"start": 0, "end": 267, "_node_type": "1"}, "relationships": {"1": "c3951318-4056-4a87-9f6a-894394f51e5e"}}, "__type__": "1"}, "fa89eeee-d50c-4b46-a767-cb0394f028bc": {"__data__": {"text": "\n\nCompiling Move\n\nThe `aptos` CLI can be used to compile a Move package locally.\nThe below example uses the `HelloBlockchain` in move-examples.\n\nThe named addresses can be either an account address, or a profile name.\n\n```bash\n$ aptos move compile --package-dir aptos-move/move-examples/hello_blockchain/ --named-addresses hello_blockchain=superuser\n```\n\nThe above command will generate the below terminal output:\n```bash\n{\n  \"Result\": [\n    \"742854F7DCA56EA6309B51E8CEBB830B12623F9C9D76C72C3242E4CAD353DEDC::Message\"\n  ]\n}\n```\n\n", "doc_id": "fa89eeee-d50c-4b46-a767-cb0394f028bc", "embedding": null, "doc_hash": "65d5b5def5f4ed10c0c9c009f71e9889a49dbd6dfddd802e9c95c0c8e6c7be83", "extra_info": null, "node_info": {"start": 0, "end": 529, "_node_type": "1"}, "relationships": {"1": "117820a5-1cf1-4f5c-8ed6-d8a734c06490"}}, "__type__": "1"}, "863bf6c1-05d6-450b-b514-00aae974bf5d": {"__data__": {"text": "\n\nCompiling and unit testing Move\n\nThe `aptos` CLI can also be used to compile and run unit tests locally.\nIn this example, we'll use the `HelloBlockchain` in move-examples.\n\n```bash\n$ aptos move test --package-dir aptos-move/move-examples/hello_blockchain/ --named-addresses hello_blockchain=superuser\n```\nThe above command will generate the following terminal output:\n```bash\nINCLUDING DEPENDENCY AptosFramework\nINCLUDING DEPENDENCY AptosStdlib\nINCLUDING DEPENDENCY MoveStdlib\nBUILDING Examples\nRunning Move unit tests\n[ PASS    ] 0x742854f7dca56ea6309b51e8cebb830b12623f9c9d76c72c3242e4cad353dedc::MessageTests::sender_can_set_message\n[ PASS    ] 0x742854f7dca56ea6309b51e8cebb830b12623f9c9d76c72c3242e4cad353dedc::Message::sender_can_set_message\nTest result: OK. Total tests: 2; passed: 2; failed: 0\n{\n  \"Result\": \"Success\"\n}\n```\n", "doc_id": "863bf6c1-05d6-450b-b514-00aae974bf5d", "embedding": null, "doc_hash": "8a016362afffa99cbff225f23642f4476729b5c0df849eaea9ac827bff6e61d1", "extra_info": null, "node_info": {"start": 0, "end": 834, "_node_type": "1"}, "relationships": {"1": "91fff3c8-467e-4c69-8a04-9363c961754d"}}, "__type__": "1"}, "8d1d51a3-caa5-4fe1-8796-a8c186c8aab2": {"__data__": {"text": "\n\nGenerating test coverage details for Move\nThe `aptos` CLI can be used to analyze and improve the testing of your Move modules. To use this feature:\n1. In your `aptos-core` source checkout, navigate to the `aptos-move/framework/move-stdlib` directory.\n2. Execute the command:\n   ```bash\n   $ aptos move test --coverage\n   ```\n3. Receive results in standard output containing the result for each test case followed by a basic coverage summary resembling:\n   ```bash\n   BUILDING MoveStdlib\nRunning Move unit tests\n[ PASS    ] 0x1::vector_tests::append_empties_is_empty\n[ PASS    ] 0x1::option_tests::borrow_mut_none\n[ PASS    ] 0x1::fixed_point32_tests::ceil_can_round_up_correctly\n[ PASS    ] 0x1::features::test_change_feature_txn\n[ PASS    ] 0x1::bcs_tests::bcs_bool\n[ PASS    ] 0x1::bit_vector_tests::empty_bitvector\n[ PASS    ] 0x1::option_tests::borrow_mut_some\nTest result: OK. Total tests: 149; passed: 149; failed: 0\n+-------------------------+\n| Move Coverage Summary   |\n+-------------------------+\nModule 0000000000000000000000000000000000000000000000000000000000000001::bcs\n>>> % Module coverage: NaN\nModule 0000000000000000000000000000000000000000000000000000000000000001::fixed_point32\n>>> % Module coverage: 100.00\nModule 0000000000000000000000000000000000000000000000000000000000000001::hash\n>>> % Module coverage: NaN\nModule 0000000000000000000000000000000000000000000000000000000000000001::vector\n>>> % Module coverage: 92.19\nModule 0000000000000000000000000000000000000000000000000000000000000001::error\n>>> % Module coverage: 0.00\nModule 0000000000000000000000000000000000000000000000000000000000000001::acl\n>>> % Module coverage: 0.00\nModule 0000000000000000000000000000000000000000000000000000000000000001::bit_vector\n>>> % Module coverage: 97.32\nModule 0000000000000000000000000000000000000000000000000000000000000001::signer\n>>> % Module coverage: 100.00\nModule 0000000000000000000000000000000000000000000000000000000000000001::features\n>>> % Module coverage: 69.41\nModule 0000000000000000000000000000000000000000000000000000000000000001::option\n>>> % Module coverage: 100.00\nModule 0000000000000000000000000000000000000000000000000000000000000001::string\n>>> % Module coverage: 81.82\n+-------------------------+\n| % Move Coverage: 83.50  |\n+-------------------------+\nPlease use `aptos move coverage -h` for more detailed test coverage of this package\n{\n  \"Result\": \"Success\"\n}\n   ```\n\n4. Optionally, narrow down your test runs and results to a specific package name with the `--filter` option, like so:\n   ```bash\n   $ aptos move test --coverage --filter vector\n   ```\n\n   With results like:\n   ```\n   BUILDING MoveStdlib\n   Running Move unit tests\n   [ PASS    ] 0x1::bit_vector_tests::empty_bitvector\n   [ PASS    ] 0x1::vector_tests::append_empties_is_empty\n   [ PASS    ] 0x1::bit_vector_tests::index_bit_out_of_bounds\n   [ PASS    ] 0x1::vector_tests::append_respects_order_empty_lhs\n   ```\n5. Run the `aptos move coverage` command to obtain more detailed coverage information.\n6. Optionally, isolate the results to a module by passing its name to the `--module` option, for example:\n   ```bash\n   $ aptos move coverage source --module signer\n   ```\n\n   With results:\n   ```\n   module std::signer {\n       // Borrows the address of the signer\n       // Conceptually, you can think of the `signer` as being a struct wrapper arround an\n       // address\n       // ```\n       // struct signer has drop { addr: address }\n       // ```\n       //", "doc_id": "8d1d51a3-caa5-4fe1-8796-a8c186c8aab2", "embedding": null, "doc_hash": "58729691c021fc4c255cfd9872117c28c0bfab1524002851c9752aad03b6d6b9", "extra_info": null, "node_info": {"start": 0, "end": 3471, "_node_type": "1"}, "relationships": {"1": "5cdde2d8-1017-41ec-b4e5-be809fc0b615", "3": "5480dc9d-084d-4012-87a7-33d24efa01ab"}}, "__type__": "1"}, "5480dc9d-084d-4012-87a7-33d24efa01ab": {"__data__": {"text": "address }\n       // ```\n       // `borrow_address` borrows this inner field\n       native public fun borrow_address(s: &signer): &address;\n\n       // Copies the address of the signer\n       public fun address_of(s: &signer): address {\n           *borrow_address(s)\n       }\n\n    /// Return true only if `s` is a transaction signer. This is a spec function only available in spec.\n    spec native fun is_txn_signer(s: signer): bool;\n\n    /// Return true only if `a` is a transaction signer address. This is a spec function only available in spec.\n    spec native fun is_txn_signer_addr(a: address): bool;\n}\n{\n  \"Result\": \"Success\"\n}\n   ```\n6. Find failures and iteratively improve your testing and running these commands to eliminate gaps in your testing coverage.\n\n", "doc_id": "5480dc9d-084d-4012-87a7-33d24efa01ab", "embedding": null, "doc_hash": "3d14eef65b63e48ffc2adb3c0cba9a813e06f26d981a2b35b191187ab55ef1c6", "extra_info": null, "node_info": {"start": 3438, "end": 4203, "_node_type": "1"}, "relationships": {"1": "5cdde2d8-1017-41ec-b4e5-be809fc0b615", "2": "8d1d51a3-caa5-4fe1-8796-a8c186c8aab2"}}, "__type__": "1"}, "f7409bd2-c3b4-45e8-848c-06d55515c6ad": {"__data__": {"text": "\n\nProving Move\n\nThe `aptos` CLI can be used to run Move Prover, which is a formal verification tool for the Move language. The below example proves the `hello_prover` package in move-examples.\n```bash\naptos move prove --package-dir aptos-move/move-examples/hello_prover/\n```\nThe above command will generate the following terminal output:\n```bash\nSUCCESS proving 1 modules from package `hello_prover` in 1.649s\n{\n  \"Result\": \"Success\"\n}\n```\n\nMove Prover may fail with the following terminal output if the dependencies are not installed and set up properly:\n```bash\nFAILURE proving 1 modules from package `hello_prover` in 0.067s\n{\n  \"Error\": \"Move Prover failed: No boogie executable set.  Please set BOOGIE_EXE\"\n}\n```\nIn this case, see Install the dependencies of Move Prover.\n\n", "doc_id": "f7409bd2-c3b4-45e8-848c-06d55515c6ad", "embedding": null, "doc_hash": "daceddc58268d14f1cbe7718b518d4bea811af4839350927a3c35dfb17c867c2", "extra_info": null, "node_info": {"start": 0, "end": 778, "_node_type": "1"}, "relationships": {"1": "5426c61a-23aa-4386-a6b6-55b8ed224e02"}}, "__type__": "1"}, "5ae2918e-7a8d-4e02-8150-5919ed4c5496": {"__data__": {"text": "\n\nProfiling gas usage\n\nThis *experimental* feature lets you profile gas usage in the Aptos virtual machine locally rather than simulating transactions at the fullnode. You may also use it to visualize gas usage in the form of a flame graph.\n\nRun the gas profiler by appending the `--profile-gas` option to the Aptos CLI `move publish`, `move run` or `move run-script` command, for example:\n```bash\naptos move publish --profile-gas\n```\n\nAnd receive output resembling:\n```bash\nCompiling, may take a little while to download git dependencies...\nBUILDING empty_fun\npackage size 427 bytes\nSimulating transaction locally with the gas profiler...\nThis is still experimental so results may be inaccurate.\nExecution & IO Gas flamegraph saved to gas-profiling/txn-69e19ee4-0x1-code-publish_package_txn.exec_io.svg\nStorage fee flamegraph saved to gas-profiling/txn-69e19ee4-0x1-code-publish_package_txn.storage.svg\n{\n  \"Result\": {\n    \"transaction_hash\": \"0x69e19ee4cc89cb1f84ee21a46e6b281bd8696115aa332275eca38c4857818dfe\",\n    \"gas_used\": 1007,\n    \"gas_unit_price\": 100,\n    \"sender\": \"dbcbe741d003a7369d87ec8717afb5df425977106497052f96f4e236372f7dd5\",\n    \"success\": true,\n    \"version\": 473269362,\n    \"vm_status\": \"status EXECUTED of type Execution\"\n  }\n}\n```\n\nFind the flame graphs in the newly created `gas-profiling/` directory. To interact with a graph, open the file in a web browser.\n\nNote these limitations of the experimental gas profiling feature:\n\n  * It may produce results that are different from the simulation.\n  * The graphs may contain errors, and the numbers may not add up to the total gas cost as shown in the transaction output.\n\n", "doc_id": "5ae2918e-7a8d-4e02-8150-5919ed4c5496", "embedding": null, "doc_hash": "ef9f42ba7a57f432bb305149476eb5dac426821da533b53dd40aaeb10acfecd1", "extra_info": null, "node_info": {"start": 0, "end": 1645, "_node_type": "1"}, "relationships": {"1": "128a82a6-782b-41e2-80be-d4e6ba57d06a"}}, "__type__": "1"}, "c81a0742-9568-4ab3-9ee9-e3af4bd12093": {"__data__": {"text": "\n\nDebugging and printing stack trace\n\nIn this example, we will use `DebugDemo` in debug-move-example.\n\nNow, you can use `debug::print` and `debug::print_stack_trace` in your DebugDemo Move file.\n\nYou can run the following command:\n```bash\n$ aptos move test --package-dir crates/aptos/debug-move-example\n```\n\nThe command will generate the following output:\n```bash\nRunning Move unit tests\n[debug] 0000000000000000000000000000000000000000000000000000000000000001\nCall Stack:\n    [0] 0000000000000000000000000000000000000000000000000000000000000001::Message::sender_can_set_message\n\n        Code:\n            [4] CallGeneric(0)\n            [5] MoveLoc(0)\n            [6] LdConst(0)\n          > [7] Call(1)\n            [8] Ret\n\n        Locals:\n            [0] -\n            [1] 0000000000000000000000000000000000000000000000000000000000000001\n\n\nOperand Stack:\n```\n\n\n", "doc_id": "c81a0742-9568-4ab3-9ee9-e3af4bd12093", "embedding": null, "doc_hash": "051bf664b8c1b4162dd56e32dd45e65166dccce88ed45002e9b5d7e75b1680db", "extra_info": null, "node_info": {"start": 0, "end": 862, "_node_type": "1"}, "relationships": {"1": "6e840e2a-8ce4-4f88-947a-00c121b5992e"}}, "__type__": "1"}, "4d364e6a-ec4d-4966-8cb3-e50b2ffa138c": {"__data__": {"text": "\n\nPublishing a Move package with a named address\n\nIn this example, we'll use the `HelloBlockchain` in move-examples.\n\nPublish the package with your account address set for `HelloBlockchain`.\n\nHere, you need to change 8946741e5c907c43c9e042b3739993f32904723f8e2d1491564d38959b59ac71 to your account address.\n```bash\n$ aptos move publish --package-dir aptos-move/move-examples/hello_blockchain/ --named-addresses HelloBlockchain=8946741e5c907c43c9e042b3739993f32904723f8e2d1491564d38959b59ac71\n```\n\n:::tip\nAs an open source project, the source code as well as compiled code published to the Aptos blockchain is inherently open by default. This means code you upload may be downloaded from on-chain data. Even without source access, it is possible to regenerate Move source from Move bytecode. To disable source access, publish with the `--included-artifacts none` argument, like so:\n\n```\naptos move publish --included-artifacts none\n```\n:::\n\nYou can additionally use named profiles for the addresses.  The first placeholder is `default`\n```bash\n$ aptos move publish --package-dir aptos-move/move-examples/hello_blockchain/ --named-addresses HelloBlockchain=default\n```\n\n:::tip\nWhen publishing Move modules, if multiple modules are in one package, then all the modules in this package must have the same account. If they have different accounts, then the publishing will fail at the transaction level.\n:::\n\n", "doc_id": "4d364e6a-ec4d-4966-8cb3-e50b2ffa138c", "embedding": null, "doc_hash": "517bb26e48ff7192ae84f375df963de18d10f480b16d6a4425feec0c027bbb3e", "extra_info": null, "node_info": {"start": 0, "end": 1404, "_node_type": "1"}, "relationships": {"1": "0de65218-a11c-4a96-adaf-211deea965f2"}}, "__type__": "1"}, "75083180-767a-436e-8204-af68321fcdd5": {"__data__": {"text": "\n\nRunning a Move function\n\nNow that you've published the function above, you can run it.\n\nArguments must be given a type with a colon to separate it.  In this example, we want the input to be\nparsed as a string, so we put `string:Hello!`.\n\n```bash\n$ aptos move run --function-id 0xb9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb::message::set_message --args string:hello!\n{\n  \"Result\": {\n    \"changes\": [\n      {\n        \"address\": \"b9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb\",\n        \"data\": {\n          \"authentication_key\": \"0xb9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb\",\n          \"self_address\": \"0xb9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb\",\n          \"sequence_number\": \"3\"\n        },\n        \"event\": \"write_resource\",\n        \"resource\": \"0x1::account::Account\"\n      },\n      {\n        \"address\": \"b9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb\",\n        \"data\": {\n          \"coin\": {\n            \"value\": \"9777\"\n          },\n          \"deposit_events\": {\n            \"counter\": \"1\",\n            \"guid\": {\n              \"id\": {\n                \"addr\": \"0xb9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb\",\n                \"creation_num\": \"1\"\n              }\n            }\n          },\n          \"withdraw_events\": {\n            \"counter\": \"1\",\n            \"guid\": {\n              \"id\": {\n                \"addr\": \"0xb9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb\",\n                \"creation_num\": \"2\"\n              }\n            }\n          }\n        },\n        \"event\": \"write_resource\",\n        \"resource\": \"0x1::coin::CoinStore\"\n      },\n      {\n        \"address\":", "doc_id": "75083180-767a-436e-8204-af68321fcdd5", "embedding": null, "doc_hash": "6e3ccb12f70965f4f07dcc4953d7440e060b4a9f0a6522b519920a9a27f621e4", "extra_info": null, "node_info": {"start": 0, "end": 1713, "_node_type": "1"}, "relationships": {"1": "66dce79e-5239-4824-9903-deaa9141aa93", "3": "c8f6c6d2-1497-4909-b364-6368cf0b729e"}}, "__type__": "1"}, "c8f6c6d2-1497-4909-b364-6368cf0b729e": {"__data__": {"text": " },\n      {\n        \"address\": \"b9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb\",\n        \"data\": {\n          \"counter\": \"4\"\n        },\n        \"event\": \"write_resource\",\n        \"resource\": \"0x1::guid::Generator\"\n      },\n      {\n        \"address\": \"b9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb\",\n        \"data\": {\n          \"message\": \"hello!\",\n          \"message_change_events\": {\n            \"counter\": \"0\",\n            \"guid\": {\n              \"id\": {\n                \"addr\": \"0xb9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb\",\n                \"creation_num\": \"3\"\n              }\n            }\n          }\n        },\n        \"event\": \"write_resource\",\n        \"resource\": \"0xb9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb::Message::MessageHolder\"\n      }\n    ],\n    \"gas_used\": 41,\n    \"success\": true,\n    \"version\": 3488,\n    \"vm_status\": \"Executed successfully\"\n  }\n}\n```\n\nAdditionally, profiles can replace addresses in the function id.\n```bash\n$ aptos move run --function-id default::message::set_message --args string:hello!\n{\n  \"Result\": {\n    \"changes\": [\n      {\n        \"address\": \"b9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb\",\n        \"data\": {\n          \"authentication_key\": \"0xb9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb\",\n          \"self_address\": \"0xb9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb\",\n          \"sequence_number\": \"3\"\n        },\n        \"event\": \"write_resource\",\n        \"resource\": \"0x1::account::Account\"\n      },\n      {\n        \"address\": \"b9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb\",\n        \"data\": {\n          \"coin\": {\n            \"value\": \"9777\"\n          },\n         ", "doc_id": "c8f6c6d2-1497-4909-b364-6368cf0b729e", "embedding": null, "doc_hash": "cbf12a645bf4aa6597988d09780bfb8a099e61227e8e11b88a3cf0ea336ec198", "extra_info": null, "node_info": {"start": 1699, "end": 3466, "_node_type": "1"}, "relationships": {"1": "66dce79e-5239-4824-9903-deaa9141aa93", "2": "75083180-767a-436e-8204-af68321fcdd5", "3": "490121ed-7f15-4cb0-9873-e19da29be285"}}, "__type__": "1"}, "490121ed-7f15-4cb0-9873-e19da29be285": {"__data__": {"text": "         },\n          \"deposit_events\": {\n            \"counter\": \"1\",\n            \"guid\": {\n              \"id\": {\n                \"addr\": \"0xb9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb\",\n                \"creation_num\": \"1\"\n              }\n            }\n          },\n          \"withdraw_events\": {\n            \"counter\": \"1\",\n            \"guid\": {\n              \"id\": {\n                \"addr\": \"0xb9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb\",\n                \"creation_num\": \"2\"\n              }\n            }\n          }\n        },\n        \"event\": \"write_resource\",\n        \"resource\": \"0x1::coin::CoinStore\"\n      },\n      {\n        \"address\": \"b9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb\",\n        \"data\": {\n          \"counter\": \"4\"\n        },\n        \"event\": \"write_resource\",\n        \"resource\": \"0x1::guid::Generator\"\n      },\n      {\n        \"address\": \"b9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb\",\n        \"data\": {\n          \"message\": \"hello!\",\n          \"message_change_events\": {\n            \"counter\": \"0\",\n            \"guid\": {\n              \"id\": {\n                \"addr\": \"0xb9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb\",\n                \"creation_num\": \"3\"\n              }\n            }\n          }\n        },\n        \"event\": \"write_resource\",\n        \"resource\": \"0xb9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb::Message::MessageHolder\"\n      }\n    ],\n    \"gas_used\": 41,\n    \"success\": true,\n    \"version\": 3488,\n    \"vm_status\": \"Executed successfully\"\n ", "doc_id": "490121ed-7f15-4cb0-9873-e19da29be285", "embedding": null, "doc_hash": "5416c94f426a7a29cc04c1afd673318f5a09d281c4fb7231013134bdead3677f", "extra_info": null, "node_info": {"start": 3479, "end": 5078, "_node_type": "1"}, "relationships": {"1": "66dce79e-5239-4824-9903-deaa9141aa93", "2": "c8f6c6d2-1497-4909-b364-6368cf0b729e", "3": "ae5c987f-e308-4aac-9611-3546e1adaa25"}}, "__type__": "1"}, "ae5c987f-e308-4aac-9611-3546e1adaa25": {"__data__": {"text": "3488,\n    \"vm_status\": \"Executed successfully\"\n  }\n}\n```\n\n", "doc_id": "ae5c987f-e308-4aac-9611-3546e1adaa25", "embedding": null, "doc_hash": "33edf0d7da3035e34a60785a7faaf33de4e49c8912f3fd09d60352ac7fdba29c", "extra_info": null, "node_info": {"start": 5033, "end": 5091, "_node_type": "1"}, "relationships": {"1": "66dce79e-5239-4824-9903-deaa9141aa93", "2": "490121ed-7f15-4cb0-9873-e19da29be285"}}, "__type__": "1"}, "dc282724-6ce1-41bb-9717-e28f2449deb7": {"__data__": {"text": "\n\nArguments in JSON\n\n", "doc_id": "dc282724-6ce1-41bb-9717-e28f2449deb7", "embedding": null, "doc_hash": "5fd24c990c33d6a6be0d20fc72e7c829ff65ee4c0a82d3c365ec7aa6477012cc", "extra_info": null, "node_info": {"start": 0, "end": 21, "_node_type": "1"}, "relationships": {"1": "ae853b70-3dcf-4df4-b7ae-569334290d41"}}, "__type__": "1"}, "7c3bb326-44c3-4712-ba81-817eecea7b29": {"__data__": {"text": "\n\nPackage info\n\nThis section references the `CliArgs` example package, which contains the following manifest:\n\nimport move_toml from '!!raw-loader!../../../../aptos-move/move-examples/cli_args/Move.toml';\n\n{move_toml}\n\nHere, the package is deployed under the named address `test_account`.\n\n:::tip\nSet your working directory to `aptos-move/move-examples/cli_args` to follow along:\n\n```bash\ncd /aptos-core/aptos-move/move-examples/cli_args\n```\n:::\n\n", "doc_id": "7c3bb326-44c3-4712-ba81-817eecea7b29", "embedding": null, "doc_hash": "47d096c0659d7ec2f9edb5673d56a1671825e3fc033b0819912b14c2d4883614", "extra_info": null, "node_info": {"start": 0, "end": 447, "_node_type": "1"}, "relationships": {"1": "c08c6a7d-c842-4ef0-bbab-d7ad578d34f8"}}, "__type__": "1"}, "db18935c-4251-48af-be02-6cda71a3a4b1": {"__data__": {"text": "\n\nDeploying the package\n\nStart by mining a vanity address for Ace, who will deploy the package:\n\n\n```bash title=Command\naptos key generate \\\n    --vanity-prefix 0xace \\\n    --output-file ace.key\n```\n\nOutput\n\n```bash\n{\n  \"Result\": {\n    \"Account Address:\": \"0xacef1b9b7d4ab208b99fed60746d18dcd74865edb7eb3c3f1428233988e4ba46\",\n    \"PublicKey Path\": \"ace.key.pub\",\n    \"PrivateKey Path\": \"ace.key\"\n  }\n}\n```\n\n\n\n:::tip\nThe exact account address should vary for each run, though the vanity prefix should not.\n:::\n\nStore Ace's address in a shell variable so you can call it inline later on:\n\n```bash\n", "doc_id": "db18935c-4251-48af-be02-6cda71a3a4b1", "embedding": null, "doc_hash": "2805b221e179cba3b35a611b0c00e9c9ee59578c2727ca600beececffea026c6", "extra_info": null, "node_info": {"start": 0, "end": 595, "_node_type": "1"}, "relationships": {"1": "1121cae7-1f16-40a6-9a04-4e56150aae51"}}, "__type__": "1"}, "48349940-4b0d-4ff7-862d-241138184f7a": {"__data__": {"text": "\n\nYour exact address should vary\nace_addr=0xacef1b9b7d4ab208b99fed60746d18dcd74865edb7eb3c3f1428233988e4ba46\n```\n\nFund Ace's account with the faucet (either devnet or testnet):\n\n```bash title=Command\naptos account fund-with-faucet --account $ace_addr\n```\n\nOutput\n\n```bash\n{\n  \"Result\": \"Added 100000000 Octas to account acef1b9b7d4ab208b99fed60746d18dcd74865edb7eb3c3f1428233988e4ba46\"\n}\n```\n\n\n\nNow publish the package under Ace's account:\n\n```bash title=Command\naptos move publish \\\n    --named-addresses test_account=$ace_addr \\\n    --private-key-file ace.key \\\n    --assume-yes\n```\n\nOutput\n\n```bash\n{\n  \"Result\": {\n    \"transaction_hash\": \"0x1d7b074dd95724c5459a1c30fe4cb3875e7b0478cc90c87c8e3f21381625bec1\",\n    \"gas_used\": 1294,\n    \"gas_unit_price\": 100,\n    \"sender\": \"acef1b9b7d4ab208b99fed60746d18dcd74865edb7eb3c3f1428233988e4ba46\",\n    \"sequence_number\": 0,\n    \"success\": true,\n    \"timestamp_us\": 1685077849297587,\n    \"version\": 528422121,\n    \"vm_status\": \"Executed successfully\"\n  }\n}\n```\n\n\n\n", "doc_id": "48349940-4b0d-4ff7-862d-241138184f7a", "embedding": null, "doc_hash": "37f8193abe2aaf97de9437ba2e3c913266965466652b3fe77116d44c7ef012a2", "extra_info": null, "node_info": {"start": 0, "end": 1008, "_node_type": "1"}, "relationships": {"1": "19b85d47-e7fe-43c0-a48a-0d7b2d9b8843"}}, "__type__": "1"}, "5f8e1261-7127-434e-8a5f-ede6d1c0a077": {"__data__": {"text": "\n\nEntry functions\n\nThe only module in the package, `cli_args.move`, defines a simple `Holder` resource with fields of various data types:\n\n```rust title=\"Holder in cli_args.move\"\n:!: static/move-examples/cli_args/sources/cli_args.move resource\n```\n\nA public entry function with multi-nested vectors can be used to set the fields:\n\n```rust title=\"Setter function in cli_args.move\"\n:!: static/move-examples/cli_args/sources/cli_args.move setter\n```\n\nAfter the package has been published, `aptos move run` can be used to call `set_vals()`:\n\n:::tip\nTo pass vectors (including nested vectors) as arguments from the command line, use JSON syntax escaped with quotes!\n:::\n\n```bash title=\"Running function with nested vector arguments from CLI\"\naptos move run \\\n    --function-id $ace_addr::cli_args::set_vals \\\n    --type-args \\\n        0x1::account::Account \\\n        0x1::chain_id::ChainId \\\n    --args \\\n        u8:123 \\\n        \"bool:[false, true, false, false]\" \\\n        'address:[[\"0xace\", \"0xbee\"], [\"0xcad\"], []]' \\\n    --private-key-file ace.key \\\n    --assume-yes\n```\n\nOutput\n\n```bash\n{\n  \"Result\": {\n    \"transaction_hash\": \"0x5e141dc6c28e86fa9f5594de93d07a014264ebadfb99be6db922a929eb1da24f\",\n    \"gas_used\": 504,\n    \"gas_unit_price\": 100,\n    \"sender\": \"acef1b9b7d4ab208b99fed60746d18dcd74865edb7eb3c3f1428233988e4ba46\",\n    \"sequence_number\": 1,\n    \"success\": true,\n    \"timestamp_us\": 1685077888820037,\n    \"version\": 528422422,\n    \"vm_status\": \"Executed successfully\"\n  }\n}\n```\n\n\n\nThe function ID, type arguments, and arguments can alternatively be specified in a JSON file:\n\nimport entry_json_file from '!!raw-loader!../../../../aptos-move/move-examples/cli_args/entry_function_arguments.json';\n\n{entry_json_file}\n\nHere, the call to `aptos move run` looks like:\n\n```bash title=\"Running function with JSON input file\"\naptos move run \\\n    --json-file entry_function_arguments.json \\\n    --private-key-file ace.key \\\n    --assume-yes\n```\n\nOutput\n\n```bash\n{\n  \"Result\": {\n    \"transaction_hash\": \"0x60a32315bb48bf6d31629332f6b1a3471dd0cb016fdee8d0bb7dcd0be9833e60\",\n    \"gas_used\": 3,\n    \"gas_unit_price\": 100,\n    \"sender\": \"acef1b9b7d4ab208b99fed60746d18dcd74865edb7eb3c3f1428233988e4ba46\",\n    \"sequence_number\": 2,\n    \"success\": true,\n    \"timestamp_us\": 1685077961499641,\n    \"version\": 528422965,\n    \"vm_status\": \"Executed successfully\"\n  }\n}\n```\n\n\n\n:::tip\nIf you are trying to run the example yourself don't forget to substitute Ace's actual address for `` in", "doc_id": "5f8e1261-7127-434e-8a5f-ede6d1c0a077", "embedding": null, "doc_hash": "fc4c344ec13f188de173bcc7756b0043d5c8f4210cc26bb650acaf1306a976c9", "extra_info": null, "node_info": {"start": 0, "end": 2480, "_node_type": "1"}, "relationships": {"1": "15c50acc-ea50-404c-849e-10c491c02db8", "3": "22fe15a2-be70-41b4-95fa-6f81695a19b7"}}, "__type__": "1"}, "22fe15a2-be70-41b4-95fa-6f81695a19b7": {"__data__": {"text": "the example yourself don't forget to substitute Ace's actual address for `` in `entry_function_arguments.json`!\n:::\n\n", "doc_id": "22fe15a2-be70-41b4-95fa-6f81695a19b7", "embedding": null, "doc_hash": "a0213b91b87003380a1dd0b54059e569a095f4d4774794bed6e47dd54e81b4c8", "extra_info": null, "node_info": {"start": 2402, "end": 2519, "_node_type": "1"}, "relationships": {"1": "15c50acc-ea50-404c-849e-10c491c02db8", "2": "5f8e1261-7127-434e-8a5f-ede6d1c0a077"}}, "__type__": "1"}, "69065b6d-7405-4067-a6cf-830981b5b914": {"__data__": {"text": "\n\nView functions\n\nOnce the values in a `Holder` have been set, the `reveal()` view function can be used to check the first three fields, and to compare type arguments against the last two fields:\n\n```rust title=\"View function\"\n:!: static/move-examples/cli_args/sources/cli_args.move view\n```\n\nThis view function can be called with arguments specified either from the CLI or from a JSON file:\n\n```bash title=\"Arguments via CLI\"\naptos move view \\\n    --function-id $ace_addr::cli_args::reveal \\\n    --type-args \\\n        0x1::account::Account \\\n        0x1::account::Account \\\n    --args address:$ace_addr\n```\n\n```bash title=\"Arguments via JSON file\"\naptos move view --json-file view_function_arguments.json\n```\n\n:::tip\nIf you are trying to run the example yourself don't forget to substitute Ace's actual address for `` in `view_function_arguments.json` (twice)!\n:::\n\nimport view_json_file from '!!raw-loader!../../../../aptos-move/move-examples/cli_args/view_function_arguments.json';\n\n{view_json_file}\n\n```bash title=\"Output\"\n{\n  \"Result\": [\n    {\n      \"address_vec_vec\": [\n        [\n          \"0xace\",\n          \"0xbee\"\n        ],\n        [\n          \"0xcad\"\n        ],\n        []\n      ],\n      \"bool_vec\": [\n        false,\n        true,\n        false,\n        false\n      ],\n      \"type_info_1_match\": true,\n      \"type_info_2_match\": false,\n      \"u8_solo\": 123\n    }\n  ]\n}\n```\n\n", "doc_id": "69065b6d-7405-4067-a6cf-830981b5b914", "embedding": null, "doc_hash": "eec8895c829c552e88f3e0d0de3f70d07a331ce537e89fed082711b421c06fcb", "extra_info": null, "node_info": {"start": 0, "end": 1385, "_node_type": "1"}, "relationships": {"1": "b8f87cde-1d14-4923-897e-c1f14dd4c80e"}}, "__type__": "1"}, "a821fba3-2136-44f5-a1f4-b4ddcf32f4d9": {"__data__": {"text": "\n\nScript functions\n\nThe package also contains a script, `set_vals.move`, which is a wrapper for the setter function:\n\n```rust title=\"script\"\n:!: static/move-examples/cli_args/scripts/set_vals.move script\n```\n\nFirst compile the package (this will compile the script):\n\n```bash title=Compilation\naptos move compile --named-addresses test_account=$ace_addr\n```\n\nOutput\n\n```bash\n{\n  \"Result\": [\n    \"acef1b9b7d4ab208b99fed60746d18dcd74865edb7eb3c3f1428233988e4ba46::cli_args\"\n  ]\n}\n```\n\n\n\nNext, run `aptos move run-script`:\n\n```bash title=\"Arguments via CLI\"\naptos move run-script \\\n    --compiled-script-path build/CliArgs/bytecode_scripts/set_vals.mv \\\n    --type-args \\\n        0x1::account::Account \\\n        0x1::chain_id::ChainId \\\n    --args \\\n        u8:123 \\\n        \"u8:[122, 123, 124, 125]\" \\\n        address:\"0xace\" \\\n    --private-key-file ace.key \\\n    --assume-yes\n```\n\nOutput\n\n```bash\n{\n  \"Result\": {\n    \"transaction_hash\": \"0x1d644eba8187843cc43919469112339bc2c435a49a733ac813b7bc6c79770152\",\n    \"gas_used\": 3,\n    \"gas_unit_price\": 100,\n    \"sender\": \"acef1b9b7d4ab208b99fed60746d18dcd74865edb7eb3c3f1428233988e4ba46\",\n    \"sequence_number\": 3,\n    \"success\": true,\n    \"timestamp_us\": 1685078415935612,\n    \"version\": 528426413,\n    \"vm_status\": \"Executed successfully\"\n  }\n}\n```\n\n\n\n```bash title=\"Arguments via JSON file\"\naptos move run-script \\\n    --compiled-script-path build/CliArgs/bytecode_scripts/set_vals.mv \\\n    --json-file script_function_arguments.json \\\n    --private-key-file ace.key \\\n    --assume-yes\n```\n\nOutput\n\n```bash\n{\n  \"Result\": {\n    \"transaction_hash\": \"0x840e2d6a5ab80d5a570effb3665f775f1755e0fd8d76e52bfa7241aaade883d7\",\n    \"gas_used\": 3,\n    \"gas_unit_price\": 100,\n    \"sender\": \"acef1b9b7d4ab208b99fed60746d18dcd74865edb7eb3c3f1428233988e4ba46\",\n    \"sequence_number\": 4,\n    \"success\": true,\n    \"timestamp_us\": 1685078516832128,\n    \"version\": 528427132,\n    \"vm_status\": \"Executed successfully\"\n  }\n}\n```\n\n\n\nimport script_json_file from '!!raw-loader!../../../../aptos-move/move-examples/cli_args/script_function_arguments.json';\n\n{script_json_file}\n\nBoth such script function invocations result in the following `reveal()` view function output:\n\n```bash title=\"View function call\"\naptos move view \\\n    --function-id $ace_addr::cli_args::reveal \\\n    --type-args \\\n       ", "doc_id": "a821fba3-2136-44f5-a1f4-b4ddcf32f4d9", "embedding": null, "doc_hash": "eeb35e7ffaba112f893692a75a5d2c0b35fc144a07d51752d6aaeac06f37782b", "extra_info": null, "node_info": {"start": 0, "end": 2324, "_node_type": "1"}, "relationships": {"1": "3fe49c4f-f57e-457b-ba10-e33712cd02a3", "3": "79b73328-c1d1-4606-90e8-88c97bb7f8a8"}}, "__type__": "1"}, "79b73328-c1d1-4606-90e8-88c97bb7f8a8": {"__data__": {"text": "\\\n    --type-args \\\n        0x1::account::Account \\\n        0x1::chain_id::ChainId \\\n    --args address:$ace_addr\n```\n\n```json title=\"View function output\"\n{\n  \"Result\": [\n    {\n      \"address_vec_vec\": [\n        [\n          \"0xace\"\n        ]\n      ],\n      \"bool_vec\": [\n        false,\n        false,\n        true,\n        true\n      ],\n      \"type_info_1_match\": true,\n      \"type_info_2_match\": true,\n      \"u8_solo\": 123\n    }\n  ]\n}\n```\n\n:::note\nAs of the time of this writing, the `aptos` CLI only supports script function arguments for vectors of type `u8`, and only up to a vector depth of 1. Hence `vector` and `vector>` are invalid script function argument types.\n:::\n\n\n", "doc_id": "79b73328-c1d1-4606-90e8-88c97bb7f8a8", "embedding": null, "doc_hash": "0da32c146b4b278f8f4980cff833496f5466e80edc16c6477c24855f04303f31", "extra_info": null, "node_info": {"start": 2297, "end": 2976, "_node_type": "1"}, "relationships": {"1": "3fe49c4f-f57e-457b-ba10-e33712cd02a3", "2": "a821fba3-2136-44f5-a1f4-b4ddcf32f4d9"}}, "__type__": "1"}, "a2e3e03c-7129-4db2-a6d5-440ae5766cf9": {"__data__": {"text": "\n\nMultisig governance\n\n", "doc_id": "a2e3e03c-7129-4db2-a6d5-440ae5766cf9", "embedding": null, "doc_hash": "53d27105e4ad9a6d2305c9974d9abeda8b9df969b903b34edfdd3b440b0ca740", "extra_info": null, "node_info": {"start": 0, "end": 23, "_node_type": "1"}, "relationships": {"1": "586ef30f-b238-4f0d-bee9-30d93e2725c8"}}, "__type__": "1"}, "a12183ef-05b5-49fd-bb5d-4c8f51fb583c": {"__data__": {"text": "\n\nBackground\n\nThis section builds upon the Arguments in JSON section, and likewise references the `CliArgs` example package.\n\n:::tip\nIf you would like to follow along, start by completing the Arguments in JSON tutorial steps!\n:::\n\nFor this example, Ace and Bee will conduct governance operations from a 2-of-2 \"multisig v2\" account (an on-chain multisig account per `multisig_account.move`)\n\n", "doc_id": "a12183ef-05b5-49fd-bb5d-4c8f51fb583c", "embedding": null, "doc_hash": "75bee2c20757f2ca0bb01f541bf0a3a01553dc2a203fafd92de71179bbb41a64", "extra_info": null, "node_info": {"start": 0, "end": 392, "_node_type": "1"}, "relationships": {"1": "73430904-1004-46a5-885b-c12e3f153412"}}, "__type__": "1"}, "43b71e68-4857-45d3-a0d6-f331248fec46": {"__data__": {"text": "\n\nAccount creation\n\nSince Ace's account was created during the Arguments in JSON tutorial, start by mining a vanity address account for Bee too:\n\n```bash title=Command\naptos key generate \\\n    --vanity-prefix 0xbee \\\n    --output-file bee.key\n```\n\nOutput\n\n```bash\n{\n  \"Result\": {\n    \"PublicKey Path\": \"bee.key.pub\",\n    \"PrivateKey Path\": \"bee.key\",\n    \"Account Address:\": \"0xbeec980219d246581cef5166dc6ba5fb1e090c7a7786a5176d111a9029b16ddc\"\n  }\n}\n```\n\n\n\n:::tip\nThe exact account address should vary for each run, though the vanity prefix should not.\n:::\n\nStore Bee's address in a shell variable so you can call it inline later on:\n\n```bash\n", "doc_id": "43b71e68-4857-45d3-a0d6-f331248fec46", "embedding": null, "doc_hash": "ee0ad2662ec112f86997608e463f76edbdac6630288ff23bab501f65781615fc", "extra_info": null, "node_info": {"start": 0, "end": 643, "_node_type": "1"}, "relationships": {"1": "d827f7bd-3997-4481-8e6a-1fa8e29c9af5"}}, "__type__": "1"}, "c8d233b0-1236-4455-8180-d5ba3db474d0": {"__data__": {"text": "\n\nYour exact address should vary\nbee_addr=0xbeec980219d246581cef5166dc6ba5fb1e090c7a7786a5176d111a9029b16ddc\n```\n\nFund Bee's account using the faucet:\n\n```bash title=Command\naptos account fund-with-faucet --account $bee_addr\n```\n\nOutput\n\n```bash\n{\n  \"Result\": \"Added 100000000 Octas to account beec980219d246581cef5166dc6ba5fb1e090c7a7786a5176d111a9029b16ddc\"\n}\n```\n\n\n\nAce can now create a multisig account:\n\n```bash title=Command\naptos multisig create \\\n    --additional-owners $bee_addr \\\n    --num-signatures-required 2 \\\n    --private-key-file ace.key \\\n    --assume-yes\n```\n\nOutput\n\n```bash\n{\n  \"Result\": {\n    \"multisig_address\": \"57478da34604655c68b1dcb89e4f4a9124b6c0ecc1c59a0931d58cc4e60ac5c5\",\n    \"transaction_hash\": \"0x849cc756de2d3b57210f5d32ae4b5e7d1f80e5d376233885944b6f3cc2124a05\",\n    \"gas_used\": 1524,\n    \"gas_unit_price\": 100,\n    \"sender\": \"acef1b9b7d4ab208b99fed60746d18dcd74865edb7eb3c3f1428233988e4ba46\",\n    \"sequence_number\": 5,\n    \"success\": true,\n    \"timestamp_us\": 1685078644186194,\n    \"version\": 528428043,\n    \"vm_status\": \"Executed successfully\"\n  }\n}\n```\n\n\n\nStore the multisig address in a shell variable:\n\n```bash\n", "doc_id": "c8d233b0-1236-4455-8180-d5ba3db474d0", "embedding": null, "doc_hash": "3979bcbaf00b104a0f040f1ff5a4f15c42708514c9f959b77e05413bcdf8c10e", "extra_info": null, "node_info": {"start": 0, "end": 1151, "_node_type": "1"}, "relationships": {"1": "569163a1-ed7c-4ad7-845c-968022493d28"}}, "__type__": "1"}, "4b88097b-57c1-4116-9e91-d5de970c68f2": {"__data__": {"text": "\n\nYour address should vary\nmultisig_addr=0x57478da34604655c68b1dcb89e4f4a9124b6c0ecc1c59a0931d58cc4e60ac5c5\n```\n\n", "doc_id": "4b88097b-57c1-4116-9e91-d5de970c68f2", "embedding": null, "doc_hash": "f0b3fcb8578d7810c6047fb7a2bd984c7dcd13bfeca5fe93938f0f122840dcdf", "extra_info": null, "node_info": {"start": 0, "end": 113, "_node_type": "1"}, "relationships": {"1": "be6fa6ef-4581-4ffa-a09f-4d5e87566eec"}}, "__type__": "1"}, "78b09713-de9c-46f1-b5a4-77d523a67c54": {"__data__": {"text": "\n\nInspect the multisig\n\nUse the assorted `multisig_account.move` view functions to inspect the multisig:\n\n```bash title=\"Number of signatures required\"\naptos move view \\\n    --function-id 0x1::multisig_account::num_signatures_required \\\n    --args \\\n        address:\"$multisig_addr\"\n```\n\nOutput\n\n```bash\n{\n  \"Result\": [\n    \"2\"\n  ]\n}\n```\n\n\n\n```bash title=\"Owners\"\naptos move view \\\n    --function-id 0x1::multisig_account::owners \\\n    --args \\\n        address:\"$multisig_addr\"\n```\n\nOutput\n\n```bash\n{\n  \"Result\": [\n    [\n      \"0xbeec980219d246581cef5166dc6ba5fb1e090c7a7786a5176d111a9029b16ddc\",\n      \"0xacef1b9b7d4ab208b99fed60746d18dcd74865edb7eb3c3f1428233988e4ba46\"\n    ]\n  ]\n}\n```\n\n\n\n```bash title=\"Last resolved sequence number\"\naptos move view \\\n    --function-id 0x1::multisig_account::last_resolved_sequence_number \\\n    --args \\\n        address:\"$multisig_addr\"\n```\n\nOutput\n\n```bash\n{\n  \"Result\": [\n    \"0\"\n  ]\n}\n```\n\n\n\n```bash title=\"Next sequence number\"\naptos move view \\\n    --function-id 0x1::multisig_account::next_sequence_number \\\n    --args \\\n        address:\"$multisig_addr\"\n```\n\nOutput\n\n```bash\n{\n  \"Result\": [\n    \"1\"\n  ]\n}\n```\n\n\n\n", "doc_id": "78b09713-de9c-46f1-b5a4-77d523a67c54", "embedding": null, "doc_hash": "7c931e575f0df70d7ff83021fa769407f1bef1f25f92b340d29530cfab856a3d", "extra_info": null, "node_info": {"start": 0, "end": 1155, "_node_type": "1"}, "relationships": {"1": "677d3468-f39d-4238-9fbc-a2993fcb1836"}}, "__type__": "1"}, "33e35af0-72e3-4fce-a3ac-cbcadb438dd8": {"__data__": {"text": "\n\nEnqueue a publication transaction\n\nThe first multisig transaction enqueued will be a transaction for publication of the `CliArgs` example package.\nFirst, generate a publication payload entry function JSON file:\n\n```bash title=\"Command\"\naptos move build-publish-payload \\\n    --named-addresses test_account=$multisig_addr \\\n    --json-output-file publication.json \\\n    --assume-yes\n```\n\nOutput\n\n```bash\n{\n  \"Result\": \"Publication payload entry function JSON file saved to publication.json\"\n}\n```\n\n\n\nNow have Ace propose publication of the package from the multisig account, storing only the payload hash on-chain:\n\n```bash title=\"Command\"\naptos multisig create-transaction \\\n    --multisig-address $multisig_addr \\\n    --json-file publication.json \\\n    --store-hash-only \\\n    --private-key-file ace.key \\\n    --assume-yes\n```\n\nOutput\n\n```bash\n{\n  \"Result\": {\n    \"transaction_hash\": \"0x70c75903f8e1b1c0069f1e84ef9583ad8000f24124b33a746c88d2b031f7fe2c\",\n    \"gas_used\": 510,\n    \"gas_unit_price\": 100,\n    \"sender\": \"acef1b9b7d4ab208b99fed60746d18dcd74865edb7eb3c3f1428233988e4ba46\",\n    \"sequence_number\": 6,\n    \"success\": true,\n    \"timestamp_us\": 1685078836492390,\n    \"version\": 528429447,\n    \"vm_status\": \"Executed successfully\"\n  }\n}\n```\n\n\n\nNote that the last resolved sequence number is still 0 because no transactions have been resolved:\n\n```bash title=\"Last resolved sequence number\"\naptos move view \\\n    --function-id 0x1::multisig_account::last_resolved_sequence_number \\\n    --args \\\n        address:\"$multisig_addr\"\n```\n\nOutput\n\n```bash\n{\n  \"Result\": [\n    \"0\"\n  ]\n}\n```\n\n\n\nHowever the next sequence number has been incremented because a transaction has been enqueued:\n\n```bash title=\"Next sequence number\"\naptos move view \\\n    --function-id 0x1::multisig_account::next_sequence_number \\\n    --args \\\n        address:\"$multisig_addr\"\n```\n\nOutput\n\n```bash\n{\n  \"Result\": [\n    \"2\"\n  ]\n}\n```\n\n\n\nThe multisig transaction enqueued on-chain can now be inspected:\n\n```bash title=\"Get transaction\"\naptos move view \\\n    --function-id 0x1::multisig_account::get_transaction \\\n    --args \\\n        address:\"$multisig_addr\" \\\n        String:1\n```\n\nOutput\n\n```bash\n{\n  \"Result\": [\n    {\n      \"creation_time_secs\": \"1685078836\",\n      \"creator\": \"0xacef1b9b7d4ab208b99fed60746d18dcd74865edb7eb3c3f1428233988e4ba46\",\n      \"payload\": {\n        \"vec\": []\n      },\n      \"payload_hash\": {\n        \"vec\": [\n         ", "doc_id": "33e35af0-72e3-4fce-a3ac-cbcadb438dd8", "embedding": null, "doc_hash": "7a1f1d1afbe42595828974edb1112ac94768344a7945f29c5e829ed1ae88f843", "extra_info": null, "node_info": {"start": 0, "end": 2420, "_node_type": "1"}, "relationships": {"1": "80c8c795-dcf6-4c92-9051-0e6431742051", "3": "4da2041f-2c15-4599-901e-eed38ceac8ac"}}, "__type__": "1"}, "4da2041f-2c15-4599-901e-eed38ceac8ac": {"__data__": {"text": "      \"vec\": [\n          \"0x62b91159c1428c1ef488c7290771de458464bd665691d9653d195bc28e0d2080\"\n        ]\n      },\n      \"votes\": {\n        \"data\": [\n          {\n            \"key\": \"0xacef1b9b7d4ab208b99fed60746d18dcd74865edb7eb3c3f1428233988e4ba46\",\n            \"value\": true\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n\n\nNote from the above result that no payload is stored on-chain, and that Ace implicitly approved the transaction (voted `true`) upon the submission of the proposal.\n\n", "doc_id": "4da2041f-2c15-4599-901e-eed38ceac8ac", "embedding": null, "doc_hash": "1b8001a73bcee2d0c7c7f6e3f3930629c2a6f735c9019414239e186c9e7d06f3", "extra_info": null, "node_info": {"start": 2396, "end": 2885, "_node_type": "1"}, "relationships": {"1": "80c8c795-dcf6-4c92-9051-0e6431742051", "2": "33e35af0-72e3-4fce-a3ac-cbcadb438dd8"}}, "__type__": "1"}, "4c40e9f1-b374-412e-8cfb-2cbcf45a3fc0": {"__data__": {"text": "\n\nEnqueue a governance parameter transaction\n\nNow have Bee enqueue a governance parameter setter transaction, storing the entire transaction payload on-chain:\n\n```bash title=\"Command\"\naptos multisig create-transaction \\\n    --multisig-address $multisig_addr \\\n    --function-id $multisig_addr::cli_args::set_vals \\\n    --type-args \\\n        0x1::account::Account \\\n        0x1::chain_id::ChainId \\\n    --args \\\n        u8:123 \\\n        \"bool:[false, true, false, false]\" \\\n        'address:[[\"0xace\", \"0xbee\"], [\"0xcad\"], []]' \\\n    --private-key-file bee.key \\\n    --assume-yes\n```\n\nOutput\n\n```bash\n{\n  \"Result\": {\n    \"transaction_hash\": \"0xd0a348072d5bfc5a2e5d444f92f0ecc10b978dad720b174303bc6d91342f27ec\",\n    \"gas_used\": 511,\n    \"gas_unit_price\": 100,\n    \"sender\": \"beec980219d246581cef5166dc6ba5fb1e090c7a7786a5176d111a9029b16ddc\",\n    \"sequence_number\": 0,\n    \"success\": true,\n    \"timestamp_us\": 1685078954841650,\n    \"version\": 528430315,\n    \"vm_status\": \"Executed successfully\"\n  }\n}\n```\n\n\n\nNote the next sequence number has been incremented again:\n\n```bash title=\"Next sequence number\"\naptos move view \\\n    --function-id 0x1::multisig_account::next_sequence_number \\\n    --args \\\n        address:\"$multisig_addr\"\n```\n\nOutput\n\n```bash\n{\n  \"Result\": [\n    \"3\"\n  ]\n}\n```\n\n\n\nNow both the publication and parameter transactions are pending:\n\n```bash title=\"Get pending transactions\"\naptos move view \\\n    --function-id 0x1::multisig_account::get_pending_transactions \\\n    --args \\\n        address:\"$multisig_addr\"\n```\n\nOutput\n\n```bash\n{\n  \"Result\": [\n    [\n      {\n        \"creation_time_secs\": \"1685078836\",\n        \"creator\": \"0xacef1b9b7d4ab208b99fed60746d18dcd74865edb7eb3c3f1428233988e4ba46\",\n        \"payload\": {\n          \"vec\": []\n        },\n        \"payload_hash\": {\n          \"vec\": [\n            \"0x62b91159c1428c1ef488c7290771de458464bd665691d9653d195bc28e0d2080\"\n          ]\n        },\n        \"votes\": {\n          \"data\": [\n            {\n              \"key\": \"0xacef1b9b7d4ab208b99fed60746d18dcd74865edb7eb3c3f1428233988e4ba46\",\n              \"value\": true\n           ", "doc_id": "4c40e9f1-b374-412e-8cfb-2cbcf45a3fc0", "embedding": null, "doc_hash": "4993c7ee3b7600ad5df001f3afa9020498bfbbdf8ddd5df1f3bf3594eb3017f1", "extra_info": null, "node_info": {"start": 0, "end": 2094, "_node_type": "1"}, "relationships": {"1": "b9bc9e31-9f7e-4a56-bd55-88c69055fe10", "3": "50f938d3-af54-450f-9637-2f8d1f312e44"}}, "__type__": "1"}, "50f938d3-af54-450f-9637-2f8d1f312e44": {"__data__": {"text": "    \"value\": true\n            }\n          ]\n        }\n      },\n      {\n        \"creation_time_secs\": \"1685078954\",\n        \"creator\": \"0xbeec980219d246581cef5166dc6ba5fb1e090c7a7786a5176d111a9029b16ddc\",\n        \"payload\": {\n          \"vec\": [\n            \"0x0057478da34604655c68b1dcb89e4f4a9124b6c0ecc1c59a0931d58cc4e60ac5c508636c695f61726773087365745f76616c7302070000000000000000000000000000000000000000000000000000000000000001076163636f756e74074163636f756e740007000000000000000000000000000000000000000000000000000000000000000108636861696e5f696407436861696e49640003017b0504000100006403020000000000000000000000000000000000000000000000000000000000000ace0000000000000000000000000000000000000000000000000000000000000bee010000000000000000000000000000000000000000000000000000000000000cad00\"\n          ]\n        },\n        \"payload_hash\": {\n          \"vec\": []\n        },\n        \"votes\": {\n          \"data\": [\n            {\n              \"key\": \"0xbeec980219d246581cef5166dc6ba5fb1e090c7a7786a5176d111a9029b16ddc\",\n              \"value\": true\n            }\n          ]\n        }\n      }\n    ]\n  ]\n}\n```\n\n\n\n", "doc_id": "50f938d3-af54-450f-9637-2f8d1f312e44", "embedding": null, "doc_hash": "34dc60320fe14a1b7f306eb1b62eefcdcab3832db8b7e7caecfa62e95fd47440", "extra_info": null, "node_info": {"start": 2065, "end": 3167, "_node_type": "1"}, "relationships": {"1": "b9bc9e31-9f7e-4a56-bd55-88c69055fe10", "2": "4c40e9f1-b374-412e-8cfb-2cbcf45a3fc0"}}, "__type__": "1"}, "6e64b94c-5535-4283-b0bd-d53803a872ee": {"__data__": {"text": "\n\nExecute the publication transaction\n\nSince only Ace has voted on the publication transaction (which he implicitly approved upon proposing) the transaction can't be executed yet:\n\n```bash title=\"Can be executed\"\naptos move view \\\n    --function-id 0x1::multisig_account::can_be_executed \\\n    --args \\\n        address:\"$multisig_addr\" \\\n        String:1\n```\n\nOutput\n\n```bash\n{\n  \"Result\": [\n    false\n  ]\n}\n```\n\n\n\nBefore Bee votes, however, she verifies that the payload hash stored on-chain matches the publication entry function JSON file:\n\n```bash title=\"Verifying transaction proposal\"\naptos multisig verify-proposal \\\n    --multisig-address $multisig_addr \\\n    --json-file publication.json \\\n    --sequence-number 1\n```\n\nOutput\n\n```bash\n{\n  \"Result\": {\n    \"Status\": \"Transaction match\",\n    \"Multisig transaction\": {\n      \"creation_time_secs\": \"1685078836\",\n      \"creator\": \"0xacef1b9b7d4ab208b99fed60746d18dcd74865edb7eb3c3f1428233988e4ba46\",\n      \"payload\": {\n        \"vec\": []\n      },\n      \"payload_hash\": {\n        \"vec\": [\n          \"0x62b91159c1428c1ef488c7290771de458464bd665691d9653d195bc28e0d2080\"\n        ]\n      },\n      \"votes\": {\n        \"data\": [\n          {\n            \"key\": \"0xacef1b9b7d4ab208b99fed60746d18dcd74865edb7eb3c3f1428233988e4ba46\",\n            \"value\": true\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n\n\nSince Bee has verified that the on-chain payload hash checks out against her locally-compiled package publication JSON file, she votes yes:\n\n\n```bash title=\"Approving transaction\"\naptos multisig approve \\\n    --multisig-address $multisig_addr \\\n    --sequence-number 1 \\\n    --private-key-file bee.key \\\n    --assume-yes\n```\n\nOutput\n\n```bash\n{\n  \"Result\": {\n    \"transaction_hash\": \"0xa5fb49f1077de6aa6d976e6bcc05e4c50c6cd061f1c87e8f1ea74e7a04a06bd1\",\n    \"gas_used\": 6,\n    \"gas_unit_price\": 100,\n    \"sender\": \"beec980219d246581cef5166dc6ba5fb1e090c7a7786a5176d111a9029b16ddc\",\n    \"sequence_number\": 1,\n    \"success\": true,\n    \"timestamp_us\": 1685079892130861,\n    \"version\": 528437204,\n    \"vm_status\": \"Executed successfully\"\n  }\n}\n```\n\n\n\nNow the transaction can be executed:\n\n```bash title=\"Can be executed\"\naptos move view \\\n    --function-id 0x1::multisig_account::can_be_executed \\\n    --args", "doc_id": "6e64b94c-5535-4283-b0bd-d53803a872ee", "embedding": null, "doc_hash": "42fef6c68853ad6e727380d674b82a507ebee285c2904d950fd13d5e1528e547", "extra_info": null, "node_info": {"start": 0, "end": 2252, "_node_type": "1"}, "relationships": {"1": "4c890425-517c-4eb0-83a9-5e2db69a3160", "3": "6a6a9b2c-66cc-4576-9899-6d8ee9edfd26"}}, "__type__": "1"}, "6a6a9b2c-66cc-4576-9899-6d8ee9edfd26": {"__data__": {"text": "\\\n    --args \\\n        address:\"$multisig_addr\" \\\n        String:1\n```\n\nOutput\n\n```bash\n{\n  \"Result\": [\n    true\n  ]\n}\n```\n\n\n\nNow either Ace or Bee can invoke the publication transaction from the multisig account, passing the full transaction payload since only the hash was stored on-chain:\n\n```bash title=\"Publication\"\naptos multisig execute-with-payload \\\n    --multisig-address $multisig_addr \\\n    --json-file publication.json \\\n    --private-key-file bee.key \\\n    --max-gas 10000 \\\n    --assume-yes\n```\n\n:::tip\nPending the resolution of #8304, the transaction simulator (which is used to estimate gas costs) is broken for multisig transactions, so you will have to manually specify a max gas amount.\n:::\n\nOutput\n\nAlso pending the resolution of #8304, the CLI output for a successful multisig publication transaction execution results in an API error if only the payload hash has been stored on-chain, but the transaction can be manually verified using an explorer.\n\n\n\n", "doc_id": "6a6a9b2c-66cc-4576-9899-6d8ee9edfd26", "embedding": null, "doc_hash": "17e96366c8e4dc17ca5eb9498c505843ded4c36730ea93da7ddbfbd33862e3b0", "extra_info": null, "node_info": {"start": 2240, "end": 3215, "_node_type": "1"}, "relationships": {"1": "4c890425-517c-4eb0-83a9-5e2db69a3160", "2": "6e64b94c-5535-4283-b0bd-d53803a872ee"}}, "__type__": "1"}, "159924f2-857e-4652-8fa4-6973e8fd4924": {"__data__": {"text": "\n\nExecute the governance parameter transaction\n\nSince only Bee has voted on the governance parameter transaction (which she implicitly approved upon proposing), the transaction can't be executed yet:\n\n```bash title=\"Can be executed\"\naptos move view \\\n    --function-id 0x1::multisig_account::can_be_executed \\\n    --args \\\n        address:\"$multisig_addr\" \\\n        String:2\n```\n\nOutput\n\n```bash\n{\n  \"Result\": [\n    false\n  ]\n}\n```\n\n\n\nBefore Ace votes, however, he verifies that the payload stored on-chain matches the function arguments he expects:\n\n```bash title=\"Verifying transaction proposal\"\naptos multisig verify-proposal \\\n    --multisig-address $multisig_addr \\\n    --function-id $multisig_addr::cli_args::set_vals \\\n    --type-args \\\n        0x1::account::Account \\\n        0x1::chain_id::ChainId \\\n    --args \\\n        u8:123 \\\n        \"bool:[false, true, false, false]\" \\\n        'address:[[\"0xace\", \"0xbee\"], [\"0xcad\"], []]' \\\n    --sequence-number 2\n```\n\nOutput\n\n```bash\n{\n  \"Result\": {\n    \"Status\": \"Transaction match\",\n    \"Multisig transaction\": {\n      \"creation_time_secs\": \"1685078954\",\n      \"creator\": \"0xbeec980219d246581cef5166dc6ba5fb1e090c7a7786a5176d111a9029b16ddc\",\n      \"payload\": {\n        \"vec\": [\n          \"0x0057478da34604655c68b1dcb89e4f4a9124b6c0ecc1c59a0931d58cc4e60ac5c508636c695f61726773087365745f76616c7302070000000000000000000000000000000000000000000000000000000000000001076163636f756e74074163636f756e740007000000000000000000000000000000000000000000000000000000000000000108636861696e5f696407436861696e49640003017b0504000100006403020000000000000000000000000000000000000000000000000000000000000ace0000000000000000000000000000000000000000000000000000000000000bee010000000000000000000000000000000000000000000000000000000000000cad00\"\n        ]\n      },\n      \"payload_hash\": {\n        \"vec\": []\n      },\n      \"votes\": {\n        \"data\": [\n          {\n            \"key\": \"0xbeec980219d246581cef5166dc6ba5fb1e090c7a7786a5176d111a9029b16ddc\",\n            \"value\": true\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n\n\nNote that the verification fails if he modifies even a single argument:\n\n```bash title=\"Failed transaction verification with modified u8\"\naptos multisig verify-proposal \\\n    --multisig-address $multisig_addr \\\n    --function-id $multisig_addr::cli_args::set_vals \\\n    --type-args \\\n        0x1::account::Account \\\n        0x1::chain_id::ChainId \\\n    --args \\\n        u8:200 \\\n  ", "doc_id": "159924f2-857e-4652-8fa4-6973e8fd4924", "embedding": null, "doc_hash": "53b7433c0492de0a8aaff62a4e1cca37f2dd8238ba9ed86be0e835e0409fdd11", "extra_info": null, "node_info": {"start": 0, "end": 2434, "_node_type": "1"}, "relationships": {"1": "96f343fa-64d2-4cd7-bbf7-5138ff8735e3", "3": "dfd8398e-351e-42c2-bfc3-b2070b6bed13"}}, "__type__": "1"}, "dfd8398e-351e-42c2-bfc3-b2070b6bed13": {"__data__": {"text": " --args \\\n        u8:200 \\\n        \"bool:[false, true, false, false]\" \\\n        'address:[[\"0xace\", \"0xbee\"], [\"0xcad\"], []]' \\\n    --sequence-number 2\n```\n\nOutput\n\n```bash\n{\n  \"Error\": \"Unexpected error: Transaction mismatch: The transaction you provided has a payload hash of 0xe494b0072d6f940317344967cf0e818c80082375833708c773b0275f3ad07e51, but the on-chain transaction proposal you specified has a payload hash of 0x070ed7c3f812f25f585461305d507b96a4e756f784e01c8c59901871267a1580. For more info, see https://aptos.dev/move/move-on-aptos/cli#multisig-governance\"\n}\n```\n\n\n\nAce approves the transaction:\n\n```bash title=\"Approving transaction\"\naptos multisig approve \\\n    --multisig-address $multisig_addr \\\n    --sequence-number 2 \\\n    --private-key-file ace.key \\\n    --assume-yes\n```\n\nOutput\n\n```bash\n{\n  \"Result\": {\n    \"transaction_hash\": \"0x233427d95832234fa13dddad5e0b225d40168b4c2c6b84f5255eecc3e68401bf\",\n    \"gas_used\": 6,\n    \"gas_unit_price\": 100,\n    \"sender\": \"acef1b9b7d4ab208b99fed60746d18dcd74865edb7eb3c3f1428233988e4ba46\",\n    \"sequence_number\": 7,\n    \"success\": true,\n    \"timestamp_us\": 1685080266378400,\n    \"version\": 528439883,\n    \"vm_status\": \"Executed successfully\"\n  }\n}\n```\n\n\n\nSince the payload was stored on-chain, it is not required to execute the pending transaction:\n\n```bash title=\"Execution\"\naptos multisig execute \\\n    --multisig-address $multisig_addr \\\n    --private-key-file ace.key \\\n    --max-gas 10000 \\\n    --assume-yes\n```\n\nOutput\n\n```bash\n{\n  \"Result\": {\n    \"transaction_hash\": \"0xbc99f929708a1058b223aa880d04607a78ebe503367ec4dab23af4a3bdb541b2\",\n    \"gas_used\": 505,\n    \"gas_unit_price\": 100,\n    \"sender\": \"acef1b9b7d4ab208b99fed60746d18dcd74865edb7eb3c3f1428233988e4ba46\",\n    \"sequence_number\": 8,\n    \"success\": true,\n    \"timestamp_us\": 1685080344045461,\n    \"version\": 528440423,\n    \"vm_status\": \"Executed successfully\"\n\n```\n\n\n\n", "doc_id": "dfd8398e-351e-42c2-bfc3-b2070b6bed13", "embedding": null, "doc_hash": "d997da4ffd413637ee7534dbebfa97f6cd232d2a7b8ff7a3505394cf63bc597e", "extra_info": null, "node_info": {"start": 2405, "end": 4296, "_node_type": "1"}, "relationships": {"1": "96f343fa-64d2-4cd7-bbf7-5138ff8735e3", "2": "159924f2-857e-4652-8fa4-6973e8fd4924"}}, "__type__": "1"}, "02848a03-cbe6-4c82-a93f-92adb88b95ee": {"__data__": {"text": "\n\nMove Coding Conventions\n\nThis section lays out some basic coding conventions for Move that the Move team has found helpful. These are only recommendations, and you should feel free to use other formatting guidelines and conventions if you have a preference for them.\n\n", "doc_id": "02848a03-cbe6-4c82-a93f-92adb88b95ee", "embedding": null, "doc_hash": "a3b5ecb0379ac4185797d397de65c39273cab640d1f380c33c626e4e01830f88", "extra_info": null, "node_info": {"start": 0, "end": 270, "_node_type": "1"}, "relationships": {"1": "b76148b4-466e-4f10-ade6-6f00717962a0"}}, "__type__": "1"}, "33c3df61-4f59-46ae-9fe7-c9e754ee1c1f": {"__data__": {"text": "\n\nNaming\n\n- **Module names**: should be lower snake case, e.g., `fixed_point32`, `vector`.\n- **Type names**: should be camel case if they are not a native type, e.g., `Coin`, `RoleId`.\n- **Function names**: should be lower snake case, e.g., `destroy_empty`.\n- **Constant names**: should be upper camel case and begin with an `E` if they represent error codes (e.g., `EIndexOutOfBounds`) and upper snake case if they represent a non-error value (e.g., `MIN_STAKE`).\n-\n- **Generic type names**: should be descriptive, or anti-descriptive where appropriate, e.g., `T` or `Element` for the Vector generic type parameter. Most of the time the \"main\" type in a module should be the same name as the module e.g., `option::Option`, `fixed_point32::FixedPoint32`.\n- **Module file names**: should be the same as the module name e.g., `Option.move`.\n- **Script file names**: should be lower snake case and should match the name of the \u201cmain\u201d function in the script.\n- **Mixed file names**: If the file contains multiple modules and/or scripts, the file name should be lower snake case, where the name does not match any particular module/script inside.\n\n", "doc_id": "33c3df61-4f59-46ae-9fe7-c9e754ee1c1f", "embedding": null, "doc_hash": "1684239aa651cd3e8ecbd58393a263e6de1a9439ef9474a98ef6753443ef8b3c", "extra_info": null, "node_info": {"start": 0, "end": 1143, "_node_type": "1"}, "relationships": {"1": "c510d526-7578-4814-8e65-99629c2632b3"}}, "__type__": "1"}, "ff4ab459-e8e8-4403-b2cb-12e412c73e7f": {"__data__": {"text": "\n\nImports\n\n- All module `use` statements should be at the top of the module.\n- Functions should be imported and used fully qualified from the module in which they are declared, and not imported at the top level.\n- Types should be imported at the top-level. Where there are name clashes, `as` should be used to rename the type locally as appropriate.\n\nFor example, if there is a module:\n\n```move\nmodule 0x1::foo {\n    struct Foo { }\n    const CONST_FOO: u64 = 0;\n    public fun do_foo(): Foo { Foo{} }\n    ...\n}\n```\n\nthis would be imported and used as:\n\n```move\nmodule 0x1::bar {\n    use 0x1::foo::{Self, Foo};\n\n    public fun do_bar(x: u64): Foo {\n        if (x == 10) {\n            foo::do_foo()\n        } else {\n            abort 0\n        }\n    }\n    ...\n}\n```\n\nAnd, if there is a local name-clash when importing two modules:\n\n```move\nmodule other_foo {\n    struct Foo {}\n    ...\n}\n\nmodule 0x1::importer {\n    use 0x1::other_foo::Foo as OtherFoo;\n    use 0x1::foo::Foo;\n    ...\n}\n```\n\n", "doc_id": "ff4ab459-e8e8-4403-b2cb-12e412c73e7f", "embedding": null, "doc_hash": "ef90d46b04e2d35a1b96dbe99425aa9b9a068f0a72c0cfa6f3692842c596a5a7", "extra_info": null, "node_info": {"start": 0, "end": 988, "_node_type": "1"}, "relationships": {"1": "7252af03-71cb-445b-a12f-81941ccc2c7d"}}, "__type__": "1"}, "3d663289-cd76-4c2f-894e-7ce7bcad3814": {"__data__": {"text": "\n\nComments\n\n- Each module, struct, and public function declaration should be commented.\n- Move has doc comments `///`, regular single-line comments `//`, block comments `/* */`, and block doc comments `/** */`.\n\n", "doc_id": "3d663289-cd76-4c2f-894e-7ce7bcad3814", "embedding": null, "doc_hash": "32db890cb8478ff0a0d3f62feed059f6c02b01263f97c00ddd05b5256a51a3a0", "extra_info": null, "node_info": {"start": 0, "end": 212, "_node_type": "1"}, "relationships": {"1": "9d8c9bdf-3e0d-4834-a7ca-6dabb22f2715"}}, "__type__": "1"}, "e2eac940-7f78-4ab6-84f1-cfb3195c30a7": {"__data__": {"text": "\n\nFormatting\n\nThe Move team plans to write an autoformatter to enforce formatting conventions. However, in the meantime:\n\n- Four space indentation should be used except for `script` and `address` blocks whose contents should not be indented.\n- Lines should be broken if they are longer than 100 characters.\n- Structs and constants should be declared before all functions in a module.\n\n", "doc_id": "e2eac940-7f78-4ab6-84f1-cfb3195c30a7", "embedding": null, "doc_hash": "9fd4e6dea9ff8a8cf3ddfdc7cc6450f688a275914409372a5dfd26d4c7539fb2", "extra_info": null, "node_info": {"start": 0, "end": 385, "_node_type": "1"}, "relationships": {"1": "8c172c88-07c3-427a-892a-4dc69cfa4a29"}}, "__type__": "1"}, "9624842b-455e-4f8a-8198-b6c152ae0d2b": {"__data__": {"text": "\n\nContribute to the Aptos Ecosystem\n\nWe welcome your own contributions to the Aptos blockchain and this site! Aptos exists to foster an inclusive ecosystem. This page describes ways you can help, while the other pages in this section highlight our community's contributions.\n\nAs always, adhere to the Aptos Code of Conduct when taking part in our ecosystem.\n\n", "doc_id": "9624842b-455e-4f8a-8198-b6c152ae0d2b", "embedding": null, "doc_hash": "291cff35920c4cd472368764c38922a566fda348c691a93e1d3a83ccde4b21d5", "extra_info": null, "node_info": {"start": 0, "end": 359, "_node_type": "1"}, "relationships": {"1": "f78a7560-5db3-4461-b997-e5c527417ea0"}}, "__type__": "1"}, "eb4af9c9-8c74-401f-8d85-696d35fc0240": {"__data__": {"text": "\n\nAsk questions and offer answers\n\nJoin Aptos Discord to speak with developers and hop into the Aptos community. It's the best way to keep up to date with news and developments in the Aptos universe. Be sure to check pinned messages in the channels - this is where we like to post topic-specific links, events, and more.\n\nFor technical questions, we recommend Stack Overflow so anyone in the world may search for, benefit from, and upvote questions and answers in a persistent location. To offer your own advice and find tips from others, post to and use the Aptos Forum.\n\nPlease remember, community managers will never message or DM you first, and they will never ask you to send them money or share any sensitive, private, or personal information. If this happens to you, please report it to us in Aptos Discord.\n\n", "doc_id": "eb4af9c9-8c74-401f-8d85-696d35fc0240", "embedding": null, "doc_hash": "afc17d3809630bd4d11b95c292c54f2a2e6afeb3892c905d24925c425d6704e6", "extra_info": null, "node_info": {"start": 0, "end": 816, "_node_type": "1"}, "relationships": {"1": "615ab3e8-b903-42bb-a59d-7e78592f570f"}}, "__type__": "1"}, "cf539daa-7b59-4359-a1e2-81ae861ff258": {"__data__": {"text": "\n\nReport issues, request enhancements\n\nReview and upvote existing issues in the Aptos blockchain.\n\nFile new issues to report problems or request enhancements. For security concerns, instead follow the Aptos Core Bug Bounty process.\n\nHere are the primary bug queues:\n\n* Bug report - Create a bug report to help improve Aptos Core.\n* DevEx RFC - Open a Request for Comments (RFC) for DevEx improvements.\n* Documentation/aptos.dev Bug report - Create a bug report to help improve the Aptos Developers website.\n* Feature request - Suggest a new feature in Aptos Core.\n\n", "doc_id": "cf539daa-7b59-4359-a1e2-81ae861ff258", "embedding": null, "doc_hash": "b76d8af83dde5694692534dd93cb2ea05c24c6db0be667f7f6a5ffff67096bc7", "extra_info": null, "node_info": {"start": 0, "end": 565, "_node_type": "1"}, "relationships": {"1": "acfbf467-53db-471c-aa73-d59cc3134181"}}, "__type__": "1"}, "55b9bc34-b44b-41b3-a717-6278e74b8afa": {"__data__": {"text": "\n\nDevelop your own project\n\nSee, employ and join the growing number of delightful community-driven projects in the Aptos ecosystem.\n\n", "doc_id": "55b9bc34-b44b-41b3-a717-6278e74b8afa", "embedding": null, "doc_hash": "e6b4e0083c4e71a13b7a2882f5a11233e238be2383fe6cb3369244fca851a231", "extra_info": null, "node_info": {"start": 0, "end": 133, "_node_type": "1"}, "relationships": {"1": "5bee2a00-5b50-4551-8515-9d5fcc97f77b"}}, "__type__": "1"}, "d1bbbe75-769d-46ab-971a-11c9569d8006": {"__data__": {"text": "\n\nBecome an Aptos ambassador\n\nHelp organize events, develop content and more for the ecosystem by joining the Aptos Collective with plenty of perks in return!\n\n", "doc_id": "d1bbbe75-769d-46ab-971a-11c9569d8006", "embedding": null, "doc_hash": "d23f2902520be88fb449b3a4109edb6e6556e61ba2a3b23aed99b49fab8ef612", "extra_info": null, "node_info": {"start": 0, "end": 160, "_node_type": "1"}, "relationships": {"1": "841ba144-1b63-4a63-97c7-291112e15838"}}, "__type__": "1"}, "c8acb57d-693b-40c3-a097-7ee54cbc0699": {"__data__": {"text": "\n\nFix the source code\n\nWe at Aptos love direct contributions in the form of pull requests. Help us make small fixes to code. Follow our coding conventions for:\n\n* Move\n* Rust\n\n", "doc_id": "c8acb57d-693b-40c3-a097-7ee54cbc0699", "embedding": null, "doc_hash": "653187a9b95a551529a5b2f4d21846eaaef378f16679d7755f7a54baf382cf58", "extra_info": null, "node_info": {"start": 0, "end": 176, "_node_type": "1"}, "relationships": {"1": "9013ded4-1762-49d5-91bc-def0ff7b91b8"}}, "__type__": "1"}, "81153018-bbe9-4fe9-9e8d-7ede97af1c12": {"__data__": {"text": "\n\nUpdate the documentation\n\nYou may report problems and supply other input in the #docs-feedback channel of Aptos Discord. To help with our contents, follow Update Aptos.dev.\n\n\n", "doc_id": "81153018-bbe9-4fe9-9e8d-7ede97af1c12", "embedding": null, "doc_hash": "153ef80d16a2e558605f6aecd6f4edcdff4f125f6c5ffca5733f917e475dba3c", "extra_info": null, "node_info": {"start": 0, "end": 177, "_node_type": "1"}, "relationships": {"1": "7e54adc4-82f0-4e84-b055-7b6590ad07f1"}}, "__type__": "1"}, "f4b2b73f-0e55-4b42-9914-e32f2c05e3fe": {"__data__": {"text": "\n\nLearn Aptos Concepts\n\nStart here to get into the core concepts of the Aptos blockchain. Then review our research papers and the Aptos source code found in the Aptos-core repository of GitHub while continuing your journey through this site. The source contains READMEs and code comments invaluable to developing on Aptos.\n\n- ### Aptos White Paper\n- ### Aptos Blockchain Deep Dive\n- ### Accounts\n- ### Resources\n- ### Events\n- ### Transactions and States\n- ### Gas and Transaction Fees\n- ### Blocks\n- ### Staking\n- ### Governance\n\n", "doc_id": "f4b2b73f-0e55-4b42-9914-e32f2c05e3fe", "embedding": null, "doc_hash": "7c187315e6a1fe67fa8184487c7459318456c187b07c163ae771439e6a1c43a3", "extra_info": null, "node_info": {"start": 0, "end": 531, "_node_type": "1"}, "relationships": {"1": "70a02b2c-2f95-40a6-9814-945b3b497856"}}, "__type__": "1"}, "f043bdd6-fede-43de-93ea-f6776d296b58": {"__data__": {"text": "\n\nConditionals\n\nAn `if` expression specifies that some code should only be evaluated if a certain condition is true. For example:\n\n```move\nif (x > 5) x = x - 5\n```\n\nThe condition must be an expression of type `bool`.\n\nAn `if` expression can optionally include an `else` clause to specify another expression to evaluate when the condition is false.\n\n```move\nif (y <= 10) y = y + 1 else y = 10\n```\n\nEither the \"true\" branch or the \"false\" branch will be evaluated, but not both. Either branch can be a single expression or an expression block.\n\nThe conditional expressions may produce values so that the `if` expression has a result.\n\n```move\nlet z = if (x < 100) x else 100;\n```\n\nThe expressions in the true and false branches must have compatible types. For example:\n\n```move=\n// x and y must be u64 integers\nlet maximum: u64 = if (x > y) x else y;\n\n// ERROR! branches different types\nlet z = if (maximum < 10) 10u8 else 100u64;\n\n// ERROR! branches different types, as default false-branch is () not u64\nif (maximum >= 10) maximum;\n```\n\nIf the `else` clause is not specified, the false branch defaults to the unit value. The following are equivalent:\n\n```move\nif (condition) true_branch // implied default: else ()\nif (condition) true_branch else ()\n```\n\nCommonly, `if` expressions are used in conjunction with expression blocks.\n\n```move\nlet maximum = if (x > y) x else y;\nif (maximum < 10) {\n    x = x + 10;\n    y = y + 10;\n} else if (x >= 10 && y >= 10) {\n    x = x - 10;\n    y = y - 10;\n}\n```\n\n", "doc_id": "f043bdd6-fede-43de-93ea-f6776d296b58", "embedding": null, "doc_hash": "0a8e059616d9efb27661b4c5702811506450fbca13a8f53d7ca1838474c57ec8", "extra_info": null, "node_info": {"start": 0, "end": 1498, "_node_type": "1"}, "relationships": {"1": "757cca39-2843-4aa9-8b2f-8a7e56343981"}}, "__type__": "1"}, "e23dae61-93fa-4911-ab19-c2f315507a83": {"__data__": {"text": "\n\nGrammar for Conditionals\n\n> *if-expression* \u2192 **if (** *expression* **)** *expression* *else-clause**opt*\n> *else-clause* \u2192 **else** *expression*\n\n", "doc_id": "e23dae61-93fa-4911-ab19-c2f315507a83", "embedding": null, "doc_hash": "75f4cea1b84b454540a427c4f154d123f02350207d0870463188ead1893f624d", "extra_info": null, "node_info": {"start": 0, "end": 149, "_node_type": "1"}, "relationships": {"1": "29ce5e54-1b49-481f-b099-ab1565101583"}}, "__type__": "1"}, "801163ce-56f3-403f-9308-2e5099ed20a2": {"__data__": {"text": "\n\nConnect to Aptos Network\n\nThis document describes how to connect your running validator node and validator fullnode to an Aptos network. Follow these instructions only if your validator has met the minimal staking requirement. \n\n:::tip Minimum staking requirement\nThe current required minimum for staking is 1M APT tokens.\n:::\n\n", "doc_id": "801163ce-56f3-403f-9308-2e5099ed20a2", "embedding": null, "doc_hash": "1e54d31aff202d7f37c44d9f563c162e28c6c7706346813d0e345c0fb94081be", "extra_info": null, "node_info": {"start": 0, "end": 330, "_node_type": "1"}, "relationships": {"1": "f0bf208f-0cc5-416d-94bc-73deda7c5d18"}}, "__type__": "1"}, "946bef85-aa76-411f-8e66-fbd8dbbb471b": {"__data__": {"text": "\n\nBootstrapping validator node\n\nBefore joining the network, make sure the validator node is bootstrapped with the correct genesis blob and waypoint for the corresponding network. To bootstrap your node, first you need to know the pool address to use:\n\n:::tip \nThe command below uses the network you set for the account when initializing the CLI.\n:::\n\n```bash\naptos node get-stake-pool \\\n  --owner-address  \n```\n\n", "doc_id": "946bef85-aa76-411f-8e66-fbd8dbbb471b", "embedding": null, "doc_hash": "4e18f3d007c359a9cc825466cf3b600df9e4af2660b34748fbdb1883bcbb697f", "extra_info": null, "node_info": {"start": 0, "end": 412, "_node_type": "1"}, "relationships": {"1": "555aaf8d-7dd2-4660-a131-2482d981597c"}}, "__type__": "1"}, "70da071e-66e1-4a22-9bfa-4065306d0594": {"__data__": {"text": "\n\nUsing source code\n\n1. Stop your node and remove the data directory. \n   - **Make sure you remove the `secure-data.json` file also**. View validator.yaml to see the location of the `secure-data.json` file. \n2. Download the `genesis.blob` and `waypoint.txt` files published by Aptos. \n   - See Node Files for your network (mainnet, testnet, or devnet) for the locations and commands to download these files.\n3. Update your `account_address` in the `validator-identity.yaml` and `validator-fullnode-identity.yaml` files to your **pool address**. Do not change anything else. Keep the keys as they are. \n4. Pull the latest changes from the associated (ex. `mainnet`) branch. \n5. Optional] You can use [fast sync to bootstrap your node if the network has been running for a long time (e.g. testnet, mainnet). Add the below configuration to your `validator.yaml` and `fullnode.yaml` files:\n    ```yaml\n    state_sync:\n     state_sync_driver:\n         bootstrapping_mode: DownloadLatestStates\n         continuous_syncing_mode: ApplyTransactionOutputs\n    ```\n6. Close the metrics port `9101` and the REST API port `80` on your validator (you can leave it open for public fullnode).\n7. Restart the validator node and validator fullnode.\n\n", "doc_id": "70da071e-66e1-4a22-9bfa-4065306d0594", "embedding": null, "doc_hash": "9ff567a7e9d35fa654589d5ad07393d99efb64e3de8cbc68b023548e92cb87ed", "extra_info": null, "node_info": {"start": 0, "end": 1232, "_node_type": "1"}, "relationships": {"1": "00e016b1-3502-412f-a31c-36ea933c19dc"}}, "__type__": "1"}, "bc7df002-326f-4923-9455-4efcece03069": {"__data__": {"text": "\n\nUsing Docker\n\n1. Stop your node and remove the data volumes: `docker compose down --volumes`. \n   - **Make sure you remove the `secure-data.json` file too.** See this validator.yaml line for the location of the `secure-data.json` file. \n2. Download the `genesis.blob` and `waypoint.txt` files published by Aptos. \n   - See Node Files for locations and commands to download these files.\n3. Update your `account_address` in the `validator-identity.yaml` and `validator-fullnode-identity.yaml` files to your **pool address**.\n4. Update your Docker image to the latest release of the network branch (e.g. mainnet, testnet).\n5. Optional] You can use [fast sync to bootstrap your node if the network has been running for a long time (e.g. testnet). Add this configuration to your `validator.yaml` and `fullnode.yaml` files:\n    ```yaml\n    state_sync:\n     state_sync_driver:\n         bootstrapping_mode: DownloadLatestStates\n         continuous_syncing_mode: ApplyTransactionOutputs\n    ```\n6. Close the metrics port `9101` and the REST API port `80` on your validator (remove it from the Docker compose file). You can leave it open for the public fullnode.\n7. Restart the node with: `docker compose up`\n\n", "doc_id": "bc7df002-326f-4923-9455-4efcece03069", "embedding": null, "doc_hash": "7e5b86e79b85dd8571e53c3996ad5886688a4755fa750140514f2b5e8975fe2a", "extra_info": null, "node_info": {"start": 0, "end": 1202, "_node_type": "1"}, "relationships": {"1": "a410d1ef-137e-49ba-a134-21e8f32b4101"}}, "__type__": "1"}, "7626abe0-0045-4d95-af6c-d9120f273884": {"__data__": {"text": "\n\nUsing Terraform\n\n1. Increase the `era` number in your Terraform configuration. When this configuration is applied, it will wipe the data.\n2. Update `chain_id` to 1 (for mainnet). The chain IDs for other Aptos networks are in Aptos Blockchain Deployments.\n3. Update your Docker image to the latest release of the network branch (e.g. mainnet, testnet).\n4. Close the metrics port and the REST API port for validator. \n5. [Optional] You can use fast sync to bootstrap your node if the network has been running for a long time (e.g. testnet). by adding the following Helm values in your `main.tf ` file:\n\n    ```json\n    module \"aptos-node\" {\n        ...\n\n        helm_values = {\n            validator = {\n              config = {\n                # use fast sync to start the node\n                state_sync = {\n                  state_sync_driver = {\n                    bootstrapping_mode = \"DownloadLatestStates\"\n                  }\n                }\n              }\n            }\n            service = {\n              validator = {\n                enableRestApi = false\n                enableMetricsPort = false\n              }\n            }\n        }\n    }\n    ```\n\n\n6. **Add monitoring components**\n\n  :::tip Supported only using Terraform\n  This is currently only supported using Terraform.\n  :::\n\n     1. Set the `enable_monitoring` variable in your terraform module. For example:\n\n         ```rust\n         module \"aptos-node\" {\n           ...\n           enable_monitoring           = true\n           utility_instance_num        = 3  # this will add one more utility instance to run monitoring component\n         }\n         ```\n\n     2. Apply the changes with: `terraform apply`\n\n     3. You will see a new pod getting created. Run `kubectl get pods` to check.\n\n     4. Access the dashboard.\n\n         First, find the IP/DNS for the monitoring load balancer.\n\n         ```bash\n         kubectl get svc ${WORKSPACE}-mon-aptos-monitoring --output jsonpath='{.status.loadBalancer.ingress[0]}'\n         ```\n\n         You can access the dashboard on `http://`.\n\n\n7. Pull latest of the terraform module `terraform get -update`, and then apply Terraform: `terraform apply`.\n8. Download the `genesis.blob` and `waypoint.txt` files published by Aptos. \n   - See Node Files for locations and commands to download these files.\n9. Update your `account_address` in the `validator-identity.yaml` and `validator-fullnode-identity.yaml` files to your  **pool", "doc_id": "7626abe0-0045-4d95-af6c-d9120f273884", "embedding": null, "doc_hash": "28e4585c1c1c8a90a54bc65041df75b20f62da86f3fff4ed4df4e4930f376c80", "extra_info": null, "node_info": {"start": 0, "end": 2449, "_node_type": "1"}, "relationships": {"1": "bd74f75c-42ac-43e7-9153-b5cd59b466a0", "3": "205ce612-7806-4949-85c0-e82d9e046536"}}, "__type__": "1"}, "205ce612-7806-4949-85c0-e82d9e046536": {"__data__": {"text": "and `validator-fullnode-identity.yaml` files to your  **pool address**. Do not change anything else. Keep the keys as they are.\n10. Recreate the secrets. Make sure the secret name matches your `era` number, e.g. if you have `era = 3`, then you should replace the secret name to be:\n  ```bash\n  ${WORKSPACE}-aptos-node-0-genesis-e3\n  ```\n\n  ```bash\n  export WORKSPACE=\n\n  kubectl create secret generic ${WORKSPACE}-aptos-node-0-genesis-e2 \\\n      --from-file=genesis.blob=genesis.blob \\\n      --from-file=waypoint.txt=waypoint.txt \\\n      --from-file=validator-identity.yaml=keys/validator-identity.yaml \\\n      --from-file=validator-full-node-identity.yaml=keys/validator-full-node-identity.yaml\n  ```\n\n", "doc_id": "205ce612-7806-4949-85c0-e82d9e046536", "embedding": null, "doc_hash": "43c995d0742ceaafda9e9422d75c3c03943ae214eda829b1cc6c3b61b809c5f4", "extra_info": null, "node_info": {"start": 2389, "end": 3092, "_node_type": "1"}, "relationships": {"1": "bd74f75c-42ac-43e7-9153-b5cd59b466a0", "2": "7626abe0-0045-4d95-af6c-d9120f273884"}}, "__type__": "1"}, "6db496ab-94a9-452b-bc77-87f8629ae4ca": {"__data__": {"text": "\n\nVerify Node Connections\n\nNow that you have connected to the Aptos network, you should verify your node connections.\n\n:::tip Node Liveness Definition\nSee node liveness criteria for details. \n:::\n\nAfter your validator node has joined the validator set, you can validate its correctness by following these steps:\n\n1. Verify that your node is connecting to other peers on the network. **Replace `127.0.0.1` with your validator IP/DNS if deployed on the cloud**.\n\n    ```bash\n    curl 127.0.0.1:9101/metrics 2> /dev/null | grep \"aptos_connections{.*\\\"Validator\\\".*}\"\n    ```\n\n    The command will output the number of inbound and outbound connections of your validator node. For example:\n\n    ```bash\n    aptos_connections{direction=\"inbound\",network_id=\"Validator\",peer_id=\"f326fd30\",role_type=\"validator\"} 5\n    aptos_connections{direction=\"outbound\",network_id=\"Validator\",peer_id=\"f326fd30\",role_type=\"validator\"} 2\n    ```\n\n    As long as one of the metrics is greater than zero, your node is connected to at least one of the peers on the testnet.\n\n2. You can also check if your node is connected to an Aptos node: replace `` with the peer ID shared by Aptos team.\n\n    ```bash\n    curl 127.0.0.1:9101/metrics 2> /dev/null | grep \"aptos_network_peer_connected{.*remote_peer_id=\\\"\\\".*}\"\n    ```\n\n3. Check if your node is state syncing.\n\n    ```bash\n    curl 127.0.0.1:9101/metrics 2> /dev/null | grep \"aptos_state_sync_version\"\n    ```\n    \n    You should expect to see the \"committed\" version keeps increasing.\n\n4. After your node state syncs to the latest version, you can also check if consensus is making progress, and your node is proposing.\n\n    ```bash\n    curl 127.0.0.1:9101/metrics 2> /dev/null | grep \"aptos_consensus_current_round\"\n\n    curl 127.0.0.1:9101/metrics 2> /dev/null | grep \"aptos_consensus_proposals_count\"\n    ```\n\n    You should expect to see this number keep increasing.\n    \n5. Finally, the most straight forward way to see if your node is functioning properly is to check if it is making staking reward. You can check it on the Aptos Explorer: `https://explorer.aptoslabs.com/account/?network=Mainnet`:\n\n    ```json\n    0x1::stake::StakePool\n\n    \"active\": {\n      \"value\": \"100009129447462\"\n    }\n    ```\n    \n    You should expect the active value for your `StakePool` to keep increasing. It is updated at every epoch.\n\n", "doc_id": "6db496ab-94a9-452b-bc77-87f8629ae4ca", "embedding": null, "doc_hash": "2bfa1a684e60785aacd4362e209b5bf44853ab6fc5377b7beac9ca31e8eb150f", "extra_info": null, "node_info": {"start": 0, "end": 2352, "_node_type": "1"}, "relationships": {"1": "925173cd-6a72-4d51-a80a-38c426f92ac5"}}, "__type__": "1"}, "573389c0-6864-4801-80f2-30dd61d2fb35": {"__data__": {"text": "\n\nConstants\n\nConstants are a way of giving a name to shared, static values inside of a `module` or `script`.\n\nThe constant's must be known at compilation. The constant's value is stored in the compiled module\nor script. And each time the constant is used, a new copy of that value is made.\n\n", "doc_id": "573389c0-6864-4801-80f2-30dd61d2fb35", "embedding": null, "doc_hash": "f92484196361ebf17e085f878fcdfd7387189f8f1377ce8dd4f94a5b2d4bdc41", "extra_info": null, "node_info": {"start": 0, "end": 291, "_node_type": "1"}, "relationships": {"1": "fa980610-b366-4dd2-8d61-860580f65cbb"}}, "__type__": "1"}, "94309242-7634-4e76-a805-ea2cc88065fb": {"__data__": {"text": "\n\nDeclaration\n\nConstant declarations begin with the `const` keyword, followed by a name, a type, and a value. They\ncan exist in either a script or module\n\n```text\nconst :  = ;\n```\n\nFor example\n\n```move=\nscript {\n\n    const MY_ERROR_CODE: u64 = 0;\n\n    fun main(input: u64) {\n        assert!(input > 0, MY_ERROR_CODE);\n    }\n\n}\n\naddress 0x42 {\nmodule example {\n\n    const MY_ADDRESS: address = @0x42;\n\n    public fun permissioned(s: &signer) {\n        assert!(std::signer::address_of(s) == MY_ADDRESS, 0);\n    }\n\n}\n}\n```\n\n", "doc_id": "94309242-7634-4e76-a805-ea2cc88065fb", "embedding": null, "doc_hash": "0fe67959b8a6dfa8811bf5d3083e528d38e62cf6daac8244d48f326e12da7809", "extra_info": null, "node_info": {"start": 0, "end": 521, "_node_type": "1"}, "relationships": {"1": "0bf3d763-f4a9-42e8-98bb-7d3e504fe767"}}, "__type__": "1"}, "c34c0811-e53a-4cf6-ad09-3800caf0e899": {"__data__": {"text": "\n\nNaming\n\nConstants must start with a capital letter `A` to `Z`. After the first letter, constant names can\ncontain underscores `_`, letters `a` to `z`, letters `A` to `Z`, or digits `0` to `9`.\n\n```move\nconst FLAG: bool = false;\nconst MY_ERROR_CODE: u64 = 0;\nconst ADDRESS_42: address = @0x42;\n```\n\nEven though you can use letters `a` to `z` in a constant. The\ngeneral style guidelines are to use just uppercase letters `A` to `Z`,\nwith underscores `_` between each word.\n\nThis naming restriction of starting with `A` to `Z` is in place to give room for future language\nfeatures. It may or may not be removed later.\n\n", "doc_id": "c34c0811-e53a-4cf6-ad09-3800caf0e899", "embedding": null, "doc_hash": "9f0d1b062ff579042ceb1888663da8d94540cb43229f303766241a6adec9c558", "extra_info": null, "node_info": {"start": 0, "end": 618, "_node_type": "1"}, "relationships": {"1": "9259e996-030c-4ca6-a131-b18ca820d200"}}, "__type__": "1"}, "066132bf-9db0-46c9-ad14-48d1861acd58": {"__data__": {"text": "\n\nVisibility\n\n`public` constants are not currently supported. `const` values can be used only in the declaring\nmodule.\n\n", "doc_id": "066132bf-9db0-46c9-ad14-48d1861acd58", "embedding": null, "doc_hash": "5a612874cc5c148c2447c51b01bde17e87ad86813a89e7d4d8295301f010ed86", "extra_info": null, "node_info": {"start": 0, "end": 120, "_node_type": "1"}, "relationships": {"1": "c0b2e08e-e40e-47b8-b15b-85c10dc0211d"}}, "__type__": "1"}, "56773bd7-3947-4b54-9b44-cf9d03b08ab3": {"__data__": {"text": "\n\nValid Expressions\n\nCurrently, constants are limited to the primitive types `bool`, `u8`, `u16`, `u32`, `u64`, `u128`, `u256`, `address`, and\n`vector`. Future support for other `vector` values (besides the \"string\"-style literals) will\ncome later.\n\n", "doc_id": "56773bd7-3947-4b54-9b44-cf9d03b08ab3", "embedding": null, "doc_hash": "bd0340723c2641d5864d8e7a130cc99c2d07b1a200811efb363f581f0a1fe3b6", "extra_info": null, "node_info": {"start": 0, "end": 250, "_node_type": "1"}, "relationships": {"1": "00450d20-07ea-455b-b9c0-d85db7d808e3"}}, "__type__": "1"}, "c5e773b8-db00-4db0-ba6c-f63a6ddc776f": {"__data__": {"text": "\n\nValues\n\nCommonly, `const`s are assigned a simple value, or literal, of their type. For example\n\n```move\nconst MY_BOOL: bool = false;\nconst MY_ADDRESS: address = @0x70DD;\nconst BYTES: vector = b\"hello world\";\nconst HEX_BYTES: vector = x\"DEADBEEF\";\n```\n\n", "doc_id": "c5e773b8-db00-4db0-ba6c-f63a6ddc776f", "embedding": null, "doc_hash": "d373c0d9984ea80c1cf27c0c2d084bc1dbe377738fc8d59c386d78ed31b7acb2", "extra_info": null, "node_info": {"start": 0, "end": 254, "_node_type": "1"}, "relationships": {"1": "d6b406bb-0b26-4e97-8ac1-33b02ded7af0"}}, "__type__": "1"}, "8b4f663b-bda3-4b81-ab80-2461f95a1b14": {"__data__": {"text": "\n\nComplex Expressions\n\nIn addition to literals, constants can include more complex expressions, as long as the compiler is\nable to reduce the expression to a value at compile time.\n\nCurrently, equality operations, all boolean operations, all bitwise operations, and all arithmetic\noperations can be used.\n\n```move\nconst RULE: bool = true && false;\nconst CAP: u64 = 10 * 100 + 1;\nconst SHIFTY: u8 = {\n  (1 << 1) * (1 << 2) * (1 << 3) * (1 << 4)\n};\nconst HALF_MAX: u128 = 340282366920938463463374607431768211455 / 2;\nconst REM: u256 = 57896044618658097711785492504343953926634992332820282019728792003956564819968 % 654321;\nconst EQUAL: bool = 1 == 1;\n```\n\nIf the operation would result in a runtime exception, the compiler will give an error that it is\nunable to generate the constant's value\n\n```move\nconst DIV_BY_ZERO: u64 = 1 / 0; // error!\nconst SHIFT_BY_A_LOT: u64 = 1 << 100; // error!\nconst NEGATIVE_U64: u64 = 0 - 1; // error!\n```\n\nNote that constants cannot currently refer to other constants. This feature, along with support for\nother expressions, will be added in the future.\n\n", "doc_id": "8b4f663b-bda3-4b81-ab80-2461f95a1b14", "embedding": null, "doc_hash": "69f858dd531e696802e84122137954c60a9b2f797d7c2e8d8f6404ad6b885e84", "extra_info": null, "node_info": {"start": 0, "end": 1087, "_node_type": "1"}, "relationships": {"1": "2b1d2c20-2915-42ea-a791-9ba602761c76"}}, "__type__": "1"}, "7c8de1fe-92b4-4a69-9ffa-bc4f3d8c8f2d": {"__data__": {"text": "---title: \"Contributors\"hide_table_of_contents: truehide_title: true---import Contributors from \"@site/src/components/Contributors\";<Contributors />", "doc_id": "7c8de1fe-92b4-4a69-9ffa-bc4f3d8c8f2d", "embedding": null, "doc_hash": "1853571769925108f8fba4e0dfc72f18057c40b8223192b653cf55f0e3ed6dd1", "extra_info": null, "node_info": {"start": 0, "end": 148, "_node_type": "1"}, "relationships": {"1": "32581fc6-5031-4cfe-8a78-864105c29e6e"}}, "__type__": "1"}, "76176e66-6949-4bcc-99cf-e5a676f30fb7": {"__data__": {"text": "\n\nMove Tutorial\n\nPlease refer to the Move Core Language Tutorial.\n\n", "doc_id": "76176e66-6949-4bcc-99cf-e5a676f30fb7", "embedding": null, "doc_hash": "56b5d1d5a0ad8989ab016c5782d35d6f1663bdb9f459b85873cd98209466bd60", "extra_info": null, "node_info": {"start": 0, "end": 67, "_node_type": "1"}, "relationships": {"1": "1252c255-e0a7-4dc4-b65a-531f173fd732"}}, "__type__": "1"}, "931626f1-e4ba-473b-9e61-1cbfe8ba8897": {"__data__": {"text": "\n\nData Pruning\n\nWhen a validator node is running, it participates in consensus to execute\ntransactions and commit new data to the blockchain. Similarly, when fullnodes\nare running, they sync the new blockchain data through state synchronization.\nAs the blockchain grows, storage disk space can be managed by pruning old\nblockchain data. Specifically, by pruning the **ledger history**: which\ncontains old transactions. By default, ledger pruning is enabled on all\nnodes with a pruning window that can be configured. This document describes\nhow you can configure the pruning behavior.\n\n:::note\nBy default the ledger pruner keeps 150 million recent transactions. Unless \nbootstrapped from the genesis and configured to disable the pruner or a long \nprune window, the node doesn't carry the entirety of the ledger history. \nMajority of the nodes on both the testnet and mainnet have a partial \nhistory of 150 million transactions according to this configuration.\n:::\n\n\nTo manage these settings, edit the node configuration YAML files,\nfor example, `fullnode.yaml` for fullnodes (validator or public) or\n`validator.yaml` for validator nodes, as shown below.\n\n", "doc_id": "931626f1-e4ba-473b-9e61-1cbfe8ba8897", "embedding": null, "doc_hash": "43160d47feacc8b567a5c77b03a91eb9ebf88a641f51582ee40f9f9b3c65cd4a", "extra_info": null, "node_info": {"start": 0, "end": 1155, "_node_type": "1"}, "relationships": {"1": "4d29a8ba-c633-4948-a8dc-99efda1dee42"}}, "__type__": "1"}, "1b6e47f9-7ba0-4c2e-9d4a-4b8ac938bc15": {"__data__": {"text": "\n\nDisabling the ledger pruner\n\nAdd the following to the node configuration YAML file to disable the\nledger pruner:\n\n:::caution Proceed with caution\nDisabling the ledger pruner can result in the storage disk filling up very quickly.\n:::\n\n```yaml\nstorage:\n storage_pruner_config:\n  ledger_pruner_config:\n   enable: false\n```\n\n", "doc_id": "1b6e47f9-7ba0-4c2e-9d4a-4b8ac938bc15", "embedding": null, "doc_hash": "ba4c044dfd42daf7ac949de98e4567f084feddaf14ef3c4d6fd2dd566859bb21", "extra_info": null, "node_info": {"start": 0, "end": 324, "_node_type": "1"}, "relationships": {"1": "39e154aa-18d7-4de0-9e9e-a99fc184da55"}}, "__type__": "1"}, "fabb0d6a-27bc-4540-940d-4c38cbe21f99": {"__data__": {"text": "\n\nConfiguring the ledger pruning window\n\nAdd the following to the node configuration YAML file to make the node\nretain, for example, 1 billion transactions and their outputs, including events\nand write sets.\n\n:::caution Proceed with caution\nSetting the pruning window smaller than 100 million can lead to runtime errors and damage the health of the node.\n:::\n\n```yaml\nstorage:\n storage_pruner_config:\n  ledger_pruner_config:\n    prune_window: 1000000000\n```\n\nSee the complete set of storage configuration settings in the Storage README.\n\n", "doc_id": "fabb0d6a-27bc-4540-940d-4c38cbe21f99", "embedding": null, "doc_hash": "2241637b559272367e241c92401df4f167e509d95b8956f9ffb27ca277a4689c", "extra_info": null, "node_info": {"start": 0, "end": 538, "_node_type": "1"}, "relationships": {"1": "80555ce4-3299-4865-b551-050066c5ddfe"}}, "__type__": "1"}, "60cd1c40-e76d-48ca-985f-af89d5c52fc4": {"__data__": {"text": "\n\nDelegated Staking\n\n", "doc_id": "60cd1c40-e76d-48ca-985f-af89d5c52fc4", "embedding": null, "doc_hash": "7403326c959715ed9840248c2eccf8f5002598032ded188c3329f631db0bff04", "extra_info": null, "node_info": {"start": 0, "end": 21, "_node_type": "1"}, "relationships": {"1": "39c4a9a8-95d0-4361-a5c0-304bcf56c27e"}}, "__type__": "1"}, "e4576160-8ca0-41e1-8c6d-015b0513c61f": {"__data__": {"text": "\n\nDelegated Staking on the Aptos Blockchain\n\n:::tip We strongly recommend that you read about Staking first. :::\n\nDelegated staking is an extension of the staking protocol. A delegation pool abstracts the stake owner to an entity capable of collecting stake from delegators and adding it on their behalf to the native stake pool attached to the validator. This allows multiple entities to form a stake pool that achieves the minimum requirements for the validator to join the validator set. While delegators can add stake to an inactive pool, the delegation pool will not earn rewards until it is active.\n\n:::danger Delegation pools are permissionless and anyone can add stake. Stake pools cannot be changed once it's created, though it can be removed from the validator set and assets withdrawn. For full details of the stake pool, see Staking\n::: \n\nFor the full delegation pool smart contract, see delegation_pool.move \n\nUnlike a stake pool, a delegation pool can be initialized with zero stake. When initialized, the delegated stake pool is owned indirectly via a resource account.  This account will manage the stake of the underlying stake pool on behalf of the delegators by forwarding their stake-management operations to it (add, unlock, reactivate, withdraw) while the resource account cannot be directly accessed nor externally owned.\n\nSee full list of Delegation Pool Operations\n\n!image\n\n\nThere are four entity types:\n\n- Owner\n- Operator\n- Voter\n- Delegator\n\n\nUsing this model, the owner does not have to stake on the Aptos blockchain in order to run a validator. \n\n\nHow Validation on the Aptos blockchain works\n\n\n", "doc_id": "e4576160-8ca0-41e1-8c6d-015b0513c61f", "embedding": null, "doc_hash": "d770998b5ce21600c7255dea4911ea00933f91aa991381bf2e4b7787ac2ec7d6", "extra_info": null, "node_info": {"start": 0, "end": 1625, "_node_type": "1"}, "relationships": {"1": "4dfbcd6c-658e-4f4b-89aa-2c1c3963a6ab"}}, "__type__": "1"}, "72a8b52f-95ef-492d-a755-bdb5f0bbbf07": {"__data__": {"text": "\n\nOwner\n\nThe delegation pool owner has the following capabilities:\n\n1. Creates delegation pool\n2. Assigns operator for the delegation pool\n3. Sets operator commission percentage for the delegation pool\n4. Assigns voter for the delegation pool\n\n", "doc_id": "72a8b52f-95ef-492d-a755-bdb5f0bbbf07", "embedding": null, "doc_hash": "0a7601a0898c145b5a165ff8f5539959ce0947ad6953bd8ae695c53f3f7932b2", "extra_info": null, "node_info": {"start": 0, "end": 244, "_node_type": "1"}, "relationships": {"1": "07360a3e-73b6-4e43-979a-6ea11a5c0fb8"}}, "__type__": "1"}, "1e8e2820-4201-4b93-9d67-2c285f5881bc": {"__data__": {"text": "\n\nOperator\n\nA node operator is assigned by the pool owner to run the validator node. The operator has the following capabilities:\n\n1. Join or leave the validator set once the delegation pool reaches 1M APT\n2. Perform validating functions\n3. Change the consensus key and network addresses. The consensus key is used to participate in the validator consensus process, i.e., to vote and propose a block. The operator is allowed to change (\"rotate\") this key in case this key is compromised.\n\nThe operator receives commission that is distributed automatically at the end of each epoch as rewards. \n\n", "doc_id": "1e8e2820-4201-4b93-9d67-2c285f5881bc", "embedding": null, "doc_hash": "edd580c3b4b8d7c31ee59c97e24a2d6b6a601f5587314017bd9ade731641fbab", "extra_info": null, "node_info": {"start": 0, "end": 595, "_node_type": "1"}, "relationships": {"1": "2f304f0a-82ef-4eba-8166-106770bf2177"}}, "__type__": "1"}, "4f206be0-3614-4d76-b775-a4dc0dc2f214": {"__data__": {"text": "\n\nVoter\n\nAn owner can designate a voter. This enables the voter to participate in governance. The voter will use the voter key to sign the governance votes in the transactions.\n\n:::tip Governance\nThis document describes staking. See Governance for how to participate in the Aptos on-chain governance using the owner-voter model.\n:::\n\n", "doc_id": "4f206be0-3614-4d76-b775-a4dc0dc2f214", "embedding": null, "doc_hash": "82a60e65484d41e5fa7ec608bc36572c41dea47e28fdd01f559bd85eb4a410ac", "extra_info": null, "node_info": {"start": 0, "end": 334, "_node_type": "1"}, "relationships": {"1": "756378d7-9f9e-441f-a7cb-ee1cb900c4fe"}}, "__type__": "1"}, "e0ddaa09-fe68-4ed2-a5c3-16f2ff602e66": {"__data__": {"text": "\n\nDelegator\n\nA delegator is anyone who has stake in the delegation pool. Delegators earn rewards on their stake minus any commissions for the operator. Delegators can perform the following delegator operations:\n\n1. Add stake\n2. Unlock stake\n3. Reactivate stake\n4. Withdraw stake\n\n", "doc_id": "e0ddaa09-fe68-4ed2-a5c3-16f2ff602e66", "embedding": null, "doc_hash": "d85a7931af621adb145d5402b004fbb0511cfeba80a364f69030ca498a52df54", "extra_info": null, "node_info": {"start": 0, "end": 280, "_node_type": "1"}, "relationships": {"1": "c3f21140-36de-43e0-9523-24caf0f2b82e"}}, "__type__": "1"}, "2664c39d-4217-470d-a9cf-5bdae871702f": {"__data__": {"text": "\n\nValidator flow\n\n:::tip Delegation pool operations\nSee Delegation pool operations for the correct sequence of commands to run for the below flow.\n:::\n\n1. Operator deploys validator node\n2. Run command to get delegation pool address\n3. Operator connects to the network using pool address derived in step 2\n4. Owner initializes the delegation pool and sets operator\n5. Delegators can add stake at any time\n6. When the delegation pool reaches 1M APT, the operator can call aptos node join-validator-set to join the active validator set. Changes will be effective in the next epoch.\n7. Validator validates (proposes blocks as a leader-validator) and gains rewards.  Rewards are distributed to delegators proportionally to stake amount. The stake will automatically be locked up for a fixed duration (set by governance) and automatically renewed at expiration.\n8. At any point, if the operator wants to update the consensus key or validator network addresses, they can call aptos node update-consensus-key or aptos node update-validator-network-addresses. Similar to changes to stake, the changes to consensus key or validator network addresses are only effective in the next epoch.\n9. Delegators can request to unlock their stake at any time. However, their stake will only become withdrawable when the delegation pool lockup expires. \n10. Validator can either explicitly leave the validator set by calling aptos node leave-validator-set or if their stake drops below the min required, they would get removed at the end of the epoch.\n\n\n", "doc_id": "2664c39d-4217-470d-a9cf-5bdae871702f", "embedding": null, "doc_hash": "750313f217aaf3d2dc6dacdbce5e4287061510ea5d7c7707e22fd2a5545085aa", "extra_info": null, "node_info": {"start": 0, "end": 1533, "_node_type": "1"}, "relationships": {"1": "e46ee009-b0f2-4804-b1b1-207e02973f78"}}, "__type__": "1"}, "cf9c02bb-3678-439c-b88f-8a0482b0352a": {"__data__": {"text": "\n\nJoining the validator set\n\nParticipating as a delegation validator node on the Aptos network works like this:\n\n1. Operator runs a validator node and configures the on-chain validator network addresses and rotates the consensus key.\n2. Owner initializes the delegation pool.\n3. The validator node cannot sync until the delegation pool becomes active. The delegation pool becomes active when it reaches 1M APT. \n4. Operator validates and gains rewards.\n5. The stake pool is automatically locked up for a fixed duration (set by the Aptos governance) and will be automatically renewed at expiration. Commissions are automatically distributed to the operator as rewards. The operator can unlock stake at any time, but cannot withdraw until the delegation pool\u2019s lockup period expires. \n6. Operator must wait until the new epoch starts before their validator becomes active.\n\n:::tip Joining the validator set\nFor step-by-step instructions on how to join the validator set, see: Joining Validator Set.\n:::\n\n", "doc_id": "cf9c02bb-3678-439c-b88f-8a0482b0352a", "embedding": null, "doc_hash": "592eae0956196d57e6088626df41475a2983019977cb982dc581a1926f2ab57c", "extra_info": null, "node_info": {"start": 0, "end": 1002, "_node_type": "1"}, "relationships": {"1": "6883460f-9a1f-4bc6-9911-50875b9f155c"}}, "__type__": "1"}, "28e387eb-bdf7-4f55-8f62-d3c06cde150c": {"__data__": {"text": "\n\nAutomatic lockup duration\n\nWhen the operator joins the validator set, the delegation pool's stake will automatically be locked up for a fixed duration that is set by the Aptos governance. Delegators will follow the delegation pool's lockup cycle. \n\n", "doc_id": "28e387eb-bdf7-4f55-8f62-d3c06cde150c", "embedding": null, "doc_hash": "eb46ce6b14a49f723cfd48fb29ee6ccd39ca9ea7dacbf857cac266500eaab58e", "extra_info": null, "node_info": {"start": 0, "end": 251, "_node_type": "1"}, "relationships": {"1": "102557bf-8bd3-4aeb-b18e-751206ed15d8"}}, "__type__": "1"}, "e9a55d8c-ad76-4248-bf18-d6067c16afe0": {"__data__": {"text": "\n\nAutomatic lockup renewal\n\nWhen the lockup period expires, it will be automatically renewed, so that the validator can continue to validate and receive the rewards. \n\n", "doc_id": "e9a55d8c-ad76-4248-bf18-d6067c16afe0", "embedding": null, "doc_hash": "c2163b0fa62f1fd94cc1e68748cfb862e6a760249801b140302c95dc5dca6220", "extra_info": null, "node_info": {"start": 0, "end": 168, "_node_type": "1"}, "relationships": {"1": "8b766d04-b8ba-4d29-afbe-333f43449b1d"}}, "__type__": "1"}, "11ed633e-182b-4aa8-892b-a8270dc4236e": {"__data__": {"text": "\n\nUnlocking your stake\n\nDelegators can unlock stake at any time. However, the stake will only become withdrawable after the delegation pool's lockup period expires. Unlocked stake will continue earning rewards until the stake becomes withdrawable. \n\n", "doc_id": "11ed633e-182b-4aa8-892b-a8270dc4236e", "embedding": null, "doc_hash": "cd882e2242e9dcfe81aa6d18b1d3a7bdb134e4db7b3ccbff9d6aa8ce69190cb0", "extra_info": null, "node_info": {"start": 0, "end": 250, "_node_type": "1"}, "relationships": {"1": "8086015f-2c38-4072-9d0b-f62337ee9ec2"}}, "__type__": "1"}, "b0aec804-a0bc-45be-b7f4-3afeccdc6cc0": {"__data__": {"text": "\n\nResetting the lockup\n\nLockup cannot be reset. \n\n", "doc_id": "b0aec804-a0bc-45be-b7f4-3afeccdc6cc0", "embedding": null, "doc_hash": "67978f958db490b4382d4f09bb0d7ee1ba8ed4d7bfed8cdc258db22857abfcfa", "extra_info": null, "node_info": {"start": 0, "end": 50, "_node_type": "1"}, "relationships": {"1": "b21c07ea-0fcd-48c4-962e-e9fe9f7044d3"}}, "__type__": "1"}, "1c1a1e2d-27bb-485e-afd6-06074eb1ebd7": {"__data__": {"text": "\n\nRewards\n\nRewards for delegated staking are calculated by using:\n\n1. The rewards_rate, an annual percentage yield (APY), i.e., rewards accrue as a compound interest on your current staked amount.\n2. Delegator stake\n3. Validator rewards performance\n\nSee Computing delegation pool rewards\n\n", "doc_id": "1c1a1e2d-27bb-485e-afd6-06074eb1ebd7", "embedding": null, "doc_hash": "e89148de433aaa49106ac250d2f65d37e14a2f0baef34797ceb721921d9758e1", "extra_info": null, "node_info": {"start": 0, "end": 289, "_node_type": "1"}, "relationships": {"1": "3915477c-6ac5-41cc-81c7-4197ad83fd6a"}}, "__type__": "1"}, "42203a99-12e7-4a2a-8098-7b89763ddc8f": {"__data__": {"text": "\n\nDelegation Pool Operations\n\n> Beta: This documentation is in experimental, beta mode. Supply feedback by requesting document changes. See also the related Staking Pool Operations instructions.\n\nValidator operators should follow these instructions to carry out delegation pool operations for staking. You may delegate as little as 10 APT plus a small add stake fee that will be mostly refunded as rewards at the end of the current 2-hour epoch. You might notice that some UIs might use 11 APT as the minimum for a round number. Note that your validator will become part of the *Active Validator Set* only when the delegation pool satisfies the minimum cumulative staking requirement of 1 million APT.\n\nOnce the delegation pool attains 1 million APT, the pool's owner who initiates the delegation pool should set an operator for the pool via the `set_operator` function described in the Perform pool owner operations section. The operator should then start their own Aptos node, as it is a best practice to have a different account for owner and operator. The operator should now join in the active set of validators.\n\nThe operator address will receive the pool commission that was set at the initialization of the delegation pool, which is automatically distributed as stake in the delegation pool at the end of each epoch. The operator will act as a normal Delegation Pool account that is able to do all of the operations described in Perform delegation pool operations.\n\n\n", "doc_id": "42203a99-12e7-4a2a-8098-7b89763ddc8f", "embedding": null, "doc_hash": "3de2c287f28ce1846e592c72644a147ac79f0271f43503c69c6a96b2121f054d", "extra_info": null, "node_info": {"start": 0, "end": 1475, "_node_type": "1"}, "relationships": {"1": "ecd9da7a-e45f-4cb8-af47-9d11d576b15e"}}, "__type__": "1"}, "d7a588d5-0968-48ec-901f-e0f8c28aeb30": {"__data__": {"text": "\n\nPrerequisites\n\n1. Install and configure the Aptos CLI. If you are looking to develop on the Aptos blockchain, debug apps, or perform node operations, the Aptos tool offers a command line interface for these purposes.\n2. Initialize local configuration and create an account on the Aptos blockchain.\n\n", "doc_id": "d7a588d5-0968-48ec-901f-e0f8c28aeb30", "embedding": null, "doc_hash": "862c6f06334eac495f54d1c6636b8c84376beb84801a4fc8a40bbf687d0e0de5", "extra_info": null, "node_info": {"start": 0, "end": 301, "_node_type": "1"}, "relationships": {"1": "271d8a50-f3b3-45ea-9594-3e5df3a8b9c5"}}, "__type__": "1"}, "7fddde73-a01b-4b36-ad9c-5fc99ed5eda0": {"__data__": {"text": "\n\nConnect to Aptos network\n\nTo create a delegation pool and obtain information about it, connect to the Aptos Network and launch your own Aptos node.\n\nYou can use the following CLI commands to obtain the delegation pool address depending on where you are in the process:\n- Before you create the delegation pool:  \n    ```bash\n    aptos account derive-resource-account-address --address  --seed \"aptos_framework::delegation_pool\" --seed-encoding utf8\n    ```  \n- After you create the delegation pool: \n    ```bash\n    aptos account derive-resource-account-address\n    ```\n\n", "doc_id": "7fddde73-a01b-4b36-ad9c-5fc99ed5eda0", "embedding": null, "doc_hash": "968270dc68778999f4bd1580093e5fcc22975982757ad30085d4edcebc5a9578", "extra_info": null, "node_info": {"start": 0, "end": 572, "_node_type": "1"}, "relationships": {"1": "bdc3c139-a3fc-4444-a7a4-e9cb6ae40e70"}}, "__type__": "1"}, "ca45af5a-98eb-4aba-9f87-ad7023655325": {"__data__": {"text": "\n\nInitialize a delegation pool\n\nNow initialize a delegation pool by following these steps:\n\n1. Run the command below, substitute in the profile you previously configured during initialization:\n    ```bash\n    aptos move run --profile  \\ \n    --function-id 0x1::delegation_pool::initialize_delegation_pool \\\n    --args u64:1000 string:00\n    ```\n    Where `--args`:\n  \n    - `u64:1000` represents `operator_commission_percentage` - 1000 is equivalent to 10% and 10000 is 100%.\n    - `string:00` represents `delegation_pool_creation_seed` - a number chosen by you to create a resource account associated with your owner address; this account is used to host the delegation pool resource. You should use the same number here as the `--seed` you used in the previous step to create the delegation pool. \n\n    Note that once `operator_commission_percentage` is set, it cannot be changed.\n\n 2. Once this command is executed without error an account for resources is established using the `owner` signer and a provided `delegation_pool_creation_seed` to hold the `delegation pool resource` and possess the underlying stake pool.\n \n 3. The `owner` is granted authority over assigning the `operator` and `voter` roles, which are initially held by the `owner`.\n \n 4. The delegation pool can now accept a minimum amount of 10 APT from any user who wishes to delegate to it.\n\n", "doc_id": "ca45af5a-98eb-4aba-9f87-ad7023655325", "embedding": null, "doc_hash": "f20a70e118aacc9ba32bfd629f974096b1a70493598d6f8485d3473ea0d41df2", "extra_info": null, "node_info": {"start": 0, "end": 1364, "_node_type": "1"}, "relationships": {"1": "8d44aff4-3cd0-4558-8552-89cc1a279971"}}, "__type__": "1"}, "3a08b14b-3bed-4a55-81f4-90f89a9b628c": {"__data__": {"text": "\n\nPerform delegation pool operations\n\nThis section describes the available operations that can be performed on this recently created pool. Once the delegation pool has been established, use the Aptos CLI to operate the pool. The available actions that can be performed on it include:\n\n* Add `amount` of coins to the delegation pool `pool_address` using the public entry method `add_stake(delegator: &signer, pool_address: address, amount u64)` and substituting your values into the command below before running it:\n\n  ```bash\n  aptos move run --profile delegator \\\n  --function-id 0x1::delegation_pool::add_stake \\ \n  --args address: u64:\n  ```\n  \n* Undelegate (unlock) the amount of funds from the delegator's active and pending active stake up to the limit of the active stake in the stake pool using public entry method `unlock(delegator: &signer, pool_address: address, amount: u64)` and substituting your values into the command below before running it:\n\n  ```bash\n  aptos move run --profile delegator \\\n  --function-id 0x1::delegation_pool::unlock \\ \n  --args address: u64:\n  ```\n  \n* Cancel undelegate (reactivate stake) `amount` of coins from `pending_inactive` state to `active state` using public entry method `reactivate_stake(delegator: &signer, pool_address: address, amount: u64)` with the command and your values:\n\n  ```bash\n  aptos move run --profile delegator \\\n  --function-id 0x1::delegation_pool::reactivate_stake \\\n  --args address: u64:\n  ```\n \n* Withdraw `amount` of owned inactive stake from the delegation pool at `pool_address` using the public entry method ` withdraw(delegator: &signer, pool_address: address, amount: u64)` and the command:\n\n  ```bash\n  aptos move run --profile delegator \\\n  --function-id 0x1::delegation_pool::withdraw \\\n  --args address: u64:\n  ```\n\n", "doc_id": "3a08b14b-3bed-4a55-81f4-90f89a9b628c", "embedding": null, "doc_hash": "950f1e78093bfa841eac4423f18ec02754f25afdce0909de4448811b5e586bf8", "extra_info": null, "node_info": {"start": 0, "end": 1798, "_node_type": "1"}, "relationships": {"1": "af33463e-e5d5-4335-bc6b-5554291aeefd"}}, "__type__": "1"}, "c248dcbd-d79e-4cd4-a253-e77ac88efd6c": {"__data__": {"text": "\n\nPerform pool owner operations\n \nDelegation pool owners have access to specific methods designed for modifying the `operator` and `voter` roles of the delegation pool. Use the following Aptos CLI commands and include the relevant addresses:\n\n* Set the operator address for the delegation pool:\n\n  ```bash\n  aptos move run --profile delegation_pool_owner \\\n  --function-id 0x1::delegation_pool::set_operator \\\n  --args address:\n  ```\n\n* Set the delegated voter address for the delegation pool:\n\n  ```bash\n  aptos move run --profile delegation_pool_owner \\\n  --function-id 0x1::delegation_pool::set_delegated_voter \\\n  --args address:\n  ```\n  \n", "doc_id": "c248dcbd-d79e-4cd4-a253-e77ac88efd6c", "embedding": null, "doc_hash": "22be7c0526f8d2a0d828bdb8200ce83ecd177d7e9cfba29c7a05766a00d1789e", "extra_info": null, "node_info": {"start": 0, "end": 643, "_node_type": "1"}, "relationships": {"1": "6cdd57b8-6bb8-4213-b44b-ee3397a264f2"}}, "__type__": "1"}, "1f7afc14-290b-4a47-a565-db8c02319567": {"__data__": {"text": "\n\nCheck delegation pool information\n\nUntil the delegation pool has received 1 million APT and the validator has been added to the set of active validators, there will be no rewards to track during each cycle. In order to obtain information about a delegation pool, use the Aptos View functon.\n\n* `get_owned_pool_address(owner: address): address` -  Returns the address of the delegation pool belonging to the owner, or produces an error if there is no delegation pool associated with the owner.\n\n* `delegation_pool_exists(addr: address): bool` - Returns true if a delegation pool exists at the provided address `addr`.\n\n* `operator_commission_percentage(pool_address: address): u64` - Returns the operator commission percentage set on the delegation pool at initialization.\n\n* `get_stake(pool_address: address, delegator_address: address): (u64, u64, u64)` - Returns total stake owned by `delegator_address` within delegation pool `pool_address` in each of its individual states: (`active`,`inactive`,`pending_inactive`).\n\n* `get_delegation_pool_stake(pool_address: address): (u64, u64, u64, u64)` - Returns the stake amounts on `pool_address` in the different states:      (`active`,`inactive`,`pending_active`,`pending_inactive`).\n\n* `shareholders_count_active_pool(pool_address: address): u64` - Returns the number of delegators owning an active stake within `pool_address`. \n\n* `get_pending_withdrawal(pool_address: address, delegator_address: address): (bool, u64)` - Returns if the specified delegator possesses any withdrawable stake. However, if the delegator has recently initiated a request to release some of their stake and the stake pool's lockup cycle has not ended yet, then their funds may not yet be available for withdrawal.\n\n* `can_withdraw_pending_inactive(pool_address: address): bool` - Returns whether `pending_inactive` stake can be directly withdrawn from the delegation pool, implicitly its stake pool, in the special case the validator had gone inactive before its lockup expired.\n\n\nIn the Aptos TypeScript SDK, a View function request would resemble:\n\n```bash\nimport {AptosClient, ViewRequest} from \"aptos\";\n\nconst NODE_URL = \"https://aptos-testnet.public.blastapi.io\";\n\n(async () => {\n    const client = new AptosClient(NODE_URL);\n    const payload: ViewRequest = {\n        function: \"0x1::delagation_pool::get_stake\",\n        type_arguments: [],\n        arguments: [\"pool_address\", \"delegator_address\"],\n    };\n    console.log(await client.view(payload));\n})();\n\n```\nAlternatively, you can use Aptos CLI to call View functions. \n\n```bash\n aptos move view [OPTIONS] --function-id \n```\n\nTo discover the available options and the process for making an `aptos move view` call, access the help information with `aptos move view --help`. This will display the required arguments for invoking the view functions.\n\n\n", "doc_id": "1f7afc14-290b-4a47-a565-db8c02319567", "embedding": null, "doc_hash": "49b1c9d7ec4713d8aa9706295345fd067ce6453502848267d81b6cc1590e0921", "extra_info": null, "node_info": {"start": 0, "end": 2838, "_node_type": "1"}, "relationships": {"1": "3a8a8cea-f0a8-46ac-9f8a-298934109219"}}, "__type__": "1"}, "6492d96f-9df2-4857-b4a0-35fb9a6206c8": {"__data__": {"text": "\n\nCompute delegation pool rewards earned\nUse this formula to calculate *rewards earned* for `active` and `pending_inactive` staking. This formula assumes that different stake operations such as `unlock` and `reactivate` take out the *principals* first and then *rewards*. Therefore, *rewards earned* may vary based upon how the formula you use is constructed:\n\n1. Get the amount of `active` and `pending_inactive` staking from the `get_stake` view function.\n\n2. Calculate principal:\n    - \"active principal\" = **AddStakeEvent** - **UnlockStakeEvent** + **ReactivateStakeEvent**. If at any point during the iteration, \"active principal\" < 0, reset to 0. Negative principal could happen when the amount users `unlock` include rewards earned from staking.\n    - \"pending inactive principal\" = **UnlockStakeEvent** - **ReactivateStakeEvent**. If at any point during the iteration, \"pending inactive principal\" < 0, reset to 0. Negative principal could happen when the amount users `reactivate` include rewards earned from staking.\n\n3. Compute rewards earned:\n    - active_rewards = `active` - *active principal*.\n    - pending_inactive_rewards = `pending_inactive` - \"pending inactive principal\".\n\n", "doc_id": "6492d96f-9df2-4857-b4a0-35fb9a6206c8", "embedding": null, "doc_hash": "bef9066b9acdab7bad946ba64a23bbbdabaee511dc605c13772ef024f572e12a", "extra_info": null, "node_info": {"start": 0, "end": 1194, "_node_type": "1"}, "relationships": {"1": "b73213a9-ec26-4a13-bbcd-6c8007964f6d"}}, "__type__": "1"}, "87ff6b14-7886-4bed-b106-e2e31e8d310e": {"__data__": {"text": "\n\nAptos Deployments\n\n|Description                                 |Mainnet | Testnet | Devnet |\n|--------------------------------------------|---|---|---|\n|**REST API**             | https://fullnode.mainnet.aptoslabs.com/v1 | https://fullnode.testnet.aptoslabs.com/v1 | https://fullnode.devnet.aptoslabs.com/v1 |\n|**REST API Spec**        | Link | Link | Link | \n|**Indexer API**          | https://indexer.mainnet.aptoslabs.com/v1/graphql | https://indexer-testnet.staging.gcp.aptosdev.com/v1/graphql | https://indexer-devnet.staging.gcp.aptosdev.com/v1/graphql |\n|**Indexer API Spec**     | Link | Link | Link | \n|**Faucet**               | No Faucet | (API): https://faucet.testnet.aptoslabs.com  (dApp): https://aptoslabs.com/testnet-faucet | https://faucet.devnet.aptoslabs.com/ |\n|**Genesis and Waypoint** | https://github.com/aptos-labs/aptos-networks/tree/main/mainnet | https://github.com/aptos-labs/aptos-networks/tree/main/testnet| https://github.com/aptos-labs/aptos-networks/tree/main/devnet |\n|**Chain ID**             | 1 | 2 | On Aptos Explorer **select Devnet from top right**.|\n|**Epoch duration**       | 7200 seconds |7200 seconds | 7200 seconds |\n|**Network providers**    | Fully decentralized. | Managed by Aptos Labs on behalf of Aptos Foundation. | Managed by Aptos Labs on behalf of Aptos Foundation. |\n|**Release cadence**      | Monthly | Monthly | Weekly |\n|**Wipe cadence**         | Never. | Never. | On update. |\n|**Purpose**              | The main Aptos network. | Long-lived test network. | Bleeding edge and exploratory. |\n|**Network status**       | Always live. | Always live. | Almost always live, with brief interruptions during updates. |\n\n", "doc_id": "87ff6b14-7886-4bed-b106-e2e31e8d310e", "embedding": null, "doc_hash": "2f6f6b0d3e4c016c1703d2f0a29517e6b5988d3be1fbfa704eb74e23cef2e18d", "extra_info": null, "node_info": {"start": 0, "end": 1682, "_node_type": "1"}, "relationships": {"1": "5c797949-fbb7-46f8-b494-7b339f628870"}}, "__type__": "1"}, "6bdea580-1aa6-4ac5-8dac-a89bae79b2ab": {"__data__": {"text": "\n\nLatest Devnet Release\n\nThe table below contains latest release information for each Aptos component in the devnet network. We also suggest you monitor the #devnet-release channel of Aptos Discord for ongoing updates.\n\nSee the Latest Aptos Releases index for how to subscribe to GitHub notifications and more release-related information.\n\n", "doc_id": "6bdea580-1aa6-4ac5-8dac-a89bae79b2ab", "embedding": null, "doc_hash": "2c0806d7fc5f713aa778d251ab019f85ada3e915041f3264bee82347af9a08b1", "extra_info": null, "node_info": {"start": 0, "end": 340, "_node_type": "1"}, "relationships": {"1": "860672a3-ed29-4d6d-b380-6d47d4ee0743"}}, "__type__": "1"}, "c217be73-3384-4f50-8caf-2d557c781f0c": {"__data__": {"text": "\n\nAptos SDK\n\nAptos SDK Release v1.8.5. Check out the change-log here.\n\n", "doc_id": "c217be73-3384-4f50-8caf-2d557c781f0c", "embedding": null, "doc_hash": "bdd95a5d04c5f6adc1a9ce9a6bdee8ae03271dc99314d0fc2d1d1b94b8cf99ca", "extra_info": null, "node_info": {"start": 0, "end": 71, "_node_type": "1"}, "relationships": {"1": "4f88a276-5e16-4909-8cd1-f8b46652fce4"}}, "__type__": "1"}, "81b1b9ac-08f3-4cd6-9a50-d3755d0cf28d": {"__data__": {"text": "\n\nAptos CLI\n\n|Release | Git Tag | Commit Hash|\n|---|---|---|\n|Aptos CLI Release v1.0.13| `aptos-cli-v1.0.13` | `7f864d4af722bf538f1a904e321130a261e92b3a` |\n\n", "doc_id": "81b1b9ac-08f3-4cd6-9a50-d3755d0cf28d", "embedding": null, "doc_hash": "b86aaee2fbad47c3cade899ad431c2a4aff6fd74e0059e6ed7a58232bf34998c", "extra_info": null, "node_info": {"start": 0, "end": 157, "_node_type": "1"}, "relationships": {"1": "142d9263-0961-476c-ae2b-9a4e2bb2dc3c"}}, "__type__": "1"}, "e26cdd6e-ebad-4b16-84c9-df65bfc215db": {"__data__": {"text": "\n\nAptos Node\n\n|Devnet Branch Commit | Docker Image Tag | Docker Image Digest | genesis.blob SHA-256 | Waypoint | Chain ID|\n|---|---|---|---|---|---|\n|`b8fe5b0bbc3fb78a5ad40209dc3af9f67a8a4ea1`| `devnet_b8fe5b0bbc3fb78a5ad40209dc3af9f67a8a4ea1` | `sha256:604c279f52c6c99dbe238229507c074758c2178b455c18890ef58a2fc38ccc80` | `sha256: 2b5365cde39aee414a681abd20c09f39fdb3609fc0ca0735abb947c412db6a0d`| `0:33adb2ff9338723432d83718c22e2b107a453eee21a67bc0ae2d99db130d2c3d` | 59 |\n", "doc_id": "e26cdd6e-ebad-4b16-84c9-df65bfc215db", "embedding": null, "doc_hash": "2bddeac61adbbb786efe6c537f706a5dbc600171402e0ac379565bb5613455fb", "extra_info": null, "node_info": {"start": 0, "end": 474, "_node_type": "1"}, "relationships": {"1": "9241a3a9-15e3-47d3-bb6b-741e9893dda0"}}, "__type__": "1"}, "53099ab1-efc6-438f-b758-4a116e6fa706": {"__data__": {"text": "\n\nDownload Aptos CLI Binaries\n\nThe `aptos` tool is a command line interface (CLI) for developing on the Aptos blockchain, debugging Move contracts, and conducting node operations. This document describes how to install the `aptos` CLI tool using precompiled binaries that reduce variables in setting up your environment. Also see:\n\n* Installing the Aptos CLI for an alternative to using the precompiled binaries.\n* Installing the Move Prover for an optional tool to validate your Move code.\n* Using Aptos CLI for detailed instructions on employing the Aptos CLI.\n\nBinary releases are recommended for most users, otherwise see Building Aptos From Source\n\n\nmacOS\n\n", "doc_id": "53099ab1-efc6-438f-b758-4a116e6fa706", "embedding": null, "doc_hash": "1748c7cd7d3bf2bd5c6b2be90d923dface4fb409347db957dd8b84600da50ea0", "extra_info": null, "node_info": {"start": 0, "end": 662, "_node_type": "1"}, "relationships": {"1": "97e1251b-34a7-426b-bbf1-9551549dc081"}}, "__type__": "1"}, "9f1ba99b-c8e2-47d0-8047-f103ef2da316": {"__data__": {"text": "\n\nmacOS\n:::tip\nThese instructions have been tested on macOS Monterey (12.6)\n:::\n\n\n1. Go to the Aptos CLI Release list.\n1. Click the **Assets** expandable menu for the latest release.\n1. You will see the zip files with the filename of the format: `aptos-cli--`. These are the platform-specific pre-compiled binaries of the CLI. Download the zip file for your platform, dismissing any warnings.\n1. Unzip the downloaded file. This will extract the `aptos` CLI binary file into your default downloads folder. For example, on macOS it is the `~/Downloads` folder.\n1. Move this extracted `aptos` binary file into your preferred local folder. For example, place it in the `~/bin/aptos` folder on macOS to make it accessible from the command line.\n\n   :::tip Upgrading? Remember to look in the default download folder\n   When you update the CLI binary with the latest version, note that the newer version binary will be downloaded to your default Downloads folder. Remember to move this newer version binary from the Downloads folder to the `~/bin/aptos` folder to update and overwrite the older version.\n:::\n\n1. Make the `~/bin/aptos` directory executable by running this command: `chmod +x ~/bin/aptos`\n1. Follow the simple steps recommended by the Apple support in Open a Mac app from an unidentified developer to remove the \"unknown developer\" blocker.\n1. Type `~/bin/aptos help` to read help instructions.\n1. Add `~/bin` to your path in your `.bashrc` or `.zshrc` file for future use.\n\n\n\n\nLinux\n\n", "doc_id": "9f1ba99b-c8e2-47d0-8047-f103ef2da316", "embedding": null, "doc_hash": "c1be9c4109ed6e22aa2d06a2710d15fee529364c3bac9e2c8da7211efdb85acd", "extra_info": null, "node_info": {"start": 0, "end": 1493, "_node_type": "1"}, "relationships": {"1": "3c75563e-f953-4357-a441-2b5b7962b27a"}}, "__type__": "1"}, "c7177a3b-0dc9-4daf-a796-740bf7f4df41": {"__data__": {"text": "\n\nLinux\n:::tip\nThese instructions have been tested on Ubuntu 20.04.\n:::\n\n1. Go to the Aptos CLI release page.\n1. Click the **Assets** expandable menu for the latest release.\n1. You will see the zip files with the filename of the format: `aptos-cli--`. These are the platform-specific pre-compiled binaries of the CLI. Download the zip file for your platform, dismissing any warnings.\n1. Unzip the downloaded file. This will extract the `aptos` CLI binary file into your default downloads folder.\n1. Move this extracted `aptos` binary file into your preferred local folder.\n\n   :::tip\n   Upgrading? Remember to look in the default download folder\n   When you update the CLI binary with the latest version, note that the newer version binary will be downloaded to your default Downloads folder. Remember to move this newer version binary from the Downloads folder to `~/bin/aptos` folder (overwriting the older version).\n   :::\n\n1. Make this `~/bin/aptos` an executable by running this command:\n    - `chmod +x ~/bin/aptos`.\n1. Type `~/bin/aptos help` to read help instructions.\n1. Add `~/bin` to your path in your `.bashrc` or `.zshrc` file for future use.\n\n\n\n\nWindows 10, 11 and Windows Server 2022+\n\n", "doc_id": "c7177a3b-0dc9-4daf-a796-740bf7f4df41", "embedding": null, "doc_hash": "d2fa6d139eed8de6f1702998f08b225f940410ac86cd5aab9f94b78d8f4fc0c3", "extra_info": null, "node_info": {"start": 0, "end": 1201, "_node_type": "1"}, "relationships": {"1": "bdad3839-00cf-4aac-a5aa-ab93af062155"}}, "__type__": "1"}, "ab4759b4-0ba3-4ae7-9808-d4e430011161": {"__data__": {"text": "\n\nWindows 10, 11 and Windows Server 2022+\n\n:::tip\nThese instructions have been tested on Windows 11 and Windows Server 2022. Windows support is new and some features may be not complete. Open GitHub issues for bugs.\n:::\n\n1. Go to the Aptos CLI release page.\n1. Click the **Assets** expandable menu for the latest release.\n1. You will see the zip files with the filename of the format: `aptos-cli--`. These are the platform-specific pre-compiled binaries of the CLI. Download the zip file for your platform, dismissing any warnings.\n1. Unzip the downloaded file. This will extract the `aptos` CLI binary file into your default downloads folder. For example, on Windows it is the `\\Users\\user\\Downloads` folder.\n1. Move this extracted `aptos` binary file into your preferred local folder.\n   :::tip Upgrading? Remember to look in the default download folder\n   When you update the CLI binary with the latest version, note that the newer version binary will be downloaded to your default Downloads folder. Remember to move this newer version binary from the Downloads folder to your preferred location.\n   :::\n1. Open a powershell terminal via the windows start menu\n1. In the powershell terminal, you can get help instructions by running the command with help.  For example ` .\\Downloads\\aptos-cli-0.3.5-Windows-x86_64\\aptos.exe help` to read help instructions.\n\n\n\n", "doc_id": "ab4759b4-0ba3-4ae7-9808-d4e430011161", "embedding": null, "doc_hash": "ab6a50ff6f2a18e0305b9a56c558674fd630ab792b6755f5633b02ac0de72548", "extra_info": null, "node_info": {"start": 0, "end": 1363, "_node_type": "1"}, "relationships": {"1": "00c2508f-ee35-45b1-a839-4ec02bfbaf96"}}, "__type__": "1"}, "1b63b70d-9086-405b-aff4-2db2e835f8b3": {"__data__": {"text": "\n\nEquality\n\nMove supports two equality operations `==` and `!=`\n\n", "doc_id": "1b63b70d-9086-405b-aff4-2db2e835f8b3", "embedding": null, "doc_hash": "a8537c09c250e55c5adef588236453df557f2e47289e50f63b05bafefb1f04bf", "extra_info": null, "node_info": {"start": 0, "end": 65, "_node_type": "1"}, "relationships": {"1": "31c20c2c-b3ae-4da3-98c6-a1f6e749b590"}}, "__type__": "1"}, "f5fb68d4-438b-4bb9-b2c0-8dd4318ea2e4": {"__data__": {"text": "\n\nOperations\n\n| Syntax | Operation | Description                                                                 |\n| ------ | --------- | --------------------------------------------------------------------------- |\n| `==`   | equal     | Returns `true` if the two operands have the same value, `false` otherwise   |\n| `!=`   | not equal | Returns `true` if the two operands have different values, `false` otherwise |\n\n", "doc_id": "f5fb68d4-438b-4bb9-b2c0-8dd4318ea2e4", "embedding": null, "doc_hash": "e9c2926bc79d464bd48c7b0009bcc695204022ea4558c55078088f177523466d", "extra_info": null, "node_info": {"start": 0, "end": 419, "_node_type": "1"}, "relationships": {"1": "e42a07c4-b200-48b1-8f99-01712363c70d"}}, "__type__": "1"}, "5675e2a7-0401-4ff1-b387-d2aa28239ec4": {"__data__": {"text": "\n\nTyping\n\nBoth the equal (`==`) and not-equal (`!=`) operations only work if both operands are the same type\n\n```move\n0 == 0; // `true`\n1u128 == 2u128; // `false`\nb\"hello\" != x\"00\"; // `true`\n```\n\nEquality and non-equality also work over user defined types!\n\n```move=\naddress 0x42 {\nmodule example {\n    struct S has copy, drop { f: u64, s: vector }\n\n    fun always_true(): bool {\n        let s = S { f: 0, s: b\"\" };\n        // parens are not needed but added for clarity in this example\n        (copy s) == s\n    }\n\n    fun always_false(): bool {\n        let s = S { f: 0, s: b\"\" };\n        // parens are not needed but added for clarity in this example\n        (copy s) != s\n    }\n}\n}\n```\n\nIf the operands have different types, there is a type checking error\n\n```move\n1u8 == 1u128; // ERROR!\n//     ^^^^^ expected an argument of type 'u8'\nb\"\" != 0; // ERROR!\n//     ^ expected an argument of type 'vector'\n```\n\n", "doc_id": "5675e2a7-0401-4ff1-b387-d2aa28239ec4", "embedding": null, "doc_hash": "2cf8bbca5dc96234d9ef19d38417e10f6886db16a73f8dcb8ceb9cbf3072d7d0", "extra_info": null, "node_info": {"start": 0, "end": 913, "_node_type": "1"}, "relationships": {"1": "d4ae5f42-48a2-4757-b646-bb08d3ad3b35"}}, "__type__": "1"}, "6730174c-22a4-4e60-b3e3-af469dca3671": {"__data__": {"text": "\n\nTyping with references\n\nWhen comparing references, the type of the reference (immutable or mutable) does\nnot matter. This means that you can compare an immutable `&` reference with a mutable one `&mut` of\nthe same underlying type.\n\n```move\nlet i = &0;\nlet m = &mut 1;\n\ni == m; // `false`\nm == i; // `false`\nm == m; // `true`\ni == i; // `true`\n```\n\nThe above is equivalent to applying an explicit freeze to each mutable reference where needed\n\n```move\nlet i = &0;\nlet m = &mut 1;\n\ni == freeze(m); // `false`\nfreeze(m) == i; // `false`\nm == m; // `true`\ni == i; // `true`\n```\n\nBut again, the underlying type must be the same type\n\n```move\nlet i = &0;\nlet s = &b\"\";\n\ni == s; // ERROR!\n//   ^ expected an argument of type '&u64'\n```\n\n", "doc_id": "6730174c-22a4-4e60-b3e3-af469dca3671", "embedding": null, "doc_hash": "97a6f3ebf4f6ea36c661a005454be4a076f60cf147a3235d8964e2f982d3d01a", "extra_info": null, "node_info": {"start": 0, "end": 732, "_node_type": "1"}, "relationships": {"1": "e3ac1f66-e70b-455f-9c24-a6a198fb2de2"}}, "__type__": "1"}, "3dcd88bf-5098-49f8-a1ee-f90f846b3143": {"__data__": {"text": "\n\nRestrictions\n\nBoth `==` and `!=` consume the value when comparing them. As a result, the type system enforces that\nthe type must have `drop`. Recall that without the\n`drop` ability, ownership must be transferred by the end of the function, and such\nvalues can only be explicitly destroyed within their declaring module. If these were used directly\nwith either equality `==` or non-equality `!=`, the value would be destroyed which would break\n`drop` ability safety guarantees!\n\n```move=\naddress 0x42 {\nmodule example {\n    struct Coin has store { value: u64 }\n    fun invalid(c1: Coin, c2: Coin) {\n        c1 == c2 // ERROR!\n//      ^^    ^^ These resources would be destroyed!\n    }\n}\n}\n```\n\nBut, a programmer can _always_ borrow the value first instead of directly comparing the value, and\nreference types have the `drop` ability. For example\n\n```move=\naddress 0x42 {\nmodule example {\n    struct Coin as store { value: u64 }\n    fun swap_if_equal(c1: Coin, c2: Coin): (Coin, Coin) {\n        let are_equal = &c1 == &c2; // valid\n        if (are_equal) (c2, c1) else (c1, c2)\n    }\n}\n}\n```\n\n", "doc_id": "3dcd88bf-5098-49f8-a1ee-f90f846b3143", "embedding": null, "doc_hash": "38dada005c21f53c6c94e37f012eb85364bec4eaf694098c57ef2176edd1b661", "extra_info": null, "node_info": {"start": 0, "end": 1093, "_node_type": "1"}, "relationships": {"1": "35a66dba-3eb9-4927-8825-65ba4e6d27af"}}, "__type__": "1"}, "ae730666-a1e8-4393-8879-b37844af9235": {"__data__": {"text": "\n\nAvoid Extra Copies\n\nWhile a programmer _can_ compare any value whose type has `drop`, a programmer\nshould often compare by reference to avoid expensive copies.\n\n```move=\nlet v1: vector = function_that_returns_vector();\nlet v2: vector = function_that_returns_vector();\nassert!(copy v1 == copy v2, 42);\n//     ^^^^       ^^^^\nuse_two_vectors(v1, v2);\n\nlet s1: Foo = function_that_returns_large_struct();\nlet s2: Foo = function_that_returns_large_struct();\nassert!(copy s1 == copy s2, 42);\n//     ^^^^       ^^^^\nuse_two_foos(s1, s2);\n```\n\nThis code is perfectly acceptable (assuming `Foo` has `drop`), just not efficient.\nThe highlighted copies can be removed and replaced with borrows\n\n```move=\nlet v1: vector = function_that_returns_vector();\nlet v2: vector = function_that_returns_vector();\nassert!(&v1 == &v2, 42);\n//     ^      ^\nuse_two_vectors(v1, v2);\n\nlet s1: Foo = function_that_returns_large_struct();\nlet s2: Foo = function_that_returns_large_struct();\nassert!(&s1 == &s2, 42);\n//     ^      ^\nuse_two_foos(s1, s2);\n```\n\nThe efficiency of the `==` itself remains the same, but the `copy`s are removed and thus the program\nis more efficient.\n\n", "doc_id": "ae730666-a1e8-4393-8879-b37844af9235", "embedding": null, "doc_hash": "2e01a5865742c4f6002a9d71d93ca5dcb8b63520b66debaedcfcf695c9428b22", "extra_info": null, "node_info": {"start": 0, "end": 1154, "_node_type": "1"}, "relationships": {"1": "056f3d1a-301d-449f-8ea4-0360d291149c"}}, "__type__": "1"}, "047d9f42-05c6-42e6-8609-bb9a46ee8cc3": {"__data__": {"text": "---title: \"Events\"slug: \"events\"---Events are emitted during the execution of a transaction. Each Move module can define its own events and choose when to emit the events upon execution of the module. For example, during a coin transfer, both the sender and receiver's accounts will emit `SentEvent` and `ReceivedEvent`, respectively. This data is stored within the ledger and can be queried via the REST interface's Get events by event handle.Assuming that an account `0xc40f1c9b9fdc204cf77f68c9bb7029b0abbe8ad9e5561f7794964076a4fbdcfd` had sent coins to another account, the following query could be made to the REST interface: `https://fullnode.devnet.aptoslabs.com/v1/accounts/c40f1c9b9fdc204cf77f68c9bb7029b0abbe8ad9e5561f7794964076a4fbdcfd/events/0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>/withdraw_events`. The output would be all `WithdrawEvent`s stored on that account, it would look like ```json[{  \"key\":\"0x0000000000000000caa60eb4a01756955ab9b2d1caca52ed\",  \"sequence_number\":\"0\",  \"type\":\"0x1::coin::WithdrawEvent\",  \"data\":{    \"amount\":\"1000\"  }}]```Each registered event has a unique `key`. The key `0x0000000000000000caa60eb4a01756955ab9b2d1caca52ed` maps to the event `0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>/sent_events` registered on account `0xc40f1c9b9fdc204cf77f68c9bb7029b0abbe8ad9e5561f7794964076a4fbdcfd`. This key can then be used to directly make event queries, e.g., `https://fullnode.devnet.aptoslabs.com/v1/events/0x0000000000000000caa60eb4a01756955ab9b2d1caca52ed`.These represent event streams, or a list of events with each entry containing a sequentially increasing `sequence_number` beginning at `0`, a `type`, and `data`. Each event must be defined by some `type`. There may be multiple events defined by the same or similar `type`s especially when using generics. Events have associated `data`. The general principle is to include all data necessary to understand the changes to the underlying resources before and after the execution of the transaction that changed the data and emitted the event.[coin_transfer]: https://github.com/aptos-labs/aptos-core/blob/bdd0a7fe82cd6aab4b47250e5eb6298986777cf7/aptos-move/framework/aptos-framework/sources/coin.move#L412[get_events]: https://fullnode.devnet.aptoslabs.com/v1/spec#/operations/get_events_by_event_handle", "doc_id": "047d9f42-05c6-42e6-8609-bb9a46ee8cc3", "embedding": null, "doc_hash": "5d0c443969bc5a02ebf86fed4a73b2f1f30ae36f813a9a839589e4b09b3593d6", "extra_info": null, "node_info": {"start": 0, "end": 2312, "_node_type": "1"}, "relationships": {"1": "6834392b-5c75-40e4-b58e-269b7b93fa60"}}, "__type__": "1"}, "e8077700-db3c-4162-9464-78558266484b": {"__data__": {"text": "\n\nUse the Aptos Explorer\n\nThe Aptos Explorer lets you delve into the activity on the Aptos blockchain in great detail, seeing transactions, validators, and account information. With the Aptos Explorer, you can ensure that the transactions performed on Aptos are accurately reflected. Note, the Aptos ecosystem has several other explorers to choose from.\n\nThe Aptos Explorer provides a one-step search engine across the blockchain to discover details about wallets, transactions, network analytics, user accounts, smart contracts, and more. The Aptos Explorer also offers dedicated pages for key elements of the blockchain and acts as the source of truth for all things Aptos. See the Aptos Glossary for definitions of many of the terms found here.\n\n", "doc_id": "e8077700-db3c-4162-9464-78558266484b", "embedding": null, "doc_hash": "45dbff76a5d716dff466299cb78be8bffd790a8e888df855e6d6754a2cec58f7", "extra_info": null, "node_info": {"start": 0, "end": 749, "_node_type": "1"}, "relationships": {"1": "83da4228-4dce-4a1d-883d-6297f68edaa6"}}, "__type__": "1"}, "6546a1ca-9f9e-4389-8bc8-6d2dc3058f9c": {"__data__": {"text": "\n\nUsers\n\nThe Aptos Explorer gives you a near real-time view into the status of the network and the activity related to the core on-chain entities. It serves these audiences and purposes by letting:\n\n* App developers understand the behavior of the smart contracts and sender-receiver transaction flows.\n* General users view and analyze Aptos blockchain activity on key entities - transactions, blocks, accounts, and resources.\n* Node operators check the health of the network and maximize the value of operating the node.\n* Token holders find the best node operator to delegate the tokens and earn a staking reward.\n\n", "doc_id": "6546a1ca-9f9e-4389-8bc8-6d2dc3058f9c", "embedding": null, "doc_hash": "d3145daf2ab539ee0f94855cca8113093421e558b7105921816cd70c10577b11", "extra_info": null, "node_info": {"start": 0, "end": 616, "_node_type": "1"}, "relationships": {"1": "7af7964d-b1b5-4fec-b811-4b7b132f8632"}}, "__type__": "1"}, "5d665c65-9223-47b0-a3e7-21d72f7de13c": {"__data__": {"text": "\n\nCommon tasks\n\nFollow the instructions here to conduct typical work in the Aptos Explorer.\n\n", "doc_id": "5d665c65-9223-47b0-a3e7-21d72f7de13c", "embedding": null, "doc_hash": "24d8c362de802653a0585055f85d312155bf0146d51607eaac47dff99a6c16e6", "extra_info": null, "node_info": {"start": 0, "end": 93, "_node_type": "1"}, "relationships": {"1": "cb9e88db-e31b-4e5c-b597-2d9386ab8948"}}, "__type__": "1"}, "9974fad6-632a-4702-a8e7-9d00bb28ab2b": {"__data__": {"text": "\n\nSelect a network\n\nThe Aptos Explorer renders data from all Aptos networks: Mainnet, Testnet, Devnet, and your local host if configured. See Aptos Blockchain Deployments for a detailed view of their purposes and differences.\n\nTo select a network in the Aptos Explorer, load the explorer and use the *Select Network* drop-down menu at the top right to select your desired network.\n\n\n<ThemedImage\nalt=\"Select Network in Aptos Explorer\"\nsources={{\n    light: useBaseUrl('/img/docs/0-explorer-select-network.png'),\n    dark: useBaseUrl('/img/docs/0-explorer-select-network-dark.png'),\n  }}\n/>\n\n\n", "doc_id": "9974fad6-632a-4702-a8e7-9d00bb28ab2b", "embedding": null, "doc_hash": "d1b4ac6121af9316dea2173daa3b93214a734bf92122b257e6897bf6105c9e33", "extra_info": null, "node_info": {"start": 0, "end": 592, "_node_type": "1"}, "relationships": {"1": "d6b41a4e-5207-4721-ae6f-d4634756f902"}}, "__type__": "1"}, "87624707-c5db-4466-a4b0-9b6964b63367": {"__data__": {"text": "\n\nFind a transaction\n\nOne of the most common tasks is to track a transaction in Aptos Explorer. You may search by the account address, transaction version and hash, or block height and version.\n\nTo find a transaction:\n\n1. Enter the value in the *Search transactions* field near the top of any page.\n1. Do not press return.\n1. Click the transaction result that appears immediately below the search field, highlighted in green within the following screenshot:\n\n\n<ThemedImage\nalt=\"Search Aptos Explorer for a transaction\"\nsources={{\n    light: useBaseUrl('/img/docs/1-explorer-search-txn.png'),\n    dark: useBaseUrl('/img/docs/1-explorer-search-txn-dark.png'),\n  }}\n/>\n\n\nThe resulting Transaction details page appears.\n\n", "doc_id": "87624707-c5db-4466-a4b0-9b6964b63367", "embedding": null, "doc_hash": "58e7fede2b1e32a4e0fb0fb36aac2c28490738ca724f54d57e2e866a6bd70450", "extra_info": null, "node_info": {"start": 0, "end": 717, "_node_type": "1"}, "relationships": {"1": "c2f1bc2a-2639-4a46-bbe8-a527f33cd31e"}}, "__type__": "1"}, "40715346-c0ec-47ed-8b72-7cd0e7d8a36b": {"__data__": {"text": "\n\nFind an account address\n\nThe simplest way to find your address is to use the Aptos Petra Wallet.\n\nThen simply append it to the following URL to load its details in the Aptos Explorer:\nhttps://explorer.aptoslabs.com/account/\n\nLike so:\nhttps://explorer.aptoslabs.com/account/0x778bdeebb67d3914b181236c2f1f4acc0e561482fc265b9a5709488a97fb3303\n\nSee Accounts for instructions on use.\n\n", "doc_id": "40715346-c0ec-47ed-8b72-7cd0e7d8a36b", "embedding": null, "doc_hash": "0f255deec1899c5f34d46d227dc5f3453f8f090e7d81d471184deefae63455bb", "extra_info": null, "node_info": {"start": 0, "end": 382, "_node_type": "1"}, "relationships": {"1": "ea304fe0-f9f0-46d2-8cd0-8720dbda2475"}}, "__type__": "1"}, "87eacd0c-6bbc-4a47-8ad3-e92348cca0b5": {"__data__": {"text": "\n\nExplorer pages\n\nThis section walks you through the available screens in Aptos Explorer to help you find the information you need.\n\n", "doc_id": "87eacd0c-6bbc-4a47-8ad3-e92348cca0b5", "embedding": null, "doc_hash": "a65c6d92738135d047df6d7f3a87cafa871ecd936d209a274873c348c04ae925", "extra_info": null, "node_info": {"start": 0, "end": 133, "_node_type": "1"}, "relationships": {"1": "5e18b937-0919-463f-9268-ecefdbdd7de9"}}, "__type__": "1"}, "18486283-0720-4ea5-8e51-a6f22b19eda8": {"__data__": {"text": "\n\nExplorer home\n\nThe Aptos Explorer home page provides an immediate view into the total supply of Aptos coins, those that are now staked, transactions per second (TPS), and active validators on the network, as well as a rolling list of the latest transactions:\n\n\n<ThemedImage\nalt=\"Aptos Explorer home page\"\nsources={{\n    light: useBaseUrl('/img/docs/2-explorer-home.png'),\n    dark: useBaseUrl('/img/docs/2-explorer-home-dark.png'),\n  }}\n/>\n\n\nClick the **Transactions** tab at the top or  **View all Transactions** at the bottom to go to the Transactions page.\n\n", "doc_id": "18486283-0720-4ea5-8e51-a6f22b19eda8", "embedding": null, "doc_hash": "0cdb351392bec71f7ca060856da1937120ecaf56e2c3f0f3c7b688d8004a6e2c", "extra_info": null, "node_info": {"start": 0, "end": 563, "_node_type": "1"}, "relationships": {"1": "cff79bfc-3dd3-41ad-bcbb-d1a4f3f8f799"}}, "__type__": "1"}, "8f2ca47c-6aa9-4a10-a632-8feb5283c413": {"__data__": {"text": "\n\nTransactions\n\nThe *Transactions* page displays all transactions on the Aptos blockchain in order, with the latest at the top of an ever-growing list.\n\nIn the transactions list, single-click the **Hash** column to see and copy the hash for the transaction or double-click the hash to go directly to the transaction details for the hash.\n\n\n<ThemedImage\nalt=\"Aptos Explorer Transactions page with hash highlighted\"\nsources={{\n    light: useBaseUrl('/img/docs/3-explorer-transactions.png'),\n    dark: useBaseUrl('/img/docs/3-explorer-transactions-dark.png'),\n  }}\n/>\n\n\nOtherwise, click anywhere else in the row of the desired transaction to load its Transaction details page.\n\nUse the controls at the bottom of the list to navigate back through transactions historically.\n\n", "doc_id": "8f2ca47c-6aa9-4a10-a632-8feb5283c413", "embedding": null, "doc_hash": "5194fc53a95d191e12ce276be74b6cea9ca06bb54f410dc9d530e2561257084e", "extra_info": null, "node_info": {"start": 0, "end": 771, "_node_type": "1"}, "relationships": {"1": "589056df-d92c-424c-96b5-76b51cf44058"}}, "__type__": "1"}, "64bd4bcc-b0b1-4518-97c6-5556ee9c3d49": {"__data__": {"text": "\n\nTransaction details\n\nThe *Transaction details* page reveals all information for a given transaction, starting with its default *Overview* tab. There you can see a transaction's status, sender, version, gas fee, and much more:\n\n\n<ThemedImage\nalt=\"Aptos Explorer Transaction Details tab\"\nsources={{\n    light: useBaseUrl('/img/docs/4-explorer-txn-details.png'),\n    dark: useBaseUrl('/img/docs/4-explorer-txn-details-dark.png'),\n  }}\n/>\n\n\nScrolling down on the Overview, you can also see the transaction's signature (with `public_key`) and hashes for tracking.\n\nThe Transaction details page offers even more information in the following tabs.\n\n", "doc_id": "64bd4bcc-b0b1-4518-97c6-5556ee9c3d49", "embedding": null, "doc_hash": "e4fb3fb8940aafefaf452d009b7b46901d8f8ae620da93a65161c12499c0b284", "extra_info": null, "node_info": {"start": 0, "end": 644, "_node_type": "1"}, "relationships": {"1": "ac5442a1-fc81-4bd9-9c7f-961298b71ddf"}}, "__type__": "1"}, "c7716f1c-bcbb-4772-86f3-63e75be09c99": {"__data__": {"text": "\n\nEvents\n\nThe Transaction details *Events* tab shows the transaction's sequence numbers, including their types and data.\n\n", "doc_id": "c7716f1c-bcbb-4772-86f3-63e75be09c99", "embedding": null, "doc_hash": "1670621cf39867bb0a71be5f12cce93d71a73dce266c2df51547e334204ad7dd", "extra_info": null, "node_info": {"start": 0, "end": 122, "_node_type": "1"}, "relationships": {"1": "6fc0a76c-a8b7-4bde-8fdf-b273cc017455"}}, "__type__": "1"}, "ec42b19e-363a-4a2d-b158-9393fb2a5fe4": {"__data__": {"text": "\n\nPayload\n\nThe Transaction details *Payload* tab presents the transaction's actual code used. Click the down arrow at the bottom of the code block to expand it and see all contents.\n\n", "doc_id": "ec42b19e-363a-4a2d-b158-9393fb2a5fe4", "embedding": null, "doc_hash": "2338f071ad7e5a9e0a0ad826fe733af484be5ee7034ae481c70cdd34322b7d02", "extra_info": null, "node_info": {"start": 0, "end": 183, "_node_type": "1"}, "relationships": {"1": "bbadb0a8-2c10-46d1-9f02-5f71151a0037"}}, "__type__": "1"}, "0f8a7190-da92-4e4c-a178-eb25323718c8": {"__data__": {"text": "\n\nChanges\n\nThe Transaction details *Changes* tab shows the addresses, state key hashes, and data for each index in the transaction.\n\n", "doc_id": "0f8a7190-da92-4e4c-a178-eb25323718c8", "embedding": null, "doc_hash": "538af029f614f36ee011e3eee57edb3f06e4f6da9ad6c42befc9bdd6f6b2a8bd", "extra_info": null, "node_info": {"start": 0, "end": 133, "_node_type": "1"}, "relationships": {"1": "85b79eb6-99e6-4391-b81c-e3410f859cc6"}}, "__type__": "1"}, "1288ca81-d6ec-4e3d-80d8-8e7153eca3a2": {"__data__": {"text": "\n\nAccounts\n\nThe *Accounts* page aggregates all transactions, tokens, and other resources in a single set of views starting with its default *Transactions* tab:\n\n\n<ThemedImage\nalt=\"Aptos Explorer Accounts page\"\nsources={{\n    light: useBaseUrl('/img/docs/5-explorer-account.png'),\n    dark: useBaseUrl('/img/docs/5-explorer-account-dark.png'),\n  }}\n/>\n\n\nYou can load your account page by appending your account address to:\nhttps://explorer.aptoslabs.com/account/\n\nSee Find account address for more help.\n\nOn the Accounts > Transactions tab, click any transaction to go to its Transaction details page.\n\nAs on the main Transactions page, you may also single-click the **Hash** column to see and copy the hash for the transaction or double-click the hash to go directly to the transaction details for the hash.\n\nAs with Transactions, the Aptos Explorer provides tabs for additional information about the account.\n\n", "doc_id": "1288ca81-d6ec-4e3d-80d8-8e7153eca3a2", "embedding": null, "doc_hash": "2caf469c90399363560480fa7a6cc948a797aa4a45fd0a700795cd47d8516248", "extra_info": null, "node_info": {"start": 0, "end": 911, "_node_type": "1"}, "relationships": {"1": "33c17082-6ab8-41f4-849e-83183d8a11ca"}}, "__type__": "1"}, "fbc8bc4a-a18b-458b-a563-748392f5ec32": {"__data__": {"text": "\n\nTokens\n\nThe *Tokens* tab presents any assets owned by the account, as well as details about the tokens themselves (name, collection, and more). Click any of the assets to go to the Token details page.\n\n", "doc_id": "fbc8bc4a-a18b-458b-a563-748392f5ec32", "embedding": null, "doc_hash": "50deab9999e553fb5584a3aeb5e6ff5d290087f02235ed1e90cc93cca31345ae", "extra_info": null, "node_info": {"start": 0, "end": 204, "_node_type": "1"}, "relationships": {"1": "cec05833-1ed9-497d-babb-ed403630a957"}}, "__type__": "1"}, "86f495b0-971d-4822-adb2-91e889b41f97": {"__data__": {"text": "\n\nToken details\n\nThe *Token details* page contains:\n\n  * *Overview* tab including token name, owner, collection, creator, royalty, and more.\n  * *Activities* tab showing all transfer types, the addresses involved, property version, and amount.\n\n\n<ThemedImage\nalt=\"Aptos Explorer Token Activities tab\"\nsources={{\n    light: useBaseUrl('/img/docs/6-explorer-token-acitivities.png'),\n    dark: useBaseUrl('/img/docs/6-explorer-token-acitivities-dark.png'),\n  }}\n/>\n\n\nOn either tab, click an address to go to the *Account* page for the address.\n\n", "doc_id": "86f495b0-971d-4822-adb2-91e889b41f97", "embedding": null, "doc_hash": "590f866ccaafa72b33a584e1818210320eb57159c5e8d51dc4b9329bdc15689d", "extra_info": null, "node_info": {"start": 0, "end": 542, "_node_type": "1"}, "relationships": {"1": "df77011e-f4b4-4eb4-a35a-e225907f98c5"}}, "__type__": "1"}, "00707807-f127-4431-9b99-2131ebe1da35": {"__data__": {"text": "\n\nResources\n\nThe *Resources* tab presents a view of all types used by the account. Use the *Collapse All* toggle at top right to see all types at once.\n\n", "doc_id": "00707807-f127-4431-9b99-2131ebe1da35", "embedding": null, "doc_hash": "2cf352a409bc5df3f90ed73e336f0f245761ac4bfd02af7c4f8dc2d897054174", "extra_info": null, "node_info": {"start": 0, "end": 153, "_node_type": "1"}, "relationships": {"1": "72f7d677-fe91-457b-980f-934bc2a8cb45"}}, "__type__": "1"}, "9c220ed4-020d-4f7c-bda5-d97dbc34e50e": {"__data__": {"text": "\n\nModules\n\nThe *Modules* tab displays the source code and ABI used by the account. Select different modules on the left sidebar to view Move source code and ABI of a specific module. Use the expand button at the top right of the source code to expand the code for better readability.\n\n\n<ThemedImage\nalt=\"Aptos Explorer Modules tab\"\nsources={{\n    light: useBaseUrl('/img/docs/10-explorer-modules.png'),\n    dark: useBaseUrl('/img/docs/10-explorer-modules-dark.png'),\n  }}\n/>\n\n\n", "doc_id": "9c220ed4-020d-4f7c-bda5-d97dbc34e50e", "embedding": null, "doc_hash": "8597017edf4b30840e1acc783a94da7007ac5a2d326cebda74279eb15cd3cffa", "extra_info": null, "node_info": {"start": 0, "end": 477, "_node_type": "1"}, "relationships": {"1": "3fd3e473-b84f-4076-b739-3f8ffc6963d7"}}, "__type__": "1"}, "6baba10d-56b5-40bf-92d8-bd19a8f5c671": {"__data__": {"text": "\n\nInfo\n\nThe *Info* tab shows the sequence number and authentication key used by the account.\n\n", "doc_id": "6baba10d-56b5-40bf-92d8-bd19a8f5c671", "embedding": null, "doc_hash": "bdc463b5b29771ff3ba975c3df33a1055ed350e978010112d06569b275aa735c", "extra_info": null, "node_info": {"start": 0, "end": 94, "_node_type": "1"}, "relationships": {"1": "8cc59ff2-6369-4b3a-984f-aaea016af9d9"}}, "__type__": "1"}, "e057b290-19ba-46e9-867f-52fb7a4cca81": {"__data__": {"text": "\n\nBlocks\n\nThe *Blocks* page presents a running list of the latest blocks to be committed to the Aptos blockchain.\n\n\n<ThemedImage\nalt=\"Aptos Explorer Latest Blocks page\"\nsources={{\n    light: useBaseUrl('/img/docs/7-explorer-latest-blocks.png'),\n    dark: useBaseUrl('/img/docs/7-explorer-latest-blocks-dark.png'),\n  }}\n/>\n\n\nClick the:\n  * Hash to see and copy the hash of the block.\n  * First version to go to the first transaction in the block.\n  * Last version to go to the last transaction in the block.\n  * Block ID or anywhere else to go to the Block details page.\n\n", "doc_id": "e057b290-19ba-46e9-867f-52fb7a4cca81", "embedding": null, "doc_hash": "8515b26a061633324055c9f6d800ca40794e18fa3ea8749e14cb43dd475456b6", "extra_info": null, "node_info": {"start": 0, "end": 571, "_node_type": "1"}, "relationships": {"1": "359ff8ac-6fae-4c76-912b-bdd912750737"}}, "__type__": "1"}, "2bf9fa07-6765-4e00-b376-1e54e56cb7ab": {"__data__": {"text": "\n\nBlock details\n\nThe *Block details* page contains:\n\n  * *Overview* tab including block height, versions, timestamp, proposer, epoch and round.\n  * *Transactions* tab showing the version, status, type, hash, gas, and timestamp.\n\n\n<ThemedImage\nalt=\"Aptos Explorer Block details page\"\nsources={{\n    light: useBaseUrl('/img/docs/8-explorer-block-transactions.png'),\n    dark: useBaseUrl('/img/docs/8-explorer-block-transactions-dark.png'),\n  }}\n/>\n\n\n On the *Overview* tab, click the versions to go to the related transactions or double-click the address of the proposer to go to the *Account* page for that address.\n\n On the *Transactions* tab, click the desired row to go to the *Transactions details* page.\n\n", "doc_id": "2bf9fa07-6765-4e00-b376-1e54e56cb7ab", "embedding": null, "doc_hash": "f36a399863f44929cc5eda562bab0adce8a887e365a062a81ea676959e0083ab", "extra_info": null, "node_info": {"start": 0, "end": 709, "_node_type": "1"}, "relationships": {"1": "f9d016ee-9a41-4742-84e5-c6a10fa19ec3"}}, "__type__": "1"}, "cdfd755a-ff77-4825-9925-c582ff2b3881": {"__data__": {"text": "\n\nValidators\n\nThe *Validators* page lists every validator on the Aptos blockchain, including their validator address, voting power, public key, fullnode address, and network address.\n\n\n<ThemedImage\nalt=\"Aptos Explorer Validators page\"\nsources={{\n    light: useBaseUrl('/img/docs/9-explorer-validators.png'),\n    dark: useBaseUrl('/img/docs/9-explorer-validators-dark.png'),\n  }}\n/>\n\n\nClick the validator address to go to the *Account* page for that address. Click the public key or any of the other addresses to see and copy their values.\n\n", "doc_id": "cdfd755a-ff77-4825-9925-c582ff2b3881", "embedding": null, "doc_hash": "1a0a4fe183738b7698a01995bb315e4a60d7d3e9f5e85d24e74242ccdddf56bb", "extra_info": null, "node_info": {"start": 0, "end": 540, "_node_type": "1"}, "relationships": {"1": "cfb2352a-270e-4dd1-89b2-a8ec184de755"}}, "__type__": "1"}, "7c7bbf2d-ab4b-49ee-9ca6-de37e23ad015": {"__data__": {"text": "\n\nAptos External Resources\n\n:::caution Proceed with caution\nThis page links to third-party contents. Aptos neither endorses nor supports these contributions. Nor can we guarantee their effects.\n:::\n\nThis page contains links to external resources supplied by the Aptos community. These may be useful, technical posts to the Aptos Forum or links to Aptos-related technologies documented elsewhere.\n\nTo add your own resource, click **Edit this page** at the bottom, add your resource in Markdown, and create a pull request for review.\n\n", "doc_id": "7c7bbf2d-ab4b-49ee-9ca6-de37e23ad015", "embedding": null, "doc_hash": "32908395db9d8f956205f2fd1e8781b3976935c1ca5b51aa6974cf8fd02a7eb6", "extra_info": null, "node_info": {"start": 0, "end": 533, "_node_type": "1"}, "relationships": {"1": "88123956-0e14-4cb7-875d-3fef4af7b697"}}, "__type__": "1"}, "47b8118c-ce0e-4d1f-9367-840af591d180": {"__data__": {"text": "\n\nTools\n\n| Contribution | Description | Author | Date added/updated |\n| --- | --- | --- | --- |\n| Aptos Staking Dashboard \u00b7 Repo | A dashboard to monitor your Aptos validator performance, view network stats, or request delegation commissions. By Paymagic Labs. | pakaplace | 2023-03-10 |\n| Aptos Validator/Staking Postman Collection | A Postman collection for querying staking pool, staking contract, and account resources/events. | pakaplace | 2023-03-10 |\n| One-stop solution for Aptos node monitoring | A monitoring solution for Aptos nodes utilizing Docker containers with Prometheus, Grafana, cAdvisor, NodeExporter, and alerting with AlertManager. | Lavender.Five Nodes | 2023-03-10 |\n| Monitor Your Aptos validator and validator fullnodes with Prometheus and Grafana | A full-featured Grafana/Prometheus dashboard to monitor key infrastructure, node, and chain-related metrics and data relationships. | RHINO | 2023-03-10 |\n\n", "doc_id": "47b8118c-ce0e-4d1f-9367-840af591d180", "embedding": null, "doc_hash": "f410c570651beff77684a0a03630f731f9ac07d782d91dd058e22afedf46efe5", "extra_info": null, "node_info": {"start": 0, "end": 932, "_node_type": "1"}, "relationships": {"1": "5010012e-a9aa-49a2-bd31-9350c40eaa89"}}, "__type__": "1"}, "7ffcecfa-9f95-43c6-9dfd-d9065b8eb1f5": {"__data__": {"text": "\n\nTutorials\n\n| Contribution | Description | Author | Date added/updated |\n| --- | --- | --- | --- |\n| Ansible playbook for Node Management (Bare Metal) | This Ansible Playbook is for the initialization, configuration, planned and hotfix upgrades of Aptos Validators, VFNs and PFNs on bare metal servers. | RHINO | 2023-03-14 |\n| Ansible playbook for Node Management (Docker) | This Ansible Playbook is intended for node management, including initial launch and handling upgrades of nodes. | Lavender.Five Nodes | 2023-03-13 |\n| Write Your First Smart Contract On Aptos | This blog is created to help you start writing smart contracts in Aptos Blockchain. | Samundra Karki, MokshyaProtocol | 2023-02-27 |\n| Transfer validator node to other server (no FN required) | Shows how to transfer a validator node to another server without using an intermediate full node server. | p1xel32 | 2023-02-03 |\n| Failover and migrate Validator Nodes for less downtime | Explains how to hot swap a validator node with a validator full node with Docker setup and inspired the generic Update Aptos Validator Node via Failover. | guguru | 2022-11-22 |\n\n", "doc_id": "7ffcecfa-9f95-43c6-9dfd-d9065b8eb1f5", "embedding": null, "doc_hash": "81b245f1354206bc86a5976e73fde136dc13cb79ef887022234fb29c9cfcaaa9", "extra_info": null, "node_info": {"start": 0, "end": 1133, "_node_type": "1"}, "relationships": {"1": "f5f8b438-8bdc-4a6f-9f60-707b17319f44"}}, "__type__": "1"}, "09627079-fc92-42bc-a1bc-80e0ab5bde7d": {"__data__": {"text": "\n\nYour First Coin\n\nThis tutorial introduces how you can compile, deploy, and mint your own coin, named MoonCoin.\n\n", "doc_id": "09627079-fc92-42bc-a1bc-80e0ab5bde7d", "embedding": null, "doc_hash": "40b3c8ca371b54d44ca2ad5f54f96778c57be9971314301062481c866b9ed12e", "extra_info": null, "node_info": {"start": 0, "end": 114, "_node_type": "1"}, "relationships": {"1": "50eaf83c-d976-49c7-a15d-9674eeaa545c"}}, "__type__": "1"}, "2ff9ed9e-2a15-4e79-95c8-9537e945902d": {"__data__": {"text": "\n\nStep 1: Pick an SDK\n\nInstall your preferred SDK from the below list:\n\n* TypeScript SDK\n* Python SDK\n* Rust SDK\n\n---\n\n", "doc_id": "2ff9ed9e-2a15-4e79-95c8-9537e945902d", "embedding": null, "doc_hash": "c12d9444ab4565a31d45be000904e2df3ff8f68b3cb271854f775b3601ba5b11", "extra_info": null, "node_info": {"start": 0, "end": 119, "_node_type": "1"}, "relationships": {"1": "f4665b9c-6e30-434d-9005-98bfd950cb72"}}, "__type__": "1"}, "bedb67a3-9b34-478b-8f85-d9793f037847": {"__data__": {"text": "\n\nStep 2: Install the CLI\n\nInstall the precompiled binary for the Aptos CLI.\n\n---\n\n", "doc_id": "bedb67a3-9b34-478b-8f85-d9793f037847", "embedding": null, "doc_hash": "8f81de043a798cfc258722a78c8280fb6c338e59b76f33399ab8e36977efb818", "extra_info": null, "node_info": {"start": 0, "end": 83, "_node_type": "1"}, "relationships": {"1": "21f2a275-19eb-4b46-87a0-8b7b7a7b3d32"}}, "__type__": "1"}, "83eafccf-0e65-4fb4-8bfd-f5ed96d5a101": {"__data__": {"text": "\n\nStep 3: Run the example\n\nClone the `aptos-core` repo:\n\n```bash\ngit clone https://github.com/aptos-labs/aptos-core.git\n```\n\n\n  \n\nNavigate to the TypeScript SDK directory:\n\n```bash\ncd ~/aptos-core/ecosystem/typescript/sdk\n```\n\nInstall the necessary dependencies:\n\n```bash\npnpm install\n```\n\nRun the TypeScript `your_coin` example:\n\n```bash\ncd examples/typescript\npnpm your_coin ~/aptos-core/aptos-move/move-examples/moon_coin\n```\n\n  \n  \n\nNavigate to the Python SDK directory:\n\n```bash\ncd ~/aptos-core/ecosystem/python/sdk\n```\n\nInstall the necessary dependencies:\n\n```bash\ncurl -sSL https://install.python-poetry.org | python3\npoetry update\n```\n\nRun the Python `your-coin` example:\n\n```bash\npoetry run python -m examples.your-coin ~/aptos-core/aptos-move/move-examples/moon_coin\n```\n\n  \n  \n\n    Coming soon.\n\n  \n\n\n---\n\n", "doc_id": "83eafccf-0e65-4fb4-8bfd-f5ed96d5a101", "embedding": null, "doc_hash": "2a3f45f2494fceb53ab7943cfae1a3a20f18ef703b4d6029cf2d001cc4cdd463", "extra_info": null, "node_info": {"start": 0, "end": 817, "_node_type": "1"}, "relationships": {"1": "9c3cc192-dea5-4708-b5b7-e98d3f9efb0a"}}, "__type__": "1"}, "b6fcf6a7-6f0d-4065-87d4-14e8401eee14": {"__data__": {"text": "\n\nStep 3.1: Build the package\n\nThe example run will pause with the following output:\n\n```bash\n=== Addresses ===\nAlice: 0x5e603a89cf690d7134cf2f24fdb16ba90c4f5686333721c12e835fb6c76bc7ba\nBob: 0xc8421fa4a99153f955e50f1de2a6acff2f3fd0bb33aa17ba1f5b32b699f6c825\n\nUpdate the package with Alice's address, compile, and press enter.\n```\n\nAt this point, open another terminal and change directories to the MoonCoin package's directory:\n\n```bash\ncd ~/aptos-core/aptos-move/move-examples/moon_coin\n```\n\nNext, build the package using the CLI:\n\n```bash\naptos move compile --named-addresses MoonCoin=0x5e603a89cf690d7134cf2f24fdb16ba90c4f5686333721c12e835fb6c76bc7ba --save-metadata\n```\n\nThe `--named-addresses` is a list of address mappings that must be translated in order for the package to be compiled to be stored in Alice's account. Notice how `MoonCoin` is set to Alice's address printed above. Also `--save-metadata` is required to publish the package.\n\n---\n\n", "doc_id": "b6fcf6a7-6f0d-4065-87d4-14e8401eee14", "embedding": null, "doc_hash": "b4dd57b66d4b7b2a386204a9e220d234d3817fd20026296382d2c13f6f6612d2", "extra_info": null, "node_info": {"start": 0, "end": 954, "_node_type": "1"}, "relationships": {"1": "f6b62b09-70dd-4c8a-b4fe-47f9e8798be4"}}, "__type__": "1"}, "d913c455-ffa3-4452-82ae-54a4dbaa0508": {"__data__": {"text": "\n\nStep 3.2: Completing the example\n\nReturning to the previous prompt, press ENTER as the package is now ready to be published.\n\nThe application will complete, printing:\n\n```bash\n\nPublishing MoonCoin package.\n\nBob registers the newly created coin so he can receive it from Alice.\nBob's initial MoonCoin balance: 0.\nAlice mints Bob some of the new coin.\nBob's updated MoonCoin balance: 100.\n```\n---\n\n", "doc_id": "d913c455-ffa3-4452-82ae-54a4dbaa0508", "embedding": null, "doc_hash": "56400812097f5108fb14afbaa3689b94c282134d6274b23c08486e14c49a17ad", "extra_info": null, "node_info": {"start": 0, "end": 398, "_node_type": "1"}, "relationships": {"1": "8f899831-3f9b-4ff8-b1e8-2772168585be"}}, "__type__": "1"}, "c05b30d1-f014-4766-91aa-821cff38374a": {"__data__": {"text": "\n\nStep 4: MoonCoin in depth\n\n", "doc_id": "c05b30d1-f014-4766-91aa-821cff38374a", "embedding": null, "doc_hash": "fc88f261a542a7af95c241e6f179a1b9d3b1016034e577cd37a16e5a5f89663d", "extra_info": null, "node_info": {"start": 0, "end": 29, "_node_type": "1"}, "relationships": {"1": "6c006eef-31f5-4238-b302-5c53f1bc587b"}}, "__type__": "1"}, "504dc761-e37b-4ec6-af67-2aedc85a98ce": {"__data__": {"text": "\n\nStep 4.1: Building and publishing the MoonCoin package\n\nMove contracts are effectively a set of Move modules known as a package. When deploying or upgrading a new package, the compiler must be invoked with `--save-metadata` to publish the package. In the case of MoonCoin, the following output files are critical:\n\n- `build/Examples/package-metadata.bcs`: Contains the metadata associated with the package.\n- `build/Examples/bytecode_modules/moon_coin.mv`: Contains the bytecode for the `moon_coin.move` module.\n\nThese are read by the example and published to the Aptos blockchain:\n\n\n  \n\n```typescript\n:!: static/sdks/typescript/examples/typescript/your_coin.ts publish\n```\n\n  \n  \n\n```python\n:!: static/sdks/python/examples/your-coin.py publish\n```\n\n  \n  \n\n    Coming soon.\n\n  \n\n\n---\n\n", "doc_id": "504dc761-e37b-4ec6-af67-2aedc85a98ce", "embedding": null, "doc_hash": "a83a6fb1e986ab8b2fb2d993de20259fcb82608d20b9e75dfabe80671e8de102", "extra_info": null, "node_info": {"start": 0, "end": 787, "_node_type": "1"}, "relationships": {"1": "ef2599b8-5677-4da7-9950-f455a4cdf942"}}, "__type__": "1"}, "ba962a80-6c2b-4015-a061-4b802e8b9d97": {"__data__": {"text": "\n\nStep 4.2: Understanding the MoonCoin module\n\nThe MoonCoin module defines the `MoonCoin` struct, or the distinct type of coin type. In addition, it contains a function called `init_module`. The `init_module` function is called when the module is published. In this case, MoonCoin initializes the `MoonCoin` coin type as a `ManagedCoin`, which is maintained by the owner of the account.\n\n:::tip ManagedCoin framework\n`ManagedCoin` is a simple coin management framework for coins directly managed by users. It provides convenience wrappers around `mint` and `burn`.\n:::\n\n```rust\n:!: static/move-examples/moon_coin/sources/MoonCoin.move moon\n```\n\n---\n\n", "doc_id": "ba962a80-6c2b-4015-a061-4b802e8b9d97", "embedding": null, "doc_hash": "09606c810535f7a434c2339ed82922707bef233439053335d7bc92ed1c2b4f32", "extra_info": null, "node_info": {"start": 0, "end": 650, "_node_type": "1"}, "relationships": {"1": "b7d84534-175c-4364-a5a4-e962c42a5b1f"}}, "__type__": "1"}, "7b4c2280-03bf-4d2f-9349-2c4ad8ad9110": {"__data__": {"text": "\n\nStep 4.3: Understanding coins\n\nCoins have several primitives:\n\n- **Minting**: Creating new coins.\n- **Burning**: Deleting coins.\n- **Freezing**: Preventing an account from storing coins in `CoinStore`.\n- **Registering**: Creating a `CoinStore` resource on an account for storing coins.\n- **Transferring**: Withdrawing and depositing coins into `CoinStore`.\n\n:::tip\n\nThe entity that creates a new coin gains the capabilities for minting, burning, and freezing.\n:::\n\n---\n\n", "doc_id": "7b4c2280-03bf-4d2f-9349-2c4ad8ad9110", "embedding": null, "doc_hash": "2bbcae0692cd45645024bede0fc11db7fc3e7f5c430f571d6a1fee7f672f6a8e", "extra_info": null, "node_info": {"start": 0, "end": 472, "_node_type": "1"}, "relationships": {"1": "8d0a0166-8433-458a-8e8f-0289febbc65d"}}, "__type__": "1"}, "dd88af43-1576-44b1-85dd-d1a72dc4bcb6": {"__data__": {"text": "\n\nStep 4.3.1: Initializing a coin\n\nOnce a coin type has been published to the Aptos blockchain, the entity that published that coin type can initialize it:\n\n```rust showLineNumbers\npublic fun initialize(\n    account: &signer,\n    name: string::String,\n    symbol: string::String,\n    decimals: u8,\n    monitor_supply: bool,\n): (BurnCapability, FreezeCapability, MintCapability) {\n    let account_addr = signer::address_of(account);\n\n    assert!(\n        coin_address() == account_addr,\n        error::invalid_argument(ECOIN_INFO_ADDRESS_MISMATCH),\n    );\n\n    assert!(\n        !exists>(account_addr),\n        error::already_exists(ECOIN_INFO_ALREADY_PUBLISHED),\n    );\n\n    let coin_info = CoinInfo {\n        name,\n        symbol,\n        decimals,\n        supply: if (monitor_supply) { option::some(optional_aggregator::new(MAX_U128, false)) } else { option::none() },\n    };\n    move_to(account, coin_info);\n\n    (BurnCapability{ }, FreezeCapability{ }, MintCapability{ })\n}\n```\n\nThis ensures that this coin type has never been initialized before. Notice the check on lines 10 and 15 to ensure that the caller to `initialize` is the same one that actually published this module, and that there is no `CoinInfo` stored on their account. If both those conditions check, then a `CoinInfo` is stored and the caller obtains capabilities for burning, freezing, and minting.\n\n:::tip\nMoonCoin calls this `initialize` function automatically upon package publishing.\n:::\n\n---\n\n", "doc_id": "dd88af43-1576-44b1-85dd-d1a72dc4bcb6", "embedding": null, "doc_hash": "afed42a958473c9a0d460a180c3a9d184857f92775af3a58769dda1ac4babff1", "extra_info": null, "node_info": {"start": 0, "end": 1469, "_node_type": "1"}, "relationships": {"1": "2201cc99-1fcb-4bde-a567-6d9af358b36c"}}, "__type__": "1"}, "6796092f-470c-4dbc-9895-b86fb7164163": {"__data__": {"text": "\n\nStep 4.3.2: Registering a coin\n\nTo use a coin, an entity must register a `CoinStore` for it on their account:\n\n```rust\npublic entry fun registerCoinType(account: &signer) {\n```\n\nMoonCoin uses `ManagedCoin` that provides an entry function wrapper: `managed_coin::register`. Here is an example script for registration:\n\n```rust\n:!: static/move-examples/moon_coin/scripts/register.move moon\n```\n\n---\n\n", "doc_id": "6796092f-470c-4dbc-9895-b86fb7164163", "embedding": null, "doc_hash": "a2f9a07023d381fc7ecaadf45fe53957044f79dc141a3bd75f78aecca3b8dc84", "extra_info": null, "node_info": {"start": 0, "end": 400, "_node_type": "1"}, "relationships": {"1": "c367bc5f-a3f3-4c29-b135-8613ae39c7c5"}}, "__type__": "1"}, "b201c8e3-b0dd-4c80-98a7-b393554a5e79": {"__data__": {"text": "\n\nStep 4.3.3: Minting a coin\n\nMinting coins requires the mint capability that was produced during initialization. the function `mint` (see below) takes in that capability and an amount, and returns back a `Coin` struct containing that amount of coins. If the coin tracks supply, it will be updated.\n\n```rust\npublic fun mint(\n    amount: u64,\n    _cap: &MintCapability,\n): Coin acquires CoinInfo {\n    if (amount == 0) {\n        return zero()\n    };\n\n    let maybe_supply = &mut borrow_global_mut>(coin_address()).supply;\n    if (option::is_some(maybe_supply)) {\n        let supply = option::borrow_mut(maybe_supply);\n        optional_aggregator::add(supply, (amount as u128));\n    };\n\n    Coin { value: amount }\n}\n```\n\n`ManagedCoin` makes this easier by providing a entry function `managed_coin::mint`.\n\n---\n\n", "doc_id": "b201c8e3-b0dd-4c80-98a7-b393554a5e79", "embedding": null, "doc_hash": "465ecadee63ee6b64eb67008c6511f8a450dc523b696640f8474513a3084a284", "extra_info": null, "node_info": {"start": 0, "end": 809, "_node_type": "1"}, "relationships": {"1": "3a36a136-4d87-4147-a7ad-dfe7f90d0bf7"}}, "__type__": "1"}, "324bbf06-5e93-474a-a90f-c32d31e2d86a": {"__data__": {"text": "\n\nStep 4.3.4: Transferring a coin\n\nAptos provides several building blocks to support coin transfers:\n\n- `coin::deposit`: Allows any entity to deposit a coin into an account that has already called `coin::register`.\n- `coin::withdraw`: Allows any entity to extract a coin amount from their account.\n- `aptos_account::transfer_coins`: Transfer coins of specific CoinType to a receiver.\n\n:::tip important\nThere are two separate withdraw and deposit events instead of a single transfer event.\n:::\n\n", "doc_id": "324bbf06-5e93-474a-a90f-c32d31e2d86a", "embedding": null, "doc_hash": "8f6dda95ad9a2bd47f9075267ae2e66c3b9079d088e345413370860a8ac59e8a", "extra_info": null, "node_info": {"start": 0, "end": 494, "_node_type": "1"}, "relationships": {"1": "d8de9593-d5c6-41d2-af3e-f22c7c978418"}}, "__type__": "1"}, "f8aefc65-20cf-4cfd-a6c6-ae9d00767249": {"__data__": {"text": "\n\nSupporting documentation\n* Aptos CLI\n* TypeScript SDK\n* Python SDK\n* Rust SDK\n* REST API specification\n\n", "doc_id": "f8aefc65-20cf-4cfd-a6c6-ae9d00767249", "embedding": null, "doc_hash": "ec730b128f0ced3b8685a821a922395c94a43d37abe794fe51630bb6c7d46ea7", "extra_info": null, "node_info": {"start": 0, "end": 106, "_node_type": "1"}, "relationships": {"1": "c19d391e-83ae-44a7-ba89-c7bf2d187c54"}}, "__type__": "1"}, "3081e825-1471-4583-a136-4144e3b11824": {"__data__": {"text": "\n\nYour First Dapp\n\nIn this tutorial, you will learn how to build a dapp\non the Aptos blockchain. A dapp usually consists of a graphical user interface, which interacts with one or more Move\nmodules.  This dapp will let users publish and share snippets of text on the Aptos blockchain.\n\nFor this tutorial, we will use the Move module `hello_blockchain`\ndescribed in Your First Move Module and focus on building the user interface around the module.\n\nFor a more comprehensive view of this process, see Build an End-to-End Dapp on Aptos.\n\nWe will use the:\n\n* TypeScript SDK\n* Petra Wallet\n* Aptos CLI\n\n:::tip Full source code\n\nWe recommend becoming familiar with the newer full source code documented in the Build an End-to-End Dapp on Aptos tutorial. The full source code for this tutorial is still available in the `dapp-example` directory.\n:::\n\n", "doc_id": "3081e825-1471-4583-a136-4144e3b11824", "embedding": null, "doc_hash": "9cea56b595e9b839086786598aca12e534d189c74b262c202b5570ef16d92c42", "extra_info": null, "node_info": {"start": 0, "end": 845, "_node_type": "1"}, "relationships": {"1": "b4878e10-eff6-44f7-8a28-8766defd733b"}}, "__type__": "1"}, "ee97de96-831c-47b2-9b50-b92b8d342445": {"__data__": {"text": "\n\nPrerequisites\n\n", "doc_id": "ee97de96-831c-47b2-9b50-b92b8d342445", "embedding": null, "doc_hash": "0fa9f4da43bbfabf8fa3cdab57502e1889576aae22836ce420c1da917650437a", "extra_info": null, "node_info": {"start": 0, "end": 17, "_node_type": "1"}, "relationships": {"1": "8267fa54-4104-47f9-94b1-3d80da08a9fb"}}, "__type__": "1"}, "0564d3d4-c4b9-4cb2-ba84-6e78e3d9f694": {"__data__": {"text": "\n\nAptos Wallet\n\nBefore starting this tutorial, you'll need a chrome extension wallet to interact with the dapp, such as, the the Petra wallet extension.\n\nIf you haven't installed the Petra wallet extension before:\n1. Open the Wallet and click **Create a new wallet**. Then click **Create account** to create an Aptos Account.\n2. Copy the private key. You will need it to set up the Aptos CLI in the next section.\n3. See the user instructions on petra.app for help.\n4. Switch to the Devnet network by clicking, settings, network, and selecting **devnet**.\n5. Click the faucet button to ensure you can receive test tokens.\n\nIf you already have the Petra wallet installed, we suggest you create a new wallet for purposes of this tutorial.\n1. In the extension, go to settings, switch account, add account, create new account to create a new account.\n2. Switch to the Devnet network by clicking, settings, network, and selecting **devnet**.\n3. Click the faucet button to ensure you can receive test tokens.\n\n:::tip\nEnsure your account has sufficient funds to perform transactions by clicking the **Faucet** button.\n:::\n\n", "doc_id": "0564d3d4-c4b9-4cb2-ba84-6e78e3d9f694", "embedding": null, "doc_hash": "d0b2f04851e616802d1c48459bb223a0586e072034b593fc13843c56a9e3d72c", "extra_info": null, "node_info": {"start": 0, "end": 1115, "_node_type": "1"}, "relationships": {"1": "c56d22c3-8862-433f-9507-205e142fc1fa"}}, "__type__": "1"}, "e289a735-d3f5-4fc5-b311-8a257c55bc57": {"__data__": {"text": "\n\nAptos CLI\n\nWe will also be installing the Aptos CLI so that we can publish \n\n1. Install the Aptos CLI.\n\n2. Run `aptos init --profile my-first-nft`.\n\n3. Select the network `devnet`\n\n4. When prompted for your private key, paste the private key from the Petra Wallet and press **Return**. \n   1. You can find the private key by going to settings, manage account, show the private key, and copy that field.\n\nYou will see output resembling:\n\n```text\nAccount  has been already found onchain\n\n---\nAptos CLI is now set up for account  as profile my-first-nft!  Run `aptos --help` for more information about commands\n{\n  \"Result\": \"Success\"\n}\n```\nThis initializes the Aptos CLI to use the same account as used by the Aptos Wallet.\n\n5. Run `aptos account list --profile my-first-nft` to verify that it is working. You should see your account address listed in the `addr` field for all events.\n\n", "doc_id": "e289a735-d3f5-4fc5-b311-8a257c55bc57", "embedding": null, "doc_hash": "9445c635b68ef7aa33e07aa4cda1347d4f48b7bb841a651abab6fcc88c93a56e", "extra_info": null, "node_info": {"start": 0, "end": 886, "_node_type": "1"}, "relationships": {"1": "76efc881-c6d8-40d2-bbd7-7aace2a13feb"}}, "__type__": "1"}, "38ca2573-81c1-499f-8dd9-3e60ed589694": {"__data__": {"text": "\n\nStep 1: Set up a single page app\n\nWe will now set up the frontend user interface for our dapp. We will use `create-react-app` to set up the app in this tutorial, but neither React nor `create-react-app` are required. You can use your preferred JavaScript framework.\n\nFirst run:\n\n```bash\nnpx create-react-app first-dapp --template typescript\n```\n\nAccept installation of the `create-react-app` package if prompted. Then navigate to the newly created `first-dapp` directory:\n\n```bash\ncd first-dapp\n```\n\nAnd start the app with:\n\n```bash\nnpm start\n```\n\nYou will now have a basic React app running in your browser at: http://localhost:3000/\n\n", "doc_id": "38ca2573-81c1-499f-8dd9-3e60ed589694", "embedding": null, "doc_hash": "21ce13c1c862b4c9248e983004a2f25beb72730b01b7c5a5748ee739fdca653c", "extra_info": null, "node_info": {"start": 0, "end": 638, "_node_type": "1"}, "relationships": {"1": "3ea888d9-3145-44df-a967-c9d47f666c0c"}}, "__type__": "1"}, "900e1a03-ecb6-43af-9da7-8af3b3ba0782": {"__data__": {"text": "\n\nStep 2: Integrate the Aptos Wallet Web3 API\n\nThe Aptos Wallet provides a Web3 API for dapps at `window.aptos`. You can see how it works by opening up the browser console and running `await window.aptos.account()`. It will print out the address corresponding to the account you set up in the Aptos Wallet.\n\nNext we will update our app to use this API to display the Wallet account's address.\n\n", "doc_id": "900e1a03-ecb6-43af-9da7-8af3b3ba0782", "embedding": null, "doc_hash": "f29cc2b6f05ac9219cba45758b756e6f3f19ace02fc80f7349366fde282b1f3d", "extra_info": null, "node_info": {"start": 0, "end": 394, "_node_type": "1"}, "relationships": {"1": "0a4d7506-3ae4-4299-902e-fc5f38504598"}}, "__type__": "1"}, "32c0ff5c-54d9-4a3a-bfb3-62b0c275ddfc": {"__data__": {"text": "\n\nWait until `window.aptos` is defined\n\nThe first step when integrating with the `window.aptos` API is to delay rendering the application until the `window.onload` event has fired.\n\nQuit the app by hitting Ctrl-C in the terminal running the `npm start` process.\n\nStill in the `first-dapp` directory, open the `src/index.tsx` file and change the following code snippet:\n\n```typescript\nroot.render(\n  \n    \n  \n);\n```\n\nto this:\n\n```typescript\nwindow.addEventListener('load', () => {\n  root.render(\n    \n      \n    \n  );\n});\n```\n\nThis change will ensure that the `window.aptos` API has been initialized by the time we render the app. If we render too early, the Wallet extension may not have had a chance to initialize the API yet and thus `window.aptos` will be `undefined`.\n\nTo see the change, once again run: `npm start`\n\n", "doc_id": "32c0ff5c-54d9-4a3a-bfb3-62b0c275ddfc", "embedding": null, "doc_hash": "fa0614709c26fb4662e75fe2f60ca3f4f5338a903cb3dab6afa0c2e844b3f400", "extra_info": null, "node_info": {"start": 0, "end": 821, "_node_type": "1"}, "relationships": {"1": "109ff47f-f8f6-4ebf-9c5b-c422dc318065"}}, "__type__": "1"}, "876a8aad-2a06-4f1d-ac79-b4eefb1f11cf": {"__data__": {"text": "\n\n(Optional) TypeScript setup for `window.aptos`\n\nIf you are using TypeScript, you may also want to inform the compiler of the existence of the `window.aptos` API. Add the following to `src/index.tsx`:\n\n```typescript\ndeclare global {\n  interface Window { aptos: any; }\n}\n```\n\nThis lets us use the `window.aptos` API without having to do `(window as any).aptos`.\n\n", "doc_id": "876a8aad-2a06-4f1d-ac79-b4eefb1f11cf", "embedding": null, "doc_hash": "5d7b1b55195eaa25c1b489eb5cba6ed79ce7fc0dfabbb7016c973a2fe24e08c2", "extra_info": null, "node_info": {"start": 0, "end": 363, "_node_type": "1"}, "relationships": {"1": "fafaef31-8dcc-4f38-8090-6543e9d72eda"}}, "__type__": "1"}, "5c7fcc58-ca54-4f17-aaf1-8187dc59a99b": {"__data__": {"text": "\n\nDisplay `window.aptos.account()` in the app\n\nOur app is now ready to use the `window.aptos` API. We will change `src/App.tsx` to retrieve the value of `window.aptos.account()` (the wallet account) on initial render, store it in state, and then display it by replacing the contents in the file with:\n\n```typescript\nimport React from 'react';\nimport './App.css';\n\nfunction App() {\n  // Retrieve aptos.account on initial render and store it.\n  const [address, setAddress] = React.useState(null);\n  \n  /**\n   * init function\n   */\n  const init = async() => {\n    // connect\n    const { address, publicKey } = await window.aptos.connect();\n    setAddress(address);\n  }\n  \n  React.useEffect(() => {\n     init();\n  }, []);\n\n  return (\n    \n      Account Address: { address }\n    \n  );\n}\n\nexport default App;\n```\n\nRefresh the page and you will see your account address.\n\n", "doc_id": "5c7fcc58-ca54-4f17-aaf1-8187dc59a99b", "embedding": null, "doc_hash": "da2ffa3df06011b26bff1f6c8e5c5341bbc50ab6e8ac57365613f79d1f813cc7", "extra_info": null, "node_info": {"start": 0, "end": 865, "_node_type": "1"}, "relationships": {"1": "2fca2bae-d674-43b1-9d71-382139fa5bf8"}}, "__type__": "1"}, "81b5b975-83a6-4cc7-9e26-991e10f84e8c": {"__data__": {"text": "\n\nAdd some CSS\n\nNext, replace the contents of `src/App.css`:\n\n```css\na, input, textarea {\n  display: block;\n}\n\ntextarea {\n  border: 0;\n  min-height: 50vh;\n  outline: 0;\n  padding: 0;\n  width: 100%;\n}\n```\n\n", "doc_id": "81b5b975-83a6-4cc7-9e26-991e10f84e8c", "embedding": null, "doc_hash": "a2f2cb113ef453b19ae142a0b0ed41476d2234b478f92e8288597349e10cdf38", "extra_info": null, "node_info": {"start": 0, "end": 205, "_node_type": "1"}, "relationships": {"1": "41e48f12-422d-4dae-956e-78b97a5071c4"}}, "__type__": "1"}, "cd6fd487-ab62-456b-8fb9-3cd3716d97c2": {"__data__": {"text": "\n\nStep 3: Use the SDK to get data from the blockchain\n\nThe Wallet is now integrated with our dapp. Next, we will integrate the Aptos SDK to get data from the blockchain. We will use the Aptos SDK to retrieve information about our account and display that information on the page.\n\n", "doc_id": "cd6fd487-ab62-456b-8fb9-3cd3716d97c2", "embedding": null, "doc_hash": "29dad83552fc42307d3b35ef365bdb92af989236134eba35bdd557038b3c2a4e", "extra_info": null, "node_info": {"start": 0, "end": 281, "_node_type": "1"}, "relationships": {"1": "6478bf36-7600-488b-aab7-104d3b20fc80"}}, "__type__": "1"}, "256d3256-c40e-422f-a39b-0630a2ad605e": {"__data__": {"text": "\n\nAdd the `aptos` dependency to `package.json`\n\nFirst, add the SDK to the project's dependencies:\n\n```bash\nnpm install --save aptos\n```\n\nYou will now see `\"aptos\": \"^1.3.15\"` (or similar) in your `package.json`.\n\n", "doc_id": "256d3256-c40e-422f-a39b-0630a2ad605e", "embedding": null, "doc_hash": "929a5494a6c0611a6f3d20f462ac0b5bccc6a6d4e3e5e4ed183ad446068294a1", "extra_info": null, "node_info": {"start": 0, "end": 213, "_node_type": "1"}, "relationships": {"1": "ba8104a8-baa0-498f-88c5-98463eb849f8"}}, "__type__": "1"}, "05e10e3c-0342-443e-a92c-1460be9d1a65": {"__data__": {"text": "\n\nCreate an `AptosClient`\n\nNow we can import the SDK and create an `AptosClient` to interact with the blockchain (technically it interacts with the REST API, which interacts with the blockchain).\n\nAs our wallet account is on devnet, we will set up the `AptosClient` to interact with devnet as well. Add the following to `src/App.tsx`:\n\n```typescript\nimport { Types, AptosClient } from 'aptos';\n\n// Create an AptosClient to interact with devnet.\nconst client = new AptosClient('https://fullnode.devnet.aptoslabs.com/v1');\n\nfunction App() {\n  // ...\n\n  // Use the AptosClient to retrieve details about the account.\n  const [account, setAccount] = React.useState(null);\n  React.useEffect(() => {\n    if (!address) return;\n    client.getAccount(address).then(setAccount);\n  }, [address]);\n\n  return (\n    \n      Account Address: { address }\n      Sequence Number: { account?.sequence_number }\n    \n  );\n}\n```\n\nNow, in addition to displaying the account address, the app will also display the account's `sequence_number`. This `sequence_number` represents the next transaction sequence number to prevent replay attacks of transactions. You will see this number increasing as you make transactions with the account.\n\n:::tip\nIf the account you're using for this application doesn't exist on-chain, you will not see a sequence number.  You'll need\nto create the account first via a faucet.\n:::\n\n", "doc_id": "05e10e3c-0342-443e-a92c-1460be9d1a65", "embedding": null, "doc_hash": "9acdcce01b110e1723808d5fc456107b3555b975c82a5dbc18612257dd84e4b5", "extra_info": null, "node_info": {"start": 0, "end": 1387, "_node_type": "1"}, "relationships": {"1": "37038ff9-4ab5-47d5-825a-bb7237317e3b"}}, "__type__": "1"}, "d02f51b9-d4b1-48b9-8165-6a0efd9f6f04": {"__data__": {"text": "\n\nStep 4: Publish a Move module\n\nOur dapp is now set up to read from the blockchain. The next step is to write to the blockchain. To do so, we will publish a Move module to our account.\n\nThe Move module provides a location for this data to be stored. Specifically, we will use the `hello_blockchain` module from Your First Move Module, which provides a resource called `MessageHolder` that holds a string (called `message`).\n\n\nPublish the `hello_blockchain` module with the Aptos CLI\nWe will use the Aptos CLI to compile and publish the `hello_blockchain` module.\n\n1. Download the `hello_blockchain` package.\n\n2. Use the `aptos move publish` command (replacing `/path/to/hello_blockchain/` and ``):\n\n```bash\naptos move publish --profile my-first-nft --package-dir /path/to/hello_blockchain/ --named-addresses hello_blockchain=\n```\n\nFor example:\n\n```bash\naptos move publish --profile my-first-nft --package-dir ~/code/aptos-core/aptos-move/move-examples/hello_blockchain/ --named-addresses hello_blockchain=0x5af503b5c379bd69f46184304975e1ef1fa57f422dd193cdad67dc139d532481\n```\n\nThe `--named-addresses` replaces the named address `hello_blockchain` in `hello_blockchain.move` with the specified address. For example, if we specify `--named-addresses hello_blockchain=0x5af503b5c379bd69f46184304975e1ef1fa57f422dd193cdad67dc139d532481`, then the following:\n\n```rust\nmodule hello_blockchain::message {\n```\n\nbecomes:\n\n```rust\nmodule 0x5af503b5c379bd69f46184304975e1ef1fa57f422dd193cdad67dc139d532481::message {\n```\n\nThis makes it possible to publish the module for the given account, in this case our wallet account:\n`0x5af503b5c379bd69f46184304975e1ef1fa57f422dd193cdad67dc139d532481`\n\nAssuming that your account has enough funds to execute the transaction, you can now publish the `hello_blockchain` module in your account. If you refresh the app, you will see that the account sequence number has increased from 0 to 1.\n\nYou can also verify the module was published by going to the Aptos Explorer and looking up your account. If you scroll down to the *Account Modules* section, you should see something resembling:\n\n```json\n{\n  \"address\": \"0x5af503b5c379bd69f46184304975e1ef1fa57f422dd193cdad67dc139d532481\",\n  \"name\": \"message\",\n  \"friends\": [],\n  \"exposedFunctions\": [\n    {\n      \"name\": \"get_message\",\n      \"visibility\": \"public\",\n      \"genericTypeParams\": [],\n      \"params\": [\n        \"address\"\n      ],\n      \"_return\": [\n        \"0x1::string::String\"\n      ]\n    },\n    {\n      \"name\": \"set_message\",\n      \"visibility\": \"script\",\n      \"genericTypeParams\": [],\n      \"params\": [\n        \"signer\",\n        \"vector\"\n      ],\n      \"_return\": []\n    }\n  ],\n  \"structs\": [\n    {\n      \"name\": \"MessageChangeEvent\",\n      \"isNative\": false,\n      \"abilities\": [\n   ", "doc_id": "d02f51b9-d4b1-48b9-8165-6a0efd9f6f04", "embedding": null, "doc_hash": "0e5e1afd790f0b578ecb5f49f11998d818f447d3be6bc9899d80dbc5ffe5f7b8", "extra_info": null, "node_info": {"start": 0, "end": 2771, "_node_type": "1"}, "relationships": {"1": "19cf202e-a5c5-4ec9-804c-a344381e9e69", "3": "035013fd-e35a-4303-88bf-b5ca79b6d988"}}, "__type__": "1"}, "035013fd-e35a-4303-88bf-b5ca79b6d988": {"__data__": {"text": "\"isNative\": false,\n      \"abilities\": [\n        \"drop\",\n        \"store\"\n      ],\n      \"genericTypeParams\": [],\n      \"fields\": [\n        {\n          \"name\": \"from_message\",\n          \"type\": \"0x1::string::String\"\n        },\n        {\n          \"name\": \"to_message\",\n          \"type\": \"0x1::string::String\"\n        }\n      ]\n    },\n    {\n      \"name\": \"MessageHolder\",\n      \"isNative\": false,\n      \"abilities\": [\n        \"key\"\n      ],\n      \"genericTypeParams\": [],\n      \"fields\": [\n        {\n          \"name\": \"message\",\n          \"type\": \"0x1::string::String\"\n        },\n        {\n          \"name\": \"message_change_events\",\n          \"type\": \"0x1::event::EventHandle\"\n        }\n      ]\n    }\n  ]\n}\n```\n\nMake a note of `\"name\": \"message\"; we will use it in the next section.\n\n\n\nPublish the `hello_blockchain` module with the TS SDK\nWe will use the Aptos CLI to compile the `hello_blockchain` module and use the TypeScript SDK to publish the module.\n\n1. Download the `hello_blockchain` package.\n\n2. Next, use the `aptos move compile --save-metadata` command (replacing `/path/to/hello_blockchain/` and ``):\n\n```bash\naptos move compile --save-metadata --package-dir /path/to/hello_blockchain/ --named-addresses hello_blockchain=\n```\n\nFor example:\n\n```bash\naptos move compile --save-metadata --package-dir ~/code/aptos-core/aptos-move/move-examples/hello_blockchain/ --named-addresses hello_blockchain=0x5af503b5c379bd69f46184304975e1ef1fa57f422dd193cdad67dc139d532481\n```\n\nThe `--named-addresses` replaces the named address `hello_blockchain` in `hello_blockchain.move` with the specified address. For example, if we specify `--named-addresses hello_blockchain=0x5af503b5c379bd69f46184304975e1ef1fa57f422dd193cdad67dc139d532481`, then the following:\n\n```rust\nmodule hello_blockchain::message {\n```\n\nbecomes:\n\n```rust\nmodule 0x5af503b5c379bd69f46184304975e1ef1fa57f422dd193cdad67dc139d532481::message {\n```\n\nThis makes it possible to publish the module for the given account, in this case our wallet account: `0x5af503b5c379bd69f46184304975e1ef1fa57f422dd193cdad67dc139d532481`\n\nThe `--save-metadata` argument, if set, generates and saves the package metadata in the package's `build` directory. This metadata can be used to construct a transaction to publish a package.\n\nAt this point, we should have a `build` folder in the same directory of our `hello_blockchain` folder. The next step would be to publish the module to the chain. \nThe TypeScript SDK provides us a `publishPackage()` function where it expects to get both package", "doc_id": "035013fd-e35a-4303-88bf-b5ca79b6d988", "embedding": null, "doc_hash": "8fa98102064a8eb67d8fa20de054990f5d7909e9b0fdd5e31796aa7a535a66f2", "extra_info": null, "node_info": {"start": 2740, "end": 5274, "_node_type": "1"}, "relationships": {"1": "19cf202e-a5c5-4ec9-804c-a344381e9e69", "2": "d02f51b9-d4b1-48b9-8165-6a0efd9f6f04", "3": "4542dad7-b855-4649-80f1-6aa1a9000c24"}}, "__type__": "1"}, "4542dad7-b855-4649-80f1-6aa1a9000c24": {"__data__": {"text": "provides us a `publishPackage()` function where it expects to get both package metadata and the move module as `Uint8Array`. We can supply this by converting both the `package-metadata.bcs` file and the `bytecode_modules/message.mv` module into hex strings (using a command, below), and then to `Uint8Array` (using the SDK).\n\nConvert `package-metadata.bcs` file and the `bytecode_modules/message.mv` module into hex strings:\n\nNavigate to the `hello_blockchain/build/Example` directory:\n```bash\ncd hello_blockchain/build/Example\n```\n\nConvert `package-metadata.bcs` to a hex string. On macOS and Linux, we can use the command:\n```bash\ncat package-metadata.bcs | od -v -t x1 -A n | tr -d ' \\n'\n```\nThat will output a hex string we can later use.\n\nConvert `message.mv` to a hex string. On Mac and Linux we can use the command:\n```bash\ncat bytecode_modules/message.mv | od -v -t x1 -A n | tr -d ' \\n'\n```\nThat will also output a hex string we can later use. Keep both of the hex strings ready!\n\nBack to our react app, let's add a button to click on to publish the module, use the `publishPackage` function TypeScript SDK provides us and display a link to get the account's resources where we can see the published module.\n\nWe would need our account's private key to initialize an `AptosAccount` to publish the module with. You can get the private key from the Petra Wallet by going to: **Settings** > **Manage account**, show the private key, and copy that field. Since a private key is *very* sensitive data, we dont want to expose it in the code but rather hold it in an `.env` file and use it from there.\n\n1. Create a new `.env` file on the `root` of the project and add to the file:\n```bash\nREACT_APP_ACCOUNT_PK=\n```\nMake sure to restart the local server so the app will load the new `.env` file.\n\n2. Add the following to `src/App.tsx`, where:\n- `process.env.REACT_APP_ACCOUNT_PK` holds the account private key. \n- `` is the `package-metadata.bcs` hex string output we get from the previous step.\n- `` is the `message.mv` hex string output we get from the previous step.\n\n```typescript\nimport { Types, AptosClient, AptosAccount, HexString, TxnBuilderTypes} from \"aptos\";\n  // ...\n\nfunction App() {\n  // ...\n\n  // Publish the module using the TS SDK\n  const [publishPackageTxnHash, setPublishPackageTxnHash] = useState(null);\n  const [isPublishing, setIsPublishing] = useState(false);\n  const onPublishModule = async () => {\n    if (!process.env.REACT_APP_ACCOUNT_PK) return;\n    setIsPublishing(true);\n    const aptosAccount = new AptosAccount(\n      new HexString(process.env.REACT_APP_ACCOUNT_PK).toUint8Array()\n    );\n    try{\n      const txnHash = await client.publishPackage(\n      aptosAccount,\n      new HexString(\n        // package-metadata\n        \"\"\n      ).toUint8Array(),\n      [\n        new TxnBuilderTypes.Module(\n          new HexString(\n            // modules\n            \"\"\n          ).toUint8Array()\n        ),\n      ]\n    );\n      await", "doc_id": "4542dad7-b855-4649-80f1-6aa1a9000c24", "embedding": null, "doc_hash": "bf6dd91520b93a96a50ea6762335a263ba4179168136ab782d380f3ad0cb42b1", "extra_info": null, "node_info": {"start": 5240, "end": 8195, "_node_type": "1"}, "relationships": {"1": "19cf202e-a5c5-4ec9-804c-a344381e9e69", "2": "035013fd-e35a-4303-88bf-b5ca79b6d988", "3": "150a5ce4-6056-478e-8007-d41206454eec"}}, "__type__": "1"}, "150a5ce4-6056-478e-8007-d41206454eec": {"__data__": {"text": "     ]\n    );\n      await client.waitForTransaction(txnHash);\n      setPublishPackageTxnHash(txnHash);\n    }catch(error: any){\n      console.log(\"publish error\", error)\n    }finally{\n      setIsPublishing(false);\n    }\n  };\n\n  return (\n    \n      // ...\n      \n        \n          Publish Package\n        \n        {publishPackageTxnHash && (\n          \n            \n              <a\n                href={`https://fullnode.devnet.aptoslabs.com/v1/accounts/${address}/modules`}\n                target=\"_blank\"\n              >\n                Account modules\n              \n            \n          \n        )}\n      \n    \n  );\n}\n```\nWe wrap our publishing attempt in a `try / catch` block to catch any potential errors coming from `await client.waitForTransaction(txnHash);`.\n\n`waitForTransaction(txnHash)` waits for a transaction (given a transaction hash) to move past pending state and can end up in one of the 4 states:\n\n- processed and successfully committed to the blockchain\n- rejected and is not committed to the blockchain\n- committed but execution failed\n- not processed within the specified timeout\n\n`setIsPublishing()` is an internal state to know if our app is currently publishing, if it is we want to disable the \"Publish Package\" button. When it is done publishing, we want to enable the \"Publish Package\" button. We set it to`true` when we start publishing the package and to `false` inside the `finally` block whether it succeed or not.\n\n`setPublishPackageTxnHash()` is an internal state for us to keep the transaction hash we just published to know if we should display the `Account modules` link\n\n", "doc_id": "150a5ce4-6056-478e-8007-d41206454eec", "embedding": null, "doc_hash": "fc426ed695d3cb39583d5871a884aa20887bd156c9b14d2e8cab866f70b66241", "extra_info": null, "node_info": {"start": 8237, "end": 9850, "_node_type": "1"}, "relationships": {"1": "19cf202e-a5c5-4ec9-804c-a344381e9e69", "2": "4542dad7-b855-4649-80f1-6aa1a9000c24"}}, "__type__": "1"}, "a98f8dfb-90cd-4347-8a6d-d8f464a1c344": {"__data__": {"text": "\n\nPublish the package\n\nClick the **Publish Package** button. Once the module has been published, we should see an **Account modules** link. By clicking it, we should see something resembling:\n\n```json\n{\n  \"address\": \"0x5af503b5c379bd69f46184304975e1ef1fa57f422dd193cdad67dc139d532481\",\n  \"name\": \"message\",\n  \"friends\": [],\n  \"exposedFunctions\": [\n    {\n      \"name\": \"get_message\",\n      \"visibility\": \"public\",\n      \"genericTypeParams\": [],\n      \"params\": [\n        \"address\"\n      ],\n      \"_return\": [\n        \"0x1::string::String\"\n      ]\n    },\n    {\n      \"name\": \"set_message\",\n      \"visibility\": \"script\",\n      \"genericTypeParams\": [],\n      \"params\": [\n        \"signer\",\n        \"vector\"\n      ],\n      \"_return\": []\n    }\n  ],\n  \"structs\": [\n    {\n      \"name\": \"MessageChangeEvent\",\n      \"isNative\": false,\n      \"abilities\": [\n        \"drop\",\n        \"store\"\n      ],\n      \"genericTypeParams\": [],\n      \"fields\": [\n        {\n          \"name\": \"from_message\",\n          \"type\": \"0x1::string::String\"\n        },\n        {\n          \"name\": \"to_message\",\n          \"type\": \"0x1::string::String\"\n        }\n      ]\n    },\n    {\n      \"name\": \"MessageHolder\",\n      \"isNative\": false,\n      \"abilities\": [\n        \"key\"\n      ],\n      \"genericTypeParams\": [],\n      \"fields\": [\n        {\n          \"name\": \"message\",\n          \"type\": \"0x1::string::String\"\n        },\n        {\n          \"name\": \"message_change_events\",\n          \"type\": \"0x1::event::EventHandle\"\n        }\n      ]\n    }\n  ]\n}\n```\n\nMake a note of `\"name\": \"message\"`; we will use it in the next section.\n\n\n", "doc_id": "a98f8dfb-90cd-4347-8a6d-d8f464a1c344", "embedding": null, "doc_hash": "ef891e03d2f2330b398198b1d9976e6780d33b1818d7d0e5d491ea0041fe9915", "extra_info": null, "node_info": {"start": 0, "end": 1588, "_node_type": "1"}, "relationships": {"1": "1e88bc9e-9a25-41a2-8e94-bd8eafd07eeb"}}, "__type__": "1"}, "6da1aa32-f1fa-40c4-a070-acaa7212cd6f": {"__data__": {"text": "\n\nAdd module publishing instructions to the dapp\n\nAs a convenience to the users, we can have the app display the `aptos move publish` command if the module does not exist. To do so, we will use the Aptos SDK to retrieve the account modules and look for one where `module.abi.name` equals `\"message\"` (i.e., the `\"name\": \"message\"` we saw in the Aptos Explorer).\n\nUpdate `src/App.tsx`:\n\n```typescript\nfunction App() {\n  // ...\n\n  // Check for the module; show publish instructions if not present.\n  const [modules, setModules] = React.useState([]);\n  React.useEffect(() => {\n    if (!address) return;\n    client.getAccountModules(address).then(setModules);\n  }, [address]);\n\n  const hasModule = modules.some((m) => m.abi?.name === 'message');\n  const publishInstructions = (\n    \n      Run this command to publish the module:\n      \n      aptos move publish --package-dir /path/to/hello_blockchain/\n      --named-addresses hello_blockchain={address}\n    \n  );\n\n  return (\n    \n      // ...\n      {!hasModule && publishInstructions}\n    \n  );\n}\n```\n\nNew users will be able to use this command to create a page for their account.\n\nIn this step, we can also hide the **Publish Package** button when the module does exist.\nUpdate the `button` on the `src/App.tsx` with:\n\n```typescript\nfunction App() {\n  // ...\n\n  return (\n    \n      // ...\n      {!hasModule && \n          Publish Package\n        }\n    \n  );\n}\n```\n\n", "doc_id": "6da1aa32-f1fa-40c4-a070-acaa7212cd6f", "embedding": null, "doc_hash": "e1e5c3dc40e3cdf6d6da333d63953ae0574aca91c4daa67b610957c4f8ac9a83", "extra_info": null, "node_info": {"start": 0, "end": 1411, "_node_type": "1"}, "relationships": {"1": "af4afbb4-ec4c-4a14-97e1-776741a2c7a3"}}, "__type__": "1"}, "e77d1cca-0ebb-4964-943a-eb4e919f9ee4": {"__data__": {"text": "\n\nStep 5: Write a message on the blockchain\n\nNow that the module has been published, we are ready to use it to write a message on the blockchain. For this step we will use the `set_message` function exposed by the module.\n\n", "doc_id": "e77d1cca-0ebb-4964-943a-eb4e919f9ee4", "embedding": null, "doc_hash": "a5b2f8ed1475107dbf221fb414ee7e5f2b98beaa4d81939a8352389aeb13fcf7", "extra_info": null, "node_info": {"start": 0, "end": 223, "_node_type": "1"}, "relationships": {"1": "c7727236-55ce-4558-8bae-3920f124ce84"}}, "__type__": "1"}, "9c0851cd-9f47-4da0-b4ff-2f2ee05b279a": {"__data__": {"text": "\n\nA transaction that calls the `set_message` function\n\nThe signature for `set_message` looks like this:\n\n```move\npublic(script) fun set_message(account: signer, message_bytes: vector)\n```\n\nTo call this function, we need to use the `window.aptos` API provided by the wallet to submit a transaction. Specifically, we will create a `entry_function_payload` transaction that looks like this:\n\n```javascript\n{\n  type: \"entry_function_payload\",\n  function: \"::message::set_message\",\n  arguments: [\"Message to store\"],\n  type_arguments: []\n}\n```\n\nThere is no need to provide the `account: signer` argument. Aptos provides it automatically.\n\nHowever, we do need to specify the `message` argument: this is the `\"Message to store\"` in the transaction.\n\n", "doc_id": "9c0851cd-9f47-4da0-b4ff-2f2ee05b279a", "embedding": null, "doc_hash": "6b33e9e8a13d640ece5b3a2f1099e0ee370d7de5b0a210cf8523aff5d334199b", "extra_info": null, "node_info": {"start": 0, "end": 743, "_node_type": "1"}, "relationships": {"1": "f2fadc58-4132-4a25-a79a-b79546430c41"}}, "__type__": "1"}, "6264326f-279d-4707-a258-4c8ee330015a": {"__data__": {"text": "\n\nUse the `window.aptos` API to submit the `set_message` transaction\n\nNow that we understand how to use a transaction to call the `set_message` function, next we call this function from our app using `window.aptos.signAndSubmitTransaction()`.\n\nWe will add:\n\n- A `` where the user can input a message, and\n- A `` that calls the `set_message` function with the contents of the ``.\n\nUpdate `src/App.tsx`:\n\n```typescript\nfunction App() {\n  // ...\n\n  // Call set_message with the textarea value on submit.\n  const ref = React.createRef();\n  const [isSaving, setIsSaving] = React.useState(false);\n  const handleSubmit = async (e: any) => {\n    e.preventDefault();\n    if (!ref.current) return;\n\n    const message = ref.current.value;\n    const transaction = {\n      type: \"entry_function_payload\",\n      function: `${address}::message::set_message`,\n      arguments: [message],\n      type_arguments: [],\n    };\n\n    try {\n      setIsSaving(true);\n      await window.aptos.signAndSubmitTransaction(transaction);\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  return (\n    \n      {hasModule ? (\n        \n          On-chain message\n          \n          \n        \n      ) : publishInstructions}\n    \n  );\n}\n\n```\n\nTo test it:\n\n- Type something in the `` and submit the form.\n- Find your account in the Aptos Explorer and you will now see a `MessageHolder` resource under Account Resources with the `message` you wrote.\n\nIf you don't see it, try a shorter message. Long messages may cause the transaction to fail because longer messages take more gas.\n\n", "doc_id": "6264326f-279d-4707-a258-4c8ee330015a", "embedding": null, "doc_hash": "94acaab1de39be104ce936f7c456e77aa15158aee0a8174d4c9e10f0db93589f", "extra_info": null, "node_info": {"start": 0, "end": 1550, "_node_type": "1"}, "relationships": {"1": "b075cc6e-8044-46b2-8e7f-c27476c8cf77"}}, "__type__": "1"}, "2fa82fb9-dcc2-4961-8dc0-e205f9e2e761": {"__data__": {"text": "\n\nStep 6: Display the message in the dapp\n\nNow that the `MessageHolder` resource has been created, we can use the Aptos SDK to retrieve it and display the message.\n\n", "doc_id": "2fa82fb9-dcc2-4961-8dc0-e205f9e2e761", "embedding": null, "doc_hash": "dcc27186164dc8e7b8ed2a9cb2252e7d2ae44b92a7305ccb33c0211cf584ba3b", "extra_info": null, "node_info": {"start": 0, "end": 165, "_node_type": "1"}, "relationships": {"1": "5d2417eb-a7d3-48df-b9f4-fb836ccb48dd"}}, "__type__": "1"}, "8c9aa747-c4f4-40dc-bc83-c85ff30c58e1": {"__data__": {"text": "\n\nGet the wallet account's message\n\nTo retrieve the message, we will:\n\n- First use `AptosClient.getAccountResources()` function to fetch the account's resources and store them in state.\n\n- Then we will look for one whose `type` is `MessageHolder`. The full type is `$address::message::MessageHolder` as it is part of the `$address::message` module.\n\n  In our example it is:\n\n  ```typescript\n   0x5af503b5c379bd69f46184304975e1ef1fa57f422dd193cdad67dc139d532481::message::MessageHolder\n  ```\n\n- We will use this for the initial value of the ``.\n\nUpdate `src/App.tsx`:\n\n```typescript\nfunction App() {\n  // ...\n\n  // Get the message from account resources.\n  const [resources, setResources] = React.useState([]);\n  React.useEffect(() => {\n    if (!address) return;\n    client.getAccountResources(address).then(setResources);\n  }, [address]);\n  const resourceType = `${address}::message::MessageHolder`;\n  const resource = resources.find((r) => r.type === resourceType);\n  const data = resource?.data as {message: string} | undefined;\n  const message = data?.message;\n\n  return (\n    // ...\n          \n    // ...\n  );\n}\n  ```\n\nTo test it:\n\n- Refresh the page and you will see the message you wrote earlier.\n- Change the text, submit the form, and refresh the page again. You will see that the contents have been updated with your new message.\n\nThis confirms that you are reading and writing messages on the Aptos blockchain.\n\n", "doc_id": "8c9aa747-c4f4-40dc-bc83-c85ff30c58e1", "embedding": null, "doc_hash": "47272a28df3ac4a059e88ada05979f76467bb0fc67ce646f8dda54a55cb9daae", "extra_info": null, "node_info": {"start": 0, "end": 1422, "_node_type": "1"}, "relationships": {"1": "b1f958b8-d035-4618-8ce9-3293d6112ce8"}}, "__type__": "1"}, "f7c0cbe9-aa63-4ab1-af1b-6ad372cc8412": {"__data__": {"text": "\n\nDisplay messages from other accounts\n\nSo far, we have built a \"single-player\" dapp where you can read and write a message on your own account. Next, we will make it possible for other people to read messages, including people who do not have the Aptos Wallet installed.\n\nWe will set it up so that going to the URL `/` displays the message stored at `` (if it exists).\n\n- If the app is loaded at `/`, we will also disable editing.\n\n- If editing is enabled, we will show a \"Get public URL\" link so you can share your message.\n\nUpdate `src/App.tsx`:\n\n```typescript\nfunction App() {\n  // Retrieve aptos.account on initial render and store it.\n  const urlAddress = window.location.pathname.slice(1);\n  const isEditable = !urlAddress;\n  const [address, setAddress] = React.useState(null);\n  React.useEffect(() => {\n    if (urlAddress) {\n      setAddress(urlAddress);\n    } else {\n      window.aptos.account().then((data : {address: string}) => setAddress(data.address));\n    }\n  }, [urlAddress]);\n\n  // ...\n\n  return (\n    \n      {hasModule ? (\n        \n          On-chain message\n          \n          {isEditable && ()}\n          {isEditable && (Get public URL)}\n        \n      ) : publishInstructions}\n    \n  );\n}\n```\n\nThis concludes the tutorial.\n\n", "doc_id": "f7c0cbe9-aa63-4ab1-af1b-6ad372cc8412", "embedding": null, "doc_hash": "ca31dbcdf911683736a73ffd2f29ea4dc97691fd472f46fe93ec1d863fc3895f", "extra_info": null, "node_info": {"start": 0, "end": 1247, "_node_type": "1"}, "relationships": {"1": "8f0a029c-57fb-4c5d-8c22-1846db6899f7"}}, "__type__": "1"}, "be642e0b-74d7-4566-ae3c-e3ea14b350b9": {"__data__": {"text": "\n\nSupporting documentation\n\n* Aptos CLI\n* TypeScript SDK\n* Wallet Standard\n\n", "doc_id": "be642e0b-74d7-4566-ae3c-e3ea14b350b9", "embedding": null, "doc_hash": "0679758cd15867c3e904b2432ce8e8d3128ae53e26c8882ee52d9c66405a5fa2", "extra_info": null, "node_info": {"start": 0, "end": 76, "_node_type": "1"}, "relationships": {"1": "69432ac8-c783-4a26-a4b9-11b9c9b9f1f6"}}, "__type__": "1"}, "4e99ac59-1a1a-4f23-b9e2-7fdea21866b0": {"__data__": {"text": "\n\nYour First Move Module\n\nThis tutorial details how to compile, test, publish and interact with Move modules on the Aptos blockchain. The steps in summary are:\n\n1. Install the precompiled binary for the Aptos CLI.\n2. Create an account on the Aptos blockchain and fund it.\n3. Compile and test a Move module.\n4. Publish a Move module to the Aptos blockchain.\n5. Interact with a Move module.\n\n", "doc_id": "4e99ac59-1a1a-4f23-b9e2-7fdea21866b0", "embedding": null, "doc_hash": "c38dedf2e6b052cc7cd5c4bc75b00061d231b63a669dc669f4bf4176cc220e7d", "extra_info": null, "node_info": {"start": 0, "end": 390, "_node_type": "1"}, "relationships": {"1": "02d5e802-ecb1-4d05-8270-2d64e77865fa"}}, "__type__": "1"}, "5102c13a-0c74-4314-bbab-d2a99a072cf0": {"__data__": {"text": "\n\nStep 1: Install the CLI\n\nInstall the precompiled binary for the Aptos CLI.\n\n---\n\n", "doc_id": "5102c13a-0c74-4314-bbab-d2a99a072cf0", "embedding": null, "doc_hash": "707f673ec45dcd99835167c3ecc86a7118199a23cd2bad06a59d90306ae87bcd", "extra_info": null, "node_info": {"start": 0, "end": 83, "_node_type": "1"}, "relationships": {"1": "3cd94c3d-0b8a-48dc-b4e3-53aee374b85d"}}, "__type__": "1"}, "a87e24ba-999b-443f-8cfc-0208953b4b8d": {"__data__": {"text": "\n\nStep 2: Create an account and fund it\n\nAfter installing the CLI binary, create and fund an account on the Aptos blockchain. \n\nStart a new terminal and run the following command to initialize a new local account: \n\n```bash\naptos init\n```\n\nYou will see output asking to choose a network:\n\n```text\nChoose network from [devnet, testnet, mainnet, local, custom | defaults to devnet]\n```\n\nPress **return** to accept the default devnet network or specify the network of your choosing:\n\n```text\nNo network given, using devnet...\n```\n\nSee and respond to the prompt for your private key by accepting the default to create anew or by entering an existing key:\n\n```text\nEnter your private key as a hex literal (0x...) [Current: None | No input: Generate new key (or keep one if present)]\n```\n\nAssuming you elected to create a new, you will see:\n\n```text\nNo key given, generating key...\nAccount a345dbfb0c94416589721360f207dcc92ecfe4f06d8ddc1c286f569d59721e5a doesn't exist, creating it and funding it with 100000000 Octas\nAccount a345dbfb0c94416589721360f207dcc92ecfe4f06d8ddc1c286f569d59721e5a funded successfully\n\n---\nAptos CLI is now set up for account a345dbfb0c94416589721360f207dcc92ecfe4f06d8ddc1c286f569d59721e5a as profile default!  Run `aptos --help` for more information about commands\n{\n  \"Result\": \"Success\"\n}\n```\n\nThe account address in the above output  `a345dbfb0c94416589721360f207dcc92ecfe4f06d8ddc1c286f569d59721e5a` is your new account and is aliased as the profile `default`. This account address will be different for you as it is generated randomly. From now on, either `default` or `0xa345dbfb0c94416589721360f207dcc92ecfe4f06d8ddc1c286f569d59721e5a` are used interchangeably in this document. Of course, substitute your own address as needed.\n\nNow fund this account by running this command: \n\n```bash\naptos account fund-with-faucet --account default\n```\nYou will see output resembling:\n\n```text\n{\n  \"Result\": \"Added 100000000 Octas to account a345dbfb0c94416589721360f207dcc92ecfe4f06d8ddc1c286f569d59721e5a\"\n}\n```\n\n---\n\n", "doc_id": "a87e24ba-999b-443f-8cfc-0208953b4b8d", "embedding": null, "doc_hash": "f59883f223a093f3d6cdf3e796b1d1c539a12c558cbc3b89c070ec8d8fb00375", "extra_info": null, "node_info": {"start": 0, "end": 2036, "_node_type": "1"}, "relationships": {"1": "e708c6a5-3510-4cb9-8afd-3410bb7e11f3"}}, "__type__": "1"}, "8d71508f-fba5-4733-9b3f-8ecbc0f7f8e9": {"__data__": {"text": "\n\nStep 3: Compile and test the module\n\nSeveral example Move modules are available in the aptos-core/aptos-move/move-examples directory for your use. Open a terminal and change directories into the `hello_blockchain` directory: \n\n```bash\ncd aptos-core/aptos-move/move-examples/hello_blockchain\n```\n\nRun the below command to compile the `hello_blockchain` module: \n\n```bash\naptos move compile --named-addresses hello_blockchain=default\n```\n\nYou will see output resembling:\n\n```text\n{\n  \"Result\": [\n    \"a345dbfb0c94416589721360f207dcc92ecfe4f06d8ddc1c286f569d59721e5a::message\"\n  ]\n}\n```\n\nThe `compile` command must contain `--named-addresses` as above because the `Move.toml` file leaves this as undefined (see below).\n\nTo test the module run: \n\n```bash\naptos move test --named-addresses hello_blockchain=default\n```\n\nAnd receive output like:\n\n```text\nINCLUDING DEPENDENCY AptosFramework\nINCLUDING DEPENDENCY AptosStdlib\nINCLUDING DEPENDENCY MoveStdlib\nBUILDING Examples\nRunning Move unit tests\n[ PASS    ] 0x1a42874787568af30c785622899a27dacce066d671fa487e7fb958d6d0c85077::message::sender_can_set_message\n[ PASS    ] 0x1a42874787568af30c785622899a27dacce066d671fa487e7fb958d6d0c85077::message_tests::sender_can_set_message\nTest result: OK. Total tests: 2; passed: 2; failed: 0\n{\n  \"Result\": \"Success\"\n}\n```\n\nTo prepare the module for the account created in the previous step, we specify that the named address `hello_blockchain` is set to our account address, using the `default` profile alias.\n\n```toml\n[addresses]\nhello_blockchain = \"_\"\n```\n\n---\n\n", "doc_id": "8d71508f-fba5-4733-9b3f-8ecbc0f7f8e9", "embedding": null, "doc_hash": "c93ad020954cfcf28e5000410d188728b892ec51d2d8e411c0416027c74b1b4c", "extra_info": null, "node_info": {"start": 0, "end": 1550, "_node_type": "1"}, "relationships": {"1": "e68f92d7-7b5d-4b98-bd89-75eaf8ed455b"}}, "__type__": "1"}, "b8d7b298-1b37-455d-b85c-90c2ecbe04b4": {"__data__": {"text": "\n\nStep 4: Publish the Move module\n\nAfter the code is compiled and tested, we can publish the module to the account created for this tutorial with the command:\n\n```bash\naptos move publish --named-addresses hello_blockchain=default\n```\n\nYou will see the output similar to:\n\n```bash\npackage size 1631 bytes\n{\n  \"Result\": {\n    \"transaction_hash\": \"0x45d682997beab297a9a39237c588d31da1cd2c950c5ab498e37984e367b0fc25\",\n    \"gas_used\": 13,\n    \"gas_unit_price\": 1,\n    \"pending\": null,\n    \"sender\": \"a345dbfb0c94416589721360f207dcc92ecfe4f06d8ddc1c286f569d59721e5a\",\n    \"sequence_number\": 8,\n    \"success\": true,\n    \"timestamp_us\": 1661320216343795,\n    \"version\": 3977,\n    \"vm_status\": \"Executed successfully\"\n  }\n}\n```\n\nAt this point, the module is now stored on the account in the Aptos blockchain.\n\n---\n\n", "doc_id": "b8d7b298-1b37-455d-b85c-90c2ecbe04b4", "embedding": null, "doc_hash": "5414266a4d45559a4dce75bd70d89f622280ddc59effe1be091c0352f2415d9f", "extra_info": null, "node_info": {"start": 0, "end": 806, "_node_type": "1"}, "relationships": {"1": "3922944f-f77d-4ed1-9bab-28556bdbcec7"}}, "__type__": "1"}, "5b8d9ee0-6ff1-4796-b305-e48a4a7027e3": {"__data__": {"text": "\n\nStep 5: Interact with the Move module\n\nMove modules expose access points, known as *entry functions*. These entry functions can be called via transactions. The Aptos CLI allows for seamless access to these entry functions. The example Move module `hello_blockchain` exposes a `set_message` entry function that takes in a `string`. This can be called via the CLI:\n\n```bash\naptos move run \\\n  --function-id 'default::message::set_message' \\\n  --args 'string:hello, blockchain'\n```\n\nUpon success, the CLI will print out the following:\n\n```json\n{\n  \"Result\": {\n    \"transaction_hash\": \"0x1fe06f61c49777086497b199f3d4acbee9ea58976d37fdc06d1ea48a511a9e82\",\n    \"gas_used\": 1,\n    \"gas_unit_price\": 1,\n    \"pending\": null,\n    \"sender\": \"a345dbfb0c94416589721360f207dcc92ecfe4f06d8ddc1c286f569d59721e5a\",\n    \"sequence_number\": 1,\n    \"success\": true,\n    \"timestamp_us\": 1661320878825763,\n    \"version\": 5936,\n    \"vm_status\": \"Executed successfully\"\n  }\n}\n```\n\nThe `set_message` function modifies the `hello_blockchain` `MessageHolder` resource. A resource is a data structure that is stored in global storage. The resource can be read by querying the following REST API:\n\n```bash\n\nhttps://fullnode.devnet.aptoslabs.com/v1/accounts/a345dbfb0c94416589721360f207dcc92ecfe4f06d8ddc1c286f569d59721e5a/resource/0xa345dbfb0c94416589721360f207dcc92ecfe4f06d8ddc1c286f569d59721e5a::message::MessageHolder\n```\n\nAfter the first execution, this should contain:\n\n```json\n{\n  \"type\":\"0xa345dbfb0c94416589721360f207dcc92ecfe4f06d8ddc1c286f569d59721e5a::message::MessageHolder\",\n  \"data\":{\n    \"message\":\"hello, blockchain\",\n    \"message_change_events\":{\n      \"counter\":\"0\",\n      \"guid\":{\n        \"id\":{\n          \"addr\":\"0xa345dbfb0c94416589721360f207dcc92ecfe4f06d8ddc1c286f569d59721e5a\",\n          \"creation_num\":\"3\"\n        }\n      }\n    }\n  }\n}\n```\n\nNotice that the `message` field contains `hello, blockchain`.\n\nEach successful call to `set_message` after the first call results in an update to `message_change_events`. The `message_change_events` for a given account can be accessed via the REST API: \n\n```bash\nhttps://fullnode.devnet.aptoslabs.com/v1/accounts/0xa345dbfb0c94416589721360f207dcc92ecfe4f06d8ddc1c286f569d59721e5a/events/0xa345dbfb0c94416589721360f207dcc92ecfe4f06d8ddc1c286f569d59721e5a::message::MessageHolder/message_change_events\n```\n\nwhere, after a call to set the message to `hello, blockchain, again`, the event stream would contain the following:\n```json\n[\n  {\n    \"version\":\"8556\",\n   ", "doc_id": "5b8d9ee0-6ff1-4796-b305-e48a4a7027e3", "embedding": null, "doc_hash": "1ed0e038b27a9a9d45ea456d04839292c8fe319f9a290757cc4dcd50e2885906", "extra_info": null, "node_info": {"start": 0, "end": 2499, "_node_type": "1"}, "relationships": {"1": "6cb2ceea-79c7-47a5-a841-928a26acae7b", "3": "9bc637df-c1dd-4b92-b27f-9d94b0292f53"}}, "__type__": "1"}, "9bc637df-c1dd-4b92-b27f-9d94b0292f53": {"__data__": {"text": " {\n    \"version\":\"8556\",\n    \"key\":\"0x0300000000000000a345dbfb0c94416589721360f207dcc92ecfe4f06d8ddc1c286f569d59721e5a\",\n    \"sequence_number\":\"0\",\"type\":\"0xa345dbfb0c94416589721360f207dcc92ecfe4f06d8ddc1c286f569d59721e5a::message::MessageChangeEvent\",\n    \"data\":{\n      \"from_message\":\"hello, blockchain\",\n      \"to_message\":\"hello, blockchain, again\"\n    }\n  }\n]\n```\n\n:::tip\nOther accounts can reuse the published module by calling the exact same function as in this example. It is left as an exercise to the reader.\n:::\n\n", "doc_id": "9bc637df-c1dd-4b92-b27f-9d94b0292f53", "embedding": null, "doc_hash": "0ae18d4ccf7b2f47504f31e436866e2d3f787d9c44cdd0f672b665c4d272768d", "extra_info": null, "node_info": {"start": 2471, "end": 2996, "_node_type": "1"}, "relationships": {"1": "6cb2ceea-79c7-47a5-a841-928a26acae7b", "2": "5b8d9ee0-6ff1-4796-b305-e48a4a7027e3"}}, "__type__": "1"}, "874a7378-5f85-4372-9507-e47579495f79": {"__data__": {"text": "\n\nSupporting documentation\n\n* Account basics\n* TypeScript SDK\n* Python SDK\n* Rust SDK\n* REST API specification\n\n", "doc_id": "874a7378-5f85-4372-9507-e47579495f79", "embedding": null, "doc_hash": "abba31ff3c3a0d25566b68395c7e1a2639e55204a688077da46bf18eb91e456f", "extra_info": null, "node_info": {"start": 0, "end": 112, "_node_type": "1"}, "relationships": {"1": "b775bcce-c4b6-4f21-8615-a766da41dc10"}}, "__type__": "1"}, "8bd65673-c377-4aeb-a465-9f4a6ae089ce": {"__data__": {"text": "\n\nYour First Multisig\n\nThis tutorial introduces assorted K-of-N multi-signer authentication operations and supplements content from the following tutorials:\n\n* Your First Transaction\n* Your First Coin\n* Your First Move Module\n\n:::tip\nTry out the above tutorials (which include dependency installations) before moving on to multisig operations.\n:::\n\n", "doc_id": "8bd65673-c377-4aeb-a465-9f4a6ae089ce", "embedding": null, "doc_hash": "eeb0c850ba3772a083978e91173bb4df9603e2056dc4dc50a191dd58baf6ee22", "extra_info": null, "node_info": {"start": 0, "end": 349, "_node_type": "1"}, "relationships": {"1": "8cbb0c5b-bdf1-438c-8a61-8992fbed1bb0"}}, "__type__": "1"}, "7203dd1e-42fb-4df3-a675-18675737496a": {"__data__": {"text": "\n\nStep 1: Pick an SDK\n\nThis tutorial, a community contribution, was created for the Python SDK.\n\nOther developers are invited to add support for the TypeScript SDK, Rust SDK, and Unity SDK!\n\n", "doc_id": "7203dd1e-42fb-4df3-a675-18675737496a", "embedding": null, "doc_hash": "96435bf7309bac094828020ba2daab219302113613d8e291502ba57982678e0e", "extra_info": null, "node_info": {"start": 0, "end": 191, "_node_type": "1"}, "relationships": {"1": "a8aca62a-22b6-4267-960c-77ea9f8d1ebf"}}, "__type__": "1"}, "9f33e847-510e-4375-9ce4-42e00ef37a0f": {"__data__": {"text": "\n\nStep 2: Start the example\n\nNavigate to the Python SDK directory:\n\n```zsh\ncd /aptos-core/ecosystem/python/sdk/\n```\n\nRun the `multisig.py` example:\n\n```zsh\npoetry run python -m examples.multisig\n```\n\n:::tip\nThis example uses the Aptos devnet, which has historically been reset each Thursday.\nMake sure devnet is live when you try running the example!\n:::\n\n", "doc_id": "9f33e847-510e-4375-9ce4-42e00ef37a0f", "embedding": null, "doc_hash": "07b0993c9dd1278ddc8bce4c84f9eb1286add0f752eeae609b8c277dc39c20c1", "extra_info": null, "node_info": {"start": 0, "end": 356, "_node_type": "1"}, "relationships": {"1": "72438f1d-ab2b-4210-9852-07a084641bc2"}}, "__type__": "1"}, "c9909dd0-8e0a-42af-8689-14ac3849e509": {"__data__": {"text": "\n\nStep 3: Generate single signer accounts\n\nFirst, we will generate single signer accounts for Alice, Bob, and Chad:\n\n```python title=\"multisig.py snippet\"\n:!: static/sdks/python/examples/multisig.py section_1\n```\n\nFresh accounts are generated for each example run, but the output should resemble:\n\n```zsh title=Output\n=== Account addresses ===\nAlice: 0x93c1b7298d53dd0d517f503f2d3188fc62f6812ab94a412a955720c976fecf96\nBob:   0x85eb913e58d0885f6a966d98c76e4d00714cf6627f8db5903e1cd38cc86d1ce0\nChad:  0x14cf8dc376878ac268f2efc7ba65a2ee0ac13ceb43338b6106dd88d8d23e087a\n\n=== Authentication keys ===\nAlice: 0x93c1b7298d53dd0d517f503f2d3188fc62f6812ab94a412a955720c976fecf96\nBob:   0x85eb913e58d0885f6a966d98c76e4d00714cf6627f8db5903e1cd38cc86d1ce0\nChad:  0x14cf8dc376878ac268f2efc7ba65a2ee0ac13ceb43338b6106dd88d8d23e087a\n\n=== Public keys ===\nAlice: 0x3f23f869632aaa4378f3d68560e08d18b1fc2e80f91d6f9d1b39d720b0ef7a3f\nBob:   0xcf21e85337a313bdac33d068960a3e52d22ce0e6190e9acc03a1c9930e1eaf3e\nChad:  0xa1a2aef8525eb20655387d3ed50b9a3ea1531ef6117f579d0da4bcf5a2e1f76d\n```\n\nFor each user, note the account address and authentication key are identical, but the public key is different.\n\n", "doc_id": "c9909dd0-8e0a-42af-8689-14ac3849e509", "embedding": null, "doc_hash": "b54be9270d03df42cf50574d09238e2796d8edaa301fe31bc8c4056b8a46bb63", "extra_info": null, "node_info": {"start": 0, "end": 1177, "_node_type": "1"}, "relationships": {"1": "a7ab99e2-013f-4291-8e9d-863e998ef394"}}, "__type__": "1"}, "14a59bd9-507f-4ff6-9e1e-b411c5376979": {"__data__": {"text": "\n\nStep 4: Generate a multisig account\n\nNext generate a K-of-N multi-signer public key and account address for a multisig account requiring two of the three signatures:\n\n```python title=\"multisig.py snippet\"\n:!: static/sdks/python/examples/multisig.py section_2\n```\n\nThe multisig account address depends on the public keys of the single signers. (Hence, it will be different for each example.) But the output should resemble:\n\n```zsh title=Output\n=== 2-of-3 Multisig account ===\nAccount public key: 2-of-3 Multi-Ed25519 public key\nAccount address:    0x08cac3b7b7ce4fbc5b18bc039279d7854e4c898cbf82518ac2650b565ad4d364\n```\n\n", "doc_id": "14a59bd9-507f-4ff6-9e1e-b411c5376979", "embedding": null, "doc_hash": "df4be9625e9fa87e89d23f93990f992b117682b7d285cbc194fee4a1586d8e01", "extra_info": null, "node_info": {"start": 0, "end": 622, "_node_type": "1"}, "relationships": {"1": "3545eac7-5985-4e77-b3cb-4d4a566125bb"}}, "__type__": "1"}, "dc324ef6-2901-4fa7-b820-065cc8a05d09": {"__data__": {"text": "\n\nStep 5: Fund all accounts\n\nNext fund all accounts:\n\n```python title=\"multisig.py snippet\"\n:!: static/sdks/python/examples/multisig.py section_3\n```\n\n```zsh title=Output\n=== Funding accounts ===\nAlice's balance:  10000000\nBob's balance:    20000000\nChad's balance:   30000000\nMultisig balance: 40000000\n```\n\n", "doc_id": "dc324ef6-2901-4fa7-b820-065cc8a05d09", "embedding": null, "doc_hash": "5beddf7439a92a21c1cf695f0862678ce23b7ced58870cdbde6a001eff5c97fd", "extra_info": null, "node_info": {"start": 0, "end": 309, "_node_type": "1"}, "relationships": {"1": "dff01cf3-8cc5-4d43-8397-8d77d2b43dff"}}, "__type__": "1"}, "74501c2e-f208-4e17-8f61-ac8a602897c4": {"__data__": {"text": "\n\nStep 6: Send coins from the multisig\n\nThis transaction will send 100 octas from the multisig account to Chad's account.\nSince it is a two-of-three multisig account, signatures are required from only two individual signers.\n\n", "doc_id": "74501c2e-f208-4e17-8f61-ac8a602897c4", "embedding": null, "doc_hash": "0afca8d828af50a0cde876517bced2c5dada491f542bddca871d015c27d89853", "extra_info": null, "node_info": {"start": 0, "end": 226, "_node_type": "1"}, "relationships": {"1": "92dbeddf-2a67-455a-8d08-4c6482a536c8"}}, "__type__": "1"}, "6ea0ce86-dda2-472e-8335-d73645ccb207": {"__data__": {"text": "\n\nStep 6.1: Gather individual signatures\n\nFirst generate a raw transaction, signed by Alice and Bob, but not by Chad.\n\n```python title=\"multisig.py snippet\"\n:!: static/sdks/python/examples/multisig.py section_4\n```\n\nAgain, signatures vary for each example run:\n\n```zsh title=Output\n=== Individual signatures ===\nAlice: 0x41b9dd65857df2d8d8fba251336357456cc9f17974de93292c13226f560102eac1e70ddc7809a98cd54ddee9b79853e8bf7d18cfef23458f23e3a335c3189e0d\nBob:   0x6305101f8f3ad5a75254a8fa74b0d9866756abbf359f9e4f2b54247917caf8c52798a36c5a81c77505ebc1dc9b80f2643e8fcc056bcc4f795e80b229fa41e509\n```\n\n", "doc_id": "6ea0ce86-dda2-472e-8335-d73645ccb207", "embedding": null, "doc_hash": "dcfc098823bc7787c059d98165d74430d6266e860d227dfa168efbf51e7ca2ad", "extra_info": null, "node_info": {"start": 0, "end": 593, "_node_type": "1"}, "relationships": {"1": "df596790-5f64-4bc3-bc66-5b59e5b57f36"}}, "__type__": "1"}, "e8a25bb1-5985-44e2-bea1-742cbbcbc8ac": {"__data__": {"text": "\n\nStep 6.2: Submit the multisig transaction\n\nNext generate a multisig authenticator and submit the transaction:\n\n\n```python title=\"multisig.py snippet\"\n:!: static/sdks/python/examples/multisig.py section_5\n```\n\n```zsh title=Output\n=== Submitting transfer transaction ===\nTransaction hash: 0x3ff2a848bf6145e6df3abb3ccb8b94fefd07ac16b4acb0c694fa7fa30b771f8c\n```\n\n", "doc_id": "e8a25bb1-5985-44e2-bea1-742cbbcbc8ac", "embedding": null, "doc_hash": "bf28c8f092c526d87fdaa785fefb670177e81f7ebb90279dfd406e6224f79035", "extra_info": null, "node_info": {"start": 0, "end": 361, "_node_type": "1"}, "relationships": {"1": "a6a336e4-38bb-4156-b50f-269ecd3684c8"}}, "__type__": "1"}, "97e81054-fd7b-45df-b787-6b6b1ad3de3c": {"__data__": {"text": "\n\nStep 6.3: Check balances\n\nCheck the new account balances:\n\n```python title=\"multisig.py snippet\"\n:!: static/sdks/python/examples/multisig.py section_6\n```\n\n```zsh title=Output\n=== New account balances===\nAlice's balance:  10000000\nBob's balance:    20000000\nChad's balance:   30000100\nMultisig balance: 39999300\n```\n\nNote that even though Alice and Bob signed the transaction, their account balances have not changed.\nChad, however, has received 100 octas from the multisig account, which assumed the gas costs of the transaction and thus has had more than 100 octas deducted.\n\n", "doc_id": "97e81054-fd7b-45df-b787-6b6b1ad3de3c", "embedding": null, "doc_hash": "860edc8b260c610cf13129670739e7ece45e067b635b5b94d331c23bec85eacb", "extra_info": null, "node_info": {"start": 0, "end": 580, "_node_type": "1"}, "relationships": {"1": "af7e00e5-f4c4-4de9-945b-358321c8d9d7"}}, "__type__": "1"}, "12da7664-9c58-4457-ae58-ebfb0f3221a6": {"__data__": {"text": "\n\nStep 7: Create a vanity address multisig\n\nIn this section, a fourth user named Deedee will generate a vanity address, then rotate her account to the two-of-three multisig.\n\n", "doc_id": "12da7664-9c58-4457-ae58-ebfb0f3221a6", "embedding": null, "doc_hash": "1a52337e10a9748e40a55f20bd18387b0c5978a235eca22260c89e3c0e97530a", "extra_info": null, "node_info": {"start": 0, "end": 175, "_node_type": "1"}, "relationships": {"1": "7c948eca-b46a-43f0-8a25-01ea1d288181"}}, "__type__": "1"}, "9228d037-b2a5-41b3-ba44-8e115911b245": {"__data__": {"text": "\n\nStep 7.1 Generate a vanity address\n\nA fourth user, Deedee, wants her account address to start with `0xdd..`, so she generates random accounts until she finds one with a matching account address:\n\n```python title=\"multisig.py snippet\"\n:!: static/sdks/python/examples/multisig.py section_7\n```\n\n```zsh title=Output\n=== Funding vanity address ===\nDeedee's address:    0xdd86860ae7f77f58d08188e1c39fbc6a2f7cec782f09f6767f8367d84357ed57\nDeedee's public key: 0xdbf02311c45903f0217e9ab76ca64007c2876363118bb422922410d4cfe9964c\nDeedee's balance:    50000000\n```\n\n", "doc_id": "9228d037-b2a5-41b3-ba44-8e115911b245", "embedding": null, "doc_hash": "5dd824661918435b646cc8af997a128f6f0b85b0489629af4f99642c263dbf7f", "extra_info": null, "node_info": {"start": 0, "end": 557, "_node_type": "1"}, "relationships": {"1": "0736bf66-77dc-421d-81d2-fc655c9cdc10"}}, "__type__": "1"}, "6b8d047e-57ad-4fad-b1ab-558ea31b3cfc": {"__data__": {"text": "\n\nStep 7.2 Sign a rotation proof challenge\n\nDeedee and the two-of-three multisig must both sign a `RotationProofChallenge`, yielding two signatures.\nDeedee's signature, `cap_rotate_key`, verifies that she approves of the authentication key rotation.\nThe multisig signature, `cap_update_table`, verifies that the multisig approves of the authentication key rotation.\nHere, Bob and Chad provide individual signatures for the multisig:\n\n```python title=\"multisig.py snippet\"\n:!: static/sdks/python/examples/multisig.py section_8\n```\n\n```zsh title=Output\n=== Signing rotation proof challenge ===\ncap_rotate_key:   0x3b2906df78bb79f210051e910985c358572c2ec7cdd03f688480fb6adf8d538df48a52787d5651d85f2959dcca88d58da49709c9c0dc9c3c58b67169ec1e1c01\ncap_update_table: 0x965fd11d7afe14396e5af40b8ffb78e6eb6f7caa1f1b1d8c7b819fdd6045864e70258788ec1670a3989c85f8cc604f4b54e43e1ce173a59aa0a6f7cf124fd902dcbb2ad53467d05c144260b2be1814777c082d8db437698b00e6a2109a015a565ff5783e827a21a4c07ae332b56398b69dfdbcc08b8ad5585dc1ac649b74730760000000\n```\n\n", "doc_id": "6b8d047e-57ad-4fad-b1ab-558ea31b3cfc", "embedding": null, "doc_hash": "417bd5cbac4342d4f3bc8059639691aefcd8ed5af47f0f9ec4cf5d9ce5750a1f", "extra_info": null, "node_info": {"start": 0, "end": 1031, "_node_type": "1"}, "relationships": {"1": "ef104253-682b-4cbc-9405-e9d34b30fea7"}}, "__type__": "1"}, "1b16d8d7-437c-40a0-b93a-32cff5825bc4": {"__data__": {"text": "\n\nStep 7.3 Rotate the authentication key\n\nNow that the relevant signatures have been gathered, the authentication key rotation transaction can be submitted.\nAfter it executes, the rotated authentication key matches the address of the first multisig account (the one that sent octas to Chad):\n\n```python title=\"multisig.py snippet\"\n:!: static/sdks/python/examples/multisig.py section_9\n```\n\n```zsh title=Output\n=== Submitting authentication key rotation transaction ===\nAuth key pre-rotation: 0xdd86860ae7f77f58d08188e1c39fbc6a2f7cec782f09f6767f8367d84357ed57\nTransaction hash:      0x57c66089a1b81e2895a2d6919ab19eb90c4d3c3cbe9fecab8169eaeedff2c6e6\nNew auth key:          0x08cac3b7b7ce4fbc5b18bc039279d7854e4c898cbf82518ac2650b565ad4d364\n1st multisig address:  0x08cac3b7b7ce4fbc5b18bc039279d7854e4c898cbf82518ac2650b565ad4d364\n```\n\nIn other words, Deedee generated an account with a vanity address so that Alice, Bob, and Chad could use it as a multisig account.\nThen Deedee and the Alice/Bob/Chad group (under the authority of Bob and Chad) approved to rotate the vanity account's authentication key to the authentication key of the first multisig account.\n\n", "doc_id": "1b16d8d7-437c-40a0-b93a-32cff5825bc4", "embedding": null, "doc_hash": "259911c9efe96b3ad9b28890840f059c3a8fa589f133defc4377e74123de939b", "extra_info": null, "node_info": {"start": 0, "end": 1161, "_node_type": "1"}, "relationships": {"1": "298d4e20-cd91-4e1b-a490-5357ca3a607e"}}, "__type__": "1"}, "05bdd403-a9e9-4924-9326-b04d96d06db2": {"__data__": {"text": "\n\nStep 8: Perform Move package governance\n\nIn this section, the multisig vanity account will publish a simple package, upgrade it, then invoke a Move script.\n\nMove source code for this section is found in the `upgrade_and_govern` directory.\n\n", "doc_id": "05bdd403-a9e9-4924-9326-b04d96d06db2", "embedding": null, "doc_hash": "4c293f8d40d6a3cbd1a2676a15ffa97d79744fcd1f5d3bc24c7056ab8c3d7a3c", "extra_info": null, "node_info": {"start": 0, "end": 242, "_node_type": "1"}, "relationships": {"1": "3db04443-0ee6-43c5-99d6-fc37906ba0c8"}}, "__type__": "1"}, "845b4678-69b8-44fa-a688-2394a30443d7": {"__data__": {"text": "\n\nStep 8.1: Review genesis package\n\nThe `UpgradeAndGovern` genesis package (version `1.0.0`) contains a simple `.toml` manifest and a single Move source file:\n\n```toml title=\"Move.toml\"\n:!: static/move-examples/upgrade_and_govern/genesis/Move.toml manifest\n```\n\n```rust title=\"parameters.move\"\n:!: static/move-examples/upgrade_and_govern/genesis/sources/parameters.move module\n```\n\nAs soon as the package is published, a `GovernanceParameters` resource is moved to the `upgrade_and_govern` package account with the values specified by `GENESIS_PARAMETER_1` and `GENESIS_PARAMETER_2`.\nThen, the `get_parameters()` function can be used to look up the governance parameters, but note that in this version there is no setter function.\nThe setter function will be added later.\n\n", "doc_id": "845b4678-69b8-44fa-a688-2394a30443d7", "embedding": null, "doc_hash": "5eb6f3cd6e4768bceef6fc0bd59da791b9debb7bc7105b89049d3bd8071faf35", "extra_info": null, "node_info": {"start": 0, "end": 773, "_node_type": "1"}, "relationships": {"1": "3a9a8396-efe5-46eb-aee0-9db9ddf0211e"}}, "__type__": "1"}, "1d970844-cac3-4ae6-a393-0dbc9e4df30d": {"__data__": {"text": "\n\nStep 8.2: Publish genesis package\n\nHere, Alice and Chad will sign off on the publication transaction.\n\nAll compilation and publication operations are handled via the ongoing Python script:\n\n```python title=\"multisig.py snippet\"\n:!: static/sdks/python/examples/multisig.py section_10\n```\n\n```zsh title=Output\n=== Genesis publication ===\nRunning aptos CLI command: aptos move compile --save-metadata --package-dir ../../../../aptos-move/move-examples/upgrade_and_govern/genesis --named-addresses upgrade_and_govern=0xdd86860ae7f77f58d08188e1c39fbc6a2f7cec782f09f6767f8367d84357ed57\n\nCompiling, may take a little while to download git dependencies...\nINCLUDING DEPENDENCY AptosFramework\nINCLUDING DEPENDENCY AptosStdlib\nINCLUDING DEPENDENCY MoveStdlib\nBUILDING UpgradeAndGovern\n\nTransaction hash: 0x3c65c681194d6c64d73dc5d0cbcbad62e99a997b8600b8edad6847285e580c13\nPackage name from on-chain registry: UpgradeAndGovern\nOn-chain upgrade number: 0\n```\n\n", "doc_id": "1d970844-cac3-4ae6-a393-0dbc9e4df30d", "embedding": null, "doc_hash": "f5577389e0d25640546e333509278eacf89b7b09c23c7e5a9c2514eeeaf44ee1", "extra_info": null, "node_info": {"start": 0, "end": 949, "_node_type": "1"}, "relationships": {"1": "da969fee-0714-40c2-b052-5b2c03eb16e8"}}, "__type__": "1"}, "143fcc3e-22c9-4681-9110-0bb4e0401eca": {"__data__": {"text": "\n\nStep 8.3: Review package upgrades\n\nThe `UpgradeAndGovern` upgrade package adds the following parameter setter functionality at the end of `parameters.move`:\n\n```rust title=parameters.move\n:!: static/move-examples/upgrade_and_govern/upgrade/sources/parameters.move appended\n```\n\nHere, the account that the package is published under, `upgrade_and_govern`, has the authority to change the `GovernanceParameter` values from the genesis values to the new `parameter_1` and `parameter_2` values.\n\nThere is also a new module, `transfer.move`:\n\n```rust title=transfer.move\n:!: static/move-examples/upgrade_and_govern/upgrade/sources/transfer.move module\n```\n\nThis module simply looks up the `GovernanceParameter` values, and treats them as the amount of octas to send to two recipients.\n\nLastly, the manifest has been updated with the new version number `1.1.0`:\n\n```toml title=Move.toml\n:!: static/move-examples/upgrade_and_govern/upgrade/Move.toml manifest\n```\n\n", "doc_id": "143fcc3e-22c9-4681-9110-0bb4e0401eca", "embedding": null, "doc_hash": "844517e404463e5b5e6d0036baebd871772b2b280c2d45d82a5441fac9678cfa", "extra_info": null, "node_info": {"start": 0, "end": 959, "_node_type": "1"}, "relationships": {"1": "a3af2d2c-06b0-4aac-b00e-69a9a364e634"}}, "__type__": "1"}, "2469ffd3-2b84-4d70-9f25-561381c9bdfd": {"__data__": {"text": "\n\nStep 8.4: Upgrade the package\n\nAlice, Bob, and Chad will all sign off on this publication transaction, which results in an upgrade.\nThis process is almost identical to that of the genesis publication, with the new `transfer` module listed after the `parameters` module:\n\n```python title=\"multisig.py snippet\"\n:!: static/sdks/python/examples/multisig.py section_11\n```\n\n:::tip\nModules that `use` other modules must be listed *after* the modules they use.\n:::\n\n```zsh title=Output\n=== Upgrade publication ===\nRunning aptos CLI command: aptos move compile --save-metadata --package-dir ../../../../aptos-move/move-examples/upgrade_and_govern/upgrade --named-addresses upgrade_and_govern=0xdd86860ae7f77f58d08188e1c39fbc6a2f7cec782f09f6767f8367d84357ed57\n\nCompiling, may take a little while to download git dependencies...\nINCLUDING DEPENDENCY AptosFramework\nINCLUDING DEPENDENCY AptosStdlib\nINCLUDING DEPENDENCY MoveStdlib\nBUILDING UpgradeAndGovern\n\nTransaction hash: 0x0f0ea3bb7271ddeaceac5b49ff5503d6c652d4746c1510e47665ceee5a89aaf0\nOn-chain upgrade number: 1\n```\n\nNote that the on-chain upgrade number has been incremented by 1.\n\n", "doc_id": "2469ffd3-2b84-4d70-9f25-561381c9bdfd", "embedding": null, "doc_hash": "0d1c1f83c9ed3db507b3f2c7c4b639d3fb8decbdd48fd9fa012d9fa1953e0972", "extra_info": null, "node_info": {"start": 0, "end": 1132, "_node_type": "1"}, "relationships": {"1": "7da86549-b44d-4fa8-a839-a05f386c1bdd"}}, "__type__": "1"}, "814b4227-38b5-44d8-af65-a093722e47d6": {"__data__": {"text": "\n\nStep 8.6: Review the governance script\n\nThe `UpgradeAndGovern` upgrade package also includes a Move script at `set_and_transfer.move`:\n\n```rust title=set_and_transfer.move\n:!: static/move-examples/upgrade_and_govern/upgrade/scripts/set_and_transfer.move script\n```\n\nThis script calls the governance parameter setter using hard-coded values defined at the top of the script, then calls the octa transfer function.\nThe script accepts as arguments the signature of the account hosting the package, as well as two target addresses for the transfer operation.\n\nNote that both functions in the script are `public entry fun` functions, which means that everything achieved in the script could be performed without a script.\nHowever, a non-script approach would require two transactions instead of just one, and would complicate the signature aggregation process:\nin practical terms, Alice, Bob, and/or Chad would likely have to send single-signer transaction signatures around through off-chain communication channels, and a *scribe* for the group would then have to submit a multisig `Authenticator` (for *each* `public entry fun` call).\nHence in a non-script approach, extra operational complexity can quickly introduce opportunities for consensus failure.\n\nA Move script, by contrast, collapses multiple governance function calls into a single transaction; and moreover, Move scripts can be published in a public forum like GitHub so that all signatories can review the actual function calls before they sign the script.\n\n", "doc_id": "814b4227-38b5-44d8-af65-a093722e47d6", "embedding": null, "doc_hash": "545d8b4e75fd3a5334f44b2acd0cf4558dd3ee278885bd975d0330e647d3b0a3", "extra_info": null, "node_info": {"start": 0, "end": 1520, "_node_type": "1"}, "relationships": {"1": "f1096ec1-afdf-454d-9409-e13663bad36f"}}, "__type__": "1"}, "55832ec6-828f-41a6-ba7a-1bd9260f1036": {"__data__": {"text": "\n\nStep 8.5: Execute the governance script\n\nAlice and Bob sign off on the Move script, which sends coins from the vanity multisig account to their personal accounts.\nHere, the amounts sent to each account are specified in the hard-coded values from the script.\n\n```python title=\"multisig.py snippet\"\n:!: static/sdks/python/examples/multisig.py section_12\n```\n\n```zsh title=Output\n=== Invoking Move script ===\nTransaction hash: 0xd06de4bd9fb12a9f3cbd8ce1b9a9fd47ea2b923a8cfac21f9788869430e4149b\nAlice's balance:  10000300\nBob's balance:    20000200\nChad's balance:   30000100\n```\n\n---\n\nCongratulations on completing the tutorial on K-of-N multi-signer authentication operations!\n\n", "doc_id": "55832ec6-828f-41a6-ba7a-1bd9260f1036", "embedding": null, "doc_hash": "4170e1975550672dd599d22b8c21d02a00ad8c7baa95af4428bc26ff9a4f2007", "extra_info": null, "node_info": {"start": 0, "end": 678, "_node_type": "1"}, "relationships": {"1": "bcb2cab2-35b6-4f56-9d82-e5a8dfd69659"}}, "__type__": "1"}, "4ff0195d-d70d-4271-996c-d81fd73e71bc": {"__data__": {"text": "\n\nYour First Transaction\n\nThis tutorial describes how to generate and submit transactions to the Aptos blockchain, and verify these submitted transactions. The `transfer-coin` example used in this tutorial is built with the Aptos SDKs.\n\n", "doc_id": "4ff0195d-d70d-4271-996c-d81fd73e71bc", "embedding": null, "doc_hash": "5f789e39db56376b2288c22218bace70fb6f484365ba5cc24823fac55adc7eac", "extra_info": null, "node_info": {"start": 0, "end": 237, "_node_type": "1"}, "relationships": {"1": "6a284268-e699-4a4e-8f55-1484f5ddfc55"}}, "__type__": "1"}, "7866f26a-a9cd-4e31-8070-87f58a638f42": {"__data__": {"text": "\n\nStep 1: Pick an SDK\n\nInstall your preferred SDK from the below list:\n\n* TypeScript SDK\n* Python SDK\n* Rust SDK\n\n---\n\n", "doc_id": "7866f26a-a9cd-4e31-8070-87f58a638f42", "embedding": null, "doc_hash": "c12d9444ab4565a31d45be000904e2df3ff8f68b3cb271854f775b3601ba5b11", "extra_info": null, "node_info": {"start": 0, "end": 119, "_node_type": "1"}, "relationships": {"1": "25e9adf3-70df-4497-88de-f80fe85af8ac"}}, "__type__": "1"}, "f1f35b64-99f8-4245-90eb-9e6c04312280": {"__data__": {"text": "\n\nStep 2: Run the example\n\nClone the `aptos-core` repo:\n```bash\ngit clone https://github.com/aptos-labs/aptos-core.git\n```\n\n\n  \n\n  Navigate to the Typescript SDK examples directory:\n  ```bash\n  cd ~/aptos-core/ecosystem/typescript/sdk/examples/typescript\n  ```\n\n  Install the necessary dependencies:\n  ```bash\n  pnpm install\n  ```\n\n  Run the `transfer_coin` example:\n\n  ```bash\n  pnpm run transfer_coin\n  ```\n  \n  \n\n  Navigate to the Python SDK directory:\n  ```bash\n  cd ~/aptos-core/ecosystem/python/sdk\n  ```\n\n  Install the necessary dependencies:\n  ```bash\n  curl -sSL https://install.python-poetry.org | python3\n  poetry update\n  ```\n\n  Run the `transfer-coin` example:\n  ```bash\n  poetry run python -m examples.transfer-coin\n  ```\n  \n  \n\n  Navigate to the Rust SDK directory:\n  ```bash\n  cd ~/aptos-core/sdk\n  ```\n\n  Run the `transfer-coin` example:\n  ```bash\n  cargo run --example transfer-coin\n  ```\n  \n\n\n---\n\n", "doc_id": "f1f35b64-99f8-4245-90eb-9e6c04312280", "embedding": null, "doc_hash": "1b607ae0c4e6f63c95c313b29eda5ba4f8675e02fa14ac7126ae9a278a6a5ecf", "extra_info": null, "node_info": {"start": 0, "end": 917, "_node_type": "1"}, "relationships": {"1": "8be7d32e-7982-4348-ac05-7145c544d8fd"}}, "__type__": "1"}, "b1af77dd-091a-4cc7-8c23-1a53382eb4dc": {"__data__": {"text": "\n\nStep 3: Understand the output\n\nAn output very similar to the following will appear after executing the above command:\n\n```yaml\n=== Addresses ===\nAlice: 0xbd20517751571ba3fd06326c23761bc0bc69cf450898ffb43412fbe670c28806\nBob: 0x8705f98a74f5efe17740276ed75031927402c3a965e10f2ee16cda46d99d8f7f\n\n=== Initial Balances ===\nAlice: 100000000\nBob: 0\n\n=== Intermediate Balances ===\nAlice: 99944900\nBob: 1000\n\n=== Final Balances ===\nAlice: 99889800\nBob: 2000\n```\n\nThe above output demonstrates that the `transfer-coin` example executes the following steps:\n\n* Initializing the REST and faucet clients.\n* The creation of two accounts: Alice and Bob.\n  * The funding and creation of Alice's account from a faucet.\n  * The creation of Bob's account from a faucet.\n* The transferring of 1000 coins from Alice to Bob.\n* The 54100 coins of gas paid for by Alice to make that transfer.\n* Another transfer of 1000 coins from Alice to Bob.\n* The additional 54100 coins of gas paid for by Alice to make that transfer.\n\nNow see the below walkthrough of the SDK functions used to accomplish the above steps.\n\n---\n\n", "doc_id": "b1af77dd-091a-4cc7-8c23-1a53382eb4dc", "embedding": null, "doc_hash": "ae27457b159b2d845cd2089af9134e2b6489f2eb512e9bf03f26f1de3750b1dd", "extra_info": null, "node_info": {"start": 0, "end": 1093, "_node_type": "1"}, "relationships": {"1": "8d121a9f-8fd7-4447-86f2-5a84baa36dc6"}}, "__type__": "1"}, "8319827f-1512-4de5-ad27-645ff3500380": {"__data__": {"text": "\n\nStep 4: The SDK in depth\n\nThe `transfer-coin` example code uses helper functions to interact with the REST API. This section reviews each of the calls and gives insights into functionality.\n\n\n  \n\n:::tip See the full code\nSee the TypeScript `transfer-coin` for the complete code as you follow the below steps.\n:::\n  \n  \n\n:::tip See the full code\nSee the Python `transfer-coin` for the complete code as you follow the below steps.\n:::\n  \n  \n\n:::tip See the full code\nSee the Rust `transfer-coin` for the complete code as you follow the below steps.\n:::\n  \n\n\n---\n\n", "doc_id": "8319827f-1512-4de5-ad27-645ff3500380", "embedding": null, "doc_hash": "166fd82d2a5d46279071754fbe6fd595aac76f7df37f40bf444545d8539b1b2b", "extra_info": null, "node_info": {"start": 0, "end": 563, "_node_type": "1"}, "relationships": {"1": "1fc0df79-09fa-4cfa-bdd5-68cc605a48fb"}}, "__type__": "1"}, "8115c30b-f849-4dfe-8492-746395b5328a": {"__data__": {"text": "\n\nStep 4.1: Initializing the clients\n\nIn the first step, the `transfer-coin` example initializes both the REST and faucet clients:\n\n- The REST client interacts with the REST API.\n- The faucet client interacts with the devnet Faucet service for creating and funding accounts.\n\n\n  \n\n```ts\n:!: static/sdks/typescript/examples/typescript/transfer_coin.ts section_1\n```\n\nUsing the API client we can create a `CoinClient` that we use for common coin operations such as transferring coins and checking balances.\n```ts\n:!: static/sdks/typescript/examples/typescript/transfer_coin.ts section_1a\n```\n\n`common.ts` initializes the URL values as such:\n```ts\n:!: static/sdks/typescript/examples/typescript/common.ts section_1\n```\n  \n  \n\n```python\n:!: static/sdks/python/examples/transfer-coin.py section_1\n```\n\n`common.py` initializes these values as follows:\n\n```python\n:!: static/sdks/python/examples/common.py section_1\n```\n  \n  \n\n```rust\n:!: static/sdks/rust/examples/transfer-coin.rs section_1a\n```\n\nUsing the API client we can create a `CoinClient`, which we use for common coin operations such as transferring coins and checking balances.\n```rust\n:!: static/sdks/rust/examples/transfer-coin.rs section_1b\n```\n\nIn the example we initialize the URL values as such:\n```rust\n:!: static/sdks/rust/examples/transfer-coin.rs section_1c\n```\n  \n\n\n:::tip\n\nBy default, the URLs for both the services point to Aptos devnet services. However, they can be configured with the following environment variables:\n  - `APTOS_NODE_URL`\n  - `APTOS_FAUCET_URL`\n:::\n\n---\n\n", "doc_id": "8115c30b-f849-4dfe-8492-746395b5328a", "embedding": null, "doc_hash": "91c36f6012a5c29dd174a82217cda2335914fdd8d25e9df16708b3fcb2f3000f", "extra_info": null, "node_info": {"start": 0, "end": 1542, "_node_type": "1"}, "relationships": {"1": "c79e4fc0-e973-404a-9865-c0eb9ba16eaf"}}, "__type__": "1"}, "d6f98d06-dfa0-445a-8fde-60215206b3df": {"__data__": {"text": "\n\nStep 4.2: Creating local accounts\n\nThe next step is to create two accounts locally. Accounts represent both on and off-chain state. Off-chain state consists of an address and the public/private key pair used to authenticate ownership. This step demonstrates how to generate that off-chain state.\n\n\n  \n\n```ts\n:!: static/sdks/typescript/examples/typescript/transfer_coin.ts section_2\n```\n  \n  \n\n```python\n:!: static/sdks/python/examples/transfer-coin.py section_2\n```\n  \n  \n\n```rust\n:!: static/sdks/rust/examples/transfer-coin.rs section_2\n```\n  \n\n\n---\n\n", "doc_id": "d6f98d06-dfa0-445a-8fde-60215206b3df", "embedding": null, "doc_hash": "861e0692ddccb9811d42b553961c1c7a4f6bb612cc8db31cffd8fd809294d556", "extra_info": null, "node_info": {"start": 0, "end": 554, "_node_type": "1"}, "relationships": {"1": "3b921320-a539-4d56-bca8-74cf02c53be1"}}, "__type__": "1"}, "979dc5fa-8498-4339-92c9-faa9b44d3788": {"__data__": {"text": "\n\nStep 4.3: Creating blockchain accounts\n\nIn Aptos, each account must have an on-chain representation in order to receive tokens and coins and interact with other dApps. An account represents a medium for storing assets; hence, it must be explicitly created. This example leverages the Faucet to create and fund Alice's account and to create but not fund Bob's account:\n\n\n  \n\n```ts\n:!: static/sdks/typescript/examples/typescript/transfer_coin.ts section_3\n```\n  \n  \n\n```python\n:!: static/sdks/python/examples/transfer-coin.py section_3\n```\n  \n  \n\n```rust\n:!: static/sdks/rust/examples/transfer-coin.rs section_3\n```\n  \n\n\n---\n\n", "doc_id": "979dc5fa-8498-4339-92c9-faa9b44d3788", "embedding": null, "doc_hash": "0e4f27882a48357dfd5e236c8c5bf76ea2851ff8328612057168c0ead2da121f", "extra_info": null, "node_info": {"start": 0, "end": 626, "_node_type": "1"}, "relationships": {"1": "81b8d09a-0073-429e-b9bd-c2cef1e257e2"}}, "__type__": "1"}, "456efb2f-eebb-4995-8f72-65d9d9eff97d": {"__data__": {"text": "\n\nStep 4.4: Reading balances\n\nIn this step, the SDK translates a single call into the process of querying a resource and reading a field from that resource.\n\n\n  \n\n```ts\n:!: static/sdks/typescript/examples/typescript/transfer_coin.ts section_4\n```\n\nBehind the scenes, the `checkBalance` function in `CoinClient` in the SDK queries the CoinStore resource for the AptosCoin and reads the current stored value:\n\n```ts\n:!: static/sdks/typescript/src/plugins/coin_client.ts checkBalance\n```\n  \n  \n\n```python\n:!: static/sdks/python/examples/transfer-coin.py section_4\n```\n\nBehind the scenes, the SDK queries the CoinStore resource for the AptosCoin and reads the current stored value:\n```python\ndef account_balance(self, account_address: str) -> int:\n    \"\"\"Returns the test coin balance associated with the account\"\"\"\n    return self.account_resource(\n        account_address, \"0x1::coin::CoinStore\"\n    )[\"data\"][\"coin\"][\"value\"]\n```\n  \n  \n\n```rust\n:!: static/sdks/rust/examples/transfer-coin.rs section_4\n```\n\nBehind the scenes, the SDK queries the CoinStore resource for the AptosCoin and reads the current stored value:\n```rust\nlet balance = self\n    .get_account_resource(address, \"0x1::coin::CoinStore\")\n    .await?;\n```\n  \n\n\n---\n\n", "doc_id": "456efb2f-eebb-4995-8f72-65d9d9eff97d", "embedding": null, "doc_hash": "9a2b7065476fcc8163aca03cd646e94538b8753017557a4db276bc06451c868f", "extra_info": null, "node_info": {"start": 0, "end": 1231, "_node_type": "1"}, "relationships": {"1": "65b0dd20-9ba1-47f7-8375-cc009fd7b9d3"}}, "__type__": "1"}, "53e860cb-fd2f-430c-8813-5cc6cf392e34": {"__data__": {"text": "\n\nStep 4.5: Transferring\n\nLike the previous step, this is another helper step that constructs a transaction transferring the coins from Alice to Bob. For correctly generated transactions, the API will return a transaction hash that can be used in the subsequent step to check on the transaction status. The Aptos blockchain does perform a handful of validation checks on submission; and if any of those fail, the user will instead be given an error. These validations use the transaction signature and unused sequence number, and submitting the transaction to the appropriate chain.\n\n\n  \n\n```ts\n:!: static/sdks/typescript/examples/typescript/transfer_coin.ts section_5\n```\n\nBehind the scenes, the `transfer` function generates a transaction payload and has the client sign, send, and wait for it:\n```ts\n:!: static/sdks/typescript/src/plugins/coin_client.ts transfer\n```\n\nWithin the client, generateSignSubmitTransaction is doing this:\n```ts\n:!: static/sdks/typescript/src/providers/aptos_client.ts generateSignSubmitTransactionInner\n```\n\nBreaking the above down into pieces:\n1. `transfer` internally is a `EntryFunction` in the Coin Move module, i.e. an entry function in Move that is directly callable.\n1. The Move function is stored on the coin module: `0x1::coin`.\n1. Because the Coin module can be used by other coins, the transfer must explicitly specify which coin type to transfer. If not specified with `coinType` it defaults to `0x1::aptos_coin::AptosCoin`.\n\n\n  \n  \n\n```python\n:!: static/sdks/python/examples/transfer-coin.py section_5\n```\n\nBehind the scenes the Python SDK generates, signs, and submits a transaction:\n```python\n:!: static/sdks/python/aptos_sdk/client.py bcs_transfer\n```\n\nBreaking the above down into pieces:\n1. `transfer` internally is a `EntryFunction` in the Coin Move module, i.e. an entry function in Move that is directly callable.\n1. The Move function is stored on the coin module: `0x1::coin`.\n1. Because the Coin module can be used by other coins, the transfer must explicitly use a `TypeTag` to define which coin to transfer.\n1. The transaction arguments must be placed into `TransactionArgument`s with type specifiers (`Serializer.{type}`), that will serialize the value into the appropriate type at transaction generation time.\n\n\n  \n  \n\n```rust\n:!: static/sdks/rust/examples/transfer-coin.rs section_5\n```\n\nBehind the scenes the Rust SDK generates, signs, and submits a transaction:\n```rust\n:!: static/sdks/rust/src/coin_client.rs section_1\n```\n\nBreaking the above down into pieces:\n1. First, we fetch the chain ID, necessary for building the transaction payload.\n1. `transfer` internally is a `EntryFunction` in the Coin Move module, i.e. an entry function in Move that is directly callable.\n1. The Move function is stored on the coin module: `0x1::coin`.\n1. Because the Coin module can be used by other coins, the transfer must explicitly use a `TypeTag` to define which coin to transfer.\n1. The transaction arguments, such as `to_account` and `amount`, must be encoded as BCS to use with the `TransactionBuilder`.\n\n\n  \n\n\n---\n\n", "doc_id": "53e860cb-fd2f-430c-8813-5cc6cf392e34", "embedding": null, "doc_hash": "9420966b5cf9c3dc5b01367d9ad0c70e8fae39198c1555ef342838c51df6ebff", "extra_info": null, "node_info": {"start": 0, "end": 3068, "_node_type": "1"}, "relationships": {"1": "50a21d5b-cedb-4f6c-91b3-c942dc41a4a9"}}, "__type__": "1"}, "291fcfe5-af67-48c0-8ab2-ae0614215d8c": {"__data__": {"text": "\n\nStep 4.6: Waiting for transaction resolution\n\n\n  \n\nIn TypeScript, just calling `coinClient.transfer` is sufficient to wait for the transaction to complete. The function will return the `Transaction` returned by the API once it is processed (either successfully or unsuccessfully) or throw an error if processing time exceeds the timeout.\n\nYou can set `checkSuccess` to true when calling `transfer` if you'd like it to throw an error if the transaction was not committed successfully:\n```ts\n:!: static/sdks/typescript/examples/typescript/transfer_coin.ts section_6a\n```\n\n  \n  \n\nThe transaction hash can be used to query the status of a transaction:\n\n```python\n:!: static/sdks/python/examples/transfer-coin.py section_6\n```\n  \n  \n\nThe transaction hash can be used to query the status of a transaction:\n\n```rust\n:!: static/sdks/rust/examples/transfer-coin.rs section_6\n```\n  \n\n\n", "doc_id": "291fcfe5-af67-48c0-8ab2-ae0614215d8c", "embedding": null, "doc_hash": "6162bd313d56e223646bad711c2d4568557b8c431a346b24d0752bf44f224858", "extra_info": null, "node_info": {"start": 0, "end": 877, "_node_type": "1"}, "relationships": {"1": "ed9c2ae2-a9b8-471f-8137-2a1141f1cb3f"}}, "__type__": "1"}, "7b345901-4f84-4d86-a16d-772a41bf414a": {"__data__": {"text": "\n\nSupporting documentation\n\n* Account basics\n* TypeScript SDK\n* Python SDK\n* Rust SDK\n* REST API specification\n\n", "doc_id": "7b345901-4f84-4d86-a16d-772a41bf414a", "embedding": null, "doc_hash": "abba31ff3c3a0d25566b68395c7e1a2639e55204a688077da46bf18eb91e456f", "extra_info": null, "node_info": {"start": 0, "end": 112, "_node_type": "1"}, "relationships": {"1": "ba3817c7-060e-4112-afad-08241a21b540"}}, "__type__": "1"}, "24db875a-ade1-47b3-881a-3d2a9ff0192b": {"__data__": {"text": "\n\nFriends\n\nThe `friend` syntax is used to declare modules that are trusted by the current module.\nA trusted module is allowed to call any function defined in the current module that have the `public(friend)` visibility.\nFor details on function visibilities, please refer to the *Visibility* section in Functions.\n\n", "doc_id": "24db875a-ade1-47b3-881a-3d2a9ff0192b", "embedding": null, "doc_hash": "62903aa6ccce1fe8cf0a7f09ad38065b3cb62954daff4ac4e35a53876029c99b", "extra_info": null, "node_info": {"start": 0, "end": 314, "_node_type": "1"}, "relationships": {"1": "16ca91ca-62ca-460b-9d6e-bea3a4c5365c"}}, "__type__": "1"}, "aafc60bf-1628-4578-9fc3-fbc41fa6ca2c": {"__data__": {"text": "\n\nFriend declaration\n\nA module can declare other modules as friends via friend declaration statements, in the format of\n\n- `friend ` \u2014 friend declaration using fully qualified module name like the example below, or\n\n  ```move\n  address 0x42 {\n  module a {\n      friend 0x42::b;\n  }\n  }\n  ```\n\n- `friend ` \u2014 friend declaration using a module name alias, where the module alias is introduced via the `use` statement.\n\n  ```move\n  address 0x42 {\n  module a {\n      use 0x42::b;\n      friend b;\n  }\n  }\n  ```\n\nA module may have multiple friend declarations, and the union of all the friend modules forms the friend list.\nIn the example below, both `0x42::B` and `0x42::C` are considered as friends of `0x42::A`.\n\n```move\naddress 0x42 {\nmodule a {\n    friend 0x42::b;\n    friend 0x42::c;\n}\n}\n```\n\nUnlike `use` statements, `friend` can only be declared in the module scope and not in the expression block scope.\n`friend` declarations may be located anywhere a top-level construct (e.g., `use`, `function`, `struct`, etc.) is allowed.\nHowever, for readability, it is advised to place friend declarations near the beginning of the module definition.\n\nNote that the concept of friendship does not apply to Move scripts:\n- A Move script cannot declare `friend` modules as doing so is considered meaningless: there is no mechanism to call the function defined in a script.\n- A Move module cannot declare `friend` scripts as well because scripts are ephemeral code snippets that are never published to global storage.\n\n", "doc_id": "aafc60bf-1628-4578-9fc3-fbc41fa6ca2c", "embedding": null, "doc_hash": "1787a3ed92cadc5627225b46a577fd81f2d1ea851e8669b4484a5e46855f6926", "extra_info": null, "node_info": {"start": 0, "end": 1507, "_node_type": "1"}, "relationships": {"1": "f102f3d4-3290-4458-8e8f-d40ea30f3252"}}, "__type__": "1"}, "b888b850-dabe-41cb-b19a-347faf22dcc8": {"__data__": {"text": "\n\nFriend declaration rules\nFriend declarations are subject to the following rules:\n\n- A module cannot declare itself as a friend.\n\n  ```move=\n  address 0x42 {\n  module m { friend Self; // ERROR! }\n  //                ^^^^ Cannot declare the module itself as a friend\n  }\n\n  address 0x43 {\n  module m { friend 0x43::M; // ERROR! }\n  //                ^^^^^^^ Cannot declare the module itself as a friend\n  }\n  ```\n\n- Friend modules must be known by the compiler\n\n  ```move=\n  address 0x42 {\n  module m { friend 0x42::nonexistent; // ERROR! }\n  //                ^^^^^^^^^^^^^^^^^ Unbound module '0x42::nonexistent'\n  }\n  ```\n\n- Friend modules must be within the same account address. (Note: this is not a technical requirement but rather a policy decision which *may* be relaxed later.)\n\n  ```move=\n  address 0x42 {\n  module m {}\n  }\n\n  address 0x43 {\n  module n { friend 0x42::m; // ERROR! }\n  //                ^^^^^^^ Cannot declare modules out of the current address as a friend\n  }\n  ```\n\n- Friends relationships cannot create cyclic module dependencies.\n\n  Cycles are not allowed in the friend relationships, e.g., the relation `0x2::a` friends `0x2::b` friends `0x2::c` friends `0x2::a` is not allowed.\nMore generally, declaring a friend module adds a dependency upon the current module to the friend module (because the purpose is for the friend to call functions in the current module).\nIf that friend module is already used, either directly or transitively, a cycle of dependencies would be created.\n  ```move=\n  address 0x2 {\n  module a {\n      use 0x2::c;\n      friend 0x2::b;\n\n      public fun a() {\n          c::c()\n      }\n  }\n\n  module b {\n      friend 0x2::c; // ERROR!\n  //         ^^^^^^ This friend relationship creates a dependency cycle: '0x2::b' is a friend of '0x2::a' uses '0x2::c' is a friend of '0x2::b'\n  }\n\n  module c {\n      public fun c() {}\n  }\n  }\n  ```\n\n- The friend list for a module cannot contain duplicates.\n\n  ```move=\n  address 0x42 {\n  module a {}\n\n  module m {\n      use 0x42::a as aliased_a;\n      friend 0x42::A;\n      friend aliased_a; // ERROR!\n  //         ^^^^^^^^^ Duplicate friend declaration '0x42::a'. Friend declarations in a module must be unique\n  }\n  }\n  ```\n\n", "doc_id": "b888b850-dabe-41cb-b19a-347faf22dcc8", "embedding": null, "doc_hash": "c0e3ed07bdc0e7fbcc578e749144f818eade8cabf26381d1ab65ab26a6acbacc", "extra_info": null, "node_info": {"start": 0, "end": 2215, "_node_type": "1"}, "relationships": {"1": "a41e716f-6cad-4634-bb9f-0fb8a261743c"}}, "__type__": "1"}, "2a7679b4-2e6a-4a77-9690-934ceb036135": {"__data__": {"text": "\n\nRun a Fullnode\n\nThis section explains how to install a public fullnode to connect to the Aptos networks. See also the external resources offered by your fellow node operators.\n\n:::tip Default connection to devnet\nIf you follow the default setup in this document, then your public fullnode will be connected to the Aptos devnet with a REST endpoint accessible on your computer at localhost:8080. \n\nTo connect to a different Aptos network, such as devnet or testnet, make sure you have the correct version of:\n- Docker image tag (e.g. devnet, testnet)\n- Source code branch (if you build the binary directly) \n\nYou can find genesis and waypoint here \u279c https://github.com/aptos-labs/aptos-networks.\n:::\n\n\n- ### Fullnode Using Aptos Source or Docker\n- ### Update Fullnode With New Releases\n- ### Network Identity For Fullnode\n- ### Fullnode Network Connections\n- ### Run a Fullnode on GCP\n- ### Bootstrap a New Fullnode\n", "doc_id": "2a7679b4-2e6a-4a77-9690-934ceb036135", "embedding": null, "doc_hash": "29e8720c781fb2410a7010dbec2599fd4c8da4fe54f135983652d287aa1c52c2", "extra_info": null, "node_info": {"start": 0, "end": 917, "_node_type": "1"}, "relationships": {"1": "db49c8b2-9312-4063-afb3-4c8269b14b31"}}, "__type__": "1"}, "b45ea252-1380-46e3-8031-a08ffee33d66": {"__data__": {"text": "\n\nFullnode Network Connections\n\nWhen running a fullnode on an Aptos network, you can configure your node's\nnetwork connections for a few different purposes. For example, you can add\na seed peer to your node's configuration YAML to connect your node to a\nspecific peer of your choosing. Or you can create a static network identity\nfor your node to allow other nodes to connect to you, as described in Network Identity For Fullnode.\n\nThis document describes how to configure the network of your fullnode for\ndifferent deployments and requirements, including:\n\n- Allowing fullnodes to connect to your node.\n- Connecting your fullnode to an Aptos blockchain deployment.\n- Connecting your fullnode to seed peers.\n- Configuring priority access for other fullnodes.\n- Configuring your fullnode as a private fullnode.\n\n", "doc_id": "b45ea252-1380-46e3-8031-a08ffee33d66", "embedding": null, "doc_hash": "0bbce3d18691150cd2ebd70a2b31c1748be3bf406f198fc72f2d7c693da08a98", "extra_info": null, "node_info": {"start": 0, "end": 811, "_node_type": "1"}, "relationships": {"1": "04ce8def-87fa-4f79-8544-0926d67d5870"}}, "__type__": "1"}, "00c05512-3063-4296-ac94-f4a6556718a4": {"__data__": {"text": "\n\nAllowing fullnodes to connect to your node\n\n:::tip Before you proceed\n\nBefore allowing other fullnodes to connect to your fullnode,\nbe sure to create a fullnode identity. See Network Identity For Fullnode.\n\n:::\n\nOnce you start your fullnode with a static identity you can allow others to connect to your fullnode:\n\n:::tip\n\nIn the below steps, the port numbers used are for illustration only. You can\nuse your choice of port numbers. See Ports and port settings for an explanation of port settings and how they are used.\n\n:::\n\n- Make sure you open port `6180` (or `6182`, for example, depending on which port your node is listening to) and that you open your firewall.\n- If you are using Docker, simply add `- \"6180:6180\"` or `- \"6182:6182\"` under ports in your ``docker-compose.yaml`` file.\n- Share your fullnode static network identity with others. They can then use it in the `seeds` key of their `fullnode.yaml` file to connect to your fullnode. See the section below.\n- Make sure the port number you put in the `addresses` matches the one you have in the fullnode configuration file `fullnode.yaml` (for example, `6180` or `6182`).\n\nShare your fullnode static network identity in the following format in our Discord to advertise your node.\nNote, the Discord channel to share your identity may differ depending on the blockchain deployment you're running in.\nSee Aptos Blockchain Deployments for more information.\n\n  ```yaml\n  :\n    addresses:\n    # with DNS\n    - \"/dns4//tcp//noise-ik//handshake/0\"\n    role: Upstream\n  :\n    addresses:\n    # with IP\n    - \"/ip4//tcp//noise-ik//handshake/0\"\n    role: Upstream\n  ```\n\nFor example:\n\n  ```yaml\n  B881EA2C174D8211C123E5A91D86227DB116A44BB345A6E66874F83D8993F813:\n    addresses:\n    - \"/dns4/pfn0.node.devnet.aptoslabs.com/tcp/6182/noise-ik/B881EA2C174D8211C123E5A91D86227DB116A44BB345A6E66874F83D8993F813/handshake/0\"\n    role: \"Upstream\"\n  B881EA2C174D8211C123E5A91D86227DB116A44BB345A6E66874F83D8993F813:\n    addresses:\n    - \"/ip4/100.20.221.187/tcp/6182/noise-ik/B881EA2C174D8211C123E5A91D86227DB116A44BB345A6E66874F83D8993F813/handshake/0\"\n    role: \"Upstream\"\n  ```\n\n:::tip\n\nPeer ID is synonymous with `AccountAddress`.\n\n:::\n\n", "doc_id": "00c05512-3063-4296-ac94-f4a6556718a4", "embedding": null, "doc_hash": "b4b7156ed39d161223a8d24deee96786c840f244f8bf42811a3449d00fec423e", "extra_info": null, "node_info": {"start": 0, "end": 2186, "_node_type": "1"}, "relationships": {"1": "50d566b9-ea78-433d-94d4-9735c1fea515"}}, "__type__": "1"}, "a205db22-a30b-4b00-839e-e5f1f28b8e42": {"__data__": {"text": "\n\nConnecting your fullnode to an Aptos blockchain deployment\n\nWhen running a fullnode on an Aptos blockchain deployment, your node will be\nable to discover other nodes in the network automatically, e.g., using the\ngenesis blob or the network addresses of the validators and validator fullnodes\nregistered on the blockchain. Be sure to download the correct genesis blob and\nwaypoint for your fullnode to ensure your node connects to the correct Aptos\nblockchain deployment. See Aptos Blockchain Deployments\nfor more information.\n\n", "doc_id": "a205db22-a30b-4b00-839e-e5f1f28b8e42", "embedding": null, "doc_hash": "3d53656d571f44c589c88a0b5a99e967f2e9704231458871f50cb060a123b207", "extra_info": null, "node_info": {"start": 0, "end": 529, "_node_type": "1"}, "relationships": {"1": "d8f4db3e-05a8-46e3-b2b9-dcbe62e265ce"}}, "__type__": "1"}, "359bc7e1-c368-4ac0-a510-b9bc3d0dc4d1": {"__data__": {"text": "\n\nConnecting your fullnode to seed peers\n\nAll Aptos fullnodes are configured to accept a maximum number of network\nconnections. As a result, if the network is experiencing high network\nconnection volume, your fullnode might not able to connect to the default\nnodes in the network and you may see several errors in your node's logs, e.g.,\n`No connected AptosNet peers!` or `Unable to fetch peers to poll!`.\n\nIf this happens continuously, you should manually add seed peers to your node's\nconfiguration file to connect to other nodes.\n\n:::tip\n\nYou may see `No connected AptosNet peers!` or `Unable to fetch peers to poll!` in your node's error messages. This is normal when the node is first starting.\nWait for the node to run for a few minutes to see if it connects to peers. If not, follow the below steps:\n\n:::\n\nSee below for a few seed peer addresses you can use in your\n`public_full_node.yaml` file. The peers you choose will differ based on the\nblockchain deployment your node is running in.\n\n:::tip\n\nYou can also use the fullnode addresses provided by the Aptos community. Anyone already running a fullnode can provide their address for you to connect. See the Aptos Discord.\n\n:::\n\n\n", "doc_id": "359bc7e1-c368-4ac0-a510-b9bc3d0dc4d1", "embedding": null, "doc_hash": "0b877b1bc8ffc3527af0f6f4775d178d20fc7224b0fe389004651abe80653f18", "extra_info": null, "node_info": {"start": 0, "end": 1188, "_node_type": "1"}, "relationships": {"1": "4f7111d0-ef37-4df3-b8d9-82e8a971e408"}}, "__type__": "1"}, "c48442e6-7ddd-43e6-a695-bca2be191a0e": {"__data__": {"text": "\n\nDevnet seed peers\n\nTo add seeds to your devnet fullnode, add these to your `public_full_node.yaml` configuration file under your `discovery_method`, as shown in the below example:\n\n```yaml\n...\nfull_node_networks:\n    - discovery_method: \"onchain\"\n      listen_address: ...\n      seeds: # All seeds are declared below\n        bb14af025d226288a3488b4433cf5cb54d6a710365a2d95ac6ffbd9b9198a86a:\n            addresses:\n            - \"/dns4/pfn0.node.devnet.aptoslabs.com/tcp/6182/noise-ik/bb14af025d226288a3488b4433cf5cb54d6a710365a2d95ac6ffbd9b9198a86a/handshake/0\"\n            role: \"Upstream\"\n        7fe8523388084607cdf78ff40e3e717652173b436ae1809df4a5fcfc67f8fc61:\n            addresses:\n            - \"/dns4/pfn1.node.devnet.aptoslabs.com/tcp/6182/noise-ik/7fe8523388084607cdf78ff40e3e717652173b436ae1809df4a5fcfc67f8fc61/handshake/0\"\n            role: \"Upstream\"\n        f6b135a59591677afc98168791551a0a476222516fdc55869d2b649c614d965b:\n            addresses:\n            - \"/dns4/pfn2.node.devnet.aptoslabs.com/tcp/6182/noise-ik/f6b135a59591677afc98168791551a0a476222516fdc55869d2b649c614d965b/handshake/0\"\n            role: \"Upstream\"\n...\n```\n\n", "doc_id": "c48442e6-7ddd-43e6-a695-bca2be191a0e", "embedding": null, "doc_hash": "2eaed2e068f5c089b3d72a40ddf431ecbb47929e0c0578009f8290abb3c967c4", "extra_info": null, "node_info": {"start": 0, "end": 1150, "_node_type": "1"}, "relationships": {"1": "58c35991-7b06-4566-8f52-2106b0c0a7f0"}}, "__type__": "1"}, "73ebb19f-02ae-4215-91ab-55cad4256c7d": {"__data__": {"text": "\n\nConfiguring priority access for other fullnodes\n\nTo configure your fullnode to allow another fullnode to connect to it even\nwhen your fullnode has hit the maximum number of available network connections,\nfollow this method:\n\nIn the configuration file for your fullnode add the other fullnode as a seed\npeer with the `Downstream` role. This will allow the other fullnode to connect\ndirectly to you with priority access. In your fullnode configuration file, add:\n```yaml\nseeds:\n  \n    addresses:\n    - \n    role: Downstream # Allows the node to connect to us\n```\n\nSimilarly, to make the other fullnode connect to yours, add the following to the\nother fullnode's configuration file:\n```yaml\nseeds:\n  \n    addresses:\n    - \n    role: PreferredUpstream # Allows the node to connect to the seed peer\n```\n\n", "doc_id": "73ebb19f-02ae-4215-91ab-55cad4256c7d", "embedding": null, "doc_hash": "336dd03e5399225db3874d67bdc8a8cd0cbe645679a0bd2199c22c4b25a31430", "extra_info": null, "node_info": {"start": 0, "end": 801, "_node_type": "1"}, "relationships": {"1": "501ea9ec-9900-47f3-843c-2258807b4558"}}, "__type__": "1"}, "ebb61b8b-c6ab-4f90-bd0f-3e790d349b0b": {"__data__": {"text": "\n\nConfiguring your fullnode as a private fullnode\n\nYou can also configure your fullnode as a private fullnode should you wish.\nWhat this means is that your fullnode will not allow unauthenticated\nconnections, specifically, any node that is not a validator, validator\nfullnode, or seed peer will be unable to connect to your fullnode.\n\nTo configure your fullnode as a private fullnode, add the following to your\nfullnode configuration file. Note, you should add this to the first network\nentry in the `full_node_networks` configuration:\n\n```yaml\n...\nfull_node_networks:\n  - discovery_method: \"onchain\"\n    listen_address: ...\n    max_inbound_connections: 0  # Prevents any unauthenticated inbound connections\n    mutual_authentication: true  # Requires authenticated connections\n    ...\n...\n```\n\n", "doc_id": "ebb61b8b-c6ab-4f90-bd0f-3e790d349b0b", "embedding": null, "doc_hash": "a754a51fe724e9d8e8cc3fa6dfb6cd334b02ad5b8ccc486210c3f67f290f0460", "extra_info": null, "node_info": {"start": 0, "end": 795, "_node_type": "1"}, "relationships": {"1": "585619e0-a7c8-4b30-b022-a0b0c48dff01"}}, "__type__": "1"}, "bd5fdac4-3a89-4b92-b7ae-037d10197f44": {"__data__": {"text": "\n\nRun a Public Fullnode with the Aptos Source Code or Docker\n\nYou can run your own public fullnode to synchronize with the state of the Aptos blockchain and stay up-to-date. Public fullnodes replicate the entire state of the blockchain by querying other Aptos fullnodes (public fullnodes or validator fullnodes) or validators.\n\nAlternatively, you can use the public fullnodes provided by Aptos Labs. However, such Aptos Labs-provided public fullnodes have rate limits, which can impede your development. By running your own public fullnode you can directly synchronize with the Aptos blockchain and avoid such rate limits.\n\nPublic fullnodes can be run by anyone. This tutorial explains how to configure a public fullnode to connect to an Aptos network.\n\n:::caution Choose a network\nThis document describes how to start a public fullnode in the Aptos `mainnet` network yet can easily be used to do the same in the `devnet` and `testnet` networks. To do so, instead check out the desired branch and use the `genesis.blob` and `waypoint.txt` node files for the respective branch: `mainnet`, `devnet`, and `testnet`.\n:::\n\n", "doc_id": "bd5fdac4-3a89-4b92-b7ae-037d10197f44", "embedding": null, "doc_hash": "c25d09420a033c88423b1e4896fc5099bab4b26506f77af06b43ec6f800070db", "extra_info": null, "node_info": {"start": 0, "end": 1118, "_node_type": "1"}, "relationships": {"1": "17fb7561-8789-4797-88fa-cdd7f993897e"}}, "__type__": "1"}, "4e8d6785-f25e-4e77-91cc-9753a87dacc8": {"__data__": {"text": "\n\nHardware requirements\n\nWe recommend the following hardware resources:\n\n- For running a production grade public fullnode:\n\n  - **CPU**: 8 cores, 16 threads (Intel Xeon Skylake or newer).\n  - **Memory**: 32GB RAM.\n\n- For running the public fullnode for development or testing:\n\n  - **CPU**: 2 cores.\n  - **Memory**: 4GB RAM.\n\n", "doc_id": "4e8d6785-f25e-4e77-91cc-9753a87dacc8", "embedding": null, "doc_hash": "ba178f00c21959d70b1e8a024104c561d4f3885c554c67796e9b2b2bf42ccb3a", "extra_info": null, "node_info": {"start": 0, "end": 326, "_node_type": "1"}, "relationships": {"1": "79402688-9c9f-4789-a9bf-5b91203e8cfe"}}, "__type__": "1"}, "cc55e1e1-ed2d-4fad-8b87-6b12a5600d0f": {"__data__": {"text": "\n\nStorage requirements\n\nThe amount of data stored by Aptos depends on the ledger history (length) of the blockchain and the number of on-chain states (e.g., accounts). These values depend on several factors, including: the age of the blockchain, the average transaction rate and the configuration of the ledger pruner. Follow the storage requirements described in Validator Hardware Requirements. \n\n:::tip Devnet blockchain storage\nThe Aptos devnet is currently reset on a weekly basis. Hence we estimate that if you are connecting to the devnet, then the Aptos blockchain will not require more than several GBs of storage. See the `#devnet-release` channel on Aptos Discord.\n:::\n\n", "doc_id": "cc55e1e1-ed2d-4fad-8b87-6b12a5600d0f", "embedding": null, "doc_hash": "4b98122f30936f82ecca459fe2b5706b108f90143edf773a84b4ad82887e30e4", "extra_info": null, "node_info": {"start": 0, "end": 681, "_node_type": "1"}, "relationships": {"1": "7a2781af-9f18-44d0-a9c7-5d77b171d346"}}, "__type__": "1"}, "f0da0a60-da81-46dc-b07a-bf2bcca188f5": {"__data__": {"text": "\n\nConfiguring a public fullnode\n\nYou can configure a public fullnode in one of two ways:\n\n1. Building and running aptos-core from source code.\n2. Using Docker.\n\nThis document describes how to configure your public fullnode using both methods.\n\n", "doc_id": "f0da0a60-da81-46dc-b07a-bf2bcca188f5", "embedding": null, "doc_hash": "9e99ade08a27dd54e692419eaff7ba12cc856e72be6b02daa5badb7cc4f179cb", "extra_info": null, "node_info": {"start": 0, "end": 244, "_node_type": "1"}, "relationships": {"1": "71746638-73df-42d3-bddf-868718d83a84"}}, "__type__": "1"}, "5b591a44-78a0-4cf5-aa5a-017b321d55da": {"__data__": {"text": "\n\nMethod 1: Building and running from source\n\nSee Building Aptos From Source\n\n1. Check out the `mainnet` branch using `git checkout --track origin/mainnet`; remember, you may instead use `devnet` or `testnet`.\n\n1. Make sure your current working directory is `aptos-core`.\n\n   Run:\n   ```bash\n   cp config/src/config/test_data/public_full_node.yaml fullnode.yaml\n   ```\n   to create a copy of the public fullnode configuration YAML template. You will edit this file to ensure that your public fullnode:\n\n    - Contains the correct genesis blob that is published by the Aptos mainnet.\n    - Synchronizes correctly with the mainnet, by using the checkpoint file `waypoint.txt` published by the mainnet. \n    - Stores the mainnet database at a location of your choice on your local machine.\n\n1. Make sure your current working directory is `aptos-core`. The Aptos mainnet publishes the `genesis.blob` and `waypoint.txt` files. Download them:\n\n    - Run the below command on your terminal to download the file:\n      ```bash\n      curl -O https://raw.githubusercontent.com/aptos-labs/aptos-networks/main/mainnet/genesis.blob\n      ```\n\n    - Run the below command on your terminal to download the file:\n      ```bash\n      curl -O https://raw.githubusercontent.com/aptos-labs/aptos-networks/main/mainnet/waypoint.txt\n      ```\n  \n    :::caution Don't want to connect to mainnet?\n    To connect to other networks (e.g., `devnet` and `testnet`), you can find genesis and waypoint here \u279c https://github.com/aptos-labs/aptos-networks.\n    Be sure to download the `genesis.blob` and `waypoint.txt` for those networks, instead of using the genesis\n    and waypoint pointed to by the `curl` commands above.\n    :::\n\n1. Edit the `fullnode.yaml` file in your current working directory as follows.\n\n    - Specify the correct path to the `waypoint.txt` you just downloaded by editing the `base.waypoint.from_file` in the `fullnode.yaml`. By default it points to `waypoint.txt` in the current working directory.\n\n    For example:\n      ```yaml\n      base:\n        waypoint:\n          from_file: \"./waypoint.txt\"\n      ```\n\n    - For the `genesis_file_location` key, provide the full path to the `genesis.blob` file. For example:\n\n      ```yaml\n      genesis_file_location: \"./genesis.blob\"\n      ```\n\n    - For the `data_dir` key in the `base` list, specify the directory where on your local computer you want to store the devnet database. This can be anywhere on your computer. For example, you can create a directory `my-full-node/data` in your home directory and specify it as:\n\n      ```yaml\n      data_dir: \"\"\n      ```\n\n1. Start your local public fullnode by running the below command:\n\n  ```bash\n  cargo run -p aptos-node --release -- -f ./fullnode.yaml\n  ```\n\nYou have now successfully configured and started running a fullnode connected to Aptos devnet.\n\n:::tip Debugging?\nThis will build a release binary: `aptos-core/target/release/aptos-node`. The release binaries tend to be substantially faster than debug binaries but lack debugging information useful for development. To build a debug binary,", "doc_id": "5b591a44-78a0-4cf5-aa5a-017b321d55da", "embedding": null, "doc_hash": "df8dc49a016debe4111c3464c0eb025e94bfada174fd9d94618e2a21fcf7f045", "extra_info": null, "node_info": {"start": 0, "end": 3090, "_node_type": "1"}, "relationships": {"1": "b47cc354-d05d-4764-9aa4-966d1c68f1b8", "3": "040d8fd2-759c-44f9-afe2-7d74802759e2"}}, "__type__": "1"}, "040d8fd2-759c-44f9-afe2-7d74802759e2": {"__data__": {"text": "debug binaries but lack debugging information useful for development. To build a debug binary, omit the `--release` flag.\n\nYou can also run this directly as `./aptos-core/target/release/aptos-node -f ./fullnode.yaml` after running `cargo build -p aptos-node --release`\n:::\n\n---\n\n", "doc_id": "040d8fd2-759c-44f9-afe2-7d74802759e2", "embedding": null, "doc_hash": "60f8e99434e25d4e2c1aa7f22cc80a252bd352e9a90e928a38b6dd39adfa29c0", "extra_info": null, "node_info": {"start": 2996, "end": 3275, "_node_type": "1"}, "relationships": {"1": "b47cc354-d05d-4764-9aa4-966d1c68f1b8", "2": "5b591a44-78a0-4cf5-aa5a-017b321d55da"}}, "__type__": "1"}, "69b9e15b-4f34-40b3-b2bd-9f26032ad67a": {"__data__": {"text": "\n\nMethod 2: Using Docker\n\nThis section describes how to configure and run your public fullnode using Docker.\n\n:::danger Supported only on x86-64 CPUs\nRunning Aptos-core via Docker is currently only supported on x86-64 CPUs. If you have an Apple M1/M2 (ARM64) Mac, use the Aptos-core source approach. If M1/M2 support is important to you, comment on this issue: https://github.com/aptos-labs/aptos-core/issues/1412\n:::\n\n1. Install Docker.\n2. Run the following script to prepare your local configuration and data directory for mainnet:\n```bash\nmkdir mainnet && cd mainnet\nmkdir data && \\\ncurl -O https://raw.githubusercontent.com/aptos-labs/aptos-core/mainnet/docker/compose/aptos-node/fullnode.yaml && \\\ncurl -O https://raw.githubusercontent.com/aptos-labs/aptos-networks/main/mainnet/waypoint.txt && \\\ncurl -O https://raw.githubusercontent.com/aptos-labs/aptos-networks/main/mainnet/genesis.blob\n```\n\n3. Make sure that the `fullnode.yaml` configuration file that you downloaded contains only the following configuration content. This will ensure that this configuration is for public fullnode and not for either a validator node or a validator fullnode:\n\n```yaml\nbase:\n  role: \"full_node\"\n  data_dir: \"/opt/aptos/data\"\n  waypoint:\n    from_file: \"/opt/aptos/etc/waypoint.txt\"\n\nexecution:\n  genesis_file_location: \"/opt/aptos/etc/genesis.blob\"\n\nfull_node_networks:\n- network_id: \"public\"\n  discovery_method: \"onchain\"\n  listen_address: \"/ip4/0.0.0.0/tcp/6182\"\n\napi:\n  enabled: true\n  address: \"0.0.0.0:8080\"\n```\n\n**NOTE**: Set `listen_address: \"/ip4/127.0.0.1/tcp/6182\"` if you do not want other full nodes connecting to yours. Also see the below note.\n\n4. Run the below `docker` command. **NOTE** the `mainnet` tag always refers to the latest official Docker image tag. You can find the latest hash for comparison at:\nhttps://github.com/aptos-labs/aptos-networks/tree/main/mainnet\n\n```bash\ndocker run --pull=always \\\n    --rm -p 8080:8080 \\\n    -p 9101:9101 -p 6180:6180 \\\n    -v $(pwd):/opt/aptos/etc -v $(pwd)/data:/opt/aptos/data \\\n    --workdir /opt/aptos/etc \\\n    --name=aptos-fullnode aptoslabs/validator:mainnet aptos-node \\\n    -f /opt/aptos/etc/fullnode.yaml\n```\n\n**NOTE**: You may need to prefix the command with `sudo` depending on your configuration\n\n**NOTE**: Ensure you have opened the relevant ports: 8080, 9101 and 6180. You may also need to update the 127.0.0.1 with 0.0.0.0 in the `fullnode.yaml` for the fields `listen_address` and `address` field in the `api` list.\n\n:::caution Don't want to connect to mainnet?\nTo connect to other networks (e.g., `devnet` and `testnet`), you can find genesis and waypoint here \u279c https://github.com/aptos-labs/aptos-networks.\nBe sure to download the `genesis.blob` and `waypoint.txt` for those networks, instead of using the genesis\nand waypoint pointed to by the `curl` commands above.\n:::\n\nEnsure you have", "doc_id": "69b9e15b-4f34-40b3-b2bd-9f26032ad67a", "embedding": null, "doc_hash": "a59cb3d2fbfc690346fa128dcaf3a74ea5a4221ff2374af36777cdec88cfba15", "extra_info": null, "node_info": {"start": 0, "end": 2862, "_node_type": "1"}, "relationships": {"1": "c26f8528-d784-4716-9157-2ac564ab3f68", "3": "f5249563-ff07-4f3c-944e-64f1145d5801"}}, "__type__": "1"}, "f5249563-ff07-4f3c-944e-64f1145d5801": {"__data__": {"text": "to by the `curl` commands above.\n:::\n\nEnsure you have opened the relevant ports: 8080, 9101 and 6180. You may also need to update the 127.0.0.1 with 0.0.0.0 in the `fullnode.yaml` for the fields `listen_address` and `address` field in the `api` list.\n\n", "doc_id": "f5249563-ff07-4f3c-944e-64f1145d5801", "embedding": null, "doc_hash": "e1bc5148a57162f77a9594199bf4a7d363ef5a22122d8c0e499f624ed3cd0190", "extra_info": null, "node_info": {"start": 2809, "end": 3061, "_node_type": "1"}, "relationships": {"1": "c26f8528-d784-4716-9157-2ac564ab3f68", "2": "69b9e15b-4f34-40b3-b2bd-9f26032ad67a"}}, "__type__": "1"}, "fbf42b81-aa4c-4965-9456-8475b073a225": {"__data__": {"text": "\n\nVerify the correctness of your public fullnode\n\n", "doc_id": "fbf42b81-aa4c-4965-9456-8475b073a225", "embedding": null, "doc_hash": "128c99e7897463cca5a745620d6f4b8f55df146070c46f670f1d0ab3c38c29c5", "extra_info": null, "node_info": {"start": 0, "end": 50, "_node_type": "1"}, "relationships": {"1": "1da5111e-fa03-4c85-bb34-ca61e862500b"}}, "__type__": "1"}, "19f2a03d-a54b-4941-ab45-bd1dce31b35e": {"__data__": {"text": "\n\nVerify initial synchronization\n\nDuring the initial synchronization of your public fullnode, there may be a lot of data to transfer. You can monitor the progress by querying the metrics port to see what version your node is currently synced to. Run the following command to see the current synced version of your node:\n\n```bash\ncurl 127.0.0.1:9101/metrics 2> /dev/null | grep \"aptos_state_sync_version{.*\\\"synced\\\"}\" | awk '{print $2}'\n```\n\nThe command will output the current synced version of your node. For example:\n\n```bash\n71000\n```\n\nCompare the synced version returned by this command (e.g., `71000`) with the highest version shown on the\nAptos explorer page. If your node is catching up to the highest version, it is synchronizing correctly.\n\n:::tip\nIt is fine if the explorer page differs by a few versions, as the explorer nodes may sync with some variance.\n:::\n\n", "doc_id": "19f2a03d-a54b-4941-ab45-bd1dce31b35e", "embedding": null, "doc_hash": "4f27c2f48044176b514982d22b94af78e2c87274b87a083535b4b519c0fbcf6d", "extra_info": null, "node_info": {"start": 0, "end": 873, "_node_type": "1"}, "relationships": {"1": "cea92d82-b95c-4e0b-8ad2-b36ce8e4445b"}}, "__type__": "1"}, "85c6c288-a334-494f-9d31-04893cf5f8d7": {"__data__": {"text": "\n\n(Optional) Verify outbound network connections\n\nOptionally, you can check the output network connections. The number of outbound network connections should be more than `0`. Run the following command:\n\n```bash\ncurl 127.0.0.1:9101/metrics 2> /dev/null | grep \"aptos_connections{direction=\\\"outbound\\\"\"\n```\n\nThe above command will output the number of outbound network connections for your node. For example:\n\n```bash\ncurl 127.0.0.1:9101/metrics 2> /dev/null | grep \"aptos_connections{direction=\\\"outbound\\\"\"\naptos_connections{direction=\"outbound\",network_id=\"Public\",peer_id=\"aabd651f\",role_type=\"full_node\"} 3\n```\n\nIf the number of outbound connections returned is `0`, then it means your node cannot connect to the Aptos blockchain. If this happens to you, follow these steps to resolve the issue:\n\n1. Update your node to the latest release by following the Update Fullnode With New Devnet Releases.\n2. Remove any `seed` peers you may have added to your `public_full_node.yaml` configuration file. The seeds may be preventing you from connecting to the network. Seed peers are discussed in the [Connecting your fullnode to seed peers](./fullnode-network-connections.md#connecting-your-fullnode-to-seed-peers section.\n\n", "doc_id": "85c6c288-a334-494f-9d31-04893cf5f8d7", "embedding": null, "doc_hash": "5bdf757e3ac81a53417b21a701dac0a42de01dbd33050081a28cdfe91c909505", "extra_info": null, "node_info": {"start": 0, "end": 1221, "_node_type": "1"}, "relationships": {"1": "c0373184-b4a5-49b4-a780-f6174b48448a"}}, "__type__": "1"}, "c1f45f79-49be-42eb-b8ae-fea7e01f17fc": {"__data__": {"text": "\n\n(Optional) Examine Docker ledger size\n\nThe blockchain ledger's volume for Aptos devnet can be monitored by entering the Docker container ID and checking the size.\nThis will allow you to see how much storage the blockchain ledger is currently consuming.\n\n- First, run `docker container ls` on your terminal and copy the NAME field output. This will be a string similar to `public_full_node_fullnode_1`.\n- Next, run these commands to check the storage size consumed by the ledger, using the NAME field you copied over in place of `public_full_node_fullnode_1`:\n\n```bash\n", "doc_id": "c1f45f79-49be-42eb-b8ae-fea7e01f17fc", "embedding": null, "doc_hash": "76341c9e97dbeed2fbe0e3fa446310467a1cb8cd61dae162bef0c00b278c9f97", "extra_info": null, "node_info": {"start": 0, "end": 570, "_node_type": "1"}, "relationships": {"1": "f3786976-cf69-4179-81eb-9cfb59da5246"}}, "__type__": "1"}, "e3aaa1f3-0aa0-4438-b28b-c4a05701f674": {"__data__": {"text": "\n\nObtain the container ID:\nid=$(docker container ls | grep public_full_node_fullnode_1 | grep -oE \"^[0-9a-zA-Z]+\")\n", "doc_id": "e3aaa1f3-0aa0-4438-b28b-c4a05701f674", "embedding": null, "doc_hash": "ddd9658e6a2f585f384ba08c68fe38ca83a4ce656fb19e218ba5d4defa93cd7e", "extra_info": null, "node_info": {"start": 0, "end": 115, "_node_type": "1"}, "relationships": {"1": "7ef81e8f-e17c-449f-8d45-058bfdaf7b98"}}, "__type__": "1"}, "2cee5a43-8843-4b71-a7a0-c94d5636ff6b": {"__data__": {"text": "\n\nEnter the container:\ndocker exec -it $id /bin/bash\n", "doc_id": "2cee5a43-8843-4b71-a7a0-c94d5636ff6b", "embedding": null, "doc_hash": "fde96a08507749c1606d9620344510b494817b9e9a469ff5c6746ff1ede1c662", "extra_info": null, "node_info": {"start": 0, "end": 53, "_node_type": "1"}, "relationships": {"1": "d94921ae-3fa6-4e90-b875-066dd3aa4641"}}, "__type__": "1"}, "3898940d-741f-4c2a-bbdb-2539f7523e80": {"__data__": {"text": "\n\nObserve the volume (ledger) size:\ndu -cs -BM /opt/aptos/data\n```\n\n[rest_spec]: https://github.com/aptos-labs/aptos-core/tree/main/api\n[devnet_genesis]: https://devnet.aptoslabs.com/genesis.blob\n[devnet_waypoint]: https://devnet.aptoslabs.com/waypoint.txt\n[aptos-labs/aptos-core]: https://github.com/aptos-labs/aptos-core.git\n[status dashboard]: https://status.devnet.aptos.dev\n\n", "doc_id": "3898940d-741f-4c2a-bbdb-2539f7523e80", "embedding": null, "doc_hash": "99a998996f1676478eccf236e61fb73961b7fb12c8f75eb7ff7a4ad6dc19b0fe", "extra_info": null, "node_info": {"start": 0, "end": 380, "_node_type": "1"}, "relationships": {"1": "17ecf579-a533-4c9a-8ce7-6c2498102b76"}}, "__type__": "1"}, "8ffb8816-f9f5-45c3-86d1-02f8de2f6342": {"__data__": {"text": "\n\nUpgrade your public fullnode\n\nWhen receiving an update from Aptos for your fullnode, take these measures to minimize downtime. In all cases, you are essentially undoing setup and restarting anew. So first make sure your development environment is up to date.\n\n", "doc_id": "8ffb8816-f9f5-45c3-86d1-02f8de2f6342", "embedding": null, "doc_hash": "ea09bd3ac604d60161d7fc84308b406719b90377e56d171662da5efea4f62017", "extra_info": null, "node_info": {"start": 0, "end": 262, "_node_type": "1"}, "relationships": {"1": "e78a337b-e8ed-4ea5-84e3-c6eaded79cb6"}}, "__type__": "1"}, "da64bfa2-c9bb-4bfc-b266-1b17f1b1dbcc": {"__data__": {"text": "\n\nUpgrading from source\n\nIf you created your Aptos fullnode from source, you should similarly upgrade from source:\n1. Stop your local public fullnode by running the below command:\n  ```bash\n  cargo stop aptos-node\n  ```\n1. Delete the `waypoint.txt`, `genesis.blob` and `fullnode.yaml` files previously downloaded, installed and configured.\n1. Re-install and configure those files as during setup.\n1. Restart your local public fullnode by running the same start (`run`) command as before:\n  ```bash\n  cargo run -p aptos-node --release -- -f ./fullnode.yaml\n  ```\n\n  ### Upgrading with Docker\n\n  If you created your Aptos fullnode with Docker, you should similarly upgrade with Docker:\n  1. Stop your local public fullnode by running the below command:\n    ```bash\n    docker-compose down --volumes\n    ```\n  1. Delete the `waypoint.txt`, `genesis.blob` and `fullnode.yaml` files previously downloaded, installed and configured.\n  1. Re-install and configure those files as during setup.\n  1. Restart your local public fullnode by running the same start (`run`) command as before:\n  ```bash\n  docker run --pull=always \\\n      --rm -p 8080:8080 \\\n      -p 9101:9101 -p 6180:6180 \\\n      -v $(pwd):/opt/aptos/etc -v $(pwd)/data:/opt/aptos/data \\\n      --workdir /opt/aptos/etc \\\n      --name=aptos-fullnode aptoslabs/validator:mainnet aptos-node \\\n      -f /opt/aptos/etc/fullnode.yaml\n  ```\n\n", "doc_id": "da64bfa2-c9bb-4bfc-b266-1b17f1b1dbcc", "embedding": null, "doc_hash": "1cebc2d4f13fc888f5e9de13480f4dc4280a057b5f17bf9adff49e2643f323d1", "extra_info": null, "node_info": {"start": 0, "end": 1389, "_node_type": "1"}, "relationships": {"1": "312feb7a-b11c-4749-9151-3d6813321e91"}}, "__type__": "1"}, "989b9e06-76b3-40fe-b020-5a68311df825": {"__data__": {"text": "\n\nOverview\n\nFullnodes can be run by anyone. Fullnodes re-execute all transactions in the history of the Aptos blockchain. Fullnodes replicate the entire state of the blockchain by synchronizing with upstream participants, e.g., other fullnodes or validator nodes. To verify blockchain state, fullnodes receive the set of transactions and the accumulator hash root of the ledger signed by the validators. In addition, fullnodes accept transactions submitted by Aptos clients and forward them directly (or indirectly) to validator nodes. While fullnodes and validators share the same code, fullnodes do not participate in consensus.\n\nDepending on the fullnode upstream, a fullnode can be called as a validator fullnode, or a public fullnode:\n* **Validator fullnode** state sync from a validator node directly.\n* **Public fullnode** state sync from other fullnodes.\n\nThere's no difference in their functionality, only whether their upstream node is a validator or another fullnode. Read more details about network topology here\n\nThird-party blockchain explorers, wallets, exchanges, and DApps may run a local fullnode to:\n* Leverage the REST interface for blockchain interactions.\n* Get a consistent view of the Aptos ledger.\n* Avoid rate limitations on read traffic.\n* Run custom analytics on historical data.\n* Get notifications about particular on-chain events.\n\n", "doc_id": "989b9e06-76b3-40fe-b020-5a68311df825", "embedding": null, "doc_hash": "f8a3461f99ab22b84e0845ec8457c0e189c14709018d9a9794c2aed318b39c58", "extra_info": null, "node_info": {"start": 0, "end": 1363, "_node_type": "1"}, "relationships": {"1": "a865d300-edcd-4f5e-b0e2-79c886a203bd"}}, "__type__": "1"}, "628cb332-f563-4620-902b-4fee9465c0a5": {"__data__": {"text": "\n\nFunctions\n\nFunction syntax in Move is shared between module functions and script functions. Functions inside of modules are reusable, whereas script functions are only used once to invoke a transaction.\n\n", "doc_id": "628cb332-f563-4620-902b-4fee9465c0a5", "embedding": null, "doc_hash": "788e317255db7e53469b288dbaa8647d736fcb6c4f2a82633af930c3d0527981", "extra_info": null, "node_info": {"start": 0, "end": 206, "_node_type": "1"}, "relationships": {"1": "78f6e9f2-7fb5-474d-a1b2-23ef03347e35"}}, "__type__": "1"}, "2cc8224d-d522-4ae1-82d2-61b51be6776b": {"__data__": {"text": "\n\nDeclaration\n\nFunctions are declared with the `fun` keyword followed by the function name, type parameters, parameters, a return type, acquires annotations, and finally the function body.\n\n```text\nfun ([identifier: type],*):   \n```\n\nFor example\n\n```move\nfun foo(x: u64, y: T1, z: T2): (T2, T1, u64) { (z, y, x) }\n```\n\n", "doc_id": "2cc8224d-d522-4ae1-82d2-61b51be6776b", "embedding": null, "doc_hash": "74cd4cf71daceb314951057e17354738cefeca06f7a0c910fbbd0f6ee7adccd5", "extra_info": null, "node_info": {"start": 0, "end": 319, "_node_type": "1"}, "relationships": {"1": "c7c18e67-b3d5-4cfa-9498-38e42a09e341"}}, "__type__": "1"}, "6895aac4-b5c7-4e44-ad89-062a95637f16": {"__data__": {"text": "\n\nVisibility\n\nModule functions, by default, can only be called within the same module. These internal (sometimes called private) functions cannot be called from other modules or from scripts.\n\n```move=\naddress 0x42 {\nmodule m {\n    fun foo(): u64 { 0 }\n    fun calls_foo(): u64 { foo() } // valid\n}\n\nmodule other {\n    fun calls_m_foo(): u64 {\n        0x42::m::foo() // ERROR!\n//      ^^^^^^^^^^^^ 'foo' is internal to '0x42::m'\n    }\n}\n}\n\nscript {\n    fun calls_m_foo(): u64 {\n        0x42::m::foo() // ERROR!\n//      ^^^^^^^^^^^^ 'foo' is internal to '0x42::m'\n    }\n}\n```\n\nTo allow access from other modules or from scripts, the function must be declared `public` or `public(friend)`.\n\n", "doc_id": "6895aac4-b5c7-4e44-ad89-062a95637f16", "embedding": null, "doc_hash": "10f1a5a4ee25dea3f9e44bdcbb40084292af94be294539410fcac2dd3f13c0a7", "extra_info": null, "node_info": {"start": 0, "end": 689, "_node_type": "1"}, "relationships": {"1": "0b9798df-553b-444d-baf7-48f84f4dd84c"}}, "__type__": "1"}, "1f056ba7-2a2d-4a5e-b805-b1232878f4e0": {"__data__": {"text": "\n\n`public` visibility\n\nA `public` function can be called by *any* function defined in *any* module or script. As shown in the following example, a `public` function can be called by:\n- other functions defined in the same module,\n- functions defined in another module, or\n- the function defined in a script.\n\nThere are also no restrictions for what the argument types a public function can take and its return type.\n\n```move=\naddress 0x42 {\nmodule m {\n    public fun foo(): u64 { 0 }\n    fun calls_foo(): u64 { foo() } // valid\n}\n\nmodule other {\n    fun calls_m_foo(): u64 {\n        0x42::m::foo() // valid\n    }\n}\n}\n\nscript {\n    fun calls_m_foo(): u64 {\n        0x42::m::foo() // valid\n    }\n}\n```\n\n", "doc_id": "1f056ba7-2a2d-4a5e-b805-b1232878f4e0", "embedding": null, "doc_hash": "23f8f077f4486efc282dc6b38b1fac7a17b65fd06d8df4a20fa4a00b1e44aeeb", "extra_info": null, "node_info": {"start": 0, "end": 700, "_node_type": "1"}, "relationships": {"1": "06786b1f-481c-46c8-b316-2803cc49276b"}}, "__type__": "1"}, "204c9bb0-1ab8-48bc-82ff-61a80a786d98": {"__data__": {"text": "\n\n`public(friend)` visibility\n\nThe `public(friend)` visibility modifier is a more restricted form of the `public` modifier to give more control about where a function can be used. A `public(friend)` function can be called by:\n- other functions defined in the same module, or\n- functions defined in modules which are explicitly specified in the **friend list** (see Friends on how to specify the friend list).\n\nNote that since we cannot declare a script to be a friend of a module, the functions defined in scripts can never call a `public(friend)` function.\n\n```move=\naddress 0x42 {\nmodule m {\n    friend 0x42::n;  // friend declaration\n    public(friend) fun foo(): u64 { 0 }\n    fun calls_foo(): u64 { foo() } // valid\n}\n\nmodule n {\n    fun calls_m_foo(): u64 {\n        0x42::m::foo() // valid\n    }\n}\n\nmodule other {\n    fun calls_m_foo(): u64 {\n        0x42::m::foo() // ERROR!\n//      ^^^^^^^^^^^^ 'foo' can only be called from a 'friend' of module '0x42::m'\n    }\n}\n}\n\nscript {\n    fun calls_m_foo(): u64 {\n        0x42::m::foo() // ERROR!\n//      ^^^^^^^^^^^^ 'foo' can only be called from a 'friend' of module '0x42::m'\n    }\n}\n```\n\n", "doc_id": "204c9bb0-1ab8-48bc-82ff-61a80a786d98", "embedding": null, "doc_hash": "1d6fea739d016e94e8cbccaad876db4ff515f395efe5ff53a389fc3684604ac9", "extra_info": null, "node_info": {"start": 0, "end": 1141, "_node_type": "1"}, "relationships": {"1": "1ab6409e-a25f-4115-900e-e32d9761c9d0"}}, "__type__": "1"}, "e9dc2d29-a9da-4862-8452-a5d2e8b580f4": {"__data__": {"text": "\n\n`entry` modifier\n\nThe `entry` modifier is designed to allow module functions to be safely and directly invoked much like scripts. This allows module writers to specify which functions can be to begin execution. The module writer then knows that any non-`entry` function will be called from a Move program already in execution.\n\nEssentially, `entry` functions are the \"main\" functions of a module, and they specify where Move programs start executing.\n\nNote though, an `entry` function _can_ still be called by other Move functions. So while they _can_ serve as the start of a Move program, they aren't restricted to that case.\n\nFor example:\n\n```move=\naddress 0x42 {\nmodule m {\n    public entry fun foo(): u64 { 0 }\n    fun calls_foo(): u64 { foo() } // valid!\n}\n\nmodule n {\n    fun calls_m_foo(): u64 {\n        0x42::m::foo() // valid!\n    }\n}\n\nmodule other {\n    public entry fun calls_m_foo(): u64 {\n        0x42::m::foo() // valid!\n    }\n}\n}\n\nscript {\n    fun calls_m_foo(): u64 {\n        0x42::m::foo() // valid!\n    }\n}\n```\n\nEven internal functions can be marked as `entry`! This lets you guarantee that the function is called only at the beginning of execution (assuming you do not call it elsewhere in your module)\n\n```move=\naddress 0x42 {\nmodule m {\n    entry fun foo(): u64 { 0 } // valid! entry functions do not have to be public\n}\n\nmodule n {\n    fun calls_m_foo(): u64 {\n        0x42::m::foo() // ERROR!\n//      ^^^^^^^^^^^^ 'foo' is internal to '0x42::m'\n    }\n}\n\nmodule other {\n    public entry fun calls_m_foo(): u64 {\n        0x42::m::foo() // ERROR!\n//      ^^^^^^^^^^^^ 'foo' is internal to '0x42::m'\n    }\n}\n}\n\nscript {\n    fun calls_m_foo(): u64 {\n        0x42::m::foo() // ERROR!\n//      ^^^^^^^^^^^^ 'foo' is internal to '0x42::m'\n    }\n}\n```\n\nEntry functions can take primitive types, String, and vector arguments but cannot take Structs (e.g. Option). They also\nmust not have any return values.\n\n", "doc_id": "e9dc2d29-a9da-4862-8452-a5d2e8b580f4", "embedding": null, "doc_hash": "168b786e7d5825178cdcd7a39b1daea0a535db00ff67cdfa9464916aeb3b40f7", "extra_info": null, "node_info": {"start": 0, "end": 1922, "_node_type": "1"}, "relationships": {"1": "56ff04f7-2551-4b24-8211-c76e77faca1d"}}, "__type__": "1"}, "902a5f04-5cbd-491d-a242-2896c68db5bc": {"__data__": {"text": "\n\nName\n\nFunction names can start with letters `a` to `z` or letters `A` to `Z`. After the first character, function names can contain underscores `_`, letters `a` to `z`, letters `A` to `Z`, or digits `0` to `9`.\n\n```move\nfun FOO() {}\nfun bar_42() {}\nfun _bAZ19() {}\n```\n\n", "doc_id": "902a5f04-5cbd-491d-a242-2896c68db5bc", "embedding": null, "doc_hash": "96e8cad8f366ecf486664bc0c52678ee4212a4f3e8ea3a635214a2054b4dab88", "extra_info": null, "node_info": {"start": 0, "end": 272, "_node_type": "1"}, "relationships": {"1": "57a9f559-274e-4844-92c9-18b688d1fc3a"}}, "__type__": "1"}, "e8dda79b-10d8-4aa2-9a50-8cdcb795bee4": {"__data__": {"text": "\n\nType Parameters\n\nAfter the name, functions can have type parameters\n\n```move\nfun id(x: T): T { x }\nfun example(x: T1, y: T2): (T1, T1, T2) { (copy x, x, y) }\n```\n\nFor more details, see Move generics.\n\n", "doc_id": "e8dda79b-10d8-4aa2-9a50-8cdcb795bee4", "embedding": null, "doc_hash": "20fe1656e042195d8faf67498c5546bcce4fe4e1098a72512a47cfbc4cfb5d66", "extra_info": null, "node_info": {"start": 0, "end": 203, "_node_type": "1"}, "relationships": {"1": "8fd60477-d022-4966-bdee-cb993a91fbd6"}}, "__type__": "1"}, "ba90eae0-2021-48fa-93a9-58f1d221b780": {"__data__": {"text": "\n\nParameters\n\nFunctions parameters are declared with a local variable name followed by a type annotation\n\n```move\nfun add(x: u64, y: u64): u64 { x + y }\n```\n\nWe read this as `x` has type `u64`\n\nA function does not have to have any parameters at all.\n\n```move\nfun useless() { }\n```\n\nThis is very common for functions that create new or empty data structures\n\n```move=\naddress 0x42 {\nmodule example {\n  struct Counter { count: u64 }\n\n  fun new_counter(): Counter {\n      Counter { count: 0 }\n  }\n\n}\n}\n```\n\n", "doc_id": "ba90eae0-2021-48fa-93a9-58f1d221b780", "embedding": null, "doc_hash": "3e1742b76c8ddf41754e0c429a2c0df8b46f95c21cc39be065960c9d4b95ad8c", "extra_info": null, "node_info": {"start": 0, "end": 504, "_node_type": "1"}, "relationships": {"1": "6f36de66-89cc-4777-8939-740fbcaddfa4"}}, "__type__": "1"}, "dba8239a-eb99-48a0-be52-dde51c48370a": {"__data__": {"text": "\n\nAcquires\n\nWhen a function accesses a resource using `move_from`, `borrow_global`, or `borrow_global_mut`, the function must indicate that it `acquires` that resource. This is then used by Move's type system to ensure the references into global storage are safe, specifically that there are no dangling references into global storage.\n\n```move=\naddress 0x42 {\nmodule example {\n\n    struct Balance has key { value: u64 }\n\n    public fun add_balance(s: &signer, value: u64) {\n        move_to(s, Balance { value })\n    }\n\n    public fun extract_balance(addr: address): u64 acquires Balance {\n        let Balance { value } = move_from(addr); // acquires needed\n        value\n    }\n}\n}\n```\n\n`acquires` annotations must also be added for transitive calls within the module. Calls to these functions from another module do not need to annotated with these acquires because one module cannot access resources declared in another module--so the annotation is not needed to ensure reference safety.\n\n```move=\naddress 0x42 {\nmodule example {\n\n    struct Balance has key { value: u64 }\n\n    public fun add_balance(s: &signer, value: u64) {\n        move_to(s, Balance { value })\n    }\n\n    public fun extract_balance(addr: address): u64 acquires Balance {\n        let Balance { value } = move_from(addr); // acquires needed\n        value\n    }\n\n    public fun extract_and_add(sender: address, receiver: &signer) acquires Balance {\n        let value = extract_balance(sender); // acquires needed here\n        add_balance(receiver, value)\n    }\n}\n}\n\naddress 0x42 {\nmodule other {\n    fun extract_balance(addr: address): u64 {\n        0x42::example::extract_balance(addr) // no acquires needed\n    }\n}\n}\n```\n\nA function can `acquire` as many resources as it needs to\n\n```move=\naddress 0x42 {\nmodule example {\n    use std::vector;\n\n    struct Balance has key { value: u64 }\n    struct Box has key { items: vector }\n\n    public fun store_two(\n        addr: address,\n        item1: Item1,\n        item2: Item2,\n    ) acquires Balance, Box {\n        let balance = borrow_global_mut(addr); // acquires needed\n        balance.value = balance.value - 2;\n        let box1 = borrow_global_mut>(addr); // acquires needed\n        vector::push_back(&mut box1.items, item1);\n        let box2 = borrow_global_mut>(addr); // acquires needed\n        vector::push_back(&mut box2.items, item2);\n    }\n}\n}\n```\n\n", "doc_id": "dba8239a-eb99-48a0-be52-dde51c48370a", "embedding": null, "doc_hash": "50161297879d6050dfef41c812f0522db350ee84043b5ee4fa66169a762011f6", "extra_info": null, "node_info": {"start": 0, "end": 2377, "_node_type": "1"}, "relationships": {"1": "8f647bd0-5d71-4345-97a2-c469b8e5535c"}}, "__type__": "1"}, "c1f110b9-2003-48f6-8885-b4ca5f32b8ca": {"__data__": {"text": "\n\nReturn type\n\nAfter the parameters, a function specifies its return type.\n\n```move\nfun zero(): u64 { 0 }\n```\n\nHere `: u64` indicates that the function's return type is `u64`.\n\nUsing tuples, a function can return multiple values:\n\n```move\nfun one_two_three(): (u64, u64, u64) { (0, 1, 2) }\n```\n\nIf no return type is specified, the function has an implicit return type of unit `()`. These functions are equivalent:\n\n```move\nfun just_unit(): () { () }\nfun just_unit() { () }\nfun just_unit() { }\n```\n\n`script` functions must have a return type of unit `()`:\n\n```move\nscript {\n    fun do_nothing() {\n    }\n}\n```\n\nAs mentioned in the tuples section, these tuple \"values\" are virtual and do not exist at runtime. So for a function that returns unit `()`, it will not be returning any value at all during execution.\n\n", "doc_id": "c1f110b9-2003-48f6-8885-b4ca5f32b8ca", "embedding": null, "doc_hash": "e4d2e7ebe9d0016214165c29eae840713a6397149d6a2a7222d3c545e32e5a97", "extra_info": null, "node_info": {"start": 0, "end": 810, "_node_type": "1"}, "relationships": {"1": "4fa52b26-90bc-4cc2-9370-7dc73dfce2ac"}}, "__type__": "1"}, "4e8c3bcb-2843-4e33-b5d8-220007a2765a": {"__data__": {"text": "\n\nFunction body\n\nA function's body is an expression block. The return value of the function is the last value in the sequence\n\n```move=\nfun example(): u64 {\n    let x = 0;\n    x = x + 1;\n    x // returns 'x'\n}\n```\n\nSee the section below for more information on returns\n\nFor more information on expression blocks, see Move variables.\n\n", "doc_id": "4e8c3bcb-2843-4e33-b5d8-220007a2765a", "embedding": null, "doc_hash": "09825623848eaf99048ef0d9ebefc81685f992f7e377be762918708b0debae6b", "extra_info": null, "node_info": {"start": 0, "end": 334, "_node_type": "1"}, "relationships": {"1": "171b2a73-f432-4a5c-8f66-c8105c9d81c0"}}, "__type__": "1"}, "aaa60dbe-4ba1-442b-8cdd-b585b31f5f7a": {"__data__": {"text": "\n\nNative Functions\n\nSome functions do not have a body specified, and instead have the body provided by the VM. These functions are marked `native`.\n\nWithout modifying the VM source code, a programmer cannot add new native functions. Furthermore, it is the intent that `native` functions are used for either standard library code or for functionality needed for the given Move environment.\n\nMost `native` functions you will likely see are in standard library code such as `vector`\n\n```move=\nmodule std::vector {\n    native public fun empty(): vector;\n    ...\n}\n```\n\n", "doc_id": "aaa60dbe-4ba1-442b-8cdd-b585b31f5f7a", "embedding": null, "doc_hash": "943ea37b06032ca604dff8025c8ef13364bc23552562a9bb60af4fe23a6e3ef8", "extra_info": null, "node_info": {"start": 0, "end": 565, "_node_type": "1"}, "relationships": {"1": "47e9544d-a13c-4232-90ec-2d3ecb63ad05"}}, "__type__": "1"}, "2d1f9b31-7224-44fa-bbb3-d268b717f951": {"__data__": {"text": "\n\nCalling\n\nWhen calling a function, the name can be specified either through an alias or fully qualified\n\n```move=\naddress 0x42 {\nmodule example {\n    public fun zero(): u64 { 0 }\n}\n}\n\nscript {\n    use 0x42::example::{Self, zero};\n    fun call_zero() {\n        // With the `use` above all of these calls are equivalent\n        0x42::example::zero();\n        example::zero();\n        zero();\n    }\n}\n```\n\nWhen calling a function, an argument must be given for every parameter.\n\n```move=\naddress 0x42 {\nmodule example {\n    public fun takes_none(): u64 { 0 }\n    public fun takes_one(x: u64): u64 { x }\n    public fun takes_two(x: u64, y: u64): u64 { x + y }\n    public fun takes_three(x: u64, y: u64, z: u64): u64 { x + y + z }\n}\n}\n\nscript {\n    use 0x42::example;\n    fun call_all() {\n        example::takes_none();\n        example::takes_one(0);\n        example::takes_two(0, 1);\n        example::takes_three(0, 1, 2);\n    }\n}\n```\n\nType arguments can be either specified or inferred. Both calls are equivalent.\n\n```move=\naddress 0x42 {\nmodule example {\n    public fun id(x: T): T { x }\n}\n}\n\nscript {\n    use 0x42::example;\n    fun call_all() {\n        example::id(0);\n        example::id(0);\n    }\n}\n```\n\nFor more details, see Move generics.\n\n\n", "doc_id": "2d1f9b31-7224-44fa-bbb3-d268b717f951", "embedding": null, "doc_hash": "5b2edc8326aac120ea42883beca7c262807d2fca6bc1f69969a89b180570bb07", "extra_info": null, "node_info": {"start": 0, "end": 1245, "_node_type": "1"}, "relationships": {"1": "8f2b5317-a3e3-429e-8cca-a8d3d12a550e"}}, "__type__": "1"}, "f9d87ff6-19dc-4956-b64c-facba3507653": {"__data__": {"text": "\n\nReturning values\n\nThe result of a function, its \"return value\", is the final value of its function body. For example\n\n```move=\nfun add(x: u64, y: u64): u64 {\n    x + y\n}\n```\n\nAs mentioned above, the function's body is an expression block. The expression block can sequence various statements, and the final expression in the block will be be the value of that block\n\n```move=\nfun double_and_add(x: u64, y: u64): u64 {\n    let double_x = x * 2;\n    let double_y = y * 2;\n    double_x + double_y\n}\n```\n\nThe return value here is `double_x + double_y`\n\n", "doc_id": "f9d87ff6-19dc-4956-b64c-facba3507653", "embedding": null, "doc_hash": "6a6995f767101d6f5397abbda82cd5bb7ca64fcf0db5e44dbff779e64c0c0bb6", "extra_info": null, "node_info": {"start": 0, "end": 551, "_node_type": "1"}, "relationships": {"1": "4fcf72d7-05c4-462b-9b7c-544a09b75e8f"}}, "__type__": "1"}, "3683ec1d-b458-4b2f-bbfd-e0384cc59e3f": {"__data__": {"text": "\n\n`return` expression\n\nA function implicitly returns the value that its body evaluates to. However, functions can also use the explicit `return` expression:\n\n```move\nfun f1(): u64 { return 0 }\nfun f2(): u64 { 0 }\n```\n\nThese two functions are equivalent. In this slightly more involved example, the function subtracts two `u64` values, but returns early with `0` if the second value is too large:\n\n```move=\nfun safe_sub(x: u64, y: u64): u64 {\n    if (y > x) return 0;\n    x - y\n}\n```\n\nNote that the body of this function could also have been written as `if (y > x) 0 else x - y`.\n\nHowever `return` really shines is in exiting deep within other control flow constructs. In this example, the function iterates through a vector to find the index of a given value:\n\n```move=\nuse std::vector;\nuse std::option::{Self, Option};\nfun index_of(v: &vector, target: &T): Option {\n    let i = 0;\n    let n = vector::length(v);\n    while (i < n) {\n        if (vector::borrow(v, i) == target) return option::some(i);\n        i = i + 1\n    };\n\n    option::none()\n}\n```\n\nUsing `return` without an argument is shorthand for `return ()`. That is, the following two functions are equivalent:\n\n```move\nfun foo() { return }\nfun foo() { return () }\n```\n\n", "doc_id": "3683ec1d-b458-4b2f-bbfd-e0384cc59e3f", "embedding": null, "doc_hash": "90b4d18d81ea3b39b55eb9634828d51262f9eb1b03775bcc2baafe28e52e505f", "extra_info": null, "node_info": {"start": 0, "end": 1230, "_node_type": "1"}, "relationships": {"1": "33a5a766-7829-49cc-a83f-d43a13d24b9a"}}, "__type__": "1"}, "87c2f682-740f-4346-acb9-e419e1730c6c": {"__data__": {"text": "\n\nInline Functions\n\nInline functions are functions which are expanded at caller side instead\nof compiled into Move bytecode. This allows to safe gas and may lead\nto faster execution. For example, one can define an inline function\n\n```move=\ninline fun percent(x: u64, y: u64):u64 { x * 100 / y }\n```\n\nNow, when call `percent(2, 200)` the compiler will inline the function\ndefinition as if the user has written `2 * 100 / 200`.\n\n", "doc_id": "87c2f682-740f-4346-acb9-e419e1730c6c", "embedding": null, "doc_hash": "7d2814e26e48417c85fdaa15ef8628667ac347c43eeafb3763c9f9ef86004f7c", "extra_info": null, "node_info": {"start": 0, "end": 427, "_node_type": "1"}, "relationships": {"1": "84933b6d-6183-4147-aa60-84f082809887"}}, "__type__": "1"}, "819ee16b-791e-434b-b096-94e4f69bb267": {"__data__": {"text": "\n\nFunction Parameters\n\nInline functions support _function parameters_. This allows\nto define higher-order functions in Move which can comprehend common\nprogramming patterns. As inline functions are expanded at compilation time,\nthis feature of function parameters can be supported without direct\nsupport for it in Move bytecode.\n\nConsider the following function (from the `vector` module):\n\n```move=\n/// Fold the function over the elements. For example, `fold(vector[1,2,3], 0, f)` will execute\n/// `f(f(f(0, 1), 2), 3)`\npublic inline fun fold(\n    v: vector,\n    init: Accumulator,\n    f: |Accumulator,Element|Accumulator\n): Accumulator {\n  let accu = init;\n  foreach(v, |elem| accu = g(accu, elem));\n  accu\n}\n```\n\nHere, `foreach` is itself an inline function.\n\nIn general, only lambda expressions can be passed to function parameters.\nSimilar as the inline function itself, those lambdas are expanded at caller\nside. Notice that a lambda can access variables in the context, as in the\nexample the variable `accu`.\n\n", "doc_id": "819ee16b-791e-434b-b096-94e4f69bb267", "embedding": null, "doc_hash": "65c373522f264cf257a517992bcd2a089cdbb2b17748428f3d1c8df2b9757b61", "extra_info": null, "node_info": {"start": 0, "end": 1017, "_node_type": "1"}, "relationships": {"1": "1833a642-96ba-49aa-80e6-d1280928ad5a"}}, "__type__": "1"}, "2a40f61c-6d99-4ae3-8d30-f37e5e22e9b7": {"__data__": {"text": "\n\nGas and Storage Fees\n\nAny transaction execution on the Aptos blockchain requires a processing fee. As of today, this fee comprises two components:\n1. Execution & IO costs\n  - This covers your usage of transient computation resources, such as processing your transactions and propagating the validated record throughout the distributed network of the mainnet.\n  - It is measured in Gas Units whose price may fluctuate according to the load of the network. This allows execution & io costs to be low when the network is less busy.\n2. Storage fees\n  - This covers the cost to persistently store validated record in the distributed blockchain storage.\n  - It is measured in fixed APT prices.\n  - In the future, such fees will evolve into deposits that are refundable, should you choose to delete the data you stored. The refunds can be full or partial, depending on the time frame.\n\n:::tip\nConceptually, this fee can be thought of as quite similar to how we pay for our home electric or water utilities.\n:::\n\n", "doc_id": "2a40f61c-6d99-4ae3-8d30-f37e5e22e9b7", "embedding": null, "doc_hash": "160fe0ad9acea6b81a0ee0ab01c53617b73a1e7ee7591511cf50640d0cb9bc6d", "extra_info": null, "node_info": {"start": 0, "end": 1007, "_node_type": "1"}, "relationships": {"1": "9d4fa34f-6021-4bec-8493-f03fb3c7301b"}}, "__type__": "1"}, "aa63ad2b-0546-4ea0-8e04-b9046eafb074": {"__data__": {"text": "\n\nUnit of gas\n\nTransactions can range from simple and inexpensive to complicated based upon what they do. In the Aptos blockchain, a **unit of gas** represents a basic unit of consumption for transient resources, such as doing computation or accessing the storage. The latter should not be conflated with the long-term storage aspect of such operations, as that is covered by the storage fees separately.\n\nSee How Base Gas Works for a detailed description of gas fee types and available optimizations.\n\n:::tip Unit of gas\n\ud83d\udc49 A **unit of gas** is a dimensionless number or a unit that is not associated with any one item such as a coin, expressed as an integer. The total gas units consumed by your transaction depend on the complexity of your transaction. The **gas price**, on the other hand, is expressed in terms of Aptos blockchain\u2019s native coin (Octas). Also see Transactions and States for how a transaction submitted to the Aptos blockchain looks like.\n:::\n\n", "doc_id": "aa63ad2b-0546-4ea0-8e04-b9046eafb074", "embedding": null, "doc_hash": "5801149f25f64d8f8ed2b1a818bb56f58b7ab00c6767fc9f9297753d005280eb", "extra_info": null, "node_info": {"start": 0, "end": 964, "_node_type": "1"}, "relationships": {"1": "b35d6b5b-ae3d-425a-83a5-71e25718e9a2"}}, "__type__": "1"}, "5c8a400b-2bac-4ee4-864b-9e43db58931c": {"__data__": {"text": "\n\nGas price and prioritizing transactions\n\nIn the Aptos network, the Aptos governance sets the absolute minimum gas unit price. However, the market determines how quickly a transaction with a particular gas unit price is processed. See Ethereum Gas Tracker, for example, which shows the market price movements of Ethereum gas price.\n\nBy specifying a higher gas unit price than the current market price, you can **increase** the priority level for your transaction on the blockchain by paying a larger processing fee. As part of consensus, when the leader selects transactions from its mempool to propose as part of the next block, it will prioritize selecting transactions with a higher gas unit price. While in most cases this is unnecessary, if the network is under load this measure can ensure your transaction is processed more quickly. See the `gas_unit_price` entry under Estimating the gas units via simulation for details.\n\n:::caution Increasing gas unit price with in-flight transactions\n\ud83d\udc49 If you are increasing gas unit price, but have in-flight (uncommitted) transactions for the same account, you should resubmit all of those transactions with the higher gas unit price. This is because transactions within the same account always have to respect sequence number, so effectively the higher gas unit price transaction will increase priority only after the in-flight transactions are included in a block.\n:::\n\n", "doc_id": "5c8a400b-2bac-4ee4-864b-9e43db58931c", "embedding": null, "doc_hash": "1f1c32e207b55b61762b5318bd61c11ea6e61946c6d09861e69a70ecf4ca2e6f", "extra_info": null, "node_info": {"start": 0, "end": 1420, "_node_type": "1"}, "relationships": {"1": "d45eb9f2-fedc-4d49-9395-afe2b76da43b"}}, "__type__": "1"}, "bbee888f-765b-4737-aa73-56cedc9bc29f": {"__data__": {"text": "\n\nSpecifying gas fees within a transaction\n\nWhen a transaction is submitted to the Aptos blockchain, the transaction must contain the following mandatory gas fields:\n\n- `max_gas_amount`: The maximum number of gas units that the transaction sender is willing to spend to execute the transaction. This determines the maximum computational resources that can be consumed by the transaction.\n- `gas_price`: The gas price the transaction sender is willing to pay. It is expressed in Octa units, where:\n    - 1 Octa = 10-8 APT and\n    - APT is the Aptos coin.\n\n  During the transaction execution, the total gas amount, expressed as:\n  ```\n  (total gas units consumed) * (gas_price)\n  ```\n  must not exceed\u00a0`max_gas_amount`, or else the transaction will abort the execution.\n\nThe transaction fee charged to the client will be at the most\u00a0`gas_price * max_gas_amount`.\n\n", "doc_id": "bbee888f-765b-4737-aa73-56cedc9bc29f", "embedding": null, "doc_hash": "ed7ee9f4af75f5029214ba4aad257e632c98a02e51bda79799dcfa2f1d481b1e", "extra_info": null, "node_info": {"start": 0, "end": 862, "_node_type": "1"}, "relationships": {"1": "b349ed50-4458-44af-bc03-8c1d2942cbaa"}}, "__type__": "1"}, "8dcb22c6-8fca-48e3-9bb5-ee10216c7b6e": {"__data__": {"text": "\n\nGas parameters set by governance\n\nThe following gas parameters are set by Aptos governance.\n\n:::tip On-chain gas schedule\nThese on-chain gas parameters are published on the Aptos blockchain at `0x1::gas_schedule::GasScheduleV2`.\n:::\n\n- `txn.maximum_number_of_gas_units`: Maximum number of gas units that can be spent (this is the maximum allowed value for the `max_gas_amount` gas parameter in the transaction). This is to ensure that the dynamic pricing adjustments do not exceed how much you are willing to pay in total.\n- `txn.min_transaction_gas_units`: Minimum number of gas units that can be spent. The `max_gas_amount` value in the transaction must be set to greater than this parameter\u2019s value.\n\nThere also exists some global per-category limits:\n- `txn.max_execution_gas`: The maximum number of gas units a transaction can spend on execution.\n- `txn.max_io_gas`: The maximum number of gas units a transaction can spend on IO.\n- `txn.max_storage_fee`: The maximum amount of APT a transaction can spend on persistent storage.\nThese limits help decouple one category from another, allowing us to set `txn.maximum_number_of_gas_units` generously without having to worry about abuses.\n\n", "doc_id": "8dcb22c6-8fca-48e3-9bb5-ee10216c7b6e", "embedding": null, "doc_hash": "07c5ef8e368ef92cecccf4011192c035250bc3ee005cda020e31a7150977b116", "extra_info": null, "node_info": {"start": 0, "end": 1192, "_node_type": "1"}, "relationships": {"1": "cdfbf39b-17b6-4813-956a-bd99193eb07c"}}, "__type__": "1"}, "aba4fc8b-ca4f-45ee-8e07-a90c491f32c9": {"__data__": {"text": "\n\nCalculating Storage Fees\n\nThe storage fee for a transaction is calculated based on the following factors:\n1. The size of the transaction itself\n2. The number of new storage slots used and bytes written\n3. The events emitted\nFor details, see How Base Gas Works.\n\nIt should be noted that due to some backward compatibility reasons, the total storage fee of a transaction is currently presented to the client as part of the total `gas_used`. This means, this amount could vary based on the gas unit price even for the same transaction.\n\nHere is an example. Suppose we have a transaction that costs `100` gas units in execution & IO, and `5000` Octa in storage fees. The network will show that you have used\n- `100 + 5000 / 100 = 150` gas units if the gas unit price is `100`, or\n- `100 + 5000 / 200 = 125` gas units if the unit price is `200`.\n\nWe are aware of the confusion this might create, and plan to present these as separate items in the future. However this will require some changes to the transaction output format and downstream clients, so please be patient while we work hard to make this happen.\n\n", "doc_id": "aba4fc8b-ca4f-45ee-8e07-a90c491f32c9", "embedding": null, "doc_hash": "56da6ebe7f82eca4d98f839107deae2c7c250b44b603868f0620141a2b80acdc", "extra_info": null, "node_info": {"start": 0, "end": 1110, "_node_type": "1"}, "relationships": {"1": "b5e1977d-d91f-4013-ad28-bc2a587e45aa"}}, "__type__": "1"}, "69ccc2a5-e9c3-4e49-83d8-be921ec6a1c9": {"__data__": {"text": "\n\nExamples\n\n", "doc_id": "69ccc2a5-e9c3-4e49-83d8-be921ec6a1c9", "embedding": null, "doc_hash": "e2398e7c4d13d2361bfa5508288580ae64be4db74e702e1c0e381130ca01201c", "extra_info": null, "node_info": {"start": 0, "end": 12, "_node_type": "1"}, "relationships": {"1": "8445d145-24b3-4a3c-b3ad-7a45f9c5ebdf"}}, "__type__": "1"}, "1e694daa-8fb6-4270-b0bd-a9b5fbdd2e95": {"__data__": {"text": "\n\nExample 1: Account balance vs transaction fee\n\n**The sender\u2019s account must have sufficient funds to pay for the transaction fee.**\n\nIf, let's say, you transfer all the money out of your account so that you have no remaining balance to pay for the transaction fee. In such case the Aptos blockchain would let you know that the transaction will fail, and your transfer wouldn't succeed either.\n\n", "doc_id": "1e694daa-8fb6-4270-b0bd-a9b5fbdd2e95", "embedding": null, "doc_hash": "059a253796a3cc99db82ff8439451ac6bbaaa2c9f58ab41695164bce118de717", "extra_info": null, "node_info": {"start": 0, "end": 395, "_node_type": "1"}, "relationships": {"1": "8c01d67d-1123-4c56-9697-155638e038bc"}}, "__type__": "1"}, "5c53ab64-b71e-4d47-8a14-0abb30623daf": {"__data__": {"text": "\n\nExample 2: Transaction amounts vs transaction fee\n\n**Transaction fee is independent of transfer amounts in the transaction.**\n\nIn a transaction, for example, transaction A, you are transferring 1000 coins from one account to another account. In a second transaction B, with the same gas field values of transaction A, you now transfer 100,000 coins from one account to another one account. Assuming that both the transactions A and B are sent roughly at the same time, then the gas costs for transactions A and B would be near-identical.\n\n", "doc_id": "5c53ab64-b71e-4d47-8a14-0abb30623daf", "embedding": null, "doc_hash": "3cdba810313866b0d98fa8334f27f686f1395c823831c67d6d598ad7f04ba6b2", "extra_info": null, "node_info": {"start": 0, "end": 541, "_node_type": "1"}, "relationships": {"1": "0ef3330e-031c-4c87-bec5-d92e7636e1f9"}}, "__type__": "1"}, "e6d42bfa-6493-4515-97fc-3238396d4ada": {"__data__": {"text": "\n\nEstimating gas consumption via simulation\n\nThe gas used for a transaction can be estimated by simulating the transaction on chain as described here or locally via the gas profiling feature of the Aptos CLI. The results of the simulated transaction represent the **exact** amount that is needed at the **exact** state of the blockchain at the time of the simulation. These gas units used may change based on the state of the chain.  For this reason, any amount coming out of the simulation is only an estimate, and when setting the max gas amount, it should include an appropriate amount of headroom based upon your comfort-level and historical behaviors. Setting the max gas amount too low will result in the transaction aborting and the account being charged for whatever gas was consumed.\n\nTransactions can be simulated with the `SimulateTransaction` API. This API will run the exact transaction that you plan to run.\n\n:::tip\nNote that the `Signature` provided on the transaction must be all zeros. This is to prevent someone from using the valid signature.\n:::\n\nTo simulate the transaction, there are two flags:\n\n1. `estimate_gas_unit_price`: This flag will estimate the gas unit price in the transaction using the same algorithm as the `estimate_gas_price` API.\n2. `estimate_max_gas_amount`: This flag will find the maximum possible gas you can use, and it will simulate the transaction to tell you the actual `gas_used`.\n\n", "doc_id": "e6d42bfa-6493-4515-97fc-3238396d4ada", "embedding": null, "doc_hash": "3b526146c8dd09770c5936b8d7d84d3c7f64f574f459af0b2c169bf6ee3769cf", "extra_info": null, "node_info": {"start": 0, "end": 1429, "_node_type": "1"}, "relationships": {"1": "92f4f13f-b2fd-49b7-abc9-db3f738807ff"}}, "__type__": "1"}, "c01dd3a4-8754-4999-bdfb-d3c8eade7371": {"__data__": {"text": "\n\nSimulation steps\n\nThe simulation steps for finding the correct amount of gas for a transaction are as follows:\n\n1. Estimate the gas via simulation with both `estimate_gas_unit_price` and `estimate_max_gas_amount` set to `true`.\n2. Use the `gas_unit_price` in the returned transaction as your new transaction\u2019s `gas_unit_price`.\n3. View the `gas_used * gas_unit_price` values in the returned transaction as the **lower bound** for the cost of the transaction.\n4. To calculate the upper bound of the cost, take the **minimum** of the `max_gas_amount` in the returned transaction, and the `gas_used * safety factor`. In the CLI a value of `1.5` is used for `safety factor`. Use this value as `max_gas_amount` for the transaction you want to submit. Note that the **upper bound** for the cost of the transaction is `max_gas_amount * gas_unit_price`, i.e., this is the most the sender of the transaction is charged.\n5. At this point you now have your `gas_unit_price` and `max_gas_amount` to submit your transaction as follows:\n    1. `gas_unit_price` from the returned simulated transaction.\n    2. `max_gas_amount` as the minimum of the `gas_used` * `a safety factor` or the `max_gas_amount` from the transaction.\n6. If you feel the need to prioritize or deprioritize your transaction, adjust the `gas_unit_price` of the transaction. Increase the value for higher priority, and decrease the value for lower priority.\n\n:::tip\nPrioritization is based upon buckets of `gas_unit_price`. The buckets are defined in `mempool_config.rs`. The current buckets are `[0, 150, 300, 500, 1000, 3000, 5000, 10000, 100000, 1000000]`. Therefore, a `gas_unit_price` of 150 and 299 would be prioritized nearly the same.\n:::\n\n", "doc_id": "c01dd3a4-8754-4999-bdfb-d3c8eade7371", "embedding": null, "doc_hash": "8cdd786e328dffad81837285ac7042c076bc5e135716466fd06190972d03317a", "extra_info": null, "node_info": {"start": 0, "end": 1706, "_node_type": "1"}, "relationships": {"1": "1249d603-3649-4f52-a515-09dfce380cb8"}}, "__type__": "1"}, "3d7e47ad-1f24-4a74-86ed-dbf83f6a48fd": {"__data__": {"text": "\n\nGenerics\n\nGenerics can be used to define functions and structs over different input data types. This language feature is sometimes referred to as *parametric polymorphism*. In Move, we will often use the term generics interchangeably with type parameters and type arguments.\n\nGenerics are commonly used in library code, such as in vector, to declare code that works over any possible instantiation (that satisfies the specified constraints). In other frameworks, generic code can sometimes be used to interact with global storage many different ways that all still share the same implementation.\n\n", "doc_id": "3d7e47ad-1f24-4a74-86ed-dbf83f6a48fd", "embedding": null, "doc_hash": "ebf4d014a2ea2a6e8a4247df9a0ba16ed5afd33adcf88db95253b797aab221f4", "extra_info": null, "node_info": {"start": 0, "end": 599, "_node_type": "1"}, "relationships": {"1": "c1c43e89-737d-40e6-acef-194fdd1a16d2"}}, "__type__": "1"}, "caecd940-d60a-44ea-b24c-ab33a103f55e": {"__data__": {"text": "\n\nDeclaring Type Parameters\n\nBoth functions and structs can take a list of type parameters in their signatures, enclosed by a pair of angle brackets ``.\n\n", "doc_id": "caecd940-d60a-44ea-b24c-ab33a103f55e", "embedding": null, "doc_hash": "7694231ed9ea764664802b1cfb225da69afa9dc1fee1416a9967b4d4a3634b71", "extra_info": null, "node_info": {"start": 0, "end": 154, "_node_type": "1"}, "relationships": {"1": "1c1ff4b8-9689-49ea-b9c7-5cb531f60738"}}, "__type__": "1"}, "2acc4bb0-e04d-429f-882f-4cd2553f77ab": {"__data__": {"text": "\n\nGeneric Functions\n\nType parameters for functions are placed after the function name and before the (value) parameter list. The following code defines a generic identity function that takes a value of any type and returns that value unchanged.\n\n```move\nfun id(x: T): T {\n    // this type annotation is unnecessary but valid\n    (x: T)\n}\n```\n\nOnce defined, the type parameter `T` can be used in parameter types, return types, and inside the function body.\n\n", "doc_id": "2acc4bb0-e04d-429f-882f-4cd2553f77ab", "embedding": null, "doc_hash": "e54997b08c57430a28a7556b727c3da6091d589f49f035dfae3b335b4230b624", "extra_info": null, "node_info": {"start": 0, "end": 457, "_node_type": "1"}, "relationships": {"1": "c2879172-ed9a-4603-bb08-eac0ee4c389c"}}, "__type__": "1"}, "8752cf6b-bd6d-4316-bc83-faa17adc2569": {"__data__": {"text": "\n\nGeneric Structs\n\nType parameters for structs are placed after the struct name, and can be used to name the types of the fields.\n\n```move\nstruct Foo has copy, drop { x: T }\n\nstruct Bar has copy, drop {\n    x: T1,\n    y: vector,\n}\n```\n\nNote that type parameters do not have to be used\n\n", "doc_id": "8752cf6b-bd6d-4316-bc83-faa17adc2569", "embedding": null, "doc_hash": "eb6458a5520515f8ddbafe5f9c2200c2ffcb0d67f194e1ad243346095f3d6016", "extra_info": null, "node_info": {"start": 0, "end": 286, "_node_type": "1"}, "relationships": {"1": "6235f4a9-8616-48b9-a14e-7d95465a895b"}}, "__type__": "1"}, "4ee455a3-929e-4fbb-9b77-fcaf8fe42865": {"__data__": {"text": "\n\nType Arguments\n\n", "doc_id": "4ee455a3-929e-4fbb-9b77-fcaf8fe42865", "embedding": null, "doc_hash": "fc8060eb5906fcf651e6389a82f146d95336c939fda1df6664fffc190b546854", "extra_info": null, "node_info": {"start": 0, "end": 18, "_node_type": "1"}, "relationships": {"1": "1ff4de14-7505-4fc0-b646-d3767121074b"}}, "__type__": "1"}, "52419991-ec5e-46e4-9620-a2b668803171": {"__data__": {"text": "\n\nCalling Generic Functions\n\nWhen calling a generic function, one can specify the type arguments for the function's type parameters in a list enclosed by a pair of angle brackets.\n\n```move\nfun foo() {\n    let x = id(true);\n}\n```\n\nIf you do not specify the type arguments, Move's type inference will supply them for you.\n\n", "doc_id": "52419991-ec5e-46e4-9620-a2b668803171", "embedding": null, "doc_hash": "a102a33782164e791608bccabd292f25d44c7efaf25dc5c6c4c9855b048f69f3", "extra_info": null, "node_info": {"start": 0, "end": 321, "_node_type": "1"}, "relationships": {"1": "533c5a8e-bc39-4593-962d-ca365256adff"}}, "__type__": "1"}, "6124909f-f9d9-4d01-ae96-de74dd646e6f": {"__data__": {"text": "\n\nUsing Generic Structs\n\nSimilarly, one can attach a list of type arguments for the struct's type parameters when constructing or destructing values of generic types.\n\n```move\nfun foo() {\n    let foo = Foo { x: true };\n    let Foo { x } = foo;\n}\n```\n\nIf you do not specify the type arguments, Move's type inference will supply them for you.\n\n", "doc_id": "6124909f-f9d9-4d01-ae96-de74dd646e6f", "embedding": null, "doc_hash": "32cbb6246dff690611dc2ce5f5dac25f0900db595c82748f7a422151ee12cf3c", "extra_info": null, "node_info": {"start": 0, "end": 342, "_node_type": "1"}, "relationships": {"1": "04294f1c-71a0-4899-88fc-349800d92151"}}, "__type__": "1"}, "a34c8242-b6e3-4e6c-83c8-d625a391f0d3": {"__data__": {"text": "\n\nType Argument Mismatch\n\nIf you specify the type arguments and they conflict with the actual values supplied, an error will be given:\n\n```move\nfun foo() {\n    let x = id(true); // error! true is not a u64\n}\n```\n\nand similarly:\n\n```move\nfun foo() {\n    let foo = Foo { x: 0 }; // error! 0 is not a bool\n    let Foo { x } = foo; // error! bool is incompatible with address\n}\n```\n\n", "doc_id": "a34c8242-b6e3-4e6c-83c8-d625a391f0d3", "embedding": null, "doc_hash": "294602aaa133868e49b7860396c6d560bd8b30fde270c639806459fee63518ee", "extra_info": null, "node_info": {"start": 0, "end": 379, "_node_type": "1"}, "relationships": {"1": "8410ad07-37d2-4cdc-bc18-9c980d8aa175"}}, "__type__": "1"}, "c977fc0d-3442-4e34-a0f1-02d527180b59": {"__data__": {"text": "\n\nType Inference\n\nIn most cases, the Move compiler will be able to infer the type arguments so you don't have to write them down explicitly. Here's what the examples above would look like if we omit the type arguments:\n\n```move\nfun foo() {\n    let x = id(true);\n    //        ^  is inferred\n\n    let foo = Foo { x: true };\n    //           ^  is inferred\n\n    let Foo { x } = foo;\n    //     ^  is inferred\n}\n```\n\nNote: when the compiler is unable to infer the types, you'll need annotate them manually. A common scenario is to call a function with type parameters appearing only at return positions.\n\n```move\naddress 0x2 {\nmodule m {\n    using std::vector;\n\n    fun foo() {\n        // let v = vector::new();\n        //                    ^ The compiler cannot figure out the element type.\n\n        let v = vector::new();\n        //                 ^~~~~ Must annotate manually.\n    }\n}\n}\n```\n\nHowever, the compiler will be able to infer the type if that return value is used later in that function:\n\n```move\naddress 0x2 {\nmodule m {\n    using std::vector;\n\n    fun foo() {\n        let v = vector::new();\n        //                 ^  is inferred\n        vector::push_back(&mut v, 42);\n    }\n}\n}\n```\n\n", "doc_id": "c977fc0d-3442-4e34-a0f1-02d527180b59", "embedding": null, "doc_hash": "8c2979495fee370a14ea4608983f7be8367715e70c1c3f263a73f0e888966366", "extra_info": null, "node_info": {"start": 0, "end": 1201, "_node_type": "1"}, "relationships": {"1": "11b1da82-ba3d-4f5c-aa0b-6b06cab87792"}}, "__type__": "1"}, "3f50c887-6e72-47cb-a7e6-e0b60cb3fe86": {"__data__": {"text": "\n\nUnused Type Parameters\n\nFor a struct definition,\nan unused type parameter is one that\ndoes not appear in any field defined in the struct,\nbut is checked statically at compile time.\nMove allows unused type parameters so the following struct definition is valid:\n\n```move\nstruct Foo {\n    foo: u64\n}\n```\n\nThis can be convenient when modeling certain concepts. Here is an example:\n\n```move\naddress 0x2 {\nmodule m {\n    // Currency Specifiers\n    struct Currency1 {}\n    struct Currency2 {}\n\n    // A generic coin type that can be instantiated using a currency\n    // specifier type.\n    //   e.g. Coin, Coin etc.\n    struct Coin has store {\n        value: u64\n    }\n\n    // Write code generically about all currencies\n    public fun mint_generic(value: u64): Coin {\n        Coin { value }\n    }\n\n    // Write code concretely about one currency\n    public fun mint_concrete(value: u64): Coin {\n        Coin { value }\n    }\n}\n}\n```\n\nIn this example,\n`struct Coin` is generic on the `Currency` type parameter,\nwhich specifies the currency of the coin and\nallows code to be written either\ngenerically on any currency or\nconcretely on a specific currency.\nThis genericity applies even when the `Currency` type parameter\ndoes not appear in any of the fields defined in `Coin`.\n\n", "doc_id": "3f50c887-6e72-47cb-a7e6-e0b60cb3fe86", "embedding": null, "doc_hash": "5f9bdfe9ae9df3c7cc9845895874d8c5d81924e5c38e2c81fc3c60c918a070ad", "extra_info": null, "node_info": {"start": 0, "end": 1271, "_node_type": "1"}, "relationships": {"1": "d095d85a-7c48-4570-ab5b-050df9bb5e92"}}, "__type__": "1"}, "b4526608-d931-403c-a801-686dfd8a63f9": {"__data__": {"text": "\n\nPhantom Type Parameters\n\nIn the example above,\nalthough `struct Coin` asks for the `store` ability,\nneither `Coin` nor `Coin` will have the `store` ability.\nThis is because of the rules for\nConditional Abilities and Generic Types\nand the fact that `Currency1` and `Currency2` don't have the `store` ability,\ndespite the fact that they are not even used in the body of `struct Coin`.\nThis might cause some unpleasant consequences.\nFor example, we are unable to put `Coin` into a wallet in the global storage.\n\nOne possible solution would be to\nadd spurious ability annotations to `Currency1` and `Currency2`\n(i.e., `struct Currency1 has store {}`).\nBut, this might lead to bugs or security vulnerabilities\nbecause it weakens the types with unnecessary ability declarations.\nFor example, we would never expect a resource in the global storage to have a field in type `Currency1`,\nbut this would be possible with the spurious `store` ability.\nMoreover, the spurious annotations would be infectious,\nrequiring many functions generic on the unused type parameter to also include the necessary constraints.\n\nPhantom type parameters solve this problem.\nUnused type parameters can be marked as *phantom* type parameters,\nwhich do not participate in the ability derivation for structs.\nIn this way,\narguments to phantom type parameters are not considered when deriving the abilities for generic types,\nthus avoiding the need for spurious ability annotations.\nFor this relaxed rule to be sound,\nMove's type system guarantees that a parameter declared as `phantom` is either\nnot used at all in the struct definition, or\nit is only used as an argument to type parameters also declared as `phantom`.\n\n", "doc_id": "b4526608-d931-403c-a801-686dfd8a63f9", "embedding": null, "doc_hash": "853c7f60b7871f0c4f4dc5a1fc1acba7907afd7ad4d3e43552af0a638ad4908b", "extra_info": null, "node_info": {"start": 0, "end": 1690, "_node_type": "1"}, "relationships": {"1": "24024247-bc77-432d-862b-70db80edcd60"}}, "__type__": "1"}, "5ba2950b-6e25-4161-b908-e7de890f2a77": {"__data__": {"text": "\n\nDeclaration\n\nIn a struct definition\na type parameter can be declared as phantom by adding the `phantom` keyword before its declaration.\nIf a type parameter is declared as phantom we say it is a phantom type parameter.\nWhen defining a struct, Move's type checker ensures that every phantom type parameter is either\nnot used inside the struct definition or\nit is only used as an argument to a phantom type parameter.\n\nMore formally,\nif a type is used as an argument to a phantom type parameter\nwe say the type appears in _phantom position_.\nWith this definition in place,\nthe rule for the correct use of phantom parameters can be specified as follows:\n**A phantom type parameter can only appear in phantom position**.\n\nThe following two examples show valid uses of phantom parameters.\nIn the first one,\nthe parameter `T1` is not used at all inside the struct definition.\nIn the second one, the parameter `T1` is only used as an argument to a phantom type parameter.\n\n```move\nstruct S1 { f: u64 }\n                  ^^\n                  Ok: T1 does not appear inside the struct definition\n\n\nstruct S2 { f: S1 }\n                                  ^^\n                                  Ok: T1 appears in phantom position\n```\n\nThe following code shows examples of violations of the rule:\n\n```move\nstruct S1 { f: T }\n                          ^\n                          Error: Not a phantom position\n\nstruct S2 { f: T }\n\nstruct S3 { f: S2 }\n                             ^\n                             Error: Not a phantom position\n```\n\n", "doc_id": "5ba2950b-6e25-4161-b908-e7de890f2a77", "embedding": null, "doc_hash": "9cda10e1f3da5743d2afc3fa7e424d74430ec3df4896910d0f8cacd15f2be05a", "extra_info": null, "node_info": {"start": 0, "end": 1529, "_node_type": "1"}, "relationships": {"1": "58368fc3-b269-4b2a-b848-e5bd6faba71c"}}, "__type__": "1"}, "09f5b80f-a75d-4500-9e7c-90e000f59c83": {"__data__": {"text": "\n\nInstantiation\n\nWhen instantiating a struct,\nthe arguments to phantom parameters are excluded when deriving the struct abilities.\nFor example, consider the following code:\n\n```move\nstruct S has copy { f: T1 }\nstruct NoCopy {}\nstruct HasCopy has copy {}\n```\n\nConsider now the type `S`.\nSince `S` is defined with `copy` and all non-phantom arguments have `copy`\nthen `S` also has `copy`.\n\n", "doc_id": "09f5b80f-a75d-4500-9e7c-90e000f59c83", "embedding": null, "doc_hash": "c093e4986f338e88a9e9b00b967da90980d57074d005b942c7aa0f64d2edce3a", "extra_info": null, "node_info": {"start": 0, "end": 388, "_node_type": "1"}, "relationships": {"1": "035c54ee-d778-4022-959a-69509213bb95"}}, "__type__": "1"}, "d9e978a6-bf9a-4deb-a890-a43d0cd95005": {"__data__": {"text": "\n\nPhantom Type Parameters with Ability Constraints\n\nAbility constraints and phantom type parameters are orthogonal features in the sense that\nphantom parameters can be declared with ability constraints.\nWhen instantiating a phantom type parameter with an ability constraint,\nthe type argument has to satisfy that constraint,\neven though the parameter is phantom.\nFor example, the following definition is perfectly valid:\n\n```move\nstruct S {}\n```\n\nThe usual restrictions apply and `T` can only be instantiated with arguments having `copy`.\n\n", "doc_id": "d9e978a6-bf9a-4deb-a890-a43d0cd95005", "embedding": null, "doc_hash": "afa3a48dc0616bb2be58cc1ebba0b0b8c382cf032bb49b15e1004c5f06dedcda", "extra_info": null, "node_info": {"start": 0, "end": 540, "_node_type": "1"}, "relationships": {"1": "b34ec667-a13b-42a2-9170-347c47caf6c4"}}, "__type__": "1"}, "dc09f10c-f53d-4d4f-9f53-8e2343382409": {"__data__": {"text": "\n\nConstraints\n\nIn the examples above, we have demonstrated how one can use type parameters to define \"unknown\" types that can be plugged in by callers at a later time. This however means the type system has little information about the type and has to perform checks in a very conservative way. In some sense, the type system must assume the worst case scenario for an unconstrained generic. Simply put, by default generic type parameters have no abilities.\n\nThis is where constraints come into play: they offer a way to specify what properties these unknown types have so the type system can allow operations that would otherwise be unsafe.\n\n", "doc_id": "dc09f10c-f53d-4d4f-9f53-8e2343382409", "embedding": null, "doc_hash": "bb709988b41bd81f079f29acea6840f35fad1fccde15e0851857102ff627257e", "extra_info": null, "node_info": {"start": 0, "end": 643, "_node_type": "1"}, "relationships": {"1": "be981172-0b18-40a6-8036-444cc682f5bd"}}, "__type__": "1"}, "be809530-1d4a-478b-afaa-082c9e270025": {"__data__": {"text": "\n\nDeclaring Constraints\n\nConstraints can be imposed on type parameters using the following syntax.\n\n```move\n// T is the name of the type parameter\nT:  (+ )*\n```\n\nThe `` can be any of the four abilities, and a type parameter can be constrained with multiple abilities at once. So all of the following would be valid type parameter declarations:\n\n```move\nT: copy\nT: copy + drop\nT: copy + drop + store + key\n```\n\n", "doc_id": "be809530-1d4a-478b-afaa-082c9e270025", "embedding": null, "doc_hash": "e55ddb862bc1dffe9726d450ffea1af35eeda3a6f55f6dab9a6de167c9ff583d", "extra_info": null, "node_info": {"start": 0, "end": 410, "_node_type": "1"}, "relationships": {"1": "13943530-2bf5-4b40-a5ec-a087febb7801"}}, "__type__": "1"}, "958ec472-4aa3-4de6-879c-8bafdf7f4432": {"__data__": {"text": "\n\nVerifying Constraints\n\nConstraints are checked at call sites so the following code won't compile.\n\n```move\nstruct Foo { x: T }\n\nstruct Bar { x: Foo }\n//                  ^ error! u8 does not have 'key'\n\nstruct Baz { x: Foo }\n//                     ^ error! T does not have 'key'\n```\n\n```move\nstruct R {}\n\nfun unsafe_consume(x: T) {\n    // error! x does not have 'drop'\n}\n\nfun consume(x: T) {\n    // valid!\n    // x will be dropped automatically\n}\n\nfun foo() {\n    let r = R {};\n    consume(r);\n    //      ^ error! R does not have 'drop'\n}\n```\n\n```move\nstruct R {}\n\nfun unsafe_double(x: T) {\n    (copy x, x)\n    // error! x does not have 'copy'\n}\n\nfun double(x: T) {\n    (copy x, x) // valid!\n}\n\nfun foo(): (R, R) {\n    let r = R {};\n    double(r)\n    //     ^ error! R does not have 'copy'\n}\n```\n\nFor more information, see the abilities section on conditional abilities and generic types.\n\n", "doc_id": "958ec472-4aa3-4de6-879c-8bafdf7f4432", "embedding": null, "doc_hash": "3dfecda107ec178c15c8494545e7a3bf95dfe9b569f04db2ec7b1539c138281f", "extra_info": null, "node_info": {"start": 0, "end": 893, "_node_type": "1"}, "relationships": {"1": "df4d6293-f49a-4a49-970e-b3e86bc0240d"}}, "__type__": "1"}, "099dbf26-ec91-422b-b304-bfa396309a27": {"__data__": {"text": "\n\nLimitations on Recursions\n\n", "doc_id": "099dbf26-ec91-422b-b304-bfa396309a27", "embedding": null, "doc_hash": "2c84fb325175f214fe183d13fc618d1e09efe5d5ec80500aa304cc305bba8fcf", "extra_info": null, "node_info": {"start": 0, "end": 29, "_node_type": "1"}, "relationships": {"1": "0a902ee8-2ffc-402a-96c4-f3023893ff86"}}, "__type__": "1"}, "1fbfbe81-b31d-46fc-83e8-a2d1a3a91023": {"__data__": {"text": "\n\nRecursive Structs\n\nGeneric structs can not contain fields of the same type, either directly or indirectly, even with different type arguments. All of the following struct definitions are invalid:\n\n```move\nstruct Foo {\n    x: Foo // error! 'Foo' containing 'Foo'\n}\n\nstruct Bar {\n    x: Bar // error! 'Bar' containing 'Bar'\n}\n\n// error! 'A' and 'B' forming a cycle, which is not allowed either.\nstruct A {\n    x: B\n}\n\nstruct B {\n    x: A\n    y: A\n}\n```\n\n", "doc_id": "1fbfbe81-b31d-46fc-83e8-a2d1a3a91023", "embedding": null, "doc_hash": "cc9c673c5ab460fb6d784953a254306d9a81a68a133893bc90978c115e7f70bf", "extra_info": null, "node_info": {"start": 0, "end": 454, "_node_type": "1"}, "relationships": {"1": "f34e2b29-07f5-453e-9b64-7514336d77e7"}}, "__type__": "1"}, "2b78c71b-fef7-4f48-863b-bf68ac70fc73": {"__data__": {"text": "\n\nAdvanced Topic: Type-level Recursions\n\nMove allows generic functions to be called recursively. However, when used in combination with generic structs, this could create an infinite number of types in certain cases, and allowing this means adding unnecessary complexity to the compiler, vm and other language components. Therefore, such recursions are forbidden.\n\nAllowed:\n\n```move\naddress 0x2 {\nmodule m {\n    struct A {}\n\n    // Finitely many types -- allowed.\n    // foo -> foo -> foo -> ... is valid\n    fun foo() {\n        foo();\n    }\n\n    // Finitely many types -- allowed.\n    // foo -> foo> -> foo> -> ... is valid\n    fun foo() {\n        foo>();\n    }\n}\n}\n```\n\nNot allowed:\n\n```move\naddress 0x2 {\nmodule m {\n    struct A {}\n\n    // Infinitely many types -- NOT allowed.\n    // error!\n    // foo -> foo> -> foo>> -> ...\n    fun foo() {\n        foo>();\n    }\n}\n}\n```\n\n```move\naddress 0x2 {\nmodule n {\n    struct A {}\n\n    // Infinitely many types -- NOT allowed.\n    // error!\n    // foo -> bar -> foo>\n    //   -> bar, T2> -> foo, A>\n    //   -> bar, A> -> foo, A>>\n    //   -> ...\n    fun foo() {\n        bar();\n    }\n\n    fun bar {\n        foo>();\n    }\n}\n}\n```\n\nNote, the check for type level recursions is based on a conservative analysis on the call sites and does NOT take control flow or runtime values into account.\n\n```move\naddress 0x2 {\nmodule m {\n    struct A {}\n\n    fun foo(n: u64) {\n        if (n > 0) {\n            foo>(n - 1);\n        };\n    }\n}\n}\n```\n\nThe function in the example above will technically terminate for any given input and therefore only creating finitely many types, but it is still considered invalid by Move's type system.\n\n", "doc_id": "2b78c71b-fef7-4f48-863b-bf68ac70fc73", "embedding": null, "doc_hash": "27c88e56160a6f546a40a76b9b74658c2a7e46e79a39d1e0beb7f04237bd6fe1", "extra_info": null, "node_info": {"start": 0, "end": 1668, "_node_type": "1"}, "relationships": {"1": "ff062794-0950-4a87-b9de-feb4aee16fd3"}}, "__type__": "1"}, "94ecd2c2-e6cb-418d-9f3e-02a34b749a73": {"__data__": {"text": "\n\nGlobal Storage - Operators\n\nMove programs can create, delete, and update resources in global storage using the following five instructions:\n\n\n| Operation                              | Description                                                     | Aborts?                                 |\n---------------------------------------- |---------------------------------------------------------------- |---------------------------------------- |\n|`move_to(&signer,T)`                 | Publish `T` under `signer.address`                              | If `signer.address` already holds a `T` |\n|`move_from(address): T`              | Remove `T` from `address` and return it                         | If `address` does not hold a `T`        |\n|`borrow_global_mut(address): &mut T` | Return a mutable reference to the `T` stored under `address`    | If `address` does not hold a `T`        |\n|`borrow_global(address): &T`         | Return an immutable reference to the `T` stored under `address` | If `address` does not hold a `T`        |\n|`exists(address): bool`              | Return `true` if a `T` is stored under `address`                |  Never                                  |\n\n\nEach of these instructions is parameterized by a type `T` with the `key` ability. However, each type `T` *must be declared in the current module*. This ensures that a resource can only be manipulated via the API exposed by its defining module. The instructions also take either an `address` or `&signer` representing the account address where the resource of type `T` is stored.\n\n", "doc_id": "94ecd2c2-e6cb-418d-9f3e-02a34b749a73", "embedding": null, "doc_hash": "42c4ea869761f2bc337ee5e0aca643e84ef4940d362c472312b380f2bd35fda2", "extra_info": null, "node_info": {"start": 0, "end": 1568, "_node_type": "1"}, "relationships": {"1": "454e9503-d98e-49ea-9458-365610a97b9a"}}, "__type__": "1"}, "32e0bc6a-c2b4-47e7-919e-b51f1b35dd35": {"__data__": {"text": "\n\nReferences to resources\n\nReferences to global resources returned by `borrow_global` or `borrow_global_mut` mostly behave like references to local storage: they can be extended, read, and written using ordinary reference operators and passed as arguments to other function. However, there is one important difference between local and global references: **a function cannot return a reference that points into global storage**. For example, these two functions will each fail to compile:\n\n```move\nstruct R has key { f: u64 }\n// will not compile\nfun ret_direct_resource_ref_bad(a: address): &R {\n    borrow_global(a) // error!\n}\n// also will not compile\nfun ret_resource_field_ref_bad(a: address): &u64 {\n    &borrow_global(a).f // error!\n}\n```\n\nMove must enforce this restriction to guarantee absence of dangling references to global storage. This section contains much more detail for the interested reader.\n\n", "doc_id": "32e0bc6a-c2b4-47e7-919e-b51f1b35dd35", "embedding": null, "doc_hash": "90baf50dabea46ddc626a6a23f9b363f2c5041452d660cacc53220a1f645f80d", "extra_info": null, "node_info": {"start": 0, "end": 911, "_node_type": "1"}, "relationships": {"1": "3daae4c6-1814-45cf-8cd0-9b68c57f83bf"}}, "__type__": "1"}, "e91eac3c-6ae2-4f03-98d2-125c62621a53": {"__data__": {"text": "\n\nGlobal storage operators with generics\n\nGlobal storage operations can be applied to generic resources with both instantiated and uninstantiated generic type parameters:\n\n```move\nstruct Container has key { t: T }\n\n// Publish a Container storing a type T of the caller's choosing\nfun publish_generic_container(account: &signer, t: T) {\n    move_to>(account, Container { t })\n}\n\n/// Publish a container storing a u64\nfun publish_instantiated_generic_container(account: &signer, t: u64) {\n    move_to>(account, Container { t })\n}\n```\n\nThe ability to index into global storage via a type parameter chosen at runtime is a powerful Move feature known as *storage polymorphism*. For more on the design patterns enabled by this feature, see Move generics.\n\n", "doc_id": "e91eac3c-6ae2-4f03-98d2-125c62621a53", "embedding": null, "doc_hash": "69dc507a5a06df8a45e8fd7f500b53de4f78e7a8d0c4de0d6122e1cdf88c0562", "extra_info": null, "node_info": {"start": 0, "end": 750, "_node_type": "1"}, "relationships": {"1": "bfde8e0f-eacc-4c64-aff2-05cdd7e497da"}}, "__type__": "1"}, "a240de8c-efb4-41f8-a39a-4e6b91c9f23d": {"__data__": {"text": "\n\nExample: `Counter`\n\nThe simple `Counter` module below exercises each of the five global storage operators. The API exposed by this module allows:\n\n- Anyone to publish a `Counter` resource under their account\n- Anyone to check if a `Counter` exists under any address\n- Anyone to read or increment the value of a `Counter` resource under any address\n- An account that stores a `Counter` resource to reset it to zero\n- An account that stores a `Counter` resource to remove and delete it\n\n```move\naddress 0x42 {\nmodule counter {\n    use std::signer;\n\n    /// Resource that wraps an integer counter\n    struct Counter has key { i: u64 }\n\n    /// Publish a `Counter` resource with value `i` under the given `account`\n    public fun publish(account: &signer, i: u64) {\n      // \"Pack\" (create) a Counter resource. This is a privileged operation that\n      // can only be done inside the module that declares the `Counter` resource\n      move_to(account, Counter { i })\n    }\n\n    /// Read the value in the `Counter` resource stored at `addr`\n    public fun get_count(addr: address): u64 acquires Counter {\n        borrow_global(addr).i\n    }\n\n    /// Increment the value of `addr`'s `Counter` resource\n    public fun increment(addr: address) acquires Counter {\n        let c_ref = &mut borrow_global_mut(addr).i;\n        *c_ref = *c_ref + 1\n    }\n\n    /// Reset the value of `account`'s `Counter` to 0\n    public fun reset(account: &signer) acquires Counter {\n        let c_ref = &mut borrow_global_mut(signer::address_of(account)).i;\n        *c_ref = 0\n    }\n\n    /// Delete the `Counter` resource under `account` and return its value\n    public fun delete(account: &signer): u64 acquires Counter {\n        // remove the Counter resource\n        let c = move_from(signer::address_of(account));\n        // \"Unpack\" the `Counter` resource into its fields. This is a\n        // privileged operation that can only be done inside the module\n        // that declares the `Counter` resource\n        let Counter { i } = c;\n        i\n    }\n\n    /// Return `true` if `addr` contains a `Counter` resource\n    public fun exists(addr: address): bool {\n        exists(addr)\n    }\n}\n}\n```\n\n", "doc_id": "a240de8c-efb4-41f8-a39a-4e6b91c9f23d", "embedding": null, "doc_hash": "70cffd1a907d89d15583d3e2b305e6521bc705b494ef4da87def9bc9a73d6531", "extra_info": null, "node_info": {"start": 0, "end": 2171, "_node_type": "1"}, "relationships": {"1": "4b9389d6-1f83-45fd-b64d-734dc7f928ad"}}, "__type__": "1"}, "07f3dc87-fe5f-4501-9106-9ede34d8b477": {"__data__": {"text": "\n\nAnnotating functions with `acquires`\n\nIn the `counter` example, you might have noticed that the `get_count`, `increment`, `reset`, and `delete` functions are annotated with `acquires Counter`. A Move function `m::f` must be annotated with `acquires T` if and only if:\n\n- The body of `m::f` contains a `move_from`, `borrow_global_mut`, or `borrow_global` instruction, or\n- The body of `m::f` invokes a function `m::g` declared in the same module that is annotated with `acquires`\n\nFor example, the following function inside `Counter` would need an `acquires` annotation:\n\n```move\n// Needs `acquires` because `increment` is annotated with `acquires`\nfun call_increment(addr: address): u64 acquires Counter {\n    counter::increment(addr)\n}\n```\n\nHowever, the same function *outside* `Counter` would not need an annotation:\n\n```move\naddress 0x43 {\nmodule m {\n   use 0x42::counter;\n\n   // Ok. Only need annotation when resource acquired by callee is declared\n   // in the same module\n   fun call_increment(addr: address): u64 {\n       counter::increment(addr)\n   }\n}\n}\n```\n\nIf a function touches multiple resources, it needs multiple `acquires`:\n\n```move=\naddress 0x42 {\nmodule two_resources {\n    struct R1 has key { f: u64 }\n    struct R2 has key { g: u64 }\n\n    fun double_acquires(a: address): u64 acquires R1, R2 {\n        borrow_global(a).f + borrow_global.g\n    }\n}\n}\n```\n\nThe `acquires` annotation does not take generic type parameters into account:\n\n```move=\naddress 0x42 {\nmodule m {\n    struct R has key { t: T }\n\n    // `acquires R`, not `acquires R`\n    fun acquire_generic_resource(a: addr) acquires R {\n        let _ = borrow_global>(a);\n    }\n\n    // `acquires R`, not `acquires R\n    fun acquire_instantiated_generic_resource(a: addr) acquires R {\n        let _ = borrow_global>(a);\n    }\n}\n}\n```\n\nFinally: redundant `acquires` are not allowed. Adding this function inside `Counter` will result in a compilation error:\n\n```move\n// This code will not compile because the body of the function does not use a global\n// storage instruction or invoke a function with `acquires`\nfun redundant_acquires_bad() acquires Counter {}\n```\n\nFor more information on `acquires`, see Move functions.\n\n", "doc_id": "07f3dc87-fe5f-4501-9106-9ede34d8b477", "embedding": null, "doc_hash": "6cae111ebff4dba2cbb080805bb7dd6ccbb35c19fcbb2c754d962d373d68537c", "extra_info": null, "node_info": {"start": 0, "end": 2197, "_node_type": "1"}, "relationships": {"1": "808f308f-e460-42de-8362-b0702ff3755a"}}, "__type__": "1"}, "4fc12f3b-e61e-4040-a5e0-d8153e4e0a25": {"__data__": {"text": "\n\nReference Safety For Global Resources\n\nMove prohibits returning global references and requires the `acquires` annotation to prevent dangling references. This allows Move to live up to its promise of static reference safety (i.e., no dangling references, no `null` or `nil` dereferences) for all reference types.\n\nThis example illustrates how the Move type system uses `acquires` to prevent a dangling reference:\n\n```move=\naddress 0x42 {\nmodule dangling {\n    struct T has key { f: u64 }\n\n    fun borrow_then_remove_bad(a: address) acquires T {\n        let t_ref: &mut T = borrow_global_mut(a);\n        let t = remove_t(a); // type system complains here\n        // t_ref now dangling!\n        let uh_oh = *&t_ref.f\n    }\n\n    fun remove_t(a: address): T acquires T {\n        move_from(a)\n    }\n\n}\n}\n```\n\nIn this code, line 6 acquires a reference to the `T` stored at address `a` in global storage. The callee `remove_t` then removes the value, which makes `t_ref` a dangling reference.\n\nFortunately, this cannot happen because the type system will reject this program. The `acquires` annotation on `remove_t` lets the type system know that line 7 is dangerous, without having to recheck or introspect the body of `remove_t` separately!\n\nThe restriction on returning global references prevents a similar, but even more insidious problem:\n\n```move=\naddress 0x42 {\nmodule m1 {\n    struct T has key {}\n\n    public fun ret_t_ref(a: address): &T acquires T {\n        borrow_global(a) // error! type system complains here\n    }\n\n    public fun remove_t(a: address) acquires T {\n        let T {} = move_from(a);\n    }\n}\n\nmodule m2 {\n    fun borrow_then_remove_bad(a: address) {\n        let t_ref = m1::ret_t_ref(a);\n        let t = m1::remove_t(a); // t_ref now dangling!\n    }\n}\n}\n```\n\nLine 16 acquires a reference to a global resource `m1::T`, then line 17 removes that same resource, which makes `t_ref` dangle. In this case, `acquires` annotations do not help us because the `borrow_then_remove_bad` function is outside of the `m1` module that declares `T` (recall that `acquires` annotations can only be used for resources declared in the current module). Instead, the type system avoids this problem by preventing the return of a global reference at line 6.\n\nFancier type systems that would allow returning global references without sacrificing reference safety are possible, and we may consider them in future iterations of Move. We chose the current design because it strikes a good balance between expressivity, annotation burden, and type system complexity.\n\n", "doc_id": "4fc12f3b-e61e-4040-a5e0-d8153e4e0a25", "embedding": null, "doc_hash": "a5f5e2501cf638b9299f0caa93cdd96cb387d7e00f8a4ca7e3b49ec6c6e7a5b6", "extra_info": null, "node_info": {"start": 0, "end": 2562, "_node_type": "1"}, "relationships": {"1": "c4a97738-6616-4a71-8a78-b267f224956b"}}, "__type__": "1"}, "90048788-4aa4-402d-adca-9c591687f656": {"__data__": {"text": "\n\nGlobal Storage - Structure\n\nThe purpose of Move programs is to read from and write to tree-shaped persistent global storage. Programs cannot access the filesystem, network, or any other data outside of this tree.\n\nIn pseudocode, the global storage looks something like:\n\n```move\nstruct GlobalStorage {\n  resources: Map\n  modules: Map\n}\n```\n\nStructurally, global storage is a forest) consisting of trees rooted at an account `address`. Each address can store both resource data values and module code values. As the pseudocode above indicates, each `address` can store at most one resource value of a given type and at most one module with a given name.\n\n", "doc_id": "90048788-4aa4-402d-adca-9c591687f656", "embedding": null, "doc_hash": "c8a4d920b74557f52de114f9f6c2a203a250acc8be97b9ae05e899f725343e52", "extra_info": null, "node_info": {"start": 0, "end": 656, "_node_type": "1"}, "relationships": {"1": "df2770b3-9ee9-418a-8651-e0313bb32899"}}, "__type__": "1"}, "3a27b69d-8007-4d69-85ec-49e2b5280be4": {"__data__": {"text": "\n\nAptos Glossary\n\n", "doc_id": "3a27b69d-8007-4d69-85ec-49e2b5280be4", "embedding": null, "doc_hash": "dc26cda3273b1eeebd451f2dfbf066d35359bc6967520bc43af90c55d138ffa4", "extra_info": null, "node_info": {"start": 0, "end": 18, "_node_type": "1"}, "relationships": {"1": "04295ed5-60c8-482d-a7c2-070a3f51f4b8"}}, "__type__": "1"}, "94855142-3dcf-495f-9daf-508d421b80e7": {"__data__": {"text": "\n\nA\n\n", "doc_id": "94855142-3dcf-495f-9daf-508d421b80e7", "embedding": null, "doc_hash": "f457a7f8c3dded1ee3a3bcee831b0ea6a04ff0be7d0e3b8629122674456ca399", "extra_info": null, "node_info": {"start": 0, "end": 5, "_node_type": "1"}, "relationships": {"1": "2258c824-5608-416b-9c53-44ae5737ee66"}}, "__type__": "1"}, "f20dbba1-6a60-46ef-b61b-1784cf2d7b24": {"__data__": {"text": "\n\nAccumulator Root Hash\n\n- An **accumulator root hash** is the root hash of a Merkle accumulator.\n\n", "doc_id": "f20dbba1-6a60-46ef-b61b-1784cf2d7b24", "embedding": null, "doc_hash": "2f16d008394e89166806b2588d82e7f14353598580c0a21c60c1eb22e6ac8719", "extra_info": null, "node_info": {"start": 0, "end": 99, "_node_type": "1"}, "relationships": {"1": "b446d297-1046-40f6-bd00-47300eac2ba5"}}, "__type__": "1"}, "9cb1df69-7d3a-4047-9a3d-0c4471356714": {"__data__": {"text": "\n\nAccount\n\n- An **account** in the Aptos blockchain is a container for an arbitrary number of Move modules and Move resources. This essentially means that the state of each account is comprised of both code and data.\n- The account is identified by account address.\n\nSee Accounts for more information.\n\n", "doc_id": "9cb1df69-7d3a-4047-9a3d-0c4471356714", "embedding": null, "doc_hash": "609cae2ad867abda20d64f00bb0c91f330be7ac3461dbfc81a525bd56c264ed2", "extra_info": null, "node_info": {"start": 0, "end": 302, "_node_type": "1"}, "relationships": {"1": "e798042a-06ba-4c76-866b-62dd2d1878b3"}}, "__type__": "1"}, "1548bcc4-fb39-4e83-bd7b-bed86c89ec86": {"__data__": {"text": "\n\nAccount Address\n\n- An **account address** is the address of an Aptos account.\n- Account address refers to a specific destination on the Aptos network. The address dictates the destination and source of a specific amount of assets exchanged by two parties on the blockchain. \n- An Aptos address is a 64-character hex string, and sometimes it can be shortened by stripping leading 0s and prefixing `0x`. This makes a hex-encoded 32 byte Aptos account address.\n\nSee Accounts for more information.\n\n", "doc_id": "1548bcc4-fb39-4e83-bd7b-bed86c89ec86", "embedding": null, "doc_hash": "74ec34780fc7afbd86361c95c736a9062cdd86d81e108d12cefe69aa55d10ed0", "extra_info": null, "node_info": {"start": 0, "end": 497, "_node_type": "1"}, "relationships": {"1": "b820ba46-023c-4fb2-8177-b50194f24470"}}, "__type__": "1"}, "e40d7abd-836d-40e6-9540-606d351c4d29": {"__data__": {"text": "\n\nAPI\n\n- An **Application Programming Interface (API)(** is a set of protocols and tools that allow users to interact with Aptos blockchain nodes and client networks via external applications. Aptos offers a REST API for this purpose. See the Aptos API reference documentation and Use the Aptos API for more details.\n\n", "doc_id": "e40d7abd-836d-40e6-9540-606d351c4d29", "embedding": null, "doc_hash": "a18190eec7bca45fea4dca82a96b846959f175de503cb10bd6c621dc4ed0b458", "extra_info": null, "node_info": {"start": 0, "end": 318, "_node_type": "1"}, "relationships": {"1": "2778ee9b-ff66-4da4-a9cc-152ca02d7574"}}, "__type__": "1"}, "52b6094e-c72d-407f-bd63-430faee28a10": {"__data__": {"text": "\n\nAPT\n\n**Aptos token (APT)** is the Aptos blockchain native token used for paying network and transaction fees.\n\n", "doc_id": "52b6094e-c72d-407f-bd63-430faee28a10", "embedding": null, "doc_hash": "f7c3e0888427cc7599c81aab1c0da9791f15a9c323fdef836fdf461c53c0f962", "extra_info": null, "node_info": {"start": 0, "end": 113, "_node_type": "1"}, "relationships": {"1": "601bd0a5-b19e-4588-a58c-49a82cf26673"}}, "__type__": "1"}, "596e6dec-b34d-462a-8a23-fc549fe5815f": {"__data__": {"text": "\n\nAptos\n\n**Aptos** is a Layer 1 blockchain for everyone. It uses the Move programming language and launched its mainnet on 2022-10-17 to redefine the web3 user experience. The Aptos blockchain is dedicated to creating better user experiences through increased speed, security, scalability, reliability and usability with low transaction costs.  The word \u201cAptos\" means \"The People\" in the Ohlone language. See the Aptos White Paper for more details.\n\n", "doc_id": "596e6dec-b34d-462a-8a23-fc549fe5815f", "embedding": null, "doc_hash": "e74959575734d0be98625c4fdebfef99ca350c9285483ce6a668ec2adc2779c3", "extra_info": null, "node_info": {"start": 0, "end": 450, "_node_type": "1"}, "relationships": {"1": "a3889e09-5033-4979-a2ff-1af3e00f8530"}}, "__type__": "1"}, "99bbcd0f-b74c-4115-b3b5-dacc3c133609": {"__data__": {"text": "\n\nAptosBFT\n\n- **AptosBFT** is the Aptos protocol's BFT consensus algorithm.\n- AptosBFT is based on Jolteon.\n\n", "doc_id": "99bbcd0f-b74c-4115-b3b5-dacc3c133609", "embedding": null, "doc_hash": "76d13538f7b4f673dcb6253aff99ad90d59207d6d4085ee32fd34654b6f93618", "extra_info": null, "node_info": {"start": 0, "end": 109, "_node_type": "1"}, "relationships": {"1": "13e3f6ea-b1af-4bfc-8d48-3c9939c811a3"}}, "__type__": "1"}, "f59aec9b-d983-46f1-9a13-ba2d59ebb311": {"__data__": {"text": "\n\nAptos Blockchain\n\n- The **Aptos blockchain** is a ledger of immutable transactions agreed upon by the validators on the Aptos network (the network of validators).\n\n", "doc_id": "f59aec9b-d983-46f1-9a13-ba2d59ebb311", "embedding": null, "doc_hash": "ed271e8d6af7b9a0a8ebef9617d7bfee7fd4c38e957e17c4e47f510626aa9f58", "extra_info": null, "node_info": {"start": 0, "end": 166, "_node_type": "1"}, "relationships": {"1": "a4a3c2d4-bbce-4c48-bbf4-e81b3f0ddf8c"}}, "__type__": "1"}, "57dd6901-b9a0-473a-a16e-d19bf38c57da": {"__data__": {"text": "\n\nAptos Name Service (ANS)\n\n- The **Aptos Name Service (ANS)** is a decentralized naming address service for the Aptos blockchain. An Aptos name is a human-readable *.apt* domain name that is used in place of a public key, for example *love.apt*. \n- This service also allows users to register subdomain names in addition to the registered domain. Find out more at: Aptosnames.com\n\n", "doc_id": "57dd6901-b9a0-473a-a16e-d19bf38c57da", "embedding": null, "doc_hash": "e6c04eb034e57d2adb126a7599e4c4c1062b5f2c07007f794c039c614e9dce86", "extra_info": null, "node_info": {"start": 0, "end": 381, "_node_type": "1"}, "relationships": {"1": "64724ef1-d87f-4202-baa1-312eee0c582f"}}, "__type__": "1"}, "9d7556e0-061b-4a41-9aaa-6c814bf7f6b6": {"__data__": {"text": "\n\nAptos-core\n\n**Aptos-core** is the open source technology on which the Aptos Payment Network runs. Aptos-core contains software for\n\n* the Aptos blockchain itself, which generates and stores the immutable ledger of confirmed transactions and\n* the validation process, which implements the consensus algorithm to validate transactions and add them to the Aptos blockchain immutable ledger.\n\n", "doc_id": "9d7556e0-061b-4a41-9aaa-6c814bf7f6b6", "embedding": null, "doc_hash": "36db8201c9ba7252541d98138f7f4de811fe3c14118e3cbd28f6adc04d005b9c", "extra_info": null, "node_info": {"start": 0, "end": 391, "_node_type": "1"}, "relationships": {"1": "4e3c3ba2-ca60-41cf-8a94-283f49b67e70"}}, "__type__": "1"}, "02186f82-816a-4dd8-b6ef-0bc78365da34": {"__data__": {"text": "\n\nAptos Ecosystem\n\n- **Aptos ecosystem** refers to various components of the Aptos blockchain network and their interactions.  The Aptos ecosystem includes the community, community-driven projects, and events. See Contribute to the Aptos Ecosystem for all possible ways to join Aptos.\n\n", "doc_id": "02186f82-816a-4dd8-b6ef-0bc78365da34", "embedding": null, "doc_hash": "1565652a32a29005da40d1efe1e6fea4960b2d5fdf070c8e1b538dacc54d4e75", "extra_info": null, "node_info": {"start": 0, "end": 286, "_node_type": "1"}, "relationships": {"1": "a7998094-23d0-4a88-9e83-28e76a6e0cfe"}}, "__type__": "1"}, "4ec68dab-20b4-4ae7-bc67-62d8e59a2843": {"__data__": {"text": "\n\nAptos Explorer\n\n- The **Aptos Explorer** is an interface that helps users examine details of the Aptos blockchain, including account information, validators, and transactions.\n- The Aptos Explorer help users validate their work in Aptos wallets and other tools in the blockchain. Find more details at Use the Aptos Explorer.\n\n", "doc_id": "4ec68dab-20b4-4ae7-bc67-62d8e59a2843", "embedding": null, "doc_hash": "62fbf1acae77154c7def889fb9a18015b30951e20f5b3166c719903c202c08a1", "extra_info": null, "node_info": {"start": 0, "end": 328, "_node_type": "1"}, "relationships": {"1": "c2d0205d-507d-4596-9e3b-b333903da97f"}}, "__type__": "1"}, "6ce72456-a2fe-486b-95c5-16df95c6fa34": {"__data__": {"text": "\n\nAptos Framework\nThe **Aptos Framework** defines the public API for blockchain updates and the structure of on-chain data. It defines the business logic and access control for the three key pillars of Aptos functionality: payments, treasury, and on-chain governance. It is implemented as a set of modules written in the Move programming language and stored on-chain as Move bytecode.\n\n", "doc_id": "6ce72456-a2fe-486b-95c5-16df95c6fa34", "embedding": null, "doc_hash": "157217ef1eef2f6f7f9970c8b063765d9f2538c0b046b8709a13a4df096533bf", "extra_info": null, "node_info": {"start": 0, "end": 386, "_node_type": "1"}, "relationships": {"1": "79716b6f-0f56-46a7-b5df-1cf41524aca4"}}, "__type__": "1"}, "380d898e-842b-4a2d-8bef-7d8255b646fb": {"__data__": {"text": "\n\nAptos Node\nAn **Aptos node** is a peer entity of the Aptos network that tracks the state of the Aptos blockchain. There are two types of Aptos nodes, validators and fullnodes).\n\n", "doc_id": "380d898e-842b-4a2d-8bef-7d8255b646fb", "embedding": null, "doc_hash": "0a1de5c8c00f330ec535ae4fa3b15e7dd58c8cffa44173865433394e073c90b8", "extra_info": null, "node_info": {"start": 0, "end": 180, "_node_type": "1"}, "relationships": {"1": "c621376c-b93d-4e1e-b3fa-2da335c2d91b"}}, "__type__": "1"}, "4545f308-a994-45db-91e2-e4f81688b9d9": {"__data__": {"text": "\n\nAptos Protocol\n\n- **Aptos protocol** is the specification of how transactions are submitted, ordered, executed, and recorded within the Aptos network.\n\n", "doc_id": "4545f308-a994-45db-91e2-e4f81688b9d9", "embedding": null, "doc_hash": "70f8cfbe211271a2a8549eb70c35744f10298b36bfc24dfc0c447f685fd7fc42", "extra_info": null, "node_info": {"start": 0, "end": 154, "_node_type": "1"}, "relationships": {"1": "523c34de-5d74-4b77-99fc-a7520615c1fd"}}, "__type__": "1"}, "071aae5b-a021-4ec7-a6fc-f9984506b6cc": {"__data__": {"text": "\n\nAptosAccount\n\n- A **`AptosAccount`** is a Move resource that holds all the administrative data associated with an account, such as sequence number, balance, and authentication key.\n- A **`AptosAccount`** is the only resource that every account is guaranteed to contain.\n\n", "doc_id": "071aae5b-a021-4ec7-a6fc-f9984506b6cc", "embedding": null, "doc_hash": "6467b7bc867fbde4fb67303e861e248c3f1b4122064eb04389dbdba84fbafb46", "extra_info": null, "node_info": {"start": 0, "end": 273, "_node_type": "1"}, "relationships": {"1": "fb163a1d-bef5-4b95-b080-639034e23e8d"}}, "__type__": "1"}, "74d94166-fc6d-4c18-91e6-c4c75f52b0d0": {"__data__": {"text": "\n\nAptosAccount module\n\n- **The AptosAccount module** is a Move module that contains the code for manipulating the administrative data held in a particular `AptosAccount.T` resource.\n- Code for checking or incrementing sequence numbers, withdrawing or depositing currency, and extracting gas deposits is included in the AptosAccount module.\n\n", "doc_id": "74d94166-fc6d-4c18-91e6-c4c75f52b0d0", "embedding": null, "doc_hash": "520910778d306a65bebbe655c682761ab70c11153e6c66e44cb8cbc9f00bf0e2", "extra_info": null, "node_info": {"start": 0, "end": 341, "_node_type": "1"}, "relationships": {"1": "847dfa64-f363-420e-9173-de2ee0fe4307"}}, "__type__": "1"}, "644c0c89-c28b-47e8-96bb-57b9b65dccd4": {"__data__": {"text": "\n\nAptos devnet\n\n- See devnet.\n\n", "doc_id": "644c0c89-c28b-47e8-96bb-57b9b65dccd4", "embedding": null, "doc_hash": "1985c98e47def98e4980c82510cbfd3db0b775e2cf418e4b6c2b913d42fad165", "extra_info": null, "node_info": {"start": 0, "end": 31, "_node_type": "1"}, "relationships": {"1": "96d1cb02-54f0-4260-baca-92e8ad4e99c4"}}, "__type__": "1"}, "0905ff9b-827e-4f8d-acd6-e8277ba99faa": {"__data__": {"text": "\n\nB\n\n", "doc_id": "0905ff9b-827e-4f8d-acd6-e8277ba99faa", "embedding": null, "doc_hash": "5e448e88eb0818413a1732fadfe6f630c0aeaa28876dfbf4ade464a390cdfa4d", "extra_info": null, "node_info": {"start": 0, "end": 5, "_node_type": "1"}, "relationships": {"1": "01590336-38dc-45d0-9ef7-b944aa65676c"}}, "__type__": "1"}, "fbe334a2-241a-430a-874c-afe006b59e78": {"__data__": {"text": "\n\nByzantine (Validator)\n\n- A **validator** that does not follow the specification of the consensus protocol, and wishes to compromise the correct execution of the protocol.\n- BFT algorithms traditionally support up to one-third of the algorithm's voting power being held by Byzantine validators.\n\n", "doc_id": "fbe334a2-241a-430a-874c-afe006b59e78", "embedding": null, "doc_hash": "2acaae6a3cee9410690fb6bbdcd7446d961e191542c0799a9a5a8aaa0c2f9c85", "extra_info": null, "node_info": {"start": 0, "end": 297, "_node_type": "1"}, "relationships": {"1": "f761d854-bca0-4e36-9c41-653a1b4f3421"}}, "__type__": "1"}, "ce9e733e-2bec-422e-a11a-2131a9edc608": {"__data__": {"text": "\n\nByzantine Fault Tolerance (BFT)\n\n- **Byzantine Fault Tolerance** (BFT) is the ability of a distributed system to provide safety and liveness guarantees in the presence of faulty, or \u201cByzantine,\u201d validators below a certain threshold.\n- The Aptos blockchain uses AptosBFT, a consensus protocol based on Jolteon.\n- BFT algorithms typically operate with a number of entities, collectively holding N votes (which are called \u201cvalidators\u201d in the Aptos network\u2019s application of the system).\n- N is chosen to withstand some number of validators holding f votes, which might be malicious.\n- In this configuration, N is typically set to 3f+1. Validators holding up to f votes will be allowed to be faulty &mdash; offline, malicious, slow, etc. As long as 2f+1 votes are held by honest validators, they will be able to reach consensus on consistent decisions.\n- This implies that BFT consensus protocols can function correctly, even if up to one-third of the voting power is held by validators that are compromised or fail.\n\n", "doc_id": "ce9e733e-2bec-422e-a11a-2131a9edc608", "embedding": null, "doc_hash": "7a1c44f4c7723eed70df0193ac3901a91fda580716fa26f4ddbac28414404e1e", "extra_info": null, "node_info": {"start": 0, "end": 1015, "_node_type": "1"}, "relationships": {"1": "1d33d3a9-db58-473a-aa8d-d3e9a9b0eec7"}}, "__type__": "1"}, "49bb6596-592b-4576-a78f-fc1e98978568": {"__data__": {"text": "\n\nC\n\n", "doc_id": "49bb6596-592b-4576-a78f-fc1e98978568", "embedding": null, "doc_hash": "77462c2c483efffbb92746b79fc19548d4d2b057881ba8bd24a31d2945d3966e", "extra_info": null, "node_info": {"start": 0, "end": 5, "_node_type": "1"}, "relationships": {"1": "2087346d-2bc0-4689-b908-3c5f5b6089e8"}}, "__type__": "1"}, "781f9dca-9303-48d0-b0ea-7d04139adf36": {"__data__": {"text": "\n\nCLI\n\n- **Command line interface** refers to the Aptos CLI used for developing on the Aptos blockchain, operating nodes, and debugging issues. Find out more at Use the Aptos CLI. \n\n", "doc_id": "781f9dca-9303-48d0-b0ea-7d04139adf36", "embedding": null, "doc_hash": "6328da746cd2d50ed26a5560bb6171c5fabd0ca5addd044a509914a5e6a4270e", "extra_info": null, "node_info": {"start": 0, "end": 182, "_node_type": "1"}, "relationships": {"1": "c9566022-c51a-4f4c-9846-1ed37524cb46"}}, "__type__": "1"}, "bb8cf6d6-728b-4e60-8f6c-d88b783375e5": {"__data__": {"text": "\n\nClient\n\n- **Client** is software that receives information from the blockchain and manages transactions. Clients interact with the blockchain through the Aptos nodes.\n\n", "doc_id": "bb8cf6d6-728b-4e60-8f6c-d88b783375e5", "embedding": null, "doc_hash": "73204f8c64caaee3726fdefaf6b6dfca2d29f97a3d6631aa0160d59beae7a706", "extra_info": null, "node_info": {"start": 0, "end": 170, "_node_type": "1"}, "relationships": {"1": "d0b22fc4-e2f6-496b-a5cd-34514bee9af3"}}, "__type__": "1"}, "ad760494-34a8-4114-bf90-aabb50109e51": {"__data__": {"text": "\n\nCode labs\n\n- **Code labs and tutorials** depict various workflows - such as the use of the Aptos CLI in minting non-fungible tokens (NFTs) - in order for users to understand how the process works and employ related functions in their code. If users have the necessary funds in their accounts, they can follow the same code lab and tutorial steps used in devnet, testnet and mainnet networks.\n\n", "doc_id": "ad760494-34a8-4114-bf90-aabb50109e51", "embedding": null, "doc_hash": "5654cbaaa2f0a1c8f71c6aedb0102eb6ee8c0ede63c83440d913e9a9468c6493", "extra_info": null, "node_info": {"start": 0, "end": 395, "_node_type": "1"}, "relationships": {"1": "74390672-7491-44fc-b7bd-a6cfaf163da6"}}, "__type__": "1"}, "d0166261-1ff5-4a63-a0fc-a047ba5cdd69": {"__data__": {"text": "\n\nConsensus\n\n- **Consensus** is a component of a validator.\n- The consensus component is responsible for coordination and agreement amongst all validators on the block of transactions to be executed, their order, and the execution results.\n- The Aptos blockchain is formed with these agreed-upon transactions and their corresponding execution results.\n- The consensus component is accountable for achieving security, trust, and agreement among all validators on the Aptos blockchain.\n\n", "doc_id": "d0166261-1ff5-4a63-a0fc-a047ba5cdd69", "embedding": null, "doc_hash": "d8af012ad85b57e09719064b451cac507eb7e76b497205e53cb09983c48e0710", "extra_info": null, "node_info": {"start": 0, "end": 485, "_node_type": "1"}, "relationships": {"1": "77474efb-09f3-4ea6-bba1-e1bbf8f820c3"}}, "__type__": "1"}, "e90db66c-dfa4-4214-b7a1-c1fa13da3494": {"__data__": {"text": "\n\nConsensus Protocol\n\n- A **consensus protocol** is collectively executed by n validators to accept or reject a transaction and to agree on the ordering of transactions and execution results.\n- See BFT.\n\n", "doc_id": "e90db66c-dfa4-4214-b7a1-c1fa13da3494", "embedding": null, "doc_hash": "9009cb987ba9d7d568cc0e1caed9cd364b5f7477d3bf52dd70248e3469bec861", "extra_info": null, "node_info": {"start": 0, "end": 204, "_node_type": "1"}, "relationships": {"1": "ce144022-ed5a-46df-b903-a8e29bfd86d2"}}, "__type__": "1"}, "e2309667-b0b7-4b29-b0f3-72f5578f1e4e": {"__data__": {"text": "\n\nD\n\n", "doc_id": "e2309667-b0b7-4b29-b0f3-72f5578f1e4e", "embedding": null, "doc_hash": "860270a69f2f5a2a5d53f39ebb96b6e21330f2d67d79851bce0123a649e9e83c", "extra_info": null, "node_info": {"start": 0, "end": 5, "_node_type": "1"}, "relationships": {"1": "9c6b9848-8a82-4b2e-85e7-8623670ef543"}}, "__type__": "1"}, "25dad700-0ee5-4c7f-a1b5-eddeb230dacb": {"__data__": {"text": "\n\ndApps\n\n- **Decentralized applications (dApps)** are programs or digital applications that run on the Aptos blockchain autonomously. Smart contracts are commonly used to achieve this function.\n\n", "doc_id": "25dad700-0ee5-4c7f-a1b5-eddeb230dacb", "embedding": null, "doc_hash": "32e954d1a7ea4a0b16b55b9df32a5ba4ff32e182f9706cf82d02512fa2ea7772", "extra_info": null, "node_info": {"start": 0, "end": 195, "_node_type": "1"}, "relationships": {"1": "61326df3-41a8-4410-aa6e-2b72e17b6f63"}}, "__type__": "1"}, "b0277435-5bf0-4dfc-bdf0-6eeeb0d61777": {"__data__": {"text": "\n\ndevnet\n\n- The **Aptos devnet** is a publicly deployed instance of the Aptos network that runs using a set of validator test nodes.\n- The devnet is a demonstration of the Aptos network that is built for experimenting with new ideas\n- The devnet simulates a digital payment system and the coins on the devnet have _no real world value_.\n- The devnet is the network by which developers are given the opportunity to test given protocols. It is similar to testnet as it operates independently of the mainnet yet is reset weekly.\n\n", "doc_id": "b0277435-5bf0-4dfc-bdf0-6eeeb0d61777", "embedding": null, "doc_hash": "534923c8e7259cf6ffdae20e019f0030d1c5dd6762e23926e014ad45bde7e5ae", "extra_info": null, "node_info": {"start": 0, "end": 527, "_node_type": "1"}, "relationships": {"1": "55b0e483-79e8-4911-a535-17ba40ef20e8"}}, "__type__": "1"}, "6a9ecfb8-4eff-488f-9ad2-f1910439c077": {"__data__": {"text": "\n\nE\n\n", "doc_id": "6a9ecfb8-4eff-488f-9ad2-f1910439c077", "embedding": null, "doc_hash": "37d5dd4420316552ece99766a98d78db0c78c7f1be30198cd91427aca69337eb", "extra_info": null, "node_info": {"start": 0, "end": 5, "_node_type": "1"}, "relationships": {"1": "f5ab284a-d13b-44ae-901e-696b7bf566f3"}}, "__type__": "1"}, "e7e741f6-079a-4871-9ce7-6ec5c1262908": {"__data__": {"text": "\n\nEd25519\n\n- **Ed25519** is our supported digital signature scheme.\n- More specifically, the Aptos network uses the PureEdDSA scheme over the Ed25519 curve, as defined in RFC 8032.\n\n", "doc_id": "e7e741f6-079a-4871-9ce7-6ec5c1262908", "embedding": null, "doc_hash": "66cfca47984a34fc0d2e69a4aed8ca960abe558de8c2132e6447929fb1ab6f91", "extra_info": null, "node_info": {"start": 0, "end": 182, "_node_type": "1"}, "relationships": {"1": "65d615d4-9a7f-44ff-85d3-c9c12042a7f5"}}, "__type__": "1"}, "8de6a5be-e0b6-4951-b91d-611ee4df0df2": {"__data__": {"text": "\n\nEvent\n\n- An **event** is the user-facing representation of the effects of executing a transaction.\n- A transaction may be designed to emit any number of events as a list. For example, a `Coin` transfer emits a `WithdrawEvent` for the sender account and a `DepositEvent` for the recipient account.\n- In the Aptos protocol, events provide evidence that the successful execution of a transaction resulted in a specific effect. The `DepositEvent` (in the above example) allows the recipient to confirm that a payment was received into their account.\n- Events are persisted on the blockchain and are used to answer queries by clients.\n\n", "doc_id": "8de6a5be-e0b6-4951-b91d-611ee4df0df2", "embedding": null, "doc_hash": "46925cdba8e3fff27272c3bbe910ae9870b1851771f4dfa23b2b0c4e50bcbb09", "extra_info": null, "node_info": {"start": 0, "end": 633, "_node_type": "1"}, "relationships": {"1": "8aa45dd3-152e-4fe5-8a74-c33f9eddf7f1"}}, "__type__": "1"}, "e008fb2e-ccc1-45ab-83cb-fd84607a641d": {"__data__": {"text": "\n\nExecution\n\n- **Execution** in the Aptos blockchain is an Aptos node component that manages the block of transactions. The execution component stores successful transactions.\n\n", "doc_id": "e008fb2e-ccc1-45ab-83cb-fd84607a641d", "embedding": null, "doc_hash": "d0ce4b3165ecc249ea414b9a17e12c31b933f4e604cd3820a1d4e7e6ab146707", "extra_info": null, "node_info": {"start": 0, "end": 177, "_node_type": "1"}, "relationships": {"1": "d68912c7-b88f-47d7-9356-bf07853506bf"}}, "__type__": "1"}, "06b59bae-6e1a-4db5-8d09-0a92fab4b64a": {"__data__": {"text": "\n\nExpiration Time\n\nA transaction ceases to be valid after its **expiration time**. If it is assumed that:\n\n- Time_C is the current time that is agreed upon between validators (Time_C is not the local time of the client);\n- Time_E is the expiration time of a transaction T_N; and\n- Time_C > Time_E and transaction T_N has not been included in the blockchain,\n\nthen there is a guarantee that T_N will never be included in the blockchain.\n\n", "doc_id": "06b59bae-6e1a-4db5-8d09-0a92fab4b64a", "embedding": null, "doc_hash": "73ffe4c4c521707a0d5c6cd3a19904ea915789c207ca0b9ffcc9980f1979515e", "extra_info": null, "node_info": {"start": 0, "end": 437, "_node_type": "1"}, "relationships": {"1": "eccf149f-e6f8-4614-913f-7b7c9c723345"}}, "__type__": "1"}, "336113e5-ed3f-4b4f-9c33-5831ba179c2e": {"__data__": {"text": "\n\nF\n\n", "doc_id": "336113e5-ed3f-4b4f-9c33-5831ba179c2e", "embedding": null, "doc_hash": "a33f84d4a14e329dadccdc977c0fc55babd2649d14a581a302fa194cf4975a2f", "extra_info": null, "node_info": {"start": 0, "end": 5, "_node_type": "1"}, "relationships": {"1": "bb93b098-724a-40a0-bcc0-c7de610e9610"}}, "__type__": "1"}, "5054f2c5-d0e2-4c60-9d80-d0605d34208d": {"__data__": {"text": "\n\nFaucet\n\n- **Faucet** is the way to create Aptos currency with no real-world value, only on our devnet.\n- The Faucet is a service running along with the devnet. This service only exists to facilitate minting coins for the devnet.\n- You can use the Faucet by sending a request to create coins and transfer them into a given account on your behalf.\n\n", "doc_id": "5054f2c5-d0e2-4c60-9d80-d0605d34208d", "embedding": null, "doc_hash": "db8f5116755b7102d2d2d599237056c8dc2293214ef9db272f5502b31565c9bf", "extra_info": null, "node_info": {"start": 0, "end": 349, "_node_type": "1"}, "relationships": {"1": "bb35a539-8298-468d-a515-eaa4ed534bb3"}}, "__type__": "1"}, "060c4f46-4dbc-493e-a09d-36034f07f03a": {"__data__": {"text": "\n\nFullnodes\n\n- **Fullnodes** are clients that ensure data are stored up-to-date on the network. They replicate blockchain state and transactions from other fullnodes and validator nodes.\n\n", "doc_id": "060c4f46-4dbc-493e-a09d-36034f07f03a", "embedding": null, "doc_hash": "5c68c4951dfe7354347a2ab5df2a1694bc3814b1d3564928b6cc440dc328f576", "extra_info": null, "node_info": {"start": 0, "end": 188, "_node_type": "1"}, "relationships": {"1": "95bd720a-5f31-45f1-aaa2-baf1a2b64a45"}}, "__type__": "1"}, "6dc603e7-2a87-4f51-b8e5-840a0e661cd6": {"__data__": {"text": "\n\nG\n\n", "doc_id": "6dc603e7-2a87-4f51-b8e5-840a0e661cd6", "embedding": null, "doc_hash": "600ff8128d9f1bc00bbe46cfa6a8e46743ad6fd7a15b696b3725a99d39689ba2", "extra_info": null, "node_info": {"start": 0, "end": 5, "_node_type": "1"}, "relationships": {"1": "60f3ea0a-2521-4ea1-b7e1-2f329e4fb973"}}, "__type__": "1"}, "7409358b-59c6-4556-90ff-2db600a4a5a2": {"__data__": {"text": "\n\nGas\n\n- **Gas** is a way to pay for computation and storage on a blockchain network. All transactions on the Aptos network cost a certain amount of gas.\n- The gas required for a transaction depends on the size of the transaction, the computational cost of executing the transaction, and the amount of additional global state created by the transaction (e.g., if new accounts are created).\n- The purpose of gas is regulating demand for the limited computational and storage resources of the validators, including preventing denial of service (DoS) attacks.\n\n", "doc_id": "7409358b-59c6-4556-90ff-2db600a4a5a2", "embedding": null, "doc_hash": "03ef41982e79be049520ce09f237b421364614b0b9738d8e78e4498d61fc2c26", "extra_info": null, "node_info": {"start": 0, "end": 558, "_node_type": "1"}, "relationships": {"1": "3aec7351-eb52-4f0f-8299-c25d5f9ea2e2"}}, "__type__": "1"}, "ae435997-7ca9-4647-a638-38ecd676bb2c": {"__data__": {"text": "\n\nGas Price\n\n- Each transaction specifies the **gas price** the sender is willing to pay. Gas price is specified in currency/gas units.\n- The price of gas required for a transaction depends on the current demand for usage of the network.\n- The gas cost is fixed at a point in time. Gas costs are denominated in gas units.\n\n", "doc_id": "ae435997-7ca9-4647-a638-38ecd676bb2c", "embedding": null, "doc_hash": "4e1825ff5e1471d8c9b7fb5fbc6a834dca65f5359f8bb5b726cb4cc35bdaf404", "extra_info": null, "node_info": {"start": 0, "end": 323, "_node_type": "1"}, "relationships": {"1": "7a5c7291-b112-479b-8e30-ce806822f728"}}, "__type__": "1"}, "2b57bbaf-26cd-4308-ba38-360dedcea65b": {"__data__": {"text": "\n\nH\n\n", "doc_id": "2b57bbaf-26cd-4308-ba38-360dedcea65b", "embedding": null, "doc_hash": "13b529caf8dc17345279be7ab6f6989209dc33dba06a35b38361d1f2970f46ed", "extra_info": null, "node_info": {"start": 0, "end": 5, "_node_type": "1"}, "relationships": {"1": "3a4cdaaf-8893-47c6-a2d4-f8d507818a07"}}, "__type__": "1"}, "139cdcdc-7cb5-4a10-bc44-2dd32cf32a21": {"__data__": {"text": "\n\nHonest (Validator)\n\n- **Honesty** means a validator that faithfully executes the consensus protocol and is not Byzantine.\n\n", "doc_id": "139cdcdc-7cb5-4a10-bc44-2dd32cf32a21", "embedding": null, "doc_hash": "96430232e4c6da11ebe5c7e37cb556cb6c43d505dd6797e80a88cdc7eabf74f7", "extra_info": null, "node_info": {"start": 0, "end": 125, "_node_type": "1"}, "relationships": {"1": "dd28ab8a-cfe0-47d3-95b3-81438f0bbd78"}}, "__type__": "1"}, "fe26972b-5627-40ec-a02d-aadb916dcfe6": {"__data__": {"text": "\n\nJolteon\n\n- **Jolteon** is a recent proposal for a BFT consensus protocol.\n- AptosBFT, the Aptos network's consensus algorithm, is based on Jolteon.\n- It simplifies the reasoning about safety, and it addresses some performance limitations of previous consensus protocols. In particular, it reduces latency by 33% compared to HotStuff.\n\n", "doc_id": "fe26972b-5627-40ec-a02d-aadb916dcfe6", "embedding": null, "doc_hash": "f091f986a31345fc30ae153a3d58268d2a1bf78695a61c656ae1d7b8d4c052ff", "extra_info": null, "node_info": {"start": 0, "end": 337, "_node_type": "1"}, "relationships": {"1": "fb467902-ca22-4239-9e1e-387fceb1f217"}}, "__type__": "1"}, "827c9198-fb8a-4c4d-8063-8117c5652b97": {"__data__": {"text": "\n\nI\n\n", "doc_id": "827c9198-fb8a-4c4d-8063-8117c5652b97", "embedding": null, "doc_hash": "ad12e9e069f84b38edb1b28f6027fb962eca9ccdbe998ea0f388aa210ae378fb", "extra_info": null, "node_info": {"start": 0, "end": 5, "_node_type": "1"}, "relationships": {"1": "5882ac51-25d2-45cc-9953-af0fbbac5da3"}}, "__type__": "1"}, "799bd402-e64c-4dfe-9ba6-71345a3d3583": {"__data__": {"text": "\n\nIndexer\n\n- **Indexer** is the component of Aptos that retrieves, processes, and efficiently stores raw data in the database to provide speedy access to the Aptos blockchain state.\n\n", "doc_id": "799bd402-e64c-4dfe-9ba6-71345a3d3583", "embedding": null, "doc_hash": "f2e541db5f0591f44b6166c6cf9c6851f94b2e6aaea31c17a9c40f3724113f08", "extra_info": null, "node_info": {"start": 0, "end": 183, "_node_type": "1"}, "relationships": {"1": "d3c06861-6c8b-4652-a4f7-ce2612691539"}}, "__type__": "1"}, "d3dd9ed6-fbf3-4608-a05f-ff4312979f0b": {"__data__": {"text": "\n\nL\n\n", "doc_id": "d3dd9ed6-fbf3-4608-a05f-ff4312979f0b", "embedding": null, "doc_hash": "05197b309f395de88b19513f3a51c4bde47550606419a897351afcfd5e4bee84", "extra_info": null, "node_info": {"start": 0, "end": 5, "_node_type": "1"}, "relationships": {"1": "50c24e6e-999b-495b-aa7d-fdf1f496d24c"}}, "__type__": "1"}, "0bfbe2d5-8bfd-42fa-858e-51234ee0bbf8": {"__data__": {"text": "\n\nLeader\n\n- A **leader** is a validator that proposes a block of transactions for the consensus protocol.\n- In leader-based protocols, nodes must agree on a leader to make progress.\n- Leaders are selected by a function that takes the current round number as input.\n\n", "doc_id": "0bfbe2d5-8bfd-42fa-858e-51234ee0bbf8", "embedding": null, "doc_hash": "7091690d3aedfe74bad16da2c1090a3e9eb268423b6145fbeb5dc85f2134d7cf", "extra_info": null, "node_info": {"start": 0, "end": 266, "_node_type": "1"}, "relationships": {"1": "984c85eb-9277-4c37-a8ab-92e2d5938a2c"}}, "__type__": "1"}, "f8df0e82-8bb6-45f8-8576-622e50c8dc16": {"__data__": {"text": "\n\nM\n\n", "doc_id": "f8df0e82-8bb6-45f8-8576-622e50c8dc16", "embedding": null, "doc_hash": "6cb7967a185483f27216f6892a183e264d17b4682b28f5ff750ef58f5fd66aa1", "extra_info": null, "node_info": {"start": 0, "end": 5, "_node_type": "1"}, "relationships": {"1": "9de54e9e-88dc-4d2f-9d3d-6f1b9dff59ce"}}, "__type__": "1"}, "9a044e29-9fc0-4213-8869-aa3b9437d2bd": {"__data__": {"text": "\n\nMainnet\n\n- **Mainnet** refers to a working, fully-operational blockchain. A mainnet network has been fully deployed and performs the functionality of transferring digital currency from a sender to a recipient.\n\n", "doc_id": "9a044e29-9fc0-4213-8869-aa3b9437d2bd", "embedding": null, "doc_hash": "fe3856e3c6fc32d415dbc0a05e2b0fdee6eea9885298d1f7e6b1924b83cd4fb7", "extra_info": null, "node_info": {"start": 0, "end": 213, "_node_type": "1"}, "relationships": {"1": "84f5d966-dbe4-4ad4-931f-7bf5d6966061"}}, "__type__": "1"}, "63a97347-6433-4c95-a2da-5b4b596b2b4b": {"__data__": {"text": "\n\nMaximum Gas Amount\n\n- The **Maximum Gas Amount** of a transaction is the maximum amount of gas the sender is ready to pay for the transaction.\n- The gas charged is equal to the gas price multiplied by units of gas required to process this transaction. If the result is less than the max gas amount, the transaction has been successfully executed.\n- If the transaction runs out of gas while it is being executed or the account runs out of balance during execution, then the sender will be charged for gas used and the transaction will fail.\n\n", "doc_id": "63a97347-6433-4c95-a2da-5b4b596b2b4b", "embedding": null, "doc_hash": "a833f705302c0113030e413e775c19fabea277f4755bad19852736ac629eb2ac", "extra_info": null, "node_info": {"start": 0, "end": 543, "_node_type": "1"}, "relationships": {"1": "e9d940ef-32c1-4119-99b1-51f06458193e"}}, "__type__": "1"}, "09ff7a9a-fcd5-4b84-b19a-7a461db93a6d": {"__data__": {"text": "\n\nMempool\n\n- **Mempool** is one of the components of the validator. It holds an in-memory buffer of transactions that have been submitted but not yet agreed upon and executed. Mempool receives transactions from JSON-RPC Service.\n- Transactions in the mempool of a validator are added from the JSON-RPC Service of the current node and from the mempool of other Aptos nodes.\n- When the current validator is the leader, its consensus component pulls the transactions from its mempool and proposes the order of the transactions that form a block. The validator quorum then votes on the proposal.\n\n", "doc_id": "09ff7a9a-fcd5-4b84-b19a-7a461db93a6d", "embedding": null, "doc_hash": "826c7720e213adae45ed8062cb8911f73faced817d58b2a9621fabdda1cbd943", "extra_info": null, "node_info": {"start": 0, "end": 593, "_node_type": "1"}, "relationships": {"1": "471da96d-5fee-4129-82e6-056c224d5a33"}}, "__type__": "1"}, "ee10f033-f014-4bf1-b937-acefdfb37ef4": {"__data__": {"text": "\n\nMerkle Trees\n\n- **Merkle tree** is a type of authenticated data structure that allows for efficient verification of data integrity and updates.\n- The Aptos network treats the entire blockchain as a single data structure that records the history of transactions and states over time.\n- The Merkle tree implementation simplifies the work of apps accessing the blockchain. It allows apps to:\n  - Read any data from any point in time.\n  - Verify the integrity of the data using a unified framework.\n\n", "doc_id": "ee10f033-f014-4bf1-b937-acefdfb37ef4", "embedding": null, "doc_hash": "6b0933e344626a14ba109d02e2297b214023a06d9a8ba8c3e7e15f077b49f18b", "extra_info": null, "node_info": {"start": 0, "end": 498, "_node_type": "1"}, "relationships": {"1": "24b7968d-b5a8-4ac3-ac26-7c6362ab89f5"}}, "__type__": "1"}, "11c1a613-4c85-4eff-9593-dfd2abd26013": {"__data__": {"text": "\n\nMerkle Accumulator\n\n- The **Merkle Accumulator** is an _append-only_ Merkle tree that the Aptos blockchain uses to store the ledger.\n- Merkle accumulators can provide proofs that a transaction was included in the chain (\u201cproof of inclusion\u201d).\n- They are also called \"history trees\" in literature.\n\n", "doc_id": "11c1a613-4c85-4eff-9593-dfd2abd26013", "embedding": null, "doc_hash": "f0cb169032f0987b323d806e35f9b00cb1f7e00b1f27f83f99febad02007e0d6", "extra_info": null, "node_info": {"start": 0, "end": 300, "_node_type": "1"}, "relationships": {"1": "4a6c5380-66d9-4789-b4f8-3fd17d182856"}}, "__type__": "1"}, "c327a19f-e8ea-4ba5-8816-f1c7dcc2985c": {"__data__": {"text": "\n\nModule\n\n- A **module** in the Move programming language may either be a program or library that can create, transfer, or store assets.\n\n", "doc_id": "c327a19f-e8ea-4ba5-8816-f1c7dcc2985c", "embedding": null, "doc_hash": "bcc09ec5f131e23448e8a3d1bbb11fb311fa650510b61cec620bc818dca3fa0d", "extra_info": null, "node_info": {"start": 0, "end": 138, "_node_type": "1"}, "relationships": {"1": "9f846d56-e30c-473c-9ea3-178acfbd447e"}}, "__type__": "1"}, "0085df9d-d226-4d41-b442-2588a2c4442d": {"__data__": {"text": "\n\nMove\n\n- **Move** is a new programming language that implements all the transactions on the Aptos blockchain.\n- It has two different kinds of code &mdash; transaction scripts and Move modules.\n- Move is a safe and secure programming language for web3 that emphasizes access control and scarcity. It is the programming language used to build the Aptos blockchain. You can read more about it in Move on Aptos.\n\n", "doc_id": "0085df9d-d226-4d41-b442-2588a2c4442d", "embedding": null, "doc_hash": "a1394953027c6502d1ef71acdb753f3cfdfcb59e8d4899d32d73912cd83a176f", "extra_info": null, "node_info": {"start": 0, "end": 410, "_node_type": "1"}, "relationships": {"1": "142d367c-594b-47f6-a4e3-68d59385bc9e"}}, "__type__": "1"}, "fd42cec0-79bd-4b74-a3f9-0132a6d3c7e7": {"__data__": {"text": "\n\nMove Bytecode\n\n- Move programs are compiled into **Move bytecode**.\n- Move bytecode is used to express transaction scripts and Move modules.\n\n", "doc_id": "fd42cec0-79bd-4b74-a3f9-0132a6d3c7e7", "embedding": null, "doc_hash": "5e47bf9defc1f83459b75bc717095df9b14da9ae41df2415335cbd9ed03233c2", "extra_info": null, "node_info": {"start": 0, "end": 144, "_node_type": "1"}, "relationships": {"1": "8e0711d4-22e9-4ea1-95d6-bf1c8509a9db"}}, "__type__": "1"}, "68390780-d0bd-4ce6-9659-f7902935264b": {"__data__": {"text": "\n\nMove Module\n\n- A **Move module** defines the rules for updating the global state of the Aptos blockchain.\n- In the Aptos protocol, a Move module is a **smart contract**.\n- Each user-submitted transaction includes a transaction script. The transaction script invokes procedures of one or more Move modules to update the global state of the blockchain according to the rules.\n\n", "doc_id": "68390780-d0bd-4ce6-9659-f7902935264b", "embedding": null, "doc_hash": "84e4d4054c18e704494045d2578dd55c619dca6d9102874015dfb72d4221f083", "extra_info": null, "node_info": {"start": 0, "end": 377, "_node_type": "1"}, "relationships": {"1": "822fcbaf-3123-4ef2-baad-08a0f7fea783"}}, "__type__": "1"}, "b4503e66-975b-43dc-86f2-4d7a396d91df": {"__data__": {"text": "\n\nMove Resources\n\n- **Move resources** contain data that can be accessed according to the **procedures** declared in a Move **module.**\n- Move resources can never be copied, reused, or lost. This protects Move programmers from accidentally or intentionally losing track of a resource.\n\n", "doc_id": "b4503e66-975b-43dc-86f2-4d7a396d91df", "embedding": null, "doc_hash": "387ae1318af298047d2b20701bd5b90a7560b1dd2584af85ada05a08d3d04bfe", "extra_info": null, "node_info": {"start": 0, "end": 286, "_node_type": "1"}, "relationships": {"1": "c51c07ec-2e4c-4521-b7f8-43fdb988f86f"}}, "__type__": "1"}, "c9c44dbc-63fb-4470-9350-6a26f8ef77c9": {"__data__": {"text": "\n\nMove Virtual Machine (MVM)\n\n- The **Move virtual machine** executes transaction scripts written in Move bytecode to produce an execution result. This result is used to update the blockchain **state**.\n- The virtual machine is part of a validator.\n- The Move virtual machine (MoveVM) processes each validator node that translates transactions along with the current blockchain ledger state to produce a changeset as input or storage delta as output.\n\n", "doc_id": "c9c44dbc-63fb-4470-9350-6a26f8ef77c9", "embedding": null, "doc_hash": "18c4f31b5d0fda4910eded2e086b5eaed52a7250d885f38127cbf566865f0192", "extra_info": null, "node_info": {"start": 0, "end": 452, "_node_type": "1"}, "relationships": {"1": "d06afe50-8986-4b0c-af49-18959ecb9aa8"}}, "__type__": "1"}, "e559939e-9593-41c3-badf-14fd744c19ec": {"__data__": {"text": "\n\nN\n\n", "doc_id": "e559939e-9593-41c3-badf-14fd744c19ec", "embedding": null, "doc_hash": "6bde24d705eaae98dbfe675cea46a6687161d1c3c4a3ff549f8b43a23b7e98c7", "extra_info": null, "node_info": {"start": 0, "end": 5, "_node_type": "1"}, "relationships": {"1": "6396a097-e849-4738-a924-29c7564d0e90"}}, "__type__": "1"}, "49b57cb0-20e3-43e8-ae79-e20f549c7374": {"__data__": {"text": "\n\nNode\n\n- A **node** is a peer entity of the Aptos network that tracks the state of the Aptos blockchain.\n- An Aptos node consists of logical components. Mempool, consensus, and the virtual machine are examples of node components.\n\n", "doc_id": "49b57cb0-20e3-43e8-ae79-e20f549c7374", "embedding": null, "doc_hash": "bff37c65ef3eeb855299a6b6106bbe9a4b9b9e1b076dc24709c971a3e4fcb924", "extra_info": null, "node_info": {"start": 0, "end": 232, "_node_type": "1"}, "relationships": {"1": "598bc73b-b6b6-48e1-a774-36cd6effe1fd"}}, "__type__": "1"}, "589aeb82-7aa3-4d1b-9100-89daa199009e": {"__data__": {"text": "\n\nNonce\n\n- **Nonce** is a number only used once, a random or semi-random number that is generated for a specific use for authentication protocols and cryptographic hash functions.\n\n", "doc_id": "589aeb82-7aa3-4d1b-9100-89daa199009e", "embedding": null, "doc_hash": "8d9d7c8320c149710d3c1c2ad55c403bc53ad01ef6fa895b8281b8d2ee887e39", "extra_info": null, "node_info": {"start": 0, "end": 181, "_node_type": "1"}, "relationships": {"1": "8db89cd6-92ab-4be6-9c76-41038b231f8e"}}, "__type__": "1"}, "426a1c47-70ec-489c-9826-72a21bc40ada": {"__data__": {"text": "\n\nO\n\n", "doc_id": "426a1c47-70ec-489c-9826-72a21bc40ada", "embedding": null, "doc_hash": "eb7a981397f73dc465af22aae299aeb531f94e730a8dd84b6a903b6adc7e1a2d", "extra_info": null, "node_info": {"start": 0, "end": 5, "_node_type": "1"}, "relationships": {"1": "9b5132cb-efb6-460c-a975-02f54ba474bf"}}, "__type__": "1"}, "55283936-7099-4e90-a634-b81c58a732e6": {"__data__": {"text": "\n\nOpen-Source Community\n\n- **Open-source community** is a term used for a group of developers who work on open-source software. If you're reading this glossary, then you are part of the Aptos project's developer community.\n\n", "doc_id": "55283936-7099-4e90-a634-b81c58a732e6", "embedding": null, "doc_hash": "f7c29dd0794ccfc898608727a47f357e9e40f770cf80bb260783e3debb324326", "extra_info": null, "node_info": {"start": 0, "end": 224, "_node_type": "1"}, "relationships": {"1": "59f72577-8c48-4a6d-b84b-84ea1416091b"}}, "__type__": "1"}, "7dab53ae-b20f-4663-a4e4-1be961fcc323": {"__data__": {"text": "\n\nP\n\n", "doc_id": "7dab53ae-b20f-4663-a4e4-1be961fcc323", "embedding": null, "doc_hash": "1c0362e3931345d1aa21ad5235231476ccfac43a8e7eedb865296733a106443e", "extra_info": null, "node_info": {"start": 0, "end": 5, "_node_type": "1"}, "relationships": {"1": "dd43d9dc-91d9-4db7-a3c0-c23cd7942bc3"}}, "__type__": "1"}, "71364cfc-2ac4-4885-96c4-cefca02899df": {"__data__": {"text": "\n\nProof\n\n- A **proof** is a way to verify the accuracy of data in the blockchain.\n- Every operation in the Aptos blockchain can be verified cryptographically that it is indeed correct and that data has not been omitted.\n- For example, if a user queries the information within a particular executed transaction, they will be provided with a cryptographic proof that the data returned to them is correct.\n\n", "doc_id": "71364cfc-2ac4-4885-96c4-cefca02899df", "embedding": null, "doc_hash": "04ee085244dfba0507b009e4bc50b08d224dd4cc243fe9f49d044e1a1ae29cc4", "extra_info": null, "node_info": {"start": 0, "end": 404, "_node_type": "1"}, "relationships": {"1": "95d868bb-47ee-4780-ac71-97277bb5dd86"}}, "__type__": "1"}, "4365e4e5-9b0d-4efd-80e4-9a6587e604ac": {"__data__": {"text": "\n\nPoS\n\n**Proof-of-Stake (PoS)** is a security mechanism that serves in confirming the uniqueness and legitimacy of blockchain transactions. The PoS consensus mechanism is leveraged by the Aptos blockchain powered by a network of validators, which in turn update the system and process transactions.\n\n", "doc_id": "4365e4e5-9b0d-4efd-80e4-9a6587e604ac", "embedding": null, "doc_hash": "fa9ab1a2cca8661c65a25a91276b28813f2a15856950c186e18357b00916d354", "extra_info": null, "node_info": {"start": 0, "end": 300, "_node_type": "1"}, "relationships": {"1": "0073762c-c4ab-4bbe-b9a2-9e5aba83fb72"}}, "__type__": "1"}, "e75c7588-5405-4798-9013-fbcf1e9f3ffd": {"__data__": {"text": "\n\nR\n\n", "doc_id": "e75c7588-5405-4798-9013-fbcf1e9f3ffd", "embedding": null, "doc_hash": "0e1196e6ee460ef87aac41a3edb23451eb8d704f4aaacc65b6a30d179406b66c", "extra_info": null, "node_info": {"start": 0, "end": 5, "_node_type": "1"}, "relationships": {"1": "5c1d4580-b1c5-4ebe-9325-57f2738062ce"}}, "__type__": "1"}, "45760e51-08ea-40ac-80c1-b84754d2c7ce": {"__data__": {"text": "\n\nResource Account\n\n- A **resource account** is used to manage resources independent of an account managed by a user. For example, a developer may use a resource account to manage an account for module publishing, say managing a contract.\n\n- The contract itself does not require a signer post initialization. A resource account gives you the means for the module to provide a signer to other modules and sign transactions on behalf of the module.\n\nSee Resource accounts for instructions on use.\n\n", "doc_id": "45760e51-08ea-40ac-80c1-b84754d2c7ce", "embedding": null, "doc_hash": "e24553903480658f5ebeaf7539b5c5b2f0b60adbe36b0ad6661d156e2ca167dd", "extra_info": null, "node_info": {"start": 0, "end": 496, "_node_type": "1"}, "relationships": {"1": "b49d7878-00ef-4604-8d31-de36f9ad50ca"}}, "__type__": "1"}, "690c1bea-4c71-4c7c-8ddb-782007d94db7": {"__data__": {"text": "\n\nREST Service\n\n- The **REST Service** component is the external interface of a Aptos node. Any incoming client request, such as submitted transactions or queries, must first go through the REST Service. A client needs to go through the REST Service component to access storage or any other component in the system. This filters requests and protects the system.\n- Whenever a client submits a new transaction, the REST Service passes it to mempool.\n\n", "doc_id": "690c1bea-4c71-4c7c-8ddb-782007d94db7", "embedding": null, "doc_hash": "fe0d156ee182910820f38b8281ddfe01db4a5d19379a33fcfe0356e1a13505f3", "extra_info": null, "node_info": {"start": 0, "end": 450, "_node_type": "1"}, "relationships": {"1": "47125f4d-f9e7-4cf8-bc34-51c8ae007c1f"}}, "__type__": "1"}, "e6bc732b-3699-465c-989d-db98f75d551a": {"__data__": {"text": "\n\nRound\n\n- A **round** consists of achieving consensus on a block of transactions and their execution results.\n\n", "doc_id": "e6bc732b-3699-465c-989d-db98f75d551a", "embedding": null, "doc_hash": "f63197bd73f57c54febfc649a241d7f4ec7f28de1f21686903aa947a0501b1b0", "extra_info": null, "node_info": {"start": 0, "end": 112, "_node_type": "1"}, "relationships": {"1": "9fc76c08-bbfe-416a-9eea-79e614d9385c"}}, "__type__": "1"}, "2124c4b3-f47d-4654-a21d-661e664520f9": {"__data__": {"text": "\n\nRound Number\n\n- A **round number** is a shared counter used to select leaders during an epoch of the consensus protocol.\n\n", "doc_id": "2124c4b3-f47d-4654-a21d-661e664520f9", "embedding": null, "doc_hash": "b024b4543984a95ee3bed94da92c15a7166da9c4d6e7d4f0df0327ffadec62bf", "extra_info": null, "node_info": {"start": 0, "end": 124, "_node_type": "1"}, "relationships": {"1": "6966981b-7338-44cc-917e-6a07200d0da6"}}, "__type__": "1"}, "8ca19ebd-b3dd-42e3-a6e6-4bcfce4ea64b": {"__data__": {"text": "\n\nS\n\n", "doc_id": "8ca19ebd-b3dd-42e3-a6e6-4bcfce4ea64b", "embedding": null, "doc_hash": "5ffd0fd633cbd216680e950474ae6df663f526897103e52c1ecdcc2a68afebc5", "extra_info": null, "node_info": {"start": 0, "end": 5, "_node_type": "1"}, "relationships": {"1": "e05ca300-1142-40a3-a85c-0ca3867b0f9f"}}, "__type__": "1"}, "6fd66580-b860-48f6-a6fa-639b81dba307": {"__data__": {"text": "\n\nSDKs\n\n- Aptos **software development kits (SDKs)** are sets of tools that enable a developer to quickly create a custom app on the Aptos platform. Find out more at Use the Aptos SDKs.\n\n", "doc_id": "6fd66580-b860-48f6-a6fa-639b81dba307", "embedding": null, "doc_hash": "64c3c367313d3dda0133e6f293ed5fb4ddb160b370dfe5fe3f61af0d69656cb9", "extra_info": null, "node_info": {"start": 0, "end": 187, "_node_type": "1"}, "relationships": {"1": "4bda54dd-18a3-4bd3-b20c-23c67484fc82"}}, "__type__": "1"}, "e02af1bc-7371-4182-a0ac-6b2a520b52e8": {"__data__": {"text": "\n\nSequence Number\n\n- The **sequence number** for an account indicates the number of transactions that have been submitted and committed on chain from that account. It is incremented every time a transaction sent from that account is executed or aborted and stored in the blockchain.\n- A transaction is executed only if it matches the current sequence number for the sender account. This helps sequence multiple transactions from the same sender and prevents replay attacks.\n- If the current sequence number of an account A is X, then a transaction T on account A will only be executed if T's sequence number is X.\n- These transactions will be held in mempool until they are the next sequence number for that account (or until they expire).\n- When the transaction is applied, the sequence number of the account will become X+1. The account has a strictly increasing sequence number.\n\n", "doc_id": "e02af1bc-7371-4182-a0ac-6b2a520b52e8", "embedding": null, "doc_hash": "944a5cbd4d5c22acdb20fa08a12d5cf1df5ed40bf64a339287a882f3d0d95566", "extra_info": null, "node_info": {"start": 0, "end": 883, "_node_type": "1"}, "relationships": {"1": "101d9b50-5af3-4710-a1d7-be0be12ca6ca"}}, "__type__": "1"}, "e45f7740-9e33-4c82-9dfe-2e1836f9422d": {"__data__": {"text": "\n\nSender\n\n- _Alternate name_: Sender address.\n- **Sender** is the address of the originator account for a transaction. A transaction must be signed by the originator.\n\n", "doc_id": "e45f7740-9e33-4c82-9dfe-2e1836f9422d", "embedding": null, "doc_hash": "2bfb69cf490583cded61ea613e7242756cb631fd17ff2fad0036c98b0052d594", "extra_info": null, "node_info": {"start": 0, "end": 168, "_node_type": "1"}, "relationships": {"1": "bbf39dbb-a052-4d9f-bb1c-947a3c77009c"}}, "__type__": "1"}, "82a97215-165d-40fa-ac3c-0ed1c0191a1e": {"__data__": {"text": "\n\nSmart Contract\n\n- **Smart contract** refers to a computer program that automatically and directly carries out the contract's terms.\n- See Move Module for related details.\n\n", "doc_id": "82a97215-165d-40fa-ac3c-0ed1c0191a1e", "embedding": null, "doc_hash": "8cc236e8cdd0f4ed47a828f6bb3a1b64e9ab4fb0a371ca1eee380aeac35ba1de", "extra_info": null, "node_info": {"start": 0, "end": 174, "_node_type": "1"}, "relationships": {"1": "f3dd3687-2097-4bdd-ad6d-766cd0641963"}}, "__type__": "1"}, "98a479ca-df2d-423f-a5ee-9e31aca64036": {"__data__": {"text": "\n\nState\n\n- A **state** in the Aptos protocol is a snapshot of the distributed database.\n- A transaction modifies the database and produces a new and updated state.\n\n", "doc_id": "98a479ca-df2d-423f-a5ee-9e31aca64036", "embedding": null, "doc_hash": "577e3b776c326ec1fe9649d35516ba5db769226114d26a2da02b9469c84db3ef", "extra_info": null, "node_info": {"start": 0, "end": 165, "_node_type": "1"}, "relationships": {"1": "7abe729f-cba6-4d25-9fa4-a15abd1d80ed"}}, "__type__": "1"}, "6501fdc8-b97b-4ed0-abb2-eee899af26c3": {"__data__": {"text": "\n\nState Root Hash\n\n- **State root hash** is a Merkle hash over all keys and values the state of the Aptos blockchain at a given version.\n\n", "doc_id": "6501fdc8-b97b-4ed0-abb2-eee899af26c3", "embedding": null, "doc_hash": "8af4afb47181a5f51d1c04767f1cf5a33095526d908641b7266a343aeb58d73f", "extra_info": null, "node_info": {"start": 0, "end": 138, "_node_type": "1"}, "relationships": {"1": "d3630451-9ef4-443f-b446-3e7c255fea8d"}}, "__type__": "1"}, "c9d122d7-6ef9-4bf9-861d-40aec012c22b": {"__data__": {"text": "\n\nT\n\n", "doc_id": "c9d122d7-6ef9-4bf9-861d-40aec012c22b", "embedding": null, "doc_hash": "84b299a16cc6716290e567c7840ee8f39c0264ab79b23424b92bfcb9a018c434", "extra_info": null, "node_info": {"start": 0, "end": 5, "_node_type": "1"}, "relationships": {"1": "c9044581-d8ad-4c29-b379-301c5253fedb"}}, "__type__": "1"}, "cfe4887b-04ae-44f8-8f86-c7db9534f3b5": {"__data__": {"text": "\n\nTable\n\n- A **table** implements the Table type and in Aptos is used to store information as key-value data within an account at large scale.\n\nSee `table.move` for the associated Aptos source file.\n\n", "doc_id": "cfe4887b-04ae-44f8-8f86-c7db9534f3b5", "embedding": null, "doc_hash": "cc970ede05aebe68cc3be59da3034454d3cd9d9e85a16be10a661bbf63433307", "extra_info": null, "node_info": {"start": 0, "end": 200, "_node_type": "1"}, "relationships": {"1": "e3e1c423-adec-470b-a9f2-7320e8d42e9d"}}, "__type__": "1"}, "1e899c7f-d55c-4bda-ae2a-d96cb8caabac": {"__data__": {"text": "\n\nTestnet\n\n- **Testnet** describes the Aptos network that is not fully functional yet more stable than devnet; it is an alternative network to mainnet to be used for testing.\n\n", "doc_id": "1e899c7f-d55c-4bda-ae2a-d96cb8caabac", "embedding": null, "doc_hash": "9454fd56ea0c4ad31b083e9ad2ea4bdd68ba5216104f4621453cf721529814e7", "extra_info": null, "node_info": {"start": 0, "end": 176, "_node_type": "1"}, "relationships": {"1": "0f35ac51-fcf1-4e6d-8a39-4c0a6e845348"}}, "__type__": "1"}, "a374bcba-bffc-4e7b-83b3-74d98cd052b9": {"__data__": {"text": "\n\nTokens\n\n- **Tokens** are digital units of value issued on a blockchain. They can be redeemed for assets or value held. Tokens can be of the types: Fungible Token (FT), Non-Fungible Token (NFT), and Semi-Fungible Token (SFT).\n\n", "doc_id": "a374bcba-bffc-4e7b-83b3-74d98cd052b9", "embedding": null, "doc_hash": "7c2520856ca2a2f42dfec951b91b9931eb7cadd7574c565385344705035398d2", "extra_info": null, "node_info": {"start": 0, "end": 228, "_node_type": "1"}, "relationships": {"1": "6766e09d-be70-4a7f-a0db-8062ffa906ca"}}, "__type__": "1"}, "189a8a93-cbf7-41e9-8434-2410258f880c": {"__data__": {"text": "\n\nTransaction\n\n- A raw **transaction** contains the following fields:\n  - Sender (account address)\n  - Transaction script\n  - Gas price\n  - Maximum gas amount\n  - Sequence number\n  - Expiration time\n- A signed transaction is a raw transaction with the digital signature.\n- An executed transaction changes the state of the Aptos blockchain.\n\n", "doc_id": "189a8a93-cbf7-41e9-8434-2410258f880c", "embedding": null, "doc_hash": "6ca347734e8a8378cad94e1f5e068eb9f79715ceeaa654b59197b78c25a30380", "extra_info": null, "node_info": {"start": 0, "end": 341, "_node_type": "1"}, "relationships": {"1": "164f5556-1567-4c0f-8f56-12e246077b81"}}, "__type__": "1"}, "81ad88f4-04bf-47a9-94c1-7dfbce849cb7": {"__data__": {"text": "\n\nTransaction (or Move) Script\n\n- Each transaction submitted by a user includes a **transaction script**.\n- These transactions, also know as Move scripts, represent the operations a client submits to a validator.\n- The operation could be a request to move coins from user A to user B, or it could involve interactions with published Move modules (smart contracts).\n- The transaction script is an arbitrary program that interacts with resources published in the global storage of the Aptos blockchain by calling the procedures of a module. It encodes the logic for a transaction.\n- A single transaction script can send funds to multiple recipients and invoke procedures from several different modules.\n- A transaction script **is not** stored in the global state and cannot be invoked by other transaction scripts. It is a single-use program.\n\nTo see example uses of transaction scripts, follow Move scripts and the Your First Multisig tutorial.\n\n", "doc_id": "81ad88f4-04bf-47a9-94c1-7dfbce849cb7", "embedding": null, "doc_hash": "d4644e19fc7869b6814ef643756e7f280d566e8f0f83f9c78c6a45e3135b5e10", "extra_info": null, "node_info": {"start": 0, "end": 946, "_node_type": "1"}, "relationships": {"1": "ae08fb7b-2f0f-4945-b120-3b66f07f0ca7"}}, "__type__": "1"}, "cc00ef9a-967f-41c2-85e9-a06182348206": {"__data__": {"text": "\n\nV\n\n", "doc_id": "cc00ef9a-967f-41c2-85e9-a06182348206", "embedding": null, "doc_hash": "d4fc8819d63823ca95a6dc8054b565a6e07cc91878cc45b6b33242b7c8d5a9a0", "extra_info": null, "node_info": {"start": 0, "end": 5, "_node_type": "1"}, "relationships": {"1": "08690d1b-ff95-4c65-b857-52b41a5fce68"}}, "__type__": "1"}, "7416944d-dada-4a00-916f-1e7c8bccb085": {"__data__": {"text": "\n\nValidator\n\n- _Alternate name_: Validators.\n- A **validator** is an entity of the Aptos ecosystem that validates on the Aptos blockchain. It receives requests from clients and runs consensus, execution, and storage.\n- A validator maintains the history of all the transactions on the blockchain.\n- Internally, a validator needs to keep the current state, to execute transactions, and to calculate the next state.\n- Aptos validators are in charge of verifying transactions.\n\n", "doc_id": "7416944d-dada-4a00-916f-1e7c8bccb085", "embedding": null, "doc_hash": "6cf9900deb03c5fab0be1a5b94d90b3b96c6a9fde189bdcdd85f51bfb5dd9275", "extra_info": null, "node_info": {"start": 0, "end": 474, "_node_type": "1"}, "relationships": {"1": "7eb22a5f-6ba8-4a59-ac34-1f7ce983ec9d"}}, "__type__": "1"}, "0ac11f3b-44ce-4fd9-814c-1b720a861867": {"__data__": {"text": "\n\nValidator Nodes\n\n- **Validator nodes** are a unique class of fullnodes that take part in consensus, specifically a Byzantine Fault Tolerance (BFT) consensus protocol in Aptos. Validators agree upon transactions to be added to the Aptos blockchain as well as the order in which they are added. \n\n", "doc_id": "0ac11f3b-44ce-4fd9-814c-1b720a861867", "embedding": null, "doc_hash": "e9473098f5743a2226a0b4db4a8a38248a3c16da128461bc08d4d7e42ede744f", "extra_info": null, "node_info": {"start": 0, "end": 297, "_node_type": "1"}, "relationships": {"1": "6383dcbd-5e80-4be5-a945-2fd09b3fecec"}}, "__type__": "1"}, "5d538d51-2111-4a33-b6ac-9312bdd45c7f": {"__data__": {"text": "\n\nVersion\n\n- A **version** is also called \u201cheight\u201d in blockchain literature.\n- The Aptos blockchain doesn't have an explicit notion of a block &mdash; it only uses blocks for batching and executing transactions.\n- A transaction at height 0 is the first transaction (genesis transaction), and a transaction at height 100 is the 101st transaction in the transaction store.\n\n", "doc_id": "5d538d51-2111-4a33-b6ac-9312bdd45c7f", "embedding": null, "doc_hash": "0496446b564f9cf7a4f41e7dbe27ac318914494ede42062ef0227b77386207f0", "extra_info": null, "node_info": {"start": 0, "end": 372, "_node_type": "1"}, "relationships": {"1": "c56fd3fb-b2f9-470c-bfc8-dc44c85abcef"}}, "__type__": "1"}, "c9e8d5ca-0a62-4871-9d03-c77dabab51d7": {"__data__": {"text": "\n\nW\n\n", "doc_id": "c9e8d5ca-0a62-4871-9d03-c77dabab51d7", "embedding": null, "doc_hash": "ea4d9d3ec48335b8c64e7304768dec384e8d29dca5c527565c4751761349298b", "extra_info": null, "node_info": {"start": 0, "end": 5, "_node_type": "1"}, "relationships": {"1": "8984e008-85af-42ae-921d-989fdce6fb29"}}, "__type__": "1"}, "7469e56c-eb3f-4758-9a81-06d043031e09": {"__data__": {"text": "\n\nWell-Formed Transaction\n\nAn Aptos transaction is **well formed** if each of the following conditions are true for the transaction:\n\n- The transaction has a valid signature.\n- An account exists at the sender address.\n- It includes a public key, and the hash of the public key matches the sender account's authentication key.\n- The sequence number of the transaction matches the sender account's sequence number.\n- The sender account's balance is greater than the maximum gas amount.\n- The expiration time of the transaction has not passed.\n\n", "doc_id": "7469e56c-eb3f-4758-9a81-06d043031e09", "embedding": null, "doc_hash": "f3de1d3c097f65d1eca1928344f60d47279da6a3b972604d14d3648d24c40f28", "extra_info": null, "node_info": {"start": 0, "end": 542, "_node_type": "1"}, "relationships": {"1": "9ece1d9f-b93d-44d4-b775-a76fc90b325f"}}, "__type__": "1"}, "e83371bf-389e-44ad-881f-7e15b8019dcc": {"__data__": {"text": "\n\nGovernance\n\nThe Aptos on-chain governance is a process by which the Aptos community members can create and vote on proposals that minimize the cost of blockchain upgrades. The following describes the scope of these proposals for the Aptos on-chain governance:\n\n- Changes to the blockchain parameters, for example, the epoch duration, and the minimum required and maximum allowed validator stake.\n- Changes to the core blockchain code. \n- Upgrades to the Aptos Framework modules for fixing bugs or for adding or enhancing the Aptos blockchain functionality.\n- Deploying new framework modules (at the address `0x1` - `0xa`).\n\n", "doc_id": "e83371bf-389e-44ad-881f-7e15b8019dcc", "embedding": null, "doc_hash": "70a4e9fcc236fb11efe5176a713c84d1321511c9683567d6f40abe9fe45d54de", "extra_info": null, "node_info": {"start": 0, "end": 626, "_node_type": "1"}, "relationships": {"1": "0cc902f0-893d-4974-bb84-62d99cb8dbc2"}}, "__type__": "1"}, "f7f56cfb-efc5-4dff-a7c2-252edb9ad702": {"__data__": {"text": "\n\nHow a proposal becomes ready to be resolved\n\nSee below for a summary description of how a proposal comes to exist and when it becomes ready to be resolved:\n\n<ThemedImage\nalt=\"Proposal voting flow\"\nsources={{\n    light: useBaseUrl('/img/docs/voting-resolution-flow.svg'),\n    dark: useBaseUrl('/img/docs/voting-resolution-flow-dark.svg'),\n  }}\n/>\n\n- The  Aptos community can suggest an Aptos Improvement Proposal (AIP) in the Aptos Foundation AIP GitHub.\n- When appropriate, an on-chain proposal can be created for the AIP via the `aptos_governance` module. \n- Voters can then vote on this proposal on-chain via the `aptos_governance` module. If there is sufficient support for a proposal, then it can be resolved.\n- Governance requires a minimal number of votes to be cast by an expiration threshold. However, if sufficient votes, more than 50% of the total supply, are accumulated prior to that threshold, the proposal can be executed **without waiting for the full voting period**.\n\n", "doc_id": "f7f56cfb-efc5-4dff-a7c2-252edb9ad702", "embedding": null, "doc_hash": "aad5297176d9d882905296282657eb769cbb81b8e04fbc48fe240951b75e98fc", "extra_info": null, "node_info": {"start": 0, "end": 987, "_node_type": "1"}, "relationships": {"1": "0c14efea-afc4-48bd-8325-e1184438d847"}}, "__type__": "1"}, "e10fba76-efb3-4c41-9e7c-cac075c20456": {"__data__": {"text": "\n\nWho can propose\n\n- To either propose or vote, you must stake, but you are not required to run a validator node. However, we recommend that you run validator with a stake as part of the validator set to gain rewards from your stake.\n- To create a proposal, the proposer's backing stake pool must have the minimum required proposer stake. The proposer's stake must be locked up for at least as long as the proposal's voting period. This is to avoid potential spammy proposals. \n- Proposers can create a proposal by calling `aptos_governance::create_proposal`.\n\n", "doc_id": "e10fba76-efb3-4c41-9e7c-cac075c20456", "embedding": null, "doc_hash": "b27f35550b4042d00c77d2a07b809b20ba9495eea4df84b50bfd6b74bef9c6af", "extra_info": null, "node_info": {"start": 0, "end": 561, "_node_type": "1"}, "relationships": {"1": "8d55f6b1-4f6d-413b-a995-bd0584ca362b"}}, "__type__": "1"}, "07001baf-0b5f-42ad-8337-e8a619212731": {"__data__": {"text": "\n\nWho can vote\n\n- To vote, you must stake, though you are not required to run a validator node. Your voting power is derived from the backing stake pool. \n- Voting power is calculated based on the current epoch's active stake of the proposer or voter's backing stake pool. In addition, the stake pool's lockup must be at least as long as the proposal's duration.\n- Verify proposals before voting. Ensure each proposal is linked to its source code, and if there is a corresponding AIP, the AIP is in the title and description.\n\n:::tip\nEach stake pool can be used to vote on each proposal exactly only one time.\n:::\n\n", "doc_id": "07001baf-0b5f-42ad-8337-e8a619212731", "embedding": null, "doc_hash": "278dff4b8eaec7ba40f85128243c366dd7257ff73d12af714ea8f0e20d67d257", "extra_info": null, "node_info": {"start": 0, "end": 615, "_node_type": "1"}, "relationships": {"1": "4e8508c7-1655-402a-a44c-eae02ceb1211"}}, "__type__": "1"}, "6dbdfca3-924b-4be4-8a57-cbfaddb10680": {"__data__": {"text": "\n\nWho can resolve\n- Anyone can resolve an on-chain proposal that has passed voting requirements by using the `aptos governance execute-proposal` command from Aptos CLI. \n\n", "doc_id": "6dbdfca3-924b-4be4-8a57-cbfaddb10680", "embedding": null, "doc_hash": "d40b7c8d9df622a1e584d8b5665f77ca6890433227662ef94ab6489c92c6ea29", "extra_info": null, "node_info": {"start": 0, "end": 171, "_node_type": "1"}, "relationships": {"1": "47831282-51f3-464c-b1b9-17c823220e95"}}, "__type__": "1"}, "b7524b16-3059-4a41-b96d-90accc5bd682": {"__data__": {"text": "\n\nAptos Improvement Proposals (AIPs)\n\nAIPs are proposals created by the Aptos community or the Aptos Labs team to improve the operations and development of the Aptos chain. \nTo submit an AIP, create an issue in `Aptos Foundation's GitHub repository` using the template\nTo keep up with new AIPs, check the `#aip-announcements` channel on Aptos' discord channel. \nTo view and vote on on-chain proposals, go to `Aptos' Governance website`. \n\n", "doc_id": "b7524b16-3059-4a41-b96d-90accc5bd682", "embedding": null, "doc_hash": "6fb286565627992b11d786fa462ce4d40bbb6565ebc478bc538ada4bdf5a12e1", "extra_info": null, "node_info": {"start": 0, "end": 439, "_node_type": "1"}, "relationships": {"1": "d1968bf4-ebb8-484a-86a7-e65acb1eac7d"}}, "__type__": "1"}, "46da6b03-644d-4e7a-b99e-4b565e1a54d8": {"__data__": {"text": "\n\nTechnical Implementation of Aptos Governance\nThe majority of the governance logic is in `aptos_governance.move and voting.move`. \nThe `aptos_governance` module outlines how users can interact with Aptos Governance. It's the external-facing module of the Aptos on-chain governance process and contains logic and checks that are specific to Aptos Governance.\nThe `voting` module is the Aptos governance standard that can be used by DAOs on the Aptos chain to create their own on-chain governance process.\n\nIf you are thinking about creating a DAO on Aptos, you can refer to `aptos_governance`'s usage of the `voting` module as an example. \nIn `aptos_governance`, we rely on the `voting` module to create, vote on, and resolve a proposal.\n- `aptos_governance::create_proposal` calls `voting::create_proposal` to create a proposal on-chain, when an off-chain AIP acquires sufficient importance. \n- `aptos_governance::vote` calls `voting::vote` to record the vote on a proposal on-chain; \n- `aptos_governance::resolve` can be called by anyone. It calls `voting::resolve` to resolve the proposal on-chain. \n\n", "doc_id": "46da6b03-644d-4e7a-b99e-4b565e1a54d8", "embedding": null, "doc_hash": "296ea5d965ed6f013046c23a9ab3b961ada39ed1e1da349db9b0cdcd4f927da6", "extra_info": null, "node_info": {"start": 0, "end": 1104, "_node_type": "1"}, "relationships": {"1": "52c6b19e-6042-40a3-b58d-6ae76e65fbc3"}}, "__type__": "1"}, "7af87fe0-93ba-4cb7-aa6b-50f615d665e7": {"__data__": {"text": "\n\nHandle Errors in Aptos\n\nThis page catalogs common errors encountered in the Aptos blockchain and explains how to resolve them wherever possible. As with all software, the code itself is the source of truth for error handling and will always contain entries not found here. Instead, this matrix aims to help you address those errors most typically found, misunderstood, or both.\n\nFor the sources of these errors, see:\n\n  * vm_status.rs\n  * error.move\n  * account.move\n  * coin.move\n  * token.move\n  * token_transfers.move\n\nHelp us update this list by sending pull requests containing the errors you encounter. If you don't know how to resolve the error, as described int the *Action* column, simply leave it blank.\n\n", "doc_id": "7af87fe0-93ba-4cb7-aa6b-50f615d665e7", "embedding": null, "doc_hash": "5ea9c5e4d7e4c0f74fe59a486bab0accf530ae3911094f488a228fb9bac1bebd", "extra_info": null, "node_info": {"start": 0, "end": 717, "_node_type": "1"}, "relationships": {"1": "e808703f-b0ef-49b5-a124-cc370047eda1"}}, "__type__": "1"}, "fef74169-0d53-430c-93ac-26da4328f514": {"__data__": {"text": "\n\nMove Virtual Machine (VM)\n\n| Error | Meaning  | Possible Resolution |\n| --- | :---: | --- |\n|LOOKUP_FAILED| A function that is being called isn't present on the network being used | Check that your dependencies onchain have the same version |\n|UNKNOWN_VALIDATION_STATUS|We don't want the default value to be valid.| N/A |\n|INVALID_SIGNATURE|The transaction has a bad signature.| Submit a new transaction with a new signature |\n|INVALID_AUTH_KEY|Bad account authentication key.| Submit a new transaction with a new signature, check that the account matches the authentication key and hasn't been rotated |\n|SEQUENCE_NUMBER_TOO_OLD|Sequence number is too old.| Submit a new transaction with a newer sequence number from the account |\n|SEQUENCE_NUMBER_TOO_NEW|Sequence number is too new.| Submit a new transaction with a new signature |\n|INSUFFICIENT_BALANCE_FOR_TRANSACTION_FEE|Insufficient balance to pay minimum transaction fee.| Fund the account with more APT to pay for the gas fee |\n|TRANSACTION_EXPIRED|The transaction has expired.| Submit a new transaction with an expiration time further in the future |\n|SENDING_ACCOUNT_DOES_NOT_EXIST|The sending account does not exist.| Create the account prior to sending the transaction again |\n|REJECTED_WRITE_SET|This write set transaction was rejected because it did not meet the requirements for one.| N/A |\n|INVALID_WRITE_SET|This write set transaction cannot be applied to the current state.| N/A |\n|EXCEEDED_MAX_TRANSACTION_SIZE|Length of program field in raw transaction exceeded max length.| The transaction is too large for a single transaction; if this is a package publish, try to break it into multiple packages |\n|UNKNOWN_SCRIPT|This script is not in our allowlist of scripts.| N/A |\n|UNKNOWN_MODULE|Transaction is trying to publish a new module.| N/A |\n|MAX_GAS_UNITS_EXCEEDS_MAX_GAS_UNITS_BOUND|Max gas units submitted with transaction exceeds max gas units bound in VM.| Decrease the max gas amount in the transaction below the maximum value in the gas schedule |\n|MAX_GAS_UNITS_BELOW_MIN_TRANSACTION_GAS_UNITS|Max gas units submitted with transaction not enough to cover the intrinsic cost of the transaction.| Increase the max gas amount above the minimum value in the gas schedule |\n|GAS_UNIT_PRICE_BELOW_MIN_BOUND|Gas unit price submitted with transaction is below minimum gas price set in the VM.| Increase the gas unit price below the minimum gas unit price in the gas schedule |\n|GAS_UNIT_PRICE_ABOVE_MAX_BOUND|Gas unit price submitted with the transaction is above the maximum gas price set in the VM.| Decrease the gas unit price below the maximum gas unit price in the gas schedule |\n|INVALID_GAS_SPECIFIER|Gas specifier submitted is either malformed (not a valid identifier), or does not refer to an accepted gas specifier.| N/A |\n|SENDING_ACCOUNT_FROZEN|The sending account is frozen.| N/A |\n|UNABLE_TO_DESERIALIZE_ACCOUNT|Unable to deserialize the account blob.| N/A |\n|CURRENCY_INFO_DOES_NOT_EXIST|The currency info was unable to be found.| N/A |\n|INVALID_MODULE_PUBLISHER|The account sender doesn't have permissions to publish modules.| N/A |\n|NO_ACCOUNT_ROLE|The sending account has no role.| N/A |\n|BAD_CHAIN_ID|The transaction's chain_id does not match the one published on-chain.| Verify that your chain ID matches the chain ID for your network", "doc_id": "fef74169-0d53-430c-93ac-26da4328f514", "embedding": null, "doc_hash": "f7a86eb37c4d422853efa495ed54068d7796a73d3e367d606c13057ba3affebd", "extra_info": null, "node_info": {"start": 0, "end": 3326, "_node_type": "1"}, "relationships": {"1": "7e2080aa-54d4-4cef-92d6-f7ca34245f66", "3": "13db9405-9722-4b15-a11b-8322745040ef"}}, "__type__": "1"}, "13db9405-9722-4b15-a11b-8322745040ef": {"__data__": {"text": "published on-chain.| Verify that your chain ID matches the chain ID for your network |\n|SEQUENCE_NUMBER_TOO_BIG|The sequence number is too large and would overflow if the transaction were executed.| N/A |\n|BAD_TRANSACTION_FEE_CURRENCY|The gas currency is not registered as a TransactionFee currency.| N/A |\n|FEATURE_UNDER_GATING|The feature requested is intended for a future Aptos version instead of the current one.| N/A |\n|SECONDARY_KEYS_ADDRESSES_COUNT_MISMATCH|The number of secondary signer addresses is different from the number of secondary public keys provided.| Verify the multi-agent or multi-ed25519 secondary signer addresses match the secondary public keys |\n|SIGNERS_CONTAIN_DUPLICATES|There are duplicates among signers, including the sender and all the secondary signers.| Remove any duplicate signers |\n|SEQUENCE_NONCE_INVALID|The sequence nonce in the transaction is invalid (too new, too old, or already used).| N/A |\n|CHAIN_ACCOUNT_INFO_DOES_NOT_EXIST|There was an error when accessing chain-specific account information.| N/A |\n|MODULE_ADDRESS_DOES_NOT_MATCH_SENDER|the module publisher is not the account that will eventually hold the module.| Confirm the module address in the move contract matches the sender of the transaction |\n|ZERO_SIZED_STRUCT|Reported when a struct has zero fields.| N/A |\n|DUPLICATE_MODULE_NAME|The sender is trying to publish two modules with the same name in one transaction.| Confirm every module has a unique name |\n|BACKWARD_INCOMPATIBLE_MODULE_UPDATE|The sender is trying to publish a module that breaks the compatibility checks.| Confirm your new modules being published don't break backwards compatibility |\n|CYCLIC_MODULE_DEPENDENCY|The updated module introduces a cyclic dependency (i.e., A uses B and B also uses A).| Check for loops in your module dependencies in the modules being published |\n|INVALID_FRIEND_DECL_WITH_SELF|Cannot mark the module itself as a friend.| Confirm no module has itself marked as a friend in the modules being published |\n|INVALID_FRIEND_DECL_WITH_MODULES_OUTSIDE_ACCOUNT_ADDRESS|Cannot declare modules outside of account address as friends.| Confirm all friends are in the same account address in the modules being published |\n|INVALID_FRIEND_DECL_WITH_MODULES_IN_DEPENDENCIES|Cannot declare modules that this module depends on as friends.| Check friend declarations of the modules being published |\n|CYCLIC_MODULE_FRIENDSHIP|The updated module introduces a cyclic friendship (i.e., A friends B and B also friends A).| Check friend declarations of the modules being published |\n|INVALID_PHANTOM_TYPE_PARAM_POSITION|A phantom type parameter was used in a non-phantom position.| Confirm phantom types are used only with generics |\n|LOOP_MAX_DEPTH_REACHED|Loops are too deeply nested.| Check for many nested loops |\n|TYPE_RESOLUTION_FAILURE|Failed to resolve type due to linking being broken after verification.| N/A |\n|RESOURCE_DOES_NOT_EXIST|We tried to access a resource that does not exist under the account.| Check the contract and possibly change it to handle resources that don't exist |\n|RESOURCE_ALREADY_EXISTS|We tried to create a resource under an account where that resource already exists.| Check the contract and possibly change it to handle resources that already exist |\n|UNKNOWN_STATUS|A reserved status to represent an unknown vm status. This is std::u64::MAX, but we can't pattern match on that, so put the hardcoded value in.| N/A |\n|LINKER_ERROR|This may be due to the function has not been", "doc_id": "13db9405-9722-4b15-a11b-8322745040ef", "embedding": null, "doc_hash": "a76358a0b5e656813cd6ee2ffcd487cc5340237b81ade93f3d622f1a60df8735", "extra_info": null, "node_info": {"start": 3256, "end": 6754, "_node_type": "1"}, "relationships": {"1": "7e2080aa-54d4-4cef-92d6-f7ca34245f66", "2": "fef74169-0d53-430c-93ac-26da4328f514", "3": "a18fb814-70f8-4dbc-90b8-b0918437d688"}}, "__type__": "1"}, "a18fb814-70f8-4dbc-90b8-b0918437d688": {"__data__": {"text": "|\n|LINKER_ERROR|This may be due to the function has not been published on chain or by trying to call an invalid function as the result of either an incorrect account address, module name, or function name. This might not happen locally if the sources are available locally but have yet to be published on-chain.| There are many reasons, but you should check your account addresses, module names, and function names to determine that they're correct and published |\n\n", "doc_id": "a18fb814-70f8-4dbc-90b8-b0918437d688", "embedding": null, "doc_hash": "5211479907cc17f82e7581ae854b281218a8fb94b7bfb40c4ed1cdc825a11919", "extra_info": null, "node_info": {"start": 6765, "end": 7231, "_node_type": "1"}, "relationships": {"1": "7e2080aa-54d4-4cef-92d6-f7ca34245f66", "2": "13db9405-9722-4b15-a11b-8322745040ef"}}, "__type__": "1"}, "12a30353-565b-4d0b-ae1a-1b9f7cf4316d": {"__data__": {"text": "\n\nMove Standard Library (stdlib)\n\n| Error | Meaning  |\n| --- | :---: |\n|INVALID_ARGUMENT|Caller specified an invalid argument (http: 400).|\n|OUT_OF_RANGE|An input or result of a computation is out of range (http: 400).|\n|INVALID_STATE|The system is not in a state where the operation can be performed (http: 400).|\n|UNAUTHENTICATED|Request not authenticated due to missing, invalid, or expired auth token (http: 401).|\n|PERMISSION_DENIED|The client does not have sufficient permission (http: 403).|\n|NOT_FOUND|A specified resource is not found (http: 404).|\n|ABORTED|Concurrency conflict, such as read-modify-write conflict (http: 409).|\n|ALREADY_EXISTS|The resource that a client tried to create already exists (http: 409).|\n|RESOURCE_EXHAUSTED|Out of gas or other forms of quota (http: 429).|\n|CANCELLED|Request cancelled by the client (http: 499).|\n|INTERNAL|Internal error (http: 500).|\n|NOT_IMPLEMENTED|Feature not implemented (http: 501).|\n|UNAVAILABLE|The service is currently unavailable. Indicates that a retry could solve the issue (http: 503).|\n\n", "doc_id": "12a30353-565b-4d0b-ae1a-1b9f7cf4316d", "embedding": null, "doc_hash": "2f102a0559ac893974a80bd57bf51b81e46a1fcb64666912a24eb3ca6dd9c359", "extra_info": null, "node_info": {"start": 0, "end": 1057, "_node_type": "1"}, "relationships": {"1": "23480905-dd0b-459f-ac0b-44f8bb4b99df"}}, "__type__": "1"}, "1c121e3b-71e5-4863-9f7a-bec3c781f99e": {"__data__": {"text": "\n\nAptos accounts\n\n| Error | Meaning  | Possible Resolution |\n| --- | :---: | --- |\n|EACCOUNT_ALREADY_EXISTS|Account already exists.| N/A |\n|EACCOUNT_DOES_NOT_EXIST|Account does not exist.| Create the account first |\n|ESEQUENCE_NUMBER_TOO_BIG|Sequence number exceeds the maximum value for a u64.| Provide a smaller sequence number |\n|EMALFORMED_AUTHENTICATION_KEY|The provided authentication key has an invalid length.| Check your authentication key; it should be a 32-byte vector |\n|ECANNOT_RESERVED_ADDRESS|Cannot create account because address is reserved.| N/A |\n|EOUT_OF_GAS|Transaction exceeded its allocated max gas.| Increase the max gas amount |\n|EWRONG_CURRENT_PUBLIC_KEY|Specified current public key is not correct.| Confirm the public key matches the account |\n|EINVALID_PROOF_OF_KNOWLEDGE|Specified proof of knowledge required to prove ownership of a public key is invalid.| Check your proof of knowledge in key rotation to ensure it has proper signatures |\n|ENO_CAPABILITY|The caller does not have a digital-signature-based capability to call this function.| Confirm you have the capability for the called functions |\n|EINVALID_ACCEPT_ROTATION_CAPABILITY|The caller does not have a valid rotation capability offer from the other account.| Confirm the account being rotated is correct |\n|ENO_VALID_FRAMEWORK_RESERVED_ADDRESS|Address to create is not a valid reserved address for Aptos framework.| N/A |\n|EINVALID_SCHEME|Specified scheme required to proceed with the smart contract operation - can only be ED25519_SCHEME(0) OR MULTI_ED25519_SCHEME(1).| Confirm the transaction was signed correctly when creating the account |\n|EINVALID_ORIGINATING_ADDRESS|Abort the transaction if the expected originating address is different from the originating address on-chain.| Confirm you are rotating the correct account's key |\n|ENO_SUCH_SIGNER_CAPABILITY|The signer capability doesn't exist at the given address.| Confirm the address is correct |\n\n", "doc_id": "1c121e3b-71e5-4863-9f7a-bec3c781f99e", "embedding": null, "doc_hash": "e92d0ed1da0cc6c3ccc5ed92f1781a8fc8189df7df98e026cd5287421c828102", "extra_info": null, "node_info": {"start": 0, "end": 1952, "_node_type": "1"}, "relationships": {"1": "0c13dc53-0e41-4464-b694-f336f2ba61c3"}}, "__type__": "1"}, "84153dd7-f43b-44f0-a864-70198a0b3e61": {"__data__": {"text": "\n\nAptos coins\n\n| Error | Meaning  | Possible Resolution |\n| --- | :---: | --- |\n|ECOIN_INFO_ADDRESS_MISMATCH|Address of account which is used to initialize a coin `CoinType` doesn't match the deployer of module.| Create the coin using a `CoinType` in the same account creating the coin. |\n|ECOIN_INFO_ALREADY_PUBLISHED|`CoinType` is already initialized as a coin.| N/A |\n|ECOIN_INFO_NOT_PUBLISHED|`CoinType` hasn't been initialized as a coin.| Create the coin with `CoinType` first before using it |\n|ECOIN_STORE_ALREADY_PUBLISHED|Account already has `CoinStore` registered for `CoinType`.| N/A |\n|ECOIN_STORE_NOT_PUBLISHED|Account hasn't registered `CoinStore` for `CoinType`.| Register the account for the `CoinType` |\n|EINSUFFICIENT_BALANCE|Not enough coins to complete transaction.| Transfer less coins, or acquire more coins prior to the transfer |\n|EDESTRUCTION_OF_NONZERO_TOKEN|Cannot destroy non-zero coins.| N/A |\n|EZERO_COIN_AMOUNT|Coin amount cannot be zero.| Don't burn coins or conduct other actions with zero coins |\n|EFROZEN|CoinStore is frozen. Coins cannot be deposited or withdrawn.| Account is frozen for this token; talk to the coin owner |\n|ECOIN_SUPPLY_UPGRADE_NOT_SUPPORTED|Cannot upgrade the total supply of coins to different implementation.| N/A |\n|ECOIN_NAME_TOO_LONG|Name of the coin is too long.| Coin name must be less than or equal to 32 characters |\n|ECOIN_SYMBOL_TOO_LONG|Symbol of the coin is too long.| Coin symbol must be less than or equal to 10 characters |\n\n", "doc_id": "84153dd7-f43b-44f0-a864-70198a0b3e61", "embedding": null, "doc_hash": "9175922a06176452d81ba27c8358062b1a77226cce2eeb50d96accdf66f22fae", "extra_info": null, "node_info": {"start": 0, "end": 1497, "_node_type": "1"}, "relationships": {"1": "5a53e60e-69b8-4079-86ef-835b90a2d372"}}, "__type__": "1"}, "9197d8af-55a6-4b0b-a846-238548e95cb3": {"__data__": {"text": "\n\nAptos tokens\n\n| Error | Meaning  |\n| --- | :---: |\n|EALREADY_HAS_BALANCE|The token has balance and cannot be initialized.|\n|ECOLLECTIONS_NOT_PUBLISHED|There isn't any collection under this account.|\n|ECOLLECTION_NOT_PUBLISHED|Cannot find collection in creator's account.|\n|ECOLLECTION_ALREADY_EXISTS|The collection already exists.|\n|ECREATE_WOULD_EXCEED_COLLECTION_MAXIMUM|Exceeds the collection's maximal number of token_data.|\n|EINSUFFICIENT_BALANCE|Insufficient token balance.|\n|EINVALID_TOKEN_MERGE|Cannot merge the two tokens with different token IDs.|\n|EMINT_WOULD_EXCEED_TOKEN_MAXIMUM|Exceed the token data maximal allowed.|\n|ENO_BURN_CAPABILITY|No burn capability.|\n|ETOKEN_DATA_ALREADY_EXISTS|TokenData already exists.|\n|ETOKEN_DATA_NOT_PUBLISHED|TokenData not published.|\n|ETOKEN_STORE_NOT_PUBLISHED|TokenStore doesn't exist.|\n|ETOKEN_SPLIT_AMOUNT_LARGER_THAN_TOKEN_AMOUNT|Cannot split token to an amount larger than its amount.|\n|EFIELD_NOT_MUTABLE|The field is not mutable.|\n|ENO_MUTATE_CAPABILITY|Not authorized to mutate.|\n|ENO_TOKEN_IN_TOKEN_STORE|Token not in the token store.|\n|EUSER_NOT_OPT_IN_DIRECT_TRANSFER|User didn't opt-in direct transfer.|\n|EWITHDRAW_ZERO|Cannot withdraw 0 token.|\n|ENFT_NOT_SPLITABLE|Cannot split a token that only has 1 amount.|\n|ENO_MINT_CAPABILITY|No mint capability|\n|ECOLLECTION_NAME_TOO_LONG|The collection name is too long.|\n|ENFT_NAME_TOO_LONG|The NFT name is too long.|\n|EURI_TOO_LONG|The URI is too long.|\n|ENO_DEPOSIT_TOKEN_WITH_ZERO_AMOUNT|Cannot deposit a token with 0 amount.|\n|ENO_BURN_TOKEN_WITH_ZERO_AMOUNT|Cannot burn 0 token.|\n|EWITHDRAW_PROOF_EXPIRES|Withdraw proof expires.|\n|EOWNER_CANNOT_BURN_TOKEN|Token is not burnable by owner.|\n|ECREATOR_CANNOT_BURN_TOKEN|Token is not burnable by creator.|\n|ECANNOT_UPDATE_RESERVED_PROPERTY|Reserved fields for token contract. Cannot be updated by user.|\n|EURI_TOO_SHORT|URI too short.|\n|ETOKEN_OFFER_NOT_EXIST|Token offer doesn't exist.|\n\n", "doc_id": "9197d8af-55a6-4b0b-a846-238548e95cb3", "embedding": null, "doc_hash": "b62151891f688747b0de71070e629e94ff3c79b9a8ff39b3797dc4ff8c51e84d", "extra_info": null, "node_info": {"start": 0, "end": 1946, "_node_type": "1"}, "relationships": {"1": "aaf6782a-b13f-4e1e-8539-4c1138bab937"}}, "__type__": "1"}, "3457e49a-a37d-4176-b5e4-669bbd004bc4": {"__data__": {"text": "\n\nNode Identity and Configuration\n\nWhen installing a node on an Aptos network, the installation steps require you to work with identities and configurations. This document describes how to interpret the terms **identity** and **configuration**, and presents a description of the identity YAML files.\n\n", "doc_id": "3457e49a-a37d-4176-b5e4-669bbd004bc4", "embedding": null, "doc_hash": "336c09e4be89c4898890ce53a2bc2d5033fb0a3eb5ef1d651908d84c94d3af39", "extra_info": null, "node_info": {"start": 0, "end": 301, "_node_type": "1"}, "relationships": {"1": "a12dd3a0-c76e-45f6-8cab-a9af636740be"}}, "__type__": "1"}, "ae7f0a13-5f14-4148-91a1-2e44d834d43c": {"__data__": {"text": "\n\nConcept\n\nThis section presents a mental-model view of an identity and configuration. It is meant to help make the node installation process easy.\n\nThe terms **identity** and **configuration** should be understood in the following way:\n\n- The terms **validator node**, **fullnode**, and **validator fullnode** refer to the machine (physical or virtual).\n- The terms **operator**, **owner** and **voter** refer to the persona. \n- A machine has both an identity and a configuration. They are defined in separate YAML files. A persona's identity and configuration are combined into a single YAML file.\n\n", "doc_id": "ae7f0a13-5f14-4148-91a1-2e44d834d43c", "embedding": null, "doc_hash": "4a6b371b60460e382c82c5cca3c814edda581e4c4b68c145d7b36b2a045b8556", "extra_info": null, "node_info": {"start": 0, "end": 601, "_node_type": "1"}, "relationships": {"1": "35416d19-098e-41d7-a7ec-23e8b7fa581b"}}, "__type__": "1"}, "1b0f8eed-a79a-4899-9951-ea8df3c3f7d1": {"__data__": {"text": "\n\nMachine\n\n", "doc_id": "1b0f8eed-a79a-4899-9951-ea8df3c3f7d1", "embedding": null, "doc_hash": "a3cd2ce737ce1bd6f368c59c6f6113081adaa681555f155a742f717fee578582", "extra_info": null, "node_info": {"start": 0, "end": 11, "_node_type": "1"}, "relationships": {"1": "b6a2edac-6860-4bed-8853-a8ccd390f619"}}, "__type__": "1"}, "f2c09f9c-78fe-48ec-8b13-7db8a5e8d8e1": {"__data__": {"text": "\n\nIdentity\n\nMachine **identity** is defined in a YAML file. An identity is established by means of keys. A machine identity YAML contains only private keys. Moreover, an identity YAML always contains the associated blockchain account address.\n\nA machine identity YAML has the string `identity` in its name. For example:\n\n- validator-**identity**.yaml contains the private keys for the validator node. \n- validator-full-node-**identity**.yaml contains the private keys for validator fullnode and public fullnode. \n\nHence if you are looking for your machine\u2019s private keys, look for YAML filenames with  `identity` in them.\n\n", "doc_id": "f2c09f9c-78fe-48ec-8b13-7db8a5e8d8e1", "embedding": null, "doc_hash": "d84593ba3387944e16808073c21fdc0f4fb2efd55990cdf42f6a51e52e3bddce", "extra_info": null, "node_info": {"start": 0, "end": 623, "_node_type": "1"}, "relationships": {"1": "0174ed96-4bf1-46e4-be9e-3c90009ffd85"}}, "__type__": "1"}, "b0fd348f-5bdd-4b85-aee0-026b4e270cb0": {"__data__": {"text": "\n\nConfiguration\n\nMachine **configuration** is also defined in a YAML file. A machine configuration YAML **never contains any key, public or private**. For example, the configuration YAMLs validator.yaml, fullnode.yaml, docker-compose.yaml and docker-compose-fullnode.yaml **do not contain any keys.** \n\nAs noted earlier, a machine has an identity and a configuration. Hence:\n\n- For a validator node, identity is defined in validator-**identity**.yaml and configuration is in validator.yaml. \n- For a validator fullnode, its identity is defined in validator-full-node-**identity**.yaml and its configuration is defined in fullnode.yaml.\n\n", "doc_id": "b0fd348f-5bdd-4b85-aee0-026b4e270cb0", "embedding": null, "doc_hash": "f6462ab1cb449c722b361f88e3c3ae2e374b3dd53d98891ed1bc98b950699b25", "extra_info": null, "node_info": {"start": 0, "end": 637, "_node_type": "1"}, "relationships": {"1": "8f2108f9-9ca8-40e1-95ff-406b0629315a"}}, "__type__": "1"}, "91a9f52e-1767-42c2-9e23-4aa5e1d7957d": {"__data__": {"text": "\n\nPersona\n\n", "doc_id": "91a9f52e-1767-42c2-9e23-4aa5e1d7957d", "embedding": null, "doc_hash": "f2b8dd94a82637a5d36eea3f60e76c389adb0dba70b713c8aa2a131754228a6e", "extra_info": null, "node_info": {"start": 0, "end": 11, "_node_type": "1"}, "relationships": {"1": "a4417c2b-bcec-4c78-ae7c-792c24060a77"}}, "__type__": "1"}, "890112b2-d1ec-42e6-88ec-02f40f9ff734": {"__data__": {"text": "\n\nIdentity and configuration\n\nA persona has a single YAML that combines the persona\u2019s identity and configuration information. For example, for the three personas, owner, operator and voter:\n\n- An owner's identity-configuration is defined in **owner.yaml**. The owner.yaml contains the public keys and blockchain account addresses for owner, operator and voter, and some owner-specific configuration such as stake amount and commission percentage. \n- An operator\u2019s identity-configuration is defined in **operator.yaml**. The operator.yaml contains public keys and blockchain account address for the operator and some machine configuration information plus a consensus public key and consensus proof of possession key. **Only the operator has the consensus keys.** Neither the owner nor the voter has the consensus keys. \n- A voter's identity-configuration, i.e., voter.yaml, does not exist. \n\n", "doc_id": "890112b2-d1ec-42e6-88ec-02f40f9ff734", "embedding": null, "doc_hash": "979c520d7c34057676123975296412a08fd695ff41154c8f3bc56e0f2db6a6e4", "extra_info": null, "node_info": {"start": 0, "end": 892, "_node_type": "1"}, "relationships": {"1": "6350ea15-0206-4253-9718-fbcd3587e071"}}, "__type__": "1"}, "3cd0919c-29dc-4411-a5b0-d9d68780255a": {"__data__": {"text": "\n\nDescription of identity YAMLs\n\nThis section explains the following key and identity YAML files that are generated during the deployment of a validator node:\n\n- `public-keys.yaml`.\n- `private-keys.yaml`.\n- `validator-identity.yaml`.\n- `validator-full-node-identity.yaml`.\n\nThe following command is used to generate the above key and identity YAMLs. See, for example, Step 10 while using AWS to deploy the validator node, or in Step 10 while using GCP. \n\n```bash\naptos genesis generate-keys --output-dir ~/$WORKSPACE/keys\n```\n\nSee below a diagram that shows how the identities for the validator node and validator fullnode are derived from the private and public keys:\n\n<ThemedImage\nalt=\"Signed Transaction Flow\"\nsources={{\n    light: useBaseUrl('/img/docs/key-yamls.svg'),\n    dark: useBaseUrl('/img/docs/key-yamls-dark.svg'),\n  }}\n/>\n\n", "doc_id": "3cd0919c-29dc-4411-a5b0-d9d68780255a", "embedding": null, "doc_hash": "95435ad764f1973bde1f4466c3e105555703758c070dadeeec4298ff6ff61742", "extra_info": null, "node_info": {"start": 0, "end": 837, "_node_type": "1"}, "relationships": {"1": "6d11e0c1-396f-47d3-83b9-83bbcd2d25d7"}}, "__type__": "1"}, "799b9920-3b8f-43c1-bee2-efc2194260d1": {"__data__": {"text": "\n\npublic-keys.yaml\n\n", "doc_id": "799b9920-3b8f-43c1-bee2-efc2194260d1", "embedding": null, "doc_hash": "8847d7b5e2da5f9b48e1037ede768a909199f9f406dcf8423fb350f5ea3cdbcd", "extra_info": null, "node_info": {"start": 0, "end": 20, "_node_type": "1"}, "relationships": {"1": "d2e31e26-eaab-4475-bac1-c4f653e00610"}}, "__type__": "1"}, "cbb34f1b-1869-4469-b5ec-552735a9b329": {"__data__": {"text": "\n\nExample\n\nClick below to see an example YAML configuration:\n\npublic-keys.yaml\n\n```yaml\n---\naccount_address: a5a643aa695fc5f34927386c8d767cddcc0607933f40c89a7ad78de7804965b8\naccount_public_key: \"0x9ccfc50f334064e1b24455029a5bc1646a2c4dd2b1433de1364470692ba6b99b\"\nconsensus_public_key: \"0xa7e8334381d9f80d33d70da543aea22c87fe9862ab7df5cbef9ee11b5285b89c56e0e7a3a78c1561833b2d6fa4d9d4bf\"\nconsensus_proof_of_possession: \"0xa51dfd1734e581df99c4c637324ee38c3e48e51c61c1e1dd03bd5a84cf1cd5b2fa00e976b9a9ea0e0908f0d53085318c03f24de3ebf86b07ff883effe0142e0d3f24c7c1e36dd198ea4d8eb6f5c5a2f3a188de22720bd1914a9effa6f595de38\"\nfull_node_network_public_key: \"0xa6845691a00d6cfdaa9823c4d12b2b5e13d2ecfdc3049d0f2838c805bfd01633\"\nvalidator_network_public_key: \"0x71f2642aeaa6cbfacf75663cf14d2f6e9e1bd890f9bc1c96900fd225cce01836\"\n```\n \n\n\n", "doc_id": "cbb34f1b-1869-4469-b5ec-552735a9b329", "embedding": null, "doc_hash": "01e56613444429826d77d42ca2931bf9985ee50b61e0911cabe50ff62b611720", "extra_info": null, "node_info": {"start": 0, "end": 820, "_node_type": "1"}, "relationships": {"1": "2e59d76c-f196-44c8-86a9-4c078bbf38b2"}}, "__type__": "1"}, "e64fdb30-ecb1-4488-bb61-facf45569c0b": {"__data__": {"text": "\n\nDescription\n\n| public-keys.yaml | Description |\n| --- | --- |\n| account_address |The Aptos blockchain account address for the operator, i.e., the persona who deploys the validator node.  |\n| account_public_key | The public key associated with the blockchain account. |\n| consensus_public_key | Used only by the operator for validation purpose. |\n| consensus_proof_of_possession | Used only by the operator for validation purpose. |\n| full_node_network_public_key | The public key for the fullnode by which a VFN (validator fullnode) or a PFN (public fullnode) is identified in the Aptos network. |\n| validator_network_public_key | The public key for the validator node and by which the validator node is identified in the Aptos network. |\n\n", "doc_id": "e64fdb30-ecb1-4488-bb61-facf45569c0b", "embedding": null, "doc_hash": "26bc0df0a3c83e884eb2952c937bc23eb1f32d9fbd31e91199e3e22fec7460f1", "extra_info": null, "node_info": {"start": 0, "end": 742, "_node_type": "1"}, "relationships": {"1": "d9e7609a-b1e8-4256-95ec-409d18e1b8e2"}}, "__type__": "1"}, "23daad27-fd80-4543-bcc4-6269007533e6": {"__data__": {"text": "\n\nprivate-keys.yaml\n\n", "doc_id": "23daad27-fd80-4543-bcc4-6269007533e6", "embedding": null, "doc_hash": "ddb39e84c10f818abb3b558def6b0e394f7dfde5d2f261c64ec3c64d46a90b7c", "extra_info": null, "node_info": {"start": 0, "end": 21, "_node_type": "1"}, "relationships": {"1": "66f7c7a1-9b8e-4577-af30-ba27f054fbe1"}}, "__type__": "1"}, "f22d496d-fdac-4b2a-bfe9-ca968c44e58f": {"__data__": {"text": "\n\nExample\n\nClick below to see an example YAML configuration:\n\nprivate-keys.yaml\n\n    \n```yaml\n---\naccount_address: a5a643aa695fc5f34927386c8d767cddcc0607933f40c89a7ad78de7804965b8\naccount_private_key: \"0x80478d60a52f54a88e7095abf48b1f4294a335b30f1066cd73768b9b789e833f\"\nconsensus_private_key: \"0x4aedda33ef3fd71243eb2a926307d8826c95b9939f88e753d62d9bc577e99916\"\nfull_node_network_private_key: \"0x689c11c6e5405219b5eae1312086c801e3a044946afc74429e5157b46fb65b61\"\nvalidator_network_private_key: \"0xa03ec46b24f2f1066d7980dc13b4baf722ba60c367e498e47a657ba0815adb58\"\n```\n\n\n\n", "doc_id": "f22d496d-fdac-4b2a-bfe9-ca968c44e58f", "embedding": null, "doc_hash": "031423ed0cee77cef326d958ca358da9bd33a0635fdbc312d3a655fa20cbfdd6", "extra_info": null, "node_info": {"start": 0, "end": 569, "_node_type": "1"}, "relationships": {"1": "38b6e540-9bf6-4380-9766-667d13c44e44"}}, "__type__": "1"}, "8b6b0983-0f95-46a4-b7f1-1a9985c0f824": {"__data__": {"text": "\n\nDescription\n\n| private-keys.yaml | Description |\n| --- | --- |\n| account_address | The Aptos blockchain account address for the operator, i.e., the persona who deploys the validator node. |\n| account_private_key | The private key associated with the blockchain account. |\n| consensus_private_key | The consensus private key, used only by the operator for validation purpose and for rotating the consensus key.|\n| full_node_network_private_key |The private key for the fullnode. Whoever holds this private key will be able to establish the ownership of the VFN and PFN in the Aptos network. |\n| validator_network_private_key | The private key for the validator node. Whoever holds this private key will be able to establish the ownership of the validator node in the Aptos network. |\n\n", "doc_id": "8b6b0983-0f95-46a4-b7f1-1a9985c0f824", "embedding": null, "doc_hash": "30a0b98912cab662f5798fcdac7d85111406f68317802e3ab318bda30bdfd0c9", "extra_info": null, "node_info": {"start": 0, "end": 786, "_node_type": "1"}, "relationships": {"1": "6ed619fe-34f9-47e9-9647-da4041e186b6"}}, "__type__": "1"}, "372b40fa-51b5-4398-89f3-b12b0faa7105": {"__data__": {"text": "\n\nvalidator-identity.yaml\n\n", "doc_id": "372b40fa-51b5-4398-89f3-b12b0faa7105", "embedding": null, "doc_hash": "280df94f40e42f19bc9097078cc08f5b3048420374dec8382756bfe11997cac2", "extra_info": null, "node_info": {"start": 0, "end": 27, "_node_type": "1"}, "relationships": {"1": "bf7cad1e-ec36-447d-a6fc-834160aee001"}}, "__type__": "1"}, "3b261782-6fab-4a58-b9bc-125587543f45": {"__data__": {"text": "\n\nExample\n\nClick below to see an example YAML configuration:\n\n\nvalidator-identity.yaml\n    \n\n```yaml\n---\naccount_address: a5a643aa695fc5f34927386c8d767cddcc0607933f40c89a7ad78de7804965b8\naccount_private_key: \"0x80478d60a52f54a88e7095abf48b1f4294a335b30f1066cd73768b9b789e833f\"\nconsensus_private_key: \"0x4aedda33ef3fd71243eb2a926307d8826c95b9939f88e753d62d9bc577e99916\"\nnetwork_private_key: \"0xa03ec46b24f2f1066d7980dc13b4baf722ba60c367e498e47a657ba0815adb58\"\n```\n\n\n\n", "doc_id": "3b261782-6fab-4a58-b9bc-125587543f45", "embedding": null, "doc_hash": "8fe8390e8eb14a5c85a38f072e5642a7e3da0e3ef7b5b3e7868d19c046d54c41", "extra_info": null, "node_info": {"start": 0, "end": 466, "_node_type": "1"}, "relationships": {"1": "97e6ffbc-0027-44b0-9d5e-a51446584ddf"}}, "__type__": "1"}, "51a90574-87cf-4086-a9da-3d289697dde8": {"__data__": {"text": "\n\nDescription\n\n| validator-identity.yaml | Description |\n| --- | --- |\n| account_address | The Aptos blockchain account address for the operator, i.e., the persona who deploys the validator node. |\n| account_private_key |The private key associated with the blockchain account. |\n| consensus_private_key | The consensus private key, used only by the operator for validation purpose and for rotating the consensus key. |\n| network_private_key | The private key for the validator node. Whoever holds this private key will be able to establish the ownership of the validator node in the Aptos network. |\n\n\n", "doc_id": "51a90574-87cf-4086-a9da-3d289697dde8", "embedding": null, "doc_hash": "7019f6bcac1aa133297a5b63dab5d2733c734b0d524a1ae1a53e7932cebd8548", "extra_info": null, "node_info": {"start": 0, "end": 602, "_node_type": "1"}, "relationships": {"1": "d9702fe6-e7c4-4384-8759-55dab38049e3"}}, "__type__": "1"}, "2ee2b17c-f240-48b2-9c0b-af6c697ee4dd": {"__data__": {"text": "\n\nvalidator-full-node-identity.yaml\n\n", "doc_id": "2ee2b17c-f240-48b2-9c0b-af6c697ee4dd", "embedding": null, "doc_hash": "da0d28e2e8b110ecb40df70e6ec56a177bacfe9dc252dabc0619af8bc2f8eff3", "extra_info": null, "node_info": {"start": 0, "end": 37, "_node_type": "1"}, "relationships": {"1": "f9b9cc8b-e3a4-4ebd-8fb1-0f0dafc07391"}}, "__type__": "1"}, "9ca7183e-2c2d-411d-acad-c51948c13b30": {"__data__": {"text": "\n\nExample\n\nClick below to see an example YAML configuration:\n\n\nvalidator-full-node-identity.yaml\n\n    \n```yaml\n---\naccount_address: a5a643aa695fc5f34927386c8d767cddcc0607933f40c89a7ad78de7804965b8\nnetwork_private_key: \"0x689c11c6e5405219b5eae1312086c801e3a044946afc74429e5157b46fb65b61\"\n```\n\n\n    \n\n", "doc_id": "9ca7183e-2c2d-411d-acad-c51948c13b30", "embedding": null, "doc_hash": "29682a28b3f41ce77284ab5d202ae4751fa162719317136c40fc4ea18f879810", "extra_info": null, "node_info": {"start": 0, "end": 299, "_node_type": "1"}, "relationships": {"1": "b7d0e819-7277-468a-a1fc-3c5a23b573ac"}}, "__type__": "1"}, "6e092187-120a-465a-b0a2-30acab812dc0": {"__data__": {"text": "\n\nDescription\n\n| validator-full-node-identity.yaml | Description |\n| --- | --- |\n| account_address | The Aptos blockchain account address for the operator, i.e., the persona who deploys the validator node. |\n| network_private_key | The private key for the fullnode. Whoever holds this private key will be able to establish the ownership of the VFN and PFN in the Aptos network. |\n\n\n\n\n", "doc_id": "6e092187-120a-465a-b0a2-30acab812dc0", "embedding": null, "doc_hash": "2e6b01412c2d083e633014a9f090343d81c2aa15c0ced37fe414aec603d50c21", "extra_info": null, "node_info": {"start": 0, "end": 384, "_node_type": "1"}, "relationships": {"1": "8adf81da-ee6b-4ba6-ba04-9d3d38a8af94"}}, "__type__": "1"}, "e3559b95-c245-46f4-9c56-b2b7d15c7f93": {"__data__": {"text": "\n\nAptos \ube14\ub85d\uccb4\uc778\n\n\ucd08\ub85d\n\n\ube14\ub85d\uccb4\uc778\uc774 \uc0c8\ub85c\uc6b4 \uc778\ud130\ub137 \uc778\ud504\ub77c\ub85c \ubd80\uc0c1\ud558\uba74\uc11c \uc218\ub9cc\uac1c\uc758 \ud0c8\uc911\uc559 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc774 \ubc30\ud3ec\ub418\uc5b4 \uc654\ub2e4.\n\ubd88\ud589\ud788\ub3c4, \ube14\ub85d\uccb4\uc778\uc740 \uc7a6\uc740 \uc911\ub2e8, \ub192\uc740 \ube44\uc6a9, \ub0ae\uc740 \ucc98\ub9ac\ub7c9 \uc81c\ud55c \ubc0f \uc218 \ub9ce\uc740 \ubcf4\uc548 \ubb38\uc81c\ub4e4\ub85c \uc778\ud574\n\uc0ac\uc6a9\uc774 \uc544\uc9c1 \ubcf4\ud3b8\ud654\ub418\uc9c0 \uc54a\uc558\ub2e4. \ube14\ub85d\uccb4\uc778 \uc778\ud504\ub77c\ub294 \uc6f93 \uc2dc\ub300\uc758 \ub300\uc911\ud654\ub97c \uc704\ud574\uc11c \uc2e0\ub8b0\ud560 \uc218 \uc788\uace0\n\ud655\uc7a5 \uac00\ub2a5\ud558\uace0, \ube44\uc6a9 \ud6a8\uc728\uc801\uc774\uba70, \ub110\ub9ac \uc0ac\uc6a9\ub418\ub294 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc758 \uad6c\ucd95\uc744 \uc704\ud574 \uc9c0\uc18d\uc801\uc73c\ub85c \ubc1c\uc804\ud558\ub294\n\ud50c\ub7ab\ud3fc\uc778 \ud074\ub77c\uc6b0\ub4dc \uc778\ud504\ub77c\uc758 \uae38\uc744 \ub530\ub77c\uc57c \ud55c\ub2e4.\n\n\uc6b0\ub9ac\ub294 \uc774\ub7ec\ud55c \uacfc\uc81c\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud574 \ud655\uc7a5\uc131, \uc548\uc804\uc131, \uc2e0\ub8b0\uc131 \ubc0f \ud5a5\uc0c1\uc131\uc744 \ud575\uc2ec \uc6d0\uce59\uc73c\ub85c \uc124\uacc4\ub41c\nAptos \ube14\ub85d\uccb4\uc778\uc744 \uc81c\uc2dc\ud55c\ub2e4. \uc9c0\ub09c 3\ub144\uac04 \uc804 \uc138\uacc4 350\uba85 \uc774\uc0c1\uc758 \uac1c\ubc1c\uc790\ub4e4\uc774 Aptos \ube14\ub85d\uccb4\uc778\uc744\n\uac1c\ubc1c\ud588\ub2e4 [1]. Aptos\ub294 \ud569\uc758, \uc2a4\ub9c8\ud2b8 \ucee8\ud2b8\ub799\ud2b8 \uc124\uacc4, \uc2dc\uc2a4\ud15c \ubcf4\uc548, \uc131\ub2a5 \ubc0f \ud0c8\uc911\uc559\uc131 \uba74\uc5d0\uc11c \uc0c8\ub86d\uace0\n\ucc38\uc2e0\ud55c \ud601\uc2e0\uc744 \uc81c\uc548\ud55c\ub2e4. \uc774\ub7ec\ud55c \uae30\uc220\ub4e4\uc758 \uc870\ud569\uc740 \uc6f93 \ub300\uc911\ud654\ub97c \uc704\ud55c \uae30\ubcf8 \uad6c\uc131 \uc694\uc18c\uac00 \ub420 \uac83\uc774\ub2e4:\n\n* \uba3c\uc800, Aptos \ube14\ub85d\uccb4\uc778\uc740 \ube60\ub974\uace0 \uc548\uc804\ud55c \ud2b8\ub79c\uc7ad\uc158", "doc_id": "e3559b95-c245-46f4-9c56-b2b7d15c7f93", "embedding": null, "doc_hash": "9da5118da5bc7fac068b39acf80a6d9f5654cf84f9a2c08619e84647a1f5e485", "extra_info": null, "node_info": {"start": 0, "end": 512, "_node_type": "1"}, "relationships": {"1": "1bed0ae0-8de1-4101-9dbd-3bdc3f94009b", "3": "57450c33-f137-4b7c-a434-94e8e4782e8e"}}, "__type__": "1"}, "57450c33-f137-4b7c-a434-94e8e4782e8e": {"__data__": {"text": "\uc2e4\ud589\uc744 \uc704\ud574 Move \uc5b8\uc5b4\ub97c \uc790\uccb4\uc801\uc73c\ub85c \ud1b5\ud569\ud558\uace0\n\ub0b4\ubd80\uc801\uc73c\ub85c \uc0ac\uc6a9\ud55c\ub2e4 [2]. Move Prover\ub294 Move \uc5b8\uc5b4\uc758 \uc815\ud615\uac80\uc99d\uae30\ub85c\uc368 \uc2a4\ub9c8\ud2b8 \ucee8\ud2b8\ub799\ud2b8\uc758\n\ubd88\ubcc0\uc18d\uc131 \ubc0f \ud589\uc704\uc5d0 \ub300\ud55c \ucd94\uac00\uc801\uc778 \uc548\uc804\uc744 \uc81c\uacf5\ud55c\ub2e4. \ubcf4\uc548\uc5d0 \ub300\ud55c \uc774\ub7ec\ud55c \uc9d1\uc911\uc744 \ud1b5\ud574\n\uac1c\ubc1c\uc790\ub294 \uc545\uc131 \uac1c\uccb4\ub85c\ubd80\ud130 \uc18c\ud504\ud2b8\uc6e8\uc5b4\ub97c \ub354 \uc798 \ubcf4\ud638\ud560 \uc218 \uc788\ub2e4.\n* \ub458\uc9f8, Aptos \ub370\uc774\ud130 \ubaa8\ub378\uc740 \uc720\uc5f0\ud55c \ud0a4 \uad00\ub9ac \ubc0f \ud558\uc774\ube0c\ub9ac\ub4dc \uc218\ud0c1 \uc635\uc158\uc744 \uc9c0\uc6d0\ud55c\ub2e4. \uc774\ub294 \uc11c\uba85\n\uc804 \ud2b8\ub79c\uc7ad\uc158 \ud22c\uba85\uc131\uacfc \ud568\uaed8 \uc2e4\uc81c \ub77c\uc774\ud2b8 \ud074\ub77c\uc774\uc5b8\ud2b8 \ud504\ub85c\ud1a0\ucf5c\uacfc \ud568\uaed8 \ubcf4\ub2e4 \uc548\uc804\ud558\uace0 \uc2e0\ub8b0\ud560\uc218\n\uc788\ub294 \uc0ac\uc6a9\uc790 \uacbd\ud5d8\uc744 \uc81c\uacf5\ud55c\ub2e4.\n* \uc14b\uc9f8, \ub192\uc740 \ucc98\ub9ac\ub7c9\uacfc \ub0ae\uc740 \uc9c0\uc5f0 \uc2dc\uac04\uc744 \ub2ec\uc131\ud558\uae30 \uc704\ud574 Aptos \ube14\ub85d\uccb4\uc778\uc740 \ud2b8\ub79c\uc7ad\uc158 \ucc98\ub9ac\uc758 \uc8fc\uc694\n\ub2e8\uacc4\uc5d0 \ubaa8\ub4c8\ud654\ub41c \ud30c\uc774\ud504\ub77c\uc778 \ubc29\uc2dd\uc744 \uc0ac\uc6a9\ud55c\ub2e4. \uad6c\uccb4\uc801\uc73c\ub85c\ub294 \ud2b8\ub79c\uc7ad\uc158 \uc804\ud30c, \ube14\ub85d \uba54\ud0c0\ub370\uc774\ud130\n\uc815\ub82c, \ubcd1\ub82c \ud2b8\ub79c\uc7ad\uc158 \uc2e4\ud589, \ubc30\uce58(batch) \uc2a4\ud1a0\ub9ac\uc9c0 \ubc0f \uc6d0\uc7a5 \uc778\uc99d \ub4f1\uc774 \ub3d9\uc2dc\uc5d0 \uc6b4\uc601\ub41c\ub2e4.\n\uc774 \uc811\uadfc \ubc29\uc2dd\uc740 \uc0ac\uc6a9 \uac00\ub2a5\ud55c \ubaa8\ub4e0 \ubb3c\ub9ac\uc801 \uc790\uc6d0\uc744 \uc644\ubcbd\ud558\uac8c \ud65c\uc6a9\ud558\uace0, \ud558\ub4dc\uc6e8\uc5b4 \ud6a8\uc728\uc131\uc744 \ud5a5\uc0c1\n\uc2dc\ud0a4\uba70, \ub9e4\uc6b0 \ubcd1\ub82c\uc801\uc778 \uc2e4\ud589\uc744", "doc_id": "57450c33-f137-4b7c-a434-94e8e4782e8e", "embedding": null, "doc_hash": "b3f1f8615e5537c1c045ab9eaf2b2dc91e74f4b5a859bece690d6a875b4035df", "extra_info": null, "node_info": {"start": 513, "end": 1026, "_node_type": "1"}, "relationships": {"1": "1bed0ae0-8de1-4101-9dbd-3bdc3f94009b", "2": "e3559b95-c245-46f4-9c56-b2b7d15c7f93", "3": "67e86cf0-ec9d-43aa-b07a-a5d56b796001"}}, "__type__": "1"}, "67e86cf0-ec9d-43aa-b07a-a5d56b796001": {"__data__": {"text": "\uac00\ub2a5\ud558\uac8c \ud55c\ub2e4.\n* \ub137\uc9f8, \ub370\uc774\ud130\uc5d0 \ub300\ud55c \uc0ac\uc804 \uc9c0\uc2dd\uc744 \uc77d\uace0 \uc4f0\ub3c4\ub85d \uc694\uad6c\ud568\uc73c\ub85c\uc368 \ud2b8\ub79c\uc7ad\uc158 \uc6d0\uc790\uc131\uc744 \ud30c\uad34\ud558\ub294 \ub2e4\ub978\n\ubcd1\ub82c \uc2e4\ud589 \uc5d4\uc9c4\uacfc \ub2ec\ub9ac Aptos \ube14\ub85d\uccb4\uc778\uc740 \uac1c\ubc1c\uc790\uc5d0\uac8c \uadf8\ub7ec\ud55c \uc81c\ud55c\uc744 \ub450\uc9c0 \uc54a\ub294\ub2e4. \uc784\uc758\ub85c\n\ubcf5\uc7a1\ud55c \ud2b8\ub79c\uc7ad\uc158\uc774 \uc6d0\uc790\uc131\uc744 \ud6a8\uc728\uc801\uc73c\ub85c \uc9c0\uc6d0\ud558\uc5ec \uc2e4\uc81c \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc758 \ucc98\ub9ac\ub7c9\uc744 \ub192\uc774\uace0 \ub300\uae30\n\uc2dc\uac04\uc744 \ub2e8\ucd95\ud560 \uc218 \uc788\uc73c\uba70 \uac1c\ubc1c\uc744 \ub2e8\uc21c\ud654\ud560 \uc218 \uc788\ub2e4.\n* \ub2e4\uc12f\uc9f8, Aptos\uc758 \ubaa8\ub4c8\ud615\uc73c\ub85c \uc124\uacc4\ub41c \uc544\ud0a4\ud14d\ucc98\ub294 \ud074\ub77c\uc774\uc5b8\ud2b8 \uc720\uc5f0\uc131\uc744 \uc9c0\uc6d0\ud558\uace0 \ube48\ubc88\ud558\uace0 \uc989\uac01\uc801\uc778\n\uc5c5\uadf8\ub808\uc774\ub4dc\ub97c \uc704\ud574 \ucd5c\uc801\ud654\ub418\uc5c8\ub2e4. \ub610\ud55c Aptos \ube14\ub85d\uccb4\uc778\uc740 \ub0b4\uc7a5\ub41c \uc628\uccb4\uc778 \ubcc0\uacbd \uad00\ub9ac\n\ud504\ub85c\ud1a0\ucf5c\uc744 \uc81c\uacf5\ud558\uc5ec, \ud601\uc2e0\uc801\uc778 \uc0c8\ub85c\uc6b4 \uae30\uc220\uc744 \uc2e0\uc18d\ud558\uac8c \ubc30\ud3ec\ud558\uace0 \uc0c8\ub85c\uc6b4 \uc6f93 \uc0ac\uc6a9 \uc0ac\ub840\ub97c \uc9c0\uc6d0\ud560 \uc218 \uc788\ub2e4.\n\n\n", "doc_id": "67e86cf0-ec9d-43aa-b07a-a5d56b796001", "embedding": null, "doc_hash": "59e62f4cbef9823e112613469dd837957db3c117b8e84a3307bfb429ef0813e8", "extra_info": null, "node_info": {"start": 1027, "end": 1382, "_node_type": "1"}, "relationships": {"1": "1bed0ae0-8de1-4101-9dbd-3bdc3f94009b", "2": "57450c33-f137-4b7c-a434-94e8e4782e8e"}}, "__type__": "1"}, "58aa267d-4b57-4bbe-81fa-183707c5aea1": {"__data__": {"text": "\n\n\uc804\uccb4 PDF \ubc84\uc804\n\n:::tip \uc804\uccb4 PDF \ubc84\uc804\n\n- **\ucd08\ub85d**: Aptos \ubc31\uc11c\uc758 \ud55c\uad6d\uc5b4 \ubc84\uc804 \uc804\uccb4 PDF\ub97c \ubcf4\ub824\uba74 \uc5ec\uae30\ub97c \ud074\ub9ad\ud558\uc2ed\uc2dc\uc624.\n- **English**: Get the full PDF of the Aptos White Paper.\n:::\n\n", "doc_id": "58aa267d-4b57-4bbe-81fa-183707c5aea1", "embedding": null, "doc_hash": "82e203547749d948de814c299ff79e8b01d8e371ad0d98dbe53f5e01b15d00c6", "extra_info": null, "node_info": {"start": 0, "end": 145, "_node_type": "1"}, "relationships": {"1": "b6f0b1b2-2e91-475a-9be4-3c326b6692a6"}}, "__type__": "1"}, "f311e31d-029e-4eae-97bb-287d700cc7b6": {"__data__": {"text": "\n\nAptos Developer Documentation\n\nWelcome! Aptos is a Layer 1 for everyone. In the Ohlone language, \"Aptos\" means \"The People.\" This site is here to help you grow a web3 ecosystem project that benefits the entire world through easier development, more reliable services, faster transactions, and a supportive, decentralized family. \n\nThis documentation will help you develop applications for the Aptos blockchain, run nodes, and be a part of the blossoming Aptos community. This documentation covers both basic and advanced topics. Here you will find concepts, how-to guides, quickstarts, tutorials, API references, code examples, release notes, and more.\n\n> Please note, this site is built from the `main` upstream branch of GitHub and so therefore reflects the latest changes to Aptos. If you have checked out another branch to use a specific network, the code may not yet have all of the features described here.\n\n", "doc_id": "f311e31d-029e-4eae-97bb-287d700cc7b6", "embedding": null, "doc_hash": "39edb4a4b5a3e11a80ed10319324e10921e6c9e0c322f21fd93a1fe92a908acf", "extra_info": null, "node_info": {"start": 0, "end": 916, "_node_type": "1"}, "relationships": {"1": "d7e82590-2655-4148-97e5-6c8858dd8207"}}, "__type__": "1"}, "43bd16f8-d834-49ee-82b4-fc0c1747f4d9": {"__data__": {"text": "\n\nFind the latest releases\n\nSee the newest Aptos releases in the Latest Releases list and its subpages.\n\n", "doc_id": "43bd16f8-d834-49ee-82b4-fc0c1747f4d9", "embedding": null, "doc_hash": "13d7052a95346b8468ccf62bd1966b182fbc82c7b5ebf869a5602c87dd5232ab", "extra_info": null, "node_info": {"start": 0, "end": 105, "_node_type": "1"}, "relationships": {"1": "1dad0152-b339-4d5b-afb2-545f76225144"}}, "__type__": "1"}, "cb701aba-7049-46c5-b66c-250100e765f4": {"__data__": {"text": "\n\nSet up your environment and start with the tutorials\n\n\n\n  \n  \n    \n     Getting started\n    Begin by setting up your Aptos development environment.\n\n  \n  \n    \n     Run quickstart tutorials\n    Submit your first transaction, write your first Move module, deploy your first coin, and more.\n\n\n\n\n\n", "doc_id": "cb701aba-7049-46c5-b66c-250100e765f4", "embedding": null, "doc_hash": "80cd8f42ebcebfd4eb1dd1b74ebdfe73c94b28bdc25981b27e0b86936e10ba1c", "extra_info": null, "node_info": {"start": 0, "end": 296, "_node_type": "1"}, "relationships": {"1": "4944cfcf-209c-4154-85ca-7af5dcafa297"}}, "__type__": "1"}, "7c0b040e-abfc-45a0-9556-c674b094f1db": {"__data__": {"text": "\n\nLearn Aptos concepts and follow the guides\n\n\n\n  \n    \n     Concepts\n    Learn the key concepts of the Aptos blockchain, including transactions, accounts, gas and transaction fees, nodes, and more. \n    \n  \n  \n    \n     Move on Aptos\n    Learn how Move works on the Aptos blockchain.\n    \n  \n  \n    \n     How it works\n    How to build applications on Aptos.\n    \n  \n\n\n\n", "doc_id": "7c0b040e-abfc-45a0-9556-c674b094f1db", "embedding": null, "doc_hash": "3658098ff0ef440884dfe2da1525f4b90b32366c157989f3c97c3f27e0650ed5", "extra_info": null, "node_info": {"start": 0, "end": 370, "_node_type": "1"}, "relationships": {"1": "4e164241-db65-4bbd-9b55-8e826f0ed769"}}, "__type__": "1"}, "1276f9d6-5850-4eb3-b575-aff28f3aac9b": {"__data__": {"text": "\n\nRun an Aptos node\n\n\n\n  \n    \n     Run a validator node\n    Install and run a validator or a fullnode.\n\n\n  \n    \n     Run a local testnet\n    Run a validator node on your local testnet.\n\n  \n  \n    \n     Run a public fullnode\n    Run a public fullnode and connect to devnet.\n\n  \n  \n\n\n\n", "doc_id": "1276f9d6-5850-4eb3-b575-aff28f3aac9b", "embedding": null, "doc_hash": "7fe1c14777c91ead422ae674ace752aca8f5e8f6f9feea6abd0326de66088129", "extra_info": null, "node_info": {"start": 0, "end": 285, "_node_type": "1"}, "relationships": {"1": "559d3393-737b-4973-ac0c-1c4053d18064"}}, "__type__": "1"}, "f0c78d05-e777-4b0e-8983-f103607e8d10": {"__data__": {"text": "\n\nDevelop apps with the SDKs and APIs\n\n\n\n\n    \n    \n     CLI\n    CLI for developing and deploying on the Aptos blockchain.\n\n\n\n  \n    \n    \n     SDKs\n    SDKs for building on the Aptos blockchain.\n\n\n\n  \n  \n    \n     REST API\n    Reference for the REST API to interact with the Aptos blockchain.\n\n\n\n\n\n\n", "doc_id": "f0c78d05-e777-4b0e-8983-f103607e8d10", "embedding": null, "doc_hash": "488855d983a06c2d3aee19dcfad993db8e5e45ab35807bd08c21868c695518d7", "extra_info": null, "node_info": {"start": 0, "end": 300, "_node_type": "1"}, "relationships": {"1": "37c0d72f-6c52-4add-91d6-6af2261f7a19"}}, "__type__": "1"}, "62964911-0ce9-48e9-8c97-0a06bca9b9e8": {"__data__": {"text": "\n\nConnect to an Aptos network\n\nAptos offers the ability to run a local testnet, as well as provides a shared devnet and testnet. See the System Integrators Guide for a summary of the available networks and the means to connect to them.\n\n:::tip Aptos Devnet Resets\nThe Aptos devnet is reset every Thursday. See the latest updates in the Aptos Discord.\n:::info\n\n:::\n\n", "doc_id": "62964911-0ce9-48e9-8c97-0a06bca9b9e8", "embedding": null, "doc_hash": "9270cbd8e0cc368a691c067e4a44197b6980069f6e2a374489b71392409f3ea5", "extra_info": null, "node_info": {"start": 0, "end": 365, "_node_type": "1"}, "relationships": {"1": "98a7c29d-818a-41b0-80f7-566f0c25bd0d"}}, "__type__": "1"}, "6c852197-2ccd-4605-9a5e-3c53661a9a3a": {"__data__": {"text": "\n\nFind the ecosystem\n\nWe are excited that you are here, and we look forward to getting to know you. Welcome to the Aptos community! Find out more about us and exchange ideas at:\n\n* Discord\n* Stack Overflow\n* Forum\n* Medium\n* Telegram\n* Twitter\n\n", "doc_id": "6c852197-2ccd-4605-9a5e-3c53661a9a3a", "embedding": null, "doc_hash": "41a757454df108e67b8052bdbe68920292c37f455e5fb6dfe9884cabb0414e02", "extra_info": null, "node_info": {"start": 0, "end": 245, "_node_type": "1"}, "relationships": {"1": "158ebfb6-2b0b-44cb-a90f-8265433b43aa"}}, "__type__": "1"}, "99335ceb-dfe6-43e5-a9a8-a394c7c0f3d8": {"__data__": {"text": "\n\nCommunity projects on Aptos\n\nHere's a list of community-maintained projects collected by the Aptos Foundation. If you have a project that you want added to the list, just edit the page and add a GitHub pull request.\n\nWant to pitch in on smaller tasks, such as doc updates and code fixes? See our Community list for opportunities to help the Aptos ecosystem.\n\n", "doc_id": "99335ceb-dfe6-43e5-a9a8-a394c7c0f3d8", "embedding": null, "doc_hash": "3f914403ecf3176b28c98d306769fe318cfe9f4e6748130f5be9dea974860f56", "extra_info": null, "node_info": {"start": 0, "end": 361, "_node_type": "1"}, "relationships": {"1": "03d20b1f-3088-45ea-b30c-48f131bf6210"}}, "__type__": "1"}, "48f7e8e0-f31d-47e9-a82a-77c791e01223": {"__data__": {"text": "\n\nUsage\n\nTo use the `IndexerClient` class, you will need to create an instance of `IndexerClient` and call the desired API method. The `IndexerClient` object will handle the HTTP requests and responses and return the result to your application.\n\n", "doc_id": "48f7e8e0-f31d-47e9-a82a-77c791e01223", "embedding": null, "doc_hash": "c76b681c1001a7695a3f8929598f06b0314438c3f27d2c50fb906e46d3f9c3fe", "extra_info": null, "node_info": {"start": 0, "end": 246, "_node_type": "1"}, "relationships": {"1": "d3511a93-f31b-47ed-9123-1db43f75db36"}}, "__type__": "1"}, "ba85c09f-eeca-439c-bdb2-20746b277c51": {"__data__": {"text": "\n\nConfiguration\n\nBefore using the `IndexerClient` class, you will need to configure it with the necessary parameters. These parameters may include the Hasura endpoint URL, custom configuration, and any other required settings. You can configure the `IndexerClient` class by passing in the necessary parameters when you initialize the client object.\n\n", "doc_id": "ba85c09f-eeca-439c-bdb2-20746b277c51", "embedding": null, "doc_hash": "e2d117c8d754b96c1219668a3f74296f1fb1a4209b85c256d9763096d50ac6b4", "extra_info": null, "node_info": {"start": 0, "end": 350, "_node_type": "1"}, "relationships": {"1": "10c864b3-12e3-493b-85cd-b66477a640b4"}}, "__type__": "1"}, "92551a94-5a76-49b3-b0b4-5b89549d5cc0": {"__data__": {"text": "\n\nInitialization\n\nTo initialize the `IndexerClient` class, you will need to pass in the necessary configuration parameters. Here is an example:\n\n```ts\nimport { IndexerClient } from \"aptos\";\n\nconst client = new IndexerClient(\"https://indexer-testnet.staging.gcp.aptosdev.com/v1/graphql\");\n```\n\n", "doc_id": "92551a94-5a76-49b3-b0b4-5b89549d5cc0", "embedding": null, "doc_hash": "f69c64a5d75de67b0499798e389bfab1fdd4b4966697873a0c45f116154c3f78", "extra_info": null, "node_info": {"start": 0, "end": 293, "_node_type": "1"}, "relationships": {"1": "9d6018c1-d7d8-46b8-b9aa-27e4a5593414"}}, "__type__": "1"}, "7a19232f-14f9-444d-9fbf-dea1560cd52f": {"__data__": {"text": "\n\nMake API fetch calls\n\nTo make an API call, you will need to call the appropriate method on the `IndexerClient` object. The method name and parameters will depend on the specific API you are using. Here is an example:\n\n```ts\nconst accountNFTs = await client.getAccountNFTs(\"0x123\");\n```\n\nIn this example, we are using the `getAccountNFTs()` method to retrieve the NFT of an account with the address `0x123`.\n\n", "doc_id": "7a19232f-14f9-444d-9fbf-dea1560cd52f", "embedding": null, "doc_hash": "2ab85dd806b1058b034246d01d6195ac20b8506a089cc73c04e811353bb9440c", "extra_info": null, "node_info": {"start": 0, "end": 410, "_node_type": "1"}, "relationships": {"1": "3785f86a-f795-4fc3-8d5b-57380c0b5454"}}, "__type__": "1"}, "a7913ba6-8abf-4be9-8955-5b651f2e39c6": {"__data__": {"text": "\n\nUse custom queries\n\nThe TypeScript SDK provides frequently used queries by different users and/or apps and makes sure the queries are well structured to retrive the current response.\n\nWith that being said, one can structure custom queries and use the SDK to query the Aptos Indexer API. For that, the SDK exports a `queryIndexer()` method that accepts a `GraphqlQuery` type argument. The `GraphqlQuery` type has a `query` field of type `string` and an optional `variable` field of an `object` type.\n\nHere is the `GraphqlQuery` type definition.\n\n```ts\ntype GraphqlQuery = {\n  query: string;\n  variables?: {};\n};\n```\n\nTo use the `queryIndexer()` method, one should pass the GraphQL query. For example:\n\n```ts\nconst query: string = `query getAccountTokensCount($owner_address: String) {\n  current_token_ownerships_aggregate(where: { owner_address: { _eq: $owner_address }, amount: { _gt: \"0\" } }) {\n    aggregate {\n      count\n    }\n  }\n}`;\nconst variables = { owner_address: \"0x123\" };\nconst graphqlQuery = { query, variables };\nconst accountTokensCount = await client.queryIndexer(graphqlQuery);\n```\n\n:::tip\nBe aware that it queries the network endpoint you passed in when initializing the `IndexerClient` class.\n:::\n\n", "doc_id": "a7913ba6-8abf-4be9-8955-5b651f2e39c6", "embedding": null, "doc_hash": "d15a2e79086b28bddeb536b331f61c0d3effa3b5f3b90c205819ad1191e13a01", "extra_info": null, "node_info": {"start": 0, "end": 1219, "_node_type": "1"}, "relationships": {"1": "ddb55fe3-ce37-43f6-a197-55ce72b546e8"}}, "__type__": "1"}, "d8c81569-da9f-4d1e-9522-10bb14e1ead8": {"__data__": {"text": "\n\nGenerate queries\n\nTo generate an Indexer query that can be used within the SDK, we can write a GraphQL query (based on the Indexer schema) and use the SDK to generate a TypeScript query.\n\n", "doc_id": "d8c81569-da9f-4d1e-9522-10bb14e1ead8", "embedding": null, "doc_hash": "9c02a5e74ff72f024f54b2781794a8c4847d5b6f07f7bdd40f20fdbef620f505", "extra_info": null, "node_info": {"start": 0, "end": 190, "_node_type": "1"}, "relationships": {"1": "1c3b9119-c763-4351-a029-d8176748e49a"}}, "__type__": "1"}, "b215efad-a837-4720-bf49-c5bd1c160a3b": {"__data__": {"text": "\n\nWrite an Indexer query\n\nAll Indexer queries, which are basically GraphQL queries, live under the `src/indexer/queries/` folder. In this folder, we create a `.graphql` file for each query we want the SDK to support. For example, a `.graphql` file with a GraphQL query can be:\n\n```graphql\nquery getAccountTokensCount($owner_address: String) {\n  current_token_ownerships_aggregate(where: { owner_address: { _eq: $owner_address }, amount: { _gt: \"0\" } }) {\n    aggregate {\n      count\n    }\n  }\n}\n```\n\n", "doc_id": "b215efad-a837-4720-bf49-c5bd1c160a3b", "embedding": null, "doc_hash": "8a199fb13539ed3028668aa450dac50a0f9e4f889bdf0ac36c5592f9ad5abbaa", "extra_info": null, "node_info": {"start": 0, "end": 500, "_node_type": "1"}, "relationships": {"1": "d24b6914-40bd-4c8e-80dc-215ca13f0a30"}}, "__type__": "1"}, "aff7750a-b8ee-443e-9567-c511bb276073": {"__data__": {"text": "\n\nGenerate TypeScript queries\n\nOnce we have created a `.graphql` file with a GraphQL query, we can generate TypeScript code based on that query so we can use it with the TypeScript SDK by running the following command:\n\n```cmd\npnpm run indexer-codegen\n```\n\nThat command runs the `graphql-codegen` command that generates code from the Indexer GraphQL schema based on the SDK configuration file.\n\n", "doc_id": "aff7750a-b8ee-443e-9567-c511bb276073", "embedding": null, "doc_hash": "cc0737da4c162172974d9d120304eafa0fc372d7a1c0a78ba2ca0fc6b35ed801", "extra_info": null, "node_info": {"start": 0, "end": 395, "_node_type": "1"}, "relationships": {"1": "62d2a812-84a2-4b7d-988e-5b48a2ecc60a"}}, "__type__": "1"}, "75fd2a12-6f14-4fb3-b90d-afb845629938": {"__data__": {"text": "\n\nSDK GraphQL configuration file\n\nThe TypeScript SDK uses a configuration file for @graphql-codegen, a code generation tool for GraphQL.\n\nThe SDK configuration file defines how `@graphql-codegen` should generate TypeScript code from a GraphQL schema and queries. Let's break down some of the key elements of this file:\n\n- `schema` \u2013 Specifies the location of the GraphQL schema file that `@graphql-codegen` should use for code generation. In this case, it is using the Aptos Indexer `mainnet` schema.\n- `documents` - Specifies the location of the GraphQL operation files that `@graphql-codegen` should use for code generation. In this case, it is using the `src/indexer/queries/` location (as mentioned in the previous section) and includes all files with the `.graphql` extension.\n- `generates` \u2013 Defines the output files that `@graphql-codegen` should generate based on the schema and operations. In this case, it is generating the types, operations and queries.\n- `plugins` \u2013 Specifies the plugins that `@graphql-codegen` should use for code generation. In this case, it is using the `typescript` plugin to generate TypeScript typings from the GraphQL schema, `typescript-operations` plugin to generate TypeScript typings for GraphQL operations and `typescript-graphql-request` plugin to generate function for making GraphQL requests .\n\n:::tip\nYou can use the `IndexerClient` class directly or the Provider class (preferred).\n:::\n\n", "doc_id": "75fd2a12-6f14-4fb3-b90d-afb845629938", "embedding": null, "doc_hash": "62ec1c44817a00beb52bc18dced6a56bcb6b63eb15f62a29e6ea8323a0983b66", "extra_info": null, "node_info": {"start": 0, "end": 1434, "_node_type": "1"}, "relationships": {"1": "1c386962-7580-42e5-8a3e-cd90f5b62749"}}, "__type__": "1"}, "e6fa65d8-4559-4f89-a46a-de8e004e1989": {"__data__": {"text": "\n\nRun an Aptos Indexer\n\nThis document describes how to operate an indexer fullnode on the Aptos network. To understand and ingest the indexer data in your app, see Use the Aptos Indexer.\n\n:::danger On macOS with Apple silicon only\nThe below installation steps are verified only on macOS with Apple silicon. They might require minor tweaking when running on other builds.\n:::\n\n", "doc_id": "e6fa65d8-4559-4f89-a46a-de8e004e1989", "embedding": null, "doc_hash": "3ccb1c2dfaf2d8d3d718636d505ef602cb50a54232cc2cfb4a72d1caba4b6834", "extra_info": null, "node_info": {"start": 0, "end": 376, "_node_type": "1"}, "relationships": {"1": "ae37075f-78f2-43a5-96a4-7dd4daf2a986"}}, "__type__": "1"}, "20380602-cabd-43df-aa9e-a754fe9bb338": {"__data__": {"text": "\n\nSummary\n\nTo run an indexer fullnode, these are the steps in summary:\n\n1. Make sure that you have all the required tools and packages described below in this document.\n1. Follow the instructions to set up a public fullnode but do not start the fullnode yet. \n1. Edit the `fullnode.yaml` as described below in this document.\n1. Run the indexer fullnode per the instructions below.\n\n", "doc_id": "20380602-cabd-43df-aa9e-a754fe9bb338", "embedding": null, "doc_hash": "7cdcb6e88948e451f3c544615b09b645ed87ff674737aa4279e917db95b533c3", "extra_info": null, "node_info": {"start": 0, "end": 382, "_node_type": "1"}, "relationships": {"1": "05ef1353-2216-4276-8979-b308ab3505a0"}}, "__type__": "1"}, "3ccfe536-b020-487c-a181-2b15a4cbbb63": {"__data__": {"text": "\n\nPrerequisites\n\nInstall the packages below. Note, you may have already installed many of these while preparing your development environment. You can confirm by running `which command-name` and ensuring the package appears in the output (although `libpq` will not be returned even when installed).\n\n> Important: If you are on macOS, you will need to install Docker following the official guidance rather than `brew`.\n\nFor an Aptos indexer fullnode, install these packages:\n\n  - `brew` - `/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"` Run the commands emitted in the output to add the command to your path and install any dependencies\n  - `cargo` Rust package manager - `curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh`\n  - `docker` - `brew install docker`\n  - libpq Postgres C API library containing the `pg_ctl` command - `brew install libpq`\n    Make sure to perform all export commands after the installation.\n  -  `postgres` PostgreSQL server - `brew install postgresql`\n  - `diesel` - `brew install diesel`\n\n", "doc_id": "3ccfe536-b020-487c-a181-2b15a4cbbb63", "embedding": null, "doc_hash": "c33e7e7f03d473ee148224de9627690258ad41ab749d7a78413ef0c8619ca454", "extra_info": null, "node_info": {"start": 0, "end": 1079, "_node_type": "1"}, "relationships": {"1": "cf222b8c-7d58-4843-8345-7a17e2697730"}}, "__type__": "1"}, "675aa5a0-37e8-4417-b03b-28b96c858333": {"__data__": {"text": "\n\nSet up the database\n\n1. Start the PostgreSQL server: \n   `brew services start postgresql`\n1. Ensure you can run `psql postgres` and then exit the prompt by entering: `\\q`\n1. Create a PostgreSQL user `postgres` with the `createuser` command (find it with `which`):\n   ```bash\n   /path/to/createuser -s postgres\n   ```\n1. Clone `aptos-core` repository if you have not already:\n    ```bash\n    git clone https://github.com/aptos-labs/aptos-core.git\n    ```\n1. Navigate (or `cd`) into `aptos-core/crates/indexer` directory.\n1.  Create the database schema:\n    ```bash\n    diesel migration run --database-url postgresql://localhost/postgres\n    ```\n    This will create a database schema with the subdirectory `migrations` located in this `aptos-core/crates/indexer` directory. If for some reason this database is already in use, try a different database. For example: `DATABASE_URL=postgres://postgres@localhost:5432/indexer_v2 diesel database reset`\n\n", "doc_id": "675aa5a0-37e8-4417-b03b-28b96c858333", "embedding": null, "doc_hash": "6f6a13aa8aa1d8caeafa374f073befb0752e8617226cb119bd43506753840d1d", "extra_info": null, "node_info": {"start": 0, "end": 950, "_node_type": "1"}, "relationships": {"1": "e03b46e2-1d3e-48b4-9b81-13bcc41d6e39"}}, "__type__": "1"}, "51ccfca3-9e80-488e-bc7f-164a04cd2be2": {"__data__": {"text": "\n\nStart the fullnode indexer\n\n1. Follow the instructions to set up a public fullnode and prepare the setup, but **do not** yet start the indexer (with `cargo run` or `docker run`).\n1. Pull the latest indexer Docker image with:\n    ```bash\n    docker pull aptoslabs/validator:nightly_indexer\n    ```\n1. Edit the `./fullnode.yaml` and add the following configuration:\n    ```yaml\n    storage:\n        enable_indexer: true\n        # This is to avoid the node being pruned\n        storage_pruner_config:\n            ledger_pruner_config:\n                enable: false\n    \n    indexer:\n        enabled: true\n        postgres_uri: \"postgres://postgres@localhost:5432/postgres\"\n        processor: \"default_processor\"\n        check_chain_id: true\n        emit_every: 500\n    ```\n\n1. Run the indexer fullnode with either `cargo run` or `docker run` depending upon your setup. Remember to supply the arguments you need for your specific node:\n    ```bash\n    docker run -p 8080:8080 \\\n      -p 9101:9101 -p 6180:6180 \\\n      -v $(pwd):/opt/aptos/etc -v $(pwd)/data:/opt/aptos/data \\\n      --workdir /opt/aptos/etc \\\n      --name=aptos-fullnode aptoslabs/validator:nightly_indexer aptos-node \\\n      -f /opt/aptos/etc/fullnode.yaml\n    ```\n    or:\n    ```bash\n    cargo run -p aptos-node --features \"indexer\" --release -- -f ./fullnode.yaml\n    ```\n\n", "doc_id": "51ccfca3-9e80-488e-bc7f-164a04cd2be2", "embedding": null, "doc_hash": "3f3c9134e384c6556e895a093de964be940c4714b7e4cf8daa0e191475c82137", "extra_info": null, "node_info": {"start": 0, "end": 1340, "_node_type": "1"}, "relationships": {"1": "8257d49d-1b2a-4c05-a3ac-52da3cd51593"}}, "__type__": "1"}, "ebff71f7-544e-44b5-bfbe-81cd8b005558": {"__data__": {"text": "\n\nRestart the indexer\n\nTo restart the PostgreSQL server:\n\n1. shut down the server by searching for the `postmaster` process and killing it:\n    ```bash\n    ps -ef | grep -i postmaster\n    ```\n\n1. Copy the process ID (PID) for the process and pass it to the following command to shut it down:\n    ```bash\n    kill -INT PID\n    ```\n\n1. Restart the PostgreSQL server with:\n    ```bash\n    brew services restart postgresql@14\n    ```\n\n", "doc_id": "ebff71f7-544e-44b5-bfbe-81cd8b005558", "embedding": null, "doc_hash": "7fb603a5958e3d9848589c79f013cd97dbe5e0d39530b78d15dd3edc2534e9c6", "extra_info": null, "node_info": {"start": 0, "end": 431, "_node_type": "1"}, "relationships": {"1": "3bb978ba-518c-4ef9-bcf7-5bb5c92b409d"}}, "__type__": "1"}, "c0464c49-0e9c-40e4-a146-e45cebf867cb": {"__data__": {"text": "\n\nUse the Aptos Indexer\n\nThis page describes how to employ data from the Aptos Indexer in your apps. To instead operate an indexer, follow Run an Indexer.\n\nTypical applications built on the Aptos blockchain, on any blockchain for that matter, require the raw blockchain data to be shaped and stored in an application-specific manner. This is essential to supporting low-latency and rich experiences when consuming blockchain data in end-user apps from millions of users. The Aptos Node API provides a lower level, stable and generic API and is not designed to support data shaping or therefore such rich end-user experiences directly.\n\nThe Aptos Indexer is the answer to this need, allowing the data shaping critical to real-time app use. See this high-level diagram for how Aptos indexing works:\n\n\n<ThemedImage\nalt=\"Signed Transaction Flow\"\nsources={{\n    light: useBaseUrl('/img/docs/aptos-indexing.svg'),\n    dark: useBaseUrl('/img/docs/aptos-indexing-dark.svg'),\n  }}\n/>\n\n\nIndexing on the Aptos blockchain works like this:\n\n- Users of a dApp, for example, on an NFT marketplace, interact with the Aptos blockchain via a rich UI presented by the dApp. Behind the scenes, these interactions generate, via smart contracts, the transaction and event data. This raw data is stored in the distributed ledger database, for example, on an Aptos fullnode.\n- This raw ledger data is read and indexed using an application-specific data model, in this case an NFT marketplace-specific data model (\u201dBusiness logic\u201d in the above diagram). This NFT marketplace-specific index is then stored in a separate database (\u201dIndexed database\u201d in the above diagram).\n- The dApp sends NFT-specific GraphQL queries to this indexed database and receives rich data back, which is then served to the users.\n\n", "doc_id": "c0464c49-0e9c-40e4-a146-e45cebf867cb", "embedding": null, "doc_hash": "956f7bfe832b180d0beaa39ffd17312636f7e0d1fdb00f69e379133b3704c103", "extra_info": null, "node_info": {"start": 0, "end": 1782, "_node_type": "1"}, "relationships": {"1": "ceaee474-275a-47fc-b924-2c2427f6eae0"}}, "__type__": "1"}, "00480299-c7fd-42c9-b6f4-0ffaf7ea352d": {"__data__": {"text": "\n\nOptions for Aptos indexing service\n\nAptos supports the following ways to index the Aptos blockchain. \n\n1. Use the Aptos Labs hosted indexing service with GraphQL API. This API is rate-limited and is intended only for lightweight applications such as wallets. This option is not recommended for high-bandwidth applications. This indexing service supports the following modules:\n    1. **Token**: Only tokens that implement the Aptos `0x3::token::Token` standard. This indexer will only support 0x3 operations such as mint, create, transfer, offer, claim, and coin token swap. Also see Coin and Token.\n    2. **Coin**: Supports only `0x1::coin::CoinStore`. This indexer will index any coins that appear in Aptos `CoinStore` standard but such coins may not have value unless they implement `0x1::coin::CoinInfo`.\n2. Run your own indexer-enabled Aptos fullnode. With this option, the indexer supports, in addition to the above coin and token modules, basic transactions, i.e., each write set, events and signatures. \n3. Lastly, you can define your own data model (\u201dBusiness Logic\u201d in the above diagram) and set up the database for the index. \n\nA detailed documentation for each option is presented below.\n\n", "doc_id": "00480299-c7fd-42c9-b6f4-0ffaf7ea352d", "embedding": null, "doc_hash": "cfd4ff179720a7bcbd6954360f0d3478faa8856b0faa8c8dffde788c413c8661", "extra_info": null, "node_info": {"start": 0, "end": 1204, "_node_type": "1"}, "relationships": {"1": "a1d7f444-9de8-4e00-afdd-932cf54f89cd"}}, "__type__": "1"}, "e8009d68-acd7-46b7-85e9-f2a0d5ebb42c": {"__data__": {"text": "\n\nUse the Aptos-provided indexing service\n\nAptos provides a rate-limited GraphQL API for public use. See below a few examples showing how to use it.\n\n", "doc_id": "e8009d68-acd7-46b7-85e9-f2a0d5ebb42c", "embedding": null, "doc_hash": "e4150b63c53aa7f32db576bc8bd67eeb1465510d33413af22a49592c9961126e", "extra_info": null, "node_info": {"start": 0, "end": 150, "_node_type": "1"}, "relationships": {"1": "baad1fa2-7af9-4df4-8f23-0639e2aa031b"}}, "__type__": "1"}, "8b79e063-e0da-4c6a-b80f-114ca2ef8a13": {"__data__": {"text": "\n\nAptos indexer GraphQL servers\n\n- **Mainnet:** https://cloud.hasura.io/public/graphiql?endpoint=https://indexer.mainnet.aptoslabs.com/v1/graphql\n- **Testnet:** https://cloud.hasura.io/public/graphiql?endpoint=https://indexer-testnet.staging.gcp.aptosdev.com/v1/graphql\n- **Devnet:** https://cloud.hasura.io/public/graphiql?endpoint=https://indexer-devnet.staging.gcp.aptosdev.com/v1/graphql\n\n", "doc_id": "8b79e063-e0da-4c6a-b80f-114ca2ef8a13", "embedding": null, "doc_hash": "3b3f3a8af95a7778aa9602ffe3de0aee10b07ee2228529679fdcf4da95ed2bf8", "extra_info": null, "node_info": {"start": 0, "end": 393, "_node_type": "1"}, "relationships": {"1": "12bc953c-96e3-4705-801a-376347ee59df"}}, "__type__": "1"}, "baf2133c-01aa-453a-be80-78ced4d437ab": {"__data__": {"text": "\n\nFormat of the address\n\nMake sure that the address (either owner address or any Aptos blockchain account address) in the query contains a prefix of `0x` followed by the 64 hex characters, for example, `0xaa921481e07b82a26dbd5d3bc472b9ad82d3e5bfd248bacac160eac51687c2ff`.\n\n", "doc_id": "baf2133c-01aa-453a-be80-78ced4d437ab", "embedding": null, "doc_hash": "61fc3bce6920ad85a5f067dd0a4b54a61be4cb632c665995ad90f8840128fe7b", "extra_info": null, "node_info": {"start": 0, "end": 273, "_node_type": "1"}, "relationships": {"1": "ea107150-94cb-473e-b97c-e7e91768986d"}}, "__type__": "1"}, "08eb1c1f-3642-4ce8-85eb-29b785901b37": {"__data__": {"text": "\n\nRunning example queries\n\n- Click on Mainnet GraphQL server or Testnet GraphQL server or Devnet GraphQL server.\n- On the server page, paste the **Query** code from an example into the main query section, and the **Query variables** code from the same example into the QUERY VARIABLES section (below the main query section).\n\n\n\n", "doc_id": "08eb1c1f-3642-4ce8-85eb-29b785901b37", "embedding": null, "doc_hash": "39ed0952e09b7aa20c0c6f91136cef088d0cf44f92ad9a541831b4a936bb9ec0", "extra_info": null, "node_info": {"start": 0, "end": 328, "_node_type": "1"}, "relationships": {"1": "2c814c7d-18d0-4a21-ba32-34f97170a497"}}, "__type__": "1"}, "bba9da09-aab6-4d14-9656-d146fe65bb79": {"__data__": {"text": "\n\nExample token queries\n\nGetting all tokens currently in account. \n\n**Query**\n\n```graphql\nquery CurrentTokens($owner_address: String, $offset: Int) {\n  current_token_ownerships(\n    where: {owner_address: {_eq: $owner_address}, amount: {_gt: \"0\"}, table_type: {_eq: \"0x3::token::TokenStore\"}}\n    order_by: {last_transaction_version: desc}\n    offset: $offset\n  ) {\n    token_data_id_hash\n    name\n    collection_name\n    property_version\n    amount\n  }\n}\n```\n\n**Query variables**\n```json\n{\n  \"owner_address\": \"0xaa921481e07b82a26dbd5d3bc472b9ad82d3e5bfd248bacac160eac51687c2ff\",\n  \"offset\": 0\n}\n```\n\n---\n\nGetting all token activities for a particular token. **Note** that to get the `token_id_hash` you have to first make a query to get the token from the above query.\n\n**Query**\n\n```graphql\nquery TokenActivities($token_id_hash: String, $offset: Int) {\n  token_activities(\n    where: {token_data_id_hash: {_eq: $token_id_hash}}\n    # Needed for pagination\n    order_by: {transaction_version: desc}\n    # Optional for pagination\n    offset: $offset\n  ) {\n    transaction_version\n    from_address\n    property_version\n    to_address\n    token_amount\n    transfer_type\n  }\n}\n```\n\n**Query variables**\n\n```json\n{\n  \"token_id_hash\": \"f344b838264bf9aa57d5d4c1e0c8e6bbdc93f000abe3e7f050c2a0f4dc23d030\",\n  \"offset\": 0\n}\n```\n\n---\n\nGetting current token offered to account.\n\n**Query**\n\n```graphql\nquery CurrentOffers($to_address: String, $offset: Int) {\n  current_token_pending_claims(\n    where: {to_address: {_eq: $to_address}, amount: {_gt: \"0\"}}\n    # Needed for pagination\n    order_by: {last_transaction_version: desc}\n    # Optional for pagination\n    offset: $offset\n  ) {\n    token_data_id_hash\n    name\n    collection_name\n    property_version\n    from_address\n    amount\n  }\n}\n```\n\n** Query variables**\n\n```json\n{\n  \"to_address\": \"0xe7be097a90c18f6bdd53efe0e74bf34393cac2f0ae941523ea196a47b6859edb\",\n  \"offset\": 0\n}\n```\n\n", "doc_id": "bba9da09-aab6-4d14-9656-d146fe65bb79", "embedding": null, "doc_hash": "14b5f7cbe17d77705ff47c6f177bad2706e3294c6d849d6122cfaac541914706", "extra_info": null, "node_info": {"start": 0, "end": 1923, "_node_type": "1"}, "relationships": {"1": "82888a98-2bc1-4583-bf6b-79956ab74a22"}}, "__type__": "1"}, "bda455ff-4b13-4e14-ac65-7b0cd404c1db": {"__data__": {"text": "\n\nExample coin queries\n\nGetting coin activities (including gas fees).\n\n**Query**\n\n```graphql\nquery CoinActivity($owner_address: String, $offset: Int) {\n  coin_activities(\n    where: {owner_address: {_eq: $owner_address}}\n    # Needed for pagination\n    order_by: {transaction_version: desc}\n    # Optional for pagination\n    offset: $offset\n  ) {\n    activity_type\n    amount\n    coin_type\n    entry_function_id_str\n    transaction_version\n  }\n}\n```\n\n**Query variables**\n\n```json\n{\n  \"owner_address\": \"0xe7be097a90c18f6bdd53efe0e74bf34393cac2f0ae941523ea196a47b6859edb\",\n  \"offset\": 0\n}\n```\n\n---\n\nCurrently owned coins (`0x1::coin::CoinStore`).\n\n**Query**\n\n```graphql\nquery CurrentBalances($owner_address: String, $offset: Int)\u00cf {\n  current_coin_balances(\n    where: {owner_address: {_eq: $owner_address}}\n    # Needed for pagination\n    order_by: {last_transaction_version: desc}\n    # Optional for pagination\n    offset: $offset\n  ) {\n    owner_address    \n    coin_type\n    amount    \n    last_transaction_timestamp\n  }\n}\n```\n\n**Query variables**\n\n```json\n{\n  \"owner_address\": \"0xe7be097a90c18f6bdd53efe0e74bf34393cac2f0ae941523ea196a47b6859edb\",\n  \"offset\": 0\n}\n```\n\n", "doc_id": "bda455ff-4b13-4e14-ac65-7b0cd404c1db", "embedding": null, "doc_hash": "a5a2684fd2346c107ed96e4ec329df6fe2a8058165d43716600acffbbc32eeed", "extra_info": null, "node_info": {"start": 0, "end": 1171, "_node_type": "1"}, "relationships": {"1": "e726c48b-0ebb-4ffa-99f7-d24c1f379003"}}, "__type__": "1"}, "dd177d05-55d9-4da3-8ccc-12d33daf35d7": {"__data__": {"text": "\n\nExample explorer queries\n\nGetting all user transaction versions (to filter on user transaction for block explorer).\n\n**Query**\n\n```graphql\nquery UserTransactions($limit: Int) {\n  user_transactions(limit: $limit, order_by: {version: desc}) {\n    version\n  }\n}\n```\n\n**Query variables**\n\n```json\n{\n  \"limit\": 10\n}\n```\n\n", "doc_id": "dd177d05-55d9-4da3-8ccc-12d33daf35d7", "embedding": null, "doc_hash": "e37d9b4be9654ce0b24f06c2b3a480570f7b78f6f200ebeb6ba5dac1669965d9", "extra_info": null, "node_info": {"start": 0, "end": 318, "_node_type": "1"}, "relationships": {"1": "2b5fd0db-b1e4-4ede-b954-35b489783791"}}, "__type__": "1"}, "ee986c72-d1a3-4b66-a1c3-5de48ef78e45": {"__data__": {"text": "\n\nRate limits\n\nThe following rate limit applies for this Aptos-provided indexing service:\n\n- For a web application that calls this Aptos-provided indexer API directly from the client (for example, wallet or explorer), the rate limit is currently 1000 requests per five minutes by IP address. **Note that this limit can change with or without prior notice.** \n\nIf you are running a backend (server-side) application and want to call the indexer programmatically then you should run an indexer-enabled fullnode. \n\n", "doc_id": "ee986c72-d1a3-4b66-a1c3-5de48ef78e45", "embedding": null, "doc_hash": "abf1ddcaf49911a064ac09e437735aba410e6ef6379d5350308e7f5c20a6bb66", "extra_info": null, "node_info": {"start": 0, "end": 512, "_node_type": "1"}, "relationships": {"1": "93f7c788-06af-4748-8b39-4c1d3f56e545"}}, "__type__": "1"}, "35d6fe89-b60e-4a58-9b79-af4dcc8cd631": {"__data__": {"text": "\n\nRun an indexer-enabled fullnode\n\nSee Indexer Fullnode.\n\n", "doc_id": "35d6fe89-b60e-4a58-9b79-af4dcc8cd631", "embedding": null, "doc_hash": "fd4e35d4e8d0912d28235f32f1160892679a48e2bd136bb17701a9630fe830f1", "extra_info": null, "node_info": {"start": 0, "end": 58, "_node_type": "1"}, "relationships": {"1": "2016e50c-034f-4ffd-96da-d44c14125cfe"}}, "__type__": "1"}, "d70293ae-84c3-4411-8282-9b51f5a68533": {"__data__": {"text": "\n\nDefine your own data model\n\nUse this method if you want to develop your custom indexer for the Aptos ledger data. \n\n:::tip When to use custom indexer\nCurrently Aptos-provided indexing service (see above) supports the following core Move modules:\n- `0x1::coin`.\n- `0x3::token`.\n- `0x3::token_transfers`. \n\nIf you need an indexed database for any other Move modules and contracts, then you should develop your custom indexer.\n:::\n\nCreating a custom indexer involves the following steps. Refer to the indexing block diagram at the start of this document. \n\n1. Define new table schemas, using an ORM like Diesel. In this document Diesel is used to describe the custom indexing steps (\"Business logic\" and the data queries in the diagram).\n2. Create new data models based on the new tables (\"Business logic\" in the diagram).\n3. Create a new transaction processor, or optionally add to an existing processor. In the diagram this step corresponds to processing the ledger database according to the new business logic and writing to the indexed database.\n4. Integrate the new processor. Optional if you are reusing an existing processor.\n\nIn the below detailed description, an example of indexing and querying for the coin balances is used. You can see this in the `coin_processor`. \n\n", "doc_id": "d70293ae-84c3-4411-8282-9b51f5a68533", "embedding": null, "doc_hash": "dbff79d9bad06c8043fd8ad54286f9211dfe6d24bced12fd5bc0fee92d789c46", "extra_info": null, "node_info": {"start": 0, "end": 1279, "_node_type": "1"}, "relationships": {"1": "a5b91fec-a11f-44fa-bf4b-232e0070a308"}}, "__type__": "1"}, "43ceb549-3a93-463d-bcff-c122fa808b46": {"__data__": {"text": "\n\n1. Define new table schemas\n\nIn this example we use PostgreSQL and Diesel as the ORM. To make sure that we make backward-compatible changes without having to reset the database at every upgrade, we use Diesel migrations to manage the schema. This is why it is very important to start with generating a new Diesel migration before doing anything else. \n\nMake sure you clone the Aptos-core repo by running `git clone https://github.com/aptos-labs/aptos-core.git` and then `cd` into `aptos-core/tree/main/crates/indexer` directory. Then proceed as below. \n\na. The first step is to create a new Diesel migration. This will generate a new folder under migrations with `up.sql` and `down.sql`\n\n```bash\nDATABASE_URL=postgres://postgres@localhost:5432/postgres diesel migration generate add_coin_tables\n```\n\nb. Create the necessary table schemas. This is just PostgreSQL code. In the code shown below, the `up.sql` will have the new changes and `down.sql` will revert those changes.\n\n```sql\n-- up.sql\n-- coin balances for each version\nCREATE TABLE coin_balances (\n  transaction_version BIGINT NOT NULL,\n  owner_address VARCHAR(66) NOT NULL,\n  -- Hash of the non-truncated coin type\n  coin_type_hash VARCHAR(64) NOT NULL,\n  -- creator_address::name::symbol\n  coin_type VARCHAR(5000) NOT NULL,\n  amount NUMERIC NOT NULL,\n  transaction_timestamp TIMESTAMP NOT NULL,\n  inserted_at TIMESTAMP NOT NULL DEFAULT NOW(),\n  -- Constraints\n  PRIMARY KEY (\n    transaction_version,\n    owner_address,\n    coin_type_hash\n  )\n);\n-- latest coin balances\nCREATE TABLE current_coin_balances {...}\n-- down.sql\nDROP TABLE IF EXISTS coin_balances;\nDROP TABLE IF EXISTS current_coin_balances;\n```\n\nSee the full source for `up.sql` and `down.sql`.\n\nc. Run the migration. We suggest running it multiple times with `redo` to ensure that both `up.sql` and `down.sql` are implemented correctly. This will also modify the `schema.rs` file. \n\n```bash\nDATABASE_URL=postgres://postgres@localhost:5432/postgres diesel migration run\nDATABASE_URL=postgres://postgres@localhost:5432/postgres diesel migration redo\n```\n\n", "doc_id": "43ceb549-3a93-463d-bcff-c122fa808b46", "embedding": null, "doc_hash": "077526e0acec0a26859b7382110a1677d513a9456c1d64c44c0f3ca09761534f", "extra_info": null, "node_info": {"start": 0, "end": 2078, "_node_type": "1"}, "relationships": {"1": "bb17e666-b7e5-4054-9001-2b5b109939c8"}}, "__type__": "1"}, "21b424f4-cf9e-4c3f-a978-aba640343669": {"__data__": {"text": "\n\n2. Create new data schemas\n\nWe now have to prepare the Rust data models that correspond to the Diesel schemas. In the case of coin balances, we will define `CoinBalance` and `CurrentCoinBalance` as below: \n\n```rust\n#[derive(Debug, Deserialize, FieldCount, Identifiable, Insertable, Serialize)]\n#[diesel(primary_key(transaction_version, owner_address, coin_type))]\n#[diesel(table_name = coin_balances)]\npub struct CoinBalance {\n    pub transaction_version: i64,\n    pub owner_address: String,\n    pub coin_type_hash: String,\n    pub coin_type: String,\n    pub amount: BigDecimal,\n    pub transaction_timestamp: chrono::NaiveDateTime,\n}\n\n#[derive(Debug, Deserialize, FieldCount, Identifiable, Insertable, Serialize)]\n#[diesel(primary_key(owner_address, coin_type))]\n#[diesel(table_name = current_coin_balances)]\npub struct CurrentCoinBalance {\n    pub owner_address: String,\n    pub coin_type_hash: String,\n    pub coin_type: String,\n    pub amount: BigDecimal,\n    pub last_transaction_version: i64,\n    pub last_transaction_timestamp: chrono::NaiveDateTime,\n}\n```\n\nWe will also need to specify the parsing logic, where the input is a portion of the transaction. In the case of coin balances, we can find all the details in `WriteSetChanges`, specifically where the write set change type is `write_resources`.\n\n**Where to find the relevant data for parsing**: This requires a combination of understanding the Move module and the structure of the transaction. In the example of coin balance, the contract lives in coin.move, specifically the coin struct (search for `struct Coin`) that has a `value` field. We then look at an example transaction where we find this exact structure in `write_resources`:\n\n```json\n\"changes\": [\n  {\n    ...\n    \"data\": {\n      \"type\": \"0x1::coin::CoinStore\",\n      \"data\": {\n        \"coin\": {\n          \"value\": \"49742\"\n      },\n      ...\n```\n\nSee the full code in coin_balances.rs.\n\n", "doc_id": "21b424f4-cf9e-4c3f-a978-aba640343669", "embedding": null, "doc_hash": "74dbc0a1b23cc1252ecd222eacbf2293cafdfd4a9fa6df3ee0472f37fa3486b3", "extra_info": null, "node_info": {"start": 0, "end": 1914, "_node_type": "1"}, "relationships": {"1": "f5a205b6-1f4a-4388-9634-f6e4aa008177"}}, "__type__": "1"}, "3a46ba33-fd4d-4ff2-91e9-8893958f96ed": {"__data__": {"text": "\n\n3. Create a new processor\n\nNow that we have the data model and the parsing function, we need to call that parsing function and save the resulting model in our Postgres database. We do this by creating (or modifying) a `processor`. We have abstracted a lot already from that class, so the only function that should be implemented is `process_transactions` (there are a few more functions that should be copied, those should be obvious from the example). \n\nThe `process_transactions` function takes in a vector of transactions with a start and end version that are used for tracking purposes. The general flow should be: \n  - Loop through transactions in the vector.\n  - Aggregate relevant models. Sometimes deduping is required, e.g. in the case of `CurrentCoinBalance`.\n  - Insert the models into the database in a single Diesel transaction. This is important, to ensure that we do not have partial writes.\n  - Return status (error or success).\n\n:::tip Coin transaction processor\nSee coin_process.rs for a relatively straightforward example. You can search for `coin_balances` in the page for the specific code snippet related to coin balances. \n:::\n\n**How to decide whether to create a new processor:** This is completely up to you. The benefit of creating a new processor is that you are starting from scratch so you will have full control over exactly what gets written to the indexed database. The downside is that you will have to maintain a new fullnode, since there is a 1-to-1 mapping between a fullnode and the processor. \n\n", "doc_id": "3a46ba33-fd4d-4ff2-91e9-8893958f96ed", "embedding": null, "doc_hash": "4a7ee9ead6277cc23f7f2dc257f3d7fed4fe1035f568ac2d1de0a9f5f529a88d", "extra_info": null, "node_info": {"start": 0, "end": 1535, "_node_type": "1"}, "relationships": {"1": "fb1bf3dc-e053-4443-8804-e91aafeeb452"}}, "__type__": "1"}, "1957c8bf-245a-454c-a471-1ce5ad31e1eb": {"__data__": {"text": "\n\n4. Integrate the new processor\n\nThis is the easiest step and involves just a few additions. \n\n1. To start with, make sure to add the new processor in the Rust code files: `mod.rs` and `runtime.rs`. See below: \n\n**mod.rs**\n\n```rust\npub enum Processor {\n  CoinProcessor,\n  ...\n}\n...\n  COIN_PROCESSOR_NAME => Self::CoinProcessor,\n```\n\n**runtime.rs**\n\n```rust\nProcessor::CoinProcessor => Arc::new(CoinTransactionProcessor::new(conn_pool.clone())),\n```\n\n2. Create a `fullnode.yaml` with the correct configuration and test the custom indexer by starting a fullnode with this `fullnode.yaml`. \n\n**fullnode.yaml**\n\n```yaml\nstorage:\n  enable_indexer: true\n  storage_pruner_config:\n      ledger_pruner_config:\n          enable: false\n\nindexer:\n  enabled: true\n  check_chain_id: true\n  emit_every: 1000\n  postgres_uri: \"postgres://postgres@localhost:5432/postgres\"\n  processor: \"coin_processor\"\n  fetch_tasks: 10\n  processor_tasks: 10\n```\n\nTest by starting an Aptos fullnode by running the below command. You will see many logs in the terminal output, so use the `grep` filter to see only indexer log output, as shown below:\n\n```bash\ncargo run -p aptos-node --features \"indexer\" --release -- -f ./fullnode_coin.yaml | grep -E \"_processor\"\n```\n\nSee the full instructions on how to start an indexer-enabled fullnode in Indexer Fullnode.\n\n", "doc_id": "1957c8bf-245a-454c-a471-1ce5ad31e1eb", "embedding": null, "doc_hash": "8570be22d9ca3c140eab7e2a8e7d8616d625484eef5ddf5e9062a215b8bc9ec7", "extra_info": null, "node_info": {"start": 0, "end": 1327, "_node_type": "1"}, "relationships": {"1": "3f7ba9bc-cd29-477f-9e76-ab8f0e0b871d"}}, "__type__": "1"}, "8ae5783e-f728-4c1f-ac0b-20d6f2e10dd6": {"__data__": {"text": "\n\nInstall the Aptos CLI\n\nThe Aptos command line interface (CLI) helps you develop apps, debug issues, and operate nodes. See Use Aptos CLI for Configuration for all possible uses.\n\nYou can install the Aptos CLI as a pre-compiled binary:\n\n* Install the Aptos CLI by script - Recommended for Linux and Windows. MacOS is also supported.\n* Install the Aptos CLI with Homebrew - Recommended for MacOS.\n* Download the prebuilt Aptos CLI binaries - Ensures you get a stable version of the Aptos CLI built on a regular cadence from the `main` upstream development branch.\n\nYou can also build the Aptos CLI from source code. This allows you to build from any of the Aptos branches, including `devnet`, `testnet`, `mainnet`, and the latest code in `main`, the development branch.\n\n", "doc_id": "8ae5783e-f728-4c1f-ac0b-20d6f2e10dd6", "embedding": null, "doc_hash": "36813598a7c1e127ad52c08a75743b82fc0399db206fcfcd25bc266ccdc3d608", "extra_info": null, "node_info": {"start": 0, "end": 771, "_node_type": "1"}, "relationships": {"1": "4d40f815-520a-496b-9477-c754fe5c523c"}}, "__type__": "1"}, "14b6cba7-5bba-40b6-9240-a642af2953f7": {"__data__": {"text": "\n\n(Optional) Installing the Move Prover\nOptionally, you can install the Move Prover.\n\n", "doc_id": "14b6cba7-5bba-40b6-9240-a642af2953f7", "embedding": null, "doc_hash": "7ab65679260876ac2e9b49f92891d9276089d3db3563ca63cbafcb70f2abf636", "extra_info": null, "node_info": {"start": 0, "end": 86, "_node_type": "1"}, "relationships": {"1": "d619a671-8390-41cb-9b86-56c068fe07b7"}}, "__type__": "1"}, "a7d7c512-0ac1-41d6-97be-26458690334b": {"__data__": {"text": "\n\nInstall the Aptos CLI with Brew\n\nRecommended on macOS, `brew` is a package manager that allows for installing and updating packages in a single \ncommand.\n\n:::tip Not supported on Windows\nBrew is not supported fully on Windows\n:::\n\n", "doc_id": "a7d7c512-0ac1-41d6-97be-26458690334b", "embedding": null, "doc_hash": "e67b6da2780d1387d41ab3b17d3c2851945a6b874c9dd626a7d5dc46a4d966d5", "extra_info": null, "node_info": {"start": 0, "end": 233, "_node_type": "1"}, "relationships": {"1": "ae4e1199-2d9f-49a8-a7ce-6116ef320f62"}}, "__type__": "1"}, "dad646de-8764-4bca-881d-e3ebe05e96d2": {"__data__": {"text": "\n\nInstallation\n\n1. Ensure you have `brew` installed https://brew.sh/\n2. Open a terminal and enter the following commands\n```bash\n    brew update        # Gets the latest updates for packages\n    brew install aptos # Installs the Aptos CLI\n```\n3. You can now get help instructions by running `aptos help`. You may have to open a new terminal window.\n```bash\n   aptos help\n```\n\n", "doc_id": "dad646de-8764-4bca-881d-e3ebe05e96d2", "embedding": null, "doc_hash": "7a12c383d610f3e30ce55339900439dd8394dca37c0d1fa9438281e2033aa21d", "extra_info": null, "node_info": {"start": 0, "end": 376, "_node_type": "1"}, "relationships": {"1": "876ddc53-d04f-478e-ab47-3902f8fb2425"}}, "__type__": "1"}, "9bbe75e8-71e9-4d2d-8750-647e80b708c9": {"__data__": {"text": "\n\nUpgrading the CLI\n\nUpgrading the CLI with brew is very simple, simply run\n\n```bash\n  brew update        # Gets the latest updates for packages\n  brew upgrade aptos # Upgrades the Aptos CLI\n```\n\n", "doc_id": "9bbe75e8-71e9-4d2d-8750-647e80b708c9", "embedding": null, "doc_hash": "e39b9df6efe6ce32754a69c95d9ee9e39eaa9848f3bc4294ae7d65bc62cdafa2", "extra_info": null, "node_info": {"start": 0, "end": 196, "_node_type": "1"}, "relationships": {"1": "e8be341c-3dc6-4428-9356-ecfc9f712dac"}}, "__type__": "1"}, "0fdb1556-102c-4f1f-b16c-782b6201522b": {"__data__": {"text": "\n\nAdditional details\n\nAptos CLI homebrew Readme\n\n", "doc_id": "0fdb1556-102c-4f1f-b16c-782b6201522b", "embedding": null, "doc_hash": "0269f585852a70f70448719e4f9389a059dd24aebf81f346be9088cd00e8d204", "extra_info": null, "node_info": {"start": 0, "end": 49, "_node_type": "1"}, "relationships": {"1": "a6d6026d-d67b-480a-bc73-5bf4b3f1a969"}}, "__type__": "1"}, "260cb67e-92f7-4b28-8c0b-c31b848bdae4": {"__data__": {"text": "\n\nInstall the Move Prover\n\nIf you want to use the Move Prover, install the Move Prover dependencies after installing the CLI binary.\n\n:::tip\nCurrently, Windows is not supported by the Move Prover.\n:::\n\n1. See Building Aptos From Source\n\n1. Then, in the checked out aptos-core directory, install additional Move tools:\n\n   ```bash\n   ./scripts/dev_setup.sh -yp\n   source ~/.profile\n   ```\n\n   :::info\n   `dev_setup.sh -p` updates your `~./profile` with environment variables to support the installed Move Prover tools. You may need to set `.bash_profile` or `.zprofile` or other setup files for your shell.\n   :::\n\n1. You can now run the Move Prover to prove an example:\n    ```bash\n    aptos move prove --package-dir aptos-move/move-examples/hello_prover/\n\n", "doc_id": "260cb67e-92f7-4b28-8c0b-c31b848bdae4", "embedding": null, "doc_hash": "2d501b2082808edc736b22a18833c45c42fc09e6906e9d8a7e4d76242b2e48a4", "extra_info": null, "node_info": {"start": 0, "end": 757, "_node_type": "1"}, "relationships": {"1": "b1be4d11-e41c-4c0c-8a75-94212634fc6a"}}, "__type__": "1"}, "a883dc45-9050-4c89-8cf1-c31c71c1f5ee": {"__data__": {"text": "\n\nIntegers\n\nMove supports six unsigned integer types: `u8`, `u16`, `u32`, `u64`, `u128`, and `u256`. Values of these types range from 0 to a maximum that depends on the size of the type.\n\n| Type                             | Value Range              |\n| -------------------------------- | ------------------------ |\n| Unsigned 8-bit integer, `u8`     | 0 to 28 - 1   |\n| Unsigned 16-bit integer, `u16`   | 0 to 216 - 1  |\n| Unsigned 32-bit integer, `u32`   | 0 to 232 - 1  |\n| Unsigned 64-bit integer, `u64`   | 0 to 264 - 1  |\n| Unsigned 128-bit integer, `u128` | 0 to 2128 - 1 |\n| Unsigned 256-bit integer, `u256` | 0 to 2256 - 1 |\n\n", "doc_id": "a883dc45-9050-4c89-8cf1-c31c71c1f5ee", "embedding": null, "doc_hash": "b65f411b21c66170c3e4a0c09c4e03842d6b6c3fde175537264a11520bb9a7d1", "extra_info": null, "node_info": {"start": 0, "end": 635, "_node_type": "1"}, "relationships": {"1": "6984a120-3107-4103-862a-baf3f3011dea"}}, "__type__": "1"}, "d51b6eec-2798-4dea-99e5-020892587ab7": {"__data__": {"text": "\n\nLiterals\n\nLiteral values for these types are specified either as a sequence of digits (e.g.,`112`) or as hex literals, e.g., `0xFF`. The type of the literal can optionally be added as a suffix, e.g., `112u8`. If the type is not specified, the compiler will try to infer the type from the context where the literal is used. If the type cannot be inferred, it is assumed to be `u64`.\n\nNumber literals can be separated by underscores for grouping and readability. (e.g.,`1_234_5678`, `1_000u128`, `0xAB_CD_12_35`).\n\nIf a literal is too large for its specified (or inferred) size range, an error is reported.\n\n", "doc_id": "d51b6eec-2798-4dea-99e5-020892587ab7", "embedding": null, "doc_hash": "9eceea7e4ea364011a61c1ffd9d429285fe239455d27a8498bee7543ce3add60", "extra_info": null, "node_info": {"start": 0, "end": 608, "_node_type": "1"}, "relationships": {"1": "1512dd2c-8738-4424-b798-19e468b80f25"}}, "__type__": "1"}, "218ad2e2-bedf-437f-90d2-7ebe938afee2": {"__data__": {"text": "\n\nExamples\n\n```move\n// literals with explicit annotations;\nlet explicit_u8 = 1u8;\nlet explicit_u16 = 1u16;\nlet explicit_u32 = 1u32;\nlet explicit_u64 = 2u64;\nlet explicit_u128 = 3u128;\nlet explicit_u256 = 1u256;\nlet explicit_u64_underscored = 154_322_973u64;\n\n// literals with simple inference\nlet simple_u8: u8 = 1;\nlet simple_u16: u16 = 1;\nlet simple_u32: u32 = 1;\nlet simple_u64: u64 = 2;\nlet simple_u128: u128 = 3;\nlet simple_u256: u256 = 1;\n\n// literals with more complex inference\nlet complex_u8 = 1; // inferred: u8\n// right hand argument to shift must be u8\nlet _unused = 10 << complex_u8;\n\nlet x: u8 = 38;\nlet complex_u8 = 2; // inferred: u8\n// arguments to `+` must have the same type\nlet _unused = x + complex_u8;\n\nlet complex_u128 = 133_876; // inferred: u128\n// inferred from function argument type\nfunction_that_takes_u128(complex_u128);\n\n// literals can be written in hex\nlet hex_u8: u8 = 0x1;\nlet hex_u16: u16 = 0x1BAE;\nlet hex_u32: u32 = 0xDEAD80;\nlet hex_u64: u64 = 0xCAFE;\nlet hex_u128: u128 = 0xDEADBEEF;\nlet hex_u256: u256 = 0x1123_456A_BCDE_F;\n```\n\n", "doc_id": "218ad2e2-bedf-437f-90d2-7ebe938afee2", "embedding": null, "doc_hash": "1ba38fa4ffd3400b5fa8aa4eedfc311db2f493575a6e9fad033c493f53ca200c", "extra_info": null, "node_info": {"start": 0, "end": 1070, "_node_type": "1"}, "relationships": {"1": "c67f00c0-a677-4dc8-ac43-7c367a1a3246"}}, "__type__": "1"}, "6251535a-9dc5-4146-bbfa-5f3ed67db738": {"__data__": {"text": "\n\nOperations\n\n", "doc_id": "6251535a-9dc5-4146-bbfa-5f3ed67db738", "embedding": null, "doc_hash": "18ec54eedc56a10e2bb2795afea17fb5358688b8e817c1b2c014ea2d5b0471c5", "extra_info": null, "node_info": {"start": 0, "end": 14, "_node_type": "1"}, "relationships": {"1": "0b50f383-99e7-465c-bd21-64919075993a"}}, "__type__": "1"}, "04c8a8b9-b3ff-4a6c-821d-fddb8ab76a45": {"__data__": {"text": "\n\nArithmetic\n\nEach of these types supports the same set of checked arithmetic operations. For all of these operations, both arguments (the left and right side operands) *must* be of the same type. If you need to operate over values of different types, you will need to first perform a cast. Similarly, if you expect the result of the operation to be too large for the integer type, perform a cast to a larger size before performing the operation.\n\nAll arithmetic operations abort instead of behaving in a way that mathematical integers would not (e.g., overflow, underflow, divide-by-zero).\n\n| Syntax | Operation | Aborts If\n|--------|-----------|-------------------------------------\n| `+` |addition | Result is too large for the integer type\n| `-` | subtraction | Result is less than zero\n| `*` | multiplication | Result is too large for the integer type\n| `%` | modular division | The divisor is `0`\n| `/` | truncating division | The divisor is `0`\n\n", "doc_id": "04c8a8b9-b3ff-4a6c-821d-fddb8ab76a45", "embedding": null, "doc_hash": "7e7be4b2d7d9967f211b8e499e2f6217c6357c7892bac276c890624c6239ed45", "extra_info": null, "node_info": {"start": 0, "end": 953, "_node_type": "1"}, "relationships": {"1": "b19e5063-f1c7-410e-b848-00dcb0b32341"}}, "__type__": "1"}, "5444f31f-5130-42ae-a4b1-0085bcb48670": {"__data__": {"text": "\n\nBitwise\n\nThe integer types support the following bitwise operations that treat each number as a series of individual bits, either 0 or 1, instead of as numerical integer values.\n\nBitwise operations do not abort.\n\n| Syntax              | Operation   | Description                                           |\n|---------------------|-------------|-------------------------------------------------------|\n| `&`                 | bitwise and | Performs a boolean and for each bit pairwise          |\n| &#124; | bitwise or  | Performs a boolean or for each bit pairwise           |\n| `^`                 | bitwise xor | Performs a boolean exclusive or for each bit pairwise |\n\n", "doc_id": "5444f31f-5130-42ae-a4b1-0085bcb48670", "embedding": null, "doc_hash": "253ae7f18cc117308f6cad3c13fd67c4cafdee86b9444ee6dff93aaa8d0f6964", "extra_info": null, "node_info": {"start": 0, "end": 673, "_node_type": "1"}, "relationships": {"1": "883a4cbc-5b3c-4a8b-9ecc-6d56add48842"}}, "__type__": "1"}, "edcc3661-1d75-49dc-92ec-ec7db2ecd09e": {"__data__": {"text": "\n\nBit Shifts\n\nSimilar to the bitwise operations, each integer type supports bit shifts. But unlike the other operations, the righthand side operand (how many bits to shift by) must *always* be a `u8` and need not match the left side operand (the number you are shifting).\n\nBit shifts can abort if the number of bits to shift by is greater than or equal to `8`, `16`, `32`, `64`, `128` or `256` for `u8`, `u16`, `u32`, `u64`, `u128` and `u256` respectively.\n\n| Syntax | Operation  | Aborts if\n|--------|------------|----------\n|`<<`    | shift left | Number of bits to shift by is greater than the size of the integer type\n|`>>`    | shift right| Number of bits to shift by is greater than the size of the integer type\n\n", "doc_id": "edcc3661-1d75-49dc-92ec-ec7db2ecd09e", "embedding": null, "doc_hash": "c329b8769735f3080ed1beef8512ced33ba50fee5f7ffedd4ff35749df7fb5fc", "extra_info": null, "node_info": {"start": 0, "end": 719, "_node_type": "1"}, "relationships": {"1": "cbcb5efc-7380-4e77-a9c5-1a352ec67816"}}, "__type__": "1"}, "59e4a2de-0d41-4798-b15f-0f0aae662c85": {"__data__": {"text": "\n\nComparisons\n\nInteger types are the *only* types in Move that can use the comparison operators. Both arguments need to be of the same type. If you need to compare integers of different types, you will need to cast one of them first.\n\nComparison operations do not abort.\n\n| Syntax | Operation\n|--------|-----------\n| `<`    | less than\n| `>`    | greater than\n| `<=`   | less than or equal to\n| `>=`   | greater than or equal to\n\n", "doc_id": "59e4a2de-0d41-4798-b15f-0f0aae662c85", "embedding": null, "doc_hash": "d664efd8ac8725209f1758c626761698959a2dca9de68f47358b743f2abc2f8c", "extra_info": null, "node_info": {"start": 0, "end": 430, "_node_type": "1"}, "relationships": {"1": "16bfc320-fa12-4597-9158-f7b5060f74f7"}}, "__type__": "1"}, "4c1bd854-f82d-4ca3-85aa-42ecfec33433": {"__data__": {"text": "\n\nEquality\n\nLike all types with `drop` in Move, all integer types support the \"equal\" and \"not equal\"  operations. Both arguments need to be of the same type. If you need to compare integers of different types, you will need to cast one of them first.\n\nEquality operations do not abort.\n\n| Syntax | Operation\n|--------|----------\n| `==`   | equal\n| `!=`   | not equal\n\nFor more details see the section on equality\n\n", "doc_id": "4c1bd854-f82d-4ca3-85aa-42ecfec33433", "embedding": null, "doc_hash": "ff5954ca71a2f7ba63cf711688baa86435ec16dd21f0a6c3e5333027e3291c2b", "extra_info": null, "node_info": {"start": 0, "end": 415, "_node_type": "1"}, "relationships": {"1": "dadbe380-9c08-476c-bcd7-b25e4712c2a9"}}, "__type__": "1"}, "80b676af-96d1-4b61-a5b7-c4cf041187ba": {"__data__": {"text": "\n\nCasting\n\nInteger types of one size can be cast to integer types of another size. Integers are the only types in Move that support casting.\n\nCasts *do not* truncate. Casting will abort if the result is too large for the specified type\n\n| Syntax     | Operation                                                                       | Aborts if\n|------------|---------------------------------------------------------------------------------|---------------------------------------\n| `(e as T)`| Cast integer expression `e` into an integer type `T` | `e` is too large to represent as a `T`\n\nHere, the type of `e` must be `8`, `16`, `32`, `64`, `128` or `256` and `T` must be `u8`, `u16`, `u32`, `u64`, `u128` oe `u256`.\n\nFor example:\n\n- `(x as u8)`\n- `(y as u16)`\n- `(873u16 as u32)`\n- `(2u8 as u64)`\n- `(1 + 3 as u128)`\n- `(4/2 + 12345 as u256)`\n\n", "doc_id": "80b676af-96d1-4b61-a5b7-c4cf041187ba", "embedding": null, "doc_hash": "5a13051afabc929ac2ee6c67a23234b625612494990d17d51a36e150b1dc9bcc", "extra_info": null, "node_info": {"start": 0, "end": 846, "_node_type": "1"}, "relationships": {"1": "11012a6c-eeec-4d81-ac52-a1a096e2a691"}}, "__type__": "1"}, "f5ea9e7b-887c-414e-ab98-c2a5405b3d79": {"__data__": {"text": "\n\nOwnership\n\nAs with the other scalar values built-in to the language, integer values are implicitly copyable, meaning they can be copied without an explicit instruction such as `copy`.\n\n", "doc_id": "f5ea9e7b-887c-414e-ab98-c2a5405b3d79", "embedding": null, "doc_hash": "8234cd29af229a4062db888745fe8b06e05b1d2b11b1351c134fb451e44fb4c9", "extra_info": null, "node_info": {"start": 0, "end": 187, "_node_type": "1"}, "relationships": {"1": "fab48aeb-5ac7-4c18-8020-856e279fd32f"}}, "__type__": "1"}, "3d991926-5fa8-49c8-ba64-a0ca1daf97be": {"__data__": {"text": "\n\nInteract with the Aptos Blockchain\n\nFollow these guides to work with the Aptos blockchain.\n\n- ### Index Aptos Data\n- ### Create a Signed Transaction\n- ### Integrate with Aptos Names Service\n- ### Integrate with the Aptos Faucet\n- ### Handle Errors in Aptos\n\n", "doc_id": "3d991926-5fa8-49c8-ba64-a0ca1daf97be", "embedding": null, "doc_hash": "c29a99b29cce34f4412078fb3385f419181a2e9004defd4618c4ff72cc8f1774", "extra_info": null, "node_info": {"start": 0, "end": 260, "_node_type": "1"}, "relationships": {"1": "cc5230cc-8299-4d1d-bb7f-2036f06ff729"}}, "__type__": "1"}, "ba6882b4-2c71-42bc-8d1e-08c71db91ad2": {"__data__": {"text": "\n\nIntroduction\n\nWelcome to Move, a next generation language for secure, sandboxed, and formally verified programming. It has been used as the smart contract language for several blockchains including Aptos. Move allows developers to write programs that flexibly manage and transfer assets, while providing the security and protections against attacks on those assets. However, Move has been developed with use cases in mind outside a blockchain context as well.\n\nMove takes its cue from Rust by using resource types with move (hence the name) semantics as an explicit representation of digital assets, such as currency.\n\n", "doc_id": "ba6882b4-2c71-42bc-8d1e-08c71db91ad2", "embedding": null, "doc_hash": "1e36e0c4499ace5452b9aa94899fc6a807565f253e39c9fcaa56c3341bb846f9", "extra_info": null, "node_info": {"start": 0, "end": 621, "_node_type": "1"}, "relationships": {"1": "bc4e582e-6d5b-47c9-bcb1-3c5bffc6adcf"}}, "__type__": "1"}, "afd8fed0-4a89-4744-9fc9-76f8737332ff": {"__data__": {"text": "\n\nWho is Aptos Move Book for?\n\nMove was designed and created as a secure, verified, yet flexible programming language. The first use of Move is for the implementation of the Diem blockchain, and it is currently being used on Aptos.\n\nThis book is suitable for developers who are with some programming experience and who want to begin understanding the core programming language and see examples of its usage.\n\n", "doc_id": "afd8fed0-4a89-4744-9fc9-76f8737332ff", "embedding": null, "doc_hash": "5e51dabad05babdca37ff7be86cf91276644bf53b95b7e6c5eb979c1f8aac868", "extra_info": null, "node_info": {"start": 0, "end": 409, "_node_type": "1"}, "relationships": {"1": "1322539f-9a5b-492f-a03d-39b84d23e53a"}}, "__type__": "1"}, "e92fd708-263e-4157-b117-680be0173605": {"__data__": {"text": "\n\nWhere Do I Start?\n\nBegin with understanding modules and scripts and then work through the Move Tutorial.\n\n", "doc_id": "e92fd708-263e-4157-b117-680be0173605", "embedding": null, "doc_hash": "90d9138b41f5b59274180009a4e3da9839c0bd43c7a36aee58c3d9de0d67cd1c", "extra_info": null, "node_info": {"start": 0, "end": 108, "_node_type": "1"}, "relationships": {"1": "8ed59976-2676-44c9-a796-d9a0f5602b80"}}, "__type__": "1"}, "ceb5b647-5d31-4238-a06b-a9438dcf370e": {"__data__": {"text": "\n\nLeaderboard Metrics\n\nThis document explains how the rewards for validator are evaluated and displayed on the Aptos Validator Status page. \n\n", "doc_id": "ceb5b647-5d31-4238-a06b-a9438dcf370e", "embedding": null, "doc_hash": "0203e11aaafc28600162f364da5bdd0dd63c305f89efb81abeb5e01b1819cd9a", "extra_info": null, "node_info": {"start": 0, "end": 142, "_node_type": "1"}, "relationships": {"1": "33b20e71-0905-43a1-b409-dd859f842f7f"}}, "__type__": "1"}, "72d263c2-a03c-4714-a508-a75c5544d5aa": {"__data__": {"text": "\n\nHow rewards are calculated\n\n:::tip Staking documentation\nFor a backgrounder on staking with explanations of epoch, rewards and how to join and leave validator set, see the Staking. \n:::\n\n- An epoch starts with a finalized validator set. During the epoch, only validators in this validator set will vote. \n- Epoch value on the mainnet is set by the governance. See Aptos Blockchain Deployments for epoch values for other Aptos networks.\n- During the epoch, following the process described in Validation on the Aptos blockchain, a validator is selected as a leader to make a proposal. Because the validator set is unchanged during the course of an epoch, this will result in a validator being selected multiple times as a leader in an epoch.\n-  On successful proposals, i.e., proposals achieving the quorum consensus, the leaders earn rewards based on their stake and on the reward rate that is configured on-chain. The reward rate is the same for every validator.\n-  If all the proposals in an epoch achieve quorum consensus, a validator earns the maximum reward for the epoch. **Rewards are given only to the leader validators, and not to the voters.**\n-  On failed proposals, i.e., a proposal that did not achieve the quorum consensus, the leaders do not earn any reward for that proposal.\n-  If all the proposals in an epoch fail, a validator earns zero rewards for that epoch.\n\n", "doc_id": "72d263c2-a03c-4714-a508-a75c5544d5aa", "embedding": null, "doc_hash": "f1384ba016acfeb7ff978e93c3b4a43aa2d2cc5bf2d8825f0efcd2243c8a1a5f", "extra_info": null, "node_info": {"start": 0, "end": 1383, "_node_type": "1"}, "relationships": {"1": "517244d7-1b7c-4563-be2f-662771fe1d1e"}}, "__type__": "1"}, "ab8b169c-2d17-40ce-855d-49eb5e98196b": {"__data__": {"text": "\n\nExample\n\n:::tip Rewards are given only at the end of the epoch\nNote that the rewards are given only at the end of the epoch, not on every block.\n:::\n\nThe reward a leader receives is calculated by multiplying the maximum possible reward with the leader's proposal success rate. For example:\n- A leader with 8 successful and 2 failed proposals will receive 80% of maximum reward.\n- Similarly, another leader with 80 successful and 20 failed proposal will also receive 80% of maximum reward.\n- Also, two leaders with no failures but one with 10 and another with 100 successful proposals will get the same % of the maximum reward.\n\n:::tip Reward rate is the same\nNote also that the reward rate is the same for every validator. Hence the maximum reward is directly proportional to the staking amount, i.e., the more a validator stakes, the more the validator can earn in absolute terms.\n:::\n\n", "doc_id": "ab8b169c-2d17-40ce-855d-49eb5e98196b", "embedding": null, "doc_hash": "228e7c2f7a41a7ebbe5bb49aea540d331b07beb01019cf68da685e815877eda1", "extra_info": null, "node_info": {"start": 0, "end": 889, "_node_type": "1"}, "relationships": {"1": "e4be3a3c-b00f-4dd1-b3a4-271c552f0147"}}, "__type__": "1"}, "53bf067c-4e23-4418-8b67-30fc5471721d": {"__data__": {"text": "\n\nRewards performance\n\n- The REWARDS PERFORMANCE column shows the rewards performance of a validator. It is calculated as a % of reward earned by the validator out of the maximum reward earning opportunity i.e., `(rewards earned across the epochs)/(maximum reward opportunity across the epochs)`. **This is a cumulative metric across all the epochs.**\n- A validator can improve their performance by improving their proposal success rate.\n\n", "doc_id": "53bf067c-4e23-4418-8b67-30fc5471721d", "embedding": null, "doc_hash": "779b97c7d7256daa8102e7acfe1c9db603ee222e14f5f48ec0e4b9eaa51a2ec6", "extra_info": null, "node_info": {"start": 0, "end": 439, "_node_type": "1"}, "relationships": {"1": "130a131a-e3f2-47ce-80a7-350a6492f683"}}, "__type__": "1"}, "43052fa2-ea0c-4efe-b86b-a6501cf489ba": {"__data__": {"text": "\n\nLast epoch performance\n\nThe LAST EPOCH PERFORMANCE column shown on the leaderboard is reported as `(number of successful proposals)/(number of total proposal opportunities)`.\n- This metric gives you an early indicator if your performance is slowly reducing.\n- You can see the JSON dump (link on the leaderboard) to see the performance across all the epochs.\n- On mouse hover, you can see the last epoch for the validator.\n\n", "doc_id": "43052fa2-ea0c-4efe-b86b-a6501cf489ba", "embedding": null, "doc_hash": "c5a010eb4b73c85ca0d0fde73fed4ee793ac2f65a62816fce7e867e8e2ab07e5", "extra_info": null, "node_info": {"start": 0, "end": 425, "_node_type": "1"}, "relationships": {"1": "407b5493-35db-454c-84b2-78cf2a07b485"}}, "__type__": "1"}, "b19a58c1-1d2f-450a-983e-3de78506ddf6": {"__data__": {"text": "\n\nGovernance votes\n\nThe GOVERNANCE VOTES column shown on the leaderboard is reported as `(governance proposals voted on)/(total governance votes)`.\n\n        \n      \n\n", "doc_id": "b19a58c1-1d2f-450a-983e-3de78506ddf6", "embedding": null, "doc_hash": "b2b922e0733d14c3e273192ec68bf4e25ea768f0f66ee816ec326c84db2be6c8", "extra_info": null, "node_info": {"start": 0, "end": 166, "_node_type": "1"}, "relationships": {"1": "d1a459e1-d6be-428f-8373-b399b5641d83"}}, "__type__": "1"}, "0a3765de-aaae-4305-886d-51c802153a47": {"__data__": {"text": "\n\nRun a local testnet from `aptos-core`\n\nPull and go into `aptos-core`:\n```\ngit clone git@github.com:aptos-labs/aptos-core.git ~/aptos-core && cd ~/aptos-core\n```\n\nRun a local testnet with a faucet:\n```\ncargo run -p aptos -- node run-local-testnet --with-faucet --faucet-port 8081 --force-restart --assume-yes\n```\nYou may add the `--release` flag after `cargo run` if you want to build a release version of the CLI for running the local testnet.\n\nYou are now running a local testnet built from `aptos-core` main.\n\n", "doc_id": "0a3765de-aaae-4305-886d-51c802153a47", "embedding": null, "doc_hash": "fc732ca9c40ddfcb50ac620ef362a2c83fa83c0824aee24d5404912874930863", "extra_info": null, "node_info": {"start": 0, "end": 514, "_node_type": "1"}, "relationships": {"1": "7c6f237b-d586-4352-aeaf-6c73f0c90c33"}}, "__type__": "1"}, "c5b18191-9c25-4d4c-82e8-200acf9efc03": {"__data__": {"text": "\n\nTypescript: Use the SDK from `aptos-core`\n**Important**: With this development flow, it is essential that you do not use the SDK from npmjs. Instead, you must use the same SDK as the `aptos` CLI is built from, which we describe below.\n\nThis guide assumes you have done the previous local testnet step. We also assume you have `pnpm` installed.\n\nFirst, go into `aptos-core` and build the SDK:\n```\ncd ~/aptos-core/ecosystem/typescript/sdk\n install\npnpm build\n```\n\nMake a new project if you don't have one already:\n```\nmkdir ~/project && cd ~/project\npnpm init\n```\n\nMake your project target the SDK from your local `aptos-core`:\n```\npnpm add ../aptos-core/ecosystem/typescript/sdk\n```\nYou could also use the absolute path, e.g. `/home/daniel/aptos-core/ecosystem/typescript/sdk`.\n\nInstall everything:\n```\npnpm install\n```\n\nNow you're set up! You should see in `package.json` that your project targets your local `aptos-core`:\n```json\n{\n  \"name\": \"project\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"aptos\": \"../a/core/ecosystem/typescript/sdk/\"\n  }\n}\n```\n\nThis way your local testnet and the SDK you're using match, meaning you won't see any compatibility issues.\n\nNow you can use the Aptos module like this in your code:\n```ts\nimport { AptosClient, AptosAccount, FaucetClient } from \"aptos\";\n\nconst NODE_URL = \"http://127.0.0.1:8080/v1\";\nconst FAUCET_URL = \"http://127.0.0.1:8081\";\n\n(async () => {\n  const client = new AptosClient(NODE_URL);\n  const faucetClient = new FaucetClient(NODE_URL, FAUCET_URL);\n})();\n```\n\n**Note**: See that this code builds clients that talk to your local testnet, not devnet.\n\n", "doc_id": "c5b18191-9c25-4d4c-82e8-200acf9efc03", "embedding": null, "doc_hash": "2e60499289ed0d87b8fcdf0cc955e781834d6dc1281f599bd43a66a19e153210", "extra_info": null, "node_info": {"start": 0, "end": 1653, "_node_type": "1"}, "relationships": {"1": "548fa7f7-bbb4-47f2-82cb-f5b459b95ced"}}, "__type__": "1"}, "c8c60a44-a1e0-4110-9f6c-c6306746b8ec": {"__data__": {"text": "\n\nDevelop with Local Testnet\n\nYou have numerous options for testing your work on Aptos locally.\n\n- ### Develop in Local Testnet from Source\n- ### Run a Local Testnet with Aptos CLI\n- ### Run a Local Testnet with Validator\n- ### Run a Local Multinode Network\n\n\n", "doc_id": "c8c60a44-a1e0-4110-9f6c-c6306746b8ec", "embedding": null, "doc_hash": "5ea1c56ef95b77ddd485ae3b072f3e7a97bafee781f82befa31d9f381069a1b8", "extra_info": null, "node_info": {"start": 0, "end": 260, "_node_type": "1"}, "relationships": {"1": "539cb582-1319-49a6-9f2a-1f25097643ea"}}, "__type__": "1"}, "42170199-6641-43a2-a43d-ccef56ffa03c": {"__data__": {"text": "\n\nWhile and Loop\n\nMove offers two constructs for looping: `while` and `loop`.\n\n", "doc_id": "42170199-6641-43a2-a43d-ccef56ffa03c", "embedding": null, "doc_hash": "c39a897bf0ddeb2a591fea9979fd960dff9d4508a6c5b08da01757df63148b9e", "extra_info": null, "node_info": {"start": 0, "end": 79, "_node_type": "1"}, "relationships": {"1": "028641ed-39d8-4ddd-985a-11731f105b4a"}}, "__type__": "1"}, "3692206c-e9c1-4f07-82ca-072fa7b91a07": {"__data__": {"text": "\n\n`while` loops\n\nThe `while` construct repeats the body (an expression of type unit) until the condition (an expression of type `bool`) evaluates to `false`.\n\nHere is an example of simple `while` loop that computes the sum of the numbers from `1` to `n`:\n\n```move\nfun sum(n: u64): u64 {\n    let sum = 0;\n    let i = 1;\n    while (i <= n) {\n        sum = sum + i;\n        i = i + 1\n    };\n\n    sum\n}\n```\n\nInfinite loops are allowed:\n\n```move=\nfun foo() {\n    while (true) { }\n}\n```\n\n", "doc_id": "3692206c-e9c1-4f07-82ca-072fa7b91a07", "embedding": null, "doc_hash": "e32f098dbdce8663cb19a98acf9c33eaa3260d0ecaf8c77afefad2f59bb444ba", "extra_info": null, "node_info": {"start": 0, "end": 482, "_node_type": "1"}, "relationships": {"1": "457cf3f6-01f1-407b-8556-1cfc2837bbb9"}}, "__type__": "1"}, "dd5ea695-dee7-4875-b28b-764449128450": {"__data__": {"text": "\n\n`break`\n\nThe `break` expression can be used to exit a loop before the condition evaluates to `false`. For example, this loop uses `break` to find the smallest factor of `n` that's greater than 1:\n\n```move\nfun smallest_factor(n: u64): u64 {\n    // assuming the input is not 0 or 1\n    let i = 2;\n    while (i <= n) {\n        if (n % i == 0) break;\n        i = i + 1\n    };\n\n    i\n}\n```\n\nThe `break` expression cannot be used outside of a loop.\n\n", "doc_id": "dd5ea695-dee7-4875-b28b-764449128450", "embedding": null, "doc_hash": "e65f8b2dc90768c551fc07654c6f8c8b77ccd8121c1da0cb6a951eef899b06ad", "extra_info": null, "node_info": {"start": 0, "end": 446, "_node_type": "1"}, "relationships": {"1": "2936cbff-3487-43b8-a90c-b95311d06f0f"}}, "__type__": "1"}, "d18551e0-28db-44fd-b550-681c1e2d4069": {"__data__": {"text": "\n\n`continue`\n\nThe `continue` expression skips the rest of the loop and continues to the next iteration. This loop uses `continue` to compute the sum of `1, 2, ..., n`, except when the number is divisible by 10:\n\n```move\nfun sum_intermediate(n: u64): u64 {\n    let sum = 0;\n    let i = 0;\n    while (i < n) {\n        i = i + 1;\n        if (i % 10 == 0) continue;\n        sum = sum + i;\n    };\n\n    sum\n}\n```\n\nThe `continue` expression cannot be used outside of a loop.\n\n", "doc_id": "d18551e0-28db-44fd-b550-681c1e2d4069", "embedding": null, "doc_hash": "2f3abd3c42ff81474f129bbf4a08d25010a31f496da9406d74d1a7ab7a715405", "extra_info": null, "node_info": {"start": 0, "end": 469, "_node_type": "1"}, "relationships": {"1": "2cb2d22a-e4e7-4d68-bc32-69e7ac3287c8"}}, "__type__": "1"}, "3cdeddbb-f961-4f46-ab91-40c5872f09f5": {"__data__": {"text": "\n\nThe type of `break` and `continue`\n\n`break` and `continue`, much like `return` and `abort`, can have any type. The following examples illustrate where this flexible typing can be helpful:\n\n```move\nfun pop_smallest_while_not_equal(\n    v1: vector,\n    v2: vector,\n): vector {\n    let result = vector::empty();\n    while (!vector::is_empty(&v1) && !vector::is_empty(&v2)) {\n        let u1 = *vector::borrow(&v1, vector::length(&v1) - 1);\n        let u2 = *vector::borrow(&v2, vector::length(&v2) - 1);\n        let popped =\n            if (u1 < u2) vector::pop_back(&mut v1)\n            else if (u2 < u1) vector::pop_back(&mut v2)\n            else break; // Here, `break` has type `u64`\n        vector::push_back(&mut result, popped);\n    };\n\n    result\n}\n```\n\n```move\nfun pick(\n    indexes: vector,\n    v1: &vector,\n    v2: &vector\n): vector {\n    let len1 = vector::length(v1);\n    let len2 = vector::length(v2);\n    let result = vector::empty();\n    while (!vector::is_empty(&indexes)) {\n        let index = vector::pop_back(&mut indexes);\n        let chosen_vector =\n            if (index < len1) v1\n            else if (index < len2) v2\n            else continue; // Here, `continue` has type `&vector`\n        vector::push_back(&mut result, *vector::borrow(chosen_vector, index))\n    };\n\n    result\n}\n```\n\n", "doc_id": "3cdeddbb-f961-4f46-ab91-40c5872f09f5", "embedding": null, "doc_hash": "17e87a3526537696047fa7c3ef23a6d60f03805c6fcab60c1489aa6af8e01ac4", "extra_info": null, "node_info": {"start": 0, "end": 1311, "_node_type": "1"}, "relationships": {"1": "61b2bd79-aeaf-4882-b9ea-8a93e8614b8f"}}, "__type__": "1"}, "78219a75-7aa7-4444-8024-f60328c9514a": {"__data__": {"text": "\n\nThe `loop` expression\n\nThe `loop` expression repeats the loop body (an expression with type `()`) until it hits a `break`\n\nWithout a `break`, the loop will continue forever\n\n```move\nfun foo() {\n    let i = 0;\n    loop { i = i + 1 }\n}\n```\n\nHere is an example that uses `loop` to write the `sum` function:\n\n```move\nfun sum(n: u64): u64 {\n    let sum = 0;\n    let i = 0;\n    loop {\n        i = i + 1;\n        if (i > n) break;\n        sum = sum + i\n    };\n\n    sum\n}\n```\n\nAs you might expect, `continue` can also be used inside a `loop`. Here is `sum_intermediate` from above rewritten using `loop` instead of `while`\n\n```move\nfun sum_intermediate(n: u64): u64 {\n    let sum = 0;\n    let i = 0;\n    loop {\n        i = i + 1;\n        if (i % 10 == 0) continue;\n        if (i > n) break;\n        sum = sum + i\n    };\n\n    sum\n}\n```\n\n", "doc_id": "78219a75-7aa7-4444-8024-f60328c9514a", "embedding": null, "doc_hash": "e9a7c16a412de58fb86ee94d9d88bf61ae1b071f1ddf5fc97b0c0645293b5a1c", "extra_info": null, "node_info": {"start": 0, "end": 830, "_node_type": "1"}, "relationships": {"1": "1fd11c13-f78f-4511-a6b9-153ab32a0350"}}, "__type__": "1"}, "a90b891e-db9d-41fc-8456-52715b5ff9a7": {"__data__": {"text": "\n\nThe type of `while` and `loop`\n\nMove loops are typed expressions. A `while` expression always has type `()`.\n\n```move\nlet () = while (i < 10) { i = i + 1 };\n```\n\nIf a `loop` contains a `break`, the expression has type unit `()`\n\n```move\n(loop { if (i < 10) i = i + 1 else break }: ());\nlet () = loop { if (i < 10) i = i + 1 else break };\n```\n\nIf `loop` does not have a `break`, `loop` can have any type much like `return`, `abort`, `break`, and `continue`.\n\n```move\n(loop (): u64);\n(loop (): address);\n(loop (): &vector>);\n```\n\n", "doc_id": "a90b891e-db9d-41fc-8456-52715b5ff9a7", "embedding": null, "doc_hash": "f952b680c8ecb3feeca4ebf76c29f0c197b798e2c0d49b5e7427ffdab60ef363", "extra_info": null, "node_info": {"start": 0, "end": 530, "_node_type": "1"}, "relationships": {"1": "4b4db1f2-d6d5-4c2a-994c-b5458a6a628f"}}, "__type__": "1"}, "82539f0f-7457-4759-ad04-0cfc31084464": {"__data__": {"text": "\n\nLatest Mainnet Release\n\nThe table below contains latest release information for each Aptos component in the mainnet network. We also suggest you monitor the #mainnet-release channel of Aptos Discord for ongoing updates.\n\nSee the Latest Aptos Releases index for how to subscribe to GitHub notifications and more release-related information.\n\n", "doc_id": "82539f0f-7457-4759-ad04-0cfc31084464", "embedding": null, "doc_hash": "b4809552e79c5b2f2f91f4ed1ffb1544216af7eea541fd0698ee87d8d84ab949", "extra_info": null, "node_info": {"start": 0, "end": 343, "_node_type": "1"}, "relationships": {"1": "d4355c97-b555-438a-8f09-476c4a9a4259"}}, "__type__": "1"}, "31cd7a5e-093d-4c94-9f7e-de7ddb2e9fc2": {"__data__": {"text": "\n\nAptos Framework\n\nAptos Framework Release v1.4.0\n\n", "doc_id": "31cd7a5e-093d-4c94-9f7e-de7ddb2e9fc2", "embedding": null, "doc_hash": "3e1291819743af7527665ffac29a5acc22e9ff23c760200a2c73e2a0672403f5", "extra_info": null, "node_info": {"start": 0, "end": 51, "_node_type": "1"}, "relationships": {"1": "842d5836-607d-49ab-b5e9-444ab2cd156a"}}, "__type__": "1"}, "4c63c702-24d5-46d6-9367-a931d84b1b57": {"__data__": {"text": "\n\nAptos SDK\n\nAptos SDK Release v1.8.5 check out the change-log here.\n\n", "doc_id": "4c63c702-24d5-46d6-9367-a931d84b1b57", "embedding": null, "doc_hash": "6e6d415e551b4ca690a4abc7ba15ad1a99365f7123bfbf0bcdfda92db97af3ff", "extra_info": null, "node_info": {"start": 0, "end": 70, "_node_type": "1"}, "relationships": {"1": "a4d65481-ca5f-4435-922a-d857c433da89"}}, "__type__": "1"}, "9643f40d-7b1a-4a05-bc15-10a061364113": {"__data__": {"text": "\n\nAptos CLI\n\n|Release | Git Tag | Commit Hash|\n|---|---|---|\n|Aptos CLI Release v1.0.13| `aptos-cli-v1.0.13` | `7f864d4af722bf538f1a904e321130a261e92b3a` |\n\n", "doc_id": "9643f40d-7b1a-4a05-bc15-10a061364113", "embedding": null, "doc_hash": "b86aaee2fbad47c3cade899ad431c2a4aff6fd74e0059e6ed7a58232bf34998c", "extra_info": null, "node_info": {"start": 0, "end": 157, "_node_type": "1"}, "relationships": {"1": "ba766128-c191-4e19-8325-57fc2d1a20fb"}}, "__type__": "1"}, "e593e093-c0af-4185-863b-f8a944e80226": {"__data__": {"text": "\n\nAptos Node\n\n|Release | Docker Image Tag | Docker SHA-256 | Branch | Commit Hash|\n|---|---|---|---|---|\n|Aptos Node Release v1.4.1| `aptos-node-v1.4.1` | `sha256:c109ab86066fc35cbff5d7f57340ea6da9ed480896d08cd1bbd30c3dec683033` | aptos-node-v1.4.1| `8731f29f80ee0458d32793f2c818243745ca3904` |\n", "doc_id": "e593e093-c0af-4185-863b-f8a944e80226", "embedding": null, "doc_hash": "f823a409d03181d35e7154d3e9e2ca55a133eeb2b78294cf1ab5aa699a9e22cf", "extra_info": null, "node_info": {"start": 0, "end": 295, "_node_type": "1"}, "relationships": {"1": "2d667203-d272-44b4-82cb-93f58a7c8bd8"}}, "__type__": "1"}, "cdba7295-cc55-4f42-876a-6aeb6c04f577": {"__data__": {"text": "\n\nMeasure your Nodes\n\nYou have numerous options for measuring and inspecting the health and performance of your nodes:\n\n- ### Node Liveness Criteria\n- ### Use the Node Inspection Service\n- ### Use the Node Health Checker\n- ### Read the Node Health Checker FAQ\n\n", "doc_id": "cdba7295-cc55-4f42-876a-6aeb6c04f577", "embedding": null, "doc_hash": "599e4c773e04e733d57075dc871da9a947b831bd251c07447b321790b2238e56", "extra_info": null, "node_info": {"start": 0, "end": 261, "_node_type": "1"}, "relationships": {"1": "cffb763e-45bf-4f87-adbd-8b0d0962e658"}}, "__type__": "1"}, "f72918de-e48a-4835-836e-10fd59d3416a": {"__data__": {"text": "\n\nMint NFTs with the Aptos CLI\n\nThis code lab lets you use the Aptos CLI to mint non-fungible tokens (NFTs) in Aptos so you can see how the process works and employ related functions in your code. Although this code lab assumes use of the devnet network, you could follow the same steps in devnet or even mainnet, assuming you have the necessary funds in your account.\n\n", "doc_id": "f72918de-e48a-4835-836e-10fd59d3416a", "embedding": null, "doc_hash": "4eb0b28556b9f2f684245ee43f7d3edccdfdb821735dbfa0dfc4962242a1811f", "extra_info": null, "node_info": {"start": 0, "end": 370, "_node_type": "1"}, "relationships": {"1": "7a945c94-d5ba-436f-8ce7-67d43aef23a2"}}, "__type__": "1"}, "39c8c0ea-31fa-48d3-8cc5-ec621c7cf73c": {"__data__": {"text": "\n\nPrerequisites\n\nThis tutorial assumes you have:\n\n* a GitHub account\n* the GitHub CLI\n* the Aptos CLI (or you can run from aptos-core source via `cargo run`)\n* the `aptos-core` repository checked out: `git clone https://github.com/aptos-labs/aptos-core.git`\n\nThen:\n\n* Review the mint_nft source code and code comments within each subdirectory.\n* Explore the `mint_event_ticket` function defined within each subdirectory.\n\n", "doc_id": "39c8c0ea-31fa-48d3-8cc5-ec621c7cf73c", "embedding": null, "doc_hash": "dfa3ab3a2c0b2169669bc00b9e9740e2fe84cd651c3ea0d0e025613948b9c0e7", "extra_info": null, "node_info": {"start": 0, "end": 422, "_node_type": "1"}, "relationships": {"1": "6610be3a-878b-47bc-b230-937cf9c3f9af"}}, "__type__": "1"}, "5884a394-8f24-4c34-911e-fc013662041e": {"__data__": {"text": "\n\nNFT types\n\nThe two most common types of NFT are event ticket / certificates and profile picture NFTs.\n\n", "doc_id": "5884a394-8f24-4c34-911e-fc013662041e", "embedding": null, "doc_hash": "4fdef919590db8210c9f78443ab104aadbe7c8eaff774350fea19e0df7349441", "extra_info": null, "node_info": {"start": 0, "end": 105, "_node_type": "1"}, "relationships": {"1": "d5511293-510b-4489-8c1f-96dd238acdab"}}, "__type__": "1"}, "f7000349-2325-44c2-ad54-f35d6d54ca9f": {"__data__": {"text": "\n\nEvent tickets and certificates\n\nThis kind of NFT has a base token, and every new NFT generated from this base token has the same token data ID and image. They are generally used as certificates, meaning each NFT created from the base token is considered a printing edition of the base token.\n\nYou might use this type of NFT for event tickets where each NFT is a ticket and has properties representing expiration date and if the ticket has been used. When you mint the NFT, you may set an expiration time for the event ticket and `is_ticket_used` to `false`. When the ticket is used, you update `is_ticket_used` to `true`.\n\n", "doc_id": "f7000349-2325-44c2-ad54-f35d6d54ca9f", "embedding": null, "doc_hash": "eb5a888d58e32288db43d63d831c0af94f378e54b5c4fdd81239300d7c82b161", "extra_info": null, "node_info": {"start": 0, "end": 625, "_node_type": "1"}, "relationships": {"1": "165931b9-bf35-41f8-b925-7a617ecc7ddb"}}, "__type__": "1"}, "b98997ec-68ba-45da-8f8f-5a0a2d838e4b": {"__data__": {"text": "\n\nProfile picture NFTs\n\nA profile picture NFT has a unique token data ID and picture for each token. There are generally no printing editions of this NFT. Most NFT collections on NFT marketplaces are of this kind. They are generally proofs of ownership of an art piece.\n\nIn this tutorial, we describe how to create and mint event ticket NFTs.\n\n", "doc_id": "b98997ec-68ba-45da-8f8f-5a0a2d838e4b", "embedding": null, "doc_hash": "7ff3332ab6c7142f23d29a248252455be8d258f7055f0dcfd9de03e58f8bd61b", "extra_info": null, "node_info": {"start": 0, "end": 344, "_node_type": "1"}, "relationships": {"1": "91110072-c5e0-4824-b744-901cbf470249"}}, "__type__": "1"}, "fa530b26-1615-47ac-8648-ee999137ffbe": {"__data__": {"text": "\n\n1. Create a collection and token\n\nNow that you have an understanding of the Aptos minting process and are starting to write smart contracts with Move, you are ready to create your first devnet NFT with the Aptos CLI.\n\nIn this section, we create a collection and token. This work maps to the demonstration in create_nft.move.\n\n", "doc_id": "fa530b26-1615-47ac-8648-ee999137ffbe", "embedding": null, "doc_hash": "36289157c814b692964541051e4b37c61f4b90ba708a8d41a404ddd70899edc7", "extra_info": null, "node_info": {"start": 0, "end": 328, "_node_type": "1"}, "relationships": {"1": "99b52034-2daf-4c1c-b967-bbcea0533c95"}}, "__type__": "1"}, "5fe80c59-c0e7-4b0c-9a25-3d4e9b004ef3": {"__data__": {"text": "\n\nCreate an account\n\n1. Install the Aptos CLI.\n\n2. Create a default (typical) account on Aptos devnet to receive the NFT by running the following command and selecting `devnet`:\n  ```shell\n  aptos init\n  ```\n\n3. Receive the output:\n  ```shell\n  Configuring for profile default\n  ```\n\n3. When prompted for a network:\n  ```shell\n  Choose network from [devnet, testnet, mainnet, local, custom | defaults to devnet]\n  ```\n  Select `devnet` by entering it and hitting return.\n\n4. When prompted for your private key:\n  ```shell\n  Enter your private key as a hex literal (0x...) [Current: None | No input: Generate new key (or keep one if present)]\n  ```\n  Hit enter to generate a new key.\n\n5. Receive output indicating success and resembling:\n  ```shell\n  No key given, generating key...\n  Account a233bf7be2b93f1e532f8ea88c49e0c70a873d082890b6d9685f89b5e40d50c2 does not exist, you will need to create and fund the account through a community faucet e.g. https://aptoslabs.com/testnet-faucet, or by transferring funds from another account\n  \n  ---\n  Aptos CLI is now set up for account a233bf7be2b93f1e532f8ea88c49e0c70a873d082890b6d9685f89b5e40d50c2 as profile default!  Run `aptos --help` for more information about commands\n  {\n    \"Result\": \"Success\"\n  }\n  ```\n\n6. Note your configuration information can be found in `.aptos/config.yaml` relative to where you ran `aptos init`. Read that file to see each profile's private and public keys, account address, and REST API URL.\n\n", "doc_id": "5fe80c59-c0e7-4b0c-9a25-3d4e9b004ef3", "embedding": null, "doc_hash": "4f599e71b81ce708a80052c9283c7ac00c7016c731cfb02d015f9472fc6037ef", "extra_info": null, "node_info": {"start": 0, "end": 1475, "_node_type": "1"}, "relationships": {"1": "a1ac84bc-643d-4ab2-ad8d-9b446e679898"}}, "__type__": "1"}, "da583b14-65c0-4e94-901b-4906f2bed945": {"__data__": {"text": "\n\nPublish the module\n\n1. In your `aptos-core` source checkout, navigate to the `aptos-core/aptos-move/move-examples/mint_nft/1-Create-NFT` directory:\n\n```shell\ncd aptos-move/move-examples/mint_nft/1-Create-NFT\n```\n\n2. Run `aptos move publish` to publish the Move module in that directory, updating it with your default account address from `.aptos/config.yaml`:\n\n```shell\naptos move publish --named-addresses mint_nft=\n```\n\nFor example:\n\n```shell\naptos move publish --named-addresses mint_nft=a911e7374107ad434bbc5369289cf5855c3b1a2938a6bfce0776c1d296271cde\n```\n\n3. Receive output asking you to accept a gas fee for the transaction:\n\n```shell\n    Compiling, may take a little while to download git dependencies...\n    INCLUDING DEPENDENCY AptosFramework\n    INCLUDING DEPENDENCY AptosStdlib\n    INCLUDING DEPENDENCY AptosToken\n    INCLUDING DEPENDENCY MoveStdlib\n    BUILDING Examples\n    package size 2770 bytes\n    Do you want to submit a transaction for a range of [1164400 - 1746600] Octas at a gas unit price of 100 Octas? [yes/no]\n```\n\n4. Enter `yes` and receive results indicating success:\n\n```shell\n    {\n      \"Result\": {\n        \"transaction_hash\": \"0x576a2e9481e71b629335b98ea75c87d124e1b435e843e7a2ef8938ae21bebfa3\",\n        \"gas_used\": 11679,\n        \"gas_unit_price\": 100,  \n        \"sender\": \"a911e7374107ad434bbc5369289cf5855c3b1a2938a6bfce0776c1d296271cde\",\n        \"sequence_number\": 0,\n        \"success\": true,\n        \"timestamp_us\": 1669659103283876,\n        \"version\": 12735152,\n        \"vm_status\": \"Executed successfully\"\n      }\n    }\n```\n\n", "doc_id": "da583b14-65c0-4e94-901b-4906f2bed945", "embedding": null, "doc_hash": "07a7dd1111e3bf90d0a3abbec33158b6871eed53a6a4541f564eee39ba1dc194", "extra_info": null, "node_info": {"start": 0, "end": 1565, "_node_type": "1"}, "relationships": {"1": "6ec4dbee-87be-4943-bfb1-b69106e56285"}}, "__type__": "1"}, "8c8df2c3-7874-4f1f-b6dd-2240aa7f1901": {"__data__": {"text": "\n\nSee the module on Aptos Explorer\n\n1. Go to the Aptos Explorer in a web browser>\n2. Select the network you used: devnet\n3. Search for the transaction by `transaction_hash` in the search field, using your own unique transaction hash.\n4. View the changes made in publishing this module under the *Changes* tab.\n\n", "doc_id": "8c8df2c3-7874-4f1f-b6dd-2240aa7f1901", "embedding": null, "doc_hash": "413350ef8aceac65f181ce8e8d86853503a0e4bd08db5f279cec3ea4b2395e38", "extra_info": null, "node_info": {"start": 0, "end": 311, "_node_type": "1"}, "relationships": {"1": "214e3a21-013b-40d6-a1e9-3fc880d3629d"}}, "__type__": "1"}, "01c7aec7-d9aa-4ca1-a6c4-eb342d0e6340": {"__data__": {"text": "\n\nMint a token to a receiver\n\nSee create_nft.move to see how to mint a token to a receiver.\n\n", "doc_id": "01c7aec7-d9aa-4ca1-a6c4-eb342d0e6340", "embedding": null, "doc_hash": "d288ab5b1f45831283fe453e80cc1b39a7fb117507205f04b704b94335a18ee0", "extra_info": null, "node_info": {"start": 0, "end": 93, "_node_type": "1"}, "relationships": {"1": "f1e2505e-e74e-4814-8fbd-7d27de61db29"}}, "__type__": "1"}, "9dcc3ce7-63b7-46b4-9242-e9850683f614": {"__data__": {"text": "\n\n2. Use resource account for automation\n\nThis part maps to the demonstration in create_nft_with_resource_account.move and introduces the Aptos concept of resource accounts.\n\nSince the Move model often requires knowing the signer of a transaction, Aptos provides resource accounts for assigning signer capability. Creating resource accounts enables access to the signer capability for automated use. With this ability, resource accounts can publish Move modules and automatically sign for transactions and minting. The signer capability can be assigned to the resource account or placed in storage locally within the module.\n\nWhen you create a resource account you also grant that account the signer capability. If we don't use a resource account for this module, we would need to manually sign for all transactions. The only field inside the signer capability is the `address` of the signer.\n\nA native function converts the signer capability to the signer.\n\n```shell\nlet resource_signer = account::create_signer_with_capability(&module_data.signer_cap);\n```\n\nThis function creates the signer from the signer capability. See the corresponding entry in `create_nft_with_resource_account.move` to see how we create a signer from the signer capability.\n\n", "doc_id": "9dcc3ce7-63b7-46b4-9242-e9850683f614", "embedding": null, "doc_hash": "cc914853614edc465b218e9bc60d30a5a618dc31d5dda64be2024cbb33635849", "extra_info": null, "node_info": {"start": 0, "end": 1251, "_node_type": "1"}, "relationships": {"1": "f45ec9bc-30bb-4a64-83dc-37e7ff21933e"}}, "__type__": "1"}, "01e722f6-2c30-43dc-a581-7149f7c49c84": {"__data__": {"text": "\n\nCreate a resource account\n\nJust as you created a default account on Aptos devnet, you will now create another user account to receive the NFT. To create that account, once again issue `aptos init` but this time use the `--profile` argument to create a specific account, in this case `nft-receiver`.\n\n1. Create an `nft-receiver` account on Aptos devnet by running the following command.\n  ```shell\n  aptos init --profile nft-receiver\n  ```\n\n2. Receive the output:\n  ```shell\n  Configuring for profile nft-receiver\n  ```\n\n3. Follow the same steps as for the default account to select the `devnet` network and generate a new private key.\n\n", "doc_id": "01e722f6-2c30-43dc-a581-7149f7c49c84", "embedding": null, "doc_hash": "bef0cc6829f3a63846efa02d1c5015326020d816072269f61125ba9f4f4b01d7", "extra_info": null, "node_info": {"start": 0, "end": 638, "_node_type": "1"}, "relationships": {"1": "014d65e9-08ec-4269-8550-d2f83edb75f8"}}, "__type__": "1"}, "3b04e5c6-776c-4206-b1be-627cc1b82fcc": {"__data__": {"text": "\n\nPublish the module under the resource account\n\n1. Assuming you are in your `aptos-core` source directory, navigate to the `aptos-core/aptos-move/move-examples/mint_nft/2-Using-Resource-Account` directory:\n\n```shell\ncd aptos-move/move-examples/mint_nft/2-Using-Resource-Account\n```\n\n2. Run the following CLI command to publish the module under a resource account, including your `` and a `` of your choosing:\n\n```shell\naptos move create-resource-account-and-publish-package --seed  --address-name mint_nft --profile default --named-addresses source_addr=\n```\n\nRemember, you can find this address in `.aptos/config.yaml`. For example:\n\n```shell\naptos move create-resource-account-and-publish-package --seed 1235 --address-name mint_nft --profile default --named-addresses source_addr=a911e7374107ad434bbc5369289cf5855c3b1a2938a6bfce0776c1d296271cde\n```\n\n3. As when you ran `aptos move publish` to mint the NFT, again receive output asking you to accept a gas fee for the transaction and enter: `yes`\n\n4. Receive the output:\n\n```shell\n\"Result\": \"Success\"`\n```\n\n", "doc_id": "3b04e5c6-776c-4206-b1be-627cc1b82fcc", "embedding": null, "doc_hash": "aa0f0728263ea9f25857ecc8b5925a1dcb39e7a38453df81d15c542f8e05c7bd", "extra_info": null, "node_info": {"start": 0, "end": 1060, "_node_type": "1"}, "relationships": {"1": "aa61189f-0f45-48db-8aee-c75f94c4a4c9"}}, "__type__": "1"}, "bab3a49b-6ba3-4248-8891-c97b65a373b8": {"__data__": {"text": "\n\nStoring signer capability\n\nSee create_nft_with_resource_account.move to better understand the related functions:\n\n* `init_module` - stores the resource account's signer capability within `ModuleData` for later usage.\n* `mint_event_ticket` - creates a resource signer by calling `account::create_signer_with_capability(&module_data.signer_cap)` to programmatically sign for `token::mint_token()` and `token::direct_transfer()` functions.\n\n", "doc_id": "bab3a49b-6ba3-4248-8891-c97b65a373b8", "embedding": null, "doc_hash": "6a0ac2d20044bed0043d4093e1344745c2fd0f808aec21f39673c20a31c2a8e8", "extra_info": null, "node_info": {"start": 0, "end": 440, "_node_type": "1"}, "relationships": {"1": "e08696ee-af66-40aa-9392-1368cb5755f1"}}, "__type__": "1"}, "9e9c4f42-4305-48db-901e-92bafac4674c": {"__data__": {"text": "\n\nMint an NFT to the nft-receiver account\n\n1. Run the following command to mint an NFT to the `nft-receiver` account, replacing `` with the relevant address from `.aptos/config.yaml`:\n\n```shell\naptos move run --function-id ::create_nft_with_resource_account::mint_event_ticket --profile nft-receiver\n```\n\n2. As before, receive output asking you to accept a gas fee for the transaction and enter: `yes`.\n\n3. Receive output containing:\n\n```shell\n\"vm_status\": \"Executed successfully\"\n```\n\n4. See the module on Aptos Explorer as before by searching for its `transaction_hash`.\n\n", "doc_id": "9e9c4f42-4305-48db-901e-92bafac4674c", "embedding": null, "doc_hash": "9132274d2804582266494d720241cb6d3c08e18f7c5efba8a94e2c355c766764", "extra_info": null, "node_info": {"start": 0, "end": 574, "_node_type": "1"}, "relationships": {"1": "0377b52e-95cc-42f1-9967-d4a79d2a608c"}}, "__type__": "1"}, "59281d9f-d4b4-42a1-b871-8ebf64efc5d3": {"__data__": {"text": "\n\n3. Add admin account and functions\n\nPublishing a module under a resource account means that we will not be able to update the module, and the module will be immutable and autonomous. We need administrator accounts, because we give up control over the smart contracts when we deploy a module using a resource account. Admin accounts and functions let you update the configuration going forward.\n\nIf you will need to update the configuration of the module, we suggest adding a few admin functions to control the configurations of the module. You will also need to add the admin account's address to the module's `Move.toml` file so the admin functions can confirm the caller to the admin functions is actually a valid administrator.\n\nThis work maps to the demonstration in reate_nft_with_resource_and_admin_accounts.move.\n\n", "doc_id": "59281d9f-d4b4-42a1-b871-8ebf64efc5d3", "embedding": null, "doc_hash": "091278aa5aca2469f74a73f8548abfe73b8fa8efdc2551eb7e7a73e3c86d7cc5", "extra_info": null, "node_info": {"start": 0, "end": 823, "_node_type": "1"}, "relationships": {"1": "9477f9f3-ce09-424f-90da-1c7ef0922361"}}, "__type__": "1"}, "dfbd2ab9-ef19-4d75-9acd-c0f68ef4876a": {"__data__": {"text": "\n\nCreate admin account\n\nHere we create an admin account and include two admin functions so we can set and update when/if we want to enable token minting for this contract.\n\nRun `aptos-init` once again, this time to create an admin account:\n\n```shell\n`aptos init --profile admin`\n```\n\n", "doc_id": "dfbd2ab9-ef19-4d75-9acd-c0f68ef4876a", "embedding": null, "doc_hash": "5d365f6de482c4565fe8d851490dc56c56d85718f22fc151b0f4ca17b16122ff", "extra_info": null, "node_info": {"start": 0, "end": 284, "_node_type": "1"}, "relationships": {"1": "b4d37783-faf9-4ec5-996a-94647d84e20e"}}, "__type__": "1"}, "2e7b29af-d9a1-4e89-bc7a-bd5741d736ee": {"__data__": {"text": "\n\nPublish the module under a resource account\n\n1. In your `aptos-core` source checkout, navigate to the `aptos-core/aptos-move/move-examples/mint_nft/3-Adding-Admin` directory:\n\n```shell\ncd aptos-move/move-examples/mint_nft/3-Adding-Admin\n```\n\n2. Edit `Move.toml` in that directory to replace `admin_addr = \"0xcafe\"` with the new `admin` address from `.aptos/config.yaml`.\n\n3. Run the following CLI command to publish the module under a resource account, updating the `` and `default-account-address>` with your own:\n\n```shell\naptos move create-resource-account-and-publish-package --seed  --address-name mint_nft --profile default --named-addresses source_addr=\n```\n\n4. As usual, receive output asking you to accept a gas fee for the transaction and enter: `yes`.\n\n5. Receive the output:\n\n```shell\n\"Result\": \"Success\"`\n```\n\n", "doc_id": "2e7b29af-d9a1-4e89-bc7a-bd5741d736ee", "embedding": null, "doc_hash": "6e83a80e6ea9d20c78fe7c3c78a33aacd2bbe1973e6be263e5fbd0dadd77acc9", "extra_info": null, "node_info": {"start": 0, "end": 825, "_node_type": "1"}, "relationships": {"1": "fe1726ee-6806-4c26-bf31-57ed3f7611ca"}}, "__type__": "1"}, "d98055a5-664c-48ed-8324-a4010d5aefc2": {"__data__": {"text": "\n\nInclude admin functions\n\nSee create_nft_with_resource_and_admin_accounts.move to understand the related admind functions used:\n\n\n* In struct `ModuleData`, we add two additional fields: `expiration_timestamp` and `minting_enabled`. These allow us to set and update when this collection will expire and enable or disable minting ad-hoc, respectively.\n* We included two admin functions - `set_minting_enabled()` and `set_timestamp()` - to update the `expiration_timestamp` and `minting_enabled` fields.\n* In the admin functions, we check if the caller is calling from the valid administrator's address. If not, we abort because the caller does not have permission to update the config of this module.\n* In `mint_event_ticket()`, we add two `assert` statements to make sure the user can mint tokens from this collection only if minting is enabled and the collection has not expired.\n\n", "doc_id": "d98055a5-664c-48ed-8324-a4010d5aefc2", "embedding": null, "doc_hash": "1bb5e63f08edba1445eb49cd4d2f0e734469f253c4372691d459e793f178eee5", "extra_info": null, "node_info": {"start": 0, "end": 882, "_node_type": "1"}, "relationships": {"1": "3fdd0d22-f411-4346-9819-1c1ba92fd8d7"}}, "__type__": "1"}, "6003fec9-67d8-4bb2-ad58-621311dbe713": {"__data__": {"text": "\n\nMint an NFT to the nft-receiver account\n\n1. Run the following command to attempt to mint an NFT, including your `` (failure expected):\n\n```shell\naptos move run --function-id ::create_nft_with_resource_and_admin_accounts::mint_event_ticket --profile nft-receiver\n```\n\n2. Receive output indicating a failure:\n\n```shell\n\"Error\": \"Simulation failed with status: Move abort in ::create_nft_with_resource_and_admin_accounts: EMINTING_DISABLED(0x50003): The collection minting is disabled\"\n```\n\nRunning this command fails because minting is disabled in `init_module()`.\n\n3. Use the admin account to update the flag `minting_enabled` to true:\n\n```shell\naptos move run --function-id ::create_nft_with_resource_and_admin_accounts::set_minting_enabled --args bool:true --profile admin\n```\n\n3. As usual, receive output asking you to accept a gas fee for the transaction and enter: `yes`.\n\n4. Receive output containing:\n\n```shell\n\"vm_status\": \"Executed successfully\"\n```\n\n5. Mint the NFT with success:\n\n```shell\naptos move run --function-id ::create_nft_with_resource_and_admin_accounts::mint_event_ticket --profile nft-receiver\n```\n\n6. Accept the gas fee for the transaction by entering: `yes`.\n\n7. Receive output contaning:\n\n```shell\n\"vm_status\": \"Executed successfully\"\n```\n\n8. See the transactions on Aptos Explorer as before by searching for their `transaction_hash` strings.\n\n", "doc_id": "6003fec9-67d8-4bb2-ad58-621311dbe713", "embedding": null, "doc_hash": "ab711d0ab71da747d7cd5372f55122824df3d527e5c4b7d64348705e944e6216", "extra_info": null, "node_info": {"start": 0, "end": 1371, "_node_type": "1"}, "relationships": {"1": "8416965d-b33c-4570-bca4-5496e58b141b"}}, "__type__": "1"}, "762eb054-1743-4d3b-abc1-89cb78c78c6b": {"__data__": {"text": "\n\n4. Prepare module for production\n\nThe final phase of development is to make the smart contract module ready for production. This work maps to the demonstration in create_nft_getting_production_ready.move.\n\nWe prepare the module for production by:\n\n* adding a `TokenMintingEvent` to emit a custom event for tracking minting of tokens from this module.\n* enabling signature verification and ntroducing the concept of a proof challenge to prevent bot spamming.\n* including unit tests to make sure our code works as expected.\n\n\n", "doc_id": "762eb054-1743-4d3b-abc1-89cb78c78c6b", "embedding": null, "doc_hash": "98674e6b1140cfc371ef99025a6712c716b8759e37908ce8932b5ad8a60ae03d", "extra_info": null, "node_info": {"start": 0, "end": 526, "_node_type": "1"}, "relationships": {"1": "bf8b1ac5-3d41-486f-804b-87474480908d"}}, "__type__": "1"}, "472e3e1a-0297-44f8-b140-9b8dda7d1501": {"__data__": {"text": "\n\nPublish the module under a resource account\n\n1. In your `aptos-core` source checkout, navigate to the `aptos-core/aptos-move/move-examples/mint_nft/1-Create-NFT` directory:\n\n```shell\ncd aptos-move/move-examples/mint_nft/4-Getting-Production-Ready\n```\n\n2. Edit `Move.toml` in that directory to replace `admin_addr = \"0xbeef\"` with the admin address we created in 3. Add admin account and functions.\n\n2. Run the following CLI command to publish the module under a resource account, replacing `` and `` with your own: \n\n```shell\naptos move create-resource-account-and-publish-package --seed  --address-name mint_nft --profile default --named-addresses source_addr=\n```\n\n3. As usual, receive output asking you to accept a gas fee for the transaction, enter `yes`, and receive results indicating success.\n\n", "doc_id": "472e3e1a-0297-44f8-b140-9b8dda7d1501", "embedding": null, "doc_hash": "5dc797dbe3a657b10d9fa890849cba2c6db847b0d13bf2054fd77a56d51d4109", "extra_info": null, "node_info": {"start": 0, "end": 803, "_node_type": "1"}, "relationships": {"1": "f9b84565-3152-4bb2-ac2e-8f878f1e53fc"}}, "__type__": "1"}, "b96b2fd1-f272-41ef-b439-18710d29957d": {"__data__": {"text": "\n\nMint a token with `mint_event_ticket()`\n\n1. Generate a key pair to validate the signature against:\n\n```shell\naptos key generate --key-type ed25519 --output-file output.key\n```\n\n2. View and copy the public key we just generated:\n\n```shell\nmore output.key.pub\n```\n\n3. Update the public key stored within `ModuleData` by running the command and replacing `` and `` with your own:\n\n```shell\naptos move run --function-id ::create_nft_getting_production_ready::set_public_key --args hex: --profile admin\n```\n\n4. Accept the gas fee for the transaction and receive results indicating success.\n\n", "doc_id": "b96b2fd1-f272-41ef-b439-18710d29957d", "embedding": null, "doc_hash": "0815ebb3b3a73b929c84a685042bcafe106336249a90e29098ceeb7ffa08d147", "extra_info": null, "node_info": {"start": 0, "end": 588, "_node_type": "1"}, "relationships": {"1": "d8919ac6-2966-454d-bea9-d8e80772dd07"}}, "__type__": "1"}, "b2076c10-0578-41da-81c0-61310f463540": {"__data__": {"text": "\n\nGenerate a valid signature\n\n1. Find and copy the `admin_private_key`:\n\n```shell\nmore output.key\n```\n\n2. Find and copy the addresses for the `nft-receiver` and `resource` account from `.aptos/config.yaml`.\n\n\n2. Find and copy the `receiver_account_sequence_number` by looking up the NFT receiver's address on the Aptos Explorer *Info* tab.\n\n3. Open the file `aptos-core/aptos/move-e2e-tests/src/tests/mint_nft.rs` for editing.\n\n4. In function `generate_nft_tutorial_part4_signature`, replace the `resource_address`, `nft_receiver`, `admin_private_key`, and `receiver_account_sequence_number` variables with the actual values from your temporary copies above.\n\n5. Run to generate a valid signature and copy it:\n\n```shell\ncargo test generate_nft_tutorial_part4_signature -- --nocapture\n```\n\n6. Call mint_event_ticket() with your `` and the `` we just generated:\n\n```shell\naptos move run --function-id ::create_nft_getting_production_ready::mint_event_ticket --args hex: --profile nft-receiver\n```\n\n7. Accept the gas fee for the transaction and receive results indicating success.\n\nThis completes the Mint NFT via CLI code lab. Congratulations on your completion.\n\n", "doc_id": "b2076c10-0578-41da-81c0-61310f463540", "embedding": null, "doc_hash": "b5973662750a8a6ee5d4d48c82e962fa0469083ae1c0b9ead8943fc43efd0a34", "extra_info": null, "node_info": {"start": 0, "end": 1162, "_node_type": "1"}, "relationships": {"1": "77acb53d-c679-4d36-84a2-f17dee175bd9"}}, "__type__": "1"}, "6a1cc5f1-cc51-4f39-bd79-fc9866049b1c": {"__data__": {"text": "\n\n5. Mint with admin and source accounts\n\nHere is an alternative flow using admin and source accounts.\n\n", "doc_id": "6a1cc5f1-cc51-4f39-bd79-fc9866049b1c", "embedding": null, "doc_hash": "81be74b05ea126482ec165e996c3ae363ab59315de1f9ff33e09b0afa15011c9", "extra_info": null, "node_info": {"start": 0, "end": 104, "_node_type": "1"}, "relationships": {"1": "54188f3d-1f91-41a9-a267-e8b1462f4550"}}, "__type__": "1"}, "005f11ee-ea48-4a34-9526-847f1422613f": {"__data__": {"text": "\n\nMint the NFT\n\n1. Mint the NFT by calling the `mint_nft` function and an existing contract using the Aptos CLI:\n\n  ```shell\n  aptos move run --function-id 8cdf69c8c93fee36ed83f8882908060c1335ed39a827c08dbb506b46237e88fb::minting::mint_nft --profile nft-receiver\n  ```\n\n2. When asked, `Do you want to submit a transaction for a range of...?`, enter `yes` and hit return.\n\n3. Receive results resembling:\n\n```shell\n{\n  \"Result\": {\n    \"transaction_hash\": \"0x6e022532fb8d802324829d5ec85fd32c05a58a6f826751f63cdbf9bf313ff991\",\n    \"gas_used\": 3944,\n    \"gas_unit_price\": 150,\n    \"sender\": \"b9d394a7bc582a54e8610d6a7b973f62c8d9595c54c35cdbb95965aa8e5cd111\",\n    \"sequence_number\": 0,\n    \"success\": true,\n    \"timestamp_us\": 1670969779029341,\n    \"version\": 385901038,\n    \"vm_status\": \"Executed successfully\"\n  }\n}\n*/\n```\n\n", "doc_id": "005f11ee-ea48-4a34-9526-847f1422613f", "embedding": null, "doc_hash": "d3317cf3fb3cf23749d5943efd3d781a40eb4fa5d7c952f4d5952112640bad48", "extra_info": null, "node_info": {"start": 0, "end": 820, "_node_type": "1"}, "relationships": {"1": "bba398e9-39d4-4bf1-b111-352d7ddf10f0"}}, "__type__": "1"}, "3f877dd4-c395-4447-955f-c0212e6f777e": {"__data__": {"text": "\n\nFind the NFT in your Petra wallet\n\n1. Open the Petra Wallet Chrome extension.\n\n2. Go to *Petra > Settings > Network > Devnet*.\n\n3. Click **Library** at bottom.\n\n4. See the NFT in your wallet.\n\n", "doc_id": "3f877dd4-c395-4447-955f-c0212e6f777e", "embedding": null, "doc_hash": "e3cf975353338736219a98ccefcdeab977f1fe94778aa4ba4139beffad8b47b1", "extra_info": null, "node_info": {"start": 0, "end": 195, "_node_type": "1"}, "relationships": {"1": "04554470-6ccd-428b-99f5-89cbb40708f3"}}, "__type__": "1"}, "16cacadd-9fc6-4f5a-9e50-0467dcc80c3d": {"__data__": {"text": "\n\nDeploy the NFT contract\n\nNow you can add this smart contract to the Aptos network.\n\n", "doc_id": "16cacadd-9fc6-4f5a-9e50-0467dcc80c3d", "embedding": null, "doc_hash": "c38d389f555b51332cbdd4388982f3fdeb5047f08e8913ac8f856a71837e9ba0", "extra_info": null, "node_info": {"start": 0, "end": 86, "_node_type": "1"}, "relationships": {"1": "b90b941b-3750-4ba8-83f3-dc3b5b867b7f"}}, "__type__": "1"}, "bd884a08-5754-463d-bb27-34e23852e1b3": {"__data__": {"text": "\n\nCreate and fund admin and source account\n\nCreate two accounts on devnet for deploying and managing this contract:\n  * The source account will be used to create the resource account that will deploy this smart contract.\n  * The admin account is in charge of updating the config of the module (e.g. whether or not we enable minting for this collection).\n\n1. Run these commands to create the accounts, selecting `devnet` when prompted:\n  ```shell\n  aptos init --profile source-account\n  ```\n  ```shell\n  aptos init --profile admin-account\n  ```\n2. Open `.aptos/config.yaml` to find the private keys for the `admin-account` and `source-account` profiles and copy them.\n\n3. Fund these accounts by adding them to your wallet via importing their private keys into devnet and using the **Faucet** function as you did for the `nft-receiver` profile.\n\n", "doc_id": "bd884a08-5754-463d-bb27-34e23852e1b3", "embedding": null, "doc_hash": "1ae3acd4e49085af923b81de081fa3aca18ebeed7e42b201456fa48120518e34", "extra_info": null, "node_info": {"start": 0, "end": 844, "_node_type": "1"}, "relationships": {"1": "086c144b-73ae-47a1-aa62-5d9379606791"}}, "__type__": "1"}, "c7f0d252-448b-4acc-890b-d4b07fb2d229": {"__data__": {"text": "\n\nPrepare resource account from source account\n\nIn this section, we will create a resource account from the `source-account` and publish the module on devnet under the resource account\u2019s address. A resource account is used here to programmatically signed for transactions and avoids the need for multiple signatures.\n\nIn the NFT Tutorial smart contract, we store the resource account\u2019s signer capability in the `ModuleData` resource so that it can automatically sign for transactions in the contract. If we don\u2019t store the signer capability within the module, we\u2019d need to provide the resource account\u2019s signer; but we no longer have access to the resource account\u2019s signer because the resource account is meant to be autonomous, and the contracts published under a resource account are immutable. Once the contract is published, the resource account no longer has access to the signer.\n\n1. Clone the NFT Tutorial:\n  ```shell\n  git clone https://github.com/aptos-labs/nft-tutorial\n  ```\n\n2. Navigate into the tutorial directory:\n  ```shell\n  cd nft-tutorial\n  ```\n\n3. Open `Move.toml` in that directory for editing.\n\n4. Update the `source_addr` and `admin_addr` with the `account` values for the `source-account` and `admin-account` profiles you just created (found in `.aptos/config.yaml`), respectively. Note, the order of addresses and accounts is flipped in those files, so copy carefully.\n\n", "doc_id": "c7f0d252-448b-4acc-890b-d4b07fb2d229", "embedding": null, "doc_hash": "adbe10f539feb5079ea408cb56f6ad7197aabd94fea7307511101a791bb5a841", "extra_info": null, "node_info": {"start": 0, "end": 1395, "_node_type": "1"}, "relationships": {"1": "3710a977-9bfa-4f3a-aeda-713086fc6311"}}, "__type__": "1"}, "129d0199-d028-4004-87aa-c747ea675567": {"__data__": {"text": "\n\nCreate resource account and publish package\n\n1. Run the following command to create the resource account and publish the package all at once. The seed is just an example - feel free to provide a different seed if the resource account created by the specified seed already exists:\n  ```shell\n  aptos move create-resource-account-and-publish-package --seed hex_array:1234 --address-name mint_nft --profile source-account\n  ```\n\n2. Receive compilation output like:\n  ```shell\n  Compiling, may take a little while to download git dependencies...\n  INCLUDING DEPENDENCY AptosFramework\n  INCLUDING DEPENDENCY AptosStdlib\n  INCLUDING DEPENDENCY AptosToken\n  INCLUDING DEPENDENCY MoveStdlib\n  BUILDING NFT-tutorial\n  ```\n\n3. When prompted to publish this package under the resource account's address, enter `yes` and hit return.\n\n4. When asked, `Do you want to submit a transaction for a range of...?`, enter `yes` and hit return.\n\n5. Receive output indicating success resembling:\n  ```shell\n  {\n    \"Result\": \"Success\"\n  }\n  ```\n\n", "doc_id": "129d0199-d028-4004-87aa-c747ea675567", "embedding": null, "doc_hash": "b66de2abd3fa96243283d7833f2038853367ae256d69e8173c637082cfbed528", "extra_info": null, "node_info": {"start": 0, "end": 1025, "_node_type": "1"}, "relationships": {"1": "2316e473-5af0-47dc-8029-f57fe058c2db"}}, "__type__": "1"}, "3ec5e195-014b-45df-a3f4-33088fcaf1af": {"__data__": {"text": "\n\nMint more NFTs and disable minting from admin account\n\n1. Mint another NFT using the `nft-receiver` profile, sustituting in the resource account's address:\n\n```shell\naptos move run --function-id ::minting::mint_nft --profile nft-receiver\n```\n\n2. Again answer `yes` when prompted to submit the transaction.\n\n3. Receive output resembling:\n\n```shell\n{\n  \"Result\": {\n    \"transaction_hash\": \"0x62660973b1a94e620c863899a157b0b46c02dcfdb0c9261a34ed4d2391550fc7\",\n    \"gas_used\": 6691,\n    \"gas_unit_price\": 100,\n    \"sender\": \"aaf015db7b6dacb1db4637ef017e68e689a40797fe8fd3897cee08808979bb91\",\n    \"sequence_number\": 0,\n    \"success\": true,\n    \"timestamp_us\": 1667434233137811,\n    \"version\": 27685944,\n    \"vm_status\": \"Executed successfully\"\n  }\n}\n*/\n```\n\n4. Disable NFT minting in this module by applying `set_minting_enabled --args bool:false` to the `admin-account` profile so that random folks cannot mint this NFT from your module:\n\n```shell\naptos move run --function-id ::minting::set_minting_enabled --args bool:false --profile admin-account\n```\n\nNow you can include your own artwork once you are ready to customize your NFTs by replacing our defaults in `minting.move`:\n* https://slwdaeeko5tz5hx46c6zwqhmh3c6je4sbdbjsdjzbntme5dxarxa.arweave.net/kuwwEIp3Z56e_PC9m0DsPsXkk5IIwpkNOQtmwnR3BG4\n* https://lty5vdw4cl6yczbpz2rnm2732rbtnk3jeiutyqd644wojmkyt2hq.arweave.net/XPHajtwS_YFkL86i1mv71EM2q2kiKTxAfucs5LFYno8\n\n", "doc_id": "3ec5e195-014b-45df-a3f4-33088fcaf1af", "embedding": null, "doc_hash": "4678b5ea3a3c197ad86dfcff2b1452fbed6350545eae37cc4bf78e0fd8a5dac7", "extra_info": null, "node_info": {"start": 0, "end": 1416, "_node_type": "1"}, "relationships": {"1": "66ae3e07-56ac-4e66-95fc-56c5303a3bdd"}}, "__type__": "1"}, "4e15efd9-b38a-451a-a52a-0d9e3d37c7de": {"__data__": {"text": "\n\nNFT Airdrops\n\nThe earlier examples demonstrate how users directly mint NFTs. Aptos also supports airdropping via a two step process:\n1. The creator mints the token into their `TokenStore`\n2. The creator then offers the token to a receiving account.\n3. The receiver claims the token.\n\nUsing the NFT mint example replace the `mint` function with an `airdrop` function as below.\n\n```rust\npublic entry fun airdrop(whitelist: vector) acquires ModuleData {\n    let module_data = borrow_global_mut(@mint_nft);\n    let count = vector::length(&whitelists);\n    let resource_signer = account::create_signer_with_capability(&module_data.signer_cap);\n    let token_id = token::mint_token(&resource_signer, module_data.token_data_id, count);\n    let i: u64 = 0;\n    while(i < count) {\n        let receiver = vector::pop_back(&mut whitelist);\n        token_transfers::offer(&resource_signer, receiver, token_id, 1);\n        i = i + 1;\n    };\n}\n```\n\nAfter offering the token, the wallet receiver (eg: Petra) would see the offer as shown below:\n!petra_screenshot.png\n\n", "doc_id": "4e15efd9-b38a-451a-a52a-0d9e3d37c7de", "embedding": null, "doc_hash": "4f6273a93c8c620270668f6ade396183615095227370a0c6457d25258cb08c74", "extra_info": null, "node_info": {"start": 0, "end": 1054, "_node_type": "1"}, "relationships": {"1": "5f5cdfe8-f192-46b2-a5f9-b2ba6839e380"}}, "__type__": "1"}, "2bf6f771-2f3d-460d-9593-159c8e3ff654": {"__data__": {"text": "\n\nMint Fungible Tokens with On-Chain Data\n\nYou, as a developer, maybe also a game fancier, recently starts to develop a game and hope to\nintegrate it with some web3 experience. You spontaneously think Aptos supports fungible tokens\nwith abundant APIs in the token standard. So you wanna give a try to issue an in-game currency\ncalled *silver coin* by using the Aptos command line interface (CLI). There is only two requirements:\n- The token is fungible\n- The token is associated with a URL that points to the coin image.\n\n", "doc_id": "2bf6f771-2f3d-460d-9593-159c8e3ff654", "embedding": null, "doc_hash": "45361880f496e50902e72806661da8ce127c628d914535e01e45aeb8a1c49e0d", "extra_info": null, "node_info": {"start": 0, "end": 522, "_node_type": "1"}, "relationships": {"1": "9084eb1e-a4f9-45de-beb6-21fa3058c65b"}}, "__type__": "1"}, "72d3ef3b-b888-477a-a06d-605fd8c25cb1": {"__data__": {"text": "\n\nCreate a collection\nToken must belong to a collection. First, you can create a collection by running Aptos CLI:\n```bash\naptos move run --function-id 0x3::token::create_collection_script --args string:\"Game Coins\" string:\"The collection of all in-game coins\" string:\"\" u64:0 vector\\:false,false,false\n```\nParameters:\n- collection name: \"Game Coins\".\n- collection description: \"The collection of all in-game coins\".\n- uri: It's empty because we don't intend to have an url for this collection. In general, you\n  could put an image or a JSON url here representing the collection or providing rich metadata.\n- maximum: 0. 0 means there is no maximum limit for the size of the collections.\n- mutability vector:\n  1. description: false\n  2. uri: false\n  3. maximum: false\n\nAll the parameters could be adjusted as appropriate.\n\n", "doc_id": "72d3ef3b-b888-477a-a06d-605fd8c25cb1", "embedding": null, "doc_hash": "f070ba5f4145203115af719fce48f766710e476318959eba2cd4dbbfa0dc21d5", "extra_info": null, "node_info": {"start": 0, "end": 823, "_node_type": "1"}, "relationships": {"1": "cfb0cb10-0fb9-4ee6-ac0c-986e82bdf14e"}}, "__type__": "1"}, "c588525a-0139-4f00-94e8-7d4c2bf29d2b": {"__data__": {"text": "\n\nCreate tokens\nThe fungible token in Aptos has an unique `TokenId`, a set of creator, collection name, token name and property version.\nFor fungible tokens, the property version is always 0. To create a token named \"Silver Coin\", you run:\n```bash\naptos move run --function-id 0x3::token::create_token_script --args string:\"Game Coins\" string:\"Silver Coin\" string:\"The currency in my game\" u64:100 u64:0 string:$TOKEN_URL address:$YOUR_ADDRESS u64:0 u64:0 vector\\:false,false,false,false,false raw:00 raw:00 raw:00\n```\nParameters:\n- collection name: \"Game Coins\", same as the previous step.\n- token name: \"Silver Coin\".\n- token description: \"The currency in my game\".\n- maximum: 0. 0 means there is no maximum supply of this token.\n- uri: Your token url can point to anything. Usually it is an arweave or ipfs url pointing to an token image or JSON\n  file containing the required metadata. \n- royalty_payee_address: Used for NFT. For FT, it is recommended to set the creator address. \n- royalty_points_denominator: Used for NFT. Set to 0 as N/A. \n- royalty_points_numerator: Used for NFT. Set to 0 as N/A\n- token_mutate_config\n    1. maximum: false\n    2. uri: false\n    3. royalty: false\n    4. description: false\n    5. property map: false\n- property_keys: empty as we don't need any special property.\n- property_values: ditto.\n- property_types: ditto.\n\n:::tip Customized Property Map\nThe last three CLI arguments passed into `move run` is \"raw\" type because current CLI doesn't support\n`vector` type as pass-in arguments. So for empty vectors, we can easily hack it using the raw serialized\nformat (`0x00` is BCS-ed binary format of any empty vector). We are working hard to support it later. Therefore,\nif you need customized properties to be set, please use our Rust/Typescript/Python SDK instead for now.\n:::\n\nAfter run this command, you, the creator account, will have created your \"silver coin\" and mint 100 silver coins to your\naccount.\n\n", "doc_id": "c588525a-0139-4f00-94e8-7d4c2bf29d2b", "embedding": null, "doc_hash": "f1869c5ff28bbcde2e257df3512db3ef27f573c2a087b615c46ef8aefbc6e4bb", "extra_info": null, "node_info": {"start": 0, "end": 1947, "_node_type": "1"}, "relationships": {"1": "661001ad-4c45-4086-bbcc-606b8971863f"}}, "__type__": "1"}, "9babe606-8c5d-49cb-8d66-fae12b506126": {"__data__": {"text": "\n\nMint, Transfer and Burn\nAfter silver coin is created, As the creator, you can `mint` or `burn` at your own discretion and anyone who owns silver\ncoin can `transfer` or `burn` any amount of tokens not exceeding the balance.\n\n", "doc_id": "9babe606-8c5d-49cb-8d66-fae12b506126", "embedding": null, "doc_hash": "ca2c3c8ff1b8a860a11730d8c4bf10f523e6dc88fe6de732c7dd341fd2feb313", "extra_info": null, "node_info": {"start": 0, "end": 226, "_node_type": "1"}, "relationships": {"1": "660c4ad9-2762-47b0-b16a-eb2e29eeb473"}}, "__type__": "1"}, "d8e7d793-0816-44b2-941b-9f9e705fabd6": {"__data__": {"text": "\n\nMint\nTo mint 1000 tokens, the creator can run:\n```bash\naptos move run --function-id 0x3::token::mint_script --args address:$YOUR_ADDRESS string:\"Game Coins\" string:\"Silver Coin\" u64:1000\n```\nParameters:\n- creator address: put your creator address here.\n- collection name: \"Game Coins\", same as before.\n- token name: \"Silver Coin\", same as before.\n- mint amount: 1000.\n\n", "doc_id": "d8e7d793-0816-44b2-941b-9f9e705fabd6", "embedding": null, "doc_hash": "84cd47cd592818d15906a773dbc5755519d5acb1b0ba283713aaa4d00c30f615", "extra_info": null, "node_info": {"start": 0, "end": 371, "_node_type": "1"}, "relationships": {"1": "3e15b8d5-7e3b-4b12-89fb-d28e4a1e9a0b"}}, "__type__": "1"}, "81813613-ebf5-49d7-8e24-e80a9bfa845a": {"__data__": {"text": "\n\nTransfer\nTo transfer 20 tokens to a receiver, the owner can run:\n```bash\naptos move run --function-id 0x3::token::transfer_with_opt_in --args address:$CREATOR_ADDRESS string:\"Game Coins\" string:\"Silver Coin\" u64:0 address:$RECEIVER_ADDRESS u64:20\n```\n\n:::tip Opt-in direct transfer\nAptos token contract, to avoid receiving spam tokens, by default disable direct transfer of any token, which means if the receiver\ndoes not opt-in direct transfer of a specific token, the sender calling `transfer_with_opt_in` will get an error. Thus,\nif the receiver wish to accept this token, she has to run the following command first.\n```bash\naptos move run --function-id 0x3::token::opt_in_direct_transfer --args bool:true\n```\n:::\n\n", "doc_id": "81813613-ebf5-49d7-8e24-e80a9bfa845a", "embedding": null, "doc_hash": "46db73d5ccbe558a69eb2160ea5fba5797d6ab72c50464ac544dfaefae92aa9c", "extra_info": null, "node_info": {"start": 0, "end": 720, "_node_type": "1"}, "relationships": {"1": "beead010-1548-4d9a-8e69-0bb41983a569"}}, "__type__": "1"}, "5f2b5006-53d4-4be0-ba1d-d38f98b015aa": {"__data__": {"text": "\n\nBurn\nIf you are the creator, you can burn silver coins from any account. If you are an owner, you are only allowed to burn\nyour own silver coins.\n\nTo burn 10 tokens as a creator from any owner's account, you can run:\n```bash\naptos move run --function-id 0x3::token::burn_by_creator --args address:$OWNER_ADDRESS string:\"Game Coins\" string:\"Silver Coin\" u64:0 u64:10\n```\nParameters:\n- owner address: put the address of any owner of silver coin here.\n- collection name: \"Game Coins\", same as before.\n- token name: \"Silver Coin\", same as before.\n- property version: 0. FT will always have 0 as property version.\n- burn amount: 10.\n\nTo burn 10 tokens as an owner, you can run:\n```bash\naptos move run --function-id 0x3::token::burn --args address:$CREATOR_ADDRESS string:\"Game Coins\" string:\"Silver Coin\" u64:0 u64:10\n```\nSince owner will burn silver coin from her own address, owner address is not required as a parameter.\n\nParameters:\n- owner address: put the address of the creator of silver coin here.\n- collection name: \"Game Coins\", same as before.\n- token name: \"Silver Coin\", same as before.\n- property version: 0. FT will always have 0 as property version.\n- burn amount: 10.\n\n", "doc_id": "5f2b5006-53d4-4be0-ba1d-d38f98b015aa", "embedding": null, "doc_hash": "1f82806b030946b85283b51fc45c369128328e995f41b5ad2cd211fc71615d40", "extra_info": null, "node_info": {"start": 0, "end": 1183, "_node_type": "1"}, "relationships": {"1": "16fb092f-9f03-4ef2-87c0-f33ddfc709aa"}}, "__type__": "1"}, "914ea1f6-8933-4846-ab42-7d59535ab47c": {"__data__": {"text": "\n\nModules and Scripts\n\nMove has two different types of programs: ***Modules*** and ***Scripts***. Modules are libraries that define struct types along with functions that operate on these types. Struct types define the schema of Move's global storage, and module functions define the rules for updating storage. Modules themselves are also stored in global storage. Scripts are executable entrypoints similar to a `main` function in a conventional language. A script typically calls functions of a published module that perform updates to global storage. Scripts are ephemeral code snippets that are not published in global storage.\n\nA Move source file (or **compilation unit**) may contain multiple modules and scripts. However, publishing a module or executing a script are separate VM operations.\n\n", "doc_id": "914ea1f6-8933-4846-ab42-7d59535ab47c", "embedding": null, "doc_hash": "c2ae2de7bc55fe4b5b25b8b83c38f1c49f526943f96612dc8afaa7ba2ceb59f6", "extra_info": null, "node_info": {"start": 0, "end": 801, "_node_type": "1"}, "relationships": {"1": "42769f65-36f6-418d-9c57-3ce67c55a317"}}, "__type__": "1"}, "87d900a3-09c8-42fc-b381-c327bf054548": {"__data__": {"text": "\n\nSyntax\n\n", "doc_id": "87d900a3-09c8-42fc-b381-c327bf054548", "embedding": null, "doc_hash": "48fb83fcf97646e94ef2cc9a83eb8318121ccaa52715018df66a5b1fce1d1500", "extra_info": null, "node_info": {"start": 0, "end": 10, "_node_type": "1"}, "relationships": {"1": "60cfefcd-ac51-4d74-8e7a-1077cd0c311f"}}, "__type__": "1"}, "9f87f4cc-5cec-4a81-b548-c751ac9a8c9e": {"__data__": {"text": "\n\nScripts\n\n:::tip Tutorial\nTo learn how to publish and execute a Move script, follow the Move Scripts example.\n:::\n\n\nA script has the following structure:\n\n```text\nscript {\n    *\n    *\n    fun ([identifier: type]*) \n}\n```\n\nA `script` block must start with all of its `use` declarations, followed by any constants and (finally) the main\nfunction declaration.\nThe main function can have any name (i.e., it need not be called `main`), is the only function in a script block, can have any number of\narguments, and must not return a value. Here is an example with each of these components:\n\n```move\nscript {\n    // Import the debug module published at the named account address std.\n    use std::debug;\n\n    const ONE: u64 = 1;\n\n    fun main(x: u64) {\n        let sum = x + ONE;\n        debug::print(&sum)\n    }\n}\n```\n\nScripts have very limited power\u2014they cannot declare friends, struct types or access global storage. Their primary purpose is to invoke module functions.\n\n", "doc_id": "9f87f4cc-5cec-4a81-b548-c751ac9a8c9e", "embedding": null, "doc_hash": "b569805929741d62fac16a4444131a4a790ade7f9e39f2b41d89db9dac0af8ae", "extra_info": null, "node_info": {"start": 0, "end": 968, "_node_type": "1"}, "relationships": {"1": "a311f07a-812e-4372-ac85-c514bc0c33b8"}}, "__type__": "1"}, "076d9138-0d66-4147-80ec-35d85560b6b5": {"__data__": {"text": "\n\nModules\n\nA module has the following syntax:\n\n```text\nmodule :: {\n    ( |  |  |  | )*\n}\n```\n\nwhere `` is a valid named or literal address.\n\nFor example:\n\n```move\nmodule 0x42::example {\n    struct Example has copy, drop { i: u64 }\n\n    use std::debug;\n    friend 0x42::another_example;\n\n    const ONE: u64 = 1;\n\n    public fun print(x: u64) {\n        let sum = x + ONE;\n        let example = Example { i: sum };\n        debug::print(&sum)\n    }\n}\n```\n\nThe `module 0x42::example` part specifies that the module `example` will be published under the account address `0x42` in global storage.\n\nModules can also be declared using named addresses. For example:\n\n```move\nmodule example_addr::example {\n    struct Example has copy, drop { a: address }\n\n    use std::debug;\n    friend example_addr::another_example;\n\n    public fun print() {\n        let example = Example { a: @example_addr };\n        debug::print(&example)\n    }\n}\n```\n\nBecause named addresses only exist at the source language level and during compilation,\nnamed addresses will be fully substituted for their value at the bytecode\nlevel. For example if we had the following code:\n\n```move\nscript {\n    fun example() {\n        my_addr::m::foo(@my_addr);\n    }\n}\n```\n\nand we compiled it with `my_addr` set to `0xC0FFEE`, then it would be equivalent\nto the following operationally:\n\n```move\nscript {\n    fun example() {\n        0xC0FFEE::m::foo(@0xC0FFEE);\n    }\n}\n```\n\nHowever at the source level, these _are not equivalent_\u2014the function\n`m::foo` _must_ be accessed through the `my_addr` named address, and not through\nthe numerical value assigned to that address.\n\nModule names can start with letters `a` to `z` or letters `A` to `Z`. After the first character, module names can contain underscores `_`, letters `a` to `z`, letters `A` to `Z`, or digits `0` to `9`.\n\n```move\nmodule my_module {}\nmodule foo_bar_42 {}\n```\n\nTypically, module names start with an lowercase letter. A module named `my_module` should be stored in a source file named `my_module.move`.\n\nAll elements inside a `module` block can appear in any order.\nFundamentally, a module is a collection of `types` and `functions`.\nThe `use` keyword is used to import types from other modules.\nThe `friend` keyword specifies a list of trusted modules.\nThe `const` keyword defines private constants that can be used in the functions of a module.\n\n", "doc_id": "076d9138-0d66-4147-80ec-35d85560b6b5", "embedding": null, "doc_hash": "3d186a1aee95e5c284073d11cf791d5e1c3d05a4dad62462993a84a85ed7bc42", "extra_info": null, "node_info": {"start": 0, "end": 2367, "_node_type": "1"}, "relationships": {"1": "0a57c504-e3ed-4e3c-9667-6a4c0b72df97"}}, "__type__": "1"}, "87f67c42-5e34-4acd-bd35-980f7d0a76bd": {"__data__": {"text": "\n\nModules on Aptos\n\nAptos allows for permissionless publishing of modules within a package as well as upgrading those that have appropriate compatibility policy set.\n\nA module contains several structs and functions, much like Rust.\n\nDuring package publishing time, a few constraints are maintained:\n* Both Structs and public function signatures are published as immutable.\n* When publishing a module for the first time, The VM will search for and execute an `init_module(account: &signer)` function.\n\n", "doc_id": "87f67c42-5e34-4acd-bd35-980f7d0a76bd", "embedding": null, "doc_hash": "1c7bc4da253d21ae3d4c1f04b646347cec093e2e5ec3f790cd4d0bebeff995f4", "extra_info": null, "node_info": {"start": 0, "end": 501, "_node_type": "1"}, "relationships": {"1": "ea76278d-4153-4888-a0de-3bc7b34bc303"}}, "__type__": "1"}, "82518187-ca61-46fa-97a7-ed6238613615": {"__data__": {"text": "\n\nMove on Aptos\n\nThe Aptos blockchain consists of validator nodes that run a consensus protocol. The consensus protocol agrees upon the ordering of transactions and their output when executed on the Move Virtual Machine (MoveVM). Each validator node translates transactions along with the current blockchain ledger state as input into the VM. The MoveVM processes this input to produce a changeset or storage delta as output. Once consensus agrees and commits to the output, it becomes publicly visible. In this guide, we will introduce you to core Move concepts and how they apply to developing on Aptos.\n\n", "doc_id": "82518187-ca61-46fa-97a7-ed6238613615", "embedding": null, "doc_hash": "a21940ba870d604e1dacf7b1a081352fff9bc1abb6af23bcb929d0e9e1a01bdc", "extra_info": null, "node_info": {"start": 0, "end": 607, "_node_type": "1"}, "relationships": {"1": "c86e13df-b1c2-4861-a65e-9491f4899a68"}}, "__type__": "1"}, "26b1f3df-a476-471c-b96b-9294ac491c75": {"__data__": {"text": "\n\nWhat is Move?\n\nMove is a safe and secure programming language for Web3 that emphasizes **scarcity** and **access control**. Any assets in Move can be represented by or stored within *resource*. **Scarcity** is enforced by default as structs cannot be accidentally duplicated or dropped. Only structs that have explicitly been defined at the bytecode layer as *copy* can be duplicated and *drop* can be dropped, respectively.\n\n**Access control** comes from both the notion of accounts as well as module access privileges. A module in Move may either be a library or a program that can create, store, or transfer assets. Move ensures that only public module functions may be accessed by other modules. Unless a struct has a public constructor, it can only be constructed within the module that defines it. Similarly, fields within a struct can only be accessed and mutated within its module that or via public accessors and setters. Furthermore, structs defined with *key* can be stored and read from global storage only within the module defines it. Structs with *store* can be stored within another *store* or *key* struct inside or outside the module that defines that struct.\n\nIn Move, a transaction's sender is represented by a *signer*, a verified owner of a specific account. The signer has the highest level of permission in Move and is the only entity capable of adding resources into an account. In addition, a module developer can require that a signer be present to access resources or modify assets stored within an account.\n\n", "doc_id": "26b1f3df-a476-471c-b96b-9294ac491c75", "embedding": null, "doc_hash": "894a6274e26bed4dc68ae7e08f613eff197a4643be2f05468f7f156b6ef674cd", "extra_info": null, "node_info": {"start": 0, "end": 1539, "_node_type": "1"}, "relationships": {"1": "0a681277-6473-4aa8-b86b-5b0544049715"}}, "__type__": "1"}, "ab676db0-6803-471d-aabf-8fee7a235214": {"__data__": {"text": "\n\nComparison to other VMs\n\n| | Aptos / Move | Solana / SeaLevel | EVM | Sui / Move |\n|---|---|---|---|---|\n| Data storage | Stored at a global address or within the owner's account | Stored within the owner's account associated with a program | Stored within the account associated with a smart contract | Stored at a global address |\n| Parallelization | Capable of inferring parallelization at runtime within Aptos | Requires specifying all data accessed | Currently serial nothing in production | Requires specifying all data accessed |\n| Transaction safety | Sequence number | Transaction uniqueness | nonces, similar to sequence numbers | Transaction uniqueness |\n| Type safety | Module structs and generics | Program structs | Contract types | Module structs and generics |\n| Function calling | Static dispatch | Static dispatch | Dynamic dispatch | Static dispatch |\n| Authenticated Storage | Yes | No | Yes | No |\n| Object accessibility | Guaranteed to be globally accessible | Not applicable | Not applicable | Can be hidden |\n\n", "doc_id": "ab676db0-6803-471d-aabf-8fee7a235214", "embedding": null, "doc_hash": "17b3737d5857ba194a98f500533462c2f1833c839591d2adeabbd171a48fc085", "extra_info": null, "node_info": {"start": 0, "end": 1036, "_node_type": "1"}, "relationships": {"1": "00ee4061-8b57-46b0-92c8-ef3bb8d099dc"}}, "__type__": "1"}, "179c58d6-eb9f-43a4-9323-959078cc685a": {"__data__": {"text": "\n\nAptos Move features\n\nEach deployment of the MoveVM has the ability to extend the core MoveVM with additional features via an adapter layer. Furthermore, MoveVM has a framework to support standard operations much like a computer has an operating system.\n\nThe Aptos Move adapter features include:\n* Move Objects that offer an extensible programming model for globally access to heterogeneous set of resources stored at a single address on-chain.\n* Resource accounts that offer programmable accounts on-chain, which can be useful for DAOs (decentralized autonomous organizations), shared accounts, or building complex applications on-chain.\n* Tables for storing key, value data within an account at scale\n* Parallelism via Block-STM that enables concurrent execution of transactions without any input from the user\n\nThe Aptos framework ships with many useful libraries:\n* A Token standard that makes it possible to create NFTs and other rich tokens without publishing a smart contract\n* A Coin standard that makes it possible to create type-safe Coins by publishing a trivial module\n* A staking and delegation framework\n* A `type_of` service to identify at run-time the address, module, and struct name of a given type\n* Multi-signer framework that allows multiple `signer` entities\n* A timestamp service that provides a monotonically increasing clock that maps to the actual current unixtime\n\nWith updates frequently.\n\n", "doc_id": "179c58d6-eb9f-43a4-9323-959078cc685a", "embedding": null, "doc_hash": "d7bc75505154958e310b1a1c72ea092c26b154b2f3e9443a1ddbd906b4d9b665", "extra_info": null, "node_info": {"start": 0, "end": 1419, "_node_type": "1"}, "relationships": {"1": "dc7aae3b-f893-4c0a-8fc9-d45a1ba84108"}}, "__type__": "1"}, "7d37c550-dbf7-4a3b-ac5f-949b1d2d51bd": {"__data__": {"text": "\n\nMore Resources\n\nTo start developing smart contracts on the Aptos blockchain, we recommend the following resources:\n\n- Aptos Move Examples\n- End-to-End Aptos Move Tests\n- Move language channel in Aptos Discord.\n- Aptos Move Framework.\n\nThere are several IDE plugins available for Aptos and the Move language:\n\n- Syntax highlighting for Visual Studio Code\n- Move language plugin for Jetbrains IDEs: Supports syntax highlighting, code navigation, renames, formatting, type checks and code generation.\n- Remix IDE Plugin: Offers a web-based development environment. It is a no-setup tool with a graphical interface for developing Move modules.\n\nUse these external resources to learn about the Move programming language:\n\n* Teach yourself Move on Aptos.\n* Formal Verification, the Move Language, and the Move Prover\n* IMCODING Move Tutorials\n* Pontem Move Playground\n* Collection of nestable Move resources\n* Move-Lang tag on Stack Overflow\n\n", "doc_id": "7d37c550-dbf7-4a3b-ac5f-949b1d2d51bd", "embedding": null, "doc_hash": "5345c825bd41778260c884cc145e2630cbc130691305f4746d6443135ce78a60", "extra_info": null, "node_info": {"start": 0, "end": 939, "_node_type": "1"}, "relationships": {"1": "8211bdc4-82fc-4984-b253-a5886046f5bf"}}, "__type__": "1"}, "a38452fc-0933-4aa8-aa34-1766f4ad6158": {"__data__": {"text": "\n\nMove Scripts\n\nThis tutorial explains how to write and execute a Move script. You can use Move scripts to execute a series of commands across published Move module interfaces.\n\n", "doc_id": "a38452fc-0933-4aa8-aa34-1766f4ad6158", "embedding": null, "doc_hash": "79038bcedd45d85f4676904ed48f0349a5ac8a10dc6467e2a721478d9be95552", "extra_info": null, "node_info": {"start": 0, "end": 178, "_node_type": "1"}, "relationships": {"1": "ebf7421c-04db-4d17-af41-0cb5af0def4e"}}, "__type__": "1"}, "8efbbdc8-989c-4c03-8055-c1a11713a61e": {"__data__": {"text": "\n\nExample use case\n\nThe following example calls functions on the aptos_coin.move module to confirm the balance of the destination account is less than `desired_balance`, and if so, tops it up to `desired_balance`.\n\n```move\nscript {\n    use std::signer;\n    use aptos_framework::aptos_account;\n    use aptos_framework::aptos_coin;\n    use aptos_framework::coin;\n\n    fun main(src: &signer, dest: address, desired_balance: u64) {\n        let src_addr = signer::address_of(src);\n        \n        addr::my_module::do_nothing();\n\n        let balance = coin::balance(src_addr);\n        if (balance < desired_balance) {\n            aptos_account::transfer(src, dest, desired_balance - balance);\n        };\n    }\n}\n```\n\n", "doc_id": "8efbbdc8-989c-4c03-8055-c1a11713a61e", "embedding": null, "doc_hash": "6d844f0130288c1ccacb560a9fb7f58254694cfb92d0a94cb73ac1ddf7023206", "extra_info": null, "node_info": {"start": 0, "end": 712, "_node_type": "1"}, "relationships": {"1": "27c1c53c-86ca-4b19-88d9-e79394ffac0b"}}, "__type__": "1"}, "be95dd91-d0c9-4487-a8fd-cff3419af3c0": {"__data__": {"text": "\n\nExecution\n\nNow that you know what you would like to accomplish, you need to determine:\n\n- Where do I put these files?\n- What do I name them?\n- Do I need a `Move.toml`?\n- How do I run my script with the CLI?\n\nLet us run through how to execute a Move script with a step-by-step example using the Aptos CLI.\n\n1. Make a new directory for your work:\n    ```sh\n    mkdir testing\n    cd testing\n    ```\n\n2. Set up the Aptos CLI and create an account:\n    ```sh\n    aptos init --network devnet\n    ```\n    \n    You may reuse an existing private key (which looks like this: `0xbd944102bf5b5dfafa7fe865d8fa719da6a1f0eafa3cd600f93385482d2c37a4`), or it can generate a new one for you, as part of setting up your account. Let's say your account looks like the example below:\n    ```sh\n    ---\n    profiles:\n      default:\n        private_key: \"0xbd944102bf5b5dfafa7fe865d8fa719da6a1f0eafa3cd600f93385482d2c37a4\"\n        public_key: \"0x47673ec83bb254cc9a8bfdb31846daacd0c96fe41f81855462f5fc5306312b1b\"\n        account: cb265645385819f3dbe71aac266e319e7f77aed252cacf2930b68102828bf615\n        rest_url: \"https://fullnode.devnet.aptoslabs.com\"\n        faucet_url: \"https://faucet.devnet.aptoslabs.com\"\n    ```\n\n3. From this same directory, initialize a new Move project:\n    ```sh\n    aptos move init --name run_script\n    ```\n\n4. Create a `my_script.move` file containing the example script above in a `sources/` subdirectory of your `testing/` directory. Also, create a `my_module.move` file as seen in the example below:\n    ```\n    module addr::my_module {\n        public entry fun do_nothing() { }\n    }\n    ```\n\n    This results in the following file structure:\n    ```\n    testing/\n       Move.toml\n       sources/\n          my_script.move\n          my_module.move\n    ```\n\n5. Compile the script:\n    ```\n    $ aptos move compile --named-addresses addr=cb265645385819f3dbe71aac266e319e7f77aed252cacf2930b68102828bf615\n    Compiling, may take a little while to download git dependencies...\n    INCLUDING DEPENDENCY AptosFramework\n    INCLUDING DEPENDENCY AptosStdlib\n    INCLUDING DEPENDENCY MoveStdlib\n    BUILDING run_script\n    {\n      \"Result\": [\n        \"cb265645385819f3dbe71aac266e319e7f77aed252cacf2930b68102828bf615::my_module\"\n      ]\n    }\n    ```\n\n    Note how we use the `--named-addresses` argument. This is necessary because in the code we refer to this named address called `addr`. The compiler needs to know what this refers to. Instead of using this CLI", "doc_id": "be95dd91-d0c9-4487-a8fd-cff3419af3c0", "embedding": null, "doc_hash": "f370ace1985f4c46f123fda8711e7a2958063cf1d14fbf1d2a854ad119bb2381", "extra_info": null, "node_info": {"start": 0, "end": 2464, "_node_type": "1"}, "relationships": {"1": "1d2d2a63-b6b1-4b77-bdb6-4adaecb5c135", "3": "39b6b20a-d876-4920-89b5-bb3e0fdea27f"}}, "__type__": "1"}, "39b6b20a-d876-4920-89b5-bb3e0fdea27f": {"__data__": {"text": "The compiler needs to know what this refers to. Instead of using this CLI argument, you could put something like this in your `Move.toml`:\n\n    ```\n    [addresses]\n    addr = \"cb265645385819f3dbe71aac266e319e7f77aed252cacf2930b68102828bf615\"\n    ```\n\n6. Run the compiled script:\n    ```\n    $ aptos move run-script --compiled-script-path build/my_script/bytecode_scripts/main.mv --args address:b078d693856a65401d492f99ca0d6a29a0c5c0e371bc2521570a86e40d95f823 --args u64:5\n    Do you want to submit a transaction for a range of [17000 - 25500] Octas at a gas unit price of 100 Octas? [yes/no] >\n    yes\n    {\n      \"Result\": {\n        \"transaction_hash\": \"0xa6ca6275c73f82638b88a830015ab81734a533aebd36cc4647b48ff342434cdf\",\n        \"gas_used\": 3,\n        \"gas_unit_price\": 100,\n        \"sender\": \"cb265645385819f3dbe71aac266e319e7f77aed252cacf2930b68102828bf615\",\n        \"sequence_number\": 4,\n        \"success\": true,\n        \"timestamp_us\": 1683030933803632,\n        \"version\": 3347495,\n        \"vm_status\": \"Executed successfully\"\n      }\n    }\n    ```\n\nNote that the path of the compiled script is under `build/run_script/`, not `build/my_script/`. This is because it uses the name of the project contained in `Move.toml`, which is `run_script` from when we ran `aptos move init --name run_script`.\n\nSee the code used for this document. The full example explains how to use a Move script that relies on a user-created Move module as well.\n\nSee also how to do this with the Rust SDK instead of the Aptos CLI in Stack Overflow.\n\n", "doc_id": "39b6b20a-d876-4920-89b5-bb3e0fdea27f", "embedding": null, "doc_hash": "fb235100b94b2ddc468320447084c1d590975b6dcf7eaf1f1d10019e85d9c350", "extra_info": null, "node_info": {"start": 2391, "end": 3922, "_node_type": "1"}, "relationships": {"1": "1d2d2a63-b6b1-4b77-bdb6-4adaecb5c135", "2": "be95dd91-d0c9-4487-a8fd-cff3419af3c0"}}, "__type__": "1"}, "ca8d5632-2480-4719-a0f1-8f13c5fddb22": {"__data__": {"text": "\n\nAdvanced\n\nYou may execute a script in a more streamlined fashion; instead of running `aptos move compile` and then `aptos move run-script --compiled-script-path` separately, you can just do this:\n```\n$ aptos move run-script --script-path sources/my_script.move --args address:b078d693856a65401d492f99ca0d6a29a0c5c0e371bc2521570a86e40d95f823 --args u64:5\n```\nThis will conduct both steps with a single CLI command yet has issues. For this reason, we recommend using the previous two-step approach for now.\n\n", "doc_id": "ca8d5632-2480-4719-a0f1-8f13c5fddb22", "embedding": null, "doc_hash": "b6a7f7911ab69442c00f000fcf66f63267b911b3a07acc67196db50b196d1393", "extra_info": null, "node_info": {"start": 0, "end": 508, "_node_type": "1"}, "relationships": {"1": "f2c4e4ee-df9b-41a7-8c1a-38f6839035fe"}}, "__type__": "1"}, "5a3c49ae-69bc-4dde-bae0-3a38ca55d7ff": {"__data__": {"text": "---title: \"Move Reference Documentation\"id: \"move\"---import Link from \"@site/src/components/Link\";import MoveReference from \"@site/src/components/MoveReference\";<MoveReference />", "doc_id": "5a3c49ae-69bc-4dde-bae0-3a38ca55d7ff", "embedding": null, "doc_hash": "2759451b6a346585c0f488ff5a64d558de168ea35c9b1705556d405307796a43", "extra_info": null, "node_info": {"start": 0, "end": 178, "_node_type": "1"}, "relationships": {"1": "ede41dd0-12fc-4016-b38b-b81c3f145be1"}}, "__type__": "1"}, "e06a1e59-be73-4d38-b61b-f29c04cfef34": {"__data__": {"text": "\n\nNetwork Identity For Fullnode\n\nFullnodes will automatically start up with a randomly generated network identity. This works well for regular fullnodes. However:\n\n- You may want your fullnode to be added to a specific upstream fullnode's allowlist (i.e., another fullnode participant in the Aptos network), because:\n\n  - You might require specific permissions for your fullnode on this specific upstream fullnode, or\n  - This upstream fullnode only allows known identities to connect to it, or\n  - You may wish to advertise your fullnode for other Aptos fullnodes to connect to (to help support the Aptos network).\n\nIn such cases, it helps if you run your fullnode with a static network identity, instead of a randomly generated network identity that keeps changing every time you start up your fullnode.\n\nThis guide will show you how to:\n\n- Create a static network identity for your fullnode.\n- Start a node with a static network identity.\n\n", "doc_id": "e06a1e59-be73-4d38-b61b-f29c04cfef34", "embedding": null, "doc_hash": "a6029a82c14e056d9011da861cb50de1ae609b41f5fc37a90de5eb5787490ceb", "extra_info": null, "node_info": {"start": 0, "end": 943, "_node_type": "1"}, "relationships": {"1": "52edb485-6dd9-4f89-af30-14f33952bd08"}}, "__type__": "1"}, "886c94f3-bcbf-4252-811c-3d1e306ec197": {"__data__": {"text": "\n\nBefore you proceed\n\nBefore you proceed, make sure that you already know how to start your local fullnode. See Run a Fullnode for detailed documentation.\n\n:::caution Docker support only on Linux\n\nDocker container is currently supported only on Linux x86-64 platform. If you are on macOS or Windows platform, use the Aptos-core source approach.\n\n:::\n\n", "doc_id": "886c94f3-bcbf-4252-811c-3d1e306ec197", "embedding": null, "doc_hash": "3a4c2e408d6a3573846335d96cae04ca9375a86e01441dd8ec2fec1dd9d019bf", "extra_info": null, "node_info": {"start": 0, "end": 351, "_node_type": "1"}, "relationships": {"1": "b4fb691c-fc79-41dd-9f1f-66f60c6a89e1"}}, "__type__": "1"}, "ddaac2d6-1ca4-47f9-a5fa-4863fccfd733": {"__data__": {"text": "\n\nCreating a static identity for a fullnode\n\nTo create a static identity for your fullnode:\n\n1. You first create a private key, public key pair for your fullnode.\n2. Next you derive the `peer_id` from the public key.\n3. Finally, you use the `peer_id` in your `fullnode.yaml` to create a static network identity for your fullnode.\n\nFollow the below detailed steps:\n\n1. Preparation\n    \n    **Using Aptos-core source code**\n    \n    See Building Aptos From Source\n\n    **Using Docker**\n\n    Alternatively, if you are on Linux x86-64 platform, you can use the Aptos Docker image.\n\n    `cd` into the directory for your local public fullnode and start a Docker container with the latest tools, for example:\n\n    ```bash\n    cd ~/my-full-node\n    docker run -it aptoslabs/tools:devnet /bin/bash\n    ```\n\n2. Generate the private key\n\n  **Using Aptos-core source code**\n  \n  Run the Aptos CLI `aptos` to produce a hex encoded static x25519 private key. This will be the private key for your network identity.\n\n  :::tip\n\n  The below command will also create a corresponding `private-key.txt.pub` file with the public identity key in it.\n\n  :::\n\n  ```bash\n  aptos key generate --key-type x25519 --output-file /path/to/private-key.txt\n\n  ```\n\n  Example `private-key.txt` and the associated `private-key.txt.pub` files are shown below:\n\n  ```bash\n  cat ~/private-key.txt\n  C83110913CBE4583F820FABEB7514293624E46862FAE1FD339B923F0CACC647D%           \n\n  cat ~/private-key.txt.pub\n  B881EA2C174D8211C123E5A91D86227DB116A44BB345A6E66874F83D8993F813%\n  ```\n\n  **Using Docker**\n\n  Run this step from inside the `aptoslabs/tools` Docker container. Open a new terminal and `cd` into the directory where you started the Docker container for your fullnode. Making sure to provide the full path to where you want the private key TXT file to be stored, run the command as below:\n\n  ```bash\n  aptos key generate \\\n      --key-type x25519 \\\n      --output-file /path/to/private-key.txt\n  ```\n\n3. Retrieve the peer identity\n  \n  **Using Aptos-core source code**\n\n  :::tip Required: host information\n  Use the `--host` flag to provide the host information to output a network address for the fullnode. \n  :::\n\n  ```bash\n  aptos key extract-peer --host example.com:6180 \\\n      --public-network-key-file private-key.txt.pub \\\n      --output-file peer-info.yaml\n  ```\n  which will produce the following output:\n  ```json\n  {\n    \"Result\": {\n      \"B881EA2C174D8211C123E5A91D86227DB116A44BB345A6E66874F83D8993F813\": {\n        \"addresses\": [\n          \"/dns/example.com/tcp/6180/noise-ik/0xB881EA2C174D8211C123E5A91D86227DB116A44BB345A6E66874F83D8993F813/handshake/0\"\n        ],\n        \"keys\": [\n         ", "doc_id": "ddaac2d6-1ca4-47f9-a5fa-4863fccfd733", "embedding": null, "doc_hash": "3a6dbeb0d96432022e0f3fff66396890087e7624b466e66f99a5f23510159de4", "extra_info": null, "node_info": {"start": 0, "end": 2675, "_node_type": "1"}, "relationships": {"1": "ebc73c7b-53af-4173-a894-17fe4066ec78", "3": "d253b038-792e-4f94-90e9-9db8258380cf"}}, "__type__": "1"}, "d253b038-792e-4f94-90e9-9db8258380cf": {"__data__": {"text": "      \"keys\": [\n          \"0xB881EA2C174D8211C123E5A91D86227DB116A44BB345A6E66874F83D8993F813\"\n        ],\n        \"role\": \"Upstream\"\n      }\n    }\n  }\n  ```\n  or\n  ```bash\n  aptos key extract-peer --host 1.1.1.1:6180 \\\n      --public-network-key-file private-key.txt.pub \\\n      --output-file peer-info.yaml\n  ```\n  which will produce the following output:\n  ```json\n  {\n    \"Result\": {\n      \"B881EA2C174D8211C123E5A91D86227DB116A44BB345A6E66874F83D8993F813\": {\n        \"addresses\": [\n          \"/ip4/1.1.1.1/tcp/6180/noise-ik/0xB881EA2C174D8211C123E5A91D86227DB116A44BB345A6E66874F83D8993F813/handshake/0\"\n        ],\n        \"keys\": [\n          \"0xB881EA2C174D8211C123E5A91D86227DB116A44BB345A6E66874F83D8993F813\"\n        ],\n        \"role\": \"Upstream\"\n      }\n    }\n  }\n  ```\n\n  **Using Docker**\n\n  Run the same above commands to extract the peer from inside the `aptoslabs/tools` Docker container. For example:\n\n  ```bash\n  aptos key extract-peer --host 1.1.1.1:6180 \\\n      --public-network-key-file /path/to/private-key.txt.pub \\\n      --output-file /path/to/peer-info.yaml\n  ```\n\n  This will create a YAML file that will have your `peer_id` corresponding to the `private-key.txt` you provided.\n\n  Example output `peer-info.yaml` for the `--host example.com:6180` option:\n\n   ```yaml\n   ---\n   B881EA2C174D8211C123E5A91D86227DB116A44BB345A6E66874F83D8993F813:\n     addresses: [\"/dns/example.com/tcp/6180/noise-ik/0xB881EA2C174D8211C123E5A91D86227DB116A44BB345A6E66874F83D8993F813/handshake/0\"]\n     keys:\n       - \"0xB881EA2C174D8211C123E5A91D86227DB116A44BB345A6E66874F83D8993F813\"\n   role: Upstream\n    ```\n\n  In this example, `B881EA2C174D8211C123E5A91D86227DB116A44BB345A6E66874F83D8993F813` is the `peer_id`. Use this in the `peer_id` field of your `fullnode.yaml` to create a static identity for your fullnode.\n\n\n", "doc_id": "d253b038-792e-4f94-90e9-9db8258380cf", "embedding": null, "doc_hash": "02a919428f90b0f69a2778e12d6c1bbd9047c11bc4aa22c906e511f412a95893", "extra_info": null, "node_info": {"start": 2650, "end": 4474, "_node_type": "1"}, "relationships": {"1": "ebc73c7b-53af-4173-a894-17fe4066ec78", "2": "ddaac2d6-1ca4-47f9-a5fa-4863fccfd733"}}, "__type__": "1"}, "e51c6ba7-c4b7-4bdd-9e9d-e9ef3071cc57": {"__data__": {"text": "\n\nStart a node with a static network identity\n\nAfter you generated the public identity key you can startup the fullnode with a static network identity by using the public key in the `peer_id` field of the configuration file `fullnode.yaml`:\n\n```yaml\nfull_node_networks:\n- network_id: \"public\"\n  discovery_method: \"onchain\"\n  identity:\n    type: \"from_config\"\n    key: \"\"\n    peer_id: \"\"\n```\n\nIn our example, you would specify the above-generated `peer_id` in place of the ``:\n\n```yaml\nfull_node_networks:\n- network_id: \"public\"\n  discovery_method: \"onchain\"\n  identity:\n    type: \"from_config\"\n    key: \"C83110913CBE4583F820FABEB7514293624E46862FAE1FD339B923F0CACC647D\"\n    peer_id: \"B881EA2C174D8211C123E5A91D86227DB116A44BB345A6E66874F83D8993F813\"\n```\n\n", "doc_id": "e51c6ba7-c4b7-4bdd-9e9d-e9ef3071cc57", "embedding": null, "doc_hash": "3011fc674f0c43f3c3a0889140e59ace3dca3b950239a1a6c5232c152cec94ff", "extra_info": null, "node_info": {"start": 0, "end": 755, "_node_type": "1"}, "relationships": {"1": "9ae2fa74-e356-4924-b0af-803b945fbb47"}}, "__type__": "1"}, "f4cf72d3-2917-4d79-aac6-a9885f350ee0": {"__data__": {"text": "\n\nUse the Aptos NFT Minting Tool\n\nThe Aptos Non-Fungible Token (NFT) Minting Tool allows NFT creators to upload assets, create NFT collections and run mint sites. This document explains how to launch an NFT project with the CLI and get the mint site up and running. The tool can be found in this GitHub repo.\n\n> This tool is tested on Mac, yet it should work on Linux and Windows Subsystem for Linux (WSL) too.\n\n", "doc_id": "f4cf72d3-2917-4d79-aac6-a9885f350ee0", "embedding": null, "doc_hash": "7ec743f4cac4b1aa20134dd7df7ad603e5528e5e773bbcf02de00f570cadaa4c", "extra_info": null, "node_info": {"start": 0, "end": 412, "_node_type": "1"}, "relationships": {"1": "b3ba0163-1fcb-408e-9658-1a0450dc8e5c"}}, "__type__": "1"}, "5fad983a-6a4f-40f3-a441-cf9de7aa6f23": {"__data__": {"text": "\n\nSetup\n\n", "doc_id": "5fad983a-6a4f-40f3-a441-cf9de7aa6f23", "embedding": null, "doc_hash": "283da8da80543a1e35ae0ecb3cc56367c5d0b7a002eec31343e95d84f2d37691", "extra_info": null, "node_info": {"start": 0, "end": 9, "_node_type": "1"}, "relationships": {"1": "14f3cfb8-6ce9-42b4-bd12-82a96a5547c2"}}, "__type__": "1"}, "80330b9c-e34b-4c52-a24c-83da4b4612af": {"__data__": {"text": "\n\nConfirm or install Node and NPM\n\nNode is required to run the Minting Tool CLI. If `nodejs` is not available on your operating system, make sure to install that first.\n\n", "doc_id": "80330b9c-e34b-4c52-a24c-83da4b4612af", "embedding": null, "doc_hash": "e3f9458ee76735e864328929939d4048341a5ba0e216385d54e6e95cb22c73b1", "extra_info": null, "node_info": {"start": 0, "end": 170, "_node_type": "1"}, "relationships": {"1": "011bdff6-b17e-4059-8edf-cffaadaec0ab"}}, "__type__": "1"}, "2264bf48-3885-4400-9713-f380a67943ab": {"__data__": {"text": "\n\nInstall Aptos CLI\n\nInstall the Aptos CLI. The Aptos CLI is needed for compiling and deploying the minting contract.\n\n", "doc_id": "2264bf48-3885-4400-9713-f380a67943ab", "embedding": null, "doc_hash": "a8a0b44bcf6f162c6774522e25c93fa063d10869b5373d0d83e3173d5f1677f8", "extra_info": null, "node_info": {"start": 0, "end": 119, "_node_type": "1"}, "relationships": {"1": "2516f765-68d1-4eb7-b95c-cc16aefaed3b"}}, "__type__": "1"}, "570e5d6c-079d-4b74-82be-db7433308e8d": {"__data__": {"text": "\n\nConfigure Aptos account\n\nThe minting tool needs to locate your Aptos CLI profile from your user\u2019s home folder. Run the following command after downloading Aptos CLI to make the CLI write and read config files in your user\u2019s home folder:\n\n```shell\naptos config set-global-config --config-type global\n```\n\nCreate a new CLI profile for the NFT minting. Make sure that you choose `testnet` or `mainnet`. The `devnet` network is not supported.\n\nIf you want to reuse the existing account that you generated in Petra Wallet or other wallets, provide the private key of the account when prompted:\n\n```shell\naptos init --profile nft_mint\n```\n\nNow `nft_mint` is your user profile name.\n\n", "doc_id": "570e5d6c-079d-4b74-82be-db7433308e8d", "embedding": null, "doc_hash": "a36fcb9286fb45979da82c9edc7b47cc4580ad56ec4187141c4f453b1dac4c43", "extra_info": null, "node_info": {"start": 0, "end": 679, "_node_type": "1"}, "relationships": {"1": "74cd6bf9-3950-4085-b298-b9d04786269d"}}, "__type__": "1"}, "05e36b61-b374-4781-b6a5-0e4e5396c2dd": {"__data__": {"text": "\n\nGet the minting tool\n\n1. Download the latest Aptos NFT Minting Tool aptos-mint Tar gzip file.\n2. Install the Aptos NFT Minting Tool with: `npm install -g /aptos-mint-v0.0.1.tgz`\n3. Verify the tool is installed correctly by running this command and receiving a version number: `aptos-mint --version`\n\n", "doc_id": "05e36b61-b374-4781-b6a5-0e4e5396c2dd", "embedding": null, "doc_hash": "956b24d917450f57b5994295c53c663ada15b9c4ce04caa2fa02e4a577933b8a", "extra_info": null, "node_info": {"start": 0, "end": 302, "_node_type": "1"}, "relationships": {"1": "4a9c965a-3cc2-4473-b6d1-58ab13fa061a"}}, "__type__": "1"}, "2f8c678b-2a62-44da-9c31-4d29cdbb2acf": {"__data__": {"text": "\n\nCreate the first NFT collection\n\n", "doc_id": "2f8c678b-2a62-44da-9c31-4d29cdbb2acf", "embedding": null, "doc_hash": "9d07cef1a90c867e840c1f14d9173812c93b7d4220b94901a8bf8ab62f8f6561", "extra_info": null, "node_info": {"start": 0, "end": 35, "_node_type": "1"}, "relationships": {"1": "b4a7fd35-f20c-4430-9ffd-4a050514b6b6"}}, "__type__": "1"}, "0ed4590e-9535-49cb-9733-3b8531938295": {"__data__": {"text": "\n\nPrepare the assets\n\nThe most popular tool for generating NFT assets is `HashLips`. You can generate NFT assets with `HashLips` or another tool of your choosing. The `aptos-mint` command works with the images and metadata generated by `HashLips` out of the box.\n\nTo make it easy to follow along, we uploaded sample assets to hashlips_assets.zip.\n\nDownload the assets and decompress the compressed file.\n\nThe metadata format we need is as simple as the following:\n\n```shell\n{ \"attributes\": [ { \"trait_type\": \"Background\", \"value\": \"Black\" }, { \"trait_type\": \"Eyeball\", \"value\": \"Red\" } ] }\n```\n\nNote: Other fields from `HashLips` are ignored.\n\nEach NFT should have a separate metadata file in JSON format. All NFT metadata files need to be placed within a directory (folder) named `json`. All NFT asset files need to be placed within another directory named `images`. The `json` and `images` directories need to be under the same parent directory, like so:\n\n```\nnft_assets/\n\u251c\u2500 images/\n\u2502 \u251c\u2500 1.png\n\u2502 \u251c\u2500 2.png\n\u2502 \u251c\u2500 3.png\n\u2502 \u251c\u2500 ...\n\u251c\u2500 json/\n\u2502 \u251c\u2500 1.json\n\u2502 \u251c\u2500 2.json\n\u2502 \u251c\u2500 ...\n```\n\nEach pair of image and metadata files represent an NFT. E.g. `1.png` and `1.json` in the above example are the asset and metadata files of the first NFT.\n\n", "doc_id": "0ed4590e-9535-49cb-9733-3b8531938295", "embedding": null, "doc_hash": "bb5763e85e7e05bf333ea43286e0ff9d25bcc5b91c05d693cb29ace3131242fd", "extra_info": null, "node_info": {"start": 0, "end": 1229, "_node_type": "1"}, "relationships": {"1": "0a30dfb4-5906-44fb-9c7e-f20f658e54b6"}}, "__type__": "1"}, "d06652d4-a693-4457-82f7-72b4ff5789d3": {"__data__": {"text": "\n\nCreate an NFT project\n\n1. Create a project called `test` with the command: `aptos-mint init --name test --asset-path `\nNote: Set the `public_minting_start_time` to be a couple of minutes later to give the tool enough time to add tokens into the collection.\n2. Change your current directory to `test` with the command: `cd test`\n\n", "doc_id": "d06652d4-a693-4457-82f7-72b4ff5789d3", "embedding": null, "doc_hash": "c671847c9d23810cb9f86d15c69980637e9fdd6ffe6059f3d6616323fc7276d4", "extra_info": null, "node_info": {"start": 0, "end": 331, "_node_type": "1"}, "relationships": {"1": "36cb1b30-1263-4004-a485-b18af7da0118"}}, "__type__": "1"}, "5fc00aa9-796a-4cd8-b0ed-729bee6fc669": {"__data__": {"text": "\n\nCompile and publish the smart contract\n\nFrom the `test` directory, run the command: `aptos-mint publish-contract --profile nft_mint`.\n\n", "doc_id": "5fc00aa9-796a-4cd8-b0ed-729bee6fc669", "embedding": null, "doc_hash": "a6f7962aa0140ab9032ec4d90da37058809ebdfaa5299f81cd04ac473a5aff40", "extra_info": null, "node_info": {"start": 0, "end": 137, "_node_type": "1"}, "relationships": {"1": "ed2d2b84-3fef-4cf6-b5c6-bdbcef419768"}}, "__type__": "1"}, "333a4df7-137a-4465-a950-363ef209c338": {"__data__": {"text": "\n\nFund the storage service\n\nTo upload assets to Arweave, we need to purchase credits. Bundlr makes the process easier. We need to fund the Bundlr service before we can upload assets.\n\n1. Fund Bundlr with `aptos-mint fund --profile nft_mint --amount 10000000`\n2. Check the balance with: `aptos-mint balance --profile nft_mint`\n\n", "doc_id": "333a4df7-137a-4465-a950-363ef209c338", "embedding": null, "doc_hash": "caa3c8cc37e873f19e17538b57d77354dac5b523f4fde29efbbaab96a7a27381", "extra_info": null, "node_info": {"start": 0, "end": 327, "_node_type": "1"}, "relationships": {"1": "4d0907c6-b3ae-4b90-983b-ca2bc70b4703"}}, "__type__": "1"}, "89853f0a-f795-4442-8b8e-5d85844c1b06": {"__data__": {"text": "\n\nUpload the assets\n\nOnce again in the `test` directory, run this command to upload assets: `aptos-mint upload --profile nft_mint`\n\n", "doc_id": "89853f0a-f795-4442-8b8e-5d85844c1b06", "embedding": null, "doc_hash": "388a4e27777444bbeed4f7ff5a914f87939a1991d72e14ec23c1047cc6a79b73", "extra_info": null, "node_info": {"start": 0, "end": 132, "_node_type": "1"}, "relationships": {"1": "8e870653-474a-44b5-8167-cd131017b377"}}, "__type__": "1"}, "d99ed4ff-1f08-4375-afe3-042be5f318fe": {"__data__": {"text": "\n\n**Run the minting website**\n\nNow you can run the minting site and start minting NFTs.\n\n1. Get the minting site code from GitHub.\n2. Change the current directory to the minting site folder and run: `npm install`\n3. Run the following command, updating `REACT_APP_MINTING_CONTRACT` with the correct resource account address and `REACT_APP_NODE_URL` with the correct fullnode URL:\n\n   ```shell\n   REACT_APP_MINTING_CONTRACT=\"\" REACT_APP_NODE_URL=\"\" npm run start\n   ```\n\n   The account address needs to be prefixed with `0x` and can be found in `/config.json` by key `contractAddress`. The `REACT_APP_NODE_URL` for testnet is `https://fullnode.testnet.aptoslabs.com` and for mainnet `https://fullnode.mainnet.aptoslabs.com`.\n\n   Then visit the minting site at: http://localhost:3000\n\n   Mint away!\n\n", "doc_id": "d99ed4ff-1f08-4375-afe3-042be5f318fe", "embedding": null, "doc_hash": "d4fa8fe2e2ae79e3c5da8a930badbf4a56796ef0c9e0ee6b5a15da352d2c77cf", "extra_info": null, "node_info": {"start": 0, "end": 797, "_node_type": "1"}, "relationships": {"1": "69a7e25a-4896-47d6-92ad-1a02bd0dd7f3"}}, "__type__": "1"}, "2458b51e-04a6-460f-bf4f-20d667d523a7": {"__data__": {"text": "\n\nNode Files For Devnet\n\nWhen you are deploying an Aptos node in the **devnet**, you will need to download the files listed on this page. \n\n- **Mainnet:** If you are deploying in the mainnet, download the files from the Node Files For Mainnet page.\n- **Testnet:** If you are deploying in the testnet, download the files from the Node Files For Testnet page.\n\n---\n\nThese files can be downloaded from separate `aptos-labs` repos on GitHub. The `wget` commands provided below will work on macOS and Linux. Open a terminal and paste the `wget` command to download the file. \n\n:::tip Files for the validator node\nUnless specified, all these files are required for validator node. A file with `fullnode` in its filename is required for either a validator fullnode or a public fullnode.\n:::\n\n", "doc_id": "2458b51e-04a6-460f-bf4f-20d667d523a7", "embedding": null, "doc_hash": "80ba9ff72db1266f156ae885979dfd8721fd7420fcde0abc646b2d113315218e", "extra_info": null, "node_info": {"start": 0, "end": 785, "_node_type": "1"}, "relationships": {"1": "8bc2ad6b-713c-46df-ac49-34b95d5ae24d"}}, "__type__": "1"}, "eff62522-ab69-4f8b-8129-32d9fcbdfd64": {"__data__": {"text": "\n\ndocker-compose.yaml\n\n- **Git repo:** `aptos-core`\n- **Git branch:** `devnet` on https://github.com/aptos-labs/aptos-core\n- **Command to download:**\n    ```bash\n    wget -O docker-compose.yaml https://raw.githubusercontent.com/aptos-labs/aptos-core/devnet/docker/compose/aptos-node/docker-compose.yaml\n    ```\n\n", "doc_id": "eff62522-ab69-4f8b-8129-32d9fcbdfd64", "embedding": null, "doc_hash": "ec193222205e08274ac54f92cb2e7abaa0096db929ccdc985c678ae0f1c4eaff", "extra_info": null, "node_info": {"start": 0, "end": 312, "_node_type": "1"}, "relationships": {"1": "c3819dcd-7312-4ffc-8b2f-c6f0b47ad3de"}}, "__type__": "1"}, "6869dc04-d165-4d88-83a1-33cde89fa3ff": {"__data__": {"text": "\n\nvalidator.yaml\n\n- **Git repo:** `aptos-core`\n- **Git branch:** `devnet` on https://github.com/aptos-labs/aptos-core\n- **Command to download:**\n  ```bash\n  wget -O validator.yaml https://raw.githubusercontent.com/aptos-labs/aptos-core/devnet/docker/compose/aptos-node/validator.yaml\n  ```\n\n", "doc_id": "6869dc04-d165-4d88-83a1-33cde89fa3ff", "embedding": null, "doc_hash": "04070817e181d5771768043c86e6b30fbede9719f726c5bd6d572ef309b83300", "extra_info": null, "node_info": {"start": 0, "end": 291, "_node_type": "1"}, "relationships": {"1": "e18c450a-f356-44ab-b18e-df2a0c06e1a7"}}, "__type__": "1"}, "1087aad5-b857-446d-b53c-8a2d104428d9": {"__data__": {"text": "\n\ngenesis.blob\n\n- **Git repo:** `aptos-networks`\n- **Git branch:** `main` on https://github.com/aptos-labs/aptos-networks\n- **Command to download:**\n  ```bash\n  wget -O genesis.blob https://raw.githubusercontent.com/aptos-labs/aptos-networks/main/devnet/genesis.blob\n  ```\n\n", "doc_id": "1087aad5-b857-446d-b53c-8a2d104428d9", "embedding": null, "doc_hash": "c91dd74f88ff2b2a98b17cb3927907f9e3b6585e7d77c271e28fc5cfadd7c592", "extra_info": null, "node_info": {"start": 0, "end": 274, "_node_type": "1"}, "relationships": {"1": "d85c347b-0f2c-4487-b0fb-5ff0af1e0efe"}}, "__type__": "1"}, "c66226e5-5e25-40cd-8c54-d5ca6c62f77e": {"__data__": {"text": "\n\nwaypoint.txt\n\n- **Git repo:** `aptos-networks`\n- **Git branch:** `main` on https://github.com/aptos-labs/aptos-networks\n- **Command to download:**\n  ```bash\n  wget -O waypoint.txt https://raw.githubusercontent.com/aptos-labs/aptos-networks/main/devnet/waypoint.txt\n  ```\n\n", "doc_id": "c66226e5-5e25-40cd-8c54-d5ca6c62f77e", "embedding": null, "doc_hash": "0fb45a9f9d1719c5f1509b28f19b2dcd433fca8f8dd2a2a5a7db1a52dc39e2b5", "extra_info": null, "node_info": {"start": 0, "end": 274, "_node_type": "1"}, "relationships": {"1": "598665dc-fe6a-480e-855e-52a42d70f418"}}, "__type__": "1"}, "d8a1bf80-86c3-430d-9a5b-c33f1bed64d4": {"__data__": {"text": "\n\ndocker-compose-src.yaml\n\n- **Git repo:** `aptos-core`\n- **Git branch:** `devnet` on https://github.com/aptos-labs/aptos-core\n- **Command to download:**\n  ```bash\n  wget -O docker-compose-src.yaml https://raw.githubusercontent.com/aptos-labs/aptos-core/devnet/docker/compose/aptos-node/docker-compose-src.yaml\n  ```\n\n", "doc_id": "d8a1bf80-86c3-430d-9a5b-c33f1bed64d4", "embedding": null, "doc_hash": "2aa651c3c77ebba7932003f34ad73e740f7ef0eca0f585c9c613b01575cebc3d", "extra_info": null, "node_info": {"start": 0, "end": 318, "_node_type": "1"}, "relationships": {"1": "71915d38-8ab5-4dda-9ae6-a84a5eb96c1a"}}, "__type__": "1"}, "2f8a9a04-886a-442b-b648-79729db13a49": {"__data__": {"text": "\n\nhaproxy.cfg\n\n- **Git repo:** `aptos-core`\n- **Git branch:** `devnet` on https://github.com/aptos-labs/aptos-core\n- **Command to download:**\n  ```bash\n  wget -O haproxy.cfg https://raw.githubusercontent.com/aptos-labs/aptos-core/devnet/docker/compose/aptos-node/haproxy.cfg\n  ```\n\n", "doc_id": "2f8a9a04-886a-442b-b648-79729db13a49", "embedding": null, "doc_hash": "33c865850c3f1e090ec2a5d62ea83819222cf9f0b04dbd3acec59974249a5191", "extra_info": null, "node_info": {"start": 0, "end": 282, "_node_type": "1"}, "relationships": {"1": "ea0191da-d553-4f7b-9fbf-8dfb4d4924c4"}}, "__type__": "1"}, "7446c5b2-a712-4ee3-86f8-5fd3789c3656": {"__data__": {"text": "\n\nblocked.ips\n\n- **Git repo:** `aptos-core`\n- **Git branch:** `devnet` on https://github.com/aptos-labs/aptos-core\n- **Command to download:**\n  ```bash\n  wget -O blocked.ips https://raw.githubusercontent.com/aptos-labs/aptos-core/devnet/docker/compose/aptos-node/blocked.ips\n  ```\n\n", "doc_id": "7446c5b2-a712-4ee3-86f8-5fd3789c3656", "embedding": null, "doc_hash": "6972b81c2a8c47d6c2f9f12fe57eb111b3135017fb80c3c16b9bc5483f679da1", "extra_info": null, "node_info": {"start": 0, "end": 282, "_node_type": "1"}, "relationships": {"1": "9acde764-9cfd-485a-a46f-b33d37ef7853"}}, "__type__": "1"}, "6b922572-6aa7-4efd-926a-972c35947ae5": {"__data__": {"text": "\n\ndocker-compose-fullnode.yaml (fullnode only)\n\n:::tip Fullnode \nFullnode means either a validator fullnode or a public fullnode.\n:::\n\n- **Git repo:** `aptos-core`\n- **Git branch:** `devnet` on https://github.com/aptos-labs/aptos-core\n- **Command to download:**\n  ```bash\n  wget -O docker-compose-fullnode.yaml https://raw.githubusercontent.com/aptos-labs/aptos-core/devnet/docker/compose/aptos-node/docker-compose-fullnode.yaml\n  ```\n\n", "doc_id": "6b922572-6aa7-4efd-926a-972c35947ae5", "embedding": null, "doc_hash": "d00f1b95f0f816c82a77f088d15ed0119a738e9f475377108497bf395ce7233e", "extra_info": null, "node_info": {"start": 0, "end": 436, "_node_type": "1"}, "relationships": {"1": "f43c9e5b-9548-4768-9bd3-0219d845256d"}}, "__type__": "1"}, "3b2fc13a-cbb3-4563-a7e6-b4917c12a4a9": {"__data__": {"text": "\n\nfullnode.yaml (fullnode only)\n\n:::tip Fullnode \nFullnode means either a validator fullnode or a public fullnode.\n:::\n\n- **Git repo:** `aptos-core`\n- **Git branch:** `devnet` on https://github.com/aptos-labs/aptos-core\n- **Command to download:**\n  ```bash\n  wget -O fullnode.yaml https://raw.githubusercontent.com/aptos-labs/aptos-core/devnet/docker/compose/aptos-node/fullnode.yaml\n  ```\n\n", "doc_id": "3b2fc13a-cbb3-4563-a7e6-b4917c12a4a9", "embedding": null, "doc_hash": "61001facb8e6b9fb82dcce1b352ae693ec9d385584e76f932f461861e6bd43bd", "extra_info": null, "node_info": {"start": 0, "end": 391, "_node_type": "1"}, "relationships": {"1": "ad3d4f9d-55a6-4d00-9df0-31b0d73c5054"}}, "__type__": "1"}, "05f9294e-5e43-4da2-8679-8713989b96ee": {"__data__": {"text": "\n\nhaproxy-fullnode.cfg (fullnode only)\n\n- **Git repo:** `aptos-core`\n- **Git branch:** `devnet` on https://github.com/aptos-labs/aptos-core\n- **Command to download:**\n  ```bash\n  wget -O haproxy-fullnode.cfg https://raw.githubusercontent.com/aptos-labs/aptos-core/devnet/docker/compose/aptos-node/haproxy-fullnode.cfg\n  ```\n\n", "doc_id": "05f9294e-5e43-4da2-8679-8713989b96ee", "embedding": null, "doc_hash": "02e0d3515abe43c6f2303cdcef337f741ac2f410c6bfdb612be4a4906956ca4f", "extra_info": null, "node_info": {"start": 0, "end": 325, "_node_type": "1"}, "relationships": {"1": "75d2a9f0-c2f4-4893-b9dc-459173ec6c74"}}, "__type__": "1"}, "8acfb888-9850-4748-a761-231f7567824a": {"__data__": {"text": "\n\nNode Files For Testnet\n\nWhen you are deploying an Aptos node in the **testnet**, you will need to download the files listed on this page. \n\n- **Mainnet:** If you are deploying in the mainnet, download the files from the Node Files For Mainnet page.\n- **Devnet:** If you are deploying in the testnet, download the files from the Node Files For Devnet page.\n\n---\n\nThese files can be downloaded from separate `aptos-labs` repos on GitHub. The `wget` commands provided below will work on macOS and Linux. Open a terminal and paste the `wget` command to download the file. \n\n:::tip Files for the validator node\nUnless specified, all these files are required for validator node. A file with `fullnode` in its filename is required for either a validator fullnode or a public fullnode.\n:::\n\n", "doc_id": "8acfb888-9850-4748-a761-231f7567824a", "embedding": null, "doc_hash": "e9236e8de7f1068af3ad45f539970d4743f5c731cfa614a4eafb9fd9f952bd58", "extra_info": null, "node_info": {"start": 0, "end": 785, "_node_type": "1"}, "relationships": {"1": "abf08165-c48a-4a1a-9d40-abfd5425497f"}}, "__type__": "1"}, "be7fbdbd-bad4-475e-8374-99b6467c20c8": {"__data__": {"text": "\n\ndocker-compose.yaml\n\n- **Git repo:** `aptos-core`\n- **Git branch:** `testnet` on https://github.com/aptos-labs/aptos-core\n- **Command to download:**\n    ```bash\n    wget -O docker-compose.yaml https://raw.githubusercontent.com/aptos-labs/aptos-core/testnet/docker/compose/aptos-node/docker-compose.yaml\n    ```\n\n", "doc_id": "be7fbdbd-bad4-475e-8374-99b6467c20c8", "embedding": null, "doc_hash": "f98aa1fef3d9f39686531306b43c5ccedd6ea1af36898ac51084eaab1ae22ab0", "extra_info": null, "node_info": {"start": 0, "end": 314, "_node_type": "1"}, "relationships": {"1": "783b95d7-80d2-4135-bb5d-24de0a9be358"}}, "__type__": "1"}, "bcc37fba-23d6-4757-9649-7a16250a13b4": {"__data__": {"text": "\n\nvalidator.yaml\n\n- **Git repo:** `aptos-core`\n- **Git branch:** `testnet` on https://github.com/aptos-labs/aptos-core\n- **Command to download:**\n  ```bash\n  wget -O validator.yaml https://raw.githubusercontent.com/aptos-labs/aptos-core/testnet/docker/compose/aptos-node/validator.yaml\n  ```\n\n", "doc_id": "bcc37fba-23d6-4757-9649-7a16250a13b4", "embedding": null, "doc_hash": "07245dd40b3e807c8ceef495d3d8b26e87e1b41ce4e355d3a50c7dba9ff0ec4a", "extra_info": null, "node_info": {"start": 0, "end": 293, "_node_type": "1"}, "relationships": {"1": "6171ba39-e2d2-4a28-aab0-c03c9ea66c76"}}, "__type__": "1"}, "f79d7c27-ec50-4dc4-84dd-7407dc46a75a": {"__data__": {"text": "\n\ngenesis.blob\n\n- **Git repo:** `aptos-networks`\n- **Git branch:** `main` on https://github.com/aptos-labs/aptos-networks\n- **Command to download:**\n  ```bash\n  wget -O genesis.blob https://raw.githubusercontent.com/aptos-labs/aptos-networks/main/testnet/genesis.blob\n  ```\n\n", "doc_id": "f79d7c27-ec50-4dc4-84dd-7407dc46a75a", "embedding": null, "doc_hash": "dfdc4d0d98ae91d1159b40020d32533ed5000362440655b15b735da603840d23", "extra_info": null, "node_info": {"start": 0, "end": 275, "_node_type": "1"}, "relationships": {"1": "2a3c4e0b-79a4-4f70-b264-4bddc3ebadab"}}, "__type__": "1"}, "7876f957-342d-4750-b4b7-1ac07f77ea67": {"__data__": {"text": "\n\nwaypoint.txt\n\n- **Git repo:** `aptos-networks`\n- **Git branch:** `main` on https://github.com/aptos-labs/aptos-networks\n- **Command to download:**\n  ```bash\n  wget -O waypoint.txt https://raw.githubusercontent.com/aptos-labs/aptos-networks/main/testnet/waypoint.txt\n  ```\n\n", "doc_id": "7876f957-342d-4750-b4b7-1ac07f77ea67", "embedding": null, "doc_hash": "7b75f00466bdcb4603ff7826e67ac9cb4aa708c1eb973ee94fdd89dbd282ca97", "extra_info": null, "node_info": {"start": 0, "end": 275, "_node_type": "1"}, "relationships": {"1": "5c045e2e-a7da-470d-aed9-b7731e44b275"}}, "__type__": "1"}, "0a4805d4-3ce1-41de-a5d0-8142efe9ce5e": {"__data__": {"text": "\n\ndocker-compose-src.yaml\n\n- **Git repo:** `aptos-core`\n- **Git branch:** `testnet` on https://github.com/aptos-labs/aptos-core\n- **Command to download:**\n  ```bash\n  wget -O docker-compose-src.yaml https://raw.githubusercontent.com/aptos-labs/aptos-core/testnet/docker/compose/aptos-node/docker-compose-src.yaml\n  ```\n\n", "doc_id": "0a4805d4-3ce1-41de-a5d0-8142efe9ce5e", "embedding": null, "doc_hash": "e1ad313526d8dc5150a53ebc713e6fc6aafbe38cfba37eb4e901b3ad9a813755", "extra_info": null, "node_info": {"start": 0, "end": 320, "_node_type": "1"}, "relationships": {"1": "b4aea5e0-0a83-4830-95d3-564957488e97"}}, "__type__": "1"}, "c3892144-7387-43d3-bb8b-38b3dc53c9d9": {"__data__": {"text": "\n\nhaproxy.cfg\n\n- **Git repo:** `aptos-core`\n- **Git branch:** `testnet` on https://github.com/aptos-labs/aptos-core\n- **Command to download:**\n  ```bash\n  wget -O haproxy.cfg https://raw.githubusercontent.com/aptos-labs/aptos-core/testnet/docker/compose/aptos-node/haproxy.cfg\n  ```\n\n", "doc_id": "c3892144-7387-43d3-bb8b-38b3dc53c9d9", "embedding": null, "doc_hash": "ecf1d7338e62d1bd991f2c80b245cca5e2ae679870678a5235a7c99a2c5f76aa", "extra_info": null, "node_info": {"start": 0, "end": 284, "_node_type": "1"}, "relationships": {"1": "3a429f4a-46cb-4b24-835f-46f829038141"}}, "__type__": "1"}, "18b7be6d-3183-4227-b3cd-4b90264a9b82": {"__data__": {"text": "\n\nblocked.ips\n\n- **Git repo:** `aptos-core`\n- **Git branch:** `testnet` on https://github.com/aptos-labs/aptos-core\n- **Command to download:**\n  ```bash\n  wget -O blocked.ips https://raw.githubusercontent.com/aptos-labs/aptos-core/testnet/docker/compose/aptos-node/blocked.ips\n  ```\n\n", "doc_id": "18b7be6d-3183-4227-b3cd-4b90264a9b82", "embedding": null, "doc_hash": "d0af9240b9fbdff41b1c7fbd79fd928af80deb4018066375b407c54c001f6633", "extra_info": null, "node_info": {"start": 0, "end": 284, "_node_type": "1"}, "relationships": {"1": "e3237477-2fc9-4c20-ada9-523625d7844d"}}, "__type__": "1"}, "3b53df2e-0387-41b7-a72a-acc22d7378c2": {"__data__": {"text": "\n\ndocker-compose-fullnode.yaml (fullnode only)\n\n:::tip Fullnode \nFullnode means either a validator fullnode or a public fullnode.\n:::\n\n- **Git repo:** `aptos-core`\n- **Git branch:** `testnet` on https://github.com/aptos-labs/aptos-core\n- **Command to download:**\n  ```bash\n  wget -O docker-compose-fullnode.yaml https://raw.githubusercontent.com/aptos-labs/aptos-core/testnet/docker/compose/aptos-node/docker-compose-fullnode.yaml\n  ```\n\n", "doc_id": "3b53df2e-0387-41b7-a72a-acc22d7378c2", "embedding": null, "doc_hash": "85672c6a1804f923ffa11651b69f156a5cec3428d54d81ec42fde7cd18fc04c3", "extra_info": null, "node_info": {"start": 0, "end": 438, "_node_type": "1"}, "relationships": {"1": "8d94f83c-51d4-4179-b048-4c4abc730459"}}, "__type__": "1"}, "e369744e-6776-48e5-97c3-663db652ab13": {"__data__": {"text": "\n\nfullnode.yaml (fullnode only)\n\n:::tip Fullnode \nFullnode means either a validator fullnode or a public fullnode.\n:::\n\n- **Git repo:** `aptos-core`\n- **Git branch:** `testnet` on https://github.com/aptos-labs/aptos-core\n- **Command to download:**\n  ```bash\n  wget -O fullnode.yaml https://raw.githubusercontent.com/aptos-labs/aptos-core/testnet/docker/compose/aptos-node/fullnode.yaml\n  ```\n\n", "doc_id": "e369744e-6776-48e5-97c3-663db652ab13", "embedding": null, "doc_hash": "3de07b8c293715563a4aba8a9d52af5b604b4c73c04781c93a422119d45e2425", "extra_info": null, "node_info": {"start": 0, "end": 393, "_node_type": "1"}, "relationships": {"1": "32f939e6-58ea-44a4-8363-42290a531852"}}, "__type__": "1"}, "04a8ba08-c4dd-4c5e-99db-7d836360565d": {"__data__": {"text": "\n\nhaproxy-fullnode.cfg (fullnode only)\n\n- **Git repo:** `aptos-core`\n- **Git branch:** `testnet` on https://github.com/aptos-labs/aptos-core\n- **Command to download:**\n  ```bash\n  wget -O haproxy-fullnode.cfg https://raw.githubusercontent.com/aptos-labs/aptos-core/testnet/docker/compose/aptos-node/haproxy-fullnode.cfg\n  ```\n\n", "doc_id": "04a8ba08-c4dd-4c5e-99db-7d836360565d", "embedding": null, "doc_hash": "3dd0abed5bb8f3dc5d74ce8a54bd08788b64080b536ee20dbd77a842224460a2", "extra_info": null, "node_info": {"start": 0, "end": 327, "_node_type": "1"}, "relationships": {"1": "73b3ffca-2f97-4c14-aa32-f616e7d15c74"}}, "__type__": "1"}, "8c550b07-d8e1-467f-a9e0-5531bd8e53f7": {"__data__": {"text": "\n\nNode Files For Mainnet\n\nWhen you are deploying an Aptos node in the **mainnet**, you will need to download the files listed on this page. \n\n- **Devnet:** If you are deploying in the devnet, download the files from the Node Files For Devnet page.\n- **Testnet:** If you are deploying in the testnet, download the files from the Node Files For Testnet page.\n\n---\n\nThese files can be downloaded from separate `aptos-labs` repos on GitHub. The `wget` commands provided below will work on macOS and Linux. Open a terminal and paste the `wget` command to download the file. \n\n:::tip Files for the validator node\nUnless specified, all these files are required for validator node. A file with `fullnode` in its filename is required for either a validator fullnode or a public fullnode.\n:::\n\n", "doc_id": "8c550b07-d8e1-467f-a9e0-5531bd8e53f7", "embedding": null, "doc_hash": "b1b6b2e893ee183546dbf3e449367928697681e7c46ea2bcc978f280e6e7a39c", "extra_info": null, "node_info": {"start": 0, "end": 784, "_node_type": "1"}, "relationships": {"1": "5aa3ec10-64d2-4134-a037-9dd0f46f6fe1"}}, "__type__": "1"}, "31a8178c-ce79-4355-b41f-c4cc23b47ce4": {"__data__": {"text": "\n\ndocker-compose.yaml\n\n- **Git repo:** `aptos-core`\n- **Git branch:** `mainnet` on https://github.com/aptos-labs/aptos-core\n- **Command to download:**\n    ```bash\n    wget -O docker-compose.yaml https://raw.githubusercontent.com/aptos-labs/aptos-core/mainnet/docker/compose/aptos-node/docker-compose.yaml\n    ```\n\n", "doc_id": "31a8178c-ce79-4355-b41f-c4cc23b47ce4", "embedding": null, "doc_hash": "b58968aacf248352d6538cb7e90c3c4a65111598f9e551788486808d9c81d339", "extra_info": null, "node_info": {"start": 0, "end": 314, "_node_type": "1"}, "relationships": {"1": "487f9f65-95ad-40e2-946f-5153420ccaa3"}}, "__type__": "1"}, "df1f27d0-32c4-4761-953c-af9df82d91c1": {"__data__": {"text": "\n\nvalidator.yaml\n\n- **Git repo:** `aptos-core`\n- **Git branch:** `mainnet` on https://github.com/aptos-labs/aptos-core\n- **Command to download:**\n  ```bash\n  wget -O validator.yaml https://raw.githubusercontent.com/aptos-labs/aptos-core/mainnet/docker/compose/aptos-node/validator.yaml\n  ```\n\n", "doc_id": "df1f27d0-32c4-4761-953c-af9df82d91c1", "embedding": null, "doc_hash": "9b9c510b9c52b2dc38b90f85550588ee543d32b2508efdde86f5138375f808a3", "extra_info": null, "node_info": {"start": 0, "end": 293, "_node_type": "1"}, "relationships": {"1": "be23b5d3-908e-493b-8058-1b1b5d78d29d"}}, "__type__": "1"}, "1296455e-7a70-4b1b-bc77-05c93f8767a8": {"__data__": {"text": "\n\ngenesis.blob\n\n- **Git repo:** `aptos-networks`\n- **Git branch:** `main` on https://github.com/aptos-labs/aptos-networks\n- **Command to download:**\n  ```bash\n  wget -O genesis.blob https://raw.githubusercontent.com/aptos-labs/aptos-networks/main/mainnet/genesis.blob\n  ```\n\n", "doc_id": "1296455e-7a70-4b1b-bc77-05c93f8767a8", "embedding": null, "doc_hash": "011e08f83690fe21e9077318a514bfce7cca83f83a2e7c224e3f3a9b1827da8c", "extra_info": null, "node_info": {"start": 0, "end": 275, "_node_type": "1"}, "relationships": {"1": "9acf9d41-5091-4b66-aec8-35139d4032e5"}}, "__type__": "1"}, "9da93de3-f56e-4c8c-b579-684ec6454c69": {"__data__": {"text": "\n\nwaypoint.txt\n\n- **Git repo:** `aptos-networks`\n- **Git branch:** `main` on https://github.com/aptos-labs/aptos-networks\n- **Command to download:**\n  ```bash\n  wget -O waypoint.txt https://raw.githubusercontent.com/aptos-labs/aptos-networks/main/mainnet/waypoint.txt\n  ```\n\n", "doc_id": "9da93de3-f56e-4c8c-b579-684ec6454c69", "embedding": null, "doc_hash": "978cee9b92429a9649de84a07b9f79540f1c8c5e4b447e941a58e081b04523e4", "extra_info": null, "node_info": {"start": 0, "end": 275, "_node_type": "1"}, "relationships": {"1": "8cdd5abb-7ffe-4521-9b39-326a0dd732ed"}}, "__type__": "1"}, "f67acbc9-4790-4188-8e14-98f480111c19": {"__data__": {"text": "\n\ndocker-compose-src.yaml\n\n- **Git repo:** `aptos-core`\n- **Git branch:** `mainnet` on https://github.com/aptos-labs/aptos-core\n- **Command to download:**\n  ```bash\n  wget -O docker-compose-src.yaml https://raw.githubusercontent.com/aptos-labs/aptos-core/mainnet/docker/compose/aptos-node/docker-compose-src.yaml\n  ```\n\n", "doc_id": "f67acbc9-4790-4188-8e14-98f480111c19", "embedding": null, "doc_hash": "5249a98fae4126f228ad7eb26be4f9483a495c6d0b2fe4077c3e5dc32602a76c", "extra_info": null, "node_info": {"start": 0, "end": 320, "_node_type": "1"}, "relationships": {"1": "26e4c87e-6c25-4db0-b675-f309ef19af28"}}, "__type__": "1"}, "01f03347-89f9-4b11-9135-3d55706316fb": {"__data__": {"text": "\n\nhaproxy.cfg\n\n- **Git repo:** `aptos-core`\n- **Git branch:** `mainnet` on https://github.com/aptos-labs/aptos-core\n- **Command to download:**\n  ```bash\n  wget -O haproxy.cfg https://raw.githubusercontent.com/aptos-labs/aptos-core/mainnet/docker/compose/aptos-node/haproxy.cfg\n  ```\n\n", "doc_id": "01f03347-89f9-4b11-9135-3d55706316fb", "embedding": null, "doc_hash": "6e8e1e75fa1a10046dedbeba6a8e2dc1e52390ce690d7decb903d02ed9eae8b8", "extra_info": null, "node_info": {"start": 0, "end": 284, "_node_type": "1"}, "relationships": {"1": "59c07f44-38ec-4856-8fbe-20fe9a47295e"}}, "__type__": "1"}, "b706c660-b8eb-401d-9839-74ecaf5080ab": {"__data__": {"text": "\n\nblocked.ips\n\n- **Git repo:** `aptos-core`\n- **Git branch:** `mainnet` on https://github.com/aptos-labs/aptos-core\n- **Command to download:**\n  ```bash\n  wget -O blocked.ips https://raw.githubusercontent.com/aptos-labs/aptos-core/mainnet/docker/compose/aptos-node/blocked.ips\n  ```\n\n", "doc_id": "b706c660-b8eb-401d-9839-74ecaf5080ab", "embedding": null, "doc_hash": "527d045eaa15552234e9355b123601d9a3f6738726af5ec0a0178197e37ceea9", "extra_info": null, "node_info": {"start": 0, "end": 284, "_node_type": "1"}, "relationships": {"1": "98782230-b88e-47e2-8684-38b34c97269f"}}, "__type__": "1"}, "2b67e6a2-476d-4f1a-8611-b1aa7f28f4a5": {"__data__": {"text": "\n\ndocker-compose-fullnode.yaml (fullnode only)\n\n:::tip Fullnode \nFullnode means either a validator fullnode or a public fullnode.\n:::\n\n- **Git repo:** `aptos-core`\n- **Git branch:** `mainnet` on https://github.com/aptos-labs/aptos-core\n- **Command to download:**\n  ```bash\n  wget -O docker-compose-fullnode.yaml https://raw.githubusercontent.com/aptos-labs/aptos-core/mainnet/docker/compose/aptos-node/docker-compose-fullnode.yaml\n  ```\n\n", "doc_id": "2b67e6a2-476d-4f1a-8611-b1aa7f28f4a5", "embedding": null, "doc_hash": "12b889dd4238b27f5a7b9edeb613d23ec548476a0822e2d17ebd7060f4b44cc8", "extra_info": null, "node_info": {"start": 0, "end": 438, "_node_type": "1"}, "relationships": {"1": "5838f44a-ddee-49b8-acbd-df04788be029"}}, "__type__": "1"}, "115b00d0-9e53-43d9-8a47-0e274be8b662": {"__data__": {"text": "\n\nfullnode.yaml (fullnode only)\n\n:::tip Fullnode \nFullnode means either a validator fullnode or a public fullnode.\n:::\n\n- **Git repo:** `aptos-core`\n- **Git branch:** `mainnet` on https://github.com/aptos-labs/aptos-core\n- **Command to download:**\n  ```bash\n  wget -O fullnode.yaml https://raw.githubusercontent.com/aptos-labs/aptos-core/mainnet/docker/compose/aptos-node/fullnode.yaml\n  ```\n\n", "doc_id": "115b00d0-9e53-43d9-8a47-0e274be8b662", "embedding": null, "doc_hash": "19c6dcb2245f00cfc1ecdd1671fb5df98db8cde1659b667997824c93128c9c1a", "extra_info": null, "node_info": {"start": 0, "end": 393, "_node_type": "1"}, "relationships": {"1": "9e195151-c337-4ac6-918e-b030e39f2b09"}}, "__type__": "1"}, "746d8951-770d-4b7f-ab61-4dc3f8578065": {"__data__": {"text": "\n\nhaproxy-fullnode.cfg (fullnode only)\n\n- **Git repo:** `aptos-core`\n- **Git branch:** `mainnet` on https://github.com/aptos-labs/aptos-core\n- **Command to download:**\n  ```bash\n  wget -O haproxy-fullnode.cfg https://raw.githubusercontent.com/aptos-labs/aptos-core/mainnet/docker/compose/aptos-node/haproxy-fullnode.cfg\n  ```\n\n", "doc_id": "746d8951-770d-4b7f-ab61-4dc3f8578065", "embedding": null, "doc_hash": "0a6ce99c9bcb15e521ebfba1a118cbdd9d0d8fa7e6b963f4af803b26f59095cf", "extra_info": null, "node_info": {"start": 0, "end": 327, "_node_type": "1"}, "relationships": {"1": "6a358fc5-8748-4cf2-840e-906d71a12939"}}, "__type__": "1"}, "40789b85-d04f-4c08-9af7-8632cd1b0622": {"__data__": {"text": "\n\nNode Health Checker FAQ\n\nThe Aptos Node Health Checker (NHC) service can be used to check the health of your node(s). See Node Health Checker for full documentation on the NHC.\n\nThe purpose of this FAQ is to help you understand why your node did not pass a particular health check when you ran NHC for it. If you didn't find the information you wanted in this FAQ, open an issue, or open a PR and add the information yourself.\n\n", "doc_id": "40789b85-d04f-4c08-9af7-8632cd1b0622", "embedding": null, "doc_hash": "1923123e4385436c59fc79adf5a38fd415a3ba2926655c5127ab26746c70d616", "extra_info": null, "node_info": {"start": 0, "end": 430, "_node_type": "1"}, "relationships": {"1": "d15e8283-af52-43f2-a091-7bd3a7636882"}}, "__type__": "1"}, "6ea5644b-6c63-4087-aef6-69ceb33d4e15": {"__data__": {"text": "\n\nHow does the latency evaluator work?\n\nYou are likely here because you were given an NHC evaluation result like this:\n\n```\nAverage latency too high: The average latency was 1216ms, which is higher than the maximum allowed latency of 1000ms.\n```\n\nWhile the NHC reports 1216ms above, when you `ping` you might see a latency like 600ms. This difference is because when you `ping` an IP, the result you see is a single round trip (where the latency is the round trip time (RTT)). On the other hand, the NHC latency test will a request to the API running on your node. In effect, this means that the NHC will time 2 round trips, because it does the following:\n\n1. SYN\n2. SYNACK\n3. ACK + Send HTTP request\n4. Receive HTTP response\n\ni.e., the NHC must do a TCP handshake (one round trip) and then make an HTTP request (second round trip).\n\nThe reason the NHC uses the latency evaluator is to ensure that we can maintain good network performance. In particular, if the latency to your node is too high, it will result in a low TPS and high time to finality, both of which are very important to running a highly performant L1 blockchain. **If you receive this error, you will need to try and improve the latency to your node. We have set high thresholds on this value with the understanding that nodes will be running all over the world**.\n\n", "doc_id": "6ea5644b-6c63-4087-aef6-69ceb33d4e15", "embedding": null, "doc_hash": "736a03c30df18130f6df988a8822ded925a28af832616a8ede467e5d6085ef71", "extra_info": null, "node_info": {"start": 0, "end": 1333, "_node_type": "1"}, "relationships": {"1": "24d10531-5681-4164-bc46-a2dc03f2f4c2"}}, "__type__": "1"}, "4b375220-97bc-4e9d-8ea0-cf237f2eb6bc": {"__data__": {"text": "\n\nNode Health Checker\n\nThe Aptos Node Health Checker (NHC) service can be used to check the health of the following Aptos node types:\n\n- Validator nodes.\n- Validator fullnodes, and\n- Public fullnodes.\n\nIf you are a node operator, use the NHC service to check if your node is running correctly. The NHC service evaluates your node's health by comparing against a baseline node configuration, and outputs the evaluation results.\n\nThe Aptos Node Health Checker now also supports fullnodes via a central web service with validator support on the way:\nhttps://nodetools.aptosfoundation.org/#/node_checker\n\nThis document describes how to run NHC locally when you are operating a node.\n\n", "doc_id": "4b375220-97bc-4e9d-8ea0-cf237f2eb6bc", "embedding": null, "doc_hash": "6743c81bd3f06bdb9d3147557f5f522b6e1791a3df83e77c7696e1db4d53bb0b", "extra_info": null, "node_info": {"start": 0, "end": 680, "_node_type": "1"}, "relationships": {"1": "9578c328-6bee-448e-8fb4-e14df0a5ac91"}}, "__type__": "1"}, "2a4af46c-6460-4871-92ad-bad9c873de27": {"__data__": {"text": "\n\nQuickstart\n\nBefore you get into the details of how NHC works, you can run the below steps to start the NHC service and send it a request. This quickstart uses a baseline configuration for a devnet fullnode, i.e., it will evaluate your node against a devnet fullnode that is configured with the baseline configuration YAML.\n\n**Important**: If your local node is not a devnet fullnode, you must use a different baseline config. See the configuration examples in aptos-core for other such example configs.\n\n", "doc_id": "2a4af46c-6460-4871-92ad-bad9c873de27", "embedding": null, "doc_hash": "031da213475b5a9cab663f15deca1ae6045a643125914b7ba96642f56386af84", "extra_info": null, "node_info": {"start": 0, "end": 506, "_node_type": "1"}, "relationships": {"1": "24d2f58b-3250-4107-96c0-14e9cf9fe3db"}}, "__type__": "1"}, "e5b5f6e5-deb6-4941-9f45-2b24d24fdb14": {"__data__": {"text": "\n\nStep 1: Download the baseline configuration YAML\n\nDownload a baseline configuration YAML file for a devnet fullnode. The below command will download the `devnet_fullnode.yaml` configuration file:\n\n```\nmkdir /tmp/nhc\ncd /tmp/nhc\nwget https://raw.githubusercontent.com/aptos-labs/aptos-core/main/ecosystem/node-checker/configuration_examples/devnet_fullnode.yaml\n```\n\n", "doc_id": "e5b5f6e5-deb6-4941-9f45-2b24d24fdb14", "embedding": null, "doc_hash": "096a04442ee58d0e25b8739961c6adc732c56b5db5259216d56f7e248ba4682c", "extra_info": null, "node_info": {"start": 0, "end": 368, "_node_type": "1"}, "relationships": {"1": "a535cc6b-b4d4-4c06-8ec2-4e457061630b"}}, "__type__": "1"}, "c7906b30-2775-4b2e-8c8a-7a2b3e83f7d1": {"__data__": {"text": "\n\nStep 2: Start the NHC service\n\nStart the NHC service by providing the above-downloaded `devnet_fullnode.yaml` baseline configuration YAML file:\n\n```\ndocker run -v /tmp/nhc:/nhc -p 20121:20121 -t aptoslabs/node-checker:nightly /usr/local/bin/aptos-node-checker server run --baseline-config-paths /nhc/devnet_fullnode.yaml\n```\n\n", "doc_id": "c7906b30-2775-4b2e-8c8a-7a2b3e83f7d1", "embedding": null, "doc_hash": "071e7069b728a8337087ba67e384640ec637965350349028bc378e198be83b01", "extra_info": null, "node_info": {"start": 0, "end": 328, "_node_type": "1"}, "relationships": {"1": "9cb0bd8c-1322-4e5f-a421-ac7dd4f5d718"}}, "__type__": "1"}, "5d0809a7-a295-4d48-a92f-41e2e5e5d584": {"__data__": {"text": "\n\nStep 3: Send a request to NHC service\n\nFinally, send a request to the NHC service you started above. The following command runs health checks of your node that is at `node_url=http://mynode.mysite.com` and compares these results with the node configured in the baseline configuration `devnet_fullnode`:\n\n```\ncurl 'http://localhost:20121/check?node_url=http://mynode.mysite.com&api_port=80&baseline_configuration_id=devnet_fullnode'\n```\n\nYou will see output similar to this:\n\n```\n{\n  \"check_results\": [\n    {\n      \"headline\": \"Chain ID reported by baseline and target match\",\n      \"score\": 100,\n      \"explanation\": \"The node under investigation reported the same Chain ID 18 as is reported by the baseline node\",\n      \"checker_name\": \"node_identity\",\n      \"links\": []\n    },\n    {\n      \"headline\": \"Role Type reported by baseline and target match\",\n      \"score\": 100,\n      \"explanation\": \"The node under investigation reported the same Role Type full_node as is reported by the baseline node\",\n      \"checker_name\": \"node_identity\",\n      \"links\": []\n    },\n    {\n      \"headline\": \"Target node produced valid recent transaction\",\n      \"score\": 100,\n      \"explanation\": \"We were able to pull the same transaction (version: 3238616) from both your node and the baseline node. Great! This implies that your node is keeping up with other nodes in the network.\",\n      \"checker_name\": \"transaction_availability\",\n      \"links\": []\n    }\n  ],\n  \"summary_score\": 100,\n  \"summary_explanation\": \"100: Awesome!\"\n}\n```\n\n", "doc_id": "5d0809a7-a295-4d48-a92f-41e2e5e5d584", "embedding": null, "doc_hash": "56661606a192dea69c83c8ab96f2275a3d5003709fae0c9b7c283dfdd3bfd60f", "extra_info": null, "node_info": {"start": 0, "end": 1521, "_node_type": "1"}, "relationships": {"1": "29605796-191f-4967-ab5a-61d3f97b206f"}}, "__type__": "1"}, "686f63df-b155-4bbc-a430-92c2083bb249": {"__data__": {"text": "\n\nHow NHC works\n\nThe NHC runs as a service. When you want to run a health check of your node, you send the HTTP requests to this service.\n\nA single NHC instance can be configured to check the health of multiple node configurations, each of different type, for example:\n\n- A public fullnode connected to the Aptos mainnet.\n- A validator node connected to the Aptos testnet.\n- A node running in a single node testnet.\n\n", "doc_id": "686f63df-b155-4bbc-a430-92c2083bb249", "embedding": null, "doc_hash": "906080dbe5429887af0b401d9e74969059478071016536bf50f37040bda15111", "extra_info": null, "node_info": {"start": 0, "end": 417, "_node_type": "1"}, "relationships": {"1": "a212e20d-762d-4fd4-9048-79552b7af016"}}, "__type__": "1"}, "79633030-da17-4fcb-82b6-26d013783221": {"__data__": {"text": "\n\nBaseline configuration\n\nIn all the above cases, a baseline node is used to compare your node's health. For example, for a public fullnode connected to the Aptos devnet, the baseline node might be a node run by the Aptos team and this node demonstrates optimal performance and participation characteristics.\n\nYou will download the baseline configuration YAML before running the NHC service for your node. The baseline node's configuration YAML describes where to find this baseline node (URL + port), what evaluators (e.g. metrics checks, TPS tests, API validations, etc.) the NHC service should run, what parameters the NHC should use for those evaluators, what name the configuration has, and so on. See these example baseline configuration YAML files.\n\nWhen you send requests to the NHC service, you must include a baseline configuration. For example, a request to NHC to use `devnet_fullnode` as the baseline configuration will look like this:\n\n```\ncurl 'http://nhc.aptoslabs.com/check?node_url=http://myfullnode.mysite.com&baseline_configuration_id=devnet_fullnode'\n```\n\n", "doc_id": "79633030-da17-4fcb-82b6-26d013783221", "embedding": null, "doc_hash": "786e55760948e53d30d94a26232f795abd4ca11586e3e6ca89317477dbe271f4", "extra_info": null, "node_info": {"start": 0, "end": 1077, "_node_type": "1"}, "relationships": {"1": "b819b81e-4531-40a4-81ca-edf98f1fd2bb"}}, "__type__": "1"}, "662ef4b6-d0bb-4094-a5e0-a7005a6b49af": {"__data__": {"text": "\n\nGetting baseline configurations ready\n\nIn order to run the NHC service, you must have a baseline configuration that the service can use. You have two options here:\n\n", "doc_id": "662ef4b6-d0bb-4094-a5e0-a7005a6b49af", "embedding": null, "doc_hash": "5040357393e0644f2a6a7efbff6e0b07e1a0fa21849aafa529c9a2596e539ae4", "extra_info": null, "node_info": {"start": 0, "end": 167, "_node_type": "1"}, "relationships": {"1": "8bf3a533-6109-4328-b5a1-99a14c7d5d9b"}}, "__type__": "1"}, "b72019ac-90ad-4d3f-8818-adb91430c54a": {"__data__": {"text": "\n\nConfigure a pre-existing YAML\n\nYou can find a few example baseline configuration YAML files that work for each of the above use cases and more.\n\nNext, download these configuration YAML files into the `/etc/nhc` folder in your host system. For example:\n\n```\nmkdir /tmp/nhc\ncd /tmp/nhc\nconfigs=(devnet_fullnode testnet_fullnode mainnet_fullnode); for c in ${configs[@]}; do wget https://raw.githubusercontent.com/aptos-labs/aptos-core/main/ecosystem/node-checker/configuration_examples/$c.yaml; done\n```\n\nThese configurations are not quite ready to be used as they are. You will need to modify certain fields, such as the baseline node address or evaluator set (`evaluators` and `evaluator_args` in the YAML) used. The best way to iterate on this is to run the NHC with a downloaded baseline configuration and see what it says on startup.\n\n", "doc_id": "b72019ac-90ad-4d3f-8818-adb91430c54a", "embedding": null, "doc_hash": "36261483502f95ec0cd7946de2ad5060fb9f240a0c4c67e730a93db9332750f7", "extra_info": null, "node_info": {"start": 0, "end": 840, "_node_type": "1"}, "relationships": {"1": "e974bd45-15c5-4768-b1ae-ab8c1eaa7e64"}}, "__type__": "1"}, "e41c6be4-cd30-436e-9c2c-edcf6d5cbe2c": {"__data__": {"text": "\n\nRequired files\n\nFor some NHC configurations, you will need accompanying files, e.g. `mint.key` to use for running a TPS test against a validator. You should make sure these files are also available to NHC, either on disk or mounted into your container. NHC expects them on startup at a path specified in the baseline configuration YAML.\n\n", "doc_id": "e41c6be4-cd30-436e-9c2c-edcf6d5cbe2c", "embedding": null, "doc_hash": "a2d3adeed76d6188cde20a7478cbc327cf148462a8a1e4310db44190eabd4f34", "extra_info": null, "node_info": {"start": 0, "end": 340, "_node_type": "1"}, "relationships": {"1": "1c3de868-1c3f-4574-bcce-4541bd482fa9"}}, "__type__": "1"}, "71703fae-c220-45bf-895c-202dcdc27923": {"__data__": {"text": "\n\nRunning NHC: Docker\n\n:::tip\nWhile the Aptos team hosts our own instances of this service, we encourage node operators to run their own instances.\n:::\n\nWhen you are ready with baseline configuration YAML and the required files, you can run the NHC server with a command like this, for example, with Docker:\n\n```\ndocker run -v /etc/nhc:/etc/nhc -p 20121:20121 -t aptoslabs/node-checker:nightly /usr/local/bin/aptos-node-checker server run --baseline-config-paths /tmp/nhc/devnet_fullnode.yaml /tmp/nhc/testnet_fullnode.yaml /tmp/nhc/mainnet/fullnode.yaml\n```\n\n:::tip\nYou may want to include other environment variables such as `RUST_LOG=info`. As you can see, by default NHC runs on port 20121. Make sure to publish it from the container, as shown in the above command, and ensure the port is open on your host. You may change the port NHC runs on with `--listen-port`.\n:::\n\n", "doc_id": "71703fae-c220-45bf-895c-202dcdc27923", "embedding": null, "doc_hash": "7df02bb00841d4a5c24fe7e8f3a95ae3d1ca1900cbe23571bb487e5f9877a280", "extra_info": null, "node_info": {"start": 0, "end": 875, "_node_type": "1"}, "relationships": {"1": "a6278aa0-7018-4579-bf09-3c56eecf8de8"}}, "__type__": "1"}, "42a040c2-7eb4-41dd-92f3-f9de86447d52": {"__data__": {"text": "\n\nRunning NHC: Source\n\nFirst, check out the source:\n\n```\ngit clone git@github.com:aptos-labs/aptos-core.git\ncd aptos-core\n```\n\nDepending on your setup, you may want to check out a particular branch, to ensure NHC is compatible with your node, e.g. `git checkout --track devnet`.\n\nRun NHC:\n\n```\ncargo run -p aptos-node-checker --release -- server run --baseline-config-paths /tmp/nhc/devnet_fullnode.yaml\n```\n\n", "doc_id": "42a040c2-7eb4-41dd-92f3-f9de86447d52", "embedding": null, "doc_hash": "007d7d0983c85600c976f35c3131e9c21712f9d3e713ea100845b0d1fae36061", "extra_info": null, "node_info": {"start": 0, "end": 409, "_node_type": "1"}, "relationships": {"1": "d89920d6-94d2-412e-940a-814d973c74dd"}}, "__type__": "1"}, "af4b7ae6-88d5-4714-99b0-51f964120e53": {"__data__": {"text": "\n\nGenerating the OpenAPI specs\n\nTo generate the OpenAPI specs, run the following commands from `ecosystem/node-checker`:\n\n```\ncargo run -- server generate-openapi -f yaml > doc/spec.yaml\ncargo run -- server generate-openapi -f json > doc/spec.json\n```\n\nYou can also hit the `/spec.yaml` and `/spec.json` endpoints of the running service.\n\n\n", "doc_id": "af4b7ae6-88d5-4714-99b0-51f964120e53", "embedding": null, "doc_hash": "a67e1b7f9608d623b0547378ec48ebaaee7941d302fd80bcd28ef9b0ab7e1335", "extra_info": null, "node_info": {"start": 0, "end": 340, "_node_type": "1"}, "relationships": {"1": "0961aefb-a4c1-45a8-ab53-1d9704dd72be"}}, "__type__": "1"}, "46e76dbc-dbe9-477d-8ab4-ba2138a3aeb8": {"__data__": {"text": "\n\nNode Inspection Service\n\nAptos nodes collect metrics and system information while running. These metrics provide a way to track,\nmonitor and inspect the health and performance of the node dynamically, at runtime. Node metrics and system\ninformation can be queried or exported via an inspection service that runs on each node.\n\nYou can configure various aspects of the node inspection service. This document describes how to expose and see the metrics locally, on the respective node. You may also view these metrics remotely by making the port publicly accessible via firewall rules. Generally, validator nodes don't expose these metrics for security, yet fullnodes do so the health checker can verify them.\n\nIf you do make the inspection service port publicly accessible on your validator node, we recommend disabling that access when not in use.\n\n", "doc_id": "46e76dbc-dbe9-477d-8ab4-ba2138a3aeb8", "embedding": null, "doc_hash": "f9e3e065066991c0177e47b70c480b0add2fcb75a1ebdbb327f8aa056d630b22", "extra_info": null, "node_info": {"start": 0, "end": 851, "_node_type": "1"}, "relationships": {"1": "c732dc34-ba8b-49e4-8e1c-1d19d141bc4c"}}, "__type__": "1"}, "26af1c38-8658-49d3-af25-057d7e72703e": {"__data__": {"text": "\n\nExamining node metrics\n\nIf you'd like to examine the metrics of your node (validator or fullnode), start running a\nnode and review the inspection service locally by loading this URL in your browser:\n\n```\nhttp://localhost:9101/metrics\n```\n\nThis will display the values of all the metrics and counters of your node at the time you queried it.\nTo see updates to these values, simply refresh the page.\n\nLikewise, if you wish to view the metrics in `json` format, visit the following URL:\n\n```\nhttp://localhost:9101/json_metrics\n```\n\n:::tip Inspection service configuration\nSee additional configuration\ndetails below.\n:::\n\n", "doc_id": "26af1c38-8658-49d3-af25-057d7e72703e", "embedding": null, "doc_hash": "ae012b910c2b71463cb83662c95af3293a11c0e02b77d00d9d5ab48e499ea93a", "extra_info": null, "node_info": {"start": 0, "end": 620, "_node_type": "1"}, "relationships": {"1": "c569eab6-4949-4c2d-a265-844fe47b322b"}}, "__type__": "1"}, "8e5f2c12-33f5-4098-b64a-b308e393aec0": {"__data__": {"text": "\n\nChange inspection service port\n\nThe inspection service should run on all nodes by default, at port `9101`. To change\nthe port the inspection service listens on (e.g., to `1000`), add the following to your node\nconfiguration file:\n\n```yaml\n inspection_service:\n     port: 1000\n```\n\n", "doc_id": "8e5f2c12-33f5-4098-b64a-b308e393aec0", "embedding": null, "doc_hash": "8c2f431f0c5cf5b00609213cbbf788dfdb9fcf0657e762f0edc216369ac9dbf6", "extra_info": null, "node_info": {"start": 0, "end": 283, "_node_type": "1"}, "relationships": {"1": "17619d0e-7186-41b9-98db-da7dd0efcf0d"}}, "__type__": "1"}, "6891b0f0-b660-4dd6-9ead-5c30b8d978ac": {"__data__": {"text": "\n\nExpose system configuration\n\nThe inspection service also provides a way to examine the configuration of your node\nat runtime (i.e., the configuration settings that your node started with).\n\n:::caution Proceed with caution\nBy default, the configuration endpoint is disabled as it may expose potentially sensitive\ninformation about the configuration of your node, e.g., file paths and directories. We\nrecommend enabling this endpoint only if the inspection service is not publicly accessible.\n:::`\n\nTo enable this feature, add the following to your node configuration file:\n\n```yaml\n inspection_service:\n   expose_configuration: true\n```\n\nAnd visit the configuration URL:\n\n```\nhttp://localhost:9101/configuration\n```\n\n", "doc_id": "6891b0f0-b660-4dd6-9ead-5c30b8d978ac", "embedding": null, "doc_hash": "4c136ace69312fc6e5e671dfdda9bd0c2dfc255a3e0d2f2ea85794905ccf637a", "extra_info": null, "node_info": {"start": 0, "end": 718, "_node_type": "1"}, "relationships": {"1": "00d9327f-beb9-41ef-a6f9-0ef9d4ab008c"}}, "__type__": "1"}, "d7890ec5-9c27-4a20-a302-0916ffa3e0af": {"__data__": {"text": "\n\nExpose system information\n\nLikewise, the inspection service also provides a way to examine the system information of your node\nat runtime (i.e., build and hardware information). Simply visit the following url:\n\n```\nhttp://localhost:9101/system_information\n```\n\nIf you'd like to disable this endpoint, add the following to your node configuration file:\n\n```yaml\n inspection_service:\n   expose_system_information: false\n``` \n\n:::tip System information accuracy\nThe system information displayed here is not guaranteed to be 100% accurate due to limitations\nin the way this information is collected. As a result, we recommend not worrying about any\ninaccuracies and treating the information as an estimate.\n:::`\n\n", "doc_id": "d7890ec5-9c27-4a20-a302-0916ffa3e0af", "embedding": null, "doc_hash": "c1d29997c71c4d0b0bb171749f4afe661b98dedb1644111600b00b99db56397b", "extra_info": null, "node_info": {"start": 0, "end": 711, "_node_type": "1"}, "relationships": {"1": "65a3930f-b620-4118-bc91-ac9d6f291a80"}}, "__type__": "1"}, "ec26011d-9086-48c3-b74a-cd56c2c7ce36": {"__data__": {"text": "\n\nUnderstand node metrics\n\nWhen you visit the metrics endpoint, you will notice that there are a large number of metrics\nand counters being produced by your node. Most of these metrics and counters are useful only for\nblockchain development and diagnosing hard-to-find issues. As a result, we recommend that node\noperators ignore most metrics and pay attention to only the key metrics presented below:\n\n:::caution Metric instability\nAs Aptos continues to grow and develop the blockchain software, many metrics will come and go.\nAs a result, we recommend relying on the presence of only the metrics explicitly mentioned below.\nAll other metrics should be considered unstable and may be changed/removed without warning.\n:::\n\n", "doc_id": "ec26011d-9086-48c3-b74a-cd56c2c7ce36", "embedding": null, "doc_hash": "38fc927ad86d3312cd75f15d2c628d3c2d078f9a90b8793529d23dc771dbea1e", "extra_info": null, "node_info": {"start": 0, "end": 723, "_node_type": "1"}, "relationships": {"1": "61d99f13-321e-4f8b-aa6d-be37ac8b6af9"}}, "__type__": "1"}, "d4f8bd2b-4bd5-49af-bc0b-c0997ee95668": {"__data__": {"text": "\n\nConsensus\n\nIf you are running a validator node, the following\nconsensus metrics are important:\n1. `aptos_consensus_proposals_count`: Counts the number of times the node sent a block\nproposal to the network. The count will increase only when the validator is chosen to be a proposer,\nwhich depends on the node's stake and leader election reputation. You should expect this metric to\nincrease at least once per hour.\n2. `aptos_consensus_last_committed_round`: Counts the last committed round of the node.\nDuring consensus, we expect this value to increase once per consensus round, which should be multiple\ntimes per second. If this does not happen, it is likely the node is not participating in consensus.\n3. `aptos_consensus_timeout_count`: Counts the number of times the node locally timed out while trying\nto participate in consensus. If this counter increases, it is likely the node is not participating \nin consensus and may be having issues, e.g., network difficulties.\n4. `aptos_state_sync_executing_component_counters{label=\"consensus\"`: This counter increases\na few times per second as long as the node is participating in consensus. When this counter stops\nincreasing, it means the node is not participating in consensus, and has likely fallen back to state\nsynchronization (e.g., because it fell behind the rest of the validators and needs to catch up).\n\n", "doc_id": "d4f8bd2b-4bd5-49af-bc0b-c0997ee95668", "embedding": null, "doc_hash": "30e878afad91220589437febf91037cfbc58b9c9a72e9a665a61214276353b25", "extra_info": null, "node_info": {"start": 0, "end": 1367, "_node_type": "1"}, "relationships": {"1": "a01b91a2-3c0b-409c-a07a-9aaf94e06adb"}}, "__type__": "1"}, "05e912dc-eaa7-407a-9c96-bef2254b046c": {"__data__": {"text": "\n\nState sync\n\nIf you are running a fullnode (or a validator that still needs to synchronize to the latest blockchain\nstate), the following state sync metrics are important:\n1. `aptos_state_sync_version{type=\"synced\"}`: This metric displays the current synced version of the node,\ni.e., the number of transactions the node has processed. If this  metric stops increasing, it means the\nnode is not syncing. Likewise, if this metric doesn't increase faster than the rate at which new transactions\nare committed to the blockchain, it means the node is unlikely to get and stay up-to-date with the rest of\nthe network. Note: if you've selected to use fast sync,\nthis metric won't increase until all states have been downloaded, which may take some time. See (3) below.\n2. `aptos_data_client_highest_advertised_data{data_type=\"transactions\"}`: This metric displays the highest\nversion synced and advertised by the peers that your node is connected to. As a result, when this metric is\nhigher than `aptos_state_sync_version{type=\"synced\"}` (above) it means your node can see new blockchain data and\nwill sync the data from its peers.\n3. `aptos_state_sync_version{type=\"synced_states\"}`: This metric counts the number of states that have been\ndownloaded while a node is fast syncing. If this metric doesn't increase,\nand `aptos_state_sync_version{type=\"synced\"}` doesn't increase (from above), it means the node is not syncing\nat all and an issue has likely occurred.\n4. `aptos_state_sync_bootstrapper_errors` and `aptos_state_sync_continuous_syncer_errors`: If your node is\nfacing issues syncing (or is seeing transient failures), these metrics will increase each time an error occurs.\nThe `error_label` inside these metrics will display the error type.\n\n:::tip\nCompare the synced version shown by `aptos_state_sync_version{type=\"synced\"}` with the highest version shown on the Aptos Explorer to see how far behind the latest blockchain version your node is. Remember to select the correct network that your node is syncing to (e.g., `mainnet`).\n:::\n\n", "doc_id": "05e912dc-eaa7-407a-9c96-bef2254b046c", "embedding": null, "doc_hash": "2bd8323b8b445244258a5d2894afa7b55d0eea0272444f4b722601434b1d8ed7", "extra_info": null, "node_info": {"start": 0, "end": 2044, "_node_type": "1"}, "relationships": {"1": "55400715-7065-4d18-b461-6ebfdb802fd8"}}, "__type__": "1"}, "3cbe2521-7e4f-4139-8917-739059e7fb73": {"__data__": {"text": "\n\nNetworking\n\nThe following network metrics are important, for both validators and fullnodes:\n1. `aptos_connections{direction=\"inbound\"` and `aptos_connections{direction=\"outbound\"`: These metrics count\nthe number of peers your node is connected to, as well as the direction of the network connection. An `inbound`\nconnection means that a peer (e.g., another fullnode) has connected to you. An `outbound` connection means that\nyour node has connected to another node (e.g., connected to a validator fullnode).\n   1. If your node is a validator, the sum of both `inbound` and `outbound` connections should be equal to the\n   number of other validators in the network. Note that only the sum of these connections matter. If all connections\n   are `inbound`, or all are `outbound`, this doesn't matter.\n   2. If your node is a fullnode, the number of `outbound` connections should be `> 0`. This will ensure your node is\n   able to synchronize. Note that the number of `inbound` connections matters only if you want to act as a seed in\n   the network and allow other nodes to connect to you as discussed\n   Fullnode Network Connections.\n\n\n", "doc_id": "3cbe2521-7e4f-4139-8917-739059e7fb73", "embedding": null, "doc_hash": "f73f0803465de0e7b5c3f1fa8b790e5128657cb6a4d8e17fec3070f03d4d8bd2", "extra_info": null, "node_info": {"start": 0, "end": 1136, "_node_type": "1"}, "relationships": {"1": "4f89ebdd-1414-4d6b-98dc-8b2318a49253"}}, "__type__": "1"}, "1908534d-52b8-4efc-9606-85300e320faa": {"__data__": {"text": "\n\nMempool\n\nThe following mempool metrics are important:\n1. `core_mempool_index_size{index=\"system_ttl\"`: This metric displays the number of transactions currently sitting in\nthe mempool of the node and waiting to be committed to the blockchain:\n   1. If your node is a fullnode, it's highly unlikely that this metric will be `> 0`, unless transactions are actively\n   being sent to your node via the REST API and/or other fullnodes that have connected to you. Most fullnode operators\n   should ignore this metric.\n   2. If your node is a validator, you can use this metric to see if transactions from your node's mempool are being\n   included in the blockchain (e.g., if the count decreases). Likewise, if this metric only increases, it means\n   that either: (i) your node is unable to forward transactions to other validators to be included in the blockchain; or\n   (ii) that the entire blockchain is under heavy load and may soon become congested.\n\n", "doc_id": "1908534d-52b8-4efc-9606-85300e320faa", "embedding": null, "doc_hash": "feeaca8b8b771f34c748c12349c8e036f542fcc62b69172215dd64bfc2e1f7a2", "extra_info": null, "node_info": {"start": 0, "end": 951, "_node_type": "1"}, "relationships": {"1": "5bd9d1a6-ca28-4c2f-a65b-14115df67f49"}}, "__type__": "1"}, "5f833865-2f81-4e82-8614-171260f9a45e": {"__data__": {"text": "\n\nREST API\n\nThe following REST API metrics are important:\n1. `aptos_api_requests_count{method=\"GET\"` and `aptos_api_requests_count{method=\"POST\"`: These metrics count\nthe number of REST API `GET` and `POST` requests that have been received via the node's REST API. This\nallows you to monitor and track the amount of REST API traffic on your node. You can also further use the\n`operation_id` in the metric to monitor the types of operations the requests are performing.\n\n2. `aptos_api_response_status_count`: This metric counts the number of response types that were sent for\nthe REST API. For example, `aptos_api_response_status_count{status=\"200\"}` counts the number of requests\nthat were successfully handled with a `200` response code. You can use this metric to track the success and\nfailure rate of the REST API traffic.\n\n", "doc_id": "5f833865-2f81-4e82-8614-171260f9a45e", "embedding": null, "doc_hash": "872c8242cb4b0c1b6c5ad7e6168ef480f024fdaa72f973db1efa04911dfd02ce", "extra_info": null, "node_info": {"start": 0, "end": 827, "_node_type": "1"}, "relationships": {"1": "49a05b2c-87eb-4791-84d8-4e20c1582291"}}, "__type__": "1"}, "2ee1efa8-56f4-4865-862f-a03095534c62": {"__data__": {"text": "\n\nNode Liveness Criteria\n\nWhen you participate in the Aptos network, your validator node and the validator fullnode must pass liveness checks within 24 hours of being selected to participate in the network, and at a regular cadence onwards. This is required to ensure that your nodes contribute to the health of the overall network. \n\nThis document describes how you can verify the status of your deployed validator node in the Aptos network to meet our success criteria. Once your nodes are up and running, you can also measure their success using the Node Health Checker and Node Inspection Service.\n\nThe liveness of your validator node will be evaluated using both on-chain and off-chain data. On-chain data will be pulled directly from your validator node  syncing to the chain, and off-chain data will be received from your validator node via telemetry. Such data includes:\n\n- At least one proposed block per hour. This data will be used to determine your node\u2019s availability over time.\n- Telemetry data pushed by your validator node:\n  - A continuously increasing synced version of your node, alongside a reasonable delta from the highest state of the blockchain.\n  - Aptos Labs' validator is among your set of peers.\n\n", "doc_id": "2ee1efa8-56f4-4865-862f-a03095534c62", "embedding": null, "doc_hash": "6b287a9cbaeaa26287a8da0eea264d2d5e2ca08a52939136852a8fc57c07af7c", "extra_info": null, "node_info": {"start": 0, "end": 1225, "_node_type": "1"}, "relationships": {"1": "c07bfb75-fad2-4781-b126-59fa6c226c67"}}, "__type__": "1"}, "2f45b385-8e65-4e86-8ffe-3b6c72b42ed2": {"__data__": {"text": "\n\nVerifying the liveness of your node\n\n", "doc_id": "2f45b385-8e65-4e86-8ffe-3b6c72b42ed2", "embedding": null, "doc_hash": "aa43f96d21b9a1219d7c06f0d30a2879b683a5578544b28e599f80f15e69d8e9", "extra_info": null, "node_info": {"start": 0, "end": 39, "_node_type": "1"}, "relationships": {"1": "d8ec71c4-6904-42e5-a4c5-f46f8c9b025c"}}, "__type__": "1"}, "0939f166-3d51-48b4-a9b8-a29a0b826960": {"__data__": {"text": "\n\nMonitoring tools\n\nIf you are a node operator, then several tools are available to you (provided by the Aptos team and the community) to verify the status of your own node locally. This local status will act as a good proxy for overall node health as seen from the network level and as reported by the remote analytics system operated by Aptos Labs. \n\n- Locally, the best way to verify your node status is to interact with your node. You can monitor your local metrics endpoint by running a `curl` command and observe various key metrics. Follow the steps described in detail in the Verify initial synchronization document.\n\n- To make your validator node more observable, install monitoring tools that scrape the local metrics endpoint:\n    - For Kubernetes based deployments, install the monitoring Helm chart (https://github.com/aptos-labs/aptos-core/tree/main/terraform/helm/monitoring).\n    - Locally, you may run Prometheus and Grafana directly. Dashboards that utilize the metrics can be found here: (https://github.com/aptos-labs/aptos-core/tree/main/dashboards).\n\nThe above two monitoring methods rely on your node\u2019s reported Prometheus Metrics. Of particular importance, the following metrics are directly related to the liveness success criteria above:\n\n- `aptos_consensus_proposals_count`\n- `aptos_state_sync_version{type=\"synced\"}`\n- `aptos_connections`\n\n", "doc_id": "0939f166-3d51-48b4-a9b8-a29a0b826960", "embedding": null, "doc_hash": "4459f62cdd4b0333d710f812e9a313f6a6a040169c8605da4530685efef842e0", "extra_info": null, "node_info": {"start": 0, "end": 1368, "_node_type": "1"}, "relationships": {"1": "a5cddf89-73de-4614-a7fe-4f7ac2cef144"}}, "__type__": "1"}, "bf46c7df-c02b-4866-9b39-1bb12669fcb0": {"__data__": {"text": "\n\nMonitor via telemetry\n\nRemotely, the Aptos team can verify the state of your node via telemetry. When you enable telemetry on your node, the Aptos node binary will send telemetry data in the background to the Aptos team.\n\nTelemetry data from your node is necessary for the Aptos team to evaluate the off-chain liveness metrics for verification. You can view the exact contents of each telemetry call by checking the `DEBUG` logs on your validator. If your node is using the default config without explicitly disabling telemetry, and has HTTPS egress access to the internet, then it will report various key metrics to Aptos Labs, such as the current synced version and peers connected to your node. \n\nAptos Labs will also observe the on-chain events such as proposals per hour on your node, as defined in the liveness criteria.\n\nAptos Labs\u2019 own analytics system will aggregate all the off-chain telemetry data and all on-chain participation events to calculate your node\u2019s health. Node health will be displayed on the community platform site as well as on a separate validator leaderboard for each testnet.\n\n\n", "doc_id": "bf46c7df-c02b-4866-9b39-1bb12669fcb0", "embedding": null, "doc_hash": "26a0fa18bbbf48daf2cc758ca8953e5cd7f374170cffbcadcb901f7c26b05b1f", "extra_info": null, "node_info": {"start": 0, "end": 1110, "_node_type": "1"}, "relationships": {"1": "2d90304c-56eb-49e9-866c-72f1dbc922b6"}}, "__type__": "1"}, "c14b35aa-59d4-4a08-adeb-a20897d84274": {"__data__": {"text": "\n\nNode Networks and Synchronization\n\nValidator nodes and fullnodes form a hierarchical structure with validator nodes at the root and fullnodes everywhere else. The Aptos blockchain distinguishes two types of fullnodes: validator fullnodes and public fullnodes. Validator fullnodes connect directly to validator nodes and offer scalability alongside DDoS mitigation. Public fullnodes connect to validator fullnodes (or other public fullnodes) to gain low-latency access to the Aptos network.\n\n!v-fn-network.svg\n\n", "doc_id": "c14b35aa-59d4-4a08-adeb-a20897d84274", "embedding": null, "doc_hash": "a20aec1dbb52316a9b46022cc32a84db3f840265d948def138939cec60ae203d", "extra_info": null, "node_info": {"start": 0, "end": 512, "_node_type": "1"}, "relationships": {"1": "b09d3a78-d687-4288-b4b8-0d061e5f5c8e"}}, "__type__": "1"}, "d46ef6e7-626d-40fb-b8e0-6cea86a967d8": {"__data__": {"text": "\n\nNode types\n\nAptos operates with these node types:\n\n* Validator nodes (VNs) - participates in consensus and drives transaction processing.\n* Validator fullnodes (VFNs) - captures and keeps up-to-date on the state of the blockchain; run by the validator operator, so it can connect directly to the validator node and therefore serve requests from public fullnodes. Otherwise, it works like a public fullnode.\n* Public fullnodes (PFNs) -  run by someone who is not a validator operator, PFNs cannot connect directly to a validator node and therefore rely upon VFNs for synchronization.\n* Archival nodes (ANs) - is a fullnode that contains all blockchain data since the start of the blockchain's history.\n\n", "doc_id": "d46ef6e7-626d-40fb-b8e0-6cea86a967d8", "embedding": null, "doc_hash": "4dd7a3c9bddeca232f6a9d1a07a636f8bcc2c67ea0aca9d032000a26fb39b4ea", "extra_info": null, "node_info": {"start": 0, "end": 704, "_node_type": "1"}, "relationships": {"1": "f108eacd-05e2-4d93-b762-57bc1a6e968c"}}, "__type__": "1"}, "d8fbb70d-b9bf-46b2-accc-83b2086b1098": {"__data__": {"text": "\n\nSeparate network stacks\nThe Aptos blockchain supports distinct networking stacks for various network topologies. For example, the validator network is independent of the fullnode network. The advantages of having separate network stacks include:\n* Clean separation between the different networks.\n* Better support for security preferences (e.g., bidirectional vs server authentication).\n* Allowance for isolated discovery protocols (i.e., on-chain discovery for validator node's public endpoints vs. manual configuration for private organizations).\n\n", "doc_id": "d8fbb70d-b9bf-46b2-accc-83b2086b1098", "embedding": null, "doc_hash": "d1fca399c4cbcdb711ea4e3d35b0f0a4af1dd2ccc299ab670cc99d51758ee466", "extra_info": null, "node_info": {"start": 0, "end": 552, "_node_type": "1"}, "relationships": {"1": "f554ca92-c066-416b-ba8b-d313f5f28e5d"}}, "__type__": "1"}, "4c4cf144-642f-44f9-87b6-590729242381": {"__data__": {"text": "\n\nNode synchronization\nAptos nodes synchronize to the latest state of the Aptos blockchain through two mechanisms: consensus or state synchronization. Validator nodes will use both consensus and state synchronization to stay up-to-date, while fullnodes use only state synchronization.\n\nFor example, a validator node will invoke state synchronization when it comes online for the first time or reboots (e.g., after being offline for a while). Once the validator is up-to-date with the latest state of the blockchain it will begin participating in consensus and rely exclusively on consensus to stay up-to-date. Fullnodes, however, continuously rely on state synchronization to get and stay up-to-date as the blockchain grows.\n\n", "doc_id": "4c4cf144-642f-44f9-87b6-590729242381", "embedding": null, "doc_hash": "ea392f33dabe57a0a553df6b955de4d18d94bf17a229fbe9d05114694d877b75", "extra_info": null, "node_info": {"start": 0, "end": 726, "_node_type": "1"}, "relationships": {"1": "a23696d7-85c2-4c4c-b3cb-9d72638da642"}}, "__type__": "1"}, "56f5df88-3e19-407c-aaeb-6cf007ab66c7": {"__data__": {"text": "\n\nState synchronizer\n\nEach Aptos node contains a State Synchronizer component which is used to synchronize the state of the node with its peers. This component has the same functionality for all types of Aptos nodes: it utilizes the dedicated peer-to-peer network to continuously request and disseminate blockchain data. Validator nodes distribute blockchain data within the validator node network, while fullnodes rely on other fullnodes (i.e., validator nodes or public fullnodes).\n\n\n", "doc_id": "56f5df88-3e19-407c-aaeb-6cf007ab66c7", "embedding": null, "doc_hash": "3e1ebff854f5d45a823a85cb9f668b7f4945574e60824af0642274fd41d9f690", "extra_info": null, "node_info": {"start": 0, "end": 486, "_node_type": "1"}, "relationships": {"1": "574df38e-51e8-4219-9cba-58e5af75dad8"}}, "__type__": "1"}, "8aecb0d4-ad39-4bf6-84cc-3a314160ae56": {"__data__": {"text": "\n\nNode Requirements\n\nTo make your validator node and validator fullnode deployment hassle-free, make sure you have the resources specified in this document. \n\n", "doc_id": "8aecb0d4-ad39-4bf6-84cc-3a314160ae56", "embedding": null, "doc_hash": "c08c24584dc9b199537e7fac692d500a1e63973c0ebde11c8f6fc0e0d2e36cd6", "extra_info": null, "node_info": {"start": 0, "end": 159, "_node_type": "1"}, "relationships": {"1": "6022aa4c-ad2b-46f8-a2b5-2b9c50cf89d5"}}, "__type__": "1"}, "33afcf23-993b-4c8c-9d2e-354bc030f869": {"__data__": {"text": "\n\nValidator and validator fullnode\n\n- **Both a validator node and a validator fullnode required:** For the Aptos mainnet, we require that you run a validator node and a validator fullnode. We strongly recommend that you run the validator node and the validator fullnode on two separate and independent machines. Make sure that these machines are well-provisioned and isolated from each other. Guaranteeing the resource isolation between the validator and the validator fullnode will help ensure smooth deployment of these nodes.\n- **Public fullnode is optional:** We recommend that optionally you run a public fullnode also. However, a public fullnode is not required. If you run public fullnode also, then we strongly recommend that you run the public fullnode on a third machine that is separate and independent from either the validator or the validator fullnode machines. \n:::tip Terraform support\nFor deploying the nodes in cloud we have provided Terraform support on two cloud providers: **GCP** and **AWS**. See **Running Validator Node**.\n:::\n\n- **Open the network ports:** Make sure that you open the network ports prior to connecting to the network. See Ports.\n- **Close the network ports:** Make sure that you close these ports after either being accepted or rejected for the network.\n\n", "doc_id": "33afcf23-993b-4c8c-9d2e-354bc030f869", "embedding": null, "doc_hash": "9c07da23803a730d4ca7600b10994dc7f578396bd464fac5c5a40352ff841671", "extra_info": null, "node_info": {"start": 0, "end": 1297, "_node_type": "1"}, "relationships": {"1": "781d69c4-8da8-40b9-ace9-8e565352deae"}}, "__type__": "1"}, "3f765651-156d-4d02-a21f-d30a85e02848": {"__data__": {"text": "\n\nHardware requirements\n\nFor running an Aptos **validator node and validator fullnode** we recommend the following hardware resources:\n\n  - **CPU**:\n      - 8 cores, 16 threads\n      - 2.8GHz, or faster\n      - Intel Xeon Skylake or newer\n  - **Memory**: 32GB RAM.\n  - **Storage**: 2T SSD with at least 40K IOPS and 200MiB/s bandwidth.\n  - **Networking bandwidth**: 1Gbps\n\n", "doc_id": "3f765651-156d-4d02-a21f-d30a85e02848", "embedding": null, "doc_hash": "dba2f0aca48fe8e35ec56440c33abe35d12aacb8978f032fcf2bf669cf1e289b", "extra_info": null, "node_info": {"start": 0, "end": 373, "_node_type": "1"}, "relationships": {"1": "24b91159-a3f3-4db5-8c42-eba9df13b49e"}}, "__type__": "1"}, "643468c3-c392-46b8-bae0-165e6eb52a49": {"__data__": {"text": "\n\nExample machine types on various clouds\n\n- **AWS**\n    - c6id.8xlarge (if use local SSD)\n    - c6i.8xlarge + io1/io2 EBS volume with 40K IOPS.\n- **GCP**\n    - n2-standard-16 (if use local SSD)\n    - n2-standard-32 + pd-ssd with 40K IOPS.\n\n", "doc_id": "643468c3-c392-46b8-bae0-165e6eb52a49", "embedding": null, "doc_hash": "dd8d9dc81ca0bc62952e795a07ad4dbc5c19fbe2053cc2c8daf0f66977368aa8", "extra_info": null, "node_info": {"start": 0, "end": 241, "_node_type": "1"}, "relationships": {"1": "427ddeec-7a80-445c-9f8f-fc4551b8b49c"}}, "__type__": "1"}, "ab611b19-76f6-40da-b591-2b807ba1144a": {"__data__": {"text": "\n\nMotivations for hardware requirements\n\nHardware requirements depend on the transaction rate and storage demands. The amount of data stored by the Aptos blockchain depends on the ledger history (the number of transactions) of the blockchain and the number of on-chain states (e.g., accounts and resources). Ledger history and the number of on-chain states depend on several factors: the age of the blockchain, the average transaction rate, and the configuration of the ledger pruner.\n\nThe current hardware requirements are set considering the estimated growth over the period ending in Q1-2023. Note that we cannot provide a recommendation for archival node storage size as that is an ever-growing number.\n\n**Local SSD vs. network storage**\n\nCloud deployments require choosing between using local or network storage such as AWS EBS, GCP PD. Local SSD provides lower latency and cost, especially relative to IOPS. \n\nOn the one hand, network storage requires additional CPU support to scale IOPS, but on the other hand, the network storage provides better support for backup snapshots and provide resilience for the nodes in scenarios where the instance is stopped. Network storage makes it easier to support storage needs for high availability.\n\n", "doc_id": "ab611b19-76f6-40da-b591-2b807ba1144a", "embedding": null, "doc_hash": "7ac13c48a82e734f1909a8cdab82a3fe11ce9901354002c81ec4ed09cc1d7015", "extra_info": null, "node_info": {"start": 0, "end": 1246, "_node_type": "1"}, "relationships": {"1": "26d85472-3209-4c2b-8b18-983dba61d6b4"}}, "__type__": "1"}, "0fcfd2b1-1d6b-4245-acbd-ab94d4da1557": {"__data__": {"text": "\n\nPorts\n\nWhen you are running a validator node, you are required to open network ports on your node to allow other nodes to connect to you. For fullnodes this is optional.\n\n", "doc_id": "0fcfd2b1-1d6b-4245-acbd-ab94d4da1557", "embedding": null, "doc_hash": "82c549db923fd79bcbedb073efa599c677f38cbed0c2d71a08254cb91adeba60", "extra_info": null, "node_info": {"start": 0, "end": 173, "_node_type": "1"}, "relationships": {"1": "a53c22f8-f568-467d-b87f-9ab161827024"}}, "__type__": "1"}, "81ed2236-7db2-4ed7-96ae-90e5f66581bf": {"__data__": {"text": "\n\nNetwork types\n\nYour node can be configured so that each of these networks can connect using a different port on your node.\n\nThere are three types of Aptos networks:\n1. **Validator network:** A validator node connects to this network.\n2. **Public network:** A public fullnode connects to this network.\n3. **Validator fullnode network:** A validator fullnode (VFN) connects to this network. The VFN network allows the validator fullnode to connect to a specific validator.\n\nYou can configure the port settings on your node using the configuration YAML file. See the example configuration YAML here. With this configuration YAML on your node, the public network connects to your node on port 6182 and the VFN network on 6181. Because these port settings are configurable, we don't explicitly say port X is for network Y.\n\n", "doc_id": "81ed2236-7db2-4ed7-96ae-90e5f66581bf", "embedding": null, "doc_hash": "c4cffbc4c249f79a108382bca29cd89b196e1db15e7f842dfe8939fcf4a2266d", "extra_info": null, "node_info": {"start": 0, "end": 821, "_node_type": "1"}, "relationships": {"1": "335a3f11-07db-4c3f-838a-bcf32f00400b"}}, "__type__": "1"}, "3935c11e-60bb-4efe-8ee0-833f1dd4e48c": {"__data__": {"text": "\n\nPort settings\n\nFor the validator:\n\n- Open the TCP port 6180, to enable the validators to talk to each other.\n- Open the TCP port 6181, to enable validator fullnode to connect.\n- Open the TCP port 9101, to send the validator metrics to validate the health stats.\n\nFor the public fullnode:\n\n- Open the TCP port 6182, to enable the fullnodes to talk to each other.\n- Open the TCP port 9101, to send the fullnode metrics to validate the health stats (only needed during registration stage).\n- Open the TCP port 80/8080, for the REST API access.\n\n\n", "doc_id": "3935c11e-60bb-4efe-8ee0-833f1dd4e48c", "embedding": null, "doc_hash": "908a1b00a9cdc979f3576dd5d037072882a52ad7a23c7f7559b76f524175baca", "extra_info": null, "node_info": {"start": 0, "end": 545, "_node_type": "1"}, "relationships": {"1": "616bdf5d-6219-41d3-aae4-75eb04227a00"}}, "__type__": "1"}, "25b19c38-92a0-474e-821e-26118035a3c5": {"__data__": {"text": "\n\nLearn about Nodes\n\nThe Aptos network is comprised of nodes of three types: validator node, validator fullnode and public fullnode. To participate in consensus, you are required to run both a validator node and a validator fullnode, and stake.\n\nAlso learn how to run a public fullnode on a local network and connect to either a testnet or a devnet. This section describes everything you need to stake and participate in consensus and governance. See also the external resources offered by your fellow node operators.\n\n\n\n", "doc_id": "25b19c38-92a0-474e-821e-26118035a3c5", "embedding": null, "doc_hash": "e7ad7b44fe912427e539d6e4d78b76aa2d154fd64859018a3605491e70936111", "extra_info": null, "node_info": {"start": 0, "end": 521, "_node_type": "1"}, "relationships": {"1": "d53a6fd2-991d-4164-9322-3f6a74e5e4c5"}}, "__type__": "1"}, "3ace0f1c-d1f5-4e8e-8cc1-7d4d0e981819": {"__data__": {"text": "\n\nValidator operations\n\n\n  \n    \n      \n        \n          Validation on Aptos\n          \n            Everything you need to know about how validation, staking and governance works on Aptos.\n          \n        \n        \n          \n            \n              How validation works\n            \n            Validator-leader proposes and earns rewards on success.\n          \n          \n            \n              Validator states\n            \n            Learn how a validator gets into a validator set.\n          \n          \n          Staking\n          \n          \n            \n              Staking on Aptos\n            \n            A comprehensive guide to how staking works on Aptos.\n          \n          \n            \n              Governance\n            \n            Who can propose, who can vote, and how an AIP is resolved.\n          \n          \n            \n              Owner\n            \n            Describes the owner operations performed for staking.\n          \n          \n            \n              Voter\n            \n            Describes the voter operations performed for staking.\n          \n        \n      \n    \n    \n      \n        \n          Operator\n          \n            A comprehensive guide to deploying nodes, staking operations and participate in consensus.\n          \n        \n        \n          \n            \n              Node requirements\n            \n            Details the compute and storage resources you need. Read this first before anything.\n          \n          \n            \n              Running validator node\n            \n            In the cloud or on-premises, Docker or source, you will step-by-step instructions here.\n          \n          \n            \n    ", "doc_id": "3ace0f1c-d1f5-4e8e-8cc1-7d4d0e981819", "embedding": null, "doc_hash": "e11e41333769f906f0c8573269bba4053cc3b2bbd1e04b0da322e708e8ae0628", "extra_info": null, "node_info": {"start": 0, "end": 1701, "_node_type": "1"}, "relationships": {"1": "2d8c1ac7-8f12-4394-a3ed-09449302782b", "3": "f909cf2d-d59e-4d5d-bf63-4846a653bf28"}}, "__type__": "1"}, "f909cf2d-d59e-4d5d-bf63-4846a653bf28": {"__data__": {"text": "         Node liveness criteria\n            \n            Your nodes must pass these liveness criteria to be in an Aptos network.\n          \n          \n            \n              Connecting to Aptos network\n            \n            Steps to connect your nodes to an Aptos network. \n          \n          \n            \n              Staking pool operations\n            \n            Step-by-step guide for how to perform staking pool operations. \n          \n          \n            \n              Shutting down nodes\n            \n            Leave the validator set first, and then shut down your node. \n          \n        \n      \n    \n    \n      \n        \n          Fullnode\n          \n            A section with detailed, step-by-step instructions on everything related to Aptos fullnode. \n          \n        \n        \n          \n            \n              Public fullnode\n            \n            Follow this section to install a public fullnode.\n          \n          \n            \n              Indexer fullnode\n            \n            <small\n              >Describes how to run an indexer fullnode on the Aptos network. \n          \n          \n            \n              Local testnet\n            \n            Run a local testnet with a validator node.\n          \n          \n            \n              Fullnode network connections\n            \n            Describes in detail how to configure your node's network connections.\n          \n          \n            \n              Network identity for fullnode\n            \n            <small\n              >Create a static network identity for your fullnode.</small\n            >\n          \n          \n            \n              Update fullnode\n         ", "doc_id": "f909cf2d-d59e-4d5d-bf63-4846a653bf28", "embedding": null, "doc_hash": "c0263f9d90937be70734c5507f1786873a4a6555f0ab928f7a4081222b8d4518", "extra_info": null, "node_info": {"start": 1702, "end": 3401, "_node_type": "1"}, "relationships": {"1": "2d8c1ac7-8f12-4394-a3ed-09449302782b", "2": "3ace0f1c-d1f5-4e8e-8cc1-7d4d0e981819", "3": "0e4c864e-37c7-4c04-94fd-e166b04af95a"}}, "__type__": "1"}, "0e4c864e-37c7-4c04-94fd-e166b04af95a": {"__data__": {"text": "  \n            When devnet is wiped and updated with newer versions, follow this document to update your fullnode.\n          \n          \n            \n              Bootstrap a new fullnode\n            \n            Use data restore to bootstrap a new fullnode.\n          \n        \n      \n    \n  \n\n\n", "doc_id": "0e4c864e-37c7-4c04-94fd-e166b04af95a", "embedding": null, "doc_hash": "8bb9a3cb79353beb12819197559f66fc01e3e92c603e418f48d26f1e5e61db1c", "extra_info": null, "node_info": {"start": 3402, "end": 3699, "_node_type": "1"}, "relationships": {"1": "2d8c1ac7-8f12-4394-a3ed-09449302782b", "2": "f909cf2d-d59e-4d5d-bf63-4846a653bf28"}}, "__type__": "1"}, "3debcdde-65d7-4b54-8a7a-468a9aa0f027": {"__data__": {"text": "\n\nGeneral\n\n\n  \n    \n      \n        \n        \n        \n          \n            \n              Aptos blockchain deployments\n            \n            See a snapshot of all Aptos deployments.\n          \n          \n            \n              Identity and configuration\n            \n            A mental-model of identity and configuration plus a description of the identity YAMLs.\n          \n          \n            \n              Node files\n            \n            All the files you need while deploying nodes, whether on mainnet, testnet or devnet.\n          \n          \n            \n              Indexing\n            \n            Access Aptos-provided indexer service or build your own custom indexer for the Aptos blockchain.\n          \n          \n            \n              State synchronization\n            \n            Synchronize your nodes to the latest Aptos blockchain state.\n          \n        \n      \n    \n    \n      \n        \n        \n        \n        \n            \n              Data pruning\n            \n            Manage your validator node's disk space by controlling the pruning settings. Proceed with caution.\n          \n          \n            \n              Node health checker\n            \n            If you are a node operator, use the NHC service to check if your node is running correctly.\n          \n          \n            \n              Telemetry\n            \n            Know what telemetry metrics are sent by your node, and control the telemetry settings.\n          \n          \n            \n              Leaderboard metrics\n            \n            A guide to interpret the validator rewards performance, as shown on the leaderboard metrics site.\n          \n        \n      \n    \n  \n\n\n", "doc_id": "3debcdde-65d7-4b54-8a7a-468a9aa0f027", "embedding": null, "doc_hash": "a03580c7fbbcc60df620ed14584da0d6f6db5a4d45755b915eaff35e0093a4cc", "extra_info": null, "node_info": {"start": 0, "end": 1712, "_node_type": "1"}, "relationships": {"1": "f2030e26-7e06-435c-9e81-0894353380cf"}}, "__type__": "1"}, "433801c4-3a8d-490d-af89-acd167dee15d": {"__data__": {"text": "\n\nOperator\n\nIf you are an operator participating in the Aptos network, then use this document to perform the operator tasks such as deploying a validator node and validator fullnode, registering the nodes on the Aptos community platform, and performing the validation. \n\n:::tip Both validator node and validator fullnode are required for mainnet\nFor participating in the Aptos mainnet, you must deploy both a validator node and a validator fullnode. \n:::\n\n", "doc_id": "433801c4-3a8d-490d-af89-acd167dee15d", "embedding": null, "doc_hash": "121a10a95ad855fc66dc14d4fe2f5ef5f3ca34038cccf124a5d2be8a92299e2c", "extra_info": null, "node_info": {"start": 0, "end": 456, "_node_type": "1"}, "relationships": {"1": "33b9f2bd-ddf1-44db-b614-17ed25e84b67"}}, "__type__": "1"}, "08c6b01c-f5f8-4354-9270-9e59330a64e7": {"__data__": {"text": "\n\nDeploy the nodes and register\n\n**Step 1:** Read the **Node Requirements** and make sure that your hardware, storage and network resources satisfy the node requirements.\n\n**Step 2:** **Deploy the nodes**. Follow the detailed node installation steps provided in **Running Validator Node** and deploy a validator node and a validator fullnode.\n\nNote that your nodes will not be running correctly (not syncing, not participating in consensus), until they're added to the validator set via staking pool operations (below).\n\n", "doc_id": "08c6b01c-f5f8-4354-9270-9e59330a64e7", "embedding": null, "doc_hash": "04ed0e44e58783563f0a002b5ba6769239f967949c14aff839798e57d309f1e6", "extra_info": null, "node_info": {"start": 0, "end": 521, "_node_type": "1"}, "relationships": {"1": "ffc29bb1-2543-4ef0-9acf-ac780ab8ce46"}}, "__type__": "1"}, "8f2faf24-1b9f-4ae2-9972-25861eec863f": {"__data__": {"text": "\n\nConnect to Aptos network\n\nAfter deploying your nodes, connect to the Aptos Network.\n\n", "doc_id": "8f2faf24-1b9f-4ae2-9972-25861eec863f", "embedding": null, "doc_hash": "2699afbbe09124abcf27326d75ede4b0bf550b2db85754b7e7ce1a0aac0703fd", "extra_info": null, "node_info": {"start": 0, "end": 87, "_node_type": "1"}, "relationships": {"1": "5b5f710a-3c14-4922-869c-b07750e89cb3"}}, "__type__": "1"}, "cea1604d-62d3-44ff-90db-307140bd95e8": {"__data__": {"text": "\n\nSet up staking and delegation pool operations\n\nAfter connecting your nodes to the Aptos network, establish staking pool operations to add your node to the validator set. \n\nSimilarly, conduct delegation pool operations for APT delegated to your validator. Your node will start syncing and participating in consensus.\n\n", "doc_id": "cea1604d-62d3-44ff-90db-307140bd95e8", "embedding": null, "doc_hash": "c317f540e84d0f27cec014b581a540ab10d9e18927fd1e17c55d2200f133f6c0", "extra_info": null, "node_info": {"start": 0, "end": 319, "_node_type": "1"}, "relationships": {"1": "1f3c59ee-61a2-4ad6-a5ac-f0b9689964e0"}}, "__type__": "1"}, "5eb69553-ff78-401c-be31-2f40aa8b222c": {"__data__": {"text": "\n\nEnsure your nodes are live\n\nAfter your nodes are deployed and configure, make sure they meet node liveness criteria.\n\n", "doc_id": "5eb69553-ff78-401c-be31-2f40aa8b222c", "embedding": null, "doc_hash": "0fd16e6f065f570b11ea0473c00286eb8863182b66f4e7d508751d18d09fb8e8", "extra_info": null, "node_info": {"start": 0, "end": 120, "_node_type": "1"}, "relationships": {"1": "54e0bd2b-d591-41dc-8fd9-45c25b37dd78"}}, "__type__": "1"}, "c415a7ef-2f65-41e7-b039-fe7878c92311": {"__data__": {"text": "\n\nPackage Upgrades\n\nMove code (e.g., Move modules) on the Aptos blockchain can be upgraded. This\nallows code owners and module developers to update and evolve their contracts\nunder a single, stable, well-known account address that doesn't change. If a\nmodule upgrade happens, all consumers of that module will automatically receive\nthe latest version of the code (e.g., the next time they interact with it).\n\nThe Aptos blockchain natively supports different _upgrade policies_, which allow\nmove developers to explicitly define the constraints around how their move code\ncan be upgraded. The default policy is _backwards compatible_. This means that\ncode upgrades are accepted only if they guarantee that no existing resource storage\nor public APIs are broken by the upgrade (including public functions).\nThis compatibility checking is possible because of Move's strongly typed bytecode\nsemantics.\n\nWe note, however, that even compatible upgrades can have hazardous effects on\napplications and dependent Move code (for example, if the semantics of the underlying\nmodule are modified). As a result, developers should be careful when depending on\nthird-party Move code that can be upgraded on-chain. See\nSecurity considerations for dependencies\nfor more details.\n\n", "doc_id": "c415a7ef-2f65-41e7-b039-fe7878c92311", "embedding": null, "doc_hash": "e15fb24b68894131af539908d20cb8b8456624932b708ec57f0b9e748a18b922", "extra_info": null, "node_info": {"start": 0, "end": 1261, "_node_type": "1"}, "relationships": {"1": "bffb57cf-f72b-440c-883b-956612d4d46a"}}, "__type__": "1"}, "0a4b7f28-ceb7-49e1-bf32-63bbeb6be769": {"__data__": {"text": "\n\nHow it works\n\nMove code upgrades on the Aptos blockchain happen at the Move package\ngranularity. A package specifies an upgrade policy in the `Move.toml` manifest:\n\n```toml\n[package]\nname = \"MyApp\"\nversion = \"0.0.1\"\nupgrade_policy = \"compatible\"\n...\n```\n:::tip Compatibility check\nAptos checks compatibility at the time a Move package is published via an Aptos transaction. This transaction will abort if deemed incompatible.\n:::\n\n", "doc_id": "0a4b7f28-ceb7-49e1-bf32-63bbeb6be769", "embedding": null, "doc_hash": "9f6f38b801c3ad6929e9e9489392e38b1c5c72f1ae81ee4f80e56eee6c849274", "extra_info": null, "node_info": {"start": 0, "end": 433, "_node_type": "1"}, "relationships": {"1": "76699e30-69e4-444c-a94c-cefd58a1bf9b"}}, "__type__": "1"}, "cc8a1822-cffd-49ba-a624-9ffac49928ff": {"__data__": {"text": "\n\nHow to upgrade\n\nTo upgrade already published Move code, simply attempt to republish the code at\nthe same address that it was previously published. This can be done by following the\ninstructions for code compilation and publishing using the\nAptos CLI. For an example,\nsee the Your First Move Module tutorial.\n\n", "doc_id": "cc8a1822-cffd-49ba-a624-9ffac49928ff", "embedding": null, "doc_hash": "394e17fc2009141f65cba6ece2949cea96b99adcfdf52d26228e23544eba71ab", "extra_info": null, "node_info": {"start": 0, "end": 311, "_node_type": "1"}, "relationships": {"1": "5b50c707-eeee-41ee-a6de-0c669c2e14d4"}}, "__type__": "1"}, "3935e44a-1e5b-48e0-b810-84149d0e31aa": {"__data__": {"text": "\n\nUpgrade policies\n\nThere are two different upgrade policies currently supported by Aptos:\n\n- `compatible`: these upgrades must be backwards compatible, specifically:\n  - For storage, all old struct declarations must be the same in\n    the new code. This ensures that the existing state of storage is \n    correctly interpreted by the new code. However, new struct declarations \n    can be added.\n  - For APIs, all existing public functions must have the same signature as \n    before. New functions, including public and entry functions, can be added.\n- `immutable`: the code is not upgradeable and is guaranteed to stay the same \n  forever.\n\nThose policies are ordered regarding strength such that `compatible < immutable`,\ni.e., compatible is weaker than immutable. The policy of a package on-chain can\nonly get stronger, not weaker. Moreover, the policy of all dependencies of a\npackage must be stronger or equal to the policy of the given package. For example,\nan `immutable` package cannot refer directly or indirectly to a `compatible` package.\nThis gives users the guarantee that no unexpected updates can happen under the hood.\n\nNote that there is one exception to the above rule: framework packages\ninstalled at addresses `0x1` to `0xa` are exempted from the dependency check.\nThis is necessary so one can define an `immutable` package based on the standard\nlibraries, which have the `compatible` policy to allow critical upgrades and fixes.\n\n", "doc_id": "3935e44a-1e5b-48e0-b810-84149d0e31aa", "embedding": null, "doc_hash": "6cef536d3158f35ebbeb7a13c562df5e4ce5b57e6380782089bc828a158301ff", "extra_info": null, "node_info": {"start": 0, "end": 1453, "_node_type": "1"}, "relationships": {"1": "eea9a423-d085-45f5-93e4-199a005fbf98"}}, "__type__": "1"}, "bdc77212-81f0-442a-9311-0cdc906b0aa7": {"__data__": {"text": "\n\nCompatibility rules\nWhen using `compatible` upgrade policy, a module package can be upgraded. However, updates to existing modules already\npublished previously need to be compatible and follow the rules below:\n- All existing structs' fields cannot be updated. This means no new fields can be added and existing fields cannot be\nmodified. Struct abilities also cannot be changed (no new ones added or existing removed).\n- All public and entry functions cannot change their signature (argument types, type argument, return types). However,\nargument names can change.\n- Public(friend) functions are treated as private and thus their signature can arbitrarily change. This is safe as\nonly modules in the same package can call friend functions anyway and they need to be updated if the signature changes.\n\nWhen updating your modules, if you see an incompatible error, make sure to check the above rules and fix any violations.\n\n", "doc_id": "bdc77212-81f0-442a-9311-0cdc906b0aa7", "embedding": null, "doc_hash": "706a123434bd03764f9e67123c84e79ee928a33075791c48983e65fdbcffefd8", "extra_info": null, "node_info": {"start": 0, "end": 925, "_node_type": "1"}, "relationships": {"1": "4b3945dd-5790-4796-a711-148619a0a4ef"}}, "__type__": "1"}, "82a6739a-7841-4631-899c-19adaa93a3ea": {"__data__": {"text": "\n\nSecurity considerations for dependencies\n\nAs mentioned above, even compatible upgrades can have disastrous effects for\napplications that depend on the upgraded code. These effects can come from bugs,\nbut they can also be the result of malicious upgrades. For example,\nan upgraded dependency can suddenly make all functions abort, breaking the\noperation of your Move code. Alternatively, an upgraded dependency can make\nall functions suddenly cost much more gas to execute then before the upgrade.\nAs result, dependencies to upgradeable packages need to be handled with care:\n\n- The safest dependency is, of course, an `immutable` package. This guarantees\n  that the dependency will never change, including its transitive dependencies.\n  In order to update an immutable package, the owner would have to introduce a\n  new major version, which is practically like deploying a new, separate\n  and independent package. This is because major versioning can be expressed\n  only by name (e.g. `module feature_v1` and `module feature_v2`). However,\n  not all package owners like to publish their code as `immutable`, because this\n  takes away the ability to fix bugs and update the code in place.\n- If you have a dependency to a `compatible` package, it is highly \n  recommended you know and understand the entity publishing the package. \n  The highest level of assurance is when the package is governed by a\n  Decentralized Autonomous Organization (DAO) where no single user can initiate\n  an upgrade; a vote or similar has to be taken. This is the case for the Aptos\n  framework.\n\n", "doc_id": "82a6739a-7841-4631-899c-19adaa93a3ea", "embedding": null, "doc_hash": "57a45c3c7209f005c18744fb9a3e72143350685dafee77cb05d19a79bbf41cf9", "extra_info": null, "node_info": {"start": 0, "end": 1576, "_node_type": "1"}, "relationships": {"1": "ed689a3c-e312-4bb9-a30b-3dd33f442c82"}}, "__type__": "1"}, "de40bd37-7958-4fd6-9843-62c87ab1893c": {"__data__": {"text": "\n\nProgrammatic upgrade\n\nIn general, Aptos offers, via the Move module `aptos_framework::code`, \nways to publish code from anywhere in your smart contracts. However,\nnotice that code published in the current transaction can be executed \nonly after that transaction ends.\n\nThe Aptos framework itself, including all the on-chain administration logic, is\nan example for programmatic upgrade. The framework is marked as `compatible`.\nUpgrades happen via specific generated governance scripts. For more details,\nsee Aptos Governance.\n\n", "doc_id": "de40bd37-7958-4fd6-9843-62c87ab1893c", "embedding": null, "doc_hash": "4ff149f0231281185e6c74b5708d7e3dbef900062dba622d84fec25ee26741e9", "extra_info": null, "node_info": {"start": 0, "end": 529, "_node_type": "1"}, "relationships": {"1": "1e9502a4-775c-497a-af90-0ec208ddb99f"}}, "__type__": "1"}, "635a0f74-1424-4131-bfb5-9e0bf9d16a5b": {"__data__": {"text": "\n\nPackages\n\nPackages allow Move programmers to more easily re-use code and share it\nacross projects. The Move package system allows programmers to easily:\n* Define a package containing Move code;\n* Parameterize a package by named addresses;\n* Import and use packages in other Move code and instantiate named addresses;\n* Build packages and generate associated compilation artifacts from packages; and\n* Work with a common interface around compiled Move artifacts.\n\n", "doc_id": "635a0f74-1424-4131-bfb5-9e0bf9d16a5b", "embedding": null, "doc_hash": "799dcd3307d6b5151f853b666595c7e2595e7b49423962ab85732f40182f4ea8", "extra_info": null, "node_info": {"start": 0, "end": 465, "_node_type": "1"}, "relationships": {"1": "365500a3-ba42-46f4-8215-c5b7d99f16e5"}}, "__type__": "1"}, "bed8a470-0bff-4f26-906c-7f7e47e72d5d": {"__data__": {"text": "\n\nPackage Layout and Manifest Syntax\n\nA Move package source directory contains a `Move.toml` package manifest\nfile along with a set of subdirectories:\n\n```\na_move_package\n\u251c\u2500\u2500 Move.toml      (required)\n\u251c\u2500\u2500 sources        (required)\n\u251c\u2500\u2500 examples       (optional, test & dev mode)\n\u251c\u2500\u2500 scripts        (optional)\n\u251c\u2500\u2500 doc_templates  (optional)\n\u2514\u2500\u2500 tests          (optional, test mode)\n```\n\nThe directories marked `required` _must_ be present in order for the directory\nto be considered a Move package and to be compiled. Optional directories can\nbe present, and if so will be included in the compilation process. Depending on\nthe mode that the package is built with (`test` or `dev`), the `tests` and\n`examples` directories will be included as well.\n\nThe `sources` directory can contain both Move modules and Move scripts (both\ntransaction scripts and modules containing script functions). The `examples`\ndirectory can hold additional code to be used only for development and/or\ntutorial purposes that will not be included when compiled outside `test` or\n`dev` mode.\n\nA `scripts` directory is supported so transaction scripts can be separated\nfrom modules if that is desired by the package author. The `scripts`\ndirectory will always be included for compilation if it is present.\nDocumentation will be built using any documentation templates present in\nthe `doc_templates` directory.\n\n", "doc_id": "bed8a470-0bff-4f26-906c-7f7e47e72d5d", "embedding": null, "doc_hash": "06ba0b2aa56e482771cb5e1279c81493f0d77af0f8167ddef09b2c82eaeae28d", "extra_info": null, "node_info": {"start": 0, "end": 1379, "_node_type": "1"}, "relationships": {"1": "bf68213f-f769-41ed-bd06-c213a6856d96"}}, "__type__": "1"}, "7ec64273-ec55-48b5-a380-434a46279437": {"__data__": {"text": "\n\nMove.toml\n\nThe Move package manifest is defined within the `Move.toml` file and has the\nfollowing syntax. Optional fields are marked with `*`, `+` denotes\none or more elements:\n\n```\n[package]\nname =                   # e.g., \"MoveStdlib\"\nversion = \"..\" # e.g., \"0.1.1\"\nlicense* =               # e.g., \"MIT\", \"GPL\", \"Apache 2.0\"\nauthors* = []            # e.g., [\"Joe Smith (joesmith@noemail.com)\", \"Jane Smith (janesmith@noemail.com)\"]\n\n[addresses]  # (Optional section) Declares named addresses in this package and instantiates named addresses in the package graph\n", "doc_id": "7ec64273-ec55-48b5-a380-434a46279437", "embedding": null, "doc_hash": "124c9cc93aad7eaad5719b6b39afebe00fe3a5580a9d3a2dc0e656307a1c28d0", "extra_info": null, "node_info": {"start": 0, "end": 569, "_node_type": "1"}, "relationships": {"1": "22350119-aa85-4630-ae47-3a6f950a674b"}}, "__type__": "1"}, "74644080-9327-4f5d-b5f0-d659475493cb": {"__data__": {"text": "\n\nOne or more lines declaring named addresses in the following format\n = \"_\" | \"\" # e.g., std = \"_\" or my_addr = \"0xC0FFEECAFE\"\n\n[dependencies] # (Optional section) Paths to dependencies and instantiations or renamings of named addresses from each dependency\n", "doc_id": "74644080-9327-4f5d-b5f0-d659475493cb", "embedding": null, "doc_hash": "e2081d35636ffa3697955fab15e425d59a4331c3f0420c9e8843471355392c64", "extra_info": null, "node_info": {"start": 0, "end": 259, "_node_type": "1"}, "relationships": {"1": "9e97531c-c57b-4897-97df-e84eb0666e56"}}, "__type__": "1"}, "30fb00b8-84d8-46ca-94ae-4ad6219eb46d": {"__data__": {"text": "\n\nOne or more lines declaring dependencies in the following format\n = { local = , addr_subst* = { ( = ( | \"\"))+ } } # local dependencies\n = { git = , subdir=, rev=, addr_subst* = { ( = ( | \"\"))+ } } # git dependencies\n\n[dev-addresses] # (Optional section) Same as [addresses] section, but only included in \"dev\" and \"test\" modes\n", "doc_id": "30fb00b8-84d8-46ca-94ae-4ad6219eb46d", "embedding": null, "doc_hash": "5b561f80a359adb684288d50b703ab22ee66eba91af85076e6808f5e65a12889", "extra_info": null, "node_info": {"start": 0, "end": 329, "_node_type": "1"}, "relationships": {"1": "0489af4e-5b4f-4466-9250-820423a71d23"}}, "__type__": "1"}, "31ca9bd8-4572-43f1-a542-f5b61f143bef": {"__data__": {"text": "\n\nOne or more lines declaring dev named addresses in the following format\n = \"_\" | \"\" # e.g., std = \"_\" or my_addr = \"0xC0FFEECAFE\"\n\n[dev-dependencies] # (Optional section) Same as [dependencies] section, but only included in \"dev\" and \"test\" modes\n", "doc_id": "31ca9bd8-4572-43f1-a542-f5b61f143bef", "embedding": null, "doc_hash": "2080e2a36494beea2ad9cb9c944682a6df5e84f3082e9dfd1b441de5cd865402", "extra_info": null, "node_info": {"start": 0, "end": 249, "_node_type": "1"}, "relationships": {"1": "3d485b86-bd82-433b-b266-3d80f528e399"}}, "__type__": "1"}, "b073b3af-f5d4-4827-8dbd-8b20a9915bfa": {"__data__": {"text": "\n\nOne or more lines declaring dev dependencies in the following format\n = { local = , addr_subst* = { ( = ( | ))+ } }\n```\n\nAn example of a minimal package manifest with one local dependency and one git dependency:\n\n```\n[package]\nname = \"AName\"\nversion = \"0.0.0\"\n```\n\nAn example of a more standard package manifest that also includes the Move\nstandard library and instantiates the named address `Std` from it with the\naddress value `0x1`:\n\n```\n[package]\nname = \"AName\"\nversion = \"0.0.0\"\nlicense = \"Apache 2.0\"\n\n[addresses]\naddress_to_be_filled_in = \"_\"\nspecified_address = \"0xB0B\"\n\n[dependencies]\n", "doc_id": "b073b3af-f5d4-4827-8dbd-8b20a9915bfa", "embedding": null, "doc_hash": "a157d0d25b135e97a4bf478e84dcc6403091e41fb81c6c86752e0477d00b59d5", "extra_info": null, "node_info": {"start": 0, "end": 596, "_node_type": "1"}, "relationships": {"1": "302a7dc0-fbae-4b20-9705-af639cd7c35d"}}, "__type__": "1"}, "c93ce692-1c60-4973-97e2-fc11f327ee68": {"__data__": {"text": "\n\nLocal dependency\nLocalDep = { local = \"projects/move-awesomeness\", addr_subst = { \"std\" = \"0x1\" } }\n", "doc_id": "c93ce692-1c60-4973-97e2-fc11f327ee68", "embedding": null, "doc_hash": "910b04a78170a2d23327738d7306cf2bb69a374ceb70dc198c6c9a5e754b797c", "extra_info": null, "node_info": {"start": 0, "end": 102, "_node_type": "1"}, "relationships": {"1": "0259fa54-b1ef-4ee5-a840-e68b0fb2be2d"}}, "__type__": "1"}, "909d6227-a98b-47ff-96db-839747ec4555": {"__data__": {"text": "\n\nGit dependency\nMoveStdlib = { git = \"https://github.com/diem/diem.git\", subdir=\"language/move-stdlib\", rev = \"56ab033cc403b489e891424a629e76f643d4fb6b\" }\n\n[dev-addresses] # For use when developing this module\naddress_to_be_filled_in = \"0x101010101\"\n```\n\nMost of the sections in the package manifest are self explanatory, but named\naddresses can be a bit difficult to understand so it's worth examining them in\na bit more detail.\n\n", "doc_id": "909d6227-a98b-47ff-96db-839747ec4555", "embedding": null, "doc_hash": "386654d28af826dc0ace4ed20e9efde9ca7b3890bacfd3a36e513a9724c091ac", "extra_info": null, "node_info": {"start": 0, "end": 432, "_node_type": "1"}, "relationships": {"1": "c02802f2-676e-4e9d-8f17-c0823d30460b"}}, "__type__": "1"}, "53067a20-ac7a-4d54-9a57-7fb41fcd828d": {"__data__": {"text": "\n\nNamed Addresses During Compilation\n\nRecall that Move has named addresses and that\nnamed addresses cannot be declared in Move. Because of this, until now\nnamed addresses and their values needed to be passed to the compiler on the\ncommand line. With the Move package system this is no longer needed, and\nyou can declare named addresses in the package, instantiate other named\naddresses in scope, and rename named addresses from other packages within\nthe Move package system manifest file. Let's go through each of these\nindividually:\n\n", "doc_id": "53067a20-ac7a-4d54-9a57-7fb41fcd828d", "embedding": null, "doc_hash": "edf79a421a5e21491d5d50df828ea4615d19dac78b75fbc4eff2d4edee30b866", "extra_info": null, "node_info": {"start": 0, "end": 535, "_node_type": "1"}, "relationships": {"1": "61392398-ccf9-4c6d-9f8a-4b0b7f44d7df"}}, "__type__": "1"}, "b83c42b7-6952-4134-8f82-d2e602fb14a7": {"__data__": {"text": "\n\nDeclaration\n\nLet's say we have a Move module in `example_pkg/sources/A.move` as follows:\n\n```move\nmodule named_addr::A {\n    public fun x(): address { @named_addr }\n}\n```\n\nWe could in `example_pkg/Move.toml` declare the named address `named_addr` in\ntwo different ways. The first:\n\n```\n[package]\nname = \"ExamplePkg\"\n...\n[addresses]\nnamed_addr = \"_\"\n```\n\nDeclares `named_addr` as a named address in the package `ExamplePkg` and\nthat _this address can be any valid address value_. Therefore an importing\npackage can pick the value of the named address `named_addr` to be any address\nit wishes. Intuitively you can think of this as parameterizing the package\n`ExamplePkg` by the named address `named_addr`, and the package can then be\ninstantiated later on by an importing package.\n\n`named_addr` can also be declared as:\n\n```\n[package]\nname = \"ExamplePkg\"\n...\n[addresses]\nnamed_addr = \"0xCAFE\"\n```\n\nwhich states that the named address `named_addr` is exactly `0xCAFE` and cannot be\nchanged. This is useful so other importing packages can use this named\naddress without needing to worry about the exact value assigned to it.\n\nWith these two different declaration methods, there are two ways that\ninformation about named addresses can flow in the package graph:\n* The former (\"unassigned named addresses\") allows named address values to flow\n  from the importation site to the declaration site.\n* The latter (\"assigned named addresses\") allows named address values to flow\n  from the declaration site upwards in the package graph to usage sites.\n\nWith these two methods for flowing named address information throughout the\npackage graph the rules around scoping and renaming become important to\nunderstand.\n\n", "doc_id": "b83c42b7-6952-4134-8f82-d2e602fb14a7", "embedding": null, "doc_hash": "35d19fa9d1a49cc7ccbb3e4bb23e0151c25e672c7fcec696ffbf22167f6041df", "extra_info": null, "node_info": {"start": 0, "end": 1705, "_node_type": "1"}, "relationships": {"1": "bf169e3c-a3e3-4854-95ed-bccb74d06026"}}, "__type__": "1"}, "2b8fb648-c1cf-4131-8d6e-b25c41056cbb": {"__data__": {"text": "\n\nScoping and Renaming of Named Addresses\n\nA named address `N` in a package `P` is in scope if:\n1. It declares a named address `N`; or\n2. A package in one of `P`'s transitive dependencies declares the named address\n  `N` and there is a dependency path in the package graph between between `P` and the\n  declaring package of `N` with no renaming of `N`.\n\nAdditionally, every named address in a package is exported. Because of this and\nthe above scoping rules each package can be viewed as coming with a set of\nnamed addresses that will be brought into scope when the package is imported,\ne.g., if the `ExamplePkg` package was imported, that importation would bring\ninto scope the `named_addr` named address. Because of this, if `P` imports two\npackages `P1` and `P2` both of which declare a named address `N` an issue\narises in `P`: which \"`N`\" is meant when `N` is referred to in `P`? The one\nfrom `P1` or `P2`? To prevent this ambiguity around which package a named\naddress is coming from, we enforce that the sets of scopes introduced by all\ndependencies in a package are disjoint, and provide a way to _rename named\naddresses_ when the package that brings them into scope is imported.\n\nRenaming a named address when importing can be done as follows in our `P`,\n`P1`, and `P2` example above:\n\n```\n[package]\nname = \"P\"\n...\n[dependencies]\nP1 = { local = \"some_path_to_P1\", addr_subst = { \"P1N\" = \"N\" } }\nP2 = { local = \"some_path_to_P2\"  }\n```\n\nWith this renaming `N` refers to the `N` from `P2` and `P1N` will refer to `N`\ncoming from `P1`:\n\n```\nmodule N::A {\n    public fun x(): address { @P1N }\n}\n```\n\nIt is important to note that _renaming is not local_: once a named address `N`\nhas been renamed to `N2` in a package `P` all packages that import `P` will not\nsee `N` but only `N2` unless `N` is reintroduced from outside of `P`. This is\nwhy rule (2) in the scoping rules at the start of this section specifies a\n\"dependency path in the package graph between between `P` and the declaring\npackage of `N` with no renaming of `N`.\"\n\n", "doc_id": "2b8fb648-c1cf-4131-8d6e-b25c41056cbb", "embedding": null, "doc_hash": "b9548737e955adbbcbd6562160c885a1bbbc28eba448ddcffceb5e6f7a6480ae", "extra_info": null, "node_info": {"start": 0, "end": 2035, "_node_type": "1"}, "relationships": {"1": "aabaaa89-6995-4470-b40a-7d6dde1fc63b"}}, "__type__": "1"}, "2dff17fa-0be3-448a-b897-136beedec035": {"__data__": {"text": "\n\nInstantiation\n\nNamed addresses can be instantiated multiple times across the package graph as\nlong as it is always with the same value. It is an error if the same named\naddress (regardless of renaming) is instantiated with differing values across\nthe package graph.\n\nA Move package can only be compiled if all named addresses resolve to a value.\nThis presents issues if the package wishes to expose an uninstantiated named\naddress. This is what the `[dev-addresses]` section solves. This section can\nset values for named addresses, but cannot introduce any named addresses.\nAdditionally, only the `[dev-addresses]` in the root package are included in\n`dev` mode. For example a root package with the following manifest would not compile\noutside of `dev` mode since `named_addr` would be uninstantiated:\n\n```\n[package]\nname = \"ExamplePkg\"\n...\n[addresses]\nnamed_addr = \"_\"\n\n[dev-addresses]\nnamed_addr = \"0xC0FFEE\"\n```\n\n", "doc_id": "2dff17fa-0be3-448a-b897-136beedec035", "embedding": null, "doc_hash": "6f20995d2d94d15f565cdce8c5fefe418050c5862192f4689bba5e689bfa982a", "extra_info": null, "node_info": {"start": 0, "end": 918, "_node_type": "1"}, "relationships": {"1": "b0ceb664-aa8b-4366-a9e7-8fdcd075c03b"}}, "__type__": "1"}, "fdf5c36c-89b3-4575-879a-832f6061dcd0": {"__data__": {"text": "\n\nUsage, Artifacts, and Data Structures\n\nThe Move package system comes with a command line option as part of the Move\nCLI `move   `. Unless a\nparticular path is provided, all package commands will run in the current working\ndirectory. The full list of commands and flags for the Move CLI can be found by\nrunning `move --help`.\n\n", "doc_id": "fdf5c36c-89b3-4575-879a-832f6061dcd0", "embedding": null, "doc_hash": "52a3921402998b1f10d7fbf803369b30b1c9cbeb2cfcd302673f372d0278f6f4", "extra_info": null, "node_info": {"start": 0, "end": 328, "_node_type": "1"}, "relationships": {"1": "92888156-e050-4472-a195-0058b918f2b9"}}, "__type__": "1"}, "03c70732-6c4f-4128-a114-57df7e974251": {"__data__": {"text": "\n\nUsage\n\nA package can be compiled either through the Move CLI commands, or as a library\ncommand in Rust with the function `compile_package`. This will create a\n`CompiledPackage` that holds the compiled bytecode along with other compilation\nartifacts (source maps, documentation, ABIs) in memory. This `CompiledPackage`\ncan be converted to an `OnDiskPackage` and vice versa -- the latter being the data of\nthe `CompiledPackage` laid out in the file system in the following format:\n\n```\na_move_package\n\u251c\u2500\u2500 Move.toml\n...\n\u2514\u2500\u2500 build\n    \u251c\u2500\u2500 \n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 BuildInfo.yaml\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 bytecode_modules\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 *.mv\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 source_maps\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 *.mvsm\n    \u2502   \u251c\u2500\u2500 bytecode_scripts\n    \u2502   \u2502\u00a0\u00a0 \u2514\u2500\u2500 *.mv\n    \u2502   \u251c\u2500\u2500 abis\n    \u2502   \u2502\u00a0\u00a0 \u251c\u2500\u2500 *.abi\n    \u2502   \u2502\u00a0\u00a0 \u2514\u2500\u2500 /*.abi\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 sources\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 *.move\n    ...\n    \u2514\u2500\u2500 \n        \u251c\u2500\u2500 BuildInfo.yaml\n        ...\n        \u2514\u2500\u2500 sources\n```\n\nSee the `move-package` crate for more information on these data structures and\nhow to use the Move package system as a Rust library.\n\n", "doc_id": "03c70732-6c4f-4128-a114-57df7e974251", "embedding": null, "doc_hash": "545b4e2069de8859144d45360f37c18164bd04b6100a94bb9fc778e3ce4c1bd2", "extra_info": null, "node_info": {"start": 0, "end": 1032, "_node_type": "1"}, "relationships": {"1": "f75c245f-0f28-4627-8f7d-6a3620960027"}}, "__type__": "1"}, "20fa44b5-2f40-44ec-b1df-1ac7089489e5": {"__data__": {"text": "\n\nUsing Bytecode for Dependencies\n\nMove bytecode can be used as dependencies when the Move source code for those dependencies are not available locally. To use this feature, you will need co-locate the files in directories at the same level and then specify their paths in the corresponding `Move.toml` files.\n\n", "doc_id": "20fa44b5-2f40-44ec-b1df-1ac7089489e5", "embedding": null, "doc_hash": "4c1478dd84d5f504b1a14eb745525b555b1b11391ed58ffa1fbb47e54fc51759", "extra_info": null, "node_info": {"start": 0, "end": 311, "_node_type": "1"}, "relationships": {"1": "6b5f6c97-0d7e-44ff-bcdc-554fa889027e"}}, "__type__": "1"}, "31bc043a-a782-4edc-b16d-673edbb7467d": {"__data__": {"text": "\n\nRequirements and limitations\n\nUsing local bytecode as dependencies requires bytecode files to be downloaded locally, and the actual address for each named address must be specified in either `Move.toml` or through `--named-addresses`.\n\nNote, both `aptos move prove` and `aptos move test` commands, currently, do not support bytecode as dependencies.\n\n", "doc_id": "31bc043a-a782-4edc-b16d-673edbb7467d", "embedding": null, "doc_hash": "f913a2e3ec46c74311adf4473ee906618e8e005e4395f2b36b62dcfafce56106", "extra_info": null, "node_info": {"start": 0, "end": 353, "_node_type": "1"}, "relationships": {"1": "2433b6a6-1206-44d2-a513-7a79421e905b"}}, "__type__": "1"}, "662814aa-17fd-478a-a6c9-92be503ed106": {"__data__": {"text": "\n\nRecommended structure\n\nWe use an example to illustrate the dev flow of using this feature. Suppose we want to compile the package `A`. The package layout is:\n```rust\n./A\n\u251c\u2500\u2500 Move.toml\n\u251c\u2500\u2500 sources\n  \u251c AModule.move\n```\n\n`A.move` is defined below, depending on the modules `Bar` and `Foo`:\n\n```rust\nmodule A::AModule {\n    use B::Bar;\n    use C::Foo;\n    public fun foo(): u64 {\n        Bar::foo() + Foo::bar()\n    }\n}\n```\n\nSuppose the source of `Bar` and `Foo` are not available but the corresponding bytecode `Bar.mv` and `Foo.mv` are available locally. To use them as dependencies, we would:\n\nSpecify `Move.toml` for `Bar` and `Foo`. Note that named addresses are already instantiated with the actual address in the bytecode. In our example, the actual address for `C` is already bound to `0x3`. As a result, `[addresses]` must be specified `C` as `0x3`, as shown below:\n\n```rust\n[package]\nname = \"Foo\"\nversion = \"0.0.0\"\n[addresses]\nC = \"0x3\"\n```\n\nPlace the bytecode file and the corresponding `Move.toml` file in the same directory with the bytecode in a `build` subdirectory. Note an empty `sources` directory is **required**. For instance, the layout of the folder `B` (for the package `Bar`) and `C` (for the package `Foo`) would resemble:\n\n```rust\n./B\n\u251c\u2500\u2500 Move.toml\n\u251c\u2500\u2500 sources\n\u251c\u2500\u2500 build\n \u251c Bar.mv\n```\n\n```rust\n./C\n\u251c\u2500\u2500 Move.toml\n\u251c\u2500\u2500 sources\n\u251c\u2500\u2500 build\n  \u251c\u2500\u2500 Foo\n   \u251c\u2500\u2500bytecode_modules\n     \u251c Foo.mv\n```\n\nSpecify `[dependencies]` in the `Move.toml` of the target (first) package with the location of the dependent (secondary) packages. For instance, assuming all three package directories are at the same level, `Move.toml` of `A` would resemble:\n\n```rust\n[package]\nname = \"A\"\nversion = \"0.0.0\"\n[addresses]\nA = \"0x2\"\n[dependencies]\nBar = { local = \"../B\" }\nFoo = { local = \"../C\" }\n```\n\nNote that if both the bytecode and the source code of the same package exist in the search paths, the compiler will complain that the declaration is duplicated.\n\n", "doc_id": "662814aa-17fd-478a-a6c9-92be503ed106", "embedding": null, "doc_hash": "6c0dd86291c30d173d2ab1d9ff14e80f4c8f61a2c877509a5dab16dfed5a3526", "extra_info": null, "node_info": {"start": 0, "end": 1954, "_node_type": "1"}, "relationships": {"1": "3067f711-3a00-43c8-9bbf-96f8f427a03a"}}, "__type__": "1"}, "8d6cd795-7bb5-474e-bbdb-f298c7ac5365": {"__data__": {"text": "\n\nMove Prover User Guide\n\nThis is the user guide for the Move Prover. This document accompanies the\nMove specification language. See the sections below for details.\n\n", "doc_id": "8d6cd795-7bb5-474e-bbdb-f298c7ac5365", "embedding": null, "doc_hash": "58637cf4ee441d0bd2eff1de362779dc0caf18b383be5d6c8bda64db328e36c1", "extra_info": null, "node_info": {"start": 0, "end": 166, "_node_type": "1"}, "relationships": {"1": "91f7ba12-6697-4cce-b193-89437f192e35"}}, "__type__": "1"}, "f0550d58-6420-4d5a-bb80-a7f88117a038": {"__data__": {"text": "\n\nRunning the Move Prover\n\nThe Move Prover is invoked via the Aptos CLI. In order to call the CLI, you must have a *Move package* in place. In the simplest case, a Move package is defined by a directory with a set of `.move` files in it and a manifest of the name `Move.toml`. You can create a new Move package at a given location by running the command: `aptos move init --name `\n\nOnce the package exists, call the Move Prover from the directory to be tested or by supplying its path to the `--package-dir` argument:\n\n  * Prove the sources of the package in the current directory:\n    ```shell\n  aptos move prove\n  ```\n\n  * Prove the sources of the package at &lt;path&gt;:\n  ```shell\n  aptos move prove --package-dir \n  ```\n\nSee example output and other available options in the Proving Move section of Use Aptos CLI.\n\n", "doc_id": "f0550d58-6420-4d5a-bb80-a7f88117a038", "embedding": null, "doc_hash": "b3ec80ceb9e1df2d48e6294865fa028de47e0ae9158ca0145c9f06e0b2b35b00", "extra_info": null, "node_info": {"start": 0, "end": 821, "_node_type": "1"}, "relationships": {"1": "232da8db-59f9-4631-8269-7227d177a372"}}, "__type__": "1"}, "95082344-5c17-4012-b1b1-7033bbaf65dd": {"__data__": {"text": "\n\nTarget filtering\n\nBy default, the `aptos move prove` command verifies all files of a package. During iterative development of larger packages, it is often more effective to focus verification on particular files with the\n`-f` (`--filter`) option, like so:\n\n```shell script\naptos move prove -f coin\n```\n\nIn general, if the string provided to the `-f` option is contained somewhere in the file name of a source, that source will be included for verification.\n\n> NOTE: the Move Prover ensures there is no semantic difference between verifying modules one-by-one\n> or all at once. However, if your goal is to verify all modules, verifying them in a single\n> `aptos move prove` run will be significantly faster than sequentially.\n\n", "doc_id": "95082344-5c17-4012-b1b1-7033bbaf65dd", "embedding": null, "doc_hash": "fda5921c0d5829ec81ce53292946b2449115479796c1ce76a90477c58f3b1e86", "extra_info": null, "node_info": {"start": 0, "end": 728, "_node_type": "1"}, "relationships": {"1": "1b7368c6-c8c9-4ff4-9849-2e556712a34b"}}, "__type__": "1"}, "fa6a335c-ef99-48bc-9a80-95b7b8d00aae": {"__data__": {"text": "\n\nProver options\n\nThe Move Prover has a number of options (such as the filter option above) that you pass with an invocation of: `aptos move prove `. The most commonly used option is the `-t` (`--trace`) option that causes the Move Prover to produce richer diagnosis when it encounters errors:\n\n```shell script\naptos move prove -f coin -t\n```\n\nTo see the list of all command line options, run: `aptos move prove --help`\n\n", "doc_id": "fa6a335c-ef99-48bc-9a80-95b7b8d00aae", "embedding": null, "doc_hash": "f27aed934a8de60df6c7abe76582c8defb17d7994da440ce23aa6fb96cde6548", "extra_info": null, "node_info": {"start": 0, "end": 421, "_node_type": "1"}, "relationships": {"1": "7bc16224-7f61-402b-924f-d333824012bd"}}, "__type__": "1"}, "c647dd3a-cea2-4289-88d7-230326301b83": {"__data__": {"text": "\n\nProver configuration file\n\nYou can also create a Move Prover configuration file named `Prover.toml` that lives side-by-side with the `Move.toml` manifest file in the root of the package directory. For example, to enable tracing by default for a package, add a `Prover.toml` file with the following configuration:\n\n```toml\n[prover]\nauto_trace_level = \"VerifiedFunction\"\n```\n\nFind the most commonly used options in the example `.toml` below, which you can cut and paste and adopt for your needs (adjusting the defaults shown in the displayed values as needed):\n\n```toml\n", "doc_id": "c647dd3a-cea2-4289-88d7-230326301b83", "embedding": null, "doc_hash": "c09a1bd82a28f9a4c4a1f24bf22aeb18ae11e9a5c7a59c9ba8bec03d781a22d4", "extra_info": null, "node_info": {"start": 0, "end": 570, "_node_type": "1"}, "relationships": {"1": "3d317a3b-505d-4039-a095-bc5d9e62c4eb"}}, "__type__": "1"}, "ce342e43-5618-46e2-83bc-4566e1fb8c27": {"__data__": {"text": "\n\nVerbosity level\nverbosity_level = \"INFO\"\n\n[prover]\n", "doc_id": "ce342e43-5618-46e2-83bc-4566e1fb8c27", "embedding": null, "doc_hash": "8321ef1f92e269cf69f7db40c00e095bfb260a06b99fd78611105a7109dc7542", "extra_info": null, "node_info": {"start": 0, "end": 53, "_node_type": "1"}, "relationships": {"1": "f39fb86d-f545-4a82-a792-7945f9786038"}}, "__type__": "1"}, "8388c5e4-c558-42a1-8c0d-94747aab5d2c": {"__data__": {"text": "\n\nSet auto-tracing level, which enhances the diagnosis the Move Prover produces on verification errors.\nauto_trace_level = \"Off\"\n\n", "doc_id": "8388c5e4-c558-42a1-8c0d-94747aab5d2c", "embedding": null, "doc_hash": "f306d8ba4b81b68629a6b4d6de04341166ed1f95c0d88735c03e4702b9e29773", "extra_info": null, "node_info": {"start": 0, "end": 130, "_node_type": "1"}, "relationships": {"1": "f9829659-5903-4fce-abea-11949279f4dc"}}, "__type__": "1"}, "7c80b4f1-cd35-400d-9d14-87476bc82715": {"__data__": {"text": "\n\nMinimal severity level for diagnosis to be reported.\nreport_severity = \"Warning\"\n\n[backend]\n", "doc_id": "7c80b4f1-cd35-400d-9d14-87476bc82715", "embedding": null, "doc_hash": "405447ab22f252f0f6d78abf519c1526279981cb336ad96fec6dcd05aa842d52", "extra_info": null, "node_info": {"start": 0, "end": 94, "_node_type": "1"}, "relationships": {"1": "41848eef-eb6a-4f90-8768-a0ef2088834d"}}, "__type__": "1"}, "178a52b5-d837-4846-833c-91694198c4d4": {"__data__": {"text": "\n\nTimeout in seconds for the solver backend. Note that this is a soft timeout and may not always\nvc_timeout = 40\n\n", "doc_id": "178a52b5-d837-4846-833c-91694198c4d4", "embedding": null, "doc_hash": "97500b452db8f2f01e9a545e156bd5fd7b3573e0f0bfde94dd84807e7c19b9b0", "extra_info": null, "node_info": {"start": 0, "end": 114, "_node_type": "1"}, "relationships": {"1": "d22376bd-2dca-4253-bd20-4caea06233b3"}}, "__type__": "1"}, "73e869bf-2b21-47aa-906a-3f727677667e": {"__data__": {"text": "\n\nRandom seed for the solver backend. Different seeds can result in different verification run times,\nrandom_seed = 1\n\n", "doc_id": "73e869bf-2b21-47aa-906a-3f727677667e", "embedding": null, "doc_hash": "908dc579c28487e83a63e30881dd58287413a9042781d041f08a57581265f583", "extra_info": null, "node_info": {"start": 0, "end": 119, "_node_type": "1"}, "relationships": {"1": "8ee11e14-12d0-4bb7-ba6b-119ef4124dac"}}, "__type__": "1"}, "4afe1d87-f8e9-44d3-b547-e6348e3e779c": {"__data__": {"text": "\n\nThe number of processor cores to assume for concurrent check of verification conditions.\nproc_cores = 4\n```\n\n> HINT: For local verification, you may want to set `proc_cores` to an aggressive number\n> (your actual cores) to speed up the turnaround cycle.\n\n\n", "doc_id": "4afe1d87-f8e9-44d3-b547-e6348e3e779c", "embedding": null, "doc_hash": "e3f8c934ee803822b27082ec36d00bf8b413f14d821e6180970aeecd1e7b90da", "extra_info": null, "node_info": {"start": 0, "end": 258, "_node_type": "1"}, "relationships": {"1": "e7eb47a9-33e9-4359-aafe-102179019ed2"}}, "__type__": "1"}, "a7be9e0b-37d8-44c0-af7c-ae3bd7683e5e": {"__data__": {"text": "\n\nProver diagnosis\n\nWhen the Move Prover finds a verification error, it prints diagnosis to standard output in a style similar to a compiler or a debugger. We explain the different types of diagnoses below, based on the following evolving example:\n\n```move\nmodule 0x0::m {\n    struct Counter has key {\n        value: u8,\n    }\n\n    public fun increment(a: address) acquires Counter {\n        let r = borrow_global_mut(a);\n        r.value = r.value + 1;\n    }\n\n    spec increment {\n        aborts_if !exists(a);\n        ensures global(a).value == old(global(a)).value + 1;\n    }\n}\n```\n\nWe will modify this example as we demonstrate different types of diagnoses.\n\n", "doc_id": "a7be9e0b-37d8-44c0-af7c-ae3bd7683e5e", "embedding": null, "doc_hash": "d19ff556dcfa9c97d9cfe96809383a1e4708cdf97bbbd241e92c4e817e72a482", "extra_info": null, "node_info": {"start": 0, "end": 662, "_node_type": "1"}, "relationships": {"1": "3a16a3a4-38af-483f-8980-f4f5d8669e49"}}, "__type__": "1"}, "505c1941-0fb8-4431-abbc-eddca10a9c20": {"__data__": {"text": "\n\nUnexpected abort\n\nIf we run the Move Prover on the example immediately above, we get the following error:\n\n```\nerror: abort not covered by any of the `aborts_if` clauses\n   \u250c\u2500 m.move:11:5\n   \u2502\n 8 \u2502           r.value = r.value + 1;\n   \u2502                             - abort happened here with execution failure\n   \u00b7\n11 \u2502 \u256d     spec increment {\n12 \u2502 \u2502         aborts_if !exists(a);\n13 \u2502 \u2502         ensures global(a).value == old(global(a)).value + 1;\n14 \u2502 \u2502     }\n   \u2502 \u2570\u2500\u2500\u2500\u2500\u2500^\n   \u2502\n   =     at m.move:6: increment\n   =         a = 0x29\n   =     at m.move:7: increment\n   =         r = &mmm.Counter{value = 255u8}\n   =     at m.move:8: increment\n   =         ABORTED\n\n{\n  \"Error\": \"Move Prover failed: exiting with verification errors\"\n}\n```\n\nThe Move Prover has generated an example counter that leads to an overflow when adding 1 to the value of 255 for an `u8`. This overflow occurs if the function specification calls for abort behavior, but the condition under which the function is aborting is not covered by the specification. And in fact, with `aborts_if !exists(a)`, we only cover the abort caused by the absence of the resource, but not the abort caused by the arithmetic overflow.\n\nLet's fix the above and add the following condition:\n\n```move\nspec increment {\n    aborts_if global(a).value == 255;\n    ...\n}\n```\n\nWith this, the Move Prover will succeed without any errors.\n\n", "doc_id": "505c1941-0fb8-4431-abbc-eddca10a9c20", "embedding": null, "doc_hash": "5932c331724d72a4ff0a4c17a39f1313aeb5f7a0d7a59149ae17947164c7a795", "extra_info": null, "node_info": {"start": 0, "end": 1383, "_node_type": "1"}, "relationships": {"1": "9fc567e7-fad2-406a-a1bf-8ccc7e4f55d9"}}, "__type__": "1"}, "c17799bf-895d-4a95-8828-c9e232c9b8b5": {"__data__": {"text": "\n\nPostcondition failure\n\nLet us inject an error into the `ensures` condition of the above example:\n\n```move\nspec increment {\n    ensures global(a).value == /*old*/(global(a).value) + 1;\n}\n```\n\nWith this, the Move Prover will produce the following diagnosis:\n\n```\nerror: post-condition does not hold\n   \u250c\u2500 m.move:14:9\n   \u2502\n14 \u2502         ensures global(a).value == /*old*/(global(a).value) + 1;\n   \u2502         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   \u2502\n   =     at m.move:6: increment\n   =         a = 0x29\n   =     at m.move:7: increment\n   =         r = &mmm.Counter{value = 0u8}\n   =     at m.move:8: increment\n   =     at m.move:9: increment\n   =     at m.move:12: increment (spec)\n   =     at m.move:15: increment (spec)\n   =     at m.move:13: increment (spec)\n   =     at m.move:14: increment (spec)\n\n{\n  \"Error\": \"Move Prover failed: exiting with verification errors\"\n}\n```\n\nWhile we know what the error is (as we just injected it), this is not particularly obvious in the output This is because we don't directly see on which values the `ensures` condition was actually evaluated. To see\nthis, use the `-t` (`--trace`) option; this is not enabled by default because it makes the verification problem slightly harder for the solver.\n\nInstead or in addition to the `--trace` option, you can use the built-in function `TRACE(exp)` in conditions to explicitly mark expressions whose values should be printed on verification failures.\n\n> NOTE: Expressions that depend on quantified symbols cannot be traced. Also, expressions appearing in\n> specification functions can not currently be traced.\n\n", "doc_id": "c17799bf-895d-4a95-8828-c9e232c9b8b5", "embedding": null, "doc_hash": "1cf8a75537f80ae63e4634887c8f86c8cd81a93d475c0984fa877f900d730009", "extra_info": null, "node_info": {"start": 0, "end": 1630, "_node_type": "1"}, "relationships": {"1": "292a4e87-1f65-4a32-9761-e85d626713be"}}, "__type__": "1"}, "2a6bb238-d446-446b-a5af-7696569f8c0f": {"__data__": {"text": "\n\nDebugging the Move Prover\n\nThe Move Prover is an evolving tool with bugs and deficiencies. Sometimes it might be necessary to debug a problem based on the output the Move Prover passes to the underlying backends. If you pass the option `--dump`, the Move Prover will output the original Move bytecode, as well as the Move Prover bytecode, as the former is transformed during compilation.\n\n", "doc_id": "2a6bb238-d446-446b-a5af-7696569f8c0f", "embedding": null, "doc_hash": "f8f6f9033465b21e39cbec904bcb5873c4f83aeae97d04f7efc97717037f10c5", "extra_info": null, "node_info": {"start": 0, "end": 391, "_node_type": "1"}, "relationships": {"1": "7b3173b6-3b38-495d-aed5-49f5c9b4e910"}}, "__type__": "1"}, "b83a2192-0830-4777-8402-9aa5c5bd16a6": {"__data__": {"text": "\n\nMove Prover\n\nThe Move Prover supports formal specification and verification of Move code. The Move Prover can automatically validate logical properties of Move smart contracts while offering a user experience similar to a type checker or linter.\n\nThe Move Prover exists to make contracts more *trustworthy*; it:\n\n- Protects massive assets managed by the Aptos blockchain from smart contract bugs\n- Protects against well-resourced adversaries\n- Anticipates justified regulator scrutiny and compliance requirements\n- Allows domain experts with a mathematical background, but not necessarily a software engineering background, to understand what smart contracts do\n\nFor more information, refer to the documentation:\n\n- Installation \n- Move Prover User Guide\n- Move Specification Language\n- Move Prover Supporting Resources\n\n", "doc_id": "b83a2192-0830-4777-8402-9aa5c5bd16a6", "embedding": null, "doc_hash": "779f86b306c600f84d8cb0aaa9c94fba114ab813add479a4cc5af2b329bb3ae7", "extra_info": null, "node_info": {"start": 0, "end": 823, "_node_type": "1"}, "relationships": {"1": "36cc2ab9-9ae5-41f4-9121-3203190bf773"}}, "__type__": "1"}, "3ae3da5e-c560-44a6-917e-d1cf472067ab": {"__data__": {"text": "\n\nAptos Python SDK\n\nAptos provides a lightly maintained official Python SDK. It is available on PyPi with the source code in the Aptos-core GitHub repository. Much of the functionality of the Python SDK mirrors the Typescript SDK. The primary purpose of the Python SDK is to help Python developers to quickly become familiar with Aptos and as an accompaniment to Aptos tutorials.\n\n", "doc_id": "3ae3da5e-c560-44a6-917e-d1cf472067ab", "embedding": null, "doc_hash": "f0e87a148133dd5432fcfbbf99c4f7d43d01b529a8f0ebce5e46384f0c05a06c", "extra_info": null, "node_info": {"start": 0, "end": 381, "_node_type": "1"}, "relationships": {"1": "9f1886ac-ee86-48c5-9c39-82ddc9ba1b73"}}, "__type__": "1"}, "087ca9d0-a31f-4a35-beb1-0c698821f30b": {"__data__": {"text": "\n\nInstalling Python SDK\n\nThe Python SDK can either be installed via `pip`, from source, or embedded:\n\n", "doc_id": "087ca9d0-a31f-4a35-beb1-0c698821f30b", "embedding": null, "doc_hash": "9851608b7ebc8c8a2b4241e72557800214e16e8c4327ef5cd659af57886a9a0b", "extra_info": null, "node_info": {"start": 0, "end": 102, "_node_type": "1"}, "relationships": {"1": "adc7ff50-3b02-4cf8-9718-d858ac2f7789"}}, "__type__": "1"}, "f1939ce9-54eb-4342-be0f-14680b307c4a": {"__data__": {"text": "\n\nInstall with pip\n\nTo install via `pip`:\n\n```bash\npip3 install aptos-sdk\n```\n\nThe `aptos-sdk` will be installed in the local site packages directory. For example, on macOS, you will find the `aptos-sdk` in the `~/Library/Python/3.8/lib/python/site-packages/aptos_sdk` directory.\n\n", "doc_id": "f1939ce9-54eb-4342-be0f-14680b307c4a", "embedding": null, "doc_hash": "e7bacc218fb83ba618ed917e408b684cb6cd69a137e83663815efd4ba2b2dd64", "extra_info": null, "node_info": {"start": 0, "end": 281, "_node_type": "1"}, "relationships": {"1": "b0890d10-cda3-4616-abde-232d38e5030e"}}, "__type__": "1"}, "3b9a0a3d-044e-42a3-b5a9-d65a513d2f87": {"__data__": {"text": "\n\nInstall from the source code\n\nTo install from source:\n\n```bash\ngit clone https://github.com/aptos-labs/aptos-core\ncd aptos-core/ecosystem/python/sdk\npython3 setup.py install --user\n```\n\n", "doc_id": "3b9a0a3d-044e-42a3-b5a9-d65a513d2f87", "embedding": null, "doc_hash": "5e1fdf00505891538da11378bb8f0e53158390bbbbcd5647c115425b4dc1b4fa", "extra_info": null, "node_info": {"start": 0, "end": 188, "_node_type": "1"}, "relationships": {"1": "f4b8cad4-d25c-4fa4-a16e-28bd09580d93"}}, "__type__": "1"}, "7fe8aabf-383e-4b6d-942e-01d417bb1dfd": {"__data__": {"text": "\n\nInstall by embedding\n\nTo embed the Python SDK into your existing Python project:\n\n```\ncd /path/to/python/project\ncp -r /path/to/aptos-core/ecosystem/python/sdk/aptos-sdk aptos-sdk\n```\n\n", "doc_id": "7fe8aabf-383e-4b6d-942e-01d417bb1dfd", "embedding": null, "doc_hash": "4038a6dc248a0c2ee80a2c82718c1d0dca4cc5373345f69eaa44bbb3fc79994d", "extra_info": null, "node_info": {"start": 0, "end": 187, "_node_type": "1"}, "relationships": {"1": "d32bb211-366a-4908-9141-0b41a37102d1"}}, "__type__": "1"}, "9a5742c0-0fb6-45b9-8a8a-87e16d4ff88b": {"__data__": {"text": "\n\nUsing the Python SDK\n\nSee the Developer Tutorials for code examples showing how to use the Python SDK.\n", "doc_id": "9a5742c0-0fb6-45b9-8a8a-87e16d4ff88b", "embedding": null, "doc_hash": "39a2453f74243b60ae0f712e9dc9e84cd9c2efde0366c75cec8295a6b1b5dd60", "extra_info": null, "node_info": {"start": 0, "end": 105, "_node_type": "1"}, "relationships": {"1": "525e48cc-bd07-42a4-a12a-ea15f7b960e7"}}, "__type__": "1"}, "b4a11c68-a39f-4f88-97cd-0f74c8f2bb7e": {"__data__": {"text": "\n\nReferences\n\nMove has two types of references: immutable `&` and mutable `&mut`. Immutable references are read\nonly, and cannot modify the underlying value (or any of its fields). Mutable references allow for\nmodifications via a write through that reference. Move's type system enforces an ownership\ndiscipline that prevents reference errors.\n\nFor more details on the rules of references, see Structs and Resources\n\n", "doc_id": "b4a11c68-a39f-4f88-97cd-0f74c8f2bb7e", "embedding": null, "doc_hash": "88be25bd58a9a49a87b94f9a63c6d133f9fad0750cb75edc3bfa4df2467f4682", "extra_info": null, "node_info": {"start": 0, "end": 417, "_node_type": "1"}, "relationships": {"1": "d4647199-d2fd-4f96-a305-3c4fc481b852"}}, "__type__": "1"}, "6a5cf043-3046-4445-931a-828d8e403f2b": {"__data__": {"text": "\n\nReference Operators\n\nMove provides operators for creating and extending references as well as converting a mutable\nreference to an immutable one. Here and elsewhere, we use the notation `e: T` for \"expression `e`\nhas type `T`\".\n\n| Syntax      | Type                                                  | Description                                                    |\n| ----------- | ----------------------------------------------------- | -------------------------------------------------------------- |\n| `&e`        | `&T` where `e: T` and `T` is a non-reference type     | Create an immutable reference to `e`                           |\n| `&mut e`    | `&mut T` where `e: T` and `T` is a non-reference type | Create a mutable reference to `e`.                             |\n| `&e.f`      | `&T` where `e.f: T`                                   | Create an immutable reference to field `f` of struct `e`.      |\n| `&mut e.f`  | `&mut T` where `e.f: T`                               | Create a mutable reference to field `f` of struct`e`.          |\n| `freeze(e)` | `&T` where `e: &mut T`                                | Convert the mutable reference `e` into an immutable reference. |\n\nThe `&e.f` and `&mut e.f` operators can be used both to create a new reference into a struct or to\nextend an existing reference:\n\n```move\nlet s = S { f: 10 };\nlet f_ref1: &u64 = &s.f; // works\nlet s_ref: &S = &s;\nlet f_ref2: &u64 = &s_ref.f // also works\n```\n\nA reference expression with multiple fields works as long as both structs are in the same module:\n\n```move\nstruct A { b: B }\nstruct B { c : u64 }\nfun f(a: &A): &u64 {\n  &a.b.c\n}\n```\n\nFinally, note that references to references are not allowed:\n\n```move\nlet x = 7;\nlet y: &u64 = &x;\nlet z: &&u64 = &y; // will not compile\n```\n\n", "doc_id": "6a5cf043-3046-4445-931a-828d8e403f2b", "embedding": null, "doc_hash": "43aa86053dbc41ea541d8e43dae752b3fd77491d4b66a43abf897256c654d53d", "extra_info": null, "node_info": {"start": 0, "end": 1777, "_node_type": "1"}, "relationships": {"1": "42996860-f855-4f58-be01-d11fc0ad40a3"}}, "__type__": "1"}, "faae5fee-00b8-449f-9c3f-8b8b6e55629e": {"__data__": {"text": "\n\nReading and Writing Through References\n\nBoth mutable and immutable references can be read to produce a copy of the referenced value.\n\nOnly mutable references can be written. A write `*x = v` discards the value previously stored in `x`\nand updates it with `v`.\n\nBoth operations use the C-like `*` syntax. However, note that a read is an expression, whereas a\nwrite is a mutation that must occur on the left hand side of an equals.\n\n| Syntax     | Type                                | Description                         |\n| ---------- | ----------------------------------- | ----------------------------------- |\n| `*e`       | `T` where `e` is `&T` or `&mut T`   | Read the value pointed to by `e`    |\n| `*e1 = e2` | `()` where `e1: &mut T` and `e2: T` | Update the value in `e1` with `e2`. |\n\nIn order for a reference to be read, the underlying type must have the\n`copy` ability as reading the reference creates a new copy of the value. This rule\nprevents the copying of resource values:\n\n```move=\nfun copy_resource_via_ref_bad(c: Coin) {\n    let c_ref = &c;\n    let counterfeit: Coin = *c_ref; // not allowed!\n    pay(c);\n    pay(counterfeit);\n}\n```\n\nDually: in order for a reference to be written to, the underlying type must have the\n`drop` ability as writing to the reference will discard (or \"drop\") the old value.\nThis rule prevents the destruction of resource values:\n\n```move=\nfun destroy_resource_via_ref_bad(ten_coins: Coin, c: Coin) {\n    let ref = &mut ten_coins;\n    *ref = c; // not allowed--would destroy 10 coins!\n}\n```\n\n", "doc_id": "faae5fee-00b8-449f-9c3f-8b8b6e55629e", "embedding": null, "doc_hash": "204ee5585163e932882806247240afad14c3590c61ff1f0830a8231802808c7d", "extra_info": null, "node_info": {"start": 0, "end": 1542, "_node_type": "1"}, "relationships": {"1": "6a3438e6-3866-4824-920e-49180f561e07"}}, "__type__": "1"}, "428c3bde-9735-4e6c-8c82-226af0c8eb1e": {"__data__": {"text": "\n\n`freeze` inference\n\nA mutable reference can be used in a context where an immutable reference is expected:\n\n```move\nlet x = 7;\nlet y: &u64 = &mut x;\n```\n\nThis works because the under the hood, the compiler inserts `freeze` instructions where they are\nneeded. Here are a few more examples of `freeze` inference in action:\n\n```move=\nfun takes_immut_returns_immut(x: &u64): &u64 { x }\n\n// freeze inference on return value\nfun takes_mut_returns_immut(x: &mut u64): &u64 { x }\n\nfun expression_examples() {\n    let x = 0;\n    let y = 0;\n    takes_immut_returns_immut(&x); // no inference\n    takes_immut_returns_immut(&mut x); // inferred freeze(&mut x)\n    takes_mut_returns_immut(&mut x); // no inference\n\n    assert!(&x == &mut y, 42); // inferred freeze(&mut y)\n}\n\nfun assignment_examples() {\n    let x = 0;\n    let y = 0;\n    let imm_ref: &u64 = &x;\n\n    imm_ref = &x; // no inference\n    imm_ref = &mut y; // inferred freeze(&mut y)\n}\n```\n\n", "doc_id": "428c3bde-9735-4e6c-8c82-226af0c8eb1e", "embedding": null, "doc_hash": "365ad8fc749ebe3017ac9a85bb1d64530f96061e7d26d0fc1d0a30c05d4c8bea", "extra_info": null, "node_info": {"start": 0, "end": 942, "_node_type": "1"}, "relationships": {"1": "b9ce4dd4-201f-4572-9b1a-223dab0e551d"}}, "__type__": "1"}, "5aed2a5a-3fb8-40a4-b592-f178585562b8": {"__data__": {"text": "\n\nSubtyping\n\nWith this `freeze` inference, the Move type checker can view `&mut T` as a subtype of `&T`. As shown\nabove, this means that anywhere for any expression where a `&T` value is used, a `&mut T` value can\nalso be used. This terminology is used in error messages to concisely indicate that a `&mut T` was\nneeded where a `&T` was supplied. For example\n\n```move=\naddress 0x42 {\nmodule example {\n    fun read_and_assign(store: &mut u64, new_value: &u64) {\n        *store = *new_value\n    }\n\n    fun subtype_examples() {\n        let x: &u64 = &0;\n        let y: &mut u64 = &mut 1;\n\n        x = &mut 1; // valid\n        y = &2; // invalid!\n\n        read_and_assign(y, x); // valid\n        read_and_assign(x, y); // invalid!\n    }\n}\n}\n```\n\nwill yield the following error messages\n\n```text\nerror:\n\n    \u250c\u2500\u2500 example.move:12:9 \u2500\u2500\u2500\n    \u2502\n 12 \u2502         y = &2; // invalid!\n    \u2502         ^ Invalid assignment to local 'y'\n    \u00b7\n 12 \u2502         y = &2; // invalid!\n    \u2502             -- The type: '&{integer}'\n    \u00b7\n  9 \u2502         let y: &mut u64 = &mut 1;\n    \u2502                -------- Is not a subtype of: '&mut u64'\n    \u2502\n\nerror:\n\n    \u250c\u2500\u2500 example.move:15:9 \u2500\u2500\u2500\n    \u2502\n 15 \u2502         read_and_assign(x, y); // invalid!\n    \u2502         ^^^^^^^^^^^^^^^^^^^^^ Invalid call of '0x42::example::read_and_assign'. Invalid argument for parameter 'store'\n    \u00b7\n  8 \u2502         let x: &u64 = &0;\n    \u2502                ---- The type: '&u64'\n    \u00b7\n  3 \u2502     fun read_and_assign(store: &mut u64, new_value: &u64) {\n    \u2502                                -------- Is not a subtype of: '&mut u64'\n    \u2502\n```\n\nThe only other types currently that has subtyping are tuples\n\n", "doc_id": "5aed2a5a-3fb8-40a4-b592-f178585562b8", "embedding": null, "doc_hash": "99e1efa1829bc1bd50fa5f1676a60b49a1744d3e5204ab937d682e06252d5175", "extra_info": null, "node_info": {"start": 0, "end": 1638, "_node_type": "1"}, "relationships": {"1": "70e7c105-ea52-4031-a1db-f30798b8b42e"}}, "__type__": "1"}, "2dfca10b-0936-48d3-920c-50a8b4c9a3e0": {"__data__": {"text": "\n\nOwnership\n\nBoth mutable and immutable references can always be copied and extended _even if there are existing\ncopies or extensions of the same reference_:\n\n```move\nfun reference_copies(s: &mut S) {\n  let s_copy1 = s; // ok\n  let s_extension = &mut s.f; // also ok\n  let s_copy2 = s; // still ok\n  ...\n}\n```\n\nThis might be surprising for programmers familiar with Rust's ownership system, which would reject\nthe code above. Move's type system is more permissive in its treatment of\ncopies, but equally strict in ensuring unique ownership of mutable\nreferences before writes.\n\n", "doc_id": "2dfca10b-0936-48d3-920c-50a8b4c9a3e0", "embedding": null, "doc_hash": "27584f04c4ff3cd83672760788933ca6a998eebfc3759ca5112d59c25436b843", "extra_info": null, "node_info": {"start": 0, "end": 578, "_node_type": "1"}, "relationships": {"1": "d1e59304-668a-4d1b-97b5-9600f71b292c"}}, "__type__": "1"}, "56b34e8d-bf22-4821-ae71-bf5e38ee5865": {"__data__": {"text": "\n\nReferences Cannot Be Stored\n\nReferences and tuples are the _only_ types that cannot be stored as a field value of structs, which\nalso means that they cannot exist in global storage. All references created during program execution\nwill be destroyed when a Move program terminates; they are entirely ephemeral. This invariant is\nalso true for values of types without the `store` ability, but note that\nreferences and tuples go a step further by never being allowed in structs in the first place.\n\nThis is another difference between Move and Rust, which allows references to be stored inside of\nstructs.\n\nCurrently, Move cannot support this because references cannot be\nserialized, but _every Move value must be\nserializable_. This requirement comes from Move's\npersistent global storage, which needs to serialize values to\npersist them across program executions. Structs can be written to global storage, and thus they must\nbe serializable.\n\nOne could imagine a fancier, more expressive, type system that would allow references to be stored\nin structs _and_ ban those structs from existing in global storage. We could perhaps allow\nreferences inside of structs that do not have the `store` ability, but that would\nnot completely solve the problem: Move has a fairly complex system for tracking static reference\nsafety, and this aspect of the type system would also have to be extended to support storing\nreferences inside of structs. In short, Move's type system (particularly the aspects around\nreference safety) would have to expand to support stored references. But it is something we are\nkeeping an eye on as the language evolves.\n\n", "doc_id": "56b34e8d-bf22-4821-ae71-bf5e38ee5865", "embedding": null, "doc_hash": "1e034cc668e30cf36b1ab22bbf6593607d441c7cf944facb9c75bb2bd4971e8c", "extra_info": null, "node_info": {"start": 0, "end": 1636, "_node_type": "1"}, "relationships": {"1": "9e1a3563-e49d-456c-b774-e7089a56134f"}}, "__type__": "1"}, "11a4a2f2-8172-458e-91e4-165307f1040e": {"__data__": {"text": "\n\nLatest Aptos Releases\n\nThis section contains details for the latest Aptos releases. See the sub-pages for the latest release for each network:\n\n* Latest Mainnet Release\n* Latest Testnet Release\n* Latest Devnet Release\n\nAptos typically conducts multiple devnet releases for each testnet and mainnet release. Hence, devnet releases use commit hashes for tracking rather than version numbers. Testnet and mainnet releases usually have a one-to-one correlation, meaning each testnet release rolls into mainnet.\n\nHot fixes are exceptions that may occur in mainnet to address urgent issues in production. See the Aptos Release Process for more details.\n\n", "doc_id": "11a4a2f2-8172-458e-91e4-165307f1040e", "embedding": null, "doc_hash": "edef7de8192e748977b08f58cfd3a90e42e61d9b39bf716c174964af6f91410d", "extra_info": null, "node_info": {"start": 0, "end": 650, "_node_type": "1"}, "relationships": {"1": "ebb8dc06-5385-40d6-9b6e-8e8b65446197"}}, "__type__": "1"}, "af33c1b7-e54a-450b-8633-9ca96e5be42d": {"__data__": {"text": "\n\nUpdate nodes\n\nIf you are a node operator, update your nodes with the new release.\n\n", "doc_id": "af33c1b7-e54a-450b-8633-9ca96e5be42d", "embedding": null, "doc_hash": "c2b0f32c2ca666e08d167d82b182881d79e5a54baa5fb6dcebf001e61ae760fc", "extra_info": null, "node_info": {"start": 0, "end": 85, "_node_type": "1"}, "relationships": {"1": "b12a15cb-bbc2-484c-9ada-72acd83427b6"}}, "__type__": "1"}, "d90b6749-600c-4a75-91bc-984f61b9e368": {"__data__": {"text": "\n\nSubscribe to Release Announcements\n\n", "doc_id": "d90b6749-600c-4a75-91bc-984f61b9e368", "embedding": null, "doc_hash": "23c080c4d6e5e3f9d5a710fa9b9025d00a63a1c0cc5d601f56be4edf38d23987", "extra_info": null, "node_info": {"start": 0, "end": 38, "_node_type": "1"}, "relationships": {"1": "35db4f0d-4eaa-4437-aaa4-eec9eddc7341"}}, "__type__": "1"}, "72b1c187-0328-4342-99ce-a998201deeab": {"__data__": {"text": "\n\nSubscribe via GitHub\n1. Go to the aptos-labs/aptos-core repository.\n2. Open the **Watch** menu and select **Custom**.\n3. Select the **Releases** checkbox and click **Apply**.\n\n", "doc_id": "72b1c187-0328-4342-99ce-a998201deeab", "embedding": null, "doc_hash": "70ca62e23589f2a1193d8b12f99c9a9e217f0fd8ca6f69924dd6b6775046cde9", "extra_info": null, "node_info": {"start": 0, "end": 178, "_node_type": "1"}, "relationships": {"1": "3e2cd287-959d-49ae-8c6a-44bb3de62fc7"}}, "__type__": "1"}, "278a94c0-4741-4c9e-ab17-101b4b51eac1": {"__data__": {"text": "\n\nSubscribe via Aptos Discord\nJoin the Aptos Discord server to interact with us and our community. We also post upcoming releases in these channels.\n\n  * #mainnet-release\n  * #testnet-release\n  * #devnet-release\n\n", "doc_id": "278a94c0-4741-4c9e-ab17-101b4b51eac1", "embedding": null, "doc_hash": "cdeb9e61874f6c4e994fb5eaaf3f220c0eda6b31be83da9e8686bd7c0cf29766", "extra_info": null, "node_info": {"start": 0, "end": 213, "_node_type": "1"}, "relationships": {"1": "4a3fbf3e-eefe-481e-b906-29fdf65e76ad"}}, "__type__": "1"}, "bf8fee0f-b9ba-41a2-a210-6e3f10309ff5": {"__data__": {"text": "\n\nSubscribe via Aptos Twitter\nFollow @AptosRelease on Twitter to get the latest updates about our upcoming mainnet releases and be notified when it is time to update your node.\nEvery couple of days, @AptosRelease will tweet a countdown to remind you to update to the latest version. *Note: We do not post about hotfixes here!*\n\n", "doc_id": "bf8fee0f-b9ba-41a2-a210-6e3f10309ff5", "embedding": null, "doc_hash": "20b979d943ca189aac63a8dffa8abdabef123bfea79158c76a81ba50d3c8f7a5", "extra_info": null, "node_info": {"start": 0, "end": 328, "_node_type": "1"}, "relationships": {"1": "516ee85f-1c3b-45e6-808b-9368cbd93a59"}}, "__type__": "1"}, "2d2dd0c2-7495-4d6b-9c0d-d7942ae760d6": {"__data__": {"text": "\n\nAptos Release Process\nTo understand how we conduct releases, review the Aptos Release Process.\n\n", "doc_id": "2d2dd0c2-7495-4d6b-9c0d-d7942ae760d6", "embedding": null, "doc_hash": "4b31ae7ed74119825ec14a38e037542a73febd58ffd38efefd2f3de0b1afa5a8", "extra_info": null, "node_info": {"start": 0, "end": 98, "_node_type": "1"}, "relationships": {"1": "11d1b09f-820f-4704-babb-9aece43f6245"}}, "__type__": "1"}, "c8927c13-fafa-4234-b40e-d4c7bb58d0c6": {"__data__": {"text": "\n\nUse Remix IDE Plugin\n\nThis tutorial explains how to deploy and run Move modules with the WELLDONE Code Remix IDE plugin. This tool offers a graphical interface for developing Move modules. \n\nHere are the steps to use the Remix IDE plugin for Move (described in detail below):\n\n1. Connect to Remix IDE.\n2. Select a chain.\n3. Install a browser extension wallet.\n4. Create the project. \n5. Compile and publish a Move module to the Aptos blockchain.\n6. Interact with a Move module.\n\n", "doc_id": "c8927c13-fafa-4234-b40e-d4c7bb58d0c6", "embedding": null, "doc_hash": "f45ef86a0da023e581a533943dfd8a2e50af49b2dd0b6bfae21d5881dc54ea08", "extra_info": null, "node_info": {"start": 0, "end": 481, "_node_type": "1"}, "relationships": {"1": "9e4dac57-c439-4546-b4c1-c6ee13a2de5d"}}, "__type__": "1"}, "02f7697c-b8ab-4472-8b8e-dc1b9429df84": {"__data__": {"text": "\n\nStep 1: Connect to Remix IDE\n\n1. Load the Remix IDE.\n\n2. Accept or decline the personal information agreement and dismiss any demonstrations.\n\n3. Click\u00a0the **Plugin Manager**\u00a0button near the bottom left, search for\u00a0*CODE BY WELLDONE STUDIO*,\u00a0and click **Activate**.\n\n\n<ThemedImage\nalt=\"Remix IDE plugin\"\nsources={{\n    light: useBaseUrl('/img/docs/remix-ide-plugin.png'),\n    dark: useBaseUrl('/img/docs/remix-ide-plugin.png'),\n  }}\nwidth= \"80%\"\n/>\n\n\n", "doc_id": "02f7697c-b8ab-4472-8b8e-dc1b9429df84", "embedding": null, "doc_hash": "7b95981e025dd153db452f633ec7b1c122c1c9d7fac4d996312863ba994b9e30", "extra_info": null, "node_info": {"start": 0, "end": 453, "_node_type": "1"}, "relationships": {"1": "f949b24b-198b-46c4-8b66-6cd274a718bc"}}, "__type__": "1"}, "70eac124-bcc9-4ee4-b5ef-d390799c22da": {"__data__": {"text": "\n\nStep 2: Select a Chain\n\nClick the newly created icon at the bottom of the left menu. Then, select **Aptos (MoveVM)** from the chain list.\n\n\n<ThemedImage\nalt=\"Remix Select a chain\"\nsources={{\n    light: useBaseUrl('/img/docs/remix-select-chain.png'),\n    dark: useBaseUrl('/img/docs/remix-select-chain.png'),\n  }}\nwidth=\"50%\"\n/>\n\n\n", "doc_id": "70eac124-bcc9-4ee4-b5ef-d390799c22da", "embedding": null, "doc_hash": "eb02c32bcbe168e1d4f8b84796ba86d1ff046fd73febbc27126a8502065397e4", "extra_info": null, "node_info": {"start": 0, "end": 332, "_node_type": "1"}, "relationships": {"1": "63344b16-1c73-4384-9d26-9d10fecbbdd7"}}, "__type__": "1"}, "e6d9715b-fb29-48fc-becd-e16e358fb01d": {"__data__": {"text": "\n\nStep 3: Install a wallet\n\nWELLDONE Wallet can be used with the Remix IDE plugin now, with support for Petra wallet coming soon. See the list of Aptos wallets available in the ecosystem.\n\nThis steps assumes you are using the WELLDONE Wallet. Follow\u00a0the manual\u00a0to install the wallet and create an account for the Aptos blockchain. Once that is done, follow these steps:\n\n1. Choose a network (e.g. devnet) in the dropdown menu at the top of the main tab.\n1. Go into the **Settings** tab of your wallet and activate **Developer Mode**.\n\nNow in the Remix UI click the\u00a0**Connect to WELLDONE**\u00a0button to connect to the\u00a0**WELLDONE Wallet**. \n\nClick the\u00a0**Refresh**\u00a0button in the upper right corner of the plug-in to apply changes to your wallet.\n\n", "doc_id": "e6d9715b-fb29-48fc-becd-e16e358fb01d", "embedding": null, "doc_hash": "d7dbc9a9c79f905bb0efaec295e88878f13433165e080f9690449cc1f61392ed", "extra_info": null, "node_info": {"start": 0, "end": 741, "_node_type": "1"}, "relationships": {"1": "42c3adae-c6de-40ea-8c04-de5fa5b77685"}}, "__type__": "1"}, "b775945a-ebd1-4dda-948d-c51fd4fb5438": {"__data__": {"text": "\n\nStep 4: Create the Project\n\nIn Aptos, you can write smart contracts with the Move programming language.\u00a0**WELLDONE Code**\u00a0provides two features to help developers new to Aptos and Move.\n\n", "doc_id": "b775945a-ebd1-4dda-948d-c51fd4fb5438", "embedding": null, "doc_hash": "0c480d9394d8c7f4b0b41d6b66b34502e34c1a4d50ef137af964fb1422d56b7b", "extra_info": null, "node_info": {"start": 0, "end": 189, "_node_type": "1"}, "relationships": {"1": "f6a52afb-6d44-46d0-82d1-f3f6c24e73ac"}}, "__type__": "1"}, "36000b42-7b33-403e-9485-cae1cf4082a0": {"__data__": {"text": "\n\nSelect a template\n\nCreate simple example contract code written in Move. You can create a sample contract by selecting the *template* option and clicking the **Create** button.\n\n\n<ThemedImage\nalt=\"Remix Template Code\"\nsources={{\n    light: useBaseUrl('/img/docs/remix-template-code.png'),\n    dark: useBaseUrl('/img/docs/remix-template-code.png'),\n  }}\nwidth=\"50%\"\n/>\n\n\n", "doc_id": "36000b42-7b33-403e-9485-cae1cf4082a0", "embedding": null, "doc_hash": "fef67931e4fe7fceb9be6820d20f38df7399f76f124028b83d8b7431863aa6a7", "extra_info": null, "node_info": {"start": 0, "end": 371, "_node_type": "1"}, "relationships": {"1": "eedefd53-7c2b-49b9-82c1-dbba192de0b5"}}, "__type__": "1"}, "506f49f7-9502-49f8-a1f4-0fb7ce4b43bf": {"__data__": {"text": "\n\nCreate a new project\n\nAutomatically generate the Move module structure. Write a name for the project, and click the **Create** button to create a Move module structure.\n\n:::info\nYou can create your own Move projects without using the features above. However, for the Remix IDE plugin to build and deploy the Move module, it must be built within the directory `aptos/`. If you start a new project, the structure should resemble:\n:::\n\n  ```\n  aptos\n  \u2514\u2500\u2500 \n      \u251c\u2500\u2500 Move.toml\n      \u2514\u2500\u2500 sources\n          \u2514\u2500\u2500 YOUR_CONTRACT_FILE.move\n  ```\n\n", "doc_id": "506f49f7-9502-49f8-a1f4-0fb7ce4b43bf", "embedding": null, "doc_hash": "0c50c1267afc5115563ea6df10a0279c67fd39e7516e245280ff680b6b86debc", "extra_info": null, "node_info": {"start": 0, "end": 539, "_node_type": "1"}, "relationships": {"1": "c4309c1e-addc-461c-803a-d365e04e5187"}}, "__type__": "1"}, "969b9bcb-3525-42ba-a5dd-d57534df169c": {"__data__": {"text": "\n\nStep 5: Compile and publish a Move module to the Aptos blockchain\n\n1. Select the project you want to compile in the\u00a0**PROJECT TO COMPILE**\u00a0section.\n2. Add your address to the `Move.toml` file.\n3. Click the\u00a0`Compile`\u00a0button. \n\n```toml\n[package]\nname = \"Examples\"\nversion = \"0.0.0\"\n\n[addresses]\nhello_blockchain = \"your address\"\n\n[dependencies]\nAptosFramework = { git = \"https://github.com/aptos-labs/aptos-core.git\", subdir = \"aptos-move/framework/aptos-framework/\", rev = \"aptos-node-v1.2.0\" }\n```\n\n4. When the compilation is complete, a compiled binary file is returned in\u00a0the `aptos//out`\u00a0directory.\n\nIf you need to revise the contract and compile again, delete the\u00a0`out`\u00a0directory and click **Compile** once more.\n\n5. Once you have compiled contract code, the\u00a0`Deploy` button will be activated.\n\n", "doc_id": "969b9bcb-3525-42ba-a5dd-d57534df169c", "embedding": null, "doc_hash": "cac9fb0bbdf81468dfc0e83ffd54a02e69956490be71e55ebc6d7d2978bf090f", "extra_info": null, "node_info": {"start": 0, "end": 801, "_node_type": "1"}, "relationships": {"1": "e95dc7b1-7c6b-4ce0-8adf-772283563727"}}, "__type__": "1"}, "42cbb140-ebc3-4898-ba9d-7929683d76f9": {"__data__": {"text": "\n\nStep 6: Interact with a Move module\n\n:::info\nThere are two ways to import contracts.\n1. Automatically import contracts deployed through the above process.\n2. Import existing deployed contracts through\u00a0the **At Address**\u00a0button.\n:::\n\n1. Check the modules and resources owned by the current account and read the resources through the **Get Resource** button.\n2. You can select a function, enter parameters as needed, and click a button to run the function. For an entry function - not the view function - a signature from the WELLDONE Wallet is required because the transaction signature and request are required.\n\n\n<ThemedImage\nalt=\"Remix View Function\"\nsources={{\n    light: useBaseUrl('/img/docs/remix-view-function.png'),\n    dark: useBaseUrl('/img/docs/remix-view-function.png'),\n  }}\n/>\n\n<ThemedImage\nalt=\"Remix Entry Function\"\nsources={{\n    light: useBaseUrl('/img/docs/remix-entry-function.png'),\n    dark: useBaseUrl('/img/docs/remix-entry-function.png'),\n  }}\n/>\n\n\n", "doc_id": "42cbb140-ebc3-4898-ba9d-7929683d76f9", "embedding": null, "doc_hash": "f0e137d6f159028c8c3d00a69ff342f466876f78be6d4e5cab0f534d1db528fe", "extra_info": null, "node_info": {"start": 0, "end": 976, "_node_type": "1"}, "relationships": {"1": "d4265aea-6001-4ec9-92f9-c0c5d0ba3ed9"}}, "__type__": "1"}, "3709203d-a02f-4a61-a6a3-c77072b5e0e0": {"__data__": {"text": "\n\nGet support\n\nClick the\u00a0**Documentation**\u00a0button to seek help with this Remix IDE plugin. To file requests, click the\u00a0**Make an issue**\u00a0button to go to the\u00a0welldonestudio\u00a0GitHub Repository and file an issue.\n\n", "doc_id": "3709203d-a02f-4a61-a6a3-c77072b5e0e0", "embedding": null, "doc_hash": "11fa50acb2051db8a3a6550399591c3e1c2933e005859c7c664d5e0050e2b965", "extra_info": null, "node_info": {"start": 0, "end": 210, "_node_type": "1"}, "relationships": {"1": "5ea48a5a-de08-453f-a4b1-e19059cfdc88"}}, "__type__": "1"}, "4f248227-2814-4df7-b3e7-cf69f808159f": {"__data__": {"text": "\n\nResource Accounts\n\nA resource account is a developer feature used to manage resources independent of an account managed by a user, specifically publishing modules and automatically signing for transactions. For example, a developer may use a resource account to manage an account for module publishing, say managing a contract. The contract itself does not require a signer post initialization. A resource account gives you the means for the module to provide a signer to other modules and sign transactions on behalf of the module.\n\nTypically, a resource account is used for two main purposes:\n\n* Store and isolate resources; a module creates a resource account just to host specific resources.\n* Publish module as a standalone (resource) account, a building block in a decentralized design where no private keys can control the resource account. The ownership (SignerCap) can be kept in another module, such as governance.\n\n", "doc_id": "4f248227-2814-4df7-b3e7-cf69f808159f", "embedding": null, "doc_hash": "cba56f618b1f64ca0db3c29fe4f7739d0f3de14e4c399cfb14aaa8d43eca63ce", "extra_info": null, "node_info": {"start": 0, "end": 928, "_node_type": "1"}, "relationships": {"1": "b72bf6f4-5a2a-4c24-8d86-03c87b241439"}}, "__type__": "1"}, "143a6702-7ab7-4f13-953c-6d01e29ee2be": {"__data__": {"text": "\n\nRestrictions\n\nIn Aptos, a resource account is created based upon the SHA3-256 hash of the source's address and additional seed data. A resource account can be created only once; for a given source address and seed, there can be only one resource account. That is because the calculation of the resource account address is fully determined by the former.\n\nAn entity may call `create_account` in an attempt to claim an account ahead of the creation of a resource account. But if a resource account is found, Aptos will transition ownership of the account over to the resource account. This is done by validating that the account has yet to execute any transactions and that the `Account::signer_capbility_offer::for` is none. The probability of a collision where someone has legitimately produced a private key that maps to a resource account address is improbably low.\n\n", "doc_id": "143a6702-7ab7-4f13-953c-6d01e29ee2be", "embedding": null, "doc_hash": "f0d35286ef068654d09a9d596cbf5ffd3c462e8a39c1e675b2bee869ab44bde1", "extra_info": null, "node_info": {"start": 0, "end": 871, "_node_type": "1"}, "relationships": {"1": "20fd9e77-6154-4250-b903-e92782c6ae98"}}, "__type__": "1"}, "ace272cd-cf1f-481a-a6a4-03a6a879c5ad": {"__data__": {"text": "\n\nSetup\n\nThe easiest way to set up a resource account is by:\n\n1. Using Aptos CLI: `aptos account create-resource-account` creates a resource account, and `aptos move create-resource-account-and-publish-package` creates a resource account and publishes the specified package under the resource account's adddress.\n1. Writing custom smart contracts code: in the `resource_account.move` module, developers can find the resource account creation functions `create_resource_account`, `create_resource_account_and_fund`, and `create_resource_account_and_publish_package`. Developers can then call those functions to create resource accounts in their smart contracts.\n\nEach of those options offers slightly different functionality:\n* `create_resource_account` - merely creates the resource account but doesn't fund it, retaining access to the resource account's signer until explicitly calling `retrieve_resource_account_cap`.\n* `create_resource_account_and_fund` - creates the resource account and funds it, retaining access to the resource account's signer until explicitly calling `retrieve_resource_account_cap`.\n* `create_resource_account_and_publish_package` - creates the resource account and results in loss of access to the resource account by design, because resource accounts are used to make contracts autonomous and immutable.\n\nIn this example, you will initialize the `mint_nft` module and retrieve the signer capability from both the resource account and module account. To do so, call `create_resource_account_and_publish_package` to publish the module under the resource account's address.\n\n1. Initialize the module as shown in the `minting.move` example.\n1. Call `create_resource_account_and_publish_package` to publish the module under the resource account's address, such as in the `mint_nft.rs` end-to-end example.\n1. Retrieve the signer cap from the resource account + module account as shown in the `minting.move` example.\n\nNote, if the above `resource_account` signer is **not** already set up as a resource account, retrieving the signer cap will fail. The `source_addr` field in the `retrieve_resource_account_cap` function refers to the the address of the source account, or the account that creates the resource account.\n\nFor an example, see the `SignerCapability` employed by the `mint_nft` function in `minting.move`.\n\nFor more details, see the \"resource account\" references in `resource_account.move` and `account.move`.\n\n", "doc_id": "ace272cd-cf1f-481a-a6a4-03a6a879c5ad", "embedding": null, "doc_hash": "d58bf50c1538c92ab7ba5baba211e8cb3983f6cd51e6612ca8534aa981ddbba2", "extra_info": null, "node_info": {"start": 0, "end": 2446, "_node_type": "1"}, "relationships": {"1": "d77244ac-733b-4c96-b077-e6cea3d15a99"}}, "__type__": "1"}, "d794497d-9582-4b4b-ab43-89d63139b342": {"__data__": {"text": "\n\nResources\n\nOn Aptos, on-chain state is organized into resources and modules. These are then stored within the individual accounts. This is different from other blockchains, such as Ethereum, where each smart contract maintains their own storage space. Additionally, event handles are defined within resources. See Accounts for more details on accounts.\n\n", "doc_id": "d794497d-9582-4b4b-ab43-89d63139b342", "embedding": null, "doc_hash": "45cf6c33a850a7a4fc77d985ca05cdef27d29b8e42f9e1f364a51416a4021394", "extra_info": null, "node_info": {"start": 0, "end": 356, "_node_type": "1"}, "relationships": {"1": "ae14016f-59a1-4cb1-9fc6-e575e46812fe"}}, "__type__": "1"}, "2f90d0aa-73a5-4a4e-802c-6bc5f36e6ae0": {"__data__": {"text": "\n\nResources vs Objects\n\nResources refer to top-level objects that are stored directly with an account on the blockchain. Both resources and objects are instances of structs. Objects can be resources but can also be individual units of state that are stored inside a resource. An example here is how the APT coin is stored: CoinStore is the resource that contains the APT coin, while the Coin itself is an object:\n\n```rust\n/// A holder of a specific coin type and associated event handles.\n/// These are kept in a single resource to ensure locality of data.\nstruct CoinStore has key {\n    coin: Coin,\n}\n\n/// Main structure representing a coin/token in an account's custody.\nstruct Coin has store {\n    /// Amount of coin this address has.\n    value: u64,\n}\n```\n\nThe Coin object can be taken out of CoinStore with the owning account's permission and easily transferred to another CoinStore resource. It can also be kept in any other custom resource, if the definition allows, for example:\n\n```rust\nstruct CustomCoinBox has key {\n    coin: Coin,\n}\n```\n\n", "doc_id": "2f90d0aa-73a5-4a4e-802c-6bc5f36e6ae0", "embedding": null, "doc_hash": "687c93e4bca557737365291483dae1965e39d37b630e989375ffdfc66bbf6dad", "extra_info": null, "node_info": {"start": 0, "end": 1050, "_node_type": "1"}, "relationships": {"1": "647c50d8-985f-450f-80fa-a172735f74d3"}}, "__type__": "1"}, "59333a6c-d0d8-4ba0-8a9e-435fa8ff37f6": {"__data__": {"text": "\n\nDefine resources and objects\n\nAll objects and resources are defined within a module that is stored at an address. For example `0x1234::coin::Coin` would be represented as:\n\n```\nmodule 0x1234::coin {\n    struct CoinStore has key {\n        coin: Coin,\n    }\n\n    struct SomeCoin { }\n}\n```\n\nIn this example, `0x1234` is the address, `coin` is the module, `Coin` is a struct that can be stored as a resource, and `SomeCoin` is a struct that is unlikely to ever be represented as an object. The use of the phantom type allows for there to exist many distinct types of `CoinStore` resources with different `CoinType` parameters.\n\n", "doc_id": "59333a6c-d0d8-4ba0-8a9e-435fa8ff37f6", "embedding": null, "doc_hash": "671753e509b3bb0452bed2a5889c04235c281fc205ee87af17a5670c50bb8142", "extra_info": null, "node_info": {"start": 0, "end": 626, "_node_type": "1"}, "relationships": {"1": "28897194-07be-4dfd-9363-9a5eca9c70cd"}}, "__type__": "1"}, "e14ff0cc-884d-48ba-8b89-4db381c7899a": {"__data__": {"text": "\n\nDual ownership of objects, including resources\n\nObjects (including resources) on Aptos are owned by both:\n1. The account where the object is stored.\n2. The module that defines the object.\n\nCreating a new resource and storing it into an account requires both the owning account's signature and the module's code. But modifying and deleting the resource/object requires only the module's code and the owning account's address, but not its signature. The fields of an object also can be read only directly by the module's code, which can be offered as public utilities for other modules.\n\nThis dual-ownership design is one of the bases of state safety in Aptos Move and enables powerful but safe functionalities to be built around resources and objects.\n\n", "doc_id": "e14ff0cc-884d-48ba-8b89-4db381c7899a", "embedding": null, "doc_hash": "d8eedb64e9b497879e7d708b4efc1a73c52c374f5154eccb40ce6627cde3efee", "extra_info": null, "node_info": {"start": 0, "end": 754, "_node_type": "1"}, "relationships": {"1": "533a6283-1cb6-4bb5-82be-cffc88fd448a"}}, "__type__": "1"}, "4b210af1-db05-413d-b545-88d345001cbf": {"__data__": {"text": "\n\nViewing a resource\n\nResources are stored within specific accounts. Resources can be located by searching within the owner's account for the resource at its full query path inclusive of its address and module. Resources can be viewed on the Aptos Explorer by searching for the owning account or be directly fetched from a fullnode's API.\n\n", "doc_id": "4b210af1-db05-413d-b545-88d345001cbf", "embedding": null, "doc_hash": "12382c8939ea707db3eaf916ba0218fd118771c5be6cc5635ead298826a386ca", "extra_info": null, "node_info": {"start": 0, "end": 340, "_node_type": "1"}, "relationships": {"1": "c87fa656-9485-4d53-890b-e1df9b9b112a"}}, "__type__": "1"}, "c14df170-b9fa-4f73-b63b-89bbcd041907": {"__data__": {"text": "\n\nHow resources are stored\n\nIt's up to the smart contract developers to decide how and where a specific state is stored. For example, events for depositing a token can be stored in the receiver account where the deposit happens or in the account where the token module is deployed. In general, storing data in individual user accounts enables a higher level of execution efficiency as there would be no state read/write conflicts among transactions, and they can be executed in parallel.\n\n", "doc_id": "c14df170-b9fa-4f73-b63b-89bbcd041907", "embedding": null, "doc_hash": "c11b76d6c7f2c641609a1e72106c72a6595e7f4a5df1452f75f7896c15b7902c", "extra_info": null, "node_info": {"start": 0, "end": 489, "_node_type": "1"}, "relationships": {"1": "c10dee32-ea0e-4091-8fc9-2b8f9e82a6ae"}}, "__type__": "1"}, "801eebc7-b836-4a9b-84a9-6e6b72f63c9b": {"__data__": {"text": "\n\nRun a Public Fullnode on GCP\n\nThis tutorial explains how to configure and deploy a public fullnode to connect to the Aptos devnet using Google Cloud (GCP). Running a public fullnode in the cloud usually provides better stability and availability compared to running it on your laptop. **If you are looking to deploy a production grade public fullnode, we recommend you to deploy it on the cloud.**\n\n:::tip Alternative methods for running a public fullnode\nRead Public Fullnode if you want other options for deployment. Using cloud comes with a cost, and it varies depending on how you configure it.\n:::\n\n", "doc_id": "801eebc7-b836-4a9b-84a9-6e6b72f63c9b", "embedding": null, "doc_hash": "a3e2d0865805c31c62f3b6abd59492bf70278b49e405d667eceeacf41440267f", "extra_info": null, "node_info": {"start": 0, "end": 606, "_node_type": "1"}, "relationships": {"1": "cee6c402-3416-476e-8fcb-762367d59a9b"}}, "__type__": "1"}, "91cae584-27a7-4526-ad1c-da7d14e86076": {"__data__": {"text": "\n\nPrerequisites\n\nYou can run the commands in this guide to deploy your FullNode on Google Kubernetes Engine from any machine you want: From a VM on GCP, or Google Cloud Shell, or your personal computer.\n\nThe following packages are pre-installed with Cloud Shell. **Make sure to review** the documentation around ephemeral mode if you choose to use Cloud Shell. \n\nHowever, if you are running the installation from your laptop or another machine, you need to install:\n\n* Terraform 1.3.6: https://www.terraform.io/downloads.html\n* Kubernetes cli: https://kubernetes.io/docs/tasks/tools/\n* Google Cloud cli: https://cloud.google.com/sdk/docs/install-sdk\n\nAfter you have installed the gcloud CLI, log into GCP using gcloud:\n\n```bash\ngcloud auth login --update-adc\n```\n\n:::tip Already have a GCP account set up?\nIf you already have a GCP account setup, skip to Getting Started. If you do not have a GCP account, then follow the below sections to create and configure your GCP account.\n:::\n\n", "doc_id": "91cae584-27a7-4526-ad1c-da7d14e86076", "embedding": null, "doc_hash": "44fcccb5f271d6a9587ed2f0f95f9be1eaf0182e9c3eb0bcc99ec303b347a080", "extra_info": null, "node_info": {"start": 0, "end": 984, "_node_type": "1"}, "relationships": {"1": "6a039d49-7156-4163-8609-5fafa305f379"}}, "__type__": "1"}, "5d90d68b-b7d9-4857-aee3-ee0163f69c79": {"__data__": {"text": "\n\nGCP setup\n\n", "doc_id": "5d90d68b-b7d9-4857-aee3-ee0163f69c79", "embedding": null, "doc_hash": "154aa938afcb0100735bedaf52e04409154c7a5974f5c9dea34e931dfe4077b9", "extra_info": null, "node_info": {"start": 0, "end": 13, "_node_type": "1"}, "relationships": {"1": "3ae3bb19-a760-4ad9-af88-42e75ac8d559"}}, "__type__": "1"}, "5107cd1c-5613-480b-a209-e2304b50c53b": {"__data__": {"text": "\n\nSign up for the 90-day free trial\n\nGoogle Cloud offers a 90 day $300 free trial for every new user. These $300 are given as credits to your account and you can use them to get a sense of Google Cloud products. Be aware that you will need to add payment information when signing up for the free trial. This is for identity verification purposes and will not incur charges until you upgrade to a paid account and run out of credits.). Some GCP feature such as GPUs and Windows servers are not available in the free trial. \n\n:::tip Sign up for GCP $300 credits \nSign up for the $300 in credits here.\n:::\n\n", "doc_id": "5107cd1c-5613-480b-a209-e2304b50c53b", "embedding": null, "doc_hash": "64bcba1077149c952861ec89890b2b512478472380f307127efa31547dba0dfe", "extra_info": null, "node_info": {"start": 0, "end": 604, "_node_type": "1"}, "relationships": {"1": "236f1767-9490-4a7e-b565-bcaca2055d81"}}, "__type__": "1"}, "324565e3-0a0a-4da1-ba34-0e55c45bca52": {"__data__": {"text": "\n\nCreate a new GCP project\n\n- Create a new project on the GCP Console or using the gcloud command from the Google Cloud CLI. Before you do that, familiarize yourself with the resource hierarchy on GCP.\n- Follow these instructions to setup a new project..\n\n", "doc_id": "324565e3-0a0a-4da1-ba34-0e55c45bca52", "embedding": null, "doc_hash": "e84e3b5b1c315ee127cd19c5cffbe76b89e207fd6e8be78f62f94abcdd02bd69", "extra_info": null, "node_info": {"start": 0, "end": 256, "_node_type": "1"}, "relationships": {"1": "69a228ba-da2e-4500-9390-527a1a22b948"}}, "__type__": "1"}, "7bfcb6ec-3f84-4b75-95b1-ae8b1213237e": {"__data__": {"text": "\n\nEnable billing, upgrade your account\n\nYou will still be able to use the free trial credits, but enabling billing allows you to have full access to all the features of GCP and not experience any interruption to your nodes.\n\nUpgrade your account by following the steps outlined here.\n\n", "doc_id": "7bfcb6ec-3f84-4b75-95b1-ae8b1213237e", "embedding": null, "doc_hash": "80cc72cb24cec79a65f02e26eea1b1f30666b41505cb7e9c74d316c6d5401a33", "extra_info": null, "node_info": {"start": 0, "end": 285, "_node_type": "1"}, "relationships": {"1": "dfc2586d-fa5d-40d7-b2b1-1e4ea7f7dc11"}}, "__type__": "1"}, "986709c1-a5f4-4c4a-889d-0a3a441a4662": {"__data__": {"text": "\n\nAdditional GCP resources\n\nThis should be enough to get your GCP setup ready to start deploying your fullnode. But if you are brand new to GCP, you may want to check out some of our quickstart guides and Google Cloud Skills Boost.\n\n\n", "doc_id": "986709c1-a5f4-4c4a-889d-0a3a441a4662", "embedding": null, "doc_hash": "3c956ece81cb84d127fb8e7f9d5144304cbdb98a9c504883a87a5d246ec66c76", "extra_info": null, "node_info": {"start": 0, "end": 234, "_node_type": "1"}, "relationships": {"1": "30e0de76-f876-433d-a241-2f8d10e0b6a5"}}, "__type__": "1"}, "d79ee558-c492-45e4-8931-bd8d98547e93": {"__data__": {"text": "\n\nGetting started\n\n:::tip Before you proceed\nFrom here on, this guide assumes that you have already set up your GCP account, and have created a new project for deploying Aptos public fullnode. If you don't, check out the instructions above for GCP Setup.\n:::\n\nYou can deploy a public fullnode on GCP by using the Aptos fullnode Terraform module.\n\n1. Create a working directory for your configuration.\n\n    * Choose a workspace name e.g. `devnet`. **Note**: This defines the Terraform workspace name, which in turn is used to form resource names.\n    ```bash\n    export WORKSPACE=devnet\n    ```\n\n    * Create a directory for the workspace\n    ```bash\n    mkdir -p ~/$WORKSPACE\n    ```\n\n2. Create a storage bucket for storing the Terraform state on Google Cloud Storage.  Use the console or this gcs command to create the bucket. The name of the bucket must be unique. See the Google Cloud Storage documentation here: https://cloud.google.com/storage/docs/creating-buckets#prereq-cli.\n\n  ```bash\n  gsutil mb gs://BUCKET_NAME\n  # for example\n  gsutil mb gs://-aptos-terraform-dev\n  ```\n\n3. Create Terraform file called `main.tf` in your working directory:\n  ```bash\n  cd ~/$WORKSPACE\n  touch main.tf\n  ```\n\n4. Modify the `main.tf` file to configure Terraform and create a public fullnode from the Terraform module.\n\n**Note:** If you are using a different version of Terraform, you will need to use the `tfenv` command to change the required version. \n\nYou can find the Docker image tag at https://hub.docker.com/r/aptoslabs/validator/tags?page=1&ordering=last_updated&name=devnet\n\nExample content for `main.tf`:\n\n  ```rust\n  terraform {\n    required_version = \"~> 1.3.6\"\n    backend \"gcs\" {\n      bucket = \"BUCKET_NAME\" # bucket name created in step 2\n      prefix = \"state/fullnode\"\n    }\n  }\n\n  module \"fullnode\" {\n    # download Terraform module from aptos-labs/aptos-core repo\n    source        = \"github.com/aptos-labs/aptos-core.git//terraform/fullnode/gcp?ref=main\"\n    region        = \"us-central1\"  # Specify the region\n    zone          = \"c\"            # Specify the zone suffix\n    project       = \"gcp-fullnode\" # Specify your GCP project ID\n    fullnode_name = \"BUCKET_NAME\" #bucket name created in step 2\n    era           = 1              # bump era number to wipe the chain\n    image_tag     = \"devnet\" # Specify the docker image tag \n  }\n  ```\n\n5. Initialize Terraform in the same directory of your `main.tf` file:\n\n  ```bash\n  terraform init\n  ```\n\nThis will download all the Terraform dependencies into the `.terraform` folder.\n\n6. Create a new Terraform workspace to isolate your environments:\n\n  ```bash\n  terraform workspace new $WORKSPACE\n  # This command will list all workspaces\n  terraform workspace list\n  ```\n\n7. Apply the configuration:\n\n  ```bash\n  terraform apply\n  ```\n\n  This might take a while to finish (10 - 20 minutes), Terraform will create all the resources on your cloud account.\n\n", "doc_id": "d79ee558-c492-45e4-8931-bd8d98547e93", "embedding": null, "doc_hash": "6d685b0135cec8b81f62e98351b2695c30294adbace057ab0604047583d19c71", "extra_info": null, "node_info": {"start": 0, "end": 2919, "_node_type": "1"}, "relationships": {"1": "c9a7daf4-170f-4737-949f-46f03f1cb49f"}}, "__type__": "1"}, "9747262a-ed9a-47b3-98c0-a62f6faabf44": {"__data__": {"text": "\n\nValidation\n\nOnce Terraform apply finished, you can follow this section to validate your deployment.\n\n1. Configure your Kubernetes client to access the cluster you just deployed:\n\n  ```bash\n  gcloud container clusters get-credentials aptos-$WORKSPACE --zone  --project \n  # for example:\n  gcloud container clusters get-credentials aptos-devnet --zone us-central1-a --project aptos-fullnode\n  ```\n\n2. Check that your public fullnode pods are now running (this may take a few minutes):\n\n  ```bash\n  kubectl get pods -n aptos\n  ```\nYou should see this:\n\n```\nNAME                       READY   STATUS    RESTARTS   AGE\ndevnet0-aptos-fullnode-0   1/1     Running   0          56s\n```\n\n3. Get your public fullnode IP:\n\n  ```bash\n  kubectl get svc -o custom-columns=IP:status.loadBalancer.ingress -n aptos\n  ```\n  \n  You should see this:\n  \n  ```IP\n[map[ip:104.198.36.142]]\n```\n\n4. Check the REST API, make sure that the ledger version is increasing:\n\n  ```bash\n  curl http:///v1\n  # Example command syntax: curl http://104.198.36.142/v1\n  ```\n  \n  You should see this:\n  ```\n  {\"chain_id\":25,\"epoch\":\"22\",\"ledger_version\":\"9019844\",\"oldest_ledger_version\":\"0\",\"ledger_timestamp\":\"1661620200131348\",\"node_role\":\"full_node\",\"oldest_block_height\":\"0\",\"block_height\":\"1825467\"}\n```\n\n5. To verify the correctness of your public fullnode, as outlined in the section Verify the correctness of your FullNode, you will need to:\n   - Set up a port-forwarding mechanism directly to the aptos pod in one ssh terminal, and\n   - Test it in another ssh terminal. \n   \n   Follow the below steps:\n\n   * Set up the port-forwarding to the aptos-fullnode pod.  Use `kubectl get pods -n aptos` to get the name of the pod:\n\n      ```bash\n      kubectl port-forward -n aptos  9101:9101\n      # for example:\n      kubectl port-forward -n aptos devnet0-aptos-fullnode-0 9101:9101\n      ```\n\n   * Open a new ssh terminal.  Execute the following curl calls to verify the correctness:\n   \n      ```bash\n      curl -v http://0:9101/metrics 2> /dev/null | grep \"aptos_state_sync_version{type=\\\"synced\\\"}\"\n\n      curl -v http://0:9101/metrics 2> /dev/null | grep \"aptos_connections{direction=\\\"outbound\\\"\"\n      ```\n\n   * Exit port-forwarding when you are done by entering control-c in the terminal.\n\n\n", "doc_id": "9747262a-ed9a-47b3-98c0-a62f6faabf44", "embedding": null, "doc_hash": "6834cb6fc69bd92f69dfd2dd72053a325632554b8ffe41c11b86f217930a5624", "extra_info": null, "node_info": {"start": 0, "end": 2266, "_node_type": "1"}, "relationships": {"1": "f1bf9624-c2f3-408c-862d-f7bc4432779f"}}, "__type__": "1"}, "5f1d76f0-0192-4647-b8d9-e6f4564f6e1d": {"__data__": {"text": "\n\nConfigure identity and seed peers\n\n", "doc_id": "5f1d76f0-0192-4647-b8d9-e6f4564f6e1d", "embedding": null, "doc_hash": "81227a27903d43add6d277cd8b41d8efb0a24b58779f3bbd86d10ac01742f901", "extra_info": null, "node_info": {"start": 0, "end": 37, "_node_type": "1"}, "relationships": {"1": "b9a0eb37-cea0-489a-8fc1-91d70c0c06cd"}}, "__type__": "1"}, "262e72e0-a4a4-4e76-97d1-bf57f6be4190": {"__data__": {"text": "\n\nStatic identity\n\nIf you want to configure your node with a static identity, first see the Network Identity For Fullnode for how to generate the keys, and then follow the below instructions to configure your Terraform file.\n\n1. Generate your own private key, and extract peer id, following the guide Creating a static identity for a fullnode.\n\n2. Modify the `main.tf` to add `fullnode_identity` in `fullnode_helm_values`. This will configure the keys for public fullnode, for example:\n\n  ```rust\n  module \"fullnode\" {\n    # download Terraform module from aptos-labs/aptos-core repo\n    source        = \"github.com/aptos-labs/aptos-core.git//terraform/fullnode/gcp?ref=main\"\n    region        = \"us-central1\"  # Specify the region\n    zone          = \"c\"            # Specify the zone suffix\n    project       = \"gcp-fullnode\" # Specify your GCP project name\n    era           = 1              # bump era number to wipe the chain\n    image_tag     = \"devnet\"       # Specify the docker image tag to use\n\n    fullnode_helm_values = {\n      chain = {\n        name = \"devnet\"\n      }\n      # create fullnode from this identity config, so it will always have same peer id and address\n      fullnode_identity = {\n        type = \"from_config\"\n        key = \"B8BD811A91D8E6E0C6DAC991009F189337378760B55F3AD05580235325615C74\"\n        peer_id = \"ca3579457555c80fc7bb39964eb298c414fd60f81a2f8eedb0244ec07a26e575\"\n      }\n    }\n  }\n  ```\n\n3. Apply Terraform changes:\n\n  ```bash\n  terraform apply\n  ```\n\n", "doc_id": "262e72e0-a4a4-4e76-97d1-bf57f6be4190", "embedding": null, "doc_hash": "dc41c6a5ce36a32a28e8da950833548b21d18f067364ed3c4a2538d9d84022b6", "extra_info": null, "node_info": {"start": 0, "end": 1492, "_node_type": "1"}, "relationships": {"1": "7b4e3ecd-7622-4247-8cf4-ac447425fc8e"}}, "__type__": "1"}, "d483793d-9072-4987-a8a7-64fa92466e85": {"__data__": {"text": "\n\nAdd upstream seed peers\n\nYou can add upstream seed peers to allow your node state sync from a specific . This is helpful when the public fullnode is not able to connect to the network due to congestion.\n\n1. Obtain the upstream peer id information. You can either use the one listed in the Connecting your fullnode to seed peers, or grab one from the Aptos Discord #advertise-full-node channel; these are the nodes hosted by our community.\n\n2. Modify the `main.tf` to add seeds for devnet in `fullnode_helm_values`. This will configure the upstream seeds for public fullnode. For example:\n\n```rust\nmodule \"fullnode\" {\n    # download Terraform module from aptos-labs/aptos-core repo\n    source        = \"github.com/aptos-labs/aptos-core.git//terraform/fullnode/gcp?ref=main\"\n    region        = \"us-central1\"  # Specify the region\n    zone          = \"c\"            # Specify the zone suffix\n    project       = \"gcp-fullnode\" # Specify your GCP project name\n    era           = 1              # bump era number to wipe the chain\n    image_tag     = \"dev_5b525691\" # Specify the docker image tag to use\n\n    fullnode_helm_values = {\n      # add a list of peers as upstream\n      aptos_chains = {\n        devnet = {\n          seeds = {\n            \"bb14af025d226288a3488b4433cf5cb54d6a710365a2d95ac6ffbd9b9198a86a\" = {\n            addresses = [\"/dns4/pfn0.node.devnet.aptoslabs.com/tcp/6182/noise-ik/bb14af025d226288a3488b4433cf5cb54d6a710365a2d95ac6ffbd9b9198a86a/handshake/0\"]\n            role = \"Upstream\"\n            },\n            \"7fe8523388084607cdf78ff40e3e717652173b436ae1809df4a5fcfc67f8fc61\" = {\n            addresses = [\"/dns4/pfn1.node.devnet.aptoslabs.com/tcp/6182/noise-ik/7fe8523388084607cdf78ff40e3e717652173b436ae1809df4a5fcfc67f8fc61/handshake/0\"]\n            role = \"Upstream\"\n            },\n            \"f6b135a59591677afc98168791551a0a476222516fdc55869d2b649c614d965b\" = {\n            addresses = [\"/dns4/pfn2.node.devnet.aptoslabs.com/tcp/6182/noise-ik/f6b135a59591677afc98168791551a0a476222516fdc55869d2b649c614d965b/handshake/0\"]\n            role = \"Upstream\"\n            }\n          }\n        }\n      }\n    }\n ", "doc_id": "d483793d-9072-4987-a8a7-64fa92466e85", "embedding": null, "doc_hash": "4f3c0af103af8eecf4facb1e448be47dcd7ea97ee1d8e70cd8383338ab7e0289", "extra_info": null, "node_info": {"start": 0, "end": 2135, "_node_type": "1"}, "relationships": {"1": "2c45f928-8077-4a01-bae1-6366cd2839a1", "3": "ccaf8787-528d-4694-bbcc-49fba19d8ad6"}}, "__type__": "1"}, "ccaf8787-528d-4694-bbcc-49fba19d8ad6": {"__data__": {"text": "     }\n      }\n    }\n  }\n```\n\n3. Apply Terraform changes:\n\n  ```bash\n  terraform apply\n  ```\n\n", "doc_id": "ccaf8787-528d-4694-bbcc-49fba19d8ad6", "embedding": null, "doc_hash": "5497d8e0bef43d6db491d043082e0fe52484b38c6f15c6b2ecf193f6fc3481a9", "extra_info": null, "node_info": {"start": 2113, "end": 2207, "_node_type": "1"}, "relationships": {"1": "2c45f928-8077-4a01-bae1-6366cd2839a1", "2": "d483793d-9072-4987-a8a7-64fa92466e85"}}, "__type__": "1"}, "856e2df4-16e6-4a73-a3d6-e8fa8e253837": {"__data__": {"text": "\n\nCheck logging\n\nTo check the logs of the pod, use the following commands:\n\n  ```bash\n  # Get a list of the pods\n  kubectl get pods -n aptos\n\n  # Get logs of the pod\n  kubectl logs  -n aptos\n  # for example:\n  kubectl logs devnet0-aptos-fullnode-0 -n aptos\n  ```\n\nWhen using GKE, the logs of the cluster and pod will automatically show up in the Google Cloud console.  From the console menu, choose `Kubernetes Engine`.  From the side menu, choose `Workloads`.  You will see all the pods from the cluster listed.  \n\n\n!GKE Workloads screenshot\n\n\nThe `devnet0-aptos-fullnode` is the pod that is running the aptos fullnode container. Click on the pod to view details.  You will see some metrics and other details about the pod.\n\n\n!GKE Workloads Pod screenshot\n\n\nClick the `LOGS` tab to view the logs directly from the pod.  If there are errors in the pod, you will see them here.\n\n\n!GKE Workloads Pod Logs screenshot\n\n\nClick the `open in new window` icon to view the logs in the Log Explorer.  This screen allows advanced searching in the logs.  \n\n\n!GKE Workloads Pod Logs Explorer screenshot\n\n\n\nOther logging insights are available in the Logs Dashboard \n\n\n!GKE Workloads Pod Logs Dashboard screenshot\n\n\n\nAdditional features are available through Cloud Logging, including creating log-based metrics, logging sinks and log buckets. \n\n\n", "doc_id": "856e2df4-16e6-4a73-a3d6-e8fa8e253837", "embedding": null, "doc_hash": "0ea1f3b5a2e9344a0b3b01855ac2d1e59233619fb6be0034d77aef46743473a3", "extra_info": null, "node_info": {"start": 0, "end": 1332, "_node_type": "1"}, "relationships": {"1": "109bae82-767f-42df-bd79-6d3758343c8b"}}, "__type__": "1"}, "3b4589c0-b7fa-4f8e-ad95-52757591c475": {"__data__": {"text": "\n\nCheck monitoring\n\nGoogle cloud captures many metrics from the cluster and makes them easily viewable in the console.  From the console menu, choose `Kubernetes Engine`.  Click on the cluster that aptos is deployed to.  Click on the `Operations` link at the top right.  Click on the `Metrics` sub-tab to view specific cluster metrics.\n\n\n!GKE Monitoring metrics screenshot\n\n\nClick the `View in Cloud Monitoring` link at the top to view the built-in GKE dashboard for the cluster.  \n\n\n!GKE Monitoring dashboard screenshot\n\n\nGoogle Cloud Monitoring has many other features to easily monitor the cluster and pods.  You can configure uptime checks for the services and configure alerts for when the metrics reach a certain threshold.  \n\n", "doc_id": "3b4589c0-b7fa-4f8e-ad95-52757591c475", "embedding": null, "doc_hash": "35d6ad2a05223b724ca4f5033b9def18117098a8ee3c6142caeac8e63ca26777", "extra_info": null, "node_info": {"start": 0, "end": 733, "_node_type": "1"}, "relationships": {"1": "9b61be97-f134-4785-8a0a-422a47ac24fb"}}, "__type__": "1"}, "dbdc807f-899c-40b4-b72b-cc8af0663e11": {"__data__": {"text": "\n\nRun a Local Testnet with Validator\n\n:::tip Using CLI to run a local testnet\n\nIf you want to use CLI to start and run a local testnet, see Using CLI to Run a Local Testnet.\n:::\n\nYou can run a local testnet of the Aptos blockchain. This local testnet will not be connected to the Aptos devnet. It will run on your local machine, independent of other Aptos networks. You can use this local testnet for testing and development purposes.\n\nYou can run a local testnet in two ways:\n\n1. Using the Aptos-core source code. This approach is useful for testing modifications to the Aptos-core codebase or to the Aptos Framework.\n\n2. Using Docker. This is particularly useful for building services on top of the Aptos blockchain or the Aptos Framework, as there is no build overhead and the ledger persists across network restarts (by default).\n\nThe rest of this document describes:\n\n- How to start your local testnet with a single validator node, and\n- How to start a Faucet service and attach it to your local testnet.\n\n", "doc_id": "dbdc807f-899c-40b4-b72b-cc8af0663e11", "embedding": null, "doc_hash": "1abe1e0b94102263c40e768fdd4f613c4ecb9da70441dde490d55aae8a715ad0", "extra_info": null, "node_info": {"start": 0, "end": 1011, "_node_type": "1"}, "relationships": {"1": "61be7ca4-9110-453a-bf72-bed86c7fa77c"}}, "__type__": "1"}, "2807264b-f9d8-41d1-898f-f68350f12587": {"__data__": {"text": "\n\nUsing the Aptos-core source code\n\n1. Follow steps in Building Aptos From Source\n\n1. With your development environment ready, now you can start your testnet network. Before you proceed, make a note of the following:\n\n    :::tip\n     - When you run the below command to start the local testnet, your terminal will enter into an interactive mode, with a message `Aptos is running, press ctrl-c to exit`. Hence, you will need to open another shell terminal for the subsequent steps described in this section.\n     - After the below command runs, copy the `Test dir` information from the terminal output for the next step.\n    :::\n\n    To start your testnet locally, run the following command:\n\n    ```\n    CARGO_NET_GIT_FETCH_WITH_CLI=true cargo run -p aptos-node -- --test\n    ```\n\n    See below for an example of the partial output. Make a note of the `Test dir` from the output.\n\n    ```\n    ...\n    ...\n    ...\n\n    Completed generating configuration:\n        Log file: \"/private/var/folders/gn/m74t8ylx55z935q8wx035qn80000gn/T/b3adc18c144bfcc78a1541953893bc1c/validator.log\"\n        Test dir: \"/private/var/folders/gn/m74t8ylx55z935q8wx035qn80000gn/T/b3adc18c144bfcc78a1541953893bc1c/0/node.yaml\"\n        Aptos root key path: \"/private/var/folders/gn/m74t8ylx55z935q8wx035qn80000gn/T/b3adc18c144bfcc78a1541953893bc1c/mint.key\"\n        Waypoint: 0:47e676b5fe38ebe2aec6053db7b3daa0b805693d6422e3475e46e89499464ecf\n        ChainId: TESTING\n        REST API endpoint: 0.0.0.0:8080\n        Fullnode network: /ip4/0.0.0.0/tcp/7180\n    Aptos is running, press ctrl-c to exit\n    ```\n\n**NOTE**: The above command starts a local testnet with a single validator node. The command runs `aptos-node` from a genesis-only ledger state. If you want to reuse the ledger state produced by a previous run of `aptos-node`, then use:\n\n```\ncargo run -p aptos-node -- --test --config \n```\n\n", "doc_id": "2807264b-f9d8-41d1-898f-f68350f12587", "embedding": null, "doc_hash": "4aad135de80ff0d9bda0351758027461c7d8fd5f22397e2b11d395e3fc5331b2", "extra_info": null, "node_info": {"start": 0, "end": 1871, "_node_type": "1"}, "relationships": {"1": "d9813d11-1c9f-402f-b405-3cecf6096157"}}, "__type__": "1"}, "a99ef410-0db6-42ee-b6c6-fcd901610caa": {"__data__": {"text": "\n\nAttaching a Faucet to your testnet\n\nFaucets are stateless services that can be run in parallel with the testnet. A Faucet is a way to create Aptos test coins with no real-world value. You can use the Faucet by sending a request to create coins and transfer them into a given account on your behalf.\n\n1. Make sure that you started your local testnet as described in Step 5 above.\n2. Open a new shell terminal.\n3. Copy the _Aptos root key path_ from your terminal where you started the testnet, and use it to replace the `mint-key-file-path` in the below command.\n4. Run the following command to start a Faucet:\n```\ncargo run --package aptos-faucet-service -- run-simple --key-file-path \"/tmp/694173aa3bbe019499bbd5cf3fe0e2fc/mint.key\" --node-url http://127.0.0.1:8080\n```\n\nThis will start a Faucet running locally without any restrictions to tokens that can be claimed and minted. This Faucet service will be as accessible as the testnet you started above.\n\n", "doc_id": "a99ef410-0db6-42ee-b6c6-fcd901610caa", "embedding": null, "doc_hash": "84b180a5e5e5e1b237e64a0f1e4d46d5fa0a3f59437571a6f65a21831261350c", "extra_info": null, "node_info": {"start": 0, "end": 959, "_node_type": "1"}, "relationships": {"1": "3b7e844b-bf38-483d-9606-492c4adced2c"}}, "__type__": "1"}, "b80eacd9-96ac-403d-b061-41c8e0de9bc2": {"__data__": {"text": "\n\nInteracting with the local test testnet\n\nAfter starting your local testnet, you will see the following:\n\n```\nEntering test mode, this should never be used in production!\nCompleted generating configuration:\n        Log file: \"/tmp/694173aa3bbe019499bbd5cf3fe0e2fc/validator.log\"\n        Test dir: \"/tmp/694173aa3bbe019499bbd5cf3fe0e2fc/0/node.yaml\"\n        Aptos root key path: \"/tmp/694173aa3bbe019499bbd5cf3fe0e2fc/mint.key\"\n        Waypoint: 0:197bc8b76761622c2d2054d8bf93c1802fa0eb4bc55f0f3d4442878fdecc297f\n        ChainId: TESTING\n        REST API endpoint: 0.0.0.0:8080\n        Fullnode network: /ip4/0.0.0.0/tcp/7180\n\nAptos is running, press ctrl-c to exit\n```\n\nUse the Aptos CLI tool to interact with your local testnet. The above output contains information you will use for starting the Aptos CLI tool:\n\n* `Aptos root key path`: The root key (also known as the mint or faucet key) controls the account that can mint tokens. Available in the docker compose folder under `aptos_root_key`.\n* `Waypoint`: A verifiable checkpoint of the blockchain (available in the docker compose folder under waypoint.txt)\n* `REST endpoint`: The endpoint for the REST service, e.g., `http://127.0.0.1:8080`.\n* `ChainId`: The chain ID uniquely distinguishes this network from other blockchain networks.\n\n", "doc_id": "b80eacd9-96ac-403d-b061-41c8e0de9bc2", "embedding": null, "doc_hash": "a16e5a7409c1eb9621d89a94a5a6ed492da2d94f7410e7fb4cda15aa8a52ae16", "extra_info": null, "node_info": {"start": 0, "end": 1295, "_node_type": "1"}, "relationships": {"1": "229bff9f-fe1d-4592-89d4-31b20d67b052"}}, "__type__": "1"}, "8ccbd774-a61c-4f7a-91eb-56e6af7cbc29": {"__data__": {"text": "\n\nNext steps\n\nAt this point, you will have a special root account at `0x1` that can perform the mint operation. Follow up with:\n\n* Your first transaction to learn how to submit transactions.\n* Your first Move module to learn how to create Move modules.\n* Interacting with the Aptos Blockchain to learn how to mint coins.\n\n", "doc_id": "8ccbd774-a61c-4f7a-91eb-56e6af7cbc29", "embedding": null, "doc_hash": "c1670e8a1bb1f8513e3b4f72cbdc88202051bd198b5fc7e46434e63a956ec510", "extra_info": null, "node_info": {"start": 0, "end": 322, "_node_type": "1"}, "relationships": {"1": "a5eeb29b-fa46-47c1-b3dd-24f661fff565"}}, "__type__": "1"}, "26a01425-7f52-4e47-9598-f1f6558c4e38": {"__data__": {"text": "\n\nRun a Local Multinode Network\n\nThis guide describes how to run a local network with multiple validator nodes and validator fullnodes. You will use the Aptos Forge CLI for this.\n\n:::tip Use only for test deployments\nThe method described in this guide should be used only for test deployments of multi-node local networks. Do not use this guide for deploying in production environments. Currently this is the only guide for multi-node deployments.\n\nFor deploying a local network with a single node, see Running Local Testnet and Local testnet development flow.\n:::\n\n", "doc_id": "26a01425-7f52-4e47-9598-f1f6558c4e38", "embedding": null, "doc_hash": "369ea01fe8207bf0288b8322cc8291117cc71bb4e0ac032467dd4523b1f104e7", "extra_info": null, "node_info": {"start": 0, "end": 566, "_node_type": "1"}, "relationships": {"1": "5ef426aa-ecb6-4cb3-b042-f3abebe067d4"}}, "__type__": "1"}, "f53e9e5c-269c-4681-abfa-ebcbd953b449": {"__data__": {"text": "\n\nBefore you proceed\n\nThis guide assumes you have done the steps in Building Aptos From Source\n\n", "doc_id": "f53e9e5c-269c-4681-abfa-ebcbd953b449", "embedding": null, "doc_hash": "7f200067568253ef9f9106238641a9338d9469627273dfa9e010ce0d030de983", "extra_info": null, "node_info": {"start": 0, "end": 96, "_node_type": "1"}, "relationships": {"1": "7fee1e16-9b2a-4116-aea3-85d7d8164b64"}}, "__type__": "1"}, "23b6bbee-56db-4773-bb8e-c8ef17a0d354": {"__data__": {"text": "\n\nRunning multiple validators\n\nTo deploy multiple local validators, run:\n\n```bash\ncargo run -p aptos-forge-cli \\\n        -- \\\n        --suite \"run_forever\" \\\n        --num-validators 4 test local-swarm\n```\n\nThis will start a local network of 4 validators, each running in their own process. The network will run forever unless you manually terminate it.\n\nThe terminal output will display the locations of the validator files (for example, the genesis files, logs, node configurations, etc.) and the commands that were run to start each node. The process id (PID) of each node and server addresses (e.g., REST APIs) are also displayed when it starts. For example, if you run the above command you should see:\n\n```bash\n...\n2022-09-01T15:41:27.228289Z [main] INFO crates/aptos-genesis/src/builder.rs:462 Building genesis with 4 validators. Directory of output: \"/private/var/folders/dx/c0l2rrkn0656gfx6v5_dy_p80000gn/T/.tmpq9uPMJ\"\n...\n2022-09-01T15:41:28.090606Z [main] INFO testsuite/forge/src/backend/local/swarm.rs:207 The root (or mint) key for the swarm is: 0xf9f...\n...\n2022-09-01T15:41:28.094800Z [main] INFO testsuite/forge/src/backend/local/node.rs:129 Started node 0 (PID: 78939) with command: \".../aptos-core/target/debug/aptos-node\" \"-f\" \"/private/var/folders/dx/c0l2rrkn0656gfx6v5_dy_p80000gn/T/.tmpq9uPMJ/0/node.yaml\"\n2022-09-01T15:41:28.094825Z [main] INFO testsuite/forge/src/backend/local/node.rs:137 Node 0: REST API is listening at: http://127.0.0.1:64566\n2022-09-01T15:41:28.094838Z [main] INFO testsuite/forge/src/backend/local/node.rs:142 Node 0: Inspection service is listening at http://127.0.0.1:64568\n...\n```\n\nUsing the information from this output, you can stop a single node and restart\nit. For example, to stop and restart the node `0`, execute the below commands:\n\n```bash\nkill -9 \ncargo run -p aptos-node \\\n        -- \\\n        -f \n```\n\n", "doc_id": "23b6bbee-56db-4773-bb8e-c8ef17a0d354", "embedding": null, "doc_hash": "9d74561f90f60a5136468edfb0adee1a3de9a2eb0de1f79f856a6d7608018330", "extra_info": null, "node_info": {"start": 0, "end": 1865, "_node_type": "1"}, "relationships": {"1": "a4b6c717-2916-48dd-a718-96ade104ff55"}}, "__type__": "1"}, "cb11c95c-9701-420d-aa13-01e97c432785": {"__data__": {"text": "\n\nFaucet and minting\n\nIn order to mint coins in this test network you need to run a faucet. You can do that with this command:\n\n```bash\ncargo run -p aptos-faucet-service -- run-simple --key  --node-url \n```\n\nYou can get the values above like this:\n- `key`: When you started the swarm, there was output like this: `The root (or mint) key for the swarm is: 0xf9f...`. This is the `key`.\n- `node_url`: When you started the swarm, there was output like this: `REST API is listening at: http://127.0.0.1:64566`. This is the `node_url`.\n\nThe above command will run a faucet locally, listening on port `8081`. Using this faucet, you can then mint tokens to your test accounts, for example:\n\n```bash\ncurl -X POST http://127.0.0.1:8081/mint?amount=&pub_key=\n```\n\nAs an alternative to using the faucet service, you may use the faucet CLI directly:\n```\ncargo run -p aptos-faucet-cli -- --amount 10 --accounts  --key \n```\n\n:::tip Faucet and Aptos CLI\nSee more on how the faucet works in the README.\n\nAlso see how to use the Aptos CLI with an existing faucet.\n:::\n\n", "doc_id": "cb11c95c-9701-420d-aa13-01e97c432785", "embedding": null, "doc_hash": "01e4fbe317cc4f0ab593b979a7cd2bd47cd1a55b103d4d36cdad3298008dbde1", "extra_info": null, "node_info": {"start": 0, "end": 1052, "_node_type": "1"}, "relationships": {"1": "c9cd7b53-638d-4240-8167-fff590c8e4b3"}}, "__type__": "1"}, "73f2e2d5-ba77-4372-941c-adf338edfbd6": {"__data__": {"text": "\n\nValidator fullnodes\n\nTo also run validator fullnodes inside the network, use the `--num-validator-fullnodes` flag. For example:\n```bash\ncargo run -p aptos-forge-cli \\\n        -- \\\n        --suite \"run_forever\" \\\n        --num-validators 3 \\\n        --num-validator-fullnodes 1 test local-swarm\n```\n\n", "doc_id": "73f2e2d5-ba77-4372-941c-adf338edfbd6", "embedding": null, "doc_hash": "4b547379ae4c45c3007d84c4f41acb5758d02c9fd5bade3170c76d46d1865c21", "extra_info": null, "node_info": {"start": 0, "end": 301, "_node_type": "1"}, "relationships": {"1": "4d496f11-9210-463b-9de7-3c8777964888"}}, "__type__": "1"}, "32df15e8-4c04-4fbd-b25d-792fd7739fa3": {"__data__": {"text": "\n\nAdditional usage\n\nTo see all tool usage options, run:\n```bash\ncargo run -p aptos-forge-cli --help\n```\n\n", "doc_id": "32df15e8-4c04-4fbd-b25d-792fd7739fa3", "embedding": null, "doc_hash": "d8efc82607434308c9aae4e35b44fcb48ca9a80481727b5176d28bf549168880", "extra_info": null, "node_info": {"start": 0, "end": 105, "_node_type": "1"}, "relationships": {"1": "b9df10b7-cbb7-465f-9cdb-af9c405a4ec4"}}, "__type__": "1"}, "40e43fd0-3aa4-4125-9ab5-16c313525000": {"__data__": {"text": "\n\nRunning Validator Node\n\n:::tip Deploying a validator node? Read this first\nIf you are deploying a validator node, then make sure to read the Node Requirements first.\n:::\n\n", "doc_id": "40e43fd0-3aa4-4125-9ab5-16c313525000", "embedding": null, "doc_hash": "b16079ea6e5d6338a6b9904148e386cd24c4dd2fd8e040e65517645f197ba0bb", "extra_info": null, "node_info": {"start": 0, "end": 173, "_node_type": "1"}, "relationships": {"1": "3772b072-e19d-41f2-8387-e4ab9a4d99b7"}}, "__type__": "1"}, "201b982e-2488-438b-856d-edf4afbc9abd": {"__data__": {"text": "\n\nInstall Validator node\n\n", "doc_id": "201b982e-2488-438b-856d-edf4afbc9abd", "embedding": null, "doc_hash": "e7899452dcd70aa7522c418a22328b67deaa0b41c5530429dd70ae02b855032a", "extra_info": null, "node_info": {"start": 0, "end": 26, "_node_type": "1"}, "relationships": {"1": "9dfbcf5f-d75b-4df7-9b17-fd73622ad14d"}}, "__type__": "1"}, "b3ef7acc-af82-44dd-9e56-1ca45e9c569e": {"__data__": {"text": "\n\nDeploy\n\nThe following guides provide step-by-step instructions for running public fullnode, validator node, and validator fullnode for the Aptos blockchain. \n\n- ### On AWS\n- ### On Azure\n- ### On GCP\n- ### Using Docker\n- ### Using Aptos Source\n\n", "doc_id": "b3ef7acc-af82-44dd-9e56-1ca45e9c569e", "embedding": null, "doc_hash": "07658526e00c3fe2cd046245c26859f79b171f3e8e3555233781e349cdbf5a83", "extra_info": null, "node_info": {"start": 0, "end": 247, "_node_type": "1"}, "relationships": {"1": "4270275a-b6c3-4c3c-95fb-73a22970fdcd"}}, "__type__": "1"}, "718fe3c6-62b7-4675-9a59-fd6656853f8f": {"__data__": {"text": "\n\nConfigure Validator node\n\n", "doc_id": "718fe3c6-62b7-4675-9a59-fd6656853f8f", "embedding": null, "doc_hash": "aec9923ce716a6315ac01c01c92f16b004f9bc7ea33016b6118c9e328aa0645d", "extra_info": null, "node_info": {"start": 0, "end": 28, "_node_type": "1"}, "relationships": {"1": "fc595921-c3b0-47c7-ad65-ef84b94e6f4a"}}, "__type__": "1"}, "0e93e10e-ad58-4075-a605-8a70cd7ad790": {"__data__": {"text": "\n\nConnect to Aptos network\n\nAfter deploying your nodes, connect to the Aptos Network.\n\n", "doc_id": "0e93e10e-ad58-4075-a605-8a70cd7ad790", "embedding": null, "doc_hash": "2699afbbe09124abcf27326d75ede4b0bf550b2db85754b7e7ce1a0aac0703fd", "extra_info": null, "node_info": {"start": 0, "end": 87, "_node_type": "1"}, "relationships": {"1": "e8d1cc0a-56f1-436b-a665-f90298471ac5"}}, "__type__": "1"}, "0c8c3fc5-7e56-4df4-b8ad-7d7457effb44": {"__data__": {"text": "\n\nSet up staking and delegation pool operations\n\nAfter connecting your nodes to the Aptos network, establish staking pool operations to add your node to the validator set. \n\nSimilarly, conduct delegation pool operations for APT delegated to your validator. Your node will start syncing and participating in consensus.\n\n", "doc_id": "0c8c3fc5-7e56-4df4-b8ad-7d7457effb44", "embedding": null, "doc_hash": "c317f540e84d0f27cec014b581a540ab10d9e18927fd1e17c55d2200f133f6c0", "extra_info": null, "node_info": {"start": 0, "end": 319, "_node_type": "1"}, "relationships": {"1": "81aeca97-73fa-4066-9e61-a9495b041d2f"}}, "__type__": "1"}, "7ee8a884-ed1c-48ca-ae96-a406f7cfb9cf": {"__data__": {"text": "\n\nTest Validator node\n\nAfter your nodes are deployed and configure, make sure they meet node liveness criteria.\n\n", "doc_id": "7ee8a884-ed1c-48ca-ae96-a406f7cfb9cf", "embedding": null, "doc_hash": "1679d6f09e94a2dbafac81a544d7e0dce1b68253a7c05ead127289b840d701aa", "extra_info": null, "node_info": {"start": 0, "end": 113, "_node_type": "1"}, "relationships": {"1": "bfb68a4f-d92b-4192-b874-89bd7558906c"}}, "__type__": "1"}, "6ba24e00-5ced-4b59-9a7b-4f16dd7521f9": {"__data__": {"text": "\n\nInstall Validator fullnode\n\nNote that many of the same instructions can be used to run a validator fullnode in Aptos:\n\n-  If you use the provided reference Kubernetes deployments (i.e. for cloud-managed kubernetes on AWS, Azure, or GCP), then one validator node and one validator fullnode are deployed by default.\n- When using the Docker or the source code, the `fullnode.yaml` will enable you to run a validator fullnode. \n  - See Step 11 in the Docker-based instructions. \n  - Similarly, if you use source code, see from Step 13 in the source code instructions. \n:::\n", "doc_id": "6ba24e00-5ced-4b59-9a7b-4f16dd7521f9", "embedding": null, "doc_hash": "9173c7856ed95b6913e600de59bd81c84737215729ff1f1a5b121c46abefa20a", "extra_info": null, "node_info": {"start": 0, "end": 571, "_node_type": "1"}, "relationships": {"1": "9158c608-b1a6-47fb-9566-c00c9ebbca89"}}, "__type__": "1"}, "c341b9df-20c6-42c0-aef0-6a8aa633a9cf": {"__data__": {"text": "\n\nCode formatting\n\nAll code formatting is enforced with rustfmt with a project-specific configuration.  Below is an example command to adhere to the Aptos Core project conventions.\n\n```\ncargo fmt\n```\n\n", "doc_id": "c341b9df-20c6-42c0-aef0-6a8aa633a9cf", "embedding": null, "doc_hash": "bbaa5caf3f28bf0c5e5fe421e5a1aa1da76b1e93d4cedef57a309c7d8ca215bd", "extra_info": null, "node_info": {"start": 0, "end": 201, "_node_type": "1"}, "relationships": {"1": "31542d1f-cf14-4256-a40e-020f0bf56662"}}, "__type__": "1"}, "362c5ed2-0a84-47d9-8df6-0f324a08ef83": {"__data__": {"text": "\n\nCode analysis\n\nClippy is used to catch common mistakes and is run as a part of continuous integration.  Before submitting your code for review, you can run clippy with our configuration:\n\n```\ncargo xclippy --all-targets\n```\n\nIn general, we follow the recommendations from rust-lang and The Rust Programming Language.  The remainder of this guide provides detailed guidelines on specific topics in order to achieve uniformity of the codebase.\n\n", "doc_id": "362c5ed2-0a84-47d9-8df6-0f324a08ef83", "embedding": null, "doc_hash": "baa995a692e0794af5a7001c5a7a67ce056f32242b00769a3ea74ea0c392112b", "extra_info": null, "node_info": {"start": 0, "end": 445, "_node_type": "1"}, "relationships": {"1": "582ab7e0-44e0-483f-a48e-0ca058315199"}}, "__type__": "1"}, "89fbfed4-f06d-4e63-bb5d-a883cb7cc895": {"__data__": {"text": "\n\nCode documentation\n\nAny public fields, functions, and methods should be documented with Rustdoc.\n\n Please follow the conventions as detailed below for modules, structs, enums, and functions.  The *single line* is used as a preview when navigating Rustdoc.  As an example, see the 'Structs' and 'Enums' sections in the collections Rustdoc.\n\n ```\n /// [Single line] One line summary description\n ///\n /// [Longer description] Multiple lines, inline code\n /// examples, invariants, purpose, usage, etc.\n [Attributes] If attributes exist, add after Rustdoc\n ```\n\nExample below:\n\n```rust\n/// Represents (x, y) of a 2-dimensional grid\n///\n/// A line is defined by 2 instances.\n/// A plane is defined by 3 instances.\n#[repr(C)]\nstruct Point {\n    x: i32,\n    y: i32,\n}\n```\n\n", "doc_id": "89fbfed4-f06d-4e63-bb5d-a883cb7cc895", "embedding": null, "doc_hash": "b6ae6e243a854025d919ca315f0640817831c9d463bf2f62b4c16f86443e511b", "extra_info": null, "node_info": {"start": 0, "end": 769, "_node_type": "1"}, "relationships": {"1": "acab5894-b1b3-4568-b1b5-d98b3720dc6f"}}, "__type__": "1"}, "c0e183e4-3be6-4a97-941b-e48f710f6993": {"__data__": {"text": "\n\nTerminology\n\nThe Aptos codebase uses inclusive terminology (similar to other projects such as the Linux kernel).  The terms below are recommended when appropriate.\n* allowlist - a set of entities allowed access\n* blocklist - a set of entities that are blocked from access\n* primary/leader/main - a primary entity\n* secondary/replica/follower - a secondary entity\n\n", "doc_id": "c0e183e4-3be6-4a97-941b-e48f710f6993", "embedding": null, "doc_hash": "f10e5646b089f9b8e1a450f333b5ed0956da79e758b21cb324350850036080b7", "extra_info": null, "node_info": {"start": 0, "end": 366, "_node_type": "1"}, "relationships": {"1": "64ec9b29-17f4-4975-8027-959ce2dbfb07"}}, "__type__": "1"}, "e514cac2-2a3a-4a45-976a-b5a4bfd3066e": {"__data__": {"text": "\n\nConstants and fields\n\nDescribe the purpose and definition of this data. If the unit is a measurement of time, include it, e.g., `TIMEOUT_MS` for timeout in milliseconds.\n\n", "doc_id": "e514cac2-2a3a-4a45-976a-b5a4bfd3066e", "embedding": null, "doc_hash": "758169a99fe7429a85571553da56e9053f5d7dc3a89aa708d9ec4a35e56138cf", "extra_info": null, "node_info": {"start": 0, "end": 173, "_node_type": "1"}, "relationships": {"1": "35bf44aa-a223-4ba2-9c0a-d75127723a07"}}, "__type__": "1"}, "4da301f7-2c3c-47dc-b2e6-214fcf6f1b9c": {"__data__": {"text": "\n\nFunctions and methods\n\nDocument the following for each function:\n\n* The action the method performs - \u201cThis method *adds* a new transaction to the mempool.\u201d Use *active voice* and *present tense* (i.e. adds/creates/checks/updates/deletes).\n* Describe how and why to use this method.\n* Any condition that must be met _before_ calling the method.\n* State conditions under which the function will `panic!()` or returns an `Error`\n* Brief description of return values.\n* Any special behavior that is not obvious\n\n", "doc_id": "4da301f7-2c3c-47dc-b2e6-214fcf6f1b9c", "embedding": null, "doc_hash": "e30e8049f5b1dfb6ec0afce08212ec7adc3cc49abde8a4c250ffa6b54405aadc", "extra_info": null, "node_info": {"start": 0, "end": 510, "_node_type": "1"}, "relationships": {"1": "afaabe26-565f-498d-a50a-659a9a058f77"}}, "__type__": "1"}, "bc3cf4c7-bf74-4664-890a-6d66e8b15d9e": {"__data__": {"text": "\n\nREADME.md for top-level directories and other major components\n\nEach major component of Aptos Core needs to have a `README.md` file. Major components are:\n* top-level directories (e.g. `aptos-core/network`, `aptos-core/language`)\n* the most important crates in the system (e.g. `vm-runtime`)\n\nThis file should contain:\n\n * The *conceptual* *documentation* of the component.\n * A link to the external API documentation for the component.\n * A link to the main license of the project.\n * A link to the main contributing guide for the project.\n\nA template for readmes:\n\n```markdown\n", "doc_id": "bc3cf4c7-bf74-4664-890a-6d66e8b15d9e", "embedding": null, "doc_hash": "d32857d4002078bfd8b1cc32aa715e80f5fc122b2add3e6c5e74ac3d009e71ab", "extra_info": null, "node_info": {"start": 0, "end": 581, "_node_type": "1"}, "relationships": {"1": "792baa73-e0bc-4a2f-8b3d-c2002fd8f2b3"}}, "__type__": "1"}, "9f14249c-cb90-431e-9db8-eca983dd0436": {"__data__": {"text": "\n\nComponent Name\n\n[Summary line: Start with one sentence about this component.]\n\n", "doc_id": "9f14249c-cb90-431e-9db8-eca983dd0436", "embedding": null, "doc_hash": "545d6bfebb4dbe048d151ad2ee875ec041d25286b187db12ae31fed4bfa2665e", "extra_info": null, "node_info": {"start": 0, "end": 81, "_node_type": "1"}, "relationships": {"1": "769930bf-d3b2-4e08-a265-d2c6d5a87827"}}, "__type__": "1"}, "07c44aa8-672a-45b7-a757-cc3f896ccf7e": {"__data__": {"text": "\n\nOverview\n\n* Describe the purpose of this component and how the code in\nthis directory works.\n* Describe the interaction of the code in this directory with\nthe other components.\n* Describe the security model and assumptions about the crates\nin this directory. Examples of how to describe the security\nassumptions will be added in the future.\n\n", "doc_id": "07c44aa8-672a-45b7-a757-cc3f896ccf7e", "embedding": null, "doc_hash": "fc8f11bc3c3b7edf08134c45ea2b2c46e565853e1c97529373279d4766bc984c", "extra_info": null, "node_info": {"start": 0, "end": 344, "_node_type": "1"}, "relationships": {"1": "9b858b8b-fe69-4133-afee-9df70d2ddeed"}}, "__type__": "1"}, "a9c12783-fdd3-48e4-8428-0089464a9fa6": {"__data__": {"text": "\n\nImplementation Details\n\n* Describe how the component is modeled. For example, why is the\n  code organized the way it is?\n* Other relevant implementation details.\n\n", "doc_id": "a9c12783-fdd3-48e4-8428-0089464a9fa6", "embedding": null, "doc_hash": "311ea8bc5e2dd8e0e0c38ceae94f25670094de56b24c8fbde8d9f1224c6495eb", "extra_info": null, "node_info": {"start": 0, "end": 165, "_node_type": "1"}, "relationships": {"1": "a03e2141-0da3-45ab-8809-269a065fbe0e"}}, "__type__": "1"}, "7fd87b2c-04a5-48dc-a9b3-9b0ed40818cf": {"__data__": {"text": "\n\nAPI Documentation\n\nFor the external API of this crate refer to [Link to rustdoc API].\n\n[For a top-level directory, link to the most important APIs within.]\n\n", "doc_id": "7fd87b2c-04a5-48dc-a9b3-9b0ed40818cf", "embedding": null, "doc_hash": "a561cac5663e347465b20f0ec086542e0988bbe8014c558528d4f40282f22a6c", "extra_info": null, "node_info": {"start": 0, "end": 159, "_node_type": "1"}, "relationships": {"1": "deff5334-e69b-4144-ad04-85c36578fda4"}}, "__type__": "1"}, "c0267acd-ae2a-4a9d-bf3b-fc7eaba6dae7": {"__data__": {"text": "\n\nContributing\n\nRefer to the Aptos Project contributing guide [LINK].\n\n", "doc_id": "c0267acd-ae2a-4a9d-bf3b-fc7eaba6dae7", "embedding": null, "doc_hash": "d341772ed0d0059799c92fd4ea0e1d4fd67983d29d722aaa347c578a0dcc5bff", "extra_info": null, "node_info": {"start": 0, "end": 71, "_node_type": "1"}, "relationships": {"1": "a8d66870-36cc-4e8f-bce2-3c143aa4fe5d"}}, "__type__": "1"}, "e5e7e471-ae09-4872-bfb0-aabc2a87cfaa": {"__data__": {"text": "\n\nLicense\n\nRefer to the Aptos Project License [LINK].\n```\n\nA good example of README.md is `aptos-core/network/README.md` that describes the networking crate.\n\n", "doc_id": "e5e7e471-ae09-4872-bfb0-aabc2a87cfaa", "embedding": null, "doc_hash": "9fbf8d676c77a2cb208f53adf6b9ac8c72404518509ec41337d814b62d472cbd", "extra_info": null, "node_info": {"start": 0, "end": 159, "_node_type": "1"}, "relationships": {"1": "29932d69-88da-4e6a-b72f-7db508a893ed"}}, "__type__": "1"}, "a44c5e7b-9784-4ad2-bfdc-f0efa9ee7c8f": {"__data__": {"text": "\n\nBinary, Argument, and Crate Naming\n\nMost tools that we use everyday (rustc, cargo, git, rg, etc.) use dashes `-` as\na separator for binary names and arguments and the [GNU software\nmanual](https://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html)\ndictates that long options should \"consist of `--` followed by a name made of\nalphanumeric characters and dashes\". As such dashes `-` should be used as\nseparators in both binary names and command line arguments.\n\nIn addition, it is generally accepted by many in the Rust community that dashes\n`-` should be used as separators in crate names, i.e. `x25519-dalek`.\n\n", "doc_id": "a44c5e7b-9784-4ad2-bfdc-f0efa9ee7c8f", "embedding": null, "doc_hash": "790b6a6f3ce3441fcd1fe05a2a31bf1419e08ff8284d6267d38685c3ff2b7ed5", "extra_info": null, "node_info": {"start": 0, "end": 628, "_node_type": "1"}, "relationships": {"1": "c79ff2e6-2200-4025-bda7-d86d30ed906d"}}, "__type__": "1"}, "3f114365-777f-410b-b59d-f6e3cf018439": {"__data__": {"text": "\n\nCode suggestions\n\nIn the following sections, we have suggested some best practices for a uniform codebase. We will investigate and identify the practices that can be enforced using Clippy. This information will evolve and improve over time.\n\n", "doc_id": "3f114365-777f-410b-b59d-f6e3cf018439", "embedding": null, "doc_hash": "bd47f04db44ad9b5ae913035c2ddb57d9805aeb90e0187ffee0e680de31abae1", "extra_info": null, "node_info": {"start": 0, "end": 244, "_node_type": "1"}, "relationships": {"1": "76db04df-509c-4525-bac8-657eb8e573b2"}}, "__type__": "1"}, "396b4d10-06dc-4598-ab2e-62c6b0ac0b02": {"__data__": {"text": "\n\nAttributes\n\nMake sure to use the appropriate attributes for handling dead code:\n\n```\n// For code that is intended for production usage in the future\n#[allow(dead_code)]\n// For code that is only intended for testing and\n// has no intended production use\n#[cfg(test)]\n```\n\n", "doc_id": "396b4d10-06dc-4598-ab2e-62c6b0ac0b02", "embedding": null, "doc_hash": "8f7c232597708ac4ba3ecea54efaf890154821d460bd72ccd46d3615db1a46f7", "extra_info": null, "node_info": {"start": 0, "end": 273, "_node_type": "1"}, "relationships": {"1": "06020f69-c3f4-493a-b6f8-f4ccd857c7db"}}, "__type__": "1"}, "ff225bd4-065d-47e3-a284-3725d21fb482": {"__data__": {"text": "\n\nAvoid Deref polymorphism\n\nDon't abuse the Deref trait to emulate inheritance between structs, and thus reuse methods.  For more information, read Deref polymorphism.\n\n", "doc_id": "ff225bd4-065d-47e3-a284-3725d21fb482", "embedding": null, "doc_hash": "f516ab03dcb9bd3d4f040b23e98758797c24e758578bfd47cd804724b9890987", "extra_info": null, "node_info": {"start": 0, "end": 169, "_node_type": "1"}, "relationships": {"1": "5a74bf6e-d141-4b97-b53e-08a7b884207e"}}, "__type__": "1"}, "b62465da-281b-4995-820e-bada9a5d4e10": {"__data__": {"text": "\n\nComments\n\nWe recommend that you use `//` and `///` comments rather than block comments `/* ... */` for uniformity and simpler grepping.\n\n", "doc_id": "b62465da-281b-4995-820e-bada9a5d4e10", "embedding": null, "doc_hash": "b317869762d732dffc0d0f23646ebb0cede01c8d2b84a6b74d59d733d227963e", "extra_info": null, "node_info": {"start": 0, "end": 139, "_node_type": "1"}, "relationships": {"1": "5986b8ad-b245-402d-a8d2-bd37144def2a"}}, "__type__": "1"}, "8a4b2a9f-409c-4d7e-88a8-2b6aa1d086ba": {"__data__": {"text": "\n\nConcurrent types\n\nConcurrent types such as `CHashMap`, `AtomicUsize`, etc. have an immutable borrow on self i.e. `fn foo_mut(&self,...)` in order to support concurrent access on interior mutating methods. Good practices (such as those in the examples mentioned) avoid exposing synchronization primitives externally (e.g. `Mutex`, `RwLock`) and document the method semantics and invariants clearly.\n\n*When to use channels vs concurrent types?*\n\nListed below are high-level suggestions based on experience:\n\n* Channels are for ownership transfer, decoupling of types, and coarse-grained messages.  They fit well for transferring ownership of data, distributing units of work, and communicating async results.  Furthermore, they help break circular dependencies (e.g. `struct Foo` contains an `Arc` and `struct Bar` contains an `Arc` that leads to complex initialization).\n\n* Concurrent types (e.g. such as `CHashMap` or structs that have interior mutability building on `Mutex`, `RwLock`, etc.) are better suited for caches and states.\n\n", "doc_id": "8a4b2a9f-409c-4d7e-88a8-2b6aa1d086ba", "embedding": null, "doc_hash": "ea285d86c1cf3c49cd86c08f2accc0b337d57e45b2ec19b68fb5322eb11d4132", "extra_info": null, "node_info": {"start": 0, "end": 1037, "_node_type": "1"}, "relationships": {"1": "848a1b62-e41a-48cc-97f5-13e24a322e6b"}}, "__type__": "1"}, "f7eb527b-b499-4ba4-839e-04301b3c7b70": {"__data__": {"text": "\n\nError handling\n\nError handling suggestions follow the Rust book guidance.  Rust groups errors into two major categories: recoverable and unrecoverable errors.  Recoverable errors should be handled with Result.  Our suggestions on unrecoverable errors are listed below:\n\n*Fallible functions*\n\n* `duration_since_epoch()` - to obtain the unix time, call the function provided by `aptos-infallible`.\n* `RwLock` and `Mutex` - Instead of calling `unwrap()` on the standard library implementations of these functions, use the infallible equivalent types that we provide in `aptos-infallible`.\n\n*Panic*\n\n* `unwrap()` - Unwrap should only be used for test code.  For all other use cases, prefer `expect()`. The only exception is if the error message is custom-generated, in which case use `.unwrap_or_else(|| panic!(\"error: {}\", foo))`.\n* `expect()` - Expect should be invoked when a system invariant is expected to be preserved.  `expect()` is preferred over `unwrap()` and should contain a detailed error message on failure in most cases.\n* `assert!()` - This macro is kept in both debug/release and should be used to protect invariants of the system as necessary.\n* `unreachable!()` - This macro will panic on code that should not be reached (violating an invariant) and can be used where appropriate.\n\nIn production (non-test) code, outside of lock management,  all unrecoverable errors should be cleanly documented describing why said event is unrecoverable. For example, if the system is now in a bad state, state what that state is and the motivation for why a crash / restart is more effective than resolving it within a running system, and what if any steps an operator would need to take to resolve the issue.\n\n", "doc_id": "f7eb527b-b499-4ba4-839e-04301b3c7b70", "embedding": null, "doc_hash": "1c30810a98b97d6116f4b58ba4498db903a4011615951ed76e74e2dd11553e44", "extra_info": null, "node_info": {"start": 0, "end": 1714, "_node_type": "1"}, "relationships": {"1": "6fa7f371-8a2a-49a7-a274-013c0d588e8c"}}, "__type__": "1"}, "076ed0fb-1460-46b1-8555-546477a99aa8": {"__data__": {"text": "\n\nGenerics\n\nGenerics allow dynamic behavior (similar to `trait` methods) with static dispatch.  As the number of generic type parameters increases, the difficulty of using the type/method also increases (e.g. consider the combination of trait bounds required for this type, duplicate trait bounds on related types, etc.).  In order to avoid this complexity, we generally try to avoid using a large number of generic type parameters.  We have found that converting code with a large number of generic objects to trait objects with dynamic dispatch often simplifies our code.\n\n", "doc_id": "076ed0fb-1460-46b1-8555-546477a99aa8", "embedding": null, "doc_hash": "c987dc85c44fa0d292969b2d8837703780c4c6cb51f58af8b8c9af61eb66b4cd", "extra_info": null, "node_info": {"start": 0, "end": 575, "_node_type": "1"}, "relationships": {"1": "23a3b558-c573-4e5b-b797-f81b74a802a0"}}, "__type__": "1"}, "a5c4ec88-5db2-4dcf-9d2b-01d4bedc008e": {"__data__": {"text": "\n\nGetters/setters\n\nIn general, we follow naming recommendations for getters as specified here and for setters as defined here.\n\nGetters/setters should be avoided for `struct` types in the C spirit: compound, passive data structures without internal invariants. Adding them only increases the complexity and number of lines of code without improving the developer experience.\n\n```rust\nstruct Foo {\n    size: usize,\n    key_to_value: HashMap\n}\nimpl Foo {\n    /// Simple getter follows xxx pattern\n    fn size(&self) -> usize {\n        self.size\n    }\n    /// Setter follows set_xxx pattern\n    fn set_foo(&mut self, size: usize){\n        self.size = size;\n    }\n    /// Complex getter follows get_xxx pattern\n    fn get_value(&self, key: u32) -> Option {\n        self.key_to_value.get(&key)\n    }\n}\n```\n\n", "doc_id": "a5c4ec88-5db2-4dcf-9d2b-01d4bedc008e", "embedding": null, "doc_hash": "af385bc02c756106feda5f3d7265f8a7bb99267b282dd495ef5a4378c207a5dc", "extra_info": null, "node_info": {"start": 0, "end": 802, "_node_type": "1"}, "relationships": {"1": "eac779ea-3a7a-4412-84ce-1835ca79dba9"}}, "__type__": "1"}, "ff9d706a-7d73-4945-b431-b0b37dd1289b": {"__data__": {"text": "\n\nInteger Arithmetic\n\nAs every integer operation (`+`, `-`, `/`, `*`, etc.) implies edge-cases (e.g. overflows `u64::MAX + 1`, underflows `0u64 -1`, division by zero, etc.),\nwe use checked arithmetic instead of directly using math symbols.\nIt forces us to think of edge-cases, and handle them explicitely.\nThis is a brief and simplified mini guide of the different functions that exist to handle integer arithmetic:\n\n* checked_: use this function if you want to handle overflows and underflows as a special edge-case. It returns `None` if an underflow or overflow has happened, and `Some(operation_result)` otherwise.\n* overflowing_: use this function if you want the result of an overflow to potentially wrap around (e.g. `u64::MAX.overflow_add(10) == (9, true)`). It returns the underflowed or overflowed result as well as a flag indicating if an overflow has occured or not.\n* wrapping_: this is similar to overflowing operations, except that it returns the result directly. Use this function if you are sure that you want to handle underflows and overflows by wrapping around.\n* saturating_: if an overflow occurs, the result is kept within the boundary of the type (e.g. `u64::MAX.saturating_add(1) == u64::MAX`).\n\n", "doc_id": "ff9d706a-7d73-4945-b431-b0b37dd1289b", "embedding": null, "doc_hash": "08192bc4ac665b31ad09e8251096738d1155fae3220bf7db9384c7d4432ee482", "extra_info": null, "node_info": {"start": 0, "end": 1220, "_node_type": "1"}, "relationships": {"1": "3b0170cc-f73d-4671-9751-4644d5b8455c"}}, "__type__": "1"}, "709dbdea-ba70-474b-9f38-6e3bd01abf3c": {"__data__": {"text": "\n\nLogging\n\nWe currently use log for logging.\n\n* error! - Error-level messages have the highest urgency in log.  An unexpected error has occurred (e.g. exceeded the maximum number of retries to complete an RPC or inability to store data to local storage).\n* warn! - Warn-level messages help notify admins about automatically handled issues (e.g. retrying a failed network connection or receiving the same message multiple times, etc.).\n* info! - Info-level messages are well suited for \"one-time\" events (such as logging state on one-time startup and shutdown) or periodic events that are not frequently occurring - e.g. changing the validator set every day.\n* debug! - Debug-level messages can occur frequently (i.e. potentially > 1 message per second) and are not typically expected to be enabled in production.\n* trace! - Trace-level logging is typically only used for function entry/exit.\n\n", "doc_id": "709dbdea-ba70-474b-9f38-6e3bd01abf3c", "embedding": null, "doc_hash": "c95e2b392df51519a2465a46a0b0646c0a618d263cfe5a844cc3c827bd7bf248", "extra_info": null, "node_info": {"start": 0, "end": 893, "_node_type": "1"}, "relationships": {"1": "26a8c209-88cc-458a-acfb-1a33092706ce"}}, "__type__": "1"}, "d705891c-51ee-4abd-9279-c54799b769aa": {"__data__": {"text": "\n\nTesting\n\n*Unit tests*\n\nWe follow the general guidance provided here. Ideally, all code should be unit tested.  Unit tests should be in the same file as the code it is testing though in a distinct module, using the following syntax:\n\n```rust\nstruct Foo {\n}\nimpl Foo {\n  pub fn magic_number() -> u8 {\n    42\n  }\n}\n#[cfg(test)]\nmod tests {\n  #test\n  fn verify_magic_number() {\n    assert_eq!(Foo::magic_number(), 42);\n  }\n}\n```\n\n*Property-based tests*\n\nAptos contains property-based tests written in Rust using the `proptest` framework. Property-based tests generate random test cases and assert that invariants, also called *properties*, hold for the code under test.\n\nSome examples of properties tested in Aptos:\n\n* Every serializer and deserializer pair is tested for correctness with random inputs to the serializer. Any pair of functions that are inverses of each other can be tested this way.\n* The results of executing common transactions through the VM are tested using randomly generated scenarios and verified with an *Oracle*.\n\nA tutorial for `proptest` can be found in the `proptest` book.\n\nReferences:\n\n* What is Property Based Testing? (includes a comparison with fuzzing)\n* An introduction to property-based testing\n* Choosing properties for property-based testing\n\n*Fuzzing*\n\nAptos contains harnesses for fuzzing crash-prone code like deserializers, using `libFuzzer` through `cargo fuzz`. For more examples, see the `testsuite/aptos_fuzzer` directory.\n\n", "doc_id": "d705891c-51ee-4abd-9279-c54799b769aa", "embedding": null, "doc_hash": "186ea6278ca6e2df3b28ba1ad8a644996c63e201910e6ac0b64b9b09d33e7c8f", "extra_info": null, "node_info": {"start": 0, "end": 1469, "_node_type": "1"}, "relationships": {"1": "3a78d674-db06-429c-a8fc-ab9cfe64aa3b"}}, "__type__": "1"}, "73637c4c-17e2-4922-bf63-2caac86d577f": {"__data__": {"text": "\n\nConditional compilation of tests\n\nAptos [conditionally\ncompiles](https://doc.rust-lang.org/stable/reference/conditional-compilation.html)\ncode that is *only relevant for tests, but does not consist of tests* (unitary\nor otherwise). Examples of this include proptest strategies, implementations\nand derivations of specific traits (e.g. the occasional `Clone`), helper\nfunctions, etc. Since Cargo is [currently not equipped for automatically activating features\nin tests/benchmarks](https://github.com/rust-lang/cargo/issues/2911), we rely on two\nconditions to perform this conditional compilation:\n- the test flag, which is activated by dependent test code in the same crate\n  as the conditional test-only code.\n- the `fuzzing` custom feature, which is used to enable fuzzing and testing\nrelated code in downstream crates. Note that this must be passed explicitly to\n`cargo xtest` and `cargo x bench`. Never use this in `[dependencies]` unless\nthe crate is only for testing.\n\nAs a consequence, it is recommended that you set up your test-only code in the following fashion.\n\n**For production crates:**\n\nProduction crates are defined as the set of crates that create externally published artifacts, e.g. the Aptos validator,\nthe Move compiler, and so on.\n\nFor the sake of example, we'll consider you are defining a test-only helper function `foo` in `foo_crate`:\n\n1. Define the `fuzzing` flag in `foo_crate/Cargo.toml` and make it non-default:\n    ```toml\n    [features]\n    default = []\n    fuzzing = []\n    ```\n2. Annotate your test-only helper `foo` with both the `test` flag (for in-crate callers) and the `\"fuzzing\"` custom feature (for out-of-crate callers):\n    ```rust\n    #[cfg(any(test, feature = \"fuzzing\"))]\n    fn foo() { ... }\n    ```\n3. (optional) Use `cfg_attr` to make test-only trait derivations conditional:\n    ```rust\n    #[cfg_attr(any(test, feature = \"testing\"), derive(FooTrait))]\n    #[derive(Debug, Display, ...)] // inconditional derivations\n    struct Foo { ... }\n    ```\n4. (optional) Set up feature transitivity for crates that call crates that have test-only members. Let's say it's the case of `bar_crate`, which, through its test helpers, calls into `foo_crate` to use your test-only `foo`. Here's how you would set up `bar_crate/Cargo.toml`:\n    ```toml\n    [features]\n    default = []\n    fuzzing = [\"foo_crate/fuzzing\"]\n    ```\n\n**For test-only crates:**\n\nTest-only crates do not create published artifacts. They consist of tests, benchmarks or other code that verifies\nthe correctness or performance of published artifacts. Test-only crates are\nexplicitly listed in `x.toml` under `[workspace.test-only]`.\n\nThese crates do not need to use the above setup. Instead, they can enable the `fuzzing` feature in production crates\ndirectly.\n\n```toml\n[dependencies]\nfoo_crate = { path = \"...\", features = [\"fuzzing\"] }\n```\n\n*A final note on integration tests*: All tests that use conditional test-only\nelements in another crate need to activate the \"fuzzing\" feature through the\n`[features]` section in their `Cargo.toml`. [Integration\ntests](https://doc.rust-lang.org/rust-by-example/testing/integration_testing.html)\ncan neither rely on the `test` flag nor do they have", "doc_id": "73637c4c-17e2-4922-bf63-2caac86d577f", "embedding": null, "doc_hash": "4359f5e23dbb49b47865398604ae9b267b93dd80118921553a5201fed0292868", "extra_info": null, "node_info": {"start": 0, "end": 3200, "_node_type": "1"}, "relationships": {"1": "fc0d9066-066c-4883-9523-7fd76aa1511e", "3": "69e3e2b8-9778-4a98-825e-b06068534c48"}}, "__type__": "1"}, "69e3e2b8-9778-4a98-825e-b06068534c48": {"__data__": {"text": "neither rely on the `test` flag nor do they have a proper `Cargo.toml` for\nfeature activation. In the Aptos codebase, we therefore recommend that\n*integration tests which depend on test-only code in their tested crate* be\nextracted to their own test-only crate. See `language/move-binary-format/serializer_tests`\nfor an example of such an extracted integration test.\n\n*Note for developers*: The reason we use a feature re-export (in the `features]` section of the `Cargo.toml` is that a profile is not enough to activate the `\"fuzzing\"` feature flag. See [cargo-issue #291 for details).\n\n", "doc_id": "69e3e2b8-9778-4a98-825e-b06068534c48", "embedding": null, "doc_hash": "3717dc6044569bbfb606082d84cc0d2ed90d9d9a204cb0a60510b50de832917c", "extra_info": null, "node_info": {"start": 3152, "end": 3740, "_node_type": "1"}, "relationships": {"1": "fc0d9066-066c-4883-9523-7fd76aa1511e", "2": "73637c4c-17e2-4922-bf63-2caac86d577f"}}, "__type__": "1"}, "83a81b29-3541-4298-8658-c3aaa68e8570": {"__data__": {"text": "\n\nAptos Rust SDK\n\n", "doc_id": "83a81b29-3541-4298-8658-c3aaa68e8570", "embedding": null, "doc_hash": "bcbaef557029c7c71d7b9ae5b4f22089955cfbd0392a5989b65452ee61c787c8", "extra_info": null, "node_info": {"start": 0, "end": 18, "_node_type": "1"}, "relationships": {"1": "0b2f1043-6815-4bb4-bb3b-6dbb4c9c4d39"}}, "__type__": "1"}, "e2652d65-6374-488e-ba91-f79207ee74ff": {"__data__": {"text": "\n\nInstalling Rust SDK\n\nAptos provides an official Rust SDK in the Aptos-core GitHub repository. To use the Rust SDK, add the following dependency on the git repo directly, like this:\n\n```toml\naptos-sdk = { git = \"https://github.com/aptos-labs/aptos-core\", branch = \"devnet\" }\n```\n\nThe source code for the official Rust SDK is available in the aptos-core GitHub repository.\n\n", "doc_id": "e2652d65-6374-488e-ba91-f79207ee74ff", "embedding": null, "doc_hash": "7e42cd104f547ba296c3e382e9538fbf631f8a74c0528de43f0f90566bb03b72", "extra_info": null, "node_info": {"start": 0, "end": 374, "_node_type": "1"}, "relationships": {"1": "7b174519-ba3f-4025-a2a9-24a6f62fadf1"}}, "__type__": "1"}, "e96bb609-a8c8-494d-8662-47871b6e0bab": {"__data__": {"text": "\n\nUsing Rust SDK\n\nSee the Developer Tutorials for code examples showing how to use the Rust SDK.\n", "doc_id": "e96bb609-a8c8-494d-8662-47871b6e0bab", "embedding": null, "doc_hash": "4d7d96176b85fbe02f5ce460f0e79eaa7d290c77af0a6c4c7756cceb038d45d1", "extra_info": null, "node_info": {"start": 0, "end": 97, "_node_type": "1"}, "relationships": {"1": "92a95340-b8ec-46e9-91e0-b6ef998445b7"}}, "__type__": "1"}, "018c5f12-0f0f-4c3c-9198-d67afd537100": {"__data__": {"text": "\n\nProvider class\n\nThe client layer exports a Provider class that extends both the Aptos REST API and the Aptos Indexer API.\nThe `Provider` class acts as a mediator between the client-side application and the blockchain server, ensuring reliable and efficient communication.\nThis class provides a high-level interface for the application to interact with the blockchain server. The class is designed to be easy to use and understand, allowing developers to quickly integrate the SDK into their applications.\n\nThe `Provider` class accepts:\n\n- `network` - network enum type `mainnet | testnet | devnet` indicates the network the app interacts with.\n- `CustomEndpoints` of type `{fullnodeUrl: string, indexerUrl: string}` - this is to support devs who run their own nodes/indexer or to use local development against a local testnet.\n- `Config` - an optional argument the AptosClient accepts.\n- `doNotFixNodeUrl` - an optional argument the AptosClient accepts.\n\n", "doc_id": "018c5f12-0f0f-4c3c-9198-d67afd537100", "embedding": null, "doc_hash": "8cb08e9d267f5a5e1b12d07a14403e20a696820e46d3750ddc678008e4774324", "extra_info": null, "node_info": {"start": 0, "end": 957, "_node_type": "1"}, "relationships": {"1": "8beded6e-8050-4951-9dff-cd18b351fa1c"}}, "__type__": "1"}, "4a61aa76-aa5e-47ea-aece-934fa411d3d1": {"__data__": {"text": "\n\nInitializing the Provider class\n\nTo initialize the Provider class, you will need to pass in the necessary configuration parameters. Here is an example:\n\n```ts\nimport { Provider, Network } from \"aptos\";\n\nconst provider = new Provider(Network.TESTNET);\n```\n\n", "doc_id": "4a61aa76-aa5e-47ea-aece-934fa411d3d1", "embedding": null, "doc_hash": "a895edca49f7e50f1c29db9bd18228016486ef088246d0d191eccbcd8443b79a", "extra_info": null, "node_info": {"start": 0, "end": 258, "_node_type": "1"}, "relationships": {"1": "db0f3715-2657-4354-87e0-517d78f607ff"}}, "__type__": "1"}, "e11ecad1-218a-4aa9-b4c0-2a2e5ab8f193": {"__data__": {"text": "\n\nFetch data from chain\n\nTo make an API call, you will need to call the appropriate method on the Provider class. The method name and parameters will depend on the specific API you are using. Here is an example:\n\n```ts\nconst account = await provider.getAccount(\"0x123\");\n```\n\nIn this example, we are using the `getAccount()` method to retrieve information about an account with the address `0x123`.\n\n", "doc_id": "e11ecad1-218a-4aa9-b4c0-2a2e5ab8f193", "embedding": null, "doc_hash": "4ef611851c0495d10f7bc0d17db66ff017a4b29f2ad83f21b9556549f48dca10", "extra_info": null, "node_info": {"start": 0, "end": 400, "_node_type": "1"}, "relationships": {"1": "4c4ea074-a551-4fef-a529-942ed5bbacf9"}}, "__type__": "1"}, "2e20cb90-453a-4e9c-97f5-36bf756600fe": {"__data__": {"text": "\n\nSubmit Transaction to chain\n\nTo submit a transaction to the Aptos network we should:\n\n1. Generate a raw transaction\n2. Sign the generated raw transaction\n3. Submit the signed transaction\n\n", "doc_id": "2e20cb90-453a-4e9c-97f5-36bf756600fe", "embedding": null, "doc_hash": "fd72143ee9d53645955a244f7ca30b1fc3730c0814b76b8ff677f5177fc4b105", "extra_info": null, "node_info": {"start": 0, "end": 190, "_node_type": "1"}, "relationships": {"1": "b9ae9e52-75da-47da-8d08-6bbe290893ea"}}, "__type__": "1"}, "8ad5a9af-a439-4ef1-9f2e-56ef55010efd": {"__data__": {"text": "\n\nGenerate a Raw Transaction\n\nThe TypeScript SDK provides 2 efficient ways to `generate a raw transaction` that can be signed and submitted to chain.\n\n", "doc_id": "8ad5a9af-a439-4ef1-9f2e-56ef55010efd", "embedding": null, "doc_hash": "8ff5142a68af536cf35d44bc1a752779529ec9590b89d8dafac4cc2f6e3d6bb9", "extra_info": null, "node_info": {"start": 0, "end": 151, "_node_type": "1"}, "relationships": {"1": "4b24bc49-b631-4809-8873-ee3888833e5d"}}, "__type__": "1"}, "ca1615e4-3ca2-4637-9237-412c84f910b4": {"__data__": {"text": "\n\nTransaction Builder\n\nThe `generateTransaction()` method, accepts an `entry function payload` type and is available for entry funtion transaction submission. It uses the TransactionBuilderRemoteABI to fetch the ABI from the blockchain, serializes the payload arguments based on the entry function argument types and generates and return a raw transaction that can be signed and submitted to the blockchain.\n\n```ts\nconst alice = new AptosAccount();\n\nconst payload = {\n  function: \"0x123::todolist::create_task\",\n  type_arguments: [],\n  arguments: [\"read aptos.dev\"],\n};\n\nconst rawTxn = await provider.generateTransaction(alice.address(), entryFunctionPayload);\n```\n\n`function` \u2013 This must be a fully qualified function name and composed of `module address`, `module name` and `function name` separated by `::`.\n`type_arguments` \u2013 This is for the case a Move function expects a generic type argument.\n`arguments` \u2013 The arguments the function expects.\n\n:::tip\nTo submit an entry function payload, using the Transaction Builder would be simpler to use as the developer do not need to deal with BCS serialization.\n:::\n\n", "doc_id": "ca1615e4-3ca2-4637-9237-412c84f910b4", "embedding": null, "doc_hash": "649d151f225f2edba2430164422e2c84acced5e9a22e89bd3c3bf2d1f165dc51", "extra_info": null, "node_info": {"start": 0, "end": 1115, "_node_type": "1"}, "relationships": {"1": "e27c7a37-c793-469a-b527-904ac82572f3"}}, "__type__": "1"}, "98b9b876-6a23-46cf-be28-479b238bb17f": {"__data__": {"text": "\n\nBCS Transaction\n\nThe `generateRawTransaction()` method, accept `any transaction payload type (entry, script, multisig)` and exepcts for the arguments passed in to be serialized. It then generates and returns a raw transaction that can be signed and submitted to chain.\n\n```ts\nconst alice = new AptosAccount();\n\nconst entryFunctionPayload = new TxnBuilderTypes.TransactionPayloadEntryFunction(\n  TxnBuilderTypes.EntryFunction.natural(\"0x123::todolist\", \"create_task\", [], [bcsSerializeStr(\"read aptos.dev\")]),\n);\n\nconst rawTxn = await provider.generateRawTransaction(alice.address(), entryFunctionPayload);\n```\n\nFor simplicity, the TypeScript SDK provides a method that can submit a BCS transaction in a one call.\n\n```ts\nconst rawTxn = await provider.generateSignSubmitTransaction(alice, entryFunctionPayload);\n```\n\n", "doc_id": "98b9b876-6a23-46cf-be28-479b238bb17f", "embedding": null, "doc_hash": "9f2d2dc07e5e14a447cf6032b0d7bf6baa11bd7b4ce01110ed870f5ddb25f0d1", "extra_info": null, "node_info": {"start": 0, "end": 817, "_node_type": "1"}, "relationships": {"1": "6035f3e4-b42d-49fa-92af-c7e91ed69c0b"}}, "__type__": "1"}, "c79efdb0-2251-4df0-8654-16eaf9eaddb4": {"__data__": {"text": "\n\nSign a Raw Transaction\n\nOnce one has generated a raw transaction, they need to sign this transaction with their private key. The TypeScript SDK provides a method that accepts an `aptos account` and `a raw transaction` and signs it.\n\n```ts\nconst signedTxn = AptosClient.generateBCSTransaction(alice, rawTxn);\n```\n\n", "doc_id": "c79efdb0-2251-4df0-8654-16eaf9eaddb4", "embedding": null, "doc_hash": "ed98d74addc69fce7a1e30f482712aa64171d547a1b86c1009fa20a91fe2ee9c", "extra_info": null, "node_info": {"start": 0, "end": 315, "_node_type": "1"}, "relationships": {"1": "dc30af87-d86e-4517-ac77-f59eb102af6d"}}, "__type__": "1"}, "955ddbe5-dcca-4572-b203-747836816a9c": {"__data__": {"text": "\n\nSubmit transaction to blockchain\n\nOnce a transaction has been signed, it is ready to be submitted to the blockchain. The TypeScript SDK provides a method that accepts the `signed transaction` and submits it to the Aptos network.\n\n```ts\nconst transactionRes = await provider.submitSignedBCSTransaction(signedTxn);\n```\n\n", "doc_id": "955ddbe5-dcca-4572-b203-747836816a9c", "embedding": null, "doc_hash": "d50468389a217840c452cbd502c38be94d1521be7449e93a0da1d14d61cdeab9", "extra_info": null, "node_info": {"start": 0, "end": 320, "_node_type": "1"}, "relationships": {"1": "4fa48adb-260e-4c39-986f-566607a2857f"}}, "__type__": "1"}, "7763e508-2c9e-40d6-9d3d-8822eff53f89": {"__data__": {"text": "\n\nLearn more\n\nThe Provider class extends both AptosClient and IndexerClient classes and gives the end user the option to simply create a Provider instance and call a method by hiding the underlying implementation. If, for any reason, you want to use AptosClient or IndexerClient directly without the Provider class, you are able to do it.\n\n", "doc_id": "7763e508-2c9e-40d6-9d3d-8822eff53f89", "embedding": null, "doc_hash": "27bce68c26aee54dfa788de089541a635c28f6e43450181c28e4df7e62e5143a", "extra_info": null, "node_info": {"start": 0, "end": 340, "_node_type": "1"}, "relationships": {"1": "443c7f33-d717-4a58-853d-ce552f83f6ac"}}, "__type__": "1"}, "f9eeebf8-b390-4d7e-9bf3-bde050251f23": {"__data__": {"text": "\n\nTransaction Builder\n\nThe Aptos TypeScript SDK exposes five transaction builder classes:\n\n- TransactionBuilder that takes in a Signing Message (serialized raw transaction) and returns a signature.\n- TransactionBuilderEd25519 extends the TransactionBuilder class and provides a signing method for raw transactions with a single public key.\n- TransactionBuilderMultiEd25519 extends the TransactionBuilder class and provides a signing method for signing a raw transaction with a multisignature public key.\n- TransactionBuilderABI builds raw transactions based on ABI.\n- TransactionBuilderRemoteABI downloads JSON ABIs from the fullnodes. It then translates the JSON ABIs to the format accepted by TransactionBuilderABI.\n\nThe Transaction Builder contains the TypeScript types for constructing the transaction payloads. The Transaction Builder within the TypeScript SDK supports the following transaction payloads:\n\n1. Entry Function\n2. Script\n3. MultiSig Transaction\n\n", "doc_id": "f9eeebf8-b390-4d7e-9bf3-bde050251f23", "embedding": null, "doc_hash": "391eba3123b79f83220458d3532b551cfe41f01e761f744115afb3501896d00e", "extra_info": null, "node_info": {"start": 0, "end": 965, "_node_type": "1"}, "relationships": {"1": "73e78c0f-43ce-4c5e-8809-1a76302e85c3"}}, "__type__": "1"}, "6bd66141-d912-499d-b055-5a4556386f22": {"__data__": {"text": "\n\nGenerate transaction\n\nThe TypeScript SDK provides 2 efficient ways to generate a raw transaction that can be signed and submitted to chain\n\n1. Using the `generateTransaction()` method. This methods accepts an `entry function payload` type and is available for entry funtion transaction submission. It uses the TransactionBuilderRemoteABI to fetch the ABI from chain, serializes the payload arguments based on the entry function argument types and generates and return a raw transaction that can be signed and submitted to chain.\n2. Using the `generateRawTransaction()` method. This method accept any transaction payload type (entry, script, multisig) and expects the passed in arguments to be serialized. It then generates and returns a raw transaction that can be signed and submitted to chain.\n\nIn addition, The Aptos SDK supports transaction status queries (success, failure, pending), by transaction hash.\n\n", "doc_id": "6bd66141-d912-499d-b055-5a4556386f22", "embedding": null, "doc_hash": "538f393c9a3369fb39bff8e36c0c7ae46d88ce145c5937772af69dc7423513c9", "extra_info": null, "node_info": {"start": 0, "end": 913, "_node_type": "1"}, "relationships": {"1": "bac1a5c7-3ea5-490d-b9a5-f5e1e8195faa"}}, "__type__": "1"}, "ab415a56-9812-44e6-8808-e65ea9443d3f": {"__data__": {"text": "\n\nAptosAccount class\n\nThe AptosAccount class has a constructor that creates a new account instance or retrieves an existing account instance. Additionally, this class provides the methods for:\n\n- Generating Ed25519 key pairs. The Ed25519 public keys can be used to derive the chain account addresses, while the private keys should be kept private for transaction signing.\n- Signing a bytes buffer with an Ed25519 public key.\n- Deriving initial account addresses from the public keys.\n- Retrieving a resource account address by source address and seeds.\n- Deriving account address, public key, and private key.\n\n", "doc_id": "ab415a56-9812-44e6-8808-e65ea9443d3f", "embedding": null, "doc_hash": "ef37c7c4b37ae7a6349cb5675f05b92aecba7f3799bfdc98a03d50b95ef329b9", "extra_info": null, "node_info": {"start": 0, "end": 611, "_node_type": "1"}, "relationships": {"1": "7642a021-1b00-4821-bf18-5079d21147f5"}}, "__type__": "1"}, "121ce724-55da-4b95-81b4-53c984623e8e": {"__data__": {"text": "\n\nTokenClient class\n\nThe TokenClient class provides methods for creating and querying the NFT collections and tokens.\nIt covers (1) write methods that support creating, transferring, mutating, and burning tokens on-chain and (2) read methods performing deserialization and returning data in TypeScript objects.\n\nThe main write methods supported by the Token SDK are:\n\n- Create Collection\n- Create Token\n- Offer Token\n- Claim Token\n- Directly Transfer Token\n- Transfer Token with Opt-in\n- Mutate Token Properties\n- Burn Token by Owner or Creator\n\nThe main read methods deserializing on-chain data to TypeScript objects are:\n\n- Get CollectionData\n- Get TokenData\n- Get Token of an Account\n\n:::tip\nYou can also use this TokenClient API as an example of NFT Token API before you start developing your own application APIs with the SDK.\n:::\n\n", "doc_id": "121ce724-55da-4b95-81b4-53c984623e8e", "embedding": null, "doc_hash": "bcccf506b3aabc63af4c9c714c0112ea73a127bfcee0c183de31c2461fbe75fb", "extra_info": null, "node_info": {"start": 0, "end": 837, "_node_type": "1"}, "relationships": {"1": "95e0f128-550a-4267-a914-57516abbfed7"}}, "__type__": "1"}, "3c779643-5e10-437d-a088-9ad6f6b24a64": {"__data__": {"text": "\n\nANSClient class\n\nThe ANSClient class provides methods for creating an ANS name on the Aptos network and querying ANS data.\nIt covers (1) write methods that support creating a unique identity on the Aptos network by registering an Aptos name and (2) read methods to get an account ANS name by an account address and get an account address by an ANS name.\n\nThe main write methods supported by the SDK are:\n\n- Mint an Aptos Name\n- Init Reverse Lookup Registry\n\nThe main read methods are:\n\n- Get Address By Name\n- Get Primary Name By Address\n\n", "doc_id": "3c779643-5e10-437d-a088-9ad6f6b24a64", "embedding": null, "doc_hash": "22a347ad7bb71e120e2e0762c377d1a858776c7bea919ed7ba3a241a15d20c41", "extra_info": null, "node_info": {"start": 0, "end": 541, "_node_type": "1"}, "relationships": {"1": "d54f9510-2dba-4223-b39f-88ad6c7b2c55"}}, "__type__": "1"}, "30ec6867-cd20-4cb2-9be2-c194c5eb70ba": {"__data__": {"text": "\n\nFaucetClient class\n\nThe FaucetClient class is a thin wrapper for the Aptos faucet that provides a way to funds Aptos accounts. The class provides a request method to request token for an Aptos acount.\n\nThe main read methods are:\n\n- Fund Account\n\n", "doc_id": "30ec6867-cd20-4cb2-9be2-c194c5eb70ba", "embedding": null, "doc_hash": "8abfc9320979c537d2403ef30d4faecd97be827ece22b3d88fdd20e294f21026", "extra_info": null, "node_info": {"start": 0, "end": 248, "_node_type": "1"}, "relationships": {"1": "240753c1-a9e0-4ec9-a61d-4a80068a02be"}}, "__type__": "1"}, "cfc2b5e7-71d6-4b80-a30c-3642051aedf0": {"__data__": {"text": "\n\nCoinClient class\n\nThe CoinClient class provides method to intercat with the coin module to transfer coins between accounts and to check an account balance. By default it transfers `0x1::aptos_coin::AptosCoin`, but you can specify a different coin type with the `coinType` argument.\n\nThe main read methods are:\n\n- Transfer\n- Check Balance\n\n", "doc_id": "cfc2b5e7-71d6-4b80-a30c-3642051aedf0", "embedding": null, "doc_hash": "242d90690c4a888d106f7cf93a21f811f2131859149a54ce79fb6ab5fb30cb71", "extra_info": null, "node_info": {"start": 0, "end": 341, "_node_type": "1"}, "relationships": {"1": "ed04f952-2b9f-485c-94f5-b552ec3f4880"}}, "__type__": "1"}, "edc85236-27e7-4a7c-9ef4-f12425915dd4": {"__data__": {"text": "\n\nBuild a Plugin\n\nDevelopers can also create plugins to extend the functionality of the SDK and to provide users with a better experience. To do that, simply follow these steps:\n\n1. Create a new `.ts` file under the `src/plugins/` folder and name it `.ts` (e.g. `ans_client`).\n2. Create a class with the same `pluginName` (e.g. `AnsClient`) and implement it.\n3. Export that file from the `src/plugins/index.ts` file (e.g. `export * from \"./ans_client\";`).\n\n", "doc_id": "edc85236-27e7-4a7c-9ef4-f12425915dd4", "embedding": null, "doc_hash": "bc1e59ff02f39506b974b06c7f3a0504f6a244e46fce3188ccf9f29e30d6f94c", "extra_info": null, "node_info": {"start": 0, "end": 457, "_node_type": "1"}, "relationships": {"1": "b8022a1c-b153-4c0d-9f8f-be853f942dee"}}, "__type__": "1"}, "13606472-3242-4888-b72e-6b777d0dfa90": {"__data__": {"text": "\n\nValidation for the Transaction Builder and BCS\n\nThe BCS is used to assemble and serialize the transaction payloads for signing and submission.\n\nGiven that different programming languages have different primitive type constraints (e.g., byte length, value range, etc.) and various composite types support (e.g., enum, struct, class, etc.), the code for data serialization is hard to validate.\n\nThe Aptos SDK validates the Transaction Builder and BCS in two ways:\n\n1. The first level of validation is through unit tests and end-to-end (e2e) tests.\n\n:::tip\n\nAn example of unit tests for the BCS serializer can be found in `serializer.test.ts`.\n\nAn example of an e2e test for submitting a BCS transaction can be found in `aptos_client.test.ts`.\n\n:::\n\n2. The second level of validation is fuzzing tests with test vectors. The test vectors are produced by the same code used by the Aptos blockchain. The test vectors are arrays of JSON objects. Each JSON object contains randomized inputs and the expected outputs. The Aptos SDKs can parse and load test vectors to validate their implementations of Transaction Builder and BCS.\n\nThere are a two test vectors. Each covers one type of transaction payload:\n\n- EntryFunction vector\n- Script vector\n\nVector items are self-explanatory. However, a special serialization method is used to save space and avoid data overflow. The details are described below:\n\n- All account address are hex-coded.\n- `args` in EntryFunction is hex-coded.\n- U64 and U128 numbers are serialized as string literals to avoid data truncation.\n- U8 is serialized as a number (not a string).\n- `code` in Script and ModuleBundle are hex-coded.\n\n:::tip\nSee the `transaction_vector.test.ts` code example for how the TypeScript SDK does vector validation.\n:::\n\n", "doc_id": "13606472-3242-4888-b72e-6b777d0dfa90", "embedding": null, "doc_hash": "631ee3af75db07df2faf43e48ad127a1ee622de3b7088dd72d88300b8a25d96b", "extra_info": null, "node_info": {"start": 0, "end": 1769, "_node_type": "1"}, "relationships": {"1": "023f8638-78a5-44d6-9a38-77831d7f3b20"}}, "__type__": "1"}, "cda774f5-1564-4e84-a418-098736e9256a": {"__data__": {"text": "\n\nUse the Aptos SDKs\n\nUse these Aptos software development kits (SDKs), in combination with the Aptos CLI for your development on the Aptos blockchain.\n\n- ### TypeScript SDK\n\n- ### Python SDK\n\n- ### Rust SDK\n\n- ### Unity SDK\n\nTo get started, develop with the Aptos SDKs following our tutorials.\n\n", "doc_id": "cda774f5-1564-4e84-a418-098736e9256a", "embedding": null, "doc_hash": "ff366bb84c88aba77278f0f450f4741636e1681779504d33c4b5be3366f4c9ab", "extra_info": null, "node_info": {"start": 0, "end": 296, "_node_type": "1"}, "relationships": {"1": "6e51b324-e3cf-4cb5-a0db-b3452483f906"}}, "__type__": "1"}, "0d264520-2ab8-4adc-a72b-3a85c270d44c": {"__data__": {"text": "\n\nShutting Down Nodes\n\nFollow these instructions to shut down the validator node and validator fullnode, and cleanup the resources used by the nodes.\n\n", "doc_id": "0d264520-2ab8-4adc-a72b-3a85c270d44c", "embedding": null, "doc_hash": "c49c8c35ddfe2530de056b1d9b912c5d1129ef0610f15d31848e38f323e5aad6", "extra_info": null, "node_info": {"start": 0, "end": 151, "_node_type": "1"}, "relationships": {"1": "389cbf80-5582-4fdc-9006-6ffd0d713360"}}, "__type__": "1"}, "a995e6fc-a3e2-4943-aac7-ce4750ecb3ef": {"__data__": {"text": "\n\nLeaving the validator set\n\nBefore you shutdown the node, make sure to leave the validator set first. This will be become effective in the next epoch. Also note that a node can choose to leave the validator set at anytime, or it would happen automatically when there is insufficient stake in the validator account. To leave the validator set, run the below command, shown using the example profile of `mainnet-operator`:\n\n```bash\naptos node leave-validator-set --profile mainnet-operator --pool-address \n```\n\n:::danger Important\nIf you leave and then rejoin in the same epoch, the rejoin would fail. This is because  when you leave, your validator state changes from \"active\" to \"pending_inactive\" but not yet \"inactive\". Hence the rejoin would fail.\n::: \n\nAfter leaving the validator set, follow any one of the below sections to shut down your nodes. \n\n", "doc_id": "a995e6fc-a3e2-4943-aac7-ce4750ecb3ef", "embedding": null, "doc_hash": "30d0afbe7856c4caf6ff2f74b6ccd96dfa3882b2f6faf976ad76e9461f4cd7e7", "extra_info": null, "node_info": {"start": 0, "end": 855, "_node_type": "1"}, "relationships": {"1": "38830d6f-2a8d-43b9-a468-8795e65f34d6"}}, "__type__": "1"}, "1752fe98-b578-4712-ab7f-4105f16983f1": {"__data__": {"text": "\n\nUsing source code\n\n1. Stop your node.\n2. Remove the data directory: `rm -r `.\n3. Remove the genesis blob file and waypoint file.\n4. If you want to reuse your node identity, you can choose to keep these configuration files: \n   - `private-keys.yaml`\n   - `validator-identity.yaml`\n   - `validator-full-node-identity.yaml` \n  \n  or else you can delete these files.\n\n", "doc_id": "1752fe98-b578-4712-ab7f-4105f16983f1", "embedding": null, "doc_hash": "6f70f38c534b3b2fcf79839a5be56e2a194a3cce7d3c340cfaeb7fdf357fb55e", "extra_info": null, "node_info": {"start": 0, "end": 366, "_node_type": "1"}, "relationships": {"1": "2d98a228-a166-43b2-b95b-b5921c96f2ce"}}, "__type__": "1"}, "55a44aac-758b-4ad3-9b36-85a11e342e87": {"__data__": {"text": "\n\nUsing Docker\n\n1. Stop your node and remove the data volumes: `docker compose down --volumes`.\n2. Remove the genesis blob file and waypoint file.\n3. If you want to reuse your node identity, you can choose to keep these configuration files: \n   - `private-keys.yaml`\n   - `validator-identity.yaml`\n   - `validator-full-node-identity.yaml` \n  \n  or else you can delete these files.\n\n", "doc_id": "55a44aac-758b-4ad3-9b36-85a11e342e87", "embedding": null, "doc_hash": "09c718102d680c14d5a5c414129c77ff322a333397807a87bf5dec66dbde1d00", "extra_info": null, "node_info": {"start": 0, "end": 382, "_node_type": "1"}, "relationships": {"1": "0787496d-d332-48a6-8fe4-91183fa2febf"}}, "__type__": "1"}, "1ddd08b5-03be-4935-ab39-a2f6d88aec00": {"__data__": {"text": "\n\nUsing Terraform\n\n- Stop your node and delete all the resources: `terraform destroy`.\n\n\n", "doc_id": "1ddd08b5-03be-4935-ab39-a2f6d88aec00", "embedding": null, "doc_hash": "547bd914b1d81c95a3a5b989265f80c91ad5b6b266eeaec0b7222b7c25f5d10c", "extra_info": null, "node_info": {"start": 0, "end": 89, "_node_type": "1"}, "relationships": {"1": "00ee8221-5fa2-4baa-b81d-d0fb17492a48"}}, "__type__": "1"}, "983428ec-f179-4683-a447-305dac7a4a15": {"__data__": {"text": "\n\nCreate a Signed Transaction\n\nAll transactions executed on the Aptos blockchain must be signed. This requirement is enforced by the chain for security reasons.\n\n", "doc_id": "983428ec-f179-4683-a447-305dac7a4a15", "embedding": null, "doc_hash": "b7e3561e6dfba4738fe1265f03148e57da8fab291ee6b6beed976c32139adc57", "extra_info": null, "node_info": {"start": 0, "end": 162, "_node_type": "1"}, "relationships": {"1": "de6053b8-2caa-4b56-91c6-be3e6279a69e"}}, "__type__": "1"}, "99a7e504-4a3b-41a7-8f12-a20123304343": {"__data__": {"text": "\n\nGenerating the signing message\n\nThe first step in signing a transaction is to generate the signing message from the transaction. To generate such a signing message, you can use:\n\n- The Aptos node's REST API. The Aptos node will generate the signing message, the transaction signature and will submit the signed transaction to the Aptos blockchain. However, this approach is not secure.\n  - Also see the tutorial Your First Transaction that explains this approach.\n- However, you may prefer instead that your client application, for example, a hardware security module (HSM), be responsible for generating the signed transaction. In this approach, before submitting transactions, a client must:\n  - Serialize the transactions into bytes, and\n  - Sign the bytes with the account private key. See Accounts for how accounts and private keys work.\n\nThis guide will introduce the concepts behind constructing a transaction, generating the appropriate message to sign using the BCS-serialization, and various methods for signing within Aptos.\n\n:::tip\n\nWe strongly recommend that you use the BCS format for submitting transactions to the Aptos blockchain.\n\n:::\n\n", "doc_id": "99a7e504-4a3b-41a7-8f12-a20123304343", "embedding": null, "doc_hash": "102ccad49b912487a9ed6a5011c2c76f62740b07d983077c68730ef98985bae2", "extra_info": null, "node_info": {"start": 0, "end": 1156, "_node_type": "1"}, "relationships": {"1": "b0f58e17-adaa-49ea-baf9-d0516229cae6"}}, "__type__": "1"}, "7f993bf8-d40c-48f6-bede-919abee52ff0": {"__data__": {"text": "\n\nOverview\n\nCreating a transaction that is ready to be executed on the Aptos blockchain requires the following four steps:\n\n1. Create a raw transaction, `RawTransaction`, also called unsigned transaction.\n2. Generate the signing message containing the appropriate salt (`prefix_bytes`), and generate the signature of the raw transaction by using the client's private key.\n3. Create the `Authenticator` and the signed transaction, and\n4. BCS-serialize the signed transaction (not shown in the diagram in Overview section).\n\n:::info\nCode examples in this section are in Typescript.\n:::\n\nSee the below high-level flow diagram showing how a raw transaction becomes a signed transaction:\n\n<ThemedImage\nalt=\"Signed Transaction Flow\"\nsources={{\n    light: useBaseUrl('/img/docs/creating-signed-transaction-light.svg'),\n    dark: useBaseUrl('/img/docs/creating-signed-transaction-dark.svg'),\n  }}\n/>\n\nUnsigned transactions are known as `RawTransaction`s. They contain all the information about how to execute an operation on an account within Aptos. But they lack the appropriate authorization with a signature or `Authenticator`.\n\nIn Aptos blockchain, all the data is encoded as BCS (Binary Canonical Serialization).\n\nAptos supports many different approaches to signing a transaction but defaults to a single signer using the Ed25519 signature scheme.\n\nThe `Authenticator` produced during the signing of the transaction gives authorization to the Aptos blockchain to execute the transaction on behalf of the account owner.\n\n", "doc_id": "7f993bf8-d40c-48f6-bede-919abee52ff0", "embedding": null, "doc_hash": "0108fd8e72189999096683e7786ba750538af0e0dbaef5b66c8dcd2a6f68c08a", "extra_info": null, "node_info": {"start": 0, "end": 1517, "_node_type": "1"}, "relationships": {"1": "f374ceb2-8e59-44cf-9c4d-3097016c0e36"}}, "__type__": "1"}, "c501fb0a-0d68-440b-983e-008daa02afd3": {"__data__": {"text": "\n\nKey concepts\n\n", "doc_id": "c501fb0a-0d68-440b-983e-008daa02afd3", "embedding": null, "doc_hash": "b640100c2dcb0002e69d3fa62a8f8314f6adaf1fbeca542867618446f537a1a2", "extra_info": null, "node_info": {"start": 0, "end": 16, "_node_type": "1"}, "relationships": {"1": "8d3dcac7-9b8b-48f9-b4cd-183a8ea86d29"}}, "__type__": "1"}, "cc987ece-ae6f-4158-b00d-5d21919b8504": {"__data__": {"text": "\n\nRaw transaction\n\nA raw transaction consists of the following fields:\n\n- **sender** (Address): Account address of the sender.\n- **sequence_number** (uint64): Sequence number of this transaction. This must match the sequence number stored in the sender's account at the time the transaction executes.\n- **payload**: Instructions for the Aptos blockchain, including publishing a module, execute a script function or execute a script payload.\n- **max_gas_amount** (uint64): Maximum total gas to spend for this transaction. The account must have more than this gas or the transaction will be discarded during validation.\n- **gas_unit_price** (uint64): Price to be paid per gas unit. During execution the `total_gas_amount`, calculated as: `total_gas_amount = total_gas_units_consumed * gas_unit_price`, must not exceed `max_gas_amount` or the transaction will abort during the execution. `total_gas_units_consumed` represents the total units of gas consumed when executing the transaction.\n- **expiration_timestamp_secs** (uint64): The blockchain timestamp at which the blockchain would discard this transaction.\n- **chain_id** (uint8): The chain ID of the blockchain that this transaction is intended to be run on.\n\n", "doc_id": "cc987ece-ae6f-4158-b00d-5d21919b8504", "embedding": null, "doc_hash": "d7ce97815e3e5524743166dfa3c5c025aafbfb6109da9257230eb33bc3e253ab", "extra_info": null, "node_info": {"start": 0, "end": 1214, "_node_type": "1"}, "relationships": {"1": "b0c6df8d-1c84-4bf8-9241-3615149e1923"}}, "__type__": "1"}, "600cfbf4-fae6-4ec6-b642-4b0e318bcf91": {"__data__": {"text": "\n\nBCS\n\nBinary Canonical Serialization (BCS) is a serialization format applied to the raw (unsigned) transaction. See BCS for a description of the design goals of BCS.\n\nBCS is not a self-describing format. As such, in order to deserialize a message, one must know the message type and layout ahead of time.\n\nAn example of how BCS serializes a string is shown below:\n\n```typescript\n// A string is serialized as: byte length + byte representation of the string. The byte length is required for deserialization. Without it, no way the deserializer knows how many bytes to deserialize.\nconst bytes: Uint8Array = bcs_serialize_string(\"aptos\");\nassert(bytes == [5, 0x61, 0x70, 0x74, 0x6f, 0x73]);\n```\n\n", "doc_id": "600cfbf4-fae6-4ec6-b642-4b0e318bcf91", "embedding": null, "doc_hash": "3901277a1af02bc86f6e464e71f2ed1e2dd4064952894c7881167439b324f547", "extra_info": null, "node_info": {"start": 0, "end": 695, "_node_type": "1"}, "relationships": {"1": "898e7e62-d843-4612-9649-5878c691e41c"}}, "__type__": "1"}, "47a74155-9f56-42cc-8384-06c8585b6f74": {"__data__": {"text": "\n\nSigning message\n\nThe bytes of a BCS-serialized raw transaction are referred as a **signing message**.\n\nIn addition, in Aptos, any content that is signed or hashed is salted with a unique prefix to distinguish it from other types of messages. This is done to ensure that the content can only be used in the intended scenarios. The signing message of a RawTransaction is prefixed with `prefix_bytes`, which is `sha3_256(\"APTOS::RawTransaction\")`. Therefore:\n\n`signing_message = prefix_bytes | bcs_bytes_of_raw_transaction.`. `|` denotes concatenation.\n\n:::note\n\nThe prefixing step is not shown in the diagram in the Overview section.\n\n:::\n\n", "doc_id": "47a74155-9f56-42cc-8384-06c8585b6f74", "embedding": null, "doc_hash": "71c5bebf4fbe53d689c26c18783ebe4089d6270d327c9bb7a16159a345542d7e", "extra_info": null, "node_info": {"start": 0, "end": 640, "_node_type": "1"}, "relationships": {"1": "6cc14e35-7a4a-408b-84b9-443447c1b84c"}}, "__type__": "1"}, "da62c221-f983-4b96-b414-80462caedef7": {"__data__": {"text": "\n\nBatch signing\n\nFor batch transactions, create vector of `SignedTransactions`, and then BCS encode the vector as a whole, like so:\n\n```shell\nlet txn_payload = bcs::to_bytes(&txns.to_vec())?;\n```\n\nFor example, see the `pub async fn submit_batch_bcs(` reference in `lib.rs`. BCS encode only the array.\n\n> By default, you are limited to 10 batched transactions by the `max_submit_transaction_batch_size` API, which can be overridden if you run your own fullnode by changing the setting: `pub const DEFAULT_MAX_SUBMIT_TRANSACTION_BATCH_SIZE: usize = 10;`\n\n", "doc_id": "da62c221-f983-4b96-b414-80462caedef7", "embedding": null, "doc_hash": "b34b45f198354297ba660410f6316b3763d981d2559e2a8081c6802a95eaaed1", "extra_info": null, "node_info": {"start": 0, "end": 553, "_node_type": "1"}, "relationships": {"1": "47e95695-8266-42af-adcc-4114dee9afb6"}}, "__type__": "1"}, "b7eb00dc-ce58-4d78-be9b-33e69d9dee26": {"__data__": {"text": "\n\nSignature\n\nA signature is the result of hashing the signing message with the client's private key. By default Aptos uses the Ed25519 scheme to generate the signature of the raw transaction.\n\n- By signing a signing message with the private key, clients prove to the Aptos blockchain that they have authorized the transaction be executed.\n- Aptos blockchain will validate the signature with client account's public key to ensure that the transaction submitted is indeed signed by the client.\n\n", "doc_id": "b7eb00dc-ce58-4d78-be9b-33e69d9dee26", "embedding": null, "doc_hash": "946e49fb499821a8c849ff43922bb3e02286800cc533697cbf97a0e44ae9a7ce", "extra_info": null, "node_info": {"start": 0, "end": 493, "_node_type": "1"}, "relationships": {"1": "0e2fb333-5f20-4ef4-874b-6a6b15e3e9fe"}}, "__type__": "1"}, "03fb213f-ec2c-46a7-b6fc-c95ffcf645ec": {"__data__": {"text": "\n\nSigned transaction\n\nA signed transaction consists of:\n\n- A raw transaction, and\n- An authenticator. The authenticator contains a client's public key and the signature of the raw transaction.\n\nThis signed transaction is further BCS-serialized (not shown in the diagram in Overview section), after which the signed transaction is ready for submission to the Aptos REST interface.\n\n", "doc_id": "03fb213f-ec2c-46a7-b6fc-c95ffcf645ec", "embedding": null, "doc_hash": "88f04f212cf2ca018919f2d690447ee015c19de8a7f67d38f0c3c6392201263d", "extra_info": null, "node_info": {"start": 0, "end": 381, "_node_type": "1"}, "relationships": {"1": "9bd8b487-80cd-415c-8bd4-b4253824d14b"}}, "__type__": "1"}, "20124605-a8e0-45a8-bd81-03ee568e27d8": {"__data__": {"text": "\n\nMultisignature transactions\n\nThe Aptos blockchain supports several signing methods for transactions, including the single signature, the K-of-N multisig, and more.\n\nA K-of-N multisig transaction means that for such a transaction to be executed, at least K out of the N authorized signers have signed the transaction and passed the check conducted by the chain.\n\nTransaction signatures are wrapped in `Authenticator`. The Aptos blockchain validates the transactions submitted by clients by using the Authenticator data. See a few examples below:\n\nIn Typescript, this is how a single signer authenticator looks like:\n\n```typescript\ninterface Authenticator {\n  public_key: Uint8Array;\n  signature: Uint8Array;\n}\n```\n\nA multisig authenticator example is shown below:\n\n```typescript\ninterface MultiEd25519PublicKey {\n  // A list of public keys\n  public_keys: Uint8Array[];\n  // At least `threshold` signatures must be valid\n  threshold: Uint8;\n}\n\ninterface MultiEd25519Signature {\n  // A list of signatures\n  signatures: Uint8Array[];\n  // 4 bytes, at most 32 signatures are supported.\n  // If Nth bit value is `1`, the Nth signature should be provided in `signatures`. Bits are read from left to right\n  bitmap: Uint8Array;\n}\n\ninterface MultisigAuthenticator {\n  public_key: MultiEd25519PublicKey;\n  signature: MultiEd25519Signature;\n}\n```\n\n", "doc_id": "20124605-a8e0-45a8-bd81-03ee568e27d8", "embedding": null, "doc_hash": "152fd5aedb02c4bc1499528c5065578908fe4ab1c9ccfd587730cf30f1e186b5", "extra_info": null, "node_info": {"start": 0, "end": 1339, "_node_type": "1"}, "relationships": {"1": "e80f900c-222a-4779-98a2-6f689b41b812"}}, "__type__": "1"}, "9596622b-cd21-4561-a71f-4f208da31ef4": {"__data__": {"text": "\n\nDetailed steps\n\n1. Creating a RawTransaction.\n2. Preparing the message to be signed and signing it.\n3. Creating an Authenticator and a SignedTransaction.\n4. Serializing SignedTransaction.\n\n", "doc_id": "9596622b-cd21-4561-a71f-4f208da31ef4", "embedding": null, "doc_hash": "d7ed2682d7c93b37e30ba395b69534496a3c1cca3803e1b2a385da6a03fa87a2", "extra_info": null, "node_info": {"start": 0, "end": 191, "_node_type": "1"}, "relationships": {"1": "81e3a590-2639-42d4-a43d-8d6131d91357"}}, "__type__": "1"}, "944e7a93-e8b8-45e5-b043-810f864f5f9f": {"__data__": {"text": "\n\nStep 1. Creating a RawTransaction\n\nThe below example assumes the transaction has a script function payload.\n\n```typescript\ninterface AccountAddress {\n  // 32-byte array\n  address: Uint8Array;\n}\n\ninterface ModuleId {\n  address: AccountAddress;\n  name: string;\n}\n\ninterface ScriptFunction {\n  module: ModuleId;\n  function: string;\n  ty_args: string[];\n  args: Uint8Array[];\n}\n\ninterface RawTransaction {\n  sender: AccountAddress;\n  sequence_number: number;\n  payload: ScriptFunction;\n  max_gas_amount: number;\n  gas_unit_price: number;\n  expiration_timestamp_secs: number;\n  chain_id: number;\n}\n\nfunction createRawTransaction(): RawTransaction {\n  const payload: ScriptFunction = {\n    module: {\n      address: hexToAccountAddress(\"0x01\"),\n      name: \"AptosCoin\",\n    },\n    function: \"transfer\",\n    ty_args: [],\n    args: [\n      BCS.serialize(hexToAccountAddress(\"0x02\")), // receipient of the transfer\n      BCS.serialize_uint64(2), // amount to transfer\n    ],\n  };\n\n  return {\n    sender: hexToAccountAddress(\"0x01\"),\n    sequence_number: 1n,\n    max_gas_amount: 2000n,\n    gas_unit_price: 1n,\n    // Unix timestamp, in seconds + 10 minutes\n    expiration_timestamp_secs: Math.floor(Date.now() / 1000) + 600,\n    payload: payload,\n    chain_id: 3,\n  };\n}\n```\n\n:::note\n\nThe `BCS` serialization shown in the code above is not the same as the BCS Serialization operation shown in the Overview section.\n\n:::\n\n", "doc_id": "944e7a93-e8b8-45e5-b043-810f864f5f9f", "embedding": null, "doc_hash": "cda81394e389b1da9d1b50c9d0a65bf4109ca94e92ce2fea47492bde86c4aced", "extra_info": null, "node_info": {"start": 0, "end": 1412, "_node_type": "1"}, "relationships": {"1": "a6310032-c0f5-46d1-9ccf-07ef75c7c220"}}, "__type__": "1"}, "e3683ec0-bf02-4e2d-ba76-818c0bc420f4": {"__data__": {"text": "\n\nStep 2. Creating the signing message and signing it\n\n1. Generate prefix (`prefix_bytes`) with SHA3-256 hash bytes of string `APTOS::RawTransaction`.\n2. Bytes of BCS serialized RawTransaction.\n3. Concat the prefix and BCS bytes.\n4. Signing the bytes with account private key.\n\n```typescript\nimport * as Nacl from \"tweetnacl\";\n\nfunction hashPrefix(): Buffer {\n  let hash = SHA3.sha3_256.create();\n  hash.update(`APTOS::RawTransaction`);\n  return Buffer.from(hash.arrayBuffer());\n}\n\nfunction bcsSerializeRawTransaction(txn: RawTransaction): Buffer {\n  ...\n}\n\n// This will serialize a raw transaction into bytes\nfunction serializeRawTransaction(txn: RawTransaction): Buffer {\n  // Generate a hash prefix\n  const prefix = hashPrefix();\n\n  // Serialize txn with BCS\n  const bcsSerializedTxn = bcsSerializeRawTransaction(txn);\n\n  return Buffer.concat([prefix, bcsSerializedTxn]);\n}\n\nconst rawTxn = createRawTransaction();\nconst signature = Nacl.sign(hashRawTransaction(rawTxn), ACCOUNT_PRIVATE_KEY);\n```\n\n", "doc_id": "e3683ec0-bf02-4e2d-ba76-818c0bc420f4", "embedding": null, "doc_hash": "50431ae52f8690665ac395aedcd9f6a28e1463685785cb6d0812b3ddb8cc9a6e", "extra_info": null, "node_info": {"start": 0, "end": 1000, "_node_type": "1"}, "relationships": {"1": "cd1cdf00-711a-4ce8-9607-4eb3a9322376"}}, "__type__": "1"}, "15a903fe-681f-4183-b884-b2cb73af3460": {"__data__": {"text": "\n\nStep 3. Creating an Authenticator and a SignedTransaction\n\n```typescript\ninterface Authenticator {\n  public_key: Uint8Array;\n  signature: Uint8Array;\n}\n\ninterface SignedTransaction {\n  raw_txn: RawTransaction;\n  authenticator: Authenticator;\n}\n\nconst authenticator = {\n  public_key: PUBLIC_KEY,\n  signature: signature,\n};\n\nconst signedTransaction: SignedTransaction = {\n  raw_txn: rawTxn,\n  authenticator: authenticator,\n};\n```\n\n", "doc_id": "15a903fe-681f-4183-b884-b2cb73af3460", "embedding": null, "doc_hash": "4b4914a8aba116ec34b0dc3044aeef901b8f01cfbfc34fd28e67d185db6a817a", "extra_info": null, "node_info": {"start": 0, "end": 431, "_node_type": "1"}, "relationships": {"1": "ef077fd3-f941-47b4-ad1d-97364dc887de"}}, "__type__": "1"}, "c6c280e2-02a9-47b0-a4d7-6271f5f43bab": {"__data__": {"text": "\n\nStep 4. Serializing SignedTransaction\n\n:::note\nThis step is not shown in the flow diagram in the Overview section.\n:::\n\nSerializing SignedTransaction into bytes with BCS.\n\n```typescript\nconst signedTransactionPayload = bcsSerializeSignedTransaction(signedTransaction);\n```\n\n", "doc_id": "c6c280e2-02a9-47b0-a4d7-6271f5f43bab", "embedding": null, "doc_hash": "225bb5ff8e83701df1098365bb918f2c5df427311e48dee376cd918dfbe0a43e", "extra_info": null, "node_info": {"start": 0, "end": 276, "_node_type": "1"}, "relationships": {"1": "312d8d37-b471-4e18-8f88-d496cc8fb0ac"}}, "__type__": "1"}, "6d096ce4-43df-4405-b046-682eac18874c": {"__data__": {"text": "\n\nSubmitting the signed transaction\n\nFinally, submitting the transaction with the required header \"Content-Type\".\n\nTo submit a signed transaction in the BCS format, the client must pass in a specific header, as shown in the below example:\n\n```\ncurl -X POST -H \"Content-Type: application/x.aptos.signed_transaction+bcs\" --data-binary \"@path/to/file_contains_bcs_bytes_of_signed_txn\" https://some_domain/transactions\n```\n\n[first_transaction]: /tutorials/first-transaction\n[account]: /concepts/accounts\n[rest_spec]: https://fullnode.devnet.aptoslabs.com/v1/spec#/\n[bcs]: https://docs.rs/bcs/latest/bcs/\n[SHA3]: https://en.wikipedia.org/wiki/SHA-3\n[ed25519]: https://ed25519.cr.yp.to/\n\n", "doc_id": "6d096ce4-43df-4405-b046-682eac18874c", "embedding": null, "doc_hash": "0ec7ccce2c10f2e7cdba2e7a753c635a9d2170322544737a9bf1b460bf2cd204", "extra_info": null, "node_info": {"start": 0, "end": 682, "_node_type": "1"}, "relationships": {"1": "168f2bd7-a1a3-4add-9dab-23cf371fc18a"}}, "__type__": "1"}, "336a7fca-30b3-4856-b8d4-d42996eb3a58": {"__data__": {"text": "\n\nSigner\n\n`signer` is a built-in Move resource type. A `signer` is a\ncapability that allows the holder to act on\nbehalf of a particular `address`. You can think of the native implementation as being:\n\n```move\nstruct signer has drop { a: address }\n```\n\nA `signer` is somewhat similar to a Unix UID in\nthat it represents a user authenticated by code _outside_ of Move (e.g., by checking a cryptographic\nsignature or password).\n\n", "doc_id": "336a7fca-30b3-4856-b8d4-d42996eb3a58", "embedding": null, "doc_hash": "0da86b4c56c9536e696fc9ba605b25ed456b75add587e2766f0d6b28e72fd858", "extra_info": null, "node_info": {"start": 0, "end": 426, "_node_type": "1"}, "relationships": {"1": "b805e8f6-e13f-4395-934e-b6f2e15de3c9"}}, "__type__": "1"}, "a9fa2482-203c-4041-9b42-3f3b9aadbab4": {"__data__": {"text": "\n\nComparison to `address`\n\nA Move program can create any `address` value without special permission using address literals:\n\n```move\nlet a1 = @0x1;\nlet a2 = @0x2;\n// ... and so on for every other possible address\n```\n\nHowever, `signer` values are special because they cannot be created via literals or\ninstructions--only by the Move VM. Before the VM runs a script with parameters of type `signer`, it\nwill automatically create `signer` values and pass them into the script:\n\n```move\nscript {\n    use std::signer;\n    fun main(s: signer) {\n        assert!(signer::address_of(&s) == @0x42, 0);\n    }\n}\n```\n\nThis script will abort with code `0` if the script is sent from any address other than `0x42`.\n\nA transaction script can have an arbitrary number of `signer`s as long as the `signer`s are a prefix\nto any other arguments. In other words, all of the `signer` arguments must come first:\n\n```move\nscript {\n    use std::signer;\n    fun main(s1: signer, s2: signer, x: u64, y: u8) {\n        // ...\n    }\n}\n```\n\nThis is useful for implementing _multi-signer scripts_ that atomically act with the authority of\nmultiple parties. For example, an extension of the script above could perform an atomic currency\nswap between `s1` and `s2`.\n\n", "doc_id": "a9fa2482-203c-4041-9b42-3f3b9aadbab4", "embedding": null, "doc_hash": "b29e947751d83f915ecb5d838f50288ae31dd15366177aa1e546cf73bdf929e1", "extra_info": null, "node_info": {"start": 0, "end": 1234, "_node_type": "1"}, "relationships": {"1": "f34f0121-5fac-402b-9898-c3183188df34"}}, "__type__": "1"}, "c34d9611-c1ab-49d2-a4ec-2f09cc9abeb3": {"__data__": {"text": "\n\n`signer` Operators\n\nThe `std::signer` standard library module provides two utility functions over `signer` values:\n\n| Function                                    | Description                                                    |\n| ------------------------------------------- | -------------------------------------------------------------  |\n| `signer::address_of(&signer): address`      | Return the `address` wrapped by this `&signer`.                |\n| `signer::borrow_address(&signer): &address` | Return a reference to the `address` wrapped by this `&signer`. |\n\nIn addition, the `move_to(&signer, T)` global storage operator\nrequires a `&signer` argument to publish a resource `T` under `signer.address`'s account. This\nensures that only an authenticated user can elect to publish a resource under their `address`.\n\n", "doc_id": "c34d9611-c1ab-49d2-a4ec-2f09cc9abeb3", "embedding": null, "doc_hash": "edc2cb484ee52c59b268ae5d34f702bb2f3f481dcc918e98d61a74e45d564831", "extra_info": null, "node_info": {"start": 0, "end": 825, "_node_type": "1"}, "relationships": {"1": "8aa3958d-9b15-4b06-bbd2-a6a06f97136e"}}, "__type__": "1"}, "6c5cc375-6433-412d-bdc4-8676fce82635": {"__data__": {"text": "\n\nOwnership\n\nUnlike simple scalar values, `signer` values are not copyable, meaning they cannot be copied (from\nany operation whether it be through an explicit `copy` instruction\nor through a dereference `*`.\n\n", "doc_id": "6c5cc375-6433-412d-bdc4-8676fce82635", "embedding": null, "doc_hash": "263ddfe789035ae2a1b03276b7b2257c95c704a8b82da169cea2c99e465f3ca2", "extra_info": null, "node_info": {"start": 0, "end": 210, "_node_type": "1"}, "relationships": {"1": "504741b8-7fe5-4ce3-9b39-fca626fc6873"}}, "__type__": "1"}, "8eb8dd7c-c5fb-4857-88d3-0021505c729d": {"__data__": {"text": "\n\nUpdate Aptos.dev\n\nAs an open source project, Aptos needs your knowledge to grow. Follow the instructions on this page to update Aptos.dev, the developer website for the Aptos blockchain. Every contributor to Aptos.dev is listed as an *author* on the pages they edit and update. See the *Authors* list at the bottom of any page for an example.\n\nSee the Aptos Docs project for open issues by status. See detailed instructions for making updates below.\n\n", "doc_id": "8eb8dd7c-c5fb-4857-88d3-0021505c729d", "embedding": null, "doc_hash": "dbb9a53c22b877513c2b90e13a89c8747d3c7d19a279106121bb1870d60c891d", "extra_info": null, "node_info": {"start": 0, "end": 453, "_node_type": "1"}, "relationships": {"1": "121470c7-26dd-4419-aef1-891846bdaaf6"}}, "__type__": "1"}, "85c65eea-1a14-4db0-8879-6034cf65eb27": {"__data__": {"text": "\n\ntl;dr\n\nSimply click **Edit this page** at the bottom of any location to go to the source and trigger editing there. The contents are in Markdown format. You may then edit in browser and use the *Preview* function to view your changes.\n\nHere are the basic steps for editing in your web browser:\n\n1. Click **Edit this page** at the bottom to get started.\n2. Modify and add source Markdown files in the developer-docs-site directory.\n3. See your changes in Netlify (by swapping `prnumber` in):\n https://deploy-preview-prnumber--aptos-developer-docs.netlify.app/\n4. Have at least two verified reviewers examine and test the change.\n5. Merge in the change and see it go live.\n\nFor more complex documentation updates, we recommend forking the repository and using a local editor to make changes. To edit at the command line and preview your changes on your localhost, see our Developer Documentation README.\n\nWhen ready, start a pull request with your changes. We will get back to you shortly.\n\n\n", "doc_id": "85c65eea-1a14-4db0-8879-6034cf65eb27", "embedding": null, "doc_hash": "a1b59ca34000f1cdadb7b4748234583642edcfc166f290d61ff4e0c9959dfbd2", "extra_info": null, "node_info": {"start": 0, "end": 992, "_node_type": "1"}, "relationships": {"1": "5ef30bd3-43db-404e-983b-fce444ff31df"}}, "__type__": "1"}, "72aae80b-53c4-4fa3-a203-ca136cb3d9ed": {"__data__": {"text": "\n\nSupporting resources\n\nThe Aptos Docs recommends these materials for good documentation:\n\n- Aptos Style - A brief set of guidance for contributions to Aptos.dev.\n- Google Style Guide - A Google standard adopted by companies large and small.\n- Technical writing courses - Google offers basic courses on tech writing for engineers and others.\n- DITA - The Aptos Docs team adheres to the Darwin Information Typing Architecture whereby all technical documentation is broken down into concepts (overviews), tasks (procedures), and references (lists) to best suit our audiences and their mindsets (learning, doing, finding) at the time of reading.\n- Open source templates - The Good Docs Project gives us myriad templates in Markdown for various documentation types we should take advantage of in Aptos.dev.\n\n", "doc_id": "72aae80b-53c4-4fa3-a203-ca136cb3d9ed", "embedding": null, "doc_hash": "b5e626e0e3641e793bce2d5bfd32cc5a4424fda321a6489f0d1e3be714d1f759", "extra_info": null, "node_info": {"start": 0, "end": 804, "_node_type": "1"}, "relationships": {"1": "609e60a6-6eb9-4dee-b259-dfb783745534"}}, "__type__": "1"}, "4a2864d0-b56c-4178-b572-21266c5b7ea5": {"__data__": {"text": "\n\nMake updates directly\n\nWhenever possible, update Aptos.dev directly to reflect your changes to development. This might be as simple as changing a value or as complex as adding an entirely new page or set of pages.\n\nTo update Aptos.dev directly:\n\n1. Trigger an edit to the source files in the developer-docs-site directory:\n    1. In web browser:\n       * for simple, one-page changes, use the ***Edit this page*** link on the bottom of any page to access the source Markdown file in GitHub:\n       !v-fn-network.svg\n         Then click the pencil icon and select **Edit this file** to work in the GitHub web editor, and create a pull request to have it reviewed:\n       !v-fn-network.svg\n       * To add a new page, navigate to the relevant subdirectory of the developer-docs-site/docs/ directory, click **Add file**, give it a name, append the `.md` file extension, include your contents, and create a pull request to have it reviewed:\n       !v-fn-network.svg\n    2. Via local editor - for more complex, multi-page changes, use your preferred source code editor to navigate to and update the source Markdown files in GitHub. See our CONTRIBUTING README for `git clone` instructions.\n2. For web edits, use the *Preview* function at top to see your updates in browser.\n3. For local edits, use the local doc build instructions to see your updates at: http://localhost:3000\n4. After creating the pull request, use the *Deploy Preview* in Netlify to see your updates made in web browser or via local editor by replacing the *prnumber* with your own in:\nhttps://deploy-preview-prnumber--aptos-developer-docs.netlify.app/\n5. Have at least two verified reviewers review and test your changes.\n6. Make direct commits during review.\n7. Request review from the Docs team (currently, clay-aptos in GitHub).\n8. Use the *Assignee* field in the PR to identify the review the change is blocking upon.\n9. Receive and address *all feedback*.\n10. Get approval from at least two verified reviewers.\n11. Merge in the change.\n12. Monitor builds at: https://app.netlify.com/sites/aptos-developer-docs/overview\n\n", "doc_id": "4a2864d0-b56c-4178-b572-21266c5b7ea5", "embedding": null, "doc_hash": "067429d798e17918a317408df7d1434c9a55991a4494e34d2a967a7cc3cc500c", "extra_info": null, "node_info": {"start": 0, "end": 2092, "_node_type": "1"}, "relationships": {"1": "afc67e15-c2ad-4962-8b16-1d33ae4237f0"}}, "__type__": "1"}, "135f80f8-7b8b-490e-92bb-3e050ccaf723": {"__data__": {"text": "\n\nRequest docs changes\n\nIf you are unable to make the update yourself or simply need Docs team help along the way:\n\n1. See the existing list of open issues tagged as Documentation in GitHub. \n2. If one does not exist, file a new Documentation issue.\n3. Answer all relevant questions/sections in the bug template (such as URL to the affected page).\n4. Set a priority for the doc issue:\n    1. P0 - critical and urgent\n    2. P1 - important and needed soon\n    3. P2 - can wait for this; still dependent on other work\n    4. P3 - back burner item; there is no urgency here\n5. Explain in the issue precisely what is expected in the doc; what requirements must it meet?\n6. Assign the issue to and work with the subject matter experts and the Docs team to generate new and updated materials.\n7. Associate all related pull requests with the issue by adding the issue number to the *Development* field of each PR.\n8. Re-open the issue when related PRs are merged and work is still needed.\n9. Close the issue only when all relevant parties are satisfied with the work. \n\n\n\n\n\n\n", "doc_id": "135f80f8-7b8b-490e-92bb-3e050ccaf723", "embedding": null, "doc_hash": "1d76f9a63105666818ba0753d70d9332fb7326b09273558b25ea6ca6d9d12454", "extra_info": null, "node_info": {"start": 0, "end": 1068, "_node_type": "1"}, "relationships": {"1": "af8cf072-472c-4a2e-bf68-baa1a9e331c8"}}, "__type__": "1"}, "873c3315-5018-42bc-9c3c-623e0a5258a5": {"__data__": {"text": "\n\nMove Specification Language\n\nThis document describes the *Move specification language (MSL)*, a subset of the Move language that supports specification of the behavior of Move programs. MSL works together with the Move Prover, a tool that can statically verify the correctness of MSL specifications against Move programs. In contrast to traditional testing, verification of MSL is exhaustive and holds for all possible inputs and global states of a Move module or transaction script. At the same time, this verification of MSL is fast and automated enough that it can be used at a similar place in the developer workflow where tests are typically conducted (for example, for qualification of pull requests in continuous integration).\n\nWhile the Move programming language at this point is stable, the subset represented by MSL should be\nconsidered evolving. This has no impact on platform stability, since MSL is not running in\nproduction; yet MSL is used for offline quality assurance where it is continuously improved for\nevolving objectives.\n\nThis document describes the language only; see Use the Move Prover for instructions. The reader is expected to have basic knowledge of the Move language, as well as basic\nprinciples of pre- and post-condition specifications. (See for example the Design by contract). For examples of specifications, we refer to\nthe Aptos framework documentation, which has specifications embedded.\n\n", "doc_id": "873c3315-5018-42bc-9c3c-623e0a5258a5", "embedding": null, "doc_hash": "7b927be4b1e20301215966abb7d03a6926131afc9584cb06fda392eac72e6714", "extra_info": null, "node_info": {"start": 0, "end": 1429, "_node_type": "1"}, "relationships": {"1": "2d378677-c7ac-40c5-9cbb-4281cd27359b"}}, "__type__": "1"}, "e7f9df2e-2b83-4e81-aa4e-f6440f514c51": {"__data__": {"text": "\n\nExpressions\n\nExpressions in MSL are a subset of Move program expressions plus a set of additional constructs, as\ndiscussed in the following sections.\n\n", "doc_id": "e7f9df2e-2b83-4e81-aa4e-f6440f514c51", "embedding": null, "doc_hash": "2656e5f8935648e1face96527993b84aa06826008c0c6186b3c8f816c1aefc7f", "extra_info": null, "node_info": {"start": 0, "end": 153, "_node_type": "1"}, "relationships": {"1": "ea33f85e-1939-454d-ac47-351885ed5c3b"}}, "__type__": "1"}, "de1ebb2e-7627-4369-b21a-7c38ddae7c93": {"__data__": {"text": "\n\nType System\n\nThe type system of MSL is similar to that of Move, with the following differences:\n\n- There are two types of encodings for integer types: `num` and `bv` (bit vector).\n  If an integer (either a constant or a variable) is not involved in any bitwise operations directly or indirectly,\n  regardless of its type in Move (`u8`, `u16`, `u32`, `u64`, `u128` and `u256`), it is treated as the same type. In\n  specifications, this type is called `num`, which is an arbitrary precision *signed* integer type.\n  When MSL refers to a Move name that represents an `u8` or such, it will be automatically widened\n  to `num`. This allows writing MSL expressions like `x + 1 = 0` without\n  needing to worry about overflow or underflow.\n  Different from `num`, `bv` cannot and does not need to be explicitly used in specifications: if an integer is involved in bitwise operations such as `&`, `|` or `^`, it will be automatically encoded as `bv`at the backend.\n  Moreover, a `bv` integer has a fixed precision, which is consistent with its precision in Move (`bv8`, `bv16`, `bv32`, `bv64`, `bv128` and `bv256`).\n  Note that, in general using `bv` is not so efficient as `num` in the SMT solver such as Z3. Consequently,\n  the Move Prover has some restrictions when using bitwise operations, which are stated in detail below.\n- The Move types `&T`, `&mut T`, and `T` are considered equivalent for MSL. Equality is interpreted\n  as value equality. There is no need to worry about dereferencing a reference from the Move\n  program: these are automatically dereferenced as needed. This simplification is possible because\n  MSL cannot modify values from a Move program, and the program cannot directly reason about\n  reference equality (which eliminates the need for doing so in MSL). (Note there is also a\n  restriction in expressiveness coming with this, namely\n  for functions which return `&mut T`. However, this is rarely hit in practice,\n  and there are workarounds.)\n- There is the additional type `type`, which is the type of all types. It can be used only in\n  quantifiers.\n- There is the additional type `range`, which represents an integer range (and the notation `n..m` to\n  denote a value).\n\n", "doc_id": "de1ebb2e-7627-4369-b21a-7c38ddae7c93", "embedding": null, "doc_hash": "41044a2af14485c9d46f67195b86eddba67e1ce834ccda554e6e818d6caf48bc", "extra_info": null, "node_info": {"start": 0, "end": 2197, "_node_type": "1"}, "relationships": {"1": "9651d5ce-b3a6-4e3c-a26a-6c2aaae7ab3b"}}, "__type__": "1"}, "548bbb84-dd27-41c3-b141-280cdbeffd55": {"__data__": {"text": "\n\nNaming\n\nName resolution in MSL works similar to the Move language. `use` declarations can introduce aliases for\nimported names. MSL functions and variable names must start with a lowercase letter. Schema names\nare treated like types and must start with a capital letter. (Schemas are a named construct\ndiscussed later).\n\nMove functions, MSL functions, Move types, and schemas all share the same namespace and are\ntherefore unambiguous if aliased via a Move `use` clause. Because of the common name space, an MSL\nfunction cannot have the same name as a Move function. This is often handled via the convention to\nprefix MSL functions as in `spec_has_access` when the related Move function is called `has_access`.\n\n", "doc_id": "548bbb84-dd27-41c3-b141-280cdbeffd55", "embedding": null, "doc_hash": "db52c45f5504a18e11284a9718f0354b8d37a4b87bdb759336f2e212390d7eba", "extra_info": null, "node_info": {"start": 0, "end": 714, "_node_type": "1"}, "relationships": {"1": "bc2473c4-cdeb-453f-a53b-1d079892cf69"}}, "__type__": "1"}, "c80ac901-1553-4f79-af5b-6b3cc8da4a99": {"__data__": {"text": "\n\nOperators\n\nAll Move operators are supported in MSL, except `&`, `&mut`, and `*` (dereference).\n\nIn addition to the existing operators, vector subscript `v[i]`, slicing `v[i..j]`, and range\nconstruction `i..j` are supported (the type of integer ranges is a new builtin type called `range`). Moreover, boolean implication `p ==> q` is supported as a more intuitive form than `!p || q`.\n\n", "doc_id": "c80ac901-1553-4f79-af5b-6b3cc8da4a99", "embedding": null, "doc_hash": "179c3ea4a1731dad4c4cd85dbc4f563cec33a3a63a322495cab196bcbbcd2195", "extra_info": null, "node_info": {"start": 0, "end": 387, "_node_type": "1"}, "relationships": {"1": "023aa0b2-94f1-4b65-ba6c-c95104dec923"}}, "__type__": "1"}, "d967ea30-3291-450e-8c0c-8c44b1680e7b": {"__data__": {"text": "\n\nFunction calls\n\nIn MSL expressions, functions can be called like in Move. However, the callee must either be\nan MSL helper function or a **pure** Move function.\n\nMove functions are considered pure if they do not modify global state and do not use Move expression\nfeatures that are not supported in MSL expressions (as defined in this document).\n\nThere is one extension. If a Move function definition contains a direct `assert`, this will be\nignored when it is called from an MSL expression, and the function will be considered pure. For\nexample:\n\n```move\nfun get(addr: address): &T { assert(exists(addr), ERROR_CODE); borrow_global(addr) }\n```\n\nThis function is pure and can be called from an MSL expression. The assertion will be ignored, and\nthe function will be interpreted as:\n\n```move\nspec fun get(addr: address): T { global(addr) }\n```\n\nThis is justified by that MSL having *partial semantics*.\n\n", "doc_id": "d967ea30-3291-450e-8c0c-8c44b1680e7b", "embedding": null, "doc_hash": "713fb3c57c052c0cc889813bb2eb621a44802bd3e53be6f7c84aae9790c86284", "extra_info": null, "node_info": {"start": 0, "end": 904, "_node_type": "1"}, "relationships": {"1": "47988ee7-2b74-4c9b-95a1-7bd08f56889d"}}, "__type__": "1"}, "16b32db5-59ae-4b3b-933c-9087c15ada37": {"__data__": {"text": "\n\nStatements\n\nLimited sequencing of the form `{ let x = foo(); x + x }` is supported, as well as if-then-else.\nOther statement forms of the Move language are not supported.\n\n", "doc_id": "16b32db5-59ae-4b3b-933c-9087c15ada37", "embedding": null, "doc_hash": "411b994714c7dc94efe6ee47e302ede55a7a25f815f71c1350701512e592d2cb", "extra_info": null, "node_info": {"start": 0, "end": 174, "_node_type": "1"}, "relationships": {"1": "9b23b307-6366-4fb2-92e6-0d429e66bd53"}}, "__type__": "1"}, "04f92352-7c93-47b0-9641-5841aef55978": {"__data__": {"text": "\n\nPack and unpack\n\nPack expressions are supported. Unpack expressions are currently *not* supported.\n\n", "doc_id": "04f92352-7c93-47b0-9641-5841aef55978", "embedding": null, "doc_hash": "584062fde89014d009776ccdb93109d99d7e9847454471d65b3b5e8182c355dd", "extra_info": null, "node_info": {"start": 0, "end": 102, "_node_type": "1"}, "relationships": {"1": "5fea1050-d96e-4666-8e4f-3c8375fc3615"}}, "__type__": "1"}, "ae6e7350-2411-440f-887e-b7bd29f9e240": {"__data__": {"text": "\n\nQuantifiers\n\nUniversal and existential quantification is supported. The general form is:\n\n```\nforall , ...,  [ where  ] : \nexists , ...,  [ where  ] : \n```\n\n- Bindings can either be of the form `name: ` or `name in `. For the second form, the\n  expression must either be a `range` or a vector.\n- The optional constraint `where ` allows to restrict the quantified range. `forall x: T where p: q`\n  is equivalent to `forall x: T : p ==> q` and `exists x: T where p: q` is equivalent to `exists x: T : p && q`.\n\nNotice that it is possible to quantify over types. For example:\n\n```\nforall t: type, addr: address where exists>(addr): exists>(addr)\n```\n\n", "doc_id": "ae6e7350-2411-440f-887e-b7bd29f9e240", "embedding": null, "doc_hash": "549cf4bc0163339c14d50833f117b1eb92459fb72df2c9b449cce17a2ef2321d", "extra_info": null, "node_info": {"start": 0, "end": 650, "_node_type": "1"}, "relationships": {"1": "b54fc7a1-a217-4d00-a9b5-3fdd67f35bdb"}}, "__type__": "1"}, "cd611e1a-2807-4be3-882c-98af66ffc6da": {"__data__": {"text": "\n\nChoice operator\n\nThe choice operator allows selecting a value that satisfies a predicate:\n\n```\nchoose a: address where exists(a) && global(a).value > 0\n```\n\nIf the predicate is not satisfiable, the result of the choice will be undetermined. (See partial semantics).\n\nThe choice also comes in a form to select the *minimal* value from a set of integers, as in:\n\n```\nchoose min i: num where in_range(v, i) && v[i] == 2\n```\n\n", "doc_id": "cd611e1a-2807-4be3-882c-98af66ffc6da", "embedding": null, "doc_hash": "7c3953f3e8a0fa975dd71d1dc1d7f6edd7050f35721504088bc301173aef921a", "extra_info": null, "node_info": {"start": 0, "end": 424, "_node_type": "1"}, "relationships": {"1": "270bad2f-426f-40f8-b5c0-8094f5ff9ea7"}}, "__type__": "1"}, "235efd0c-3768-461c-9bd7-d6fdd5b4cc1f": {"__data__": {"text": "\n\nCast operator\n\nIn the specification language, we can use the same syntax `(e as T)` to cast an expression `e` with one integer type to `T`, an integer type of another size.\n\n", "doc_id": "235efd0c-3768-461c-9bd7-d6fdd5b4cc1f", "embedding": null, "doc_hash": "69f8b5b17d8991111d94b364f71395a30406438691de22919c574db3fa159fcc", "extra_info": null, "node_info": {"start": 0, "end": 176, "_node_type": "1"}, "relationships": {"1": "10e9808c-7009-4f0b-b2b7-55291c06118c"}}, "__type__": "1"}, "f7c20cf4-5598-408e-abbe-5ea845297d23": {"__data__": {"text": "\n\nShift operator\n\nShift operators `>` are supported in the specification language, and both of them have the same semantics with the Move language. As for abort, if a value `v` has width `n`, then `v > m` will abort if `m >= n`.\n\n", "doc_id": "f7c20cf4-5598-408e-abbe-5ea845297d23", "embedding": null, "doc_hash": "f8aab604698587e23d015165ac39530c6f31b9ca4bb127458c59bc2ae9aa6e17", "extra_info": null, "node_info": {"start": 0, "end": 230, "_node_type": "1"}, "relationships": {"1": "ba75c909-cd34-498d-aa23-86f05df10292"}}, "__type__": "1"}, "6aaf9e53-ccd5-4e4c-9429-84aec36ee11c": {"__data__": {"text": "\n\nBitwise operators\n\nMove programs using bitwise operators `&`, `|` and `^` can be verified in the prover, and these operators are also supported in the specification language.\nDue to encoding and efficiency issues, using bitwise operators has more caveats:\n\n- Integers involved in bitwise operations are encoded as `bv` types at the backend, and two encodings of integers are not compatible. For instance, if a variable `v` is involved in a bitwise operation such as `v & 2` or `v = a ^ b`, then when it is used in an arithmetic operation `v * w` or a shift operation `v << w`, `w` will be implicitly cast to a `bv` type in the Move program.\nHowever, the specification language does not support implicit type cast so users must explicitly use the built-in function `int2bv` in the specification: `v << int2bv(w)`.\nNot that since each `bv` type has a fixed length (from 8 to 256), values with type `num` cannot be converted into `bv`.\n\n- Verification of `bv` types is not efficient and may lead to timeout. As a result, users may prefer isolating bitwise operations from other operations and not using `int2bv` if possible. Moreover, users need to use pragmas to explicitly specify which integer-typed function arguments or struct fields will be used in bitwise computations:\n\n```move\n    struct C has drop {\n        a: u64,\n        b: u64\n    }\n    spec C {\n        // b, the second field of C, will be of bv type\n        pragma bv=b\"1\";\n    }\n    public fun foo_generic(i: T): T {\n      i\n    }\n\n    spec foo_generic {\n     // The first parameter will be of bv type if T is instantiated as a number type\n      pragma bv=b\"0\";\n     // The first return value will be of bv type if T is instantiated as a number type\n      pragma bv_ret=b\"0\";\n    }\n\n    public fun test(i: C): u64 {\n      let x1 = foo_generic(C.b);\n      x1 ^ x1\n    }\n\n    spec test {\n      // Explicit type cast is mandatory for generating correct boogie program\n      ensures result == (0 as u64);\n    }\n```\n\nNote that if arguments or fields of a generic function or struct are specified with `bv` types,\nthey will be of `bv` types in all instances of the function or the struct when the instantiated type is an integer type.\n\n\n- Values with integer types in vectors and tables can be encoded as `bv` types; indices and keys in tables cannot be `bv` types for now. Using other types will lead to internal errors.\n\n", "doc_id": "6aaf9e53-ccd5-4e4c-9429-84aec36ee11c", "embedding": null, "doc_hash": "d9a26f823668f312e3c65c59e85564bcc1b56418b31ae322aefa12234043d4f2", "extra_info": null, "node_info": {"start": 0, "end": 2383, "_node_type": "1"}, "relationships": {"1": "d9152f50-5636-409a-b40e-fd3b82f7ced5"}}, "__type__": "1"}, "27924567-3d35-4bc7-9cab-74fbcc9d8058": {"__data__": {"text": "\n\nBuilt-in functions\n\nMSL supports a number of built-in constants and functions. Most of them are not available in the Move\nlanguage:\n\n- `MAX_U8: num`, `MAX_U64: num`, `MAX_U128: num` returns the maximum value of the corresponding\n  type.\n- `exists(address): bool` returns true if the resource T exists at address.\n- `global(address): T` returns the resource value at address.\n- `len(vector): num` returns the length of the vector.\n- `update(vector, num, T>): vector` returns a new vector with the element replaced at the\n  given index.\n- `vec(): vector` returns an empty vector.\n- `vec(x): vector` returns a singleton vector.\n- `concat(vector, vector): vector` returns the concatenation of the parameters.\n- `contains(vector, T): bool` returns true if element is in vector.\n- `index_of(vector, T): num` returns the index of the element in the vector, or the length of\n  the vector if it does not contain it.\n- `range(vector): range` returns the index range of the vector.\n- `in_range(vector, num): bool` returns true if the number is in the index range of the\n  vector.\n- `in_range(range, num): bool` returns true if the number is in the range.\n- `update_field(S, F, T): S` updates a field in a struct, preserving the values of other fields,\n  where `S` is some struct, `F` the name of a field in `S`, and `T` a value for this field.\n- `old(T): T` delivers the value of the passed argument at point of entry into a Move function. This\n  is allowed in\n  `ensures` post-conditions,\n  inline spec blocks (with additional restrictions), and\n  certain forms of invariants, as discussed later.\n- `TRACE(T): T` is semantically the identity function and causes visualization of the argument's\n  value in error messages created by the prover.\n- `int2bv(v)` explicitly converts an integer `v` into its `bv` representation.\n- `bv2int(b)` explicitly converts a 'bv' integer 'b' into the `num` representation. However it is not encouraged to use it due to efficiency issue.\n\nBuilt-in functions live in an unnamed outer scope of a module. If the module defines a function `len`,\nthen this definition will shadow that of the according built-in function. To access the built-in\nfunction in such a situation, one can use the notation `::len(v)`.\n\n", "doc_id": "27924567-3d35-4bc7-9cab-74fbcc9d8058", "embedding": null, "doc_hash": "3fd5ab05ca1bf243757b3b9058a751dd73c2a7ee2a89d31784f5e9b6f9ced7cc", "extra_info": null, "node_info": {"start": 0, "end": 2231, "_node_type": "1"}, "relationships": {"1": "272a0285-1392-46e1-8b9a-b161c0235156"}}, "__type__": "1"}, "bbdbb814-7156-4ec5-b44d-7722a8283e56": {"__data__": {"text": "\n\nPartial semantics\n\nIn MSL, expressions have partial semantics. This is in contrast to Move program expressions, which\nhave total semantics, since they either deliver a value or abort.\n\nAn expression `e[X]` that depends on some some variables `X` may have a known interpretation for\nsome assignments to variables in `X` but is unknown for others. An unknown interpretation for a\nsub-expression causes no issue if its value is not needed for the overall expression result.\nTherefore it does not matter if we say `y != 0 && x / y > 0`\nor `x / y > 0 && y != 0`: boolean operators are commutative.\n\nThis basic principle inherits to higher-level language constructs. For example, in specifications,\nit does not matter in which order conditions are supplied: `aborts_if y != 0; ensures result == x / y;` is the same as\n`ensures result == x / y; aborts_if y != 0;`. Also, `aborts_if P; aborts_if Q;` is the same\nas `aborts_if Q || P`\n.\n\nMoreover, the principle of partial semantics is inherited to specification helper functions, which behave transparently. Specifically, inlining those functions is equivalent to calling them (call-by-expression parameter passing semantics).\n\n", "doc_id": "bbdbb814-7156-4ec5-b44d-7722a8283e56", "embedding": null, "doc_hash": "a1410faa8a4ceffa2c1629281edebc875d37e2137f4a7c92ba65be2e9bc42a7e", "extra_info": null, "node_info": {"start": 0, "end": 1172, "_node_type": "1"}, "relationships": {"1": "45b8cea3-2033-4594-bc0c-359b76f7ae99"}}, "__type__": "1"}, "38e2311e-995f-477a-8a4f-f752cb272459": {"__data__": {"text": "\n\nSpecifications\n\nSpecifications are contained in so-called *specification blocks* (abbreviated **spec block**) that\ncan appear as module members and inside Move functions. The various types of spec blocks are shown\nbelow, and will be discussed in subsequent sections.\n\n```move\nmodule addr::M {\n    struct Counter has key {\n        value: u8,\n    }\n\n    public fun increment(a: address) acquires Counter {\n        let r = borrow_global_mut(a);\n        spec {\n            // spec block targeting this code position\n            ...\n        };\n        r.value = r.value + 1;\n    }\n\n    spec increment {\n        // spec block targeting function increment\n        ...\n    }\n\n    spec Counter {\n        // spec block targeting struct Counter\n        ...\n    }\n\n    spec schema Schema {\n        // spec block declaring a schema\n        ...\n    }\n\n    spec fun f(x: num): num {\n        // spec block declaring a helper function\n        ...\n    }\n\n    spec module {\n        // spec block targeting the whole module\n        ...\n    }\n}\n```\n\nApart of spec blocks inside Move functions, the textual position of spec block is irrelevant. Also,\na spec block for a struct, function, or module can be repeated multiple times, accumulating the\ncontent.\n\n", "doc_id": "38e2311e-995f-477a-8a4f-f752cb272459", "embedding": null, "doc_hash": "7eda5a1c7a8aac42275b7d9bb1b66a9b76beb203a2cfa6caa55d86d05bfeec1e", "extra_info": null, "node_info": {"start": 0, "end": 1237, "_node_type": "1"}, "relationships": {"1": "525de054-5655-45fe-9873-5d8e50e2d959"}}, "__type__": "1"}, "7b01556e-802c-490f-b13c-c3ce5c0c1536": {"__data__": {"text": "\n\nSeparating specifications\n\nInstead of putting specifications into the same module as the regular Move definitions, one can also\nput them into a separate \"specification\" module, which can live in the same or a different file:\n\n```move\nmodule addr::M {\n    ...\n}\nspec addr::M {\n    spec increment { .. }\n}\n```\n\nThe syntax of a specification module is the same as for a regular module; however, Move functions\nand structures are not allowed.\n\nA specification module must be compiled together with the Move module it is targeting and cannot be\ncompiled and verified standalone.\n\nIn case Move definitions are far apart (e.g. in different files), it is possible to augment the\nspecification of a Move function with a signature of this function to give sufficient context to\nunderstand the specification. This syntax is optionally enabled in regular and in specification\nmodules:\n\n```move\npublic fun increment(a: address) acquires Counter { .. }\n...\nspec increment(a: address) { .. }\n```\n\n", "doc_id": "7b01556e-802c-490f-b13c-c3ce5c0c1536", "embedding": null, "doc_hash": "13ee4ec65bac2355eaf7280e06dce884945bf6bb8ec28f3f41f7e7214bfa0c2a", "extra_info": null, "node_info": {"start": 0, "end": 984, "_node_type": "1"}, "relationships": {"1": "2aa95c5f-ae1c-4f02-b090-86e2d953a135"}}, "__type__": "1"}, "3b1a955b-ba31-4832-8ebc-1d5931826429": {"__data__": {"text": "\n\nPragmas and properties\n\nPragmas and properties are a generic mechanism to influence interpretation of specifications. They\nare also an extension point to experiment with new concepts before they become part of the mainstream\nsyntax. Here we give a brief introduction into their general syntax; individual instances are\ndiscussed later.\n\nThe general form of a pragma is:\n\n```move\nspec .. {\n    pragma  = ;\n}\n```\n\nThe general form of a property is:\n\n```move\nspec .. {\n     [ = ] ; // ensures, aborts_if, include, etc..\n}\n```\n\nThe `` can be any value supported by MSL (or the Move language). A value assignment can\nalso be omitted, in which case a default is used. For example, it is common to use `pragma option;`\nas a shortcut for `pragma option = true;`.\n\nInstead of a single pragma or property, a list can also be provided, as in `invariant [global, isolated] P`.\n\n", "doc_id": "3b1a955b-ba31-4832-8ebc-1d5931826429", "embedding": null, "doc_hash": "aac26dc84016b801e763e64ba2fc92879a60b89c7348cdf075343570a53f12ea", "extra_info": null, "node_info": {"start": 0, "end": 868, "_node_type": "1"}, "relationships": {"1": "69a9bde2-5724-440d-8228-f60e333866c2"}}, "__type__": "1"}, "bbfd043d-d3b0-4e55-9843-4121b3afcbef": {"__data__": {"text": "\n\nPragma inheritance\n\nA pragma in a module spec block sets a value that applies to all other spec blocks in the module. A\npragma in a function or struct spec block can override this value for the function or struct.\nFurthermore, the default value of some pragmas can be defined via the prover configuration.\n\nAs an example, we look at the `verify` pragma. This pragma is used to turn verification on or off.\n\n```move\nspec module {\n    pragma verify = false; // By default, do not verify specs in this module ...\n}\n\nspec increment {\n    pragma verify = true; // ... but do verify this function.\n    ...\n}\n```\n\n", "doc_id": "bbfd043d-d3b0-4e55-9843-4121b3afcbef", "embedding": null, "doc_hash": "352f1708a1e2a379a778694b2f77ff13bbd5337be3e0ccc723db137bfb279da0", "extra_info": null, "node_info": {"start": 0, "end": 609, "_node_type": "1"}, "relationships": {"1": "3789d72f-58ed-4fb4-9f15-1dd8abb9811b"}}, "__type__": "1"}, "826ed24a-c373-4ea6-a5ca-9440ede5e176": {"__data__": {"text": "\n\nGeneral pragmas and properties\n\nA number of pragmas control general behavior of verification. Those are listed in the table below.\n\n| Name                             | Description |\n|----------------------------------|--------------\n| `verify`     | Turns on or off verification.\n| `intrinsic`  | Marks a function to skip the Move implementation and use a prover native implementation. This makes a function behave like a native function even if it not so in Move.\n| `timeout` | Sets a timeout (in seconds) for function or module. Overrides the timeout provided by command line flags.\n| `verify_duration_estimate`     | Sets an estimate (in seconds) for how long the verification of function takes. If the configured `timeout` is less than this value, verification will be skipped.\n| `seed` | Sets a random seed for function or module. Overrides the seed provided by command line flags.\n\nThe following properties control general behavior of verification:\n\n| Name       | Description |\n|------------|--------------\n| `[deactivated]` | Excludes the associated condition from verification.\n\n", "doc_id": "826ed24a-c373-4ea6-a5ca-9440ede5e176", "embedding": null, "doc_hash": "a5f2be01d20a7626864e486ff38c74301570d4f58a4dddccceacd3b2eca60ab8", "extra_info": null, "node_info": {"start": 0, "end": 1091, "_node_type": "1"}, "relationships": {"1": "c5fc2d84-afde-4b59-a06e-4aacf528b6c0"}}, "__type__": "1"}, "3c2572d2-fd30-4c50-9d76-50a8b3b845ab": {"__data__": {"text": "\n\nPre and post state\n\nMultiple conditions in spec blocks work with a *pre* and *post* state, relating them to each other.\nFunction specifications are one example of this: in the `ensures P` condition, the pre-state (at\nfunction entry) and the post-state (at function exit) are related via the predicate `P`. However,\nthe concept is more general and also applied for invariants, where the pre-state is before and\npost-state after a global update.\n\nIn contexts where a pre/post-state is active, expressions are evaluated implicitly in the\npost-state. To evaluate an expression in a pre-state, one uses the built-in function `old(exp)`,\nwhich evaluates its parameter in the pre-state and returns its value. It is important to understand\nthat every sub-expression in `exp` is computed in the pre-state as well, including calls to helper\nfunctions.\n\nThe 'state' in question here consists of assignments to global resource memory, as well as to any\nparameters of the function of type `&mut T`. Examples:\n\n```move\nfun increment(counter: &mut u64) { *counter = *counter + 1 }\nspec increment {\n   ensures counter == old(counter) + 1;\n}\n\nfun increment_R(addr: address) {\n    let r =  borrow_global_mut(addr);\n    r.value = r.value + 1;\n}\nspec increment_R {\n    ensures global(addr).value == old(global(addr).value) + 1;\n}\n```\n\n", "doc_id": "3c2572d2-fd30-4c50-9d76-50a8b3b845ab", "embedding": null, "doc_hash": "d9ca171a5773922dbbb8084e9378b676b3e5b52bf417722d14c2494a5123da24", "extra_info": null, "node_info": {"start": 0, "end": 1317, "_node_type": "1"}, "relationships": {"1": "157d664b-0d36-4c16-b776-18a32d46b7ff"}}, "__type__": "1"}, "e77b85cf-41fc-4a05-88f4-c1bfde303819": {"__data__": {"text": "\n\nHelper functions\n\nMSL allows defining helper functions. Those functions can then be used in expressions.\n\nHelper functions are defined using the following syntax:\n\n```move\nspec fun exists_balance(a: address): bool { exists>(a) }\n```\n\nAs seen in the example, helper functions can be generic. Moreover, they can access global state.\n\nDefinitions of helper functions are neutral regarding whether they apply to\na pre- or post-state. They are evaluated in the currently active state. For\ninstance, in order to see whether a balance existed in the pre-state, one\nuses `old(exists_balance(a))`. Consequently, the expression `old(..)` is not allowed\nwithin the definition of a helper function.\n\nHelper functions are partial functions; see the discussion of partial semantics.\n\n", "doc_id": "e77b85cf-41fc-4a05-88f4-c1bfde303819", "embedding": null, "doc_hash": "94d70d15ec34d0ca0fb434ee93c9e48dfecb4c6f7643c6277499ab6c32b64025", "extra_info": null, "node_info": {"start": 0, "end": 772, "_node_type": "1"}, "relationships": {"1": "1f312d57-e547-447e-8831-659fbd3d5a95"}}, "__type__": "1"}, "d2a61fbd-6f53-4ef9-b874-62d217c1bfe7": {"__data__": {"text": "\n\nUninterpreted functions\n\nA helper function can be defined as **uninterpreted** by simply omitting its body:\n\n```move\nspec fun something(x: num): num;\n```\n\nAn uninterpreted function is one the prover is allowed to assign some arbitrary meaning to, as long\nas it is consistent within a given verification context. Uninterpreted functions are a useful tool\nfor abstraction in specifications (see also abstract specifications).\n\n", "doc_id": "d2a61fbd-6f53-4ef9-b874-62d217c1bfe7", "embedding": null, "doc_hash": "33ee787f9804a5dc66d679081cd8e6aeca6e03c119cf6249ee43f7fafc301257", "extra_info": null, "node_info": {"start": 0, "end": 427, "_node_type": "1"}, "relationships": {"1": "eca08ce0-72ba-49e4-b097-0cdf2c313d45"}}, "__type__": "1"}, "27e18dc6-f4b9-4f46-b1a2-2fd8b9e86042": {"__data__": {"text": "\n\nAxioms\n\nThe meaning of helper functions can be further constrained by using **axioms**. Currently, axioms\nmust be contained in module spec blocks:\n\n```move\nspec module {\n    axiom forall x: num: something(x) == x + 1;\n}\n```\n\nAxioms should be used with care as they can introduce unsoundness in the specification logic via\ncontradicting assumptions. The Move Prover supports a smoke test for detecting unsoundness via\nthe `--check-inconsistency` flag.\n\n", "doc_id": "27e18dc6-f4b9-4f46-b1a2-2fd8b9e86042", "embedding": null, "doc_hash": "bfe6f213a6ef20fa8a149fa9d626cd10ecda4fb9e95a25574ee78167bc0de165", "extra_info": null, "node_info": {"start": 0, "end": 454, "_node_type": "1"}, "relationships": {"1": "7cd3dd37-5acc-46d4-9870-13555b01f87a"}}, "__type__": "1"}, "6713d61e-cbac-47ec-98a6-85551bf52e09": {"__data__": {"text": "\n\nLet bindings\n\nA spec block can contain let bindings that introduce names for expressions:\n\n```move\nfun get_R(account: signer): R { ... }\nspec get_R {\n    let addr = signer::spec_address_of(account);\n    aborts_if addr != ROOT;\n    ensures result == global(addr);\n}\n```\n\nIn a spec block that has a pre and post-state (like a function specification), the `let name = e`\nform will evaluate `e` in the pre-state. In order to evaluate an expression in the post-state, use `let post name = e`. In the rhs expression of this form, one can use `old(..)` to refer to the\npre-state.\n\n", "doc_id": "6713d61e-cbac-47ec-98a6-85551bf52e09", "embedding": null, "doc_hash": "f3b12d1bb3d27a61a3a16a07a43e87bbeeb38995ccbbf6df5dc8490cd621bcef", "extra_info": null, "node_info": {"start": 0, "end": 576, "_node_type": "1"}, "relationships": {"1": "299535c2-c70e-45cf-9736-a663c9984d59"}}, "__type__": "1"}, "91804449-3e9e-47c1-afed-44b65ea7955c": {"__data__": {"text": "\n\nAborts_if condition\n\nThe `aborts_if` condition is a spec block member that can appear only in a function context. It\nspecifies conditions under which the function aborts.\n\nIn the following example, we specify that the function `increment` aborts if the `Counter` resource\ndoes not exist at address `a` (recall that `a` is the name of the parameter of `increment`).\n\n```move\nspec increment {\n    aborts_if !exists(a);\n}\n```\n\nIf a function has more than one `aborts_if` condition, those conditions are or-ed with each other.\nThe evaluation of the combined aborts condition (or-ed from each individual condition) depends on\nthe value of the pragma `aborts_if_is_partial`. If this value is false (the default), the function\naborts *if and only if* the combined aborts condition is true. In this case, the above aborts\nspecification for `increment` will lead to a verification error, since there are additional\nsituations where `increment` can abort, namely if incrementing `Counter.value` would lead to an\noverflow. To fix this, the specification can be completed like this:\n\n```move\nspec increment {\n    pragma aborts_if_is_partial = false; // This is the default, but added here for illustration.\n    aborts_if !exists(a);\n    aborts_if global(a).value == 255;\n}\n```\n\nIf the value of `aborts_if_is_partial` is true, the combined aborts condition (the or-ed individual\nconditions) only *implies* that the function aborts. Formally, if `A` is the combined aborts condition, then\nwith `aborts_if_is_partial = true`, we have `A ==> function_aborts`; otherwise we have\n`A  function_aborts`. Therefore, the following does verify:\n\n```move\nspec increment {\n    pragma aborts_if_is_partial = true;\n    aborts_if !exists(a);\n}\n```\n\n\n> Note that there is a certain risk in setting `aborts_if_is_partial` to true, and best practice is to avoid it in specifications of public functions and transaction scripts once those are considered finalized. This is because changing the code after finalization of the spec can add new (non-trivial, undesired) abort situations the original specification did not anticipate yet will nevertheless silently pass verification.\n\nIf no aborts condition is specified for a function, abort behavior is unspecified. The function may\nor may not abort, and verification will not raise any errors, whether `aborts_if_is_partial` is set\nor not. In order to state that a function never aborts, use `aborts_if false`. One can use the\npragma `aborts_if_is_strict` to change this behavior; this is equivalent to an `aborts_if false` being added to each function that does not have an explicit `aborts_if` clause.\n\n", "doc_id": "91804449-3e9e-47c1-afed-44b65ea7955c", "embedding": null, "doc_hash": "253d995c258ab5f5d10b1c109d1705758ad3d65f39566d8d01dbeef5bd1729c1", "extra_info": null, "node_info": {"start": 0, "end": 2624, "_node_type": "1"}, "relationships": {"1": "3f52ea2c-41a8-4cd1-8ff7-46ee68f6d872"}}, "__type__": "1"}, "fbc125cf-25ad-4ef7-b27c-56270f9716fe": {"__data__": {"text": "\n\nAborts_if condition with code\n\nThe `aborts_if` condition can be augmented with code:\n\n```\nfun get_value(addr: address): u64 {\n    aborts(exists(addr), 3);\n    borrow_global(addr).value\n}\nspec get_value {\n    aborts_if !exists(addr) with 3;\n}\n```\n\nIt is a verification error if the above function does not abort with code `3` under the given\ncondition.\n\nIn order to specify a direct VM abort, one can use the special constant `EXECUTION_FAILURE`:\n\n```\nfun get(addr: address): &Counter acquires Counter {\n    borrow_global(addr)\n}\nspec get {\n    aborts_if !exists(addr) with EXECUTION_FAILURE;\n}\n```\n\nThis same constant can be used for all other VM failures (division by zero, overflow, etc.).\n\n", "doc_id": "fbc125cf-25ad-4ef7-b27c-56270f9716fe", "embedding": null, "doc_hash": "4499e1e0c68b480ec7d6cb011bbe2916fc1278b888b85be35b4216f3474262ae", "extra_info": null, "node_info": {"start": 0, "end": 695, "_node_type": "1"}, "relationships": {"1": "14633f91-9d9f-4b90-a0fa-00e942f268b1"}}, "__type__": "1"}, "16d9c34c-5210-4160-b69e-f9fc311cb6d5": {"__data__": {"text": "\n\nAborts_with condition\n\nThe `aborts_with` condition allows specifying with which codes a function can abort, independent\nunder which condition. It is similar to a 'throws' clause in languages like Java.\n\n```move\nfun get_one_off(addr: address): u64 {\n    aborts(exists(addr), 3);\n    borrow_global(addr).value - 1\n}\nspec get_one_off {\n    aborts_with 3, EXECUTION_FAILURE;\n}\n```\n\nIf the function aborts with any other or none of the specified codes, a verification error will be\nproduced.\n\nThe `aborts_with` condition can be combined with `aborts_if` conditions. In this case, the `aborts_with`\nspecifies any other codes with which the function may abort, in addition to the ones given in the `aborts_if`:\n\n```move\nspec get_one_off {\n    aborts_if !exists(addr) with 3;\n    aborts_with EXECUTION_FAILURE;\n}\n```\n\nIf this is not wanted, and the `aborts_with` should be independent of `aborts_if`, one can use the\nproperty `[check]`:\n\n```move\nspec get_one_off {\n    aborts_if !exists(addr) with 3;\n    aborts_if global(addr) == 0 with EXECUTION_FAILURE;\n\n    aborts_with [check] 3, EXECUTION_FAILURE;\n}\n```\n\n", "doc_id": "16d9c34c-5210-4160-b69e-f9fc311cb6d5", "embedding": null, "doc_hash": "205135eb56863e411f25d6f8ad12df58c2e1e5e6422448b4a38aa452d08eda29", "extra_info": null, "node_info": {"start": 0, "end": 1105, "_node_type": "1"}, "relationships": {"1": "cfd596cc-3b8a-4dd4-935d-610f62e95576"}}, "__type__": "1"}, "e2a30632-6aca-4355-980e-8f336aa5b728": {"__data__": {"text": "\n\nRequires condition\n\nThe `requires` condition is a spec block member that postulates a pre-condition for a function. The\nMove Prover will produce verification errors for functions that are called with violating\npre-conditions.\n\nA `requires` is different from an `aborts_if`: in the latter case, the function can be called, and\nany aborts it produces will be propagated to the caller context. In the `requires` case, the Move Prover\nwill not allow the function to be called in the first place. Nevertheless, the function can *still\nbe called at runtime* if verification is skipped. Because of this, `requires` are rare in Move\nspecifications, and `aborts_if` are more common. Specifically, `requires` should be avoided for public APIs.\n\nAn example of `requires` is:\n\n```move\nspec increment {\n    requires global(a).value < 255;\n}\n```\n\n", "doc_id": "e2a30632-6aca-4355-980e-8f336aa5b728", "embedding": null, "doc_hash": "55b127073a763b48a18d98c2d7503b38bb20c08ee15c6b02a54bd5afa6b2e128", "extra_info": null, "node_info": {"start": 0, "end": 835, "_node_type": "1"}, "relationships": {"1": "0e3a7c7b-8517-47ae-ac4a-5156475c71f6"}}, "__type__": "1"}, "df848441-e320-431d-b58e-402377365d64": {"__data__": {"text": "\n\nEnsures condition\n\nThe `ensures` condition postulates a post-condition for a function that must be satisfied when the\nfunction terminates successfully (i.e. does not abort). The Move Prover will verify each `ensures` to\nthis end.\n\nAn example for the `ensures` condition is the following:\n\n```move\nspec increment {\n    ensures global(a) == old(global(a)) + 1;\n}\n```\n\nWithin the expression for the `ensures` condition, one can use the `old` function, as discussed in \nPre and post state.\n\n", "doc_id": "df848441-e320-431d-b58e-402377365d64", "embedding": null, "doc_hash": "c6f5438055250aa5cd60b7fe306fff2ed7a84eb6cd791ccda6c6aa1f48ea713c", "extra_info": null, "node_info": {"start": 0, "end": 489, "_node_type": "1"}, "relationships": {"1": "d38339ca-c680-4d64-a924-cfc6b6ff8e81"}}, "__type__": "1"}, "1ef9d2c5-063f-4a57-94d5-6be070f9de56": {"__data__": {"text": "\n\nModifies condition\n\nThe `modifies` condition is used to provide permissions to a function to modify global storage. The\nannotation itself comprises a list of global access expressions. It is specifically used together\nwith opaque function specifications.\n\n```move\nstruct S has key {\n    x: u64\n}\n\nfun mutate_at(addr: address) acquires S {\n    let s = borrow_global_mut(addr);\n    s.x = 2;\n}\nspec mutate_at {\n    pragma opaque;\n    modifies global(addr);\n}\n```\n\nIn general, a global access expression has the form `global(address_expr)`. The\naddress-valued expression is evaluated in the pre-state of the annotated function.\n\n```move\nfun read_at(addr: address): u64 acquires S {\n    let s = borrow_global(addr);\n    s.x\n}\n\nfun mutate_S_test(addr1: address, addr2: address): bool acquires T {\n    assert(addr1 != addr2, 43);\n    let x = read_at(addr2);\n    mutate_at(addr1); // Note we are mutating a different address than the one read before and after\n    x == read_at(addr2)\n}\nspec mutate_S_test {\n    aborts_if addr1 == addr2;\n    ensures result == true;\n}\n```\n\nIn the function `mutate_S_test`, the assertion in the spec block is expected to hold. A benefit of\nthe modifies specification on `mutate_at` is that this assertion can be proved whether or\nnot `mutate_at` is inlined.\n\nIf the modifies annotation is omitted on a function, then that function is deemed to have all\npossible permissions for those resources it may modify during its execution. The set of all\nresources that may be modified by a function is obtained via an interprocedural analysis of the\ncode. In the example above, `mutate_S_test` does not have a modifies specification and modifies\nresource `S` via the call to `mutate_at`. Therefore, it is considered to have modified `S` at any\npossible address. Instead, if the programmer adds `modifies global(addr1)`\nto the specification of `mutate_S_test`, then the call to `mutate_at` is checked to make sure that\nmodify permissions granted to `mutate_S_test` cover the permissions it grants to `mutate_at`.\n\n", "doc_id": "1ef9d2c5-063f-4a57-94d5-6be070f9de56", "embedding": null, "doc_hash": "149e3cbcc6f71b0c059ef8091cc5430b6b15655fa4763134597757d8b1801179", "extra_info": null, "node_info": {"start": 0, "end": 2029, "_node_type": "1"}, "relationships": {"1": "a67c5113-9ec6-4cfb-a6e4-ea025cf9cfce"}}, "__type__": "1"}, "40ac6578-5219-4fc1-b501-e71c0b7108a2": {"__data__": {"text": "\n\nInvariant condition\n\nThe invariant condition can be applied on structs and on global level.\n\n", "doc_id": "40ac6578-5219-4fc1-b501-e71c0b7108a2", "embedding": null, "doc_hash": "04ea0c47a12e66a97b2eea0d38e7b2ce717b3c964d07e62c4c04069564f98559", "extra_info": null, "node_info": {"start": 0, "end": 95, "_node_type": "1"}, "relationships": {"1": "625b1f0f-d407-412d-9971-586ec4d72f37"}}, "__type__": "1"}, "1c8e332b-5396-413d-90f5-26afb805a713": {"__data__": {"text": "\n\nFunction invariants\n\nThe `invariant` condition on a function is simply a shortcut for a `requires` and `ensures` with the\nsame predicate.\n\nThus the following spec block:\n\n```move\nspec increment {\n    invariant global(a).value < 128;\n}\n```\n\n... is equivalent to:\n\n```move\nspec increment {\n    requires global(a).value < 128;\n    ensures global(a).value < 128;\n}\n```\n\n", "doc_id": "1c8e332b-5396-413d-90f5-26afb805a713", "embedding": null, "doc_hash": "be7243ea1a18941887d6d9bd797755873cb9d79e7a39a05125e68dd76c0b750e", "extra_info": null, "node_info": {"start": 0, "end": 368, "_node_type": "1"}, "relationships": {"1": "4305f178-8fa0-4e2e-98ee-95058197992c"}}, "__type__": "1"}, "9d26f3d5-15ed-42ca-a32b-08804913d6bc": {"__data__": {"text": "\n\nStruct invariants\n\nWhen the `invariant` condition is applied to a struct, it expresses a well-formedness property of\nthe struct data. Any instance of this struct that is currently not mutated will satisfy this\nproperty (with exceptions as outlined below).\n\nFor example, we can postulate an invariant on our counter that it never must exceed the value of\n127:\n\n```move\nspec Counter {\n    invariant value < 128;\n}\n```\n\nA struct invariant is checked by the Move Prover whenever the struct value is constructed (packed). While\nthe struct is mutated (e.g. via a `&mut Counter`) the invariant does *not* hold (but see exception\nbelow). In general, we consider mutation as an implicit unpack, and end of mutation as a pack.\n\nThe Move language semantics unambiguously identifies the point when mutation ends and starts. This\nfollows from the borrow semantics of Move and includes mutation via an enclosing struct.\n(The mutation of an inner struct ends when the mutation of the root struct where mutation started\nends.)\n\nThere is one exception to this rule. When a mutable reference to a struct declared in module M is\npassed into a *public* function of M which does by itself *not* return any other mutable reference (which could be borrowed from the input parameter), we treat this parameter as \"packed\". That means, on function entry, we will unpack it and on function exit we will pack again, enforcing the invariant. This reflects that in Move, struct data can be mutated only within the module that declares the struct; so for an outside caller of the public function, the mutable reference can actually not be mutated unless by calling public functions of module M again. It is a significant simplification of the verification problem to exploit this in the semantics.\n\n", "doc_id": "9d26f3d5-15ed-42ca-a32b-08804913d6bc", "embedding": null, "doc_hash": "c920387687885e095245131c85c1a75b47227ab64645ff5d2a9923da7e786c2c", "extra_info": null, "node_info": {"start": 0, "end": 1770, "_node_type": "1"}, "relationships": {"1": "a9b664ac-03ad-4448-9a55-55221d6aa9db"}}, "__type__": "1"}, "55cb4855-da17-47f5-aa96-814cdce00e62": {"__data__": {"text": "\n\nGlobal invariants\n\nA global invariant appears as a member of module. It can express a condition over the global state\nof the Move program, as represented by resources stored in memory. For example, the below invariant\nstates that a `Counter` resource stored at any given address can never be zero:\n\n```move\nmodule addr::M {\n    invariant forall a: addr where exists(a): global(a).value > 0;\n}\n```\n\nA global invariant is assumed to hold when data is read from the global state, and is asserted (and\nmay fail to verify) at the moment the state is updated. For example, the below function will never abort with arithmetic underflow because the counter value is always greater than zero; however, it will create a verification error since the counter can drop to zero:\n\n```\nfun decrement_ad(addr: address) acquires Counter {\n    let counter = borrow_global_mut(addr);\n    let new_value = counter.value - 1;   // Will not abort because counter.value > 0\n    *counter.value = new_value;          // Fails verification since value can drop to zero\n}\n```\n\n", "doc_id": "55cb4855-da17-47f5-aa96-814cdce00e62", "embedding": null, "doc_hash": "e70bd43f6494849a9a472b5284da4ff482bbf98f9e2305a01e10888e604ddeae", "extra_info": null, "node_info": {"start": 0, "end": 1050, "_node_type": "1"}, "relationships": {"1": "48abef9a-c1bd-414a-be05-56f296bec395"}}, "__type__": "1"}, "dc6efd91-5945-43c2-a957-c402f42c8b34": {"__data__": {"text": "\n\nDisabling invariants\n\nThere are times when a global invariant holds almost everywhere, except for a brief interval inside a function. In current Move code, this often occurs when something (e.g. an account) is being set up and\nseveral structs are published together. Almost everywhere, an invariant holds that all the structs are published or none of them are. But the code that publishes the structs must do so sequentially. While the structs are being published, there will be a point where some are published and others are not.\n\nIn order to verify invariants that hold except during small regions, there is a feature to allow users to disable invariants temporarily. Consider the following code fragment:\n\n```move\nfn setup() {\n    publish1();\n    publish2();\n    }\n}\n```\nwhere `publish1` and `publish2` publish two different structs, `T1` and `T2` at address `a`.\n\n```move\nmodule addr::M {\n    invariant [global] exists(a) == exists(a)\n}\n```\n\nAs written, the Move Prover will report that the invariant is violated after the call to `publish1` and before the call to `publish2`. If either of `publish1` or `publish2` is without the other, the Move Prover\nwill also report a violation of the invariant.\n\nBy default, a global invariant is checked immediately after the instruction `I` that touches the resources mentioned in the global invariant. The `[suspendable]` attribute (at the invariant side) together with two pragmas (specified in function spec block) provide fine-grained control on where we hope this invariant to be checked:\n\n- `disable_invariants_in_body`: the invariant will be checked at the end of the function where `I` resides.\n- `delegate_invariants_to_caller`: the invariant will be checked by all callers of the function where `I` resides.\n\nFor the example above, we can add the pragma `disable_invariants_in_body`:\n```move\nspec setup {\n    pragma disable_invariants_in_body;\n}\n```\nwhich says that invariants are not required to hold while `setup` is executing but are assumed to hold on entry to and exit from `setup`.\n\nThis pragma changes the Move Prover's behavior. The invariants are assumed on entry to `setup` but not proved during or after `publish1` and `publish2`.  Instead, all invariants that could be invalidated in the\nbody of `setup` are asserted and proved at the point of return from `setup`.  A consequence of this processing is that the user may need to provide stronger post-conditions on `publish1` and `publish2` to\nmake it possible to prove the invariants on exit from `setup`.\n\nAnother consequence of this processing is that invariants cannot safely be assumed to hold during the execution of `publish1` and `publish2` (unless nothing in the body of `setup` changes state\nmentioned in the invariant). Therefore, if proving a post-condition requires the invariant to be assumed, the post-condition will fail.\n\nIn the example, invariants hold at the call sites of `setup` but not in the body. For `publish1`, invariants don't necessarily hold at the call site *or* in the body of the function. In the example, that\nbehavior is implied because `publish1` is called in a context where invariants are disabled.\n\nWhen invariants are disabled in `setup` in the above example, the Move Prover cannot assume them on entry to `publish1` and `publish2` and should not try to prove them on exit from those functions. The Move Prover\nwould have the same behavior for any functions called by `publish1` or `publish2`.  The Move Prover *automatically* adopts this behavior when invariants are disabled in a calling function, but it is possible for the user to declare that a function be treated like", "doc_id": "dc6efd91-5945-43c2-a957-c402f42c8b34", "embedding": null, "doc_hash": "e1700d6e5a61ce8c4163afc319c8d7388e7ba8b4daf569224b0c2297397fde6f", "extra_info": null, "node_info": {"start": 0, "end": 3632, "_node_type": "1"}, "relationships": {"1": "86c053e9-7e50-4562-8f4a-2b7ce2e6fa00", "3": "49f0d9ee-f74b-4fd3-b598-4ce1eecf617b"}}, "__type__": "1"}, "49f0d9ee-f74b-4fd3-b598-4ce1eecf617b": {"__data__": {"text": "calling function, but it is possible for the user to declare that a function be treated like `publish1`.\n\nFor example, if `publish2` is *only* called from the setup function above, and we did *not* disable invariants in `setup`, we could achieve a similar effect by using the pragma `delegate_invariants_to_caller`, instead.\n\n```move\nspec setup {\n    pragma delegate_invariants_to_caller;\n}\n```\nThis would be legal only if `setup` is a private or `public (friend)` function. The difference between this and disabling invariants in `setup` is that the invariants would not be assumed at the beginning of `setup` and would be proved after `setup` returns at each site where it is called.\n\nWhile both pragmas disable invariants in the body of a function, the difference is that `disable_invariants_in_body` assumes invariants on entry and proves them on exit, while `delegate_invariants_to_caller` does neither.\n\nThere are some limitations on how these pragmas can be used. `disable_invariants_in_body` cannot be declared for functions where invariants are delegated to a caller, either explicitly via the pragma\nor implicitly because the function is called in a context where invariants have been disabled. (This restriction is to ensure consistent processing, because on pragma assumes that invariants hold\nin the calling context and the other does not).  Second, it is illegal for a public or script function to delegate invariant checking to its callers (since the Move Prover does not know all the call sites), *unless* the function cannot possibly invalidate an invariant because it doesn't change any of the state mentioned in `exists` and `global` expressions appearing in the invariant.\n\n", "doc_id": "49f0d9ee-f74b-4fd3-b598-4ce1eecf617b", "embedding": null, "doc_hash": "19e93dd7d1cb6672a6cbf3916d511ec983caf0f84b6c1c296d7af37ac288d798", "extra_info": null, "node_info": {"start": 3540, "end": 5234, "_node_type": "1"}, "relationships": {"1": "86c053e9-7e50-4562-8f4a-2b7ce2e6fa00", "2": "dc6efd91-5945-43c2-a957-c402f42c8b34"}}, "__type__": "1"}, "c7ec98a4-9faa-4c22-9736-11fc6c4de196": {"__data__": {"text": "\n\nUpdate invariants\n\nThe `update` form of a global invariant allows to express a relation between pre-state and post-state of a global state update. For example, the following invariant states that the counter must decrease monotonically whenever it is updated:\n\n```move\nmodule addr::M {\n    invariant update [global] forall a: addr where old(exists(a)) && exists(addr):\n        global(a).value (a));\n}\n```\n\n", "doc_id": "c7ec98a4-9faa-4c22-9736-11fc6c4de196", "embedding": null, "doc_hash": "2ebe6a6060c11c1601c94ec289b195d111d8b369dcdbae4a8e7cc8026c39ae9d", "extra_info": null, "node_info": {"start": 0, "end": 408, "_node_type": "1"}, "relationships": {"1": "63cdbb72-8753-40c7-a677-65c432cde1f9"}}, "__type__": "1"}, "95f58beb-bf27-4195-bd9a-90d451ff55b7": {"__data__": {"text": "\n\nIsolated global invariants\n\nA global invariant can be marked as `[isolated]` to indicate that it is not relevant for proving\nother properties of the program. An isolated global invariant will not be assumed when the related\nglobal state is read. It will only be assumed before the state is updated to help prove that the\ninvariant still holds after the update. This feature is for improving performance in situations\nwhere there are many global invariants, but they have no direct influence on verification.\n\n", "doc_id": "95f58beb-bf27-4195-bd9a-90d451ff55b7", "embedding": null, "doc_hash": "00ec1b58dec24feab8f0d9b5a63542eb40495e152e52a8b2a6064db02e468406", "extra_info": null, "node_info": {"start": 0, "end": 511, "_node_type": "1"}, "relationships": {"1": "47e362fc-6b38-47f4-9908-fd5498e41469"}}, "__type__": "1"}, "52c5b349-40fe-4451-b697-99c59bd33ff1": {"__data__": {"text": "\n\nModular verification and global invariants\n\nCertain usage of global invariants leads to verification problems that cannot be checked in a modular fashion. \"Modular\" here means that a module can be verified standalone and proven to be universally correct in all usage contexts (if preconditions are met).\n\nA non-modular verification problem may arise if a global invariant refers to state from multiple modules. Consider a situation where module `M1` uses module `M2`, and `M1` contains the following invariant, with the helper function `condition` referring to global state of each respective module:\n\n```move\nmodule addr::M1 {\n    invariant M1::condition() ==> M2::condition();\n}\n```\n\nWhen we verify `M1` standalone, the Move Prover will determine that it also needs to verify functions in `M2`, namely those which update the M2 memory such that the invariant in M1 can fail.\n\n", "doc_id": "52c5b349-40fe-4451-b697-99c59bd33ff1", "embedding": null, "doc_hash": "bf789d84af6da5b7fbcc764237674b8da14e887a4ebd371516ff301058c65a95", "extra_info": null, "node_info": {"start": 0, "end": 880, "_node_type": "1"}, "relationships": {"1": "62400041-44cd-44fa-8f64-a6e9b2b2f289"}}, "__type__": "1"}, "5b9b11ac-d1fc-4240-9ede-03125b7382a5": {"__data__": {"text": "\n\nAssume and assert conditions in code\n\nA spec block might also occur anywhere an ordinary Move statement block can occur.\nHere is an example:\n\n```\nfun simple1(x: u64, y: u64) {\n    let z;\n    y = x;\n    z = x + y;\n    spec {\n        assert x == y;\n        assert z == 2*x;\n    }\n}\n```\n\nIn such inline spec blocks, only a subset of conditions are permitted:\n- `assume` and `assert` statements are allowed in any code locations.\n- loop `invariant` statements are allowed only in code locations that represent loop headers.\n\nAn assert statement inside a spec block indicates a condition that must hold when control reaches\nthat block. If the condition does not hold, an error is reported by the Move Prover. An `assume`\nstatement, on the other hand, blocks executions violating the condition in the statement. The\nfunction `simple2` shown below is verified by the Move Prover. However, if the first spec block\ncontaining the assume statement is removed, Move Prover will show a violation to the `assert`\nstatement in the second spec block.\n\n```\nfun simple2(x: u64, y: u64) {\n    let z: u64;\n    spec {\n        assume x > y;\n    };\n    z = x + y;\n    spec {\n        assert z > 2*y;\n    }\n}\n```\n\n", "doc_id": "5b9b11ac-d1fc-4240-9ede-03125b7382a5", "embedding": null, "doc_hash": "66e3fa0755d01807f852657850c1330fc7a939b205596520aab5d3107a43e932", "extra_info": null, "node_info": {"start": 0, "end": 1192, "_node_type": "1"}, "relationships": {"1": "8402448f-d475-4c33-89d9-eeb317819125"}}, "__type__": "1"}, "42310c2f-f970-4fb4-91a4-833ad0f95f17": {"__data__": {"text": "\n\nLoop invariants\n\nAn `invariant` statement encodes a loop invariant and must be placed at a loop head, as in the\nfollowing example:\n\n```\nfun simple3(n: u64) {\n    let x = 0\n    loop {\n        spec {\n            invariant x <= n;\n        };\n        if (x < n) {\n            x = x + 1\n        } else {\n            break\n        }\n    };\n    spec {\n        assert x == n;\n    }\n}\n```\n\nA loop invariant is translated into two `assert` statements and one `assume` statement to facilitate the inductive reasoning of properties about the loop. In break down, a loop invariant is translated to:\n- An `assert` statement that confirms the invariant holds when the loop is first encountered in the\n  execution -- establishing the base case.\n- An `assume` statement that encodes the property that the invariant holds at loop iteration `I`.\n- An `assert` statement that checks whether the invariant continues to hold at loop iteration `I+1`.\n\n", "doc_id": "42310c2f-f970-4fb4-91a4-833ad0f95f17", "embedding": null, "doc_hash": "652b38e3fa43c8d200cc7adbb062f4c574d53f94ced27cead0b2d020ec841c4f", "extra_info": null, "node_info": {"start": 0, "end": 931, "_node_type": "1"}, "relationships": {"1": "96bb5190-fb40-4472-b942-a3503e58aaf7"}}, "__type__": "1"}, "ff04b1e4-324e-467b-b4d1-cb4b5134543d": {"__data__": {"text": "\n\nReferring to pre-state\n\nOccasionally, we would like to refer to the pre-state of a mutable function argument in inline spec\nblocks. In MSL, this can be done with the `old(T)` expression. Similar to the semantics of `old(..)`\nin post conditions, an `old(T)` expression in an `assume` or `assert` statement always yields the\nvalue of `T` at the function entry point. Here is an example that illustrate the use of\n`old(..)` in an inline spec block:\n\n```\nfun swap(x: &mut u64, y: &mut u64) {\n    let t = *x;\n    *x = *y;\n    *y = t;\n    spec {\n        assert x == old(y);\n        assert y == old(x);\n    };\n}\n```\n\nThe above example is trivial as the same property can be expressed with post conditions\n(i.e., `ensures`) too. But there are cases where we must use `old(..)` to refer to the pre-state, especially in the specification of loop invariants. Consider the following example\nwhere we verify that the `vector_reverse` function properly reverses the order of all elements\nin a vector:\n\n```\nfun verify_reverse(v: &mut vector) {\n    let vlen = vector::length(v);\n    if (vlen == 0) return ();\n\n    let front_index = 0;\n    let back_index = vlen -1;\n    while ({\n        spec {\n            assert front_index + back_index == vlen - 1;\n            assert forall i in 0..front_index: v[i] == old(v)[vlen-1-i];\n            assert forall i in 0..front_index: v[vlen-1-i] == old(v)[i];\n            assert forall j in front_index..back_index+1: v[j] == old(v)[j];\n            assert len(v) == vlen;\n        };\n        (front_index < back_index)\n    }) {\n        vector::swap(v, front_index, back_index);\n        front_index = front_index + 1;\n        back_index = back_index - 1;\n    };\n}\nspec verify_reverse {\n    aborts_if false;\n    ensures forall i in 0..len(v): v[i] == old(v)[len(v)-1-i];\n}\n```\n\nNote the usage of `old(v)` in the loop invariants. Without them, it is hard to express the\ninvariant that the vector is partially reversed while the loop is iterating and the rest\nremain unchanged.\n\nHowever, unlike the `old(T)` expressions in `ensures` conditions where `T` can be any valid\nexpression (e.g., `old(v[i])` is allowed), the `old(T)` expressions in `assert` and `assumes`\nstatements accept only a single variable as `T` and that variable must be a function argument of\na mutable reference type. In the above example, `old(v[i])` is not allowed, and we should use\n`old(v)[i]` instead.\n\n", "doc_id": "ff04b1e4-324e-467b-b4d1-cb4b5134543d", "embedding": null, "doc_hash": "b471778c9141c3de3b04f0450b069a7044abdee97dbfc30fdb0340c1e3faff83", "extra_info": null, "node_info": {"start": 0, "end": 2395, "_node_type": "1"}, "relationships": {"1": "337b0cc9-c799-4fcd-91c4-500aac430e8b"}}, "__type__": "1"}, "5130ab31-7065-476d-8d30-26230695de52": {"__data__": {"text": "\n\nSpecification variables\n\nMSL supports *spec variables*, also called *ghost variables* in the verification community. These\nvariables are used only in specifications and represent information derived from the global state of\nresources. An example use case is to compute the sum of all coins available in the system and\nspecify that the sum can be changed only in certain scenarios.\n\nWe illustrate this feature by introducing a spec variable that maintains the sum of all `Counter`\nresources from our running example. First, a spec variable is introduced via spec module block as\nfollows:\n\n```move\nspec module {\n    global sum_of_counters: num;\n}\n```\n\nThis value is going to be updated whenever a `Counter` is packed or unpacked. (Recall that mutation\nis interpreted as an implicit unpack and pack):\n\n```move\nspec Counter {\n    invariant pack sum_of_counters = sum_of_counters + value;\n    invariant unpack sum_of_counters = sum_of_counters - value;\n}\n```\n> TODO: `invariant pack` and `invariant unpack` are currently not implemented\n\nNow we may for example want to specify that the sum of all Counter instances in the global state\nshould never exceed a particular value. We can do this as follows:\n\n```move\nspec module {\n    invariant [global] sum_of_counters < 4711;\n}\n```\n\nNote that spec variables can also be referenced from helper functions. Moreover, spec variables can\nbe generic:\n\n```move\nspec module {\n    global some_generic_var: num;\n}\n```\n\nWhen using such a spec variable, a type parameter must be provided, as in `some_generic_var`. Effectively, a generic spec variable is like a family of variables indexed by types.\n\n", "doc_id": "5130ab31-7065-476d-8d30-26230695de52", "embedding": null, "doc_hash": "9a6793c60852660529369d26ab91aa7df451995336f30bc73dacab67f1a7ed52", "extra_info": null, "node_info": {"start": 0, "end": 1632, "_node_type": "1"}, "relationships": {"1": "ed231a9a-d15f-4f80-b4f2-bff0dcd36fde"}}, "__type__": "1"}, "f4eb04f7-f1fc-4599-86ff-9b7171412102": {"__data__": {"text": "\n\nSchemas\n\nSchemas are a means for structuring specifications by grouping properties together. Semantically,\nthey are just syntactic sugar that expand to conditions on functions, structs, or modules.\n\n", "doc_id": "f4eb04f7-f1fc-4599-86ff-9b7171412102", "embedding": null, "doc_hash": "aa953f5adb786da3dd8fe664a2154a67ec1f591d19016ad97faf68e08fc3a832", "extra_info": null, "node_info": {"start": 0, "end": 201, "_node_type": "1"}, "relationships": {"1": "7a214dcc-6e75-4adf-8726-7c9d2c3cdead"}}, "__type__": "1"}, "1d6ee096-ed52-4d98-9da5-134c76ffaede": {"__data__": {"text": "\n\nBasic Schema Usage\n\nSchemas are used as such:\n\n```move\nspec schema IncrementAborts {\n    a: address;\n    aborts_if !exists(a);\n    aborts_if global(a).value == 255;\n}\n\nspec increment {\n    include IncrementAborts;\n}\n```\n\nEach schema may declare a number of typed variable names and a list of conditions over those\nvariables. All supported condition types can be used in schemas. The schema can then be included in\nanother spec block:\n\n- If that spec block is for a function or a struct, all variable names the schema declares must be\n  matched against existing names of compatible type in the context.\n- If a schema is included in another schema, existing names are matched and must have the same type,\n  but non-existing names will be added as new declarations to the inclusion context.\n\nWhen a schema is included in another spec block, it will be checked whether the conditions it\ncontains are allowed in this block. For example, including the schema `IncrementAborts` into a\nstruct spec block will lead to a compile-time error.\n\nWhen a schema is included, the names it declares can also bound by expressions. For example, one can\nwrite `include IncrementAborts{a: some_helper_address()}`. Effectively, not providing a binding is\nequivalent to writing `IncrementAborts{a: a}` if `a` is an existing name in scope.\n\nSchemas can be generic. Generic schemas must be fully instantiated where they are included; type\ninference is not available for schemas.\n\n", "doc_id": "1d6ee096-ed52-4d98-9da5-134c76ffaede", "embedding": null, "doc_hash": "121950cc0eeea775eceffc7bedfc52d208ddcf11b4a9e0068ea83651552e2ea5", "extra_info": null, "node_info": {"start": 0, "end": 1456, "_node_type": "1"}, "relationships": {"1": "149509e7-458c-435f-9cbe-024fd66ad7b0"}}, "__type__": "1"}, "d796c9a5-881f-4128-9eab-967c306e55fd": {"__data__": {"text": "\n\nSchema expressions\n\nWhen a schema is included, one can use a limited set of Boolean operators as follows:\n\n- `P ==> SchemaExp`: all conditions in the schema will be prefixed with `P ==> ..`. Conditions that\n  are not based on Boolean expressions will be rejected.\n- `if (P) SchemaExp1 else SchemaExp2`: this is treated similar to including both\n  `P ==> SchemaExp1` and `!P ==> SchemaExp2`.\n- `SchemaExp1 && SchemaExp2`: this is treated as two includes for both schema expressions.\n\n", "doc_id": "d796c9a5-881f-4128-9eab-967c306e55fd", "embedding": null, "doc_hash": "7a60d0eaa1cad0e9e027b5e6f9b48a895d526cbce51732be682aeafd66a8967f", "extra_info": null, "node_info": {"start": 0, "end": 485, "_node_type": "1"}, "relationships": {"1": "b2a9c8af-fb59-490b-8e11-9927c5a23a6d"}}, "__type__": "1"}, "92cbf362-09a3-4248-92cc-5285cdde50ea": {"__data__": {"text": "\n\nSchema apply operation\n\nOne of the main use cases for schemas is to be able to name a group of properties and then apply\nthose to a set of functions. This is achieved by the `apply` operator. The `apply` spec block member\ncan appear only in module spec blocks.\n\nThe general form of the apply operator is `apply Schema to FunctionPattern, .. except FunctionPattern, ..`. Here, `Schema` can be a schema name or a schema name plus formal type arguments. `FunctionPatterns` consists of an optional visibility modifier `public` or `internal` (if not provided, both visibilities will match), a name pattern in the style of a shell file pattern ( e.g. `*`, `foo*`, `foo*bar`, etc.), and finally an optional type argument list. All type arguments provided to `Schema` must be bound\nin this list and vice versa.\n\nThe `apply` operator includes the given schema in all function spec blocks that match the patterns,\nexcept those excluded via the `except` patterns.\n\nA typical use of the `apply` operator is to provide common pre and post conditions to all functions in\na module with some exceptions. Example:\n\n```move\nspec schema Unchanged {\n    let resource = global(ADDR):\n    ensures resource == old(resource);\n}\n\nspec module {\n    // Enforce Unchanged for all functions except the initialize function.\n    apply Unchanged to * except initialize;\n}\n```\n\nNotice that while with global invariants we can express similar things, we *cannot*\nexpress the restriction of the invariant to only specific functions.\n\n", "doc_id": "92cbf362-09a3-4248-92cc-5285cdde50ea", "embedding": null, "doc_hash": "c87eb2bb626d788a09aea51928c2e9ef957d67dd6f2a4aa22f6824817773a44b", "extra_info": null, "node_info": {"start": 0, "end": 1501, "_node_type": "1"}, "relationships": {"1": "54dec6bd-bc24-42d8-b1de-a632bcd56df1"}}, "__type__": "1"}, "9894ebb5-698c-45c0-a375-8bb08ad21ee7": {"__data__": {"text": "\n\nOpaque specifications\n\nWith the pragma `opaque`, a function is declared to be solely defined by its specification at caller\nsides. In contrast, if this pragma is not provided, then the function's implementation will be used\nas the basis to verify the caller.\n\nUsing `opaque` requires the specification to be sufficiently complete for the verification problem at hand. Without `opaque`, the Move Prover will use the implementation as the source of truth for the definition of the function. But with `opaque`, if there is an aspect of the function definition unspecified, an arbitrary meaning will be assumed. For example, with the specification below, the `increment` function can abort under arbitrary conditions:\n\n```move\nspec increment {\n    pragma opaque;\n    // aborts_if !exists(a);  // We need to add this to make the function not abort arbitrarily\n    ensures global(a) == old(global(a)) + 1;\n}\n```\n\nIn general, `opaque` functions enable modular verification, as they abstract from the implementation\nof functions, resulting in much faster verification.\n\nIf an `opaque` function modifies state, it is advised to use the `modifies` condition in its specification. If this is omitted, verification of the state changes will fail.\n\n", "doc_id": "9894ebb5-698c-45c0-a375-8bb08ad21ee7", "embedding": null, "doc_hash": "95a4dcadebb5fa71c0eca09cc9d3eb8380cf7207e29350ea2890d1ebf3965c6d", "extra_info": null, "node_info": {"start": 0, "end": 1238, "_node_type": "1"}, "relationships": {"1": "2a48d303-9ff8-4376-9595-8e059618afea"}}, "__type__": "1"}, "11df7f5a-b2bb-4a86-bbfb-5dab76b946b9": {"__data__": {"text": "\n\nAbstract specifications\n\nThe `[abstract]` property allows specifying a function such that abstract semantics are used at the\ncaller side that is different from the actual implementation. This is useful if the implementation\nis too complex for verification, and abstract semantics are sufficient for verification goals.\nThe `[concrete]` property, in turn, still allows specifying conditions that are verified against\nthe implementation but not used at the caller side.\n\nConsider the following example of a hash function. The actual value of the hash is not relevant for\nverification of callers, and we use an uninterpreted helper function delivering an arbitrary value chosen by the Move Prover. We can still specify the concrete implementation and verify its correctness:\n\n```move\nfun hash(v: vector): u64 {\n    >(v)\n}\nspec hash {\n    pragma opaque;\n    aborts_if false;\n    ensures [concrete] result == >(v);\n    ensures [abstract] result == spec_hash_abstract(v);\n}\nspec fun abstract_hash(v: vector): u64; // uninterpreted function\n```\n\nThe soundness of the abstraction is the responsibility of the specifier and not verified by the\nMove Prover.\n\n> NOTE: The abstract/concrete properties should only be used with opaque specifications, but the Move Prover will currently not generate an error message even though they are not used with opaque specifications.\n\n> NOTE: The `modifies` clause does not currently support abstract/concrete. Also, if no modifies is given, the modified state will be computed from the implementation anyway, possibly conflicting with `[abstract]` properties.\n\n", "doc_id": "11df7f5a-b2bb-4a86-bbfb-5dab76b946b9", "embedding": null, "doc_hash": "05a76cfb3a36e1d98989973b05c3fcebcd6d16145a20b578989b6272d4d5289a", "extra_info": null, "node_info": {"start": 0, "end": 1591, "_node_type": "1"}, "relationships": {"1": "9358028a-d373-40cd-818a-5a7e59623d8c"}}, "__type__": "1"}, "163b9794-43df-44a3-984e-b49c3c0c1a2c": {"__data__": {"text": "\n\nDocumentation generation\n\nThe organization of specification blocks in a file is relevant for documentation generation -- even\nthough it is not for the semantics. \n\n", "doc_id": "163b9794-43df-44a3-984e-b49c3c0c1a2c", "embedding": null, "doc_hash": "4890ae8c528caa29f3474ca264451a8701b6249cc2e69da412e86e8fdfee5c54", "extra_info": null, "node_info": {"start": 0, "end": 166, "_node_type": "1"}, "relationships": {"1": "e0aa6df7-0612-41ff-a17f-1293a55df7d5"}}, "__type__": "1"}, "6cc096c5-5222-42e1-b0c7-1a7dcd55ff7e": {"__data__": {"text": "\n\nExpressiveness\n\nThe Move specification language is expressive enough to represent the full Move language semantics (formal argument outstanding) with one exception: functions that return a `&mut T` type.\n\nConsider the following code:\n\n```move\nstruct S { x: u64, y: u64 }\n\nfun x_or_y(b: bool, s: &mut S): &mut u64 {\n    if (b) &mut s.x else &mut s.y\n}\nspec x_or_y {\n    ensures b ==> result == s.x;\n    ensures !b ==> result == s.y;\n}\n```\n\nWe are not able to specify the *full* semantics of `x_or_y` in MSL because we cannot capture the\nsemantics of mutable references. While we can say something about the value behind the reference at\nfunction exit, subsequent effects as in `*x_or_y(b, &mut s) = 2` cannot be specified.\n\nHowever, the Move Prover *does* understand the meaning of such functions -- the restriction is only\nin what we can specify. Practically, this means we cannot make the function `x_or_y` opaque and must\nlet verification rely on that the Move Prover directly works with the implementation. Specifically, we\ncan verify the following (which can then be opaque):\n\n```move\nfun x_or_y_test(s: S): S {\n    *x_or_y(true, &mut s) = 2;\n    s\n}\nspec x_or_y_test {\n    pragma opaque;\n    ensures result.x == 2;\n    ensures result.y == s.y;\n}\n```\n\n", "doc_id": "6cc096c5-5222-42e1-b0c7-1a7dcd55ff7e", "embedding": null, "doc_hash": "62a9084983ddf2a66dad49070d3df9608310a6ea1e9a94dea7c30b1045480667", "extra_info": null, "node_info": {"start": 0, "end": 1258, "_node_type": "1"}, "relationships": {"1": "359a6c78-a474-4902-930b-561eb6589902"}}, "__type__": "1"}, "8cc68a55-f039-4999-a5bc-90e687a10a02": {"__data__": {"text": "\n\nSupporting resources\n\n* Design by contract PRE_POST_REFERENCE\n* APTOS_FRAMEWORK\n\n", "doc_id": "8cc68a55-f039-4999-a5bc-90e687a10a02", "embedding": null, "doc_hash": "b26b6a96220bdf8cf2a68376630f6bdde1c7805b8e5100985dca19de8d2b72d5", "extra_info": null, "node_info": {"start": 0, "end": 83, "_node_type": "1"}, "relationships": {"1": "fa171fb1-0cf0-4779-9db2-bed5e5c643d9"}}, "__type__": "1"}, "79f5caf6-076d-498f-b0d9-eb8c615a460f": {"__data__": {"text": "\n\nStaking Pool Operations\n\nThis document describes how to perform staking pool operations. Note that a staking pool can only accept stake from the stake pool owner. You can stake only when you meet the minimum staking requirement. See also the related Delegation Pool Operations instructions to accept stake from multiple delegators in order to reach the minimum. \n\n:::tip Minimum staking requirement\nThe current required minimum for staking is 1 million APT.\n:::\n\n:::danger\nImportant There is no upgrade mechanism for the staking contract from staking pool to delegation pool. A new delegation pool would have to be created.\n:::\n\n", "doc_id": "79f5caf6-076d-498f-b0d9-eb8c615a460f", "embedding": null, "doc_hash": "c3f2a8b916c95c66d387cbfb9affb56ed2f1a53d72f6f32e5d3b741512d82e3b", "extra_info": null, "node_info": {"start": 0, "end": 631, "_node_type": "1"}, "relationships": {"1": "6a7df70b-48c6-4840-861c-db2734ca2d00"}}, "__type__": "1"}, "80e343db-878c-41da-ab2f-6fcf7d82341a": {"__data__": {"text": "\n\nConnect to Aptos network\n\nConnect to the Aptos network and start your node with `validator-identity` and `validator-fullnode-identity` addresses using your staking pool address.\n\n", "doc_id": "80e343db-878c-41da-ab2f-6fcf7d82341a", "embedding": null, "doc_hash": "27c0072b811aef259bb03b297b6eae24e611dddb86e79b6ec56e8f816f429cfa", "extra_info": null, "node_info": {"start": 0, "end": 181, "_node_type": "1"}, "relationships": {"1": "3d87035e-b396-4fe9-901f-74b845ab58ff"}}, "__type__": "1"}, "513b0573-f3f1-410d-935b-123fb1129c0b": {"__data__": {"text": "\n\nInitializing the stake pool\n\nMake sure that this step is performed by the owner. See Initialize staking pool section.\n\n", "doc_id": "513b0573-f3f1-410d-935b-123fb1129c0b", "embedding": null, "doc_hash": "011f2f7556f183789d7c3ea721da17af07be5932757ebd8341bf438848eb1696", "extra_info": null, "node_info": {"start": 0, "end": 121, "_node_type": "1"}, "relationships": {"1": "4ac69c36-5e22-424a-b556-7e819b62303a"}}, "__type__": "1"}, "a9d93fc6-74d8-4016-a0b2-d700e3c63622": {"__data__": {"text": "\n\nJoining validator set\n\nFollow the below steps to set up the validator node using the operator account and join the validator set.\n\n:::tip Mainnet vs Testnet\nThe below CLI command examples use mainnet. Change the `--network` value for testnet and devnet. View the values in Aptos Blockchain Deployments to see how profiles can be configured based on the network.\n:::\n\n", "doc_id": "a9d93fc6-74d8-4016-a0b2-d700e3c63622", "embedding": null, "doc_hash": "80af7939bb6758fa0edebaacc7466297fb0d9fac07c220c296cbcfc26b6ae3e9", "extra_info": null, "node_info": {"start": 0, "end": 369, "_node_type": "1"}, "relationships": {"1": "76c07f39-80da-44e1-87c1-5bcce15f84ad"}}, "__type__": "1"}, "c6fc8783-0b4c-4997-a766-8320ddbda3d4": {"__data__": {"text": "\n\nPerform pool owner operations\n\nThis document describes how to use the Aptos CLI to perform owner operations during validation.\n\n", "doc_id": "c6fc8783-0b4c-4997-a766-8320ddbda3d4", "embedding": null, "doc_hash": "c03e20cd4de759e5c0314a39e3ba6b9aa79e3c4fd11159b2e1ff1ba16651386f", "extra_info": null, "node_info": {"start": 0, "end": 130, "_node_type": "1"}, "relationships": {"1": "c5fb0790-302c-408c-80ae-3f3d04956a1c"}}, "__type__": "1"}, "f164c1a7-2d20-4259-9a5c-d89220a502b2": {"__data__": {"text": "\n\nOwner operations with CLI\n\n:::tip Testnet vs Mainnet\nThe below CLI command examples use mainnet. Change the `--network` value for testnet and devnet. View the values in Aptos Blockchain Deployments to see how profiles can be configured based on the network.\n:::\n\n", "doc_id": "f164c1a7-2d20-4259-9a5c-d89220a502b2", "embedding": null, "doc_hash": "1c2d00b7afa426546c46bd35665cc684dc05bbe0a594e34537b087aedc6eb22b", "extra_info": null, "node_info": {"start": 0, "end": 265, "_node_type": "1"}, "relationships": {"1": "513b5028-e3d5-4f67-b543-9e47f96a1867"}}, "__type__": "1"}, "c2a8e743-6304-449e-a23e-0be920ade4c4": {"__data__": {"text": "\n\nInitialize CLI\n\nInitialize CLI with a private key from an existing account, such as a wallet, or create a new account.\n\n```bash\naptos init --profile mainnet-owner \\\n  --network mainnet\n```\n\nYou can either enter the private key from an existing wallet, or create new wallet address.\n\n", "doc_id": "c2a8e743-6304-449e-a23e-0be920ade4c4", "embedding": null, "doc_hash": "676c3b4e4164e2882cd30417a8c0fb9998ec8367af731068a0d6b65cd00d0b8a", "extra_info": null, "node_info": {"start": 0, "end": 285, "_node_type": "1"}, "relationships": {"1": "9b1f4c6c-eda1-4d17-aa65-859eec503a54"}}, "__type__": "1"}, "03378c35-f875-40d4-be33-a7d9de77b5ad": {"__data__": {"text": "\n\nInitialize staking pool\n\n```bash\naptos stake initialize-stake-owner \\\n  --initial-stake-amount 100000000000000 \\\n  --operator-address  \\\n  --voter-address  \\\n  --profile mainnet-owner\n```\n\n", "doc_id": "03378c35-f875-40d4-be33-a7d9de77b5ad", "embedding": null, "doc_hash": "381ba65589fe79975d3cd1c3b1c84c2f008e66e56c77cb9a7aa59aa493123677", "extra_info": null, "node_info": {"start": 0, "end": 191, "_node_type": "1"}, "relationships": {"1": "cccc3194-95a8-4d40-8b46-212d6d25623c"}}, "__type__": "1"}, "6eb9c33b-1d1c-4a60-8279-a1f43a40c733": {"__data__": {"text": "\n\nTransfer coin between accounts\n\n```bash\naptos account transfer \\\n  --account  \\\n  --amount  \\\n  --profile mainnet-owner\n```\n\n", "doc_id": "6eb9c33b-1d1c-4a60-8279-a1f43a40c733", "embedding": null, "doc_hash": "6bf750af83792c98a672418771356962060f36155ab9170e944ec4f46f368035", "extra_info": null, "node_info": {"start": 0, "end": 127, "_node_type": "1"}, "relationships": {"1": "93f79f1e-b4d4-4b53-8d96-31ec1acb6f90"}}, "__type__": "1"}, "9ef4516a-b40d-4fc5-9e77-7dd72545f194": {"__data__": {"text": "\n\nSwitch operator\n\n```bash\naptos stake set-operator \\\n  --operator-address  \\ \n  --profile mainnet-owner\n```\n\n", "doc_id": "9ef4516a-b40d-4fc5-9e77-7dd72545f194", "embedding": null, "doc_hash": "b25c342db3606e199d3edc69e8d35a5ca6be9f09bbdcd286fc943879be457540", "extra_info": null, "node_info": {"start": 0, "end": 110, "_node_type": "1"}, "relationships": {"1": "7d26710a-4300-4e6a-bc13-93d847be4023"}}, "__type__": "1"}, "48f7bee5-9a3f-4fe4-997d-6ca903ed1056": {"__data__": {"text": "\n\nSwitch voter\n\n```bash\naptos stake set-delegated-voter \\\n  --voter-address  \\ \n  --profile mainnet-owner\n```\n\n", "doc_id": "48f7bee5-9a3f-4fe4-997d-6ca903ed1056", "embedding": null, "doc_hash": "1692601ea16f022c3df531f2d5945e82a3d6c125910a9a59ffa3e2ed85011f5c", "extra_info": null, "node_info": {"start": 0, "end": 111, "_node_type": "1"}, "relationships": {"1": "920383ab-1808-481d-abb4-5f32152e7854"}}, "__type__": "1"}, "f59b49ee-1594-4adc-a604-8feb1409ed78": {"__data__": {"text": "\n\nAdd stake\n\n```bash\naptos stake add-stake \\\n  --amount  \\\n  --profile mainnet-owner\n```\n\n", "doc_id": "f59b49ee-1594-4adc-a604-8feb1409ed78", "embedding": null, "doc_hash": "9c04ad8eccfdd6f76cfcae6960e4e7573b7733cf73f988676052919c8fa3f0a4", "extra_info": null, "node_info": {"start": 0, "end": 90, "_node_type": "1"}, "relationships": {"1": "4bd5e4a5-f2e1-4749-946c-5cce718930c1"}}, "__type__": "1"}, "6b0381e5-33d9-4e7b-b28f-4e97c1d1fefc": {"__data__": {"text": "\n\nIncrease stake lockup\n\n```bash\naptos stake increase-lockup --profile mainnet-owner\n```\n\n", "doc_id": "6b0381e5-33d9-4e7b-b28f-4e97c1d1fefc", "embedding": null, "doc_hash": "b4e7101700d8f692968ad03f82f73dcd1fa77f1f58f2da02b261d617dfb640af", "extra_info": null, "node_info": {"start": 0, "end": 90, "_node_type": "1"}, "relationships": {"1": "9cb34304-3618-45e5-8b2a-b2f5eeef0d25"}}, "__type__": "1"}, "5c051288-cedf-41c3-9eee-9a2b6a52985b": {"__data__": {"text": "\n\nUnlock stake\n\n```bash\naptos stake unlock-stake \\\n  --amount  \\\n  --profile mainnet-owner\n```\n\n", "doc_id": "5c051288-cedf-41c3-9eee-9a2b6a52985b", "embedding": null, "doc_hash": "4ce74b4f6653ae7174455acfd646dddaa5a887c58fdaeaf665f60b5d9e5fb829", "extra_info": null, "node_info": {"start": 0, "end": 96, "_node_type": "1"}, "relationships": {"1": "8b0a18ed-414c-4ab9-b428-6859f2da2281"}}, "__type__": "1"}, "35922585-4c8e-4730-b94c-906e560ed9c4": {"__data__": {"text": "\n\nWithdraw stake\n\n```bash\naptos stake withdraw-stake \\\n  --amount  \\\n  --profile mainnet-owner\n```\n\n", "doc_id": "35922585-4c8e-4730-b94c-906e560ed9c4", "embedding": null, "doc_hash": "7fdc7992b34725e292d332978f5192013c023b305240cb4987c6a55d60ec8ea1", "extra_info": null, "node_info": {"start": 0, "end": 100, "_node_type": "1"}, "relationships": {"1": "022e1d47-4fc1-4bce-8ef5-6166c85ba220"}}, "__type__": "1"}, "60b49cdc-f1a3-471f-aa70-c38361cb9216": {"__data__": {"text": "\n\nPerform operator operations\n\n", "doc_id": "60b49cdc-f1a3-471f-aa70-c38361cb9216", "embedding": null, "doc_hash": "4d047df40cc280c3d0dcee89b70be22511003d2c8278aeff96f499c551bcfd26", "extra_info": null, "node_info": {"start": 0, "end": 31, "_node_type": "1"}, "relationships": {"1": "d68b242a-b075-4e1b-8d15-a9226d12c701"}}, "__type__": "1"}, "1faf470a-e633-4712-ab48-7b63ed602744": {"__data__": {"text": "\n\n1. Initialize Aptos CLI\n\n  ```bash\n  aptos init --profile mainnet-operator \\\n  --network mainnet \\\n  --private-key  \\\n  --skip-faucet\n  ```\n  \n:::tip\nThe `account_private_key` for the operator can be found in the `private-keys.yaml` file under `~/$WORKSPACE/keys` folder.\n:::\n\n", "doc_id": "1faf470a-e633-4712-ab48-7b63ed602744", "embedding": null, "doc_hash": "83311b1e52b8ea719726a51d3d249bfc2b5a0846e16229a7bde3798b7444ddb1", "extra_info": null, "node_info": {"start": 0, "end": 279, "_node_type": "1"}, "relationships": {"1": "2ced535a-9ebe-4a5b-828b-b23ff54b46c8"}}, "__type__": "1"}, "4f5beb71-30af-4890-9555-bd582beee8c1": {"__data__": {"text": "\n\n2. Check your validator account balance\n\nMake sure you have enough APT to pay for gas. You can check for this either on the Aptos Explorer or using the CLI:\n\n- On the Aptos Explorer `https://explorer.aptoslabs.com/account/?network=Mainnet`, or \n- Use the CLI:\n\n  ```bash\n  aptos account list --profile mainnet-operator\n  ```\n    \nThis will show you the coin balance you have in the validator account. You will see an output like below:\n    \n```json\n\"coin\": {\n    \"value\": \"5000\"\n  }\n```\n\n:::tip Already in validator set? Skip to Step 6\nIf you know you are already in the validator set, then skip steps 3, 4, and 5 and go directly to step 6 to confirm it.\n:::\n\n", "doc_id": "4f5beb71-30af-4890-9555-bd582beee8c1", "embedding": null, "doc_hash": "4af0ba89a7724c83cb35f4c7c0df9c3d6e4463d2cc2804ad907b9aafdce5adb8", "extra_info": null, "node_info": {"start": 0, "end": 662, "_node_type": "1"}, "relationships": {"1": "bdd52db6-e7eb-45f3-be37-62e074ad3fd3"}}, "__type__": "1"}, "e52b7b30-2492-4e74-a94a-9a509aa4bc43": {"__data__": {"text": "\n\n3. Update validator network addresses on-chain\n\n```bash\naptos node update-validator-network-addresses  \\\n  --pool-address  \\\n  --operator-config-file ~/$WORKSPACE/$USERNAME/operator.yaml \\\n  --profile mainnet-operator\n```\n\n:::tip Important notes\nThe network address updates and the consensus key rotation will be applied only at the end of the current epoch. Note that the validator need not leave the validator set to make these updates. You can run the commands for address and key changes. For the remaining duration of the current epoch your validator will still use the old key and addresses but when the epoch ends it will switch to the new key and addresses.\n:::\n\n", "doc_id": "e52b7b30-2492-4e74-a94a-9a509aa4bc43", "embedding": null, "doc_hash": "5bf39fb19ef3ca0eae79986ede7820cfe8d7377358c9e0e032990dcc102af830", "extra_info": null, "node_info": {"start": 0, "end": 673, "_node_type": "1"}, "relationships": {"1": "3e533497-8316-4c4d-a004-74cdc51e41d2"}}, "__type__": "1"}, "e1ea34e4-b604-443e-b9ee-105d81cf08fe": {"__data__": {"text": "\n\n4. Rotate the validator consensus key on-chain\n\n```bash\naptos node update-consensus-key  \\\n  --pool-address  \\\n  --operator-config-file ~/$WORKSPACE/$USERNAME/operator.yaml \\\n  --profile mainnet-operator\n```\n\n", "doc_id": "e1ea34e4-b604-443e-b9ee-105d81cf08fe", "embedding": null, "doc_hash": "a5cd3e6f5a31efdb5d932e4b51870e2ec8d021043798b5a9e21882a291458a89", "extra_info": null, "node_info": {"start": 0, "end": 211, "_node_type": "1"}, "relationships": {"1": "b110cf64-198e-4f50-8593-6a7e4d1997b8"}}, "__type__": "1"}, "7c5263d7-34e5-4e0e-9468-fcafb4947bf8": {"__data__": {"text": "\n\n5. Join the validator set\n\n```bash\naptos node join-validator-set \\\n  --pool-address  \\\n  --profile mainnet-operator\n```\n\nThe validator set is updated at every epoch change. You will see your validator node joining the validator set only in the next epoch. Both validator and validator fullnode will start syncing once your validator is in the validator set.\n\n:::tip When is next epoch?\nYou can see it on the Aptos Explorer or by running the command `aptos node get-stake-pool` as shown in Checking your stake pool information.\n:::\n\n", "doc_id": "7c5263d7-34e5-4e0e-9468-fcafb4947bf8", "embedding": null, "doc_hash": "6cba1dfe93859fec2638cc2adf31573636799656d439d8878d7d13df96de040c", "extra_info": null, "node_info": {"start": 0, "end": 534, "_node_type": "1"}, "relationships": {"1": "bf337b4b-b75e-424e-a8bc-01878f9b16c9"}}, "__type__": "1"}, "9331480f-9d73-4883-a521-d105d3df326b": {"__data__": {"text": "\n\n6. Check the validator set\n   \nWhen you join the validator set, your validator node will be in \"Pending Active\" state until the next epoch occurs. **During this time you might see errors like \"No connected AptosNet peers\". This is normal.** Run the below command to look for your validator in the \"pending_active\" list.\n\n```bash\naptos node show-validator-set --profile mainnet-operator | jq -r '.Result.pending_active' | grep \n```\n\nWhen the next epoch happens, the node will be moved into \"active_validators\" list.  Run the below command to see your validator in the \"active_validators\" list:\n\n```bash\naptos node show-validator-set --profile mainnet-operator | jq -r '.Result.active_validators' | grep \n```\n\n", "doc_id": "9331480f-9d73-4883-a521-d105d3df326b", "embedding": null, "doc_hash": "b44e81b35cd6d11fb4c735424bd073847e5d868a84e1ec92b65ba88cd8ea5503", "extra_info": null, "node_info": {"start": 0, "end": 710, "_node_type": "1"}, "relationships": {"1": "c0e881fb-013c-4036-bcd5-4d700ac547a9"}}, "__type__": "1"}, "c4582dd8-9f61-4e94-b1fc-cd44e36489b6": {"__data__": {"text": "\n\nChecking your stake pool information\n\n:::tip How validation works\nBefore you proceed, see Validation on the Aptos blockchain for a brief overview.\n:::\n\nTo check the details of your stake pool, run the below CLI command with the `get-stake-pool` option by providing the `--owner-address` and `--url` fields. \n\nThe below command is for an example owner address `e7be097a90c18f6bdd53efe0e74bf34393cac2f0ae941523ea196a47b6859edb`. \n\n:::tip\nFor testnet or devnet `--url` field values, see Aptos Blockchain Deployments.\n:::\n\n```bash\naptos node get-stake-pool \\\n  --owner-address e7be097a90c18f6bdd53efe0e74bf34393cac2f0ae941523ea196a47b6859edb \\\n  --profile mainnet-operator\n```\n\nExample output:\n\n```json\n{\n  \"Result\": [\n    {\n      \"state\": \"Active\", \n      \"pool_address\": \"25c3482850a188d8aa6edc5751846e1226a27863643f5ebc52be4f7d822264e3\",\n      \"operator_address\": \"3bec5a529b023449dfc86e9a6b5b51bf75cec4a62bf21c15bbbef08a75f7038f\",\n      \"voter_address\": \"3bec5a529b023449dfc86e9a6b5b51bf75cec4a62bf21c15bbbef08a75f7038f\",\n      \"pool_type\": \"StakingContract\",\n      \"total_stake\": 100525929489123,\n      \"commission_percentage\": 10,\n      \"commission_not_yet_unlocked\": 15949746439,\n      \"lockup_expiration_utc_time\": \"2022-10-07T07:12:55Z\",\n      \"consensus_public_key\": \"0xb3a7ac1491b0165f08f136c2b02739846b6610084984d5298c2983c4f8e5553284bffca2e3fe2b99167da82717501732\",\n      \"validator_network_addresses\": [\n        \"/ip4/35.91.145.164/tcp/6180/noise-ik/0xeddf05470520af91b847f353dd804a04399e1213d130a4260e813527f2c49262/handshake/0\"\n      ],\n      \"fullnode_network_addresses\": [],\n      \"epoch_info\": {\n        \"epoch\": 594,\n        \"epoch_interval_secs\": 3600,\n        \"current_epoch_start_time\": {\n          \"unix_time\": 1665087178789891,\n          \"utc_time\": \"2022-10-06T20:12:58.789891Z\"\n        },\n        \"next_epoch_start_time\": {\n          \"unix_time\": 1665090778789891,\n          \"utc_time\": \"2022-10-06T21:12:58.789891Z\"\n        }\n      }\n    }\n  ]\n}\n```\n\n", "doc_id": "c4582dd8-9f61-4e94-b1fc-cd44e36489b6", "embedding": null, "doc_hash": "fa2ac63e8927d7fcd4a0e7757314d1118a60143ee86510379e40fad9c56c5d18", "extra_info": null, "node_info": {"start": 0, "end": 1977, "_node_type": "1"}, "relationships": {"1": "db640c5a-8af1-462b-8b15-edea96b9f266"}}, "__type__": "1"}, "010d5821-2029-466c-be89-9a107ef92bf4": {"__data__": {"text": "\n\nDescription of output fields\n\n**state**\n- \"Active\": Validator is already in the validator set and proposing.\n- \"Pending_active\": Validator will be added to the validator set in the next epoch. **Do not try to join the validator set again before the arrival of next epoch, or else you will receive an error. **\n\n**pool_address**\n- Use this \"pool_address\" (not the operator address) in you `validator.yaml` file. If you mistakenly used the operator address, you will receive the message: \"Validator not in validator set\". \n\n**commission_percentage**\n- This can be set only by the stake pool owner. Operator receives the \"commission_percentage\" of the generated staking rewards. If you request the commission (you can do so by running the command `aptos stake request-commission`), then at the end of the `lockup_expiration_utc_time` the commission part of the rewards will go to the operator address while the rest will stay in the stake pool and belong to the owner. Here \"the commission part of the rewards\" means the value of **commission_not_yet_unlocked**. \n\n  For example, in a scenario with a lock up of one month, you call `aptos stake request-commission` every month. This will pay out the commission that was accrued during the previous month but only when unlocked at the end of the previous month. Regardless of how often you run `aptos stake request-commission` during the month, the commission is only paid out upon the completion of `lockup_expiration_utc_time`.\n\n  :::tip Compounding\n  Note that if you do not request commission for multiple months, your commission will accrue more due to compounding of the **commission_percentage** during these months.\n  :::\n\n\n**commission_not_yet_unlocked**\n- The amount of commission (amount of APT) that is not yet unlocked. It will be unlocked at the `lockup_expiration_utc_time`. This is the total commission amount available to the operator, i.e., the staking rewards **only** to the operator. This does not include the staking rewards to the owner.\n\n**lockup_expiration_utc_time**\n- The date when the commission will unlock. However, this unlocked commission will not be auto-disbursed. It will only disburse when the command `aptos stake request-commission` is called again.\n\n**epoch_info**\n- Use the Epoch Converter to convert the `unix_time` into human readable time. \n\n", "doc_id": "010d5821-2029-466c-be89-9a107ef92bf4", "embedding": null, "doc_hash": "02106213cff755ce40ca30d473d5536aeb99beb57f02066727762c73c4c4c6bc", "extra_info": null, "node_info": {"start": 0, "end": 2333, "_node_type": "1"}, "relationships": {"1": "fc80591b-64d8-4036-a7ab-9e4058684158"}}, "__type__": "1"}, "ddd5b546-976e-4bc3-bede-b78b662c819e": {"__data__": {"text": "\n\nRequesting commission\n\nEither an owner or an operator can request commission. You can request commission at the end of a lockup period, i.e., at the end of **lockup_expiration_utc_time**, by running the `aptos stake request-commission` command. Make sure to provide the operator and the owner addresses. See an example command below:\n\n```bash\naptos stake request-commission \\\n  --operator-address 0x3bec5a529b023449dfc86e9a6b5b51bf75cec4a62bf21c15bbbef08a75f7038f \\\n  --owner-address 0xe7be097a90c18f6bdd53efe0e74bf34393cac2f0ae941523ea196a47b6859edb \\\n  --profile mainnet-operator\n```\n\nIf you run the `aptos stake request-commission` command before the end of the the lockup expiration, the command will initiate unlock for any locked commission earned up until that moment in time.\n\nSee example below:\n\nMonth 1 Day 29, you call the command, it would initiate unlock for 29 days worth of commission.\n\nMonth 2, Day 29, if you call the command again, it would disburse the fully unlocked commission from previous month (29 days worth), and initiate commission unlock for Month 1 Day 30 + Month 2 Day 1-29 (30 days worth).\n\nMonth 3, Day 29, if you call the commission again, 30 days of commission would be disbursed, and the a new batch of commission would initiate unlock.\n\nYou can call the command multiple times, and the amount you receive depends on the day when you requested commission unlock previously.\n\n\nCommission is unlocked when `request-commission` is called, the staker unlocks stake, or the staker switches operator. The commission will not be withdrawable until the end of the lockup period. Unlocked commission will continue to earn rewards until the lockup period expires.\n\n\n", "doc_id": "ddd5b546-976e-4bc3-bede-b78b662c819e", "embedding": null, "doc_hash": "8e969214ecd4761b9c636024a8ad2a41b02adc1f3ce14b70529f85aea6fac968", "extra_info": null, "node_info": {"start": 0, "end": 1693, "_node_type": "1"}, "relationships": {"1": "b1ae1876-157a-47a4-8efc-f90c7e17891c"}}, "__type__": "1"}, "7f4ed12b-88d0-40b6-aa48-63f28a1647b2": {"__data__": {"text": "\n\nChecking your validator performance\n\nTo see your validator performance in the current and past epochs and the rewards earned, run the below command. The output will show the validator's performance in block proposals, and in governance voting and governance proposals. Default values are used in the below command. Type `aptos node get-performance --help` to see default values used.\n\n```bash\naptos node get-performance \\ \n  --pool-address  \\\n  --profile mainnet-operator\n```\n\nExample output:\n\n```json\n{\n  \"Result\": {\n    \"current_epoch_successful_proposals\": 56,\n    \"current_epoch_failed_proposals\": 0,\n    \"previous_epoch_rewards\": [\n      \"12312716242\",\n      \"12272043711\",\n      \"12312912674\",\n      \"12313011054\",\n      \"12313109435\",\n      \"12180092056\",\n      \"12313305136\",\n      \"12313403519\",\n      \"12313501903\",\n      \"12313600288\"\n    ],\n    \"epoch_info\": {\n      \"epoch\": 68,\n      \"epoch_interval\": 3600000000,\n      \"last_epoch_start_time\": {\n        \"unix_time\": 1665074662417326,\n        \"utc_time\": \"2022-10-06T16:44:22.417326Z\",\n        \"local_time\": \"Thu Oct  6 16:44:22 2022\"\n      },\n      \"next_epoch_start_time\": {\n        \"unix_time\": 1665078262417326,\n        \"utc_time\": \"2022-10-06T17:44:22.417326Z\",\n        \"local_time\": \"Thu Oct  6 17:44:22 2022\"\n      }\n    }\n  }\n}\n```\n\n", "doc_id": "7f4ed12b-88d0-40b6-aa48-63f28a1647b2", "embedding": null, "doc_hash": "76c0f0edfd0db8483b832b311a753011969996ec9ed2c3bb34870fa2bb4d0a15", "extra_info": null, "node_info": {"start": 0, "end": 1308, "_node_type": "1"}, "relationships": {"1": "600f4a19-c25d-4702-a3ac-ddfe5eec293e"}}, "__type__": "1"}, "ef6c9e02-31bb-4ec5-958d-129d7c2740fd": {"__data__": {"text": "\n\nDescription of fields\n\n**current_epoch_successful_proposals**\n- Successful leader-validator proposals during the current epoch. Also see Validation on the Aptos blockchain for the distinction between leader-validator and the voter-validator.\n\n**previous_epoch_rewards**\n- An ordered list of rewards earned (APT amounts) for the previous 10 epochs, starting with the 10 epoch in the past. In the above example, a reward of 12312716242 APT was earned 10 epochs past and a reward of 12313600288 APT was earned in the most recent epoch. If a reward is 0 for any epoch, then:\n  - Either the validator was not part of the validator set in that epoch (could have been in either inactive or pending_active validator state), or\n  - The validator missed all the leader proposals.\n\n", "doc_id": "ef6c9e02-31bb-4ec5-958d-129d7c2740fd", "embedding": null, "doc_hash": "735519cba3e07e2eaddac76933000670cdfcbae44cf91293929cddbfa8471129", "extra_info": null, "node_info": {"start": 0, "end": 773, "_node_type": "1"}, "relationships": {"1": "800936e6-81d3-4667-acb5-b4c2484426ab"}}, "__type__": "1"}, "9285de61-fcc1-4026-be54-fe146db8bbab": {"__data__": {"text": "\n\nChecking the performance for all epochs\n\nTo check the performance of all the epochs since the genesis, run the below command. You can filter the results for your pool address with `grep`, as shown below:\n\n```bash\naptos node analyze-validator-performance \\\n  --analyze-mode detailed-epoch-table \\\n  --profile mainnet-operator \\\n  --start-epoch 0 | grep \n```\n\n", "doc_id": "9285de61-fcc1-4026-be54-fe146db8bbab", "embedding": null, "doc_hash": "9a76eaaec7681f8676449335c192368c2b7606ffaf750cf3c11cb912fdad75d9", "extra_info": null, "node_info": {"start": 0, "end": 360, "_node_type": "1"}, "relationships": {"1": "cbb09a51-e2c8-4653-a587-f9094bce6319"}}, "__type__": "1"}, "1c89744b-02e1-4f67-bad0-5f17d214ecde": {"__data__": {"text": "\n\nTracking rewards\n\n`DistributeEvent` is emitted when there is a transfer from staking_contract to the operator or staker (owner). Rewards can be tracked either by listening to `DistributeEvent` or by using the View functon to call `staking_contract_amounts`. This will return `accumulated_rewards` and `commission_amount`.\n\n", "doc_id": "1c89744b-02e1-4f67-bad0-5f17d214ecde", "embedding": null, "doc_hash": "0bbcb23ce6c36d2af2670ae76b9202ee01c1751bc01cb2741d2376455c61752b", "extra_info": null, "node_info": {"start": 0, "end": 325, "_node_type": "1"}, "relationships": {"1": "ec6db6ed-b4c3-4981-a896-ce26f0d35ee4"}}, "__type__": "1"}, "e391ebdd-3d65-48a1-861c-65776bdff53f": {"__data__": {"text": "\n\nStaking\n\n:::tip Consensus\nWe strongly recommend that you read the consensus section of Aptos Blockchain Deep Dive before proceeding further. \n:::\n\nIn a distributed system like blockchain, executing a transaction is distinct from updating the state of the ledger and persisting the results in storage. An agreement, i.e., consensus, must be reached by a quorum of validators on the ordering of transactions and their execution results before these results are persisted in storage and the state of the ledger is updated. \n\nAnyone can participate in the Aptos consensus process, if they stake sufficient utility coin, i.e., place their utility coin into escrow. To encourage validators to participate in the consensus process, each validator's vote weight is proportional to the amount of validator's stake. In exchange, the validator is rewarded proportionally to the amount staked. Hence, the performance of the blockchain is aligned with the validator's interest, i.e., rewards.  \n\n:::note \nCurrently, slashing is not implemented.\n:::\n\nThe current on-chain data can be found in `staking_config::StakingConfig`. The configuration set is defined in `staking_config.move`.\n\nThe rest of this document presents how staking works on the Aptos blockchain. See Supporting documentation at the bottom for related resources.\n\n", "doc_id": "e391ebdd-3d65-48a1-861c-65776bdff53f", "embedding": null, "doc_hash": "7c632ac15a3c816e4f46860c35dd673281eace47603aadc57e0bbb7596699508", "extra_info": null, "node_info": {"start": 0, "end": 1319, "_node_type": "1"}, "relationships": {"1": "c3338335-2ade-40f6-92b9-b5aa56433aa4"}}, "__type__": "1"}, "06f05b4d-a4eb-4587-94ab-54854d624f50": {"__data__": {"text": "\n\nStaking on the Aptos blockchain\n\n<!---\nBelow is a summary flow diagram of how staking on the Aptos blockchain works. The sections following the summary describe it in detail. \n\n<ThemedImage\n  alt=\"Staking Flow\"\n  sources={{\n    light: useBaseUrl('/img/docs/staking-light.svg'),\n    dark: useBaseUrl('/img/docs/staking-dark.svg'),\n  }}\n/> --->\n\nThe Aptos staking module defines a capability that represents ownership. \n\n:::tip Ownership\nSee the `OwnerCapability` defined in stake.move.\n:::\n\nThe `OwnerCapability` resource can be used to control the stake pool. Three personas are supported: \n- Owner\n- Operator\n- Voter\n\nUsing this owner-operator-voter model, a custodian can assume the owner persona and stake on the Aptos blockchain and participate in the Aptos governance. This model allows delegations and staking services to be built as it separates the account that is control of the funds from the other accounts (operator, voter), hence allows secure delegations of responsibilities. \n\nThis section describes how this works, using Bob and Alice in the example. \n\n", "doc_id": "06f05b4d-a4eb-4587-94ab-54854d624f50", "embedding": null, "doc_hash": "3684c002c273b641c4aaaf29d837e5a7009e4b28579818204a79cedfa792664e", "extra_info": null, "node_info": {"start": 0, "end": 1071, "_node_type": "1"}, "relationships": {"1": "b9ab4fb9-f341-47df-9d86-42a6f565a1ca"}}, "__type__": "1"}, "2a8e3297-b022-496b-ba46-bd734b9a133a": {"__data__": {"text": "\n\nOwner\n\nThe owner is the owner of the funds. For example, Bob creates an account on the Aptos blockchain. Now Bob has the `OwnerCapability` resource. Bob can assign his account\u2019s operator address to the account of Alice, a trusted node operator, to appoint Alice as a validator.\n\nAs an owner:\n\n- Bob owns the funds that will be used for staking.\n- Only Bob can add, unlock or withdraw funds.\n- Only Bob can extend the lockup period.\n- Bob can change the node operator Alice to some other node operator anytime Bob wishes to do so.\n- Bob can set the operator commission percentage.\n- The reward will be deposited into Bob's (owner's) account.\n\n", "doc_id": "2a8e3297-b022-496b-ba46-bd734b9a133a", "embedding": null, "doc_hash": "0d31a7193b9e236f14e5263bbc6d030a405e10e3244ff320d810459e63fb4251", "extra_info": null, "node_info": {"start": 0, "end": 644, "_node_type": "1"}, "relationships": {"1": "0131f74a-7f00-454d-b249-edb01211b270"}}, "__type__": "1"}, "816f5c2e-1389-41a9-8988-751c161ceb71": {"__data__": {"text": "\n\nOperator\n\nA node operator is assigned by the fund owner to run the validator node and receives commission as set by the owner. The two personas, the owner and the operator, can be two separate entities or the same. For example, Alice (operator) runs the validator node, operating at the behest of Bob, the fund owner.\n\nAs an operator:\n\n- Alice has permissions only to join or leave the validator set.\n- As a validator, Alice will perform the validating function.\n- Alice has the permissions to change the consensus key and network addresses. The consensus key is used by Alice to participate in the validator consensus process, i.e., to vote and propose a block. Alice is allowed to change (\"rotate\") this key in case this key is compromised.\n- However, Alice cannot move funds (unless Alice is the owner, i.e., Alice has the `OwnerCapability` resource).\n- The operator commission is deducted from the staker (owner) rewards and deposited into the operator account.\n\n", "doc_id": "816f5c2e-1389-41a9-8988-751c161ceb71", "embedding": null, "doc_hash": "24f357bf6b2b0026d668a5b8b9b8e804f6e08059951672d4144892d1283bfd8a", "extra_info": null, "node_info": {"start": 0, "end": 969, "_node_type": "1"}, "relationships": {"1": "5f864fa1-42ae-4deb-b41d-0f810e1abb04"}}, "__type__": "1"}, "4f213565-c113-43d0-9b21-64a42df79b0b": {"__data__": {"text": "\n\nVoter\n\nAn owner can designate a voter. This enables the voter to participate in governance. The voter  will use the voter key to sign the governance votes in the transactions.\n\n:::tip Governance\nThis document describes staking. See Governance for how to participate in the Aptos on-chain governance using the owner-voter model.\n:::\n\n", "doc_id": "4f213565-c113-43d0-9b21-64a42df79b0b", "embedding": null, "doc_hash": "fd4454aa74a3d61e37e47d91c23142ccd57b76ed05ea8db38de66d7e445d19d0", "extra_info": null, "node_info": {"start": 0, "end": 335, "_node_type": "1"}, "relationships": {"1": "8410bc92-0872-44d1-a21f-e53a0a8084fd"}}, "__type__": "1"}, "2591b56e-9a75-442e-b921-fd290e32e4ea": {"__data__": {"text": "\n\nValidation on the Aptos blockchain\n\nThroughout the duration of an epoch, the following flow of events occurs several times (thousands of times):\n\n- A validator leader is selected by a deterministic formula based on the validator reputation determined by validator's performance (including whether the validator has voted in the past or not) and stake. **This leader selection is not done by voting.**\n- The selected leader sends a proposal containing the collected quorum votes of the previous proposal and the leader's proposed order of transactions for the new block. \n- All the validators from the validator set will vote on the leader's proposal for the new block. Once consensus is reached, the block can be finalized. Hence, the actual list of votes to achieve consensus is a subset of all the validators in the validator set. This leader validator is rewarded. **Rewards are given only to the leader validator, not to the voter validators.**\n- The above flow repeats with the selection of another validator leader and repeating the steps for the next new block. Rewards are given at the end of the epoch. \n\n", "doc_id": "2591b56e-9a75-442e-b921-fd290e32e4ea", "embedding": null, "doc_hash": "e43a1dcd209a59d16b742493eea3f8578a714b1cb92ea113e09a079362ba8c6a", "extra_info": null, "node_info": {"start": 0, "end": 1116, "_node_type": "1"}, "relationships": {"1": "bbe8c3a1-9065-46a8-b0ac-7c70a9c57093"}}, "__type__": "1"}, "7287b834-279f-479b-b3cc-ea6d0b686bb8": {"__data__": {"text": "\n\nValidator state and stake state\n\nStates are defined for a validator and the stake. \n\n- **Validator state:** A validator can be in any one of these four states. Moreover, the validator can go from inactive (not tracked in the validator set anywhere) state to any one of the other three states: \n  - inactive\n  - pending_active.\n  - active.\n  - pending_inactive.\n- **Stake state:** A validator in pending_inactive or active state, can have their stake in either of these four states: \n  - inactive.\n  - pending_active.\n  - active.\n  - pending_inactive. \n  \n  These stake states are applicable for the existing validators in the validator set adding or removing their stake.\n\n", "doc_id": "7287b834-279f-479b-b3cc-ea6d0b686bb8", "embedding": null, "doc_hash": "36d23eb52b0d95be66e3114973e1f581b1b2564c6158d0e31f78823dc65c47a9", "extra_info": null, "node_info": {"start": 0, "end": 675, "_node_type": "1"}, "relationships": {"1": "dfc35ed4-8b1f-4070-8587-aecf08e752b5"}}, "__type__": "1"}, "f7bb44a9-b6e8-4def-96b1-13becac0d3cb": {"__data__": {"text": "\n\nValidator states\n\n<ThemedImage\nalt=\"Signed Transaction Flow\"\nsources={{\n    light: useBaseUrl('/img/docs/validator-state.svg'),\n    dark: useBaseUrl('/img/docs/validator-state-dark.svg'),\n  }}\n/>\n\nThere are two edge cases to call out:\n1. If a validator's stake drops below the required minimum, that validator will be moved from active state directly to the inactive state during an epoch change. This happens only during an epoch change.\n2. Aptos governance can also directly remove validators from the active set. **Note that governance proposals will always trigger an epoch change.**\n\n", "doc_id": "f7bb44a9-b6e8-4def-96b1-13becac0d3cb", "embedding": null, "doc_hash": "7a5487fc45c6adcca7346b5834eec419f5a6df61989a3b1df5e2811cf2f6cd04", "extra_info": null, "node_info": {"start": 0, "end": 591, "_node_type": "1"}, "relationships": {"1": "3f847a75-c249-4a09-836a-63c53edfb0b8"}}, "__type__": "1"}, "6149579e-d50c-4156-8149-695d2f0da6cf": {"__data__": {"text": "\n\nStake state\n\nThe state of stake has more granularity than that of the validator; additional stake can be added and a portion of stake removed from an active validator.\n\n<ThemedImage\nalt=\"Signed Transaction Flow\"\nsources={{\n    light: useBaseUrl('/img/docs/stake-state.svg'),\n    dark: useBaseUrl('/img/docs/stake-state-dark.svg'),\n  }}\n/>\n\n", "doc_id": "6149579e-d50c-4156-8149-695d2f0da6cf", "embedding": null, "doc_hash": "b888215209b20f411f4563abfb0fb3138d74039f56e3767dce97632bd838fe89", "extra_info": null, "node_info": {"start": 0, "end": 342, "_node_type": "1"}, "relationships": {"1": "3f54e163-e4bc-4955-9267-478dd82b4952"}}, "__type__": "1"}, "de1536c8-5099-46b2-8b14-f2308cfd15be": {"__data__": {"text": "\n\nValidator ruleset\n\nThe below ruleset is applicable during the changes of state:\n\n- Voting power can change (increase or decrease) only on epoch boundary.\n- A validator\u2019s consensus key and the validator and validator fullnode network addresses can change only on epoch boundary.\n- Pending inactive stake cannot be moved into inactive (and thus withdrawable) until before lockup expires.\n- No validators in the active validator set can have their stake below the minimum required stake.\n\n", "doc_id": "de1536c8-5099-46b2-8b14-f2308cfd15be", "embedding": null, "doc_hash": "9493b311ecf7bbb2b364b59ff69c0a83dda7767f3f0007aa3c5544d5c58c6eec", "extra_info": null, "node_info": {"start": 0, "end": 488, "_node_type": "1"}, "relationships": {"1": "c3f1d4fa-4236-4854-9c0e-ffb05e47ab88"}}, "__type__": "1"}, "51bffc9e-a39f-49fd-8ce8-7b829707e35e": {"__data__": {"text": "\n\nValidator flow\n\n:::tip Staking pool operations\nSee Staking pool operations for the correct sequence of commands to run for the below flow.\n:::\n\n1. Owner initializes the stake pool with `aptos stake initialize-stake-owner`.\n2. When the owner is ready to deposit the stake (or have funds assigned by a staking service in exchange for ownership capability), owner calls `aptos stake add-stake`.\n3. When the validator node is ready, the operator can call `aptos node join-validator-set` to join the active validator set. Changes will be effective in the next epoch.\n4. Validator validates (proposes blocks as a leader-validator) and gains rewards. The stake will automatically be locked up for a fixed duration (set by governance) and automatically renewed at expiration.\n5. At any point, if the operator wants to update the consensus key or validator network addresses, they can call `aptos node update-consensus-key` or `aptos node update-validator-network-addresses`. Similar to changes to stake, the changes to consensus key or validator network addresses are only effective in the next epoch.\n6. Validator can request to unlock their stake at any time. However, their stake will only become withdrawable when their current lockup expires. This can be at most as long as the fixed lockup duration.\n7. After exiting, the validator can either explicitly leave the validator set by calling `aptos node leave-validator-set` or if their stake drops below the min required, they would get removed at the end of the epoch.\n8. Validator can always rejoin the validator set by going through steps 2-3 again.\n9. An owner can always switch operators by calling `aptos stake set-operator`.\n10. An owner can always switch designated voter by calling `aptos stake set-delegated-voter`.\n\n", "doc_id": "51bffc9e-a39f-49fd-8ce8-7b829707e35e", "embedding": null, "doc_hash": "048389334943d3b09edafda52df337a4c972ede183be9d24b6e8cba9cef31caa", "extra_info": null, "node_info": {"start": 0, "end": 1775, "_node_type": "1"}, "relationships": {"1": "4982be47-220e-4c3a-a4ab-7c228b5f64dc"}}, "__type__": "1"}, "b9717575-b758-44fe-ba2f-a8350a188b9e": {"__data__": {"text": "\n\nJoining the validator set\n\nParticipating as a validator node on the Aptos network works like this: \n\n1. Operator runs a validator node and configures the on-chain validator network addresses and rotates the consensus key. \n2. Owner deposits her Aptos coins funds as stake, or have funds assigned by a staking service. The stake must be at least the minimum amount required.\n3. **The validator node cannot sync until the stake pool becomes active.**\n4. Operator validates and gains rewards. \n5. The staked pool is automatically be locked up for a fixed duration (set by the Aptos governance) and will be automatically renewed at expiration. You cannot withdraw any of your staked amount until your lockup period expires. See stake.move#L728.\n6.  Operator must wait until the new epoch starts before their validator becomes active.\n\n:::tip Joining the validator set\nFor step-by-step instructions on how to join the validator set, see: Joining Validator Set.\n:::\n\n", "doc_id": "b9717575-b758-44fe-ba2f-a8350a188b9e", "embedding": null, "doc_hash": "2f34395793bb7f2902e6e00698126c28e012d55c9bf21b5a841305a433cef90d", "extra_info": null, "node_info": {"start": 0, "end": 963, "_node_type": "1"}, "relationships": {"1": "fff8be58-a74a-489e-996e-aa329f897d9b"}}, "__type__": "1"}, "5a0813ef-8116-4b6a-92c5-e27a7f092b24": {"__data__": {"text": "\n\nMinimum and maximum stake\n\nYou must stake the required minimum amount to join the validator set. Moreover, you can only stake up to the maximum stake amount. The current required minimum for staking is 1M APT tokens and the maximum is 50M APT tokens.\n\nIf at any time after joining the validator set, your current staked amount exceeds the maximum allowed stake (for example as the rewards are added to your staked amount), then your voting power and the rewards will be calculated only using the maximum allowed stake amount, and not your current staked amount. \n\nThe owner can withdraw part of the stake and leave their balance below the required minimum. In such case, their stake pool will be removed from the validator set when the next epoch starts.\n\n", "doc_id": "5a0813ef-8116-4b6a-92c5-e27a7f092b24", "embedding": null, "doc_hash": "3b7075554b5179dca2c0575483c23f663e16a391709e276d9a3f8b55a11cabc9", "extra_info": null, "node_info": {"start": 0, "end": 758, "_node_type": "1"}, "relationships": {"1": "2d192661-f6ff-4b76-9058-34bdf05761b2"}}, "__type__": "1"}, "be46c27c-cdbd-449d-b281-76aa03e332ed": {"__data__": {"text": "\n\nAutomatic lockup duration\n\nWhen you join the validator set, your stake will automatically be locked up for a fixed duration that is set by the Aptos governance. \n\n", "doc_id": "be46c27c-cdbd-449d-b281-76aa03e332ed", "embedding": null, "doc_hash": "891b565717f8ccc1e3cb843c184cd3147521d7f6b69dd0e28d5a75a05712c480", "extra_info": null, "node_info": {"start": 0, "end": 165, "_node_type": "1"}, "relationships": {"1": "482359b2-b025-47b5-b353-c9026b88fbdc"}}, "__type__": "1"}, "414bb0ea-65f3-4078-a25d-77c545a1ef4b": {"__data__": {"text": "\n\nAutomatic lockup renewal\n\nWhen your lockup period expires, it will be automatically renewed, so that you can continue to validate and receive the rewards. \n\n", "doc_id": "414bb0ea-65f3-4078-a25d-77c545a1ef4b", "embedding": null, "doc_hash": "c2871b4cf3d03122d1f078728baee98de4098e7e993a4e2f0bb765b8f7e7853f", "extra_info": null, "node_info": {"start": 0, "end": 159, "_node_type": "1"}, "relationships": {"1": "ef8c5f66-058e-46d2-b1dc-661522aabf56"}}, "__type__": "1"}, "2283d7b1-e61c-4653-9aea-2f271a563a3e": {"__data__": {"text": "\n\nUnlocking your stake\n\nYou can request to unlock your stake at any time. However, your stake will only become withdrawable when your current lockup expires. This can be at most as long as the fixed lockup duration. You will continue earning rewards on your stake until it becomes withdrawable. \n\nThe principal amount is updated when any of the following actions occur:\n1. Operator requests commission unlock\n2. Staker (owner) withdraws funds\n3. Staker (owner) switches operators\n\nWhen the staker unlocks stake, this also triggers a commission unlock. The full commission amount for any staking rewards earned is unlocked. This is not proportional to the unlock stake amount. Commission is distributed to the operator after the lockup ends when `request commission` is called a second time or when staker withdraws (distributes) the unlocked stake. \n\n", "doc_id": "2283d7b1-e61c-4653-9aea-2f271a563a3e", "embedding": null, "doc_hash": "25a2c0481c42e8ea5a3beb918799126aa3f6d29a3036382fc9a5a6099f8f12bc", "extra_info": null, "node_info": {"start": 0, "end": 851, "_node_type": "1"}, "relationships": {"1": "33860fb8-8309-4a28-a3cc-768688d604a9"}}, "__type__": "1"}, "be4bfbfb-280a-438b-b0f0-dbcda1b39d2f": {"__data__": {"text": "\n\nResetting the lockup\n\nWhen the lockup period expires, it is automatically renewed by the network. However, the owner can explicitly reset the lockup. \n\n:::tip Set by the governance\n\nThe lockup duration is decided by the Aptos governance, i.e., by the covenants that the Aptos community members vote on, and not by any special entity like the Aptos Labs. \n:::\n\n", "doc_id": "be4bfbfb-280a-438b-b0f0-dbcda1b39d2f", "embedding": null, "doc_hash": "806d7d99e9d8a0370cd7068ec6c245d2b8b4dfb697caf6172af601df9003dcd3", "extra_info": null, "node_info": {"start": 0, "end": 362, "_node_type": "1"}, "relationships": {"1": "aa412820-3185-45fa-bc25-37fdc5b92838"}}, "__type__": "1"}, "0f9670d8-480f-41e8-9571-4e94679ed520": {"__data__": {"text": "\n\nEpoch\n\nAn epoch in the Aptos blockchain is defined as a duration of time, in seconds, during which a number of blocks are voted on by the validators, the validator set is updated, and the rewards are distributed to the validators. \n\n:::tip Epoch on Mainnet\nThe Aptos mainnet epoch is set as 7200 seconds (two hours).\n:::\n\n", "doc_id": "0f9670d8-480f-41e8-9571-4e94679ed520", "embedding": null, "doc_hash": "2080f87ddc6b63d2838b716841e9616efaa1ccb49d35a99c17076d3508957a8a", "extra_info": null, "node_info": {"start": 0, "end": 324, "_node_type": "1"}, "relationships": {"1": "4466ac1f-2dfd-4a21-81f6-15b1ebea3674"}}, "__type__": "1"}, "718a3c32-2a7e-47e6-a508-fa1484235e99": {"__data__": {"text": "\n\nTriggers at the epoch start\n\n:::tip\nSee the Triggers at epoch boundary section of `stake.move` for the full code.\n:::\n\nAt the start of each epoch, the following key events are triggered:\n\n- Update the validator set by adding the pending active validators to the active validators set and by removing the pending inactive validators from the active validators set.\n- Move any pending active stake to active stake, and any pending inactive stake to inactive stake.\n- The staking pool's voting power in this new epoch is updated to the total active stake.\n- Automatically renew a validator's lockup for the validators who will still be in the validator set in the next epoch.\n- The voting power of each validator in the validator set is updated to be the corresponding staking pool's voting power.\n- Rewards are distributed to the validators that participated in the previous epoch.\n\n", "doc_id": "718a3c32-2a7e-47e6-a508-fa1484235e99", "embedding": null, "doc_hash": "b71ef1c62c855fe9cfd08bd4ff521a0c03755ffa5be4407e82c0759810ff77e1", "extra_info": null, "node_info": {"start": 0, "end": 883, "_node_type": "1"}, "relationships": {"1": "2b06bc1c-8968-455e-8ae4-a5281b360fef"}}, "__type__": "1"}, "2f8adb88-dca2-4bce-bf31-1b522af6ecad": {"__data__": {"text": "\n\nRewards\n\nRewards for staking are calculated by using:\n\n1. The `rewards_rate`, an annual percentage yield (APY), i.e., rewards accrue as a compound interest on your current staked amount.\n2. Your staked amount.\n3. Your proposer performance in the Aptos governance.\n\n:::tip Rewards rate\nThe `rewards_rate` is set by the Aptos governance. Also see Validation on the Aptos blockchain.\n:::\n\n", "doc_id": "2f8adb88-dca2-4bce-bf31-1b522af6ecad", "embedding": null, "doc_hash": "78f3c9291fb01774d0ad93d60710af79f4386b48872fe4937a89e65c596196b8", "extra_info": null, "node_info": {"start": 0, "end": 388, "_node_type": "1"}, "relationships": {"1": "32c16837-79d5-456b-82e8-8d5697fb646e"}}, "__type__": "1"}, "e1bc8cf3-0634-4341-a451-290f561de2b0": {"__data__": {"text": "\n\nRewards formula\n\nSee below the formula used to calculate rewards to the validator:\n\n```\nReward = staked_amount * rewards_rate per epoch * (Number of successful proposals by the validator / Total number of proposals made by the validator)\n```\n\n", "doc_id": "e1bc8cf3-0634-4341-a451-290f561de2b0", "embedding": null, "doc_hash": "570dfbdbc2777030d4a617ef15af68a2870b2de2bb8c245a9cfa74a7b443bbde", "extra_info": null, "node_info": {"start": 0, "end": 245, "_node_type": "1"}, "relationships": {"1": "1eb6c8a3-0fa7-479c-9a7d-17803e189977"}}, "__type__": "1"}, "bc00240c-3736-44a5-ac79-2448a31f45cb": {"__data__": {"text": "\n\nRewards paid every epoch\n\nRewards are paid every epoch. Any reward you (i.e., validator) earned at the end of current epoch is added to your staked amount. The reward at the end of the next epoch is calculated based on your increased staked amount (i.e., original staked amount plus the added reward), and so on.\n\n", "doc_id": "bc00240c-3736-44a5-ac79-2448a31f45cb", "embedding": null, "doc_hash": "335b143a9294c8b749304d9ea42665b3f4b7c0e78d6bfd1dc826857933e5c96b", "extra_info": null, "node_info": {"start": 0, "end": 316, "_node_type": "1"}, "relationships": {"1": "96829249-2d44-45e8-a547-463ae291b704"}}, "__type__": "1"}, "a792345e-1360-4d9d-994f-d31680d678af": {"__data__": {"text": "\n\nRewards based on the proposer performance\n\nThe validator rewards calculation uses the validator's proposer performance. Once you are in the validator set, you can propose in every epoch. The more successfully you propose, i.e., your proposals pass, the more rewards you will receive. \n\nNote that rewards are given only to the **leader-validators**, i.e., validators who propose the new block, and not to the **voter-validators** who vote on the leader's proposal for the new block. See Validation on the Aptos blockchain.\n\n:::tip Rewards are subject to lockup period\nAll the validator rewards are also subject to lockup period as they are added to the original staked amount. \n:::\n\n", "doc_id": "a792345e-1360-4d9d-994f-d31680d678af", "embedding": null, "doc_hash": "43db5368d86ebd894ae694eb69fecbce1703d9080918b285c96b1e49749fca00", "extra_info": null, "node_info": {"start": 0, "end": 684, "_node_type": "1"}, "relationships": {"1": "29455fd2-d7f6-4378-973d-7d90cc31303b"}}, "__type__": "1"}, "93481645-ba84-4f1b-a5e2-6bc297e5425f": {"__data__": {"text": "\n\nLeaving the validator set\n\n:::tip\nSee the Aptos Stake module in the Move language at stake.move.\n:::\n\n- At any time you can call the following sequence of functions to leave the validator set:\n    - Call\u00a0`Stake::unlock`\u00a0to unlock your stake amount, and \n    - Either call\u00a0`Stake::withdraw`\u00a0to withdraw your staked amount at the next epoch, or call\u00a0`Stake::leave_validator_set`.\n\n", "doc_id": "93481645-ba84-4f1b-a5e2-6bc297e5425f", "embedding": null, "doc_hash": "a09260112495cbabb2b87e1cf072a3d9e632f2a5c85308b0704c8cd195f1e86a", "extra_info": null, "node_info": {"start": 0, "end": 381, "_node_type": "1"}, "relationships": {"1": "df9e2b78-62cb-4ce0-8b13-9596da33c07e"}}, "__type__": "1"}, "114089bb-6b9f-4344-a089-4400a4cd7ccb": {"__data__": {"text": "\n\nRejoining the validator set\n\nWhen you leave a validator set, you can rejoin by depositing the minimum required stake amount.\n\n", "doc_id": "114089bb-6b9f-4344-a089-4400a4cd7ccb", "embedding": null, "doc_hash": "c9ceaf14bee2c155b86c6f69d03a567e33e8df15a9304bb1dfa6506c3b1d3721", "extra_info": null, "node_info": {"start": 0, "end": 128, "_node_type": "1"}, "relationships": {"1": "528532d3-941b-40bc-bb21-a87f3f89e843"}}, "__type__": "1"}, "1d4fdd58-4142-46bd-9f84-1066501cd99b": {"__data__": {"text": "\n\nSupporting documentation\n\n* Current on-chain data\n* Staking Pool Operations\n* Delegation Pool Operations\n* Configuration file `staking_config.move`\n* Contract file `staking_contract.move` covering requesting commissions\n* All staking-related `.move files\n\n", "doc_id": "1d4fdd58-4142-46bd-9f84-1066501cd99b", "embedding": null, "doc_hash": "aeb315bb26749bc9d71f9224f86b59291e96523c0ce4994915bfe3dde4d123ef", "extra_info": null, "node_info": {"start": 0, "end": 258, "_node_type": "1"}, "relationships": {"1": "09a1b9de-1548-42e9-b666-b33ddd784a5d"}}, "__type__": "1"}, "05961b69-203e-43ae-8e2f-679935c170d7": {"__data__": {"text": "\n\nLibraries\n\nAptos provides multiple useful libraries for developers. The complete up-to-date docs can be found here.\n\n", "doc_id": "05961b69-203e-43ae-8e2f-679935c170d7", "embedding": null, "doc_hash": "0c6f3a6c91ce46e23d6f65e8624e48f04084d238633e87817c7f12beb43a89ed", "extra_info": null, "node_info": {"start": 0, "end": 119, "_node_type": "1"}, "relationships": {"1": "28ba7f3f-c1b9-4a46-baba-d39cebcb8e9e"}}, "__type__": "1"}, "bcc7bc1a-f003-4764-82bf-0193d12fecc6": {"__data__": {"text": "\n\nAptos Standards\n\nStandards define a common interoperable interface for all developers to build upon. They consist of rules to ensure compatibility across applications and wallets on the Aptos blockchain. See a list of known coin resource addresses in Aptos provided by \nhippospace.\n\n", "doc_id": "bcc7bc1a-f003-4764-82bf-0193d12fecc6", "embedding": null, "doc_hash": "f6d2ed2df07406af0ca5649866cef463635541730f971d7a430a478596f31e69", "extra_info": null, "node_info": {"start": 0, "end": 285, "_node_type": "1"}, "relationships": {"1": "ec595bd8-ee7d-4cfd-b32e-da66fcabf45a"}}, "__type__": "1"}, "09b7637d-6384-4b44-90eb-cfd61fc33db3": {"__data__": {"text": "\n\nObject\n\nThe Object model allows Move to represent a complex type as a set of resources stored within a single address and offers a rich capability model that allows for fine-grained resource control and ownership management.\n\nSee Object >\n\n", "doc_id": "09b7637d-6384-4b44-90eb-cfd61fc33db3", "embedding": null, "doc_hash": "0629fd839ac13ad585d4fa36d883e9562b877707ef713ae6e74f3ba49248617b", "extra_info": null, "node_info": {"start": 0, "end": 242, "_node_type": "1"}, "relationships": {"1": "f4186876-cc32-4542-a1d1-5fe251e5eee0"}}, "__type__": "1"}, "41f2f310-db19-495f-9b82-4c34a0f38a50": {"__data__": {"text": "\n\nDigital Asset Standards\n\nThe Coin module is a lightweight standard meant for simple, typesafe, and fungible assets. The coin standard is separated out into its own Move module to ensure that:\n  - Applications and users can create and use simple tokens, with high performance and low gas overhead.\n  - The Coin standard is part of the Aptos core framework so it can be used for currencies, including the gas currency.\n\nSee Aptos Coin >\n\n", "doc_id": "41f2f310-db19-495f-9b82-4c34a0f38a50", "embedding": null, "doc_hash": "14196a7186677ebb3960c23d939d9afc643ac7b09ff523ef2a2161a03ae43cf7", "extra_info": null, "node_info": {"start": 0, "end": 438, "_node_type": "1"}, "relationships": {"1": "b8c4c7e4-b1d1-4e01-82b6-afabd45680af"}}, "__type__": "1"}, "fc4924a3-c2dc-4282-86fc-0f022d36c530": {"__data__": {"text": "\n\nAptos Token\n\n", "doc_id": "fc4924a3-c2dc-4282-86fc-0f022d36c530", "embedding": null, "doc_hash": "3148581536fc420da19ba5e470c0d58f001ae9d3825e2d1bd8346b8e19a8e54b", "extra_info": null, "node_info": {"start": 0, "end": 15, "_node_type": "1"}, "relationships": {"1": "ee41cd0e-d485-41b6-88b8-0615adfbc078"}}, "__type__": "1"}, "55a456b2-c22f-4ea6-9469-7b1a1a1cbb22": {"__data__": {"text": "\n\nToken V2\nThe new Token v2 standard allows:\n\n- Rich, flexible assets and collectibles.\n- Token v2 can be built up on easily to provide richer custom functionalities. An example of this is the aptos_token module\n\nThe v2 standard is recommended for any new collections or protocols that want to build NFT or semi-fungible tokens.\nSee Aptos Token v2 >\n\n", "doc_id": "55a456b2-c22f-4ea6-9469-7b1a1a1cbb22", "embedding": null, "doc_hash": "002bdd1b65d76607e1590e2e8763a5b6b4756ce054229ea32eef1e6b5553a600", "extra_info": null, "node_info": {"start": 0, "end": 351, "_node_type": "1"}, "relationships": {"1": "6ccbe62f-c607-44b7-9fd1-0e1bbfb69527"}}, "__type__": "1"}, "69b4878b-f952-467d-be65-e3354b8f7005": {"__data__": {"text": "\n\nToken V1\nThe old existing Token module, on the other hand:\n\n- Encapsulates rich, flexible assets and collectibles. These assets are discrete (non-decimal) and can be fungible, semi-fungible, or nonfungible.\n- The token standard is in its own `AptosToken` package at the Address `0x3` to allow for rapid iteration based on feedback from the community.\n\nSee Aptos Token >\n\n", "doc_id": "69b4878b-f952-467d-be65-e3354b8f7005", "embedding": null, "doc_hash": "9059fae747a80e623d44a82018fa8f7e5da4fe329a8eb855153dd7db8dcd3be1", "extra_info": null, "node_info": {"start": 0, "end": 373, "_node_type": "1"}, "relationships": {"1": "4b0c1853-a4ca-4a0d-b34f-24b3336d5e73"}}, "__type__": "1"}, "f2e094a2-941b-4ce7-960c-af147c283bf4": {"__data__": {"text": "\n\nWallet standards\n\nThe wallet standards ensure that all wallets use the same functionality for key features.  This includes:\n- The same mnemonic so that wallets can be moved between providers.\n- Wallet adapter so that all applications can interact seamlessly with a common interface.\n\n", "doc_id": "f2e094a2-941b-4ce7-960c-af147c283bf4", "embedding": null, "doc_hash": "6c2460a78b830762423651d2297d1863783a68351cba46c9cff5a02eaed0a891", "extra_info": null, "node_info": {"start": 0, "end": 286, "_node_type": "1"}, "relationships": {"1": "29248eed-6eac-4733-adf4-dfac56258a18"}}, "__type__": "1"}, "c8207db6-402e-42bb-9614-786d57725b8a": {"__data__": {"text": "\n\nState Synchronization\n\nNodes in an Aptos network, both the validator nodes and the fullnodes, must always be synchronized to the latest Aptos blockchain state. The state synchronization (state sync) component that runs on each node is responsible for this synchronization. To achieve this synchronization, state sync identifies and fetches new blockchain data from the peers, validates the data and persists it to the local storage.\n\n:::tip Need to start a node quickly?\nIf you need to start a node quickly, here's what we recommend by use case:\n  - **Devnet public fullnode**: To sync the entire blockchain history, download a snapshot. Otherwise, use fast sync.\n  - **Testnet public fullnode**: To sync the entire blockchain history, download a snapshot. Otherwise, use fast sync.\n  - **Mainnet public fullnode**: To sync the entire blockchain history, use output syncing. Otherwise, use fast sync.\n  - **Mainnet validator or validator fullnode**: Use output syncing. Note: fast sync is not recommended.\n:::\n\n", "doc_id": "c8207db6-402e-42bb-9614-786d57725b8a", "embedding": null, "doc_hash": "f156b9576e3acbc327f744a1a7dab7adce938c198e63745f30c509bcf9c01435", "extra_info": null, "node_info": {"start": 0, "end": 1013, "_node_type": "1"}, "relationships": {"1": "a422f517-606b-442b-9a0f-541e3d12d650"}}, "__type__": "1"}, "8d2993c8-463c-4b17-bd0e-db3288deae95": {"__data__": {"text": "\n\nState sync modes\n\nState sync runs in two modes. All nodes will first bootstrap (in bootstrapping mode) on startup, and then continuously synchronize (in continuous sync mode). \n\n", "doc_id": "8d2993c8-463c-4b17-bd0e-db3288deae95", "embedding": null, "doc_hash": "4c98ce6d29066ed3a62b028b94c346ed783735a9376bb758ecc26f7793e8b101", "extra_info": null, "node_info": {"start": 0, "end": 180, "_node_type": "1"}, "relationships": {"1": "37ec8820-9f49-4b2f-8487-03c2ea7eb4d2"}}, "__type__": "1"}, "fa80d6d2-c5fe-4ed7-b809-672d76811bee": {"__data__": {"text": "\n\nBootstrapping mode\n\nWhen the node starts, state sync will perform bootstrapping by using the specified bootstrapping mode configuration. This allows the node to catch up to the Aptos blockchain. There are three bootstrapping modes:\n\n- **Execute all the transactions since genesis**. In this state sync mode the node will retrieve from the Aptos network all the transactions since genesis, i.e., since the start of the blockchain's history, and re-execute those transactions. Naturally, this synchronization mode takes the longest amount of time.\n- **Apply transaction outputs since genesis**. In this state sync mode the node will retrieve all the transactions since genesis but it will skip the transaction execution and will only apply the outputs of the transactions that were previously produced by validator execution. This mode reduces the amount of CPU time required.\n- **Download the latest state directly**. In this state sync mode the node will skip the transaction history in the blockchain and will download only the latest blockchain state directly. As a result, the node will not have the historical transaction data, but it will be able to catch up to the Aptos network much more rapidly.\n\n", "doc_id": "fa80d6d2-c5fe-4ed7-b809-672d76811bee", "embedding": null, "doc_hash": "c26f4ac137c83b1d87093e8ff24ed032477b304c150bf338987773e746f03be4", "extra_info": null, "node_info": {"start": 0, "end": 1207, "_node_type": "1"}, "relationships": {"1": "de5f076b-4338-4a55-85f2-84c42797762e"}}, "__type__": "1"}, "49cfd540-8563-4396-80c9-a17281ca76e8": {"__data__": {"text": "\n\nContinuous syncing mode\n\nAfter the node has bootstrapped and caught up to the Aptos network initially, state sync will then move into continuous syncing mode to stay up-to-date with the blockchain. There are two continuous syncing modes:\n\n- **Executing transactions**. This state sync mode will keep the node up-to-date by executing new transactions as they are committed to the blockchain.\n- **Applying transaction outputs**. This state sync mode will keep the node up-to-date by skipping the transaction execution and only applying the outputs of the transactions as previously produced by validator execution.\n\n", "doc_id": "49cfd540-8563-4396-80c9-a17281ca76e8", "embedding": null, "doc_hash": "10921eea7d301b90bbad172eb90fb186678e14f935a231b767ff1de119ded070", "extra_info": null, "node_info": {"start": 0, "end": 616, "_node_type": "1"}, "relationships": {"1": "92083c6d-a1c7-4423-8c07-e9d43603d486"}}, "__type__": "1"}, "5a338ee1-95bb-4bd3-a181-2e5224836a46": {"__data__": {"text": "\n\nConfiguring the state sync modes\n\nThe below sections provide instructions for how to configure your node for different use cases.\n\n", "doc_id": "5a338ee1-95bb-4bd3-a181-2e5224836a46", "embedding": null, "doc_hash": "309b675f67b2757ec52c52e4c6efe7f6041ad2853ed923812d79d9c7d6551b84", "extra_info": null, "node_info": {"start": 0, "end": 133, "_node_type": "1"}, "relationships": {"1": "fc4cb2bf-54b1-4cf1-a0a1-5ad4c93f6dbd"}}, "__type__": "1"}, "564da7f2-d0e3-45c3-a5bf-c980db0da36e": {"__data__": {"text": "\n\nExecuting all transactions\n\nTo execute all the transactions since genesis and continue to execute new\ntransactions as they are committed, add the following to your node\nconfiguration file (for example,`fullnode.yaml` or `validator.yaml`):\n\n```yaml\n state_sync:\n     state_sync_driver:\n         bootstrapping_mode: ExecuteTransactionsFromGenesis\n         continuous_syncing_mode: ExecuteTransactions\n```\n\n:::tip Verify node syncing\nWhile your node is syncing, you'll be able to see the\n`aptos_state_sync_version{type=\"synced\"}` metric gradually increase.\n:::\n\n", "doc_id": "564da7f2-d0e3-45c3-a5bf-c980db0da36e", "embedding": null, "doc_hash": "eef63f865b49ab46a596a032ab3415a13960cdecb8803f5a16fdb899e1d3ee6b", "extra_info": null, "node_info": {"start": 0, "end": 561, "_node_type": "1"}, "relationships": {"1": "3ec1a921-4acc-4391-9d64-70e1678bb70d"}}, "__type__": "1"}, "3cde85af-64f0-4757-af2d-6300ced79930": {"__data__": {"text": "\n\nApplying all transaction outputs\n\nTo apply all transaction outputs since genesis and continue to apply new\ntransaction outputs as transactions are committed, add the following to your\nnode configuration file:\n\n```yaml\n state_sync:\n     state_sync_driver:\n         bootstrapping_mode: ApplyTransactionOutputsFromGenesis\n         continuous_syncing_mode: ApplyTransactionOutputs\n```\n\n:::tip Verify node syncing\nWhile your node is syncing, you'll be able to see the\n`aptos_state_sync_version{type=\"synced\"}` metric gradually increase.\n:::\n\n", "doc_id": "3cde85af-64f0-4757-af2d-6300ced79930", "embedding": null, "doc_hash": "41e8c9a1231451846ca0e8bc489edd9e6701e3538d80171605505670958b91ab", "extra_info": null, "node_info": {"start": 0, "end": 539, "_node_type": "1"}, "relationships": {"1": "bc4fb7b7-df38-444c-b862-1b950c9fade4"}}, "__type__": "1"}, "4a392f2e-9c74-4da2-bacb-b13ba29b91a3": {"__data__": {"text": "\n\nFast syncing\n\n:::tip Fastest and cheapest method\nThis is the fastest and cheapest method of syncing your node. It\nrequires the node to start from an empty state (i.e., not have any existing\nstorage data).\n:::\n\n:::caution Proceed with caution\nFast sync should only be used as a last resort for validators and\nvalidator fullnodes. This is because fast sync skips all of the blockchain\nhistory and as a result: (i) reduces the data availability in the network;\nand (ii) may hinder validator consensus performance if too much data has\nbeen skipped. Thus, validator and validator fullnode operators should be\ncareful to consider alternate ways of syncing before resorting to fast sync.\n:::\n\nTo download the latest blockchain state and continue to apply new\ntransaction outputs as transactions are committed, add the following to your\nnode configuration file:\n\n```yaml\n state_sync:\n     state_sync_driver:\n         bootstrapping_mode: DownloadLatestStates\n         continuous_syncing_mode: ApplyTransactionOutputs\n```\n\nWhile your node is syncing, you'll be able to see the\n`aptos_state_sync_version{type=\"synced_states\"}` metric gradually increase.\nHowever, `aptos_state_sync_version{type=\"synced\"}` will only increase once\nthe node has bootstrapped. This may take several hours depending on the \namount of data, network bandwidth and node resources available.\n\n**Note:** If `aptos_state_sync_version{type=\"synced_states\"}` does not \nincrease then do the following:\n1. Double-check the node configuration file has correctly been updated.\n2. Make sure that the node is starting up with an empty storage database\n(i.e., that it has not synced any state previously).\n3. Add the following to your node configuration to account for any potential\nnetwork delays that may occur when initializing slow network connections:\n\n```yaml\n state_sync:\n   state_sync_driver:\n     ...\n     max_connection_deadline_secs: 1000000 # Tolerate slow peer discovery & connections\n```\n\n", "doc_id": "4a392f2e-9c74-4da2-bacb-b13ba29b91a3", "embedding": null, "doc_hash": "dc93d8431c089b6e0f5ceec8ea1962f4e415d46289349dc6f99613ecf4eb8d69", "extra_info": null, "node_info": {"start": 0, "end": 1957, "_node_type": "1"}, "relationships": {"1": "5d68115f-96ca-4936-b3c7-74b9f1d60096"}}, "__type__": "1"}, "f444cb44-5c94-446d-9f71-a4e75787d942": {"__data__": {"text": "\n\nRunning archival nodes\n\nTo operate an archival node, which is a fullnode that contains all blockchain data\nsince the start of the blockchain's history (that is, genesis), you should:\n1. Run a fullnode and configure it to execute all transactions, or apply all transaction outputs (see above).\nDo not select fast syncing, as the fullnode will not contain all data since genesis.\n2. Disable the ledger pruner, as described in the Data Pruning document.\nThis will ensure that no data is pruned and the fullnode contains all blockchain data.\n\n:::caution Proceed with caution\nRunning and maintaining archival nodes is likely to be expensive and slow\nas the amount of data being stored on the fullnode will continuously grow.\n:::\n\n\n", "doc_id": "f444cb44-5c94-446d-9f71-a4e75787d942", "embedding": null, "doc_hash": "eecd275152f2b156edf86ab1739e098a84dea5546e6bb18fe5ca4e6c9ffac2e6", "extra_info": null, "node_info": {"start": 0, "end": 728, "_node_type": "1"}, "relationships": {"1": "2b61c3d8-ee1c-4560-b21d-0fe469bd0f2f"}}, "__type__": "1"}, "4da04bb1-75b9-40f7-8e6a-4a0046520155": {"__data__": {"text": "\n\nSecurity implications and data integrity\nEach of the different syncing modes perform data integrity verifications to\nensure that the data being synced to the node has been correctly produced\nand signed by the validators. This occurs slightly differently for\neach syncing mode:\n1. Executing transactions from genesis is the most secure syncing mode. It will\nverify that all transactions since the beginning of time were correctly agreed\nupon by consensus and that all transactions were correctly executed by the\nvalidators. All resulting blockchain state will thus be re-verified by the\nsyncing node.\n2. Applying transaction outputs from genesis is faster than executing all\ntransactions, but it requires that the syncing node trusts the validators to\nhave executed the transactions correctly. However, all other\nblockchain state is still manually re-verified, e.g., consensus messages,\nthe transaction history and the state hashes are still verified.\n3. Fast syncing skips the transaction history and downloads the latest\nblockchain state before continuously syncing. To do this, it requires that the\nsyncing node trust the validators to have correctly agreed upon all\ntransactions in the transaction history as well as trust that all transactions\nwere correctly executed by the validators. However, all other blockchain state\nis still manually re-verified, e.g., epoch changes and the resulting blockchain states.\n\nAll of the syncing modes get their root of trust from the validator set\nand cryptographic signatures from those validators over the blockchain data.\nFor more information about how this works, see the state synchronization blogpost.\n\n", "doc_id": "4da04bb1-75b9-40f7-8e6a-4a0046520155", "embedding": null, "doc_hash": "3f6bd570aa9934d74a1b1e6d01336b71c907e23a9524924fcfc1b0c817c72154", "extra_info": null, "node_info": {"start": 0, "end": 1651, "_node_type": "1"}, "relationships": {"1": "3bc5e304-82ab-4712-a8f3-4499d3b43643"}}, "__type__": "1"}, "fd7890b4-97c9-4eac-9b3c-a1eced6d70ba": {"__data__": {"text": "\n\nState sync architecture\n\nThe state synchronization component is comprised of four sub-components, each with a specific purpose:\n\n1. **Driver**: The driver \u201cdrives\u201d the synchronization progress of the node.\nIt is responsible for verifying all data that the node receives from peers. Data\nis forwarded from the peers via the data streaming service. After data\nverification, the driver persists the data to storage.\n2. **Data Streaming Service**: The streaming service creates data streams for\nclients (one of which is the state sync driver). It allows the client to stream\nnew data chunks from peers, without having to worry about which peers have the\ndata or how to manage data requests. For example, the client can request all\ntransactions since version `5` and the data streaming service will provide\nthis.\n3. **Aptos Data Client**: The data client is responsible for handling data\nrequests from the data streaming service. For the data streaming service to\nstream all transactions, it must make multiple requests (each request for a\nbatch of transactions) and send those requests to peers (e.g., transactions\n`1\u21925`, `6\u219210`, `11\u219215`, and so on). The data client takes the request,\nidentifies which peer can handle the request and sends the request to them.\n4. **Storage Service**: The storage service is a simple storage API offered by\neach node which allows peers to fetch data. For example, the data client on\npeer `X` can send the data request to the storage service on peer `Y` to fetch\na batch of transactions.\n\n", "doc_id": "fd7890b4-97c9-4eac-9b3c-a1eced6d70ba", "embedding": null, "doc_hash": "3ccc81f917597347c547edb3850647e949b71cd9167897fcd51cb4849216ce73", "extra_info": null, "node_info": {"start": 0, "end": 1520, "_node_type": "1"}, "relationships": {"1": "635bf8a3-d21e-4c4d-aa36-45bf126018e3"}}, "__type__": "1"}, "353b2628-d652-417b-a97c-a16857f6a94d": {"__data__": {"text": "\n\nState sync code structure\n\nBelow are the links to the state sync code showing the structure that matches the architecture outlined above:\n- **Driver:** https://github.com/aptos-labs/aptos-core/tree/main/state-sync/state-sync-v2/state-sync-driver\n- **Data Streaming Service:** https://github.com/aptos-labs/aptos-core/tree/main/state-sync/state-sync-v2/data-streaming-service\n- **Aptos Data Client**: https://github.com/aptos-labs/aptos-core/tree/main/state-sync/aptos-data-client\n- **Storage Service:** https://github.com/aptos-labs/aptos-core/tree/main/state-sync/storage-service\n\nIn addition, see also a directory containing the code for\n**inter-component** communication: https://github.com/aptos-labs/aptos-core/tree/main/state-sync/inter-component.\nThis is required so that:\n   - State sync can handle notifications from consensus (e.g., to catch up after falling behind).\n   - State sync can notify mempool when transactions are committed (i.e., so they can be removed from mempool).\n   - State sync can update the event subscription service to notify listeners (e.g., other system components for reconfiguration events).\n\n", "doc_id": "353b2628-d652-417b-a97c-a16857f6a94d", "embedding": null, "doc_hash": "29f1ecf6629cd9806571bfdb665b62665e5b84607e1a35189466b9350aebaf05", "extra_info": null, "node_info": {"start": 0, "end": 1131, "_node_type": "1"}, "relationships": {"1": "9b01fb8e-2518-4e7b-9132-dc625df874a5"}}, "__type__": "1"}, "cb145650-1a07-41c2-8bb2-7d2c47ee6462": {"__data__": {"text": "\n\nStructs and Resources\n\nA _struct_ is a user-defined data structure containing typed fields. Structs can store any\nnon-reference type, including other structs.\n\nWe often refer to struct values as _resources_ if they cannot be copied and cannot be dropped. In\nthis case, resource values must have ownership transferred by the end of the function. This property\nmakes resources particularly well served for defining global storage schemas or for representing\nimportant values (such as a token).\n\nBy default, structs are linear and ephemeral. By this we mean that they: cannot be copied, cannot be\ndropped, and cannot be stored in global storage. This means that all values have to have ownership\ntransferred (linear) and the values must be dealt with by the end of the program's execution\n(ephemeral). We can relax this behavior by giving the struct abilities which allow\nvalues to be copied or dropped and also to be stored in global storage or to define global storage\nschemas.\n\n", "doc_id": "cb145650-1a07-41c2-8bb2-7d2c47ee6462", "embedding": null, "doc_hash": "058f914abe4388acd038c3f5a9a4885fddbb3760b6d8d83de162a9c4e5dddc4f", "extra_info": null, "node_info": {"start": 0, "end": 980, "_node_type": "1"}, "relationships": {"1": "c0332bdf-7601-4b92-be55-738055f7f538"}}, "__type__": "1"}, "9222a1bb-2ec9-4af2-980b-f1edbe0b4305": {"__data__": {"text": "\n\nDefining Structs\n\nStructs must be defined inside a module:\n\n```move\naddress 0x2 {\nmodule m {\n    struct Foo { x: u64, y: bool }\n    struct Bar {}\n    struct Baz { foo: Foo, }\n    //                   ^ note: it is fine to have a trailing comma\n}\n}\n```\n\nStructs cannot be recursive, so the following definition is invalid:\n\n```move\nstruct Foo { x: Foo }\n//              ^ error! Foo cannot contain Foo\n```\n\nAs mentioned above: by default, a struct declaration is linear and ephemeral. So to allow the value\nto be used with certain operations (that copy it, drop it, store it in global storage, or use it as\na storage schema), structs can be granted abilities by annotating them with\n`has `:\n\n```move\naddress 0x2 {\nmodule m {\n    struct Foo has copy, drop { x: u64, y: bool }\n}\n}\n```\n\nFor more details, see the annotating structs section.\n\n", "doc_id": "9222a1bb-2ec9-4af2-980b-f1edbe0b4305", "embedding": null, "doc_hash": "8f2bf629d82c0a382d97669189354d851a59094374c055d4a8f6740dd1c95ec0", "extra_info": null, "node_info": {"start": 0, "end": 840, "_node_type": "1"}, "relationships": {"1": "78e6f5cc-382a-47db-a820-6500eabe4388"}}, "__type__": "1"}, "0febcfd4-721a-48ce-a60e-364c6779defd": {"__data__": {"text": "\n\nNaming\n\nStructs must start with a capital letter `A` to `Z`. After the first letter, struct names can\ncontain underscores `_`, letters `a` to `z`, letters `A` to `Z`, or digits `0` to `9`.\n\n```move\nstruct Foo {}\nstruct BAR {}\nstruct B_a_z_4_2 {}\n```\n\nThis naming restriction of starting with `A` to `Z` is in place to give room for future language\nfeatures. It may or may not be removed later.\n\n", "doc_id": "0febcfd4-721a-48ce-a60e-364c6779defd", "embedding": null, "doc_hash": "aff7e4ad89c5426251ef2e861311741f94cb0da05f78a60ae0b4d11a21f85510", "extra_info": null, "node_info": {"start": 0, "end": 397, "_node_type": "1"}, "relationships": {"1": "d3152062-230b-4c6b-9eb7-76e65d1b0196"}}, "__type__": "1"}, "fdf5ab63-3285-4fb9-9227-1830fe69fcf0": {"__data__": {"text": "\n\nUsing Structs\n\n", "doc_id": "fdf5ab63-3285-4fb9-9227-1830fe69fcf0", "embedding": null, "doc_hash": "7cf8a39a4a09c5c3aefa3bcdf4921fa220baa0cf05a447263539cf5c04a67158", "extra_info": null, "node_info": {"start": 0, "end": 17, "_node_type": "1"}, "relationships": {"1": "464a62c6-0ae4-4a09-b08a-3d3400fe48e0"}}, "__type__": "1"}, "d6957582-12fe-40b3-abbb-0f5c220c5948": {"__data__": {"text": "\n\nCreating Structs\n\nValues of a struct type can be created (or \"packed\") by indicating the struct name, followed by\nvalue for each field:\n\n```move\naddress 0x2 {\nmodule m {\n    struct Foo has drop { x: u64, y: bool }\n    struct Baz has drop { foo: Foo }\n\n    fun example() {\n        let foo = Foo { x: 0, y: false };\n        let baz = Baz { foo: foo };\n    }\n}\n}\n```\n\nIf you initialize a struct field with a local variable whose name is the same as the field, you can\nuse the following shorthand:\n\n```move\nlet baz = Baz { foo: foo };\n// is equivalent to\nlet baz = Baz { foo };\n```\n\nThis is called sometimes called \"field name punning\".\n\n", "doc_id": "d6957582-12fe-40b3-abbb-0f5c220c5948", "embedding": null, "doc_hash": "3edb71c4c72101f6eb977c29e47771a63393cfd8f0e5bcc0b42cb8d7a7658fe2", "extra_info": null, "node_info": {"start": 0, "end": 636, "_node_type": "1"}, "relationships": {"1": "a80b27a0-7386-4bde-81db-8f9d5a8063f3"}}, "__type__": "1"}, "0404ee00-fbcb-4be5-bd9c-813538cca4a4": {"__data__": {"text": "\n\nDestroying Structs via Pattern Matching\n\nStruct values can be destroyed by binding or assigning them patterns.\n\n```move\naddress 0x2 {\nmodule m {\n    struct Foo { x: u64, y: bool }\n    struct Bar { foo: Foo }\n    struct Baz {}\n\n    fun example_destroy_foo() {\n        let foo = Foo { x: 3, y: false };\n        let Foo { x, y: foo_y } = foo;\n        //        ^ shorthand for `x: x`\n\n        // two new bindings\n        //   x: u64 = 3\n        //   foo_y: bool = false\n    }\n\n    fun example_destroy_foo_wildcard() {\n        let foo = Foo { x: 3, y: false };\n        let Foo { x, y: _ } = foo;\n\n        // only one new binding since y was bound to a wildcard\n        //   x: u64 = 3\n    }\n\n    fun example_destroy_foo_assignment() {\n        let x: u64;\n        let y: bool;\n        Foo { x, y } = Foo { x: 3, y: false };\n\n        // mutating existing variables x & y\n        //   x = 3, y = false\n    }\n\n    fun example_foo_ref() {\n        let foo = Foo { x: 3, y: false };\n        let Foo { x, y } = &foo;\n\n        // two new bindings\n        //   x: &u64\n        //   y: &bool\n    }\n\n    fun example_foo_ref_mut() {\n        let foo = Foo { x: 3, y: false };\n        let Foo { x, y } = &mut foo;\n\n        // two new bindings\n        //   x: &mut u64\n        //   y: &mut bool\n    }\n\n    fun example_destroy_bar() {\n        let bar = Bar { foo: Foo { x: 3, y: false } };\n        let Bar { foo: Foo { x, y } } = bar;\n        //             ^ nested pattern\n\n        // two new bindings\n        //   x: u64 = 3\n        //   y: bool = false\n    }\n\n    fun example_destroy_baz() {\n        let baz = Baz {};\n        let Baz {} = baz;\n    }\n}\n}\n```\n\n", "doc_id": "0404ee00-fbcb-4be5-bd9c-813538cca4a4", "embedding": null, "doc_hash": "c07573d54b592d50388257b2308b698eed0c7d28f019dc56ad32fa90699fd3df", "extra_info": null, "node_info": {"start": 0, "end": 1644, "_node_type": "1"}, "relationships": {"1": "314468db-88d5-499c-9184-fa047bb50a9c"}}, "__type__": "1"}, "b9083c4f-a8f4-4aa2-8be6-6a2a1e02a4e7": {"__data__": {"text": "\n\nBorrowing Structs and Fields\n\nThe `&` and `&mut` operator can be used to create references to structs or fields. These examples\ninclude some optional type annotations (e.g., `: &Foo`) to demonstrate the type of operations.\n\n```move\nlet foo = Foo { x: 3, y: true };\nlet foo_ref: &Foo = &foo;\nlet y: bool = foo_ref.y;          // reading a field via a reference to the struct\nlet x_ref: &u64 = &foo.x;\n\nlet x_ref_mut: &mut u64 = &mut foo.x;\n*x_ref_mut = 42;            // modifying a field via a mutable reference\n```\n\nIt is possible to borrow inner fields of nested structs:\n\n```move\nlet foo = Foo { x: 3, y: true };\nlet bar = Bar { foo };\n\nlet x_ref = &bar.foo.x;\n```\n\nYou can also borrow a field via a reference to a struct:\n\n```move\nlet foo = Foo { x: 3, y: true };\nlet foo_ref = &foo;\nlet x_ref = &foo_ref.x;\n// this has the same effect as let x_ref = &foo.x\n```\n\n", "doc_id": "b9083c4f-a8f4-4aa2-8be6-6a2a1e02a4e7", "embedding": null, "doc_hash": "6a090adb9d2a7970d6483c1d9041a037db71edc3bd87bb9cce8721326d5318b0", "extra_info": null, "node_info": {"start": 0, "end": 869, "_node_type": "1"}, "relationships": {"1": "5c7b8178-1276-4f29-999e-e90cffaa4371"}}, "__type__": "1"}, "e0e35d51-9376-47ec-8717-e9d25720e85f": {"__data__": {"text": "\n\nReading and Writing Fields\n\nIf you need to read and copy a field's value, you can then dereference the borrowed field:\n\n```move\nlet foo = Foo { x: 3, y: true };\nlet bar = Bar { foo: copy foo };\nlet x: u64 = *&foo.x;\nlet y: bool = *&foo.y;\nlet foo2: Foo = *&bar.foo;\n```\n\nIf the field is implicitly copyable, the dot operator can be used to read fields of a struct without\nany borrowing. (Only scalar values with the `copy` ability are implicitly copyable.)\n\n```move\nlet foo = Foo { x: 3, y: true };\nlet x = foo.x;  // x == 3\nlet y = foo.y;  // y == true\n```\n\nDot operators can be chained to access nested fields:\n\n```move\nlet baz = Baz { foo: Foo { x: 3, y: true } };\nlet x = baz.foo.x; // x = 3;\n```\n\nHowever, this is not permitted for fields that contain non-primitive types, such a vector or another\nstruct:\n\n```move\nlet foo = Foo { x: 3, y: true };\nlet bar = Bar { foo };\nlet foo2: Foo = *&bar.foo;\nlet foo3: Foo = bar.foo; // error! must add an explicit copy with *&\n```\n\nThe reason behind this design decision is that copying a vector or another struct might be an\nexpensive operation. It is important for a programmer to be aware of this copy and make others aware\nwith the explicit syntax `*&`.\n\nIn addition reading from fields, the dot syntax can be used to modify fields, regardless of the\nfield being a primitive type or some other struct.\n\n```move\nlet foo = Foo { x: 3, y: true };\nfoo.x = 42;     // foo = Foo { x: 42, y: true }\nfoo.y = !foo.y; // foo = Foo { x: 42, y: false }\nlet bar = Bar { foo };            // bar = Bar { foo: Foo { x: 42, y: false } }\nbar.foo.x = 52;                   // bar = Bar { foo: Foo { x: 52, y: false } }\nbar.foo = Foo { x: 62, y: true }; // bar = Bar { foo: Foo { x: 62, y: true } }\n```\n\nThe dot syntax also works via a reference to a struct:\n\n```move\nlet foo = Foo { x: 3, y: true };\nlet foo_ref = &mut foo;\nfoo_ref.x = foo_ref.x + 1;\n```\n\n", "doc_id": "e0e35d51-9376-47ec-8717-e9d25720e85f", "embedding": null, "doc_hash": "5915398d5930f8da1199bd3acf37a91349bfaf2ad5c27b01087f333a0c504aec", "extra_info": null, "node_info": {"start": 0, "end": 1889, "_node_type": "1"}, "relationships": {"1": "39ab9096-240c-4dfe-9f5b-e2cf1ea7a326"}}, "__type__": "1"}, "6be95b81-fabe-44a8-87aa-ab3007dcf54a": {"__data__": {"text": "\n\nPrivileged Struct Operations\n\nMost struct operations on a struct type `T` can only be performed inside the module that declares\n`T`:\n\n- Struct types can only be created (\"packed\"), destroyed (\"unpacked\") inside the module that defines\n  the struct.\n- The fields of a struct are only accessible inside the module that defines the struct.\n\nFollowing these rules, if you want to modify your struct outside the module, you will need to\nprovide public APIs for them. The end of the chapter contains some examples of this.\n\nHowever, struct _types_ are always visible to another module or script:\n\n```move\n// m.move\naddress 0x2 {\nmodule m {\n    struct Foo has drop { x: u64 }\n\n    public fun new_foo(): Foo {\n        Foo { x: 42 }\n    }\n}\n}\n```\n\n```move\n// n.move\naddress 0x2 {\nmodule n {\n    use 0x2::m;\n\n    struct Wrapper has drop {\n        foo: m::Foo\n    }\n\n    fun f1(foo: m::Foo) {\n        let x = foo.x;\n        //      ^ error! cannot access fields of `foo` here\n    }\n\n    fun f2() {\n        let foo_wrapper = Wrapper { foo: m::new_foo() };\n    }\n}\n}\n```\n\nNote that structs do not have visibility modifiers (e.g., `public` or `private`).\n\n", "doc_id": "6be95b81-fabe-44a8-87aa-ab3007dcf54a", "embedding": null, "doc_hash": "cf560a21b79eca38201d51fe0cf3fcea8c5ce5459d03872b9945de896d3c7c2c", "extra_info": null, "node_info": {"start": 0, "end": 1144, "_node_type": "1"}, "relationships": {"1": "de179760-36f1-467c-abae-dbe9e281b20a"}}, "__type__": "1"}, "7e4add9f-7855-41ab-bc9c-c6cbfdca0c17": {"__data__": {"text": "\n\nOwnership\n\nAs mentioned above in Defining Structs, structs are by default linear and\nephemeral. This means they cannot be copied or dropped. This property can be very useful when\nmodeling real world resources like money, as you do not want money to be duplicated or get lost in\ncirculation.\n\n```move\naddress 0x2 {\nmodule m {\n    struct Foo { x: u64 }\n\n    public fun copying_resource() {\n        let foo = Foo { x: 100 };\n        let foo_copy = copy foo; // error! 'copy'-ing requires the 'copy' ability\n        let foo_ref = &foo;\n        let another_copy = *foo_ref // error! dereference requires the 'copy' ability\n    }\n\n    public fun destroying_resource1() {\n        let foo = Foo { x: 100 };\n\n        // error! when the function returns, foo still contains a value.\n        // This destruction requires the 'drop' ability\n    }\n\n    public fun destroying_resource2(f: &mut Foo) {\n        *f = Foo { x: 100 } // error!\n                            // destroying the old value via a write requires the 'drop' ability\n    }\n}\n}\n```\n\nTo fix the second example (`fun destroying_resource1`), you would need to manually \"unpack\" the\nresource:\n\n```move\naddress 0x2 {\nmodule m {\n    struct Foo { x: u64 }\n\n    public fun destroying_resource1_fixed() {\n        let foo = Foo { x: 100 };\n        let Foo { x: _ } = foo;\n    }\n}\n}\n```\n\nRecall that you are only able to deconstruct a resource within the module in which it is defined.\nThis can be leveraged to enforce certain invariants in a system, for example, conservation of money.\n\nIf on the other hand, your struct does not represent something valuable, you can add the abilities\n`copy` and `drop` to get a struct value that might feel more familiar from other programming\nlanguages:\n\n```move\naddress 0x2 {\nmodule m {\n    struct Foo has copy, drop { x: u64 }\n\n    public fun run() {\n        let foo = Foo { x: 100 };\n        let foo_copy = copy foo;\n        // ^ this code copies foo, whereas `let x = foo` or\n        // `let x = move foo` both move foo\n\n        let x = foo.x;            // x = 100\n        let x_copy = foo_copy.x;  // x = 100\n\n        // both foo and foo_copy are implicitly discarded when the function returns\n    }\n}\n}\n```\n\n", "doc_id": "7e4add9f-7855-41ab-bc9c-c6cbfdca0c17", "embedding": null, "doc_hash": "d401157f39ed243b071245bedbf74dd25500aeeb3a9d20eefb55a0306a631ca1", "extra_info": null, "node_info": {"start": 0, "end": 2196, "_node_type": "1"}, "relationships": {"1": "24bcce7a-10d6-4636-8835-bf9902a2c2b2"}}, "__type__": "1"}, "dfb155ee-b45f-40cf-abaa-e203368ccc20": {"__data__": {"text": "\n\nStoring Resources in Global Storage\n\nOnly structs with the `key` ability can be saved directly in\npersistent global storage. All values stored within those `key`\nstructs must have the `store` ability. See the ability and\nglobal storage chapters for more detail.\n\n", "doc_id": "dfb155ee-b45f-40cf-abaa-e203368ccc20", "embedding": null, "doc_hash": "d0a8829ed44711fcf6edc0853ea82e0395550a0cdac017627a66ca8289a92865", "extra_info": null, "node_info": {"start": 0, "end": 265, "_node_type": "1"}, "relationships": {"1": "d4e8f040-7f2c-48de-91ec-768a9a7fc92d"}}, "__type__": "1"}, "e54c3bd8-5c04-4bd5-8f38-cb8d6c68d6fb": {"__data__": {"text": "\n\nExamples\n\nHere are two short examples of how you might use structs to represent valuable data (in the case of\n`Coin`) or more classical data (in the case of `Point` and `Circle`).\n\n", "doc_id": "e54c3bd8-5c04-4bd5-8f38-cb8d6c68d6fb", "embedding": null, "doc_hash": "569a37f48d2e9f20c46719eface66c73263f780a0d6041c1f2022d3b99bdea66", "extra_info": null, "node_info": {"start": 0, "end": 183, "_node_type": "1"}, "relationships": {"1": "d9c50519-44ce-40b7-8d71-3e7696e23169"}}, "__type__": "1"}, "2efd8fcf-d67b-460f-9f53-90cb76c3eb42": {"__data__": {"text": "\n\nExample 1: Coin\n\n\n\n```move\naddress 0x2 {\nmodule m {\n    // We do not want the Coin to be copied because that would be duplicating this \"money\",\n    // so we do not give the struct the 'copy' ability.\n    // Similarly, we do not want programmers to destroy coins, so we do not give the struct the\n    // 'drop' ability.\n    // However, we *want* users of the modules to be able to store this coin in persistent global\n    // storage, so we grant the struct the 'store' ability. This struct will only be inside of\n    // other resources inside of global storage, so we do not give the struct the 'key' ability.\n    struct Coin has store {\n        value: u64,\n    }\n\n    public fun mint(value: u64): Coin {\n        // You would want to gate this function with some form of access control to prevent\n        // anyone using this module from minting an infinite amount of coins.\n        Coin { value }\n    }\n\n    public fun withdraw(coin: &mut Coin, amount: u64): Coin {\n        assert!(coin.balance >= amount, 1000);\n        coin.value = coin.value - amount;\n        Coin { value: amount }\n    }\n\n    public fun deposit(coin: &mut Coin, other: Coin) {\n        let Coin { value } = other;\n        coin.value = coin.value + value;\n    }\n\n    public fun split(coin: Coin, amount: u64): (Coin, Coin) {\n        let other = withdraw(&mut coin, amount);\n        (coin, other)\n    }\n\n    public fun merge(coin1: Coin, coin2: Coin): Coin {\n        deposit(&mut coin1, coin2);\n        coin1\n    }\n\n    public fun destroy_zero(coin: Coin) {\n        let Coin { value } = coin;\n        assert!(value == 0, 1001);\n    }\n}\n}\n```\n\n", "doc_id": "2efd8fcf-d67b-460f-9f53-90cb76c3eb42", "embedding": null, "doc_hash": "87b9d4b49ac4ae701452801fd10b586f23157db9831b2ff5647e532162308cf4", "extra_info": null, "node_info": {"start": 0, "end": 1613, "_node_type": "1"}, "relationships": {"1": "6ddbad0f-78bd-4c37-b410-c1807a498ecf"}}, "__type__": "1"}, "ca434ecd-3fa1-48d2-b582-358641e5e8ae": {"__data__": {"text": "\n\nExample 2: Geometry\n\n```move\naddress 0x2 {\nmodule point {\n    struct Point has copy, drop, store {\n        x: u64,\n        y: u64,\n    }\n\n    public fun new(x: u64, y: u64): Point {\n        Point {\n            x, y\n        }\n    }\n\n    public fun x(p: &Point): u64 {\n        p.x\n    }\n\n    public fun y(p: &Point): u64 {\n        p.y\n    }\n\n    fun abs_sub(a: u64, b: u64): u64 {\n        if (a < b) {\n            b - a\n        }\n        else {\n            a - b\n        }\n    }\n\n    public fun dist_squared(p1: &Point, p2: &Point): u64 {\n        let dx = abs_sub(p1.x, p2.x);\n        let dy = abs_sub(p1.y, p2.y);\n        dx*dx + dy*dy\n    }\n}\n}\n```\n\n```move\naddress 0x2 {\nmodule circle {\n    use 0x2::point::{Self, Point};\n\n    struct Circle has copy, drop, store {\n        center: Point,\n        radius: u64,\n    }\n\n    public fun new(center: Point, radius: u64): Circle {\n        Circle { center, radius }\n    }\n\n    public fun overlaps(c1: &Circle, c2: &Circle): bool {\n        let d = point::dist_squared(&c1.center, &c2.center);\n        let r1 = c1.radius;\n        let r2 = c2.radius;\n        d*d <= r1*r1 + 2*r1*r2 + r2*r2\n    }\n}\n}\n```\n\n", "doc_id": "ca434ecd-3fa1-48d2-b582-358641e5e8ae", "embedding": null, "doc_hash": "7b2f6d4bd74a3835ce31aa6e0177d57656a95b8127caf3e5045ec19838e06a8f", "extra_info": null, "node_info": {"start": 0, "end": 1146, "_node_type": "1"}, "relationships": {"1": "d91affbe-7afe-454c-95e1-5e4c31102413"}}, "__type__": "1"}, "884a25c5-6c84-437e-9b04-2652cd1b05e2": {"__data__": {"text": "\n\nThe Move Programming Language\n\nIntroduction\n\n", "doc_id": "884a25c5-6c84-437e-9b04-2652cd1b05e2", "embedding": null, "doc_hash": "aebd2232ad6e34350a00208f1c4721e5e0bad29cd9fe02305bf046d82485fd8a", "extra_info": null, "node_info": {"start": 0, "end": 47, "_node_type": "1"}, "relationships": {"1": "7cda03cb-4d25-4f0a-ac76-29a6b4a1c650"}}, "__type__": "1"}, "1e040288-8cb8-4d52-b56e-6a59ef3c03da": {"__data__": {"text": "\n\nGetting Started\n\n- Modules and Scripts\n- Move Tutorial\n\n", "doc_id": "1e040288-8cb8-4d52-b56e-6a59ef3c03da", "embedding": null, "doc_hash": "fd4c6a3264e8fe19de0765378b76dac843496e26c949dbfba9251c12f6d0a250", "extra_info": null, "node_info": {"start": 0, "end": 58, "_node_type": "1"}, "relationships": {"1": "bdde51ca-ec79-4b3d-a255-71aca643a708"}}, "__type__": "1"}, "b2b88e06-ea6f-41fa-8449-90d382cfa1cc": {"__data__": {"text": "\n\nPrimitive Types\n\n- Integers\n- Bool\n- Address\n- Vector\n- Signer\n- References\n- Tuples and Unit\n\n", "doc_id": "b2b88e06-ea6f-41fa-8449-90d382cfa1cc", "embedding": null, "doc_hash": "6f102f0ddcb7854aeb9a9f113c563b1ee18f5f1beaa39361eaa1573160c91103", "extra_info": null, "node_info": {"start": 0, "end": 97, "_node_type": "1"}, "relationships": {"1": "ad23926d-9e15-48ae-97e2-dce20cef5193"}}, "__type__": "1"}, "ab749fe2-a01f-46c4-8c2f-a35380b0b1a7": {"__data__": {"text": "\n\nBasic Concepts\n\n- Local Variables and Scopes\n- Equality\n- Abort and Assert\n- Conditionals\n- While and Loop\n- Functions\n- Structs and Resources\n- Constants\n- Generics\n- Type Abilities\n- Uses and Aliases\n- Friends\n- Packages\n- Package Upgrades\n- Unit Tests\n\n", "doc_id": "ab749fe2-a01f-46c4-8c2f-a35380b0b1a7", "embedding": null, "doc_hash": "5e2916d274a1a9b5b89ca99cbb352642f37ed10404d552acbabd7c8d602f7445", "extra_info": null, "node_info": {"start": 0, "end": 258, "_node_type": "1"}, "relationships": {"1": "b77f9edf-7dba-47cc-bedf-97510554aaf6"}}, "__type__": "1"}, "2622841f-d329-412a-af65-bee6443301c1": {"__data__": {"text": "\n\nGlobal Storage\n\n- Global Storage Structure\n- Global Storage Operators\n\n", "doc_id": "2622841f-d329-412a-af65-bee6443301c1", "embedding": null, "doc_hash": "166d22e746486bf33ae805a011f64fbce8d5dd0d064329c33d2b61cf5a3bc02a", "extra_info": null, "node_info": {"start": 0, "end": 73, "_node_type": "1"}, "relationships": {"1": "fb8c1c6f-89b7-42ec-82cc-ad7def8915ca"}}, "__type__": "1"}, "74906d56-fffa-40e7-bca6-681dc226a9ea": {"__data__": {"text": "\n\nReference\n\n- Standard Library\n- Coding Conventions\n\n", "doc_id": "74906d56-fffa-40e7-bca6-681dc226a9ea", "embedding": null, "doc_hash": "33ca1153aa838d2039d77a3ff943fd93051d53a9aa5ca4622fe14797e4aef264", "extra_info": null, "node_info": {"start": 0, "end": 54, "_node_type": "1"}, "relationships": {"1": "4d8cc184-cfb9-4b85-a112-6b0f4f75d520"}}, "__type__": "1"}, "8f33848e-564f-4ebd-b9ec-79a34d79a58a": {"__data__": {"text": "\n\nMove Prover Supporting Resources\n\n", "doc_id": "8f33848e-564f-4ebd-b9ec-79a34d79a58a", "embedding": null, "doc_hash": "af3119282e7ea80dc83e1f3b8b74f6456c58a07a49b96a27833accd92e18b912", "extra_info": null, "node_info": {"start": 0, "end": 36, "_node_type": "1"}, "relationships": {"1": "6fd92e3d-4ef7-4c17-8086-29da7a14a205"}}, "__type__": "1"}, "7fba70df-407b-4ab1-a522-e0da9950c6d5": {"__data__": {"text": "\n\nStandard Library and Framework Specifications\n- Move Stdlib\n- Aptos Stdlib\n- Aptos Framework\n- Diem Framework\n\n", "doc_id": "7fba70df-407b-4ab1-a522-e0da9950c6d5", "embedding": null, "doc_hash": "09e1164dfdd640b3335a95aaaf65dd34cccc88ba3b66fb253d96eab5dca4035f", "extra_info": null, "node_info": {"start": 0, "end": 113, "_node_type": "1"}, "relationships": {"1": "28bc469f-1271-484b-a3b1-604e8d7728ef"}}, "__type__": "1"}, "1f627210-df9b-44e1-a905-cbfa3b833b6c": {"__data__": {"text": "\n\nExamples\n\n- `hello_prover` example\n- `basic-coin` example\n- `math-puzzle` example\n- `rounding-error` example\n- `verify-sort` example\n- Move Prover Examples by Zellic\n\n", "doc_id": "1f627210-df9b-44e1-a905-cbfa3b833b6c", "embedding": null, "doc_hash": "e14090b02ca249985fa82d6f89a1a0e3ec94314fe2177d49382437a4dced8a6b", "extra_info": null, "node_info": {"start": 0, "end": 169, "_node_type": "1"}, "relationships": {"1": "e5232443-99cc-49d6-b355-aeafc9ac6d9b"}}, "__type__": "1"}, "6fdd4c7d-cdf3-4462-8d7e-0f3fb923b5eb": {"__data__": {"text": "\n\nTutorials\n\n- The Move Tutorial, steps 7 and 8\n- Verify Smart Contracts in Aptos with the Move Prover by MoveBit\n- The Move Prover: A Practical Guide by OtterSec\n- Formal Verification, the Move Language, and the Move Prover by Certik\n- The Move Prover: Quality Assurance of Formal Verification by Certik\n\n", "doc_id": "6fdd4c7d-cdf3-4462-8d7e-0f3fb923b5eb", "embedding": null, "doc_hash": "e3d833641e062abba78b2d5edc8b28b25a8c897f6a6f9b8e3c635bf0bd3eb612", "extra_info": null, "node_info": {"start": 0, "end": 306, "_node_type": "1"}, "relationships": {"1": "76d1af34-31fa-4897-b1af-ade4d0310ff6"}}, "__type__": "1"}, "f28091c4-aff5-4a48-8518-605883333786": {"__data__": {"text": "\n\nPresentations\n\n- Verifying Smart Contracts with Move Prover by Wolfgang Grieskamp (video)\n- Formal verification of Move programs for the Libra blockchain by David Dill (video)\n- Move Prover - Best Practices & Tricks - A User\u2019s Perspective by Xu-Dong@MoveBit (slides)\n\n", "doc_id": "f28091c4-aff5-4a48-8518-605883333786", "embedding": null, "doc_hash": "4723eaca7473a82cfb46d222d030e0dada82eb95ae46a14f2fd66f94c2e48f43", "extra_info": null, "node_info": {"start": 0, "end": 270, "_node_type": "1"}, "relationships": {"1": "a02d4b5d-0a47-48e6-b326-34383214a156"}}, "__type__": "1"}, "5b97a494-f3c2-45fd-8b5f-5ff218a4ec5a": {"__data__": {"text": "\n\nConference papers\n\n- Zhong, Jingyi Emma, Kevin Cheang, Shaz Qadeer, Wolfgang Grieskamp, Sam Blackshear, Junkil Park, Yoni Zohar, Clark Barrett, and David L. Dill. \"The move prover.\" In *International Conference on Computer Aided Verification*, pp. 137-150. Springer, Cham, 2020.Harvard\n    - https://research.facebook.com/publications/the-move-prover/\n- Dill, David, Wolfgang Grieskamp, Junkil Park, Shaz Qadeer, Meng Xu, and Emma Zhong. \"Fast and reliable formal verification of smart contracts with the Move prover.\" In *International Conference on Tools and Algorithms for the Construction and Analysis of Systems*, pp. 183-200. Springer, Cham, 2022.Harvard\n    - https://research.facebook.com/publications/fast-and-reliable-formal-verification-of-smart-contracts-with-the-move-prover/\n\n", "doc_id": "5b97a494-f3c2-45fd-8b5f-5ff218a4ec5a", "embedding": null, "doc_hash": "f7d94f369b5121cbc7e6906aef9f9370a8011bf025e265203edc239f5eacc90e", "extra_info": null, "node_info": {"start": 0, "end": 792, "_node_type": "1"}, "relationships": {"1": "ccf43b44-db36-498f-ab8d-72e5b4f74f7b"}}, "__type__": "1"}, "b63c6a83-de90-416a-aa53-b9c328617c3b": {"__data__": {"text": "\n\nIntegrate with the Aptos Blockchain\n\nIf you provide blockchain services to your customers and wish to add the Aptos blockchain to your platform, then this guide is for you. This system integrators guide will walk you through all you need to integrate the Aptos blockchain into your platform.\n\n", "doc_id": "b63c6a83-de90-416a-aa53-b9c328617c3b", "embedding": null, "doc_hash": "30d9fba0e41cc488379069a192b046418dca379c939502cfe092ebe4d6b516de", "extra_info": null, "node_info": {"start": 0, "end": 295, "_node_type": "1"}, "relationships": {"1": "c58962f2-6d6e-4015-b59e-d096954f8424"}}, "__type__": "1"}, "ded2e9a6-ef95-43be-87e2-9227cb1bdb2a": {"__data__": {"text": "\n\nOverview\n\nThis document will guide you through the following tasks to integrate with Aptos:\n1. Prepare an environment for testing.\n1. Create an account on the blockchain.\n1. Exchange account identifiers with another entity on the blockchain, for example, to perform swaps.\n1. Create a transaction.\n1. Obtain a gas estimate and validate the transaction for correctness.\n1. Submit the transaction to the blockchain.\n1. Wait for the outcome of the transaction.\n1. Query historical transactions and interactions for a given account with a specific account, i.e., withdraws and deposits.\n\n", "doc_id": "ded2e9a6-ef95-43be-87e2-9227cb1bdb2a", "embedding": null, "doc_hash": "e4f82a0f6929bd9d8948e0cc8206a22761c2e3b41d5dcc35777f7309e2394f75", "extra_info": null, "node_info": {"start": 0, "end": 586, "_node_type": "1"}, "relationships": {"1": "600f88ea-66a9-4424-aedd-943712ba9c5a"}}, "__type__": "1"}, "6dcd0992-a9c9-413f-a15a-87df2ef6e9b1": {"__data__": {"text": "\n\nGetting Started\n\nIn order to get started you'll need to select a network and pick your set of tools. There are also a handful of SDKs to help accelerate development.\n\n", "doc_id": "6dcd0992-a9c9-413f-a15a-87df2ef6e9b1", "embedding": null, "doc_hash": "b59c4d77832b1e2c60195d15456c9aca7a052866e190262b234c2336b3e7c579", "extra_info": null, "node_info": {"start": 0, "end": 169, "_node_type": "1"}, "relationships": {"1": "2a69d1ec-4b09-4d09-b4ca-16be643faf22"}}, "__type__": "1"}, "44dfba42-53a3-4b83-ba1c-027c7bbe597b": {"__data__": {"text": "\n\nChoose a network\n\nThere are four well-supported networks for integrating with the Aptos blockchain:\n\n1. Local testnet -- our standalone tool for local development against a known version of the codebase with no external network.\n1. Devnet -- a shared resource for the community, data resets weekly, weekly update from aptos-core main branch.\n1. Testnet -- a shared resource for the community, data will be preserved, network configuration will mimic Mainnet.\n1. Mainnet -- a production network with real assets.\n\nSee Aptos Blockchain Deployments for full details on each environment.\n\n", "doc_id": "44dfba42-53a3-4b83-ba1c-027c7bbe597b", "embedding": null, "doc_hash": "64f3dddf17b83f30d8fed0865fff18ae01bf335b5214a9c2f33536681ba6ab9f", "extra_info": null, "node_info": {"start": 0, "end": 587, "_node_type": "1"}, "relationships": {"1": "2aea2173-26fa-4de2-b15f-8e977322dcaa"}}, "__type__": "1"}, "c0e598d5-a09f-4da7-a720-a81427dbb9c1": {"__data__": {"text": "\n\nRun a local testnet\n\nThere are two options for running a local testnet:\n* Directly run a local testnet using either the Aptos-core source code or a Docker image. These paths are useful for testing changes to the Aptos-core codebase or framework, or for building services on top of the Aptos blockchain, respectively.\n* Install the Aptos CLI and 2) start a local node with a faucet. This path is useful for developing on the Aptos blockchain, debugging Move contracts, and testing node operations.\n\nEither of these methods will expose a REST API service at `http://127.0.0.1:8080` and a Faucet API service at `http://127.0.0.1:8000` for option 1 run a local testnet or `http://127.0.0.1:8081` for option 2 install the Aptos CLI. The applications will output the location of the services.\n\n", "doc_id": "c0e598d5-a09f-4da7-a720-a81427dbb9c1", "embedding": null, "doc_hash": "2a4e2f1b6d1eec2201739055d468494d26522508cd80852f753c9c8f436b1aad", "extra_info": null, "node_info": {"start": 0, "end": 790, "_node_type": "1"}, "relationships": {"1": "f52a23c6-0f46-4878-97c5-21834789748b"}}, "__type__": "1"}, "78f51487-51af-4daf-a9c2-6524c42eca04": {"__data__": {"text": "\n\nProduction network access\n\n\n  \n    \n      REST API: https://fullnode.devnet.aptoslabs.com/v1\n      REST API Spec: https://fullnode.devnet.aptoslabs.com/v1/spec#/\n      Indexer API: https://indexer-devnet.staging.gcp.aptosdev.com/v1/graphql\n      Faucet API: https://faucet.devnet.aptoslabs.com\n      Indexer GraphQL\n    \n  \n  \n    \n      REST API: https://fullnode.testnet.aptoslabs.com/v1\n      REST API Spec: https://fullnode.testnet.aptoslabs.com/v1/spec#/\n      Indexer API: https://indexer-testnet.staging.gcp.aptosdev.com/v1/graphql\n      Faucet API: https://faucet.testnet.aptoslabs.com\n      Indexer GraphQL\n    \n  \n  \n    \n      REST API: https://fullnode.mainnet.aptoslabs.com/v1\n      REST API Spec: https://fullnode.mainnet.aptoslabs.com/v1/spec#/\n      Indexer API: https://indexer.mainnet.aptoslabs.com/v1/graphql\n      Faucet: N/A\n      Indexer GraphQL\n    \n  \n\n\n", "doc_id": "78f51487-51af-4daf-a9c2-6524c42eca04", "embedding": null, "doc_hash": "4936033da9d23bd6f2eb0f85787c5a4858c7f299d76f56c4cbbb060ef459ccdb", "extra_info": null, "node_info": {"start": 0, "end": 880, "_node_type": "1"}, "relationships": {"1": "62411fdb-4bd5-4d1e-acfe-a2b7d86afb21"}}, "__type__": "1"}, "a80bf28c-2e01-48f8-87c3-c69cbada69c8": {"__data__": {"text": "\n\nSDKs and tools\n\nAptos currently provides three SDKs:\n1. Typescript\n2. Python\n3. Rust\n\nAlmost all developers will benefit from exploring the CLI. Using the CLI demonstrates how the CLI can be used to which includes creating accounts, transferring coins, and publishing modules.\n\n", "doc_id": "a80bf28c-2e01-48f8-87c3-c69cbada69c8", "embedding": null, "doc_hash": "c83db5d41928cfaf1fd032dedfe6a977e84a854d7cd78be9f7c7981a38488120", "extra_info": null, "node_info": {"start": 0, "end": 280, "_node_type": "1"}, "relationships": {"1": "22d932e2-0133-44a5-8c4f-edc46ac69cb3"}}, "__type__": "1"}, "3ca1c72c-fe1c-457f-abfe-3f7ab1214f4e": {"__data__": {"text": "\n\nAccounts on Aptos\n\nAn\u00a0account\u00a0represents an entity on the Aptos blockchain that can send transactions. Each account is identified by a particular 32-byte account address and is a container for Move modules and resources. On Aptos, accounts must be created on-chain prior to any blockchain operations involving that account. The Aptos framework supports implicitly creating accounts when transferring Aptos coin via\u00a0`aptos_account::transfer` or explicitly via `aptos_account::create_account`.\n\nAt creation, an Aptos account contains:\n* A resource containing Aptos Coin and deposit and withdrawal of coins from that resource.\n* An authentication key associated with their current public, private key(s).\n* A strictly increasing sequence number that represents the account's next transaction's sequence number to prevent replay attacks.\n* A strictly increasing number that represents the next distinct GUID creation number.\n* An event handle for all new types of coins added to the account.\n* An event handle for all key rotations for the account.\n\nRead more about Accounts and set one up.\n\n", "doc_id": "3ca1c72c-fe1c-457f-abfe-3f7ab1214f4e", "embedding": null, "doc_hash": "dbcda4a8ad6cbca3ce10d524e390e5bcc014f64fbc1c811e052feff3fb8827dd", "extra_info": null, "node_info": {"start": 0, "end": 1090, "_node_type": "1"}, "relationships": {"1": "54dd75a3-9ce8-4959-bb07-45d5c2363a0b"}}, "__type__": "1"}, "c7d5f6b3-7062-4f0b-9bf4-df5452f7a8c5": {"__data__": {"text": "\n\nTransactions\n\nAptos\u00a0transactions\u00a0are encoded in\u00a0Binary Canonical Serialization (BCS). Transactions contain information such as the sender\u2019s account address, authentication from the sender, the desired operation to be performed on the Aptos blockchain, and the amount of gas the sender is willing to pay to execute the transaction.\n\nRead more in Transactions and States.\n\n", "doc_id": "c7d5f6b3-7062-4f0b-9bf4-df5452f7a8c5", "embedding": null, "doc_hash": "65c456c3993cd9e944155a53463c22e5bdd4714baa16f34320d3c15727b451b8", "extra_info": null, "node_info": {"start": 0, "end": 373, "_node_type": "1"}, "relationships": {"1": "30361869-3185-4e0f-af29-c866d7ddcf22"}}, "__type__": "1"}, "cf3be81e-82bf-490e-9b72-968d88334bc5": {"__data__": {"text": "\n\nGenerating transactions\n\nAptos supports two methods for constructing transactions:\n\n- Using the Aptos client libraries to generate native BCS transactions.\n- Constructing JSON-encoded objects and interacting with the REST API to generate native transactions.\n\nThe preferred approach is to directly generate native BCS transactions. Generating them via the REST API enables rapid development at the cost of trusting the fullnode to generate the transaction correctly.\n\n", "doc_id": "cf3be81e-82bf-490e-9b72-968d88334bc5", "embedding": null, "doc_hash": "62264e304c84acadf405941142734d9b5c4a8f84286a19b755e26c6914838e0f", "extra_info": null, "node_info": {"start": 0, "end": 470, "_node_type": "1"}, "relationships": {"1": "3cda91a2-269e-47b6-ae87-b2ca335fdc3a"}}, "__type__": "1"}, "a24f0ebc-23ad-41b7-80d4-211acefc3f7b": {"__data__": {"text": "\n\nBCS-encoded transactions\n\nBCS-encoded transactions can be submitted to the\u00a0`/transactions`\u00a0endpoint but must specify\u00a0`Content-Type: application/x.aptos.signed_transaction+bcs`\u00a0in the HTTP headers. This will return a transaction submission result that, if successful, contains a transaction hash in the\u00a0`hash`\u00a0field.\n\n", "doc_id": "a24f0ebc-23ad-41b7-80d4-211acefc3f7b", "embedding": null, "doc_hash": "d8aa8273916dc2a1451fa752a1034083e771be6923ca49096141b849fadca9fe", "extra_info": null, "node_info": {"start": 0, "end": 319, "_node_type": "1"}, "relationships": {"1": "7b59ebee-ff08-4dae-ae61-86596c04f0b6"}}, "__type__": "1"}, "8d5fe856-19ea-4265-a13b-54f9a04e0f56": {"__data__": {"text": "\n\nJSON-encoded transactions\n\nJSON-encoded transactions can be generated via the\u00a0REST API, following these steps:\n\n1. First construct an appropriate JSON payload for the\u00a0`/transactions/encode_submission`\u00a0endpoint as demonstrated in the\u00a0Python SDK.\n1. The output of the above contains an object containing a\u00a0`message` that must be signed with the sender\u2019s private key locally.\n1. Extend the original JSON payload with the signature information and post it to the\u00a0`/transactions`\u00a0endpoint. This will return a transaction submission result that, if successful, contains a transaction hash in the\u00a0`hash`\u00a0field.\n\nJSON-encoded transactions allow for rapid development and support seamless ABI conversions of transaction arguments to native types. However, most system integrators prefer to generate transactions within their own tech stack. Both the\u00a0TypeScript SDK\u00a0and\u00a0Python SDK\u00a0support generating BCS transactions.\n\n", "doc_id": "8d5fe856-19ea-4265-a13b-54f9a04e0f56", "embedding": null, "doc_hash": "72731c3469d8827c053a4cbb5af1fe88b23161147baa301fc80ed04717d39ea4", "extra_info": null, "node_info": {"start": 0, "end": 911, "_node_type": "1"}, "relationships": {"1": "8a2fa8bb-14e4-48e8-a733-349f8cb91e5c"}}, "__type__": "1"}, "a8b3f668-087b-4fa3-b9b8-2bd1a6a10210": {"__data__": {"text": "\n\nTypes of transactions\n\nWithin a given transaction, the target of execution can be one of two types:\n\n- An entry point (formerly known as script function)\n- A script (payload)\n\nBoth Python and TypeScript support the generation of transactions that target entry points. This guide points out many of those entry points, such as `aptos_account::transfer` and `aptos_account::create_account`.\n\nMost basic operations on the Aptos blockchain should be available via entry point calls. While one could submit multiple transactions calling entry points in series, such operations benefit from being called atomically from a single transaction. A script payload transaction can call any public (entry) function defined within any module. Here's an example Move script that uses a MultiAgent transaction to extract funds from two accounts and deposit them into two other accounts. This is a Python example that uses the bytecode generated by compiling that script. Currently there is limited support for script payloads in TypeScript.\n\n", "doc_id": "a8b3f668-087b-4fa3-b9b8-2bd1a6a10210", "embedding": null, "doc_hash": "794b4695aab148cc1a928751df0ff2089111439798e26f5a92e915b37e6b9b2a", "extra_info": null, "node_info": {"start": 0, "end": 1028, "_node_type": "1"}, "relationships": {"1": "399f65fa-63c4-4d44-a458-b47dd8fc666d"}}, "__type__": "1"}, "17d030fb-4e7f-40e9-8dfc-f4e50a925048": {"__data__": {"text": "\n\nStatus of a transaction\n\nObtain transaction status by querying the API\u00a0`/transactions/by_hash/{hash}`\u00a0with the hash returned during the submission of the transaction.\n\nA reasonable strategy for submitting transactions is to limit their lifetime to 30 to 60 seconds, and polling that API at regular intervals until success or several seconds after that time has elapsed. If there is no commitment on-chain, the transaction was likely discarded.\n\n", "doc_id": "17d030fb-4e7f-40e9-8dfc-f4e50a925048", "embedding": null, "doc_hash": "bd824f80239d6a8958da88d76623465d3f18cafe3f33a004189bd93f834b9b11", "extra_info": null, "node_info": {"start": 0, "end": 447, "_node_type": "1"}, "relationships": {"1": "13508d43-153f-4c09-9f17-1ea07fe6190f"}}, "__type__": "1"}, "1d9fc99d-fe46-4db5-b783-01eeb84d9cfc": {"__data__": {"text": "\n\nTesting transactions or transaction pre-execution\n\nTo facilitate evaluation of transactions as well as gas estimation, Aptos supports a simulation API that does not require and should not contain valid signatures on transactions.\n\nThe simulation API is a synchronous API that executes a transaction and returns the output inclusive of gas usage. The simulation API can be accessed by submitting a transaction to\u00a0`/transactions/simulate`.\n\nBoth the Typescript SDK and Python SDK support the simulation API. Note the output and gas used may change based upon the state of the account. For gas estimations, we recommend that the maximum gas amount be larger than the amount quoted by this API.\n\n", "doc_id": "1d9fc99d-fe46-4db5-b783-01eeb84d9cfc", "embedding": null, "doc_hash": "abcfa99c700d9862d7b6cc272f59c01e56b3affd8e42073b2c95e3b4924ed1a2", "extra_info": null, "node_info": {"start": 0, "end": 694, "_node_type": "1"}, "relationships": {"1": "c36d01de-f694-4fc6-a364-8e3d15c5e1a2"}}, "__type__": "1"}, "7e085521-ad64-4d51-907d-fa679fc682d5": {"__data__": {"text": "\n\nViewing current and historical state\n\nMost integrations into the Aptos blockchain benefit from a holistic and comprehensive overview of the current and historical state of the blockchain. Aptos provides historical transactions, state, and events, all the result of transaction execution.\n\n* Historical transactions specify the execution status, output, and tie to related events. Each transaction has a unique version number associated with it that dictates its global sequential ordering in the history of the blockchain ledger.\n* The state is the representation of all transaction outputs up to a specific version. In other words, a state version is the accumulation of all transactions inclusive of that transaction version.\n* As transactions execute, they may emit events. Events are hints about changes in on-chain data.\n\nThe storage service on a node employs two forms of pruning that erase data from nodes:\n\n* state\n* events, transactions, and everything else\n\nWhile either of these may be disabled, storing the state versions is not particularly sustainable.\n\nEvents and transactions pruning can be disabled via setting the `enable_ledger_pruner` to `false`. This is default behavior in Mainnet. In the near future, Aptos will provide indexers that mitigate the need to directly query from a node.\n\nThe REST API offers querying transactions and events in these ways:\n\n* Transactions for an account\n* Transactions by version\n* Events by event handle\n\n", "doc_id": "7e085521-ad64-4d51-907d-fa679fc682d5", "embedding": null, "doc_hash": "754810699ae13a926796c6e27fb0c2c58ca7f17dc29c9f0fd8240fc39bdcd1bc", "extra_info": null, "node_info": {"start": 0, "end": 1460, "_node_type": "1"}, "relationships": {"1": "1f35b895-e184-4819-8372-fcc26c248eef"}}, "__type__": "1"}, "60c57da6-c438-442b-b963-ef15c8b5c190": {"__data__": {"text": "\n\nExchanging and tracking coins\n\nAptos has a standard Coin type. Different types of coins can be represented in this type through the use of distinct structs that represent the type parameter or generic for `Coin`.\n\nCoins are stored within an account under the resource `CoinStore`. At account creation, each user has the resource `CoinStore` or `CoinStore`, for short. Within this resource is the Aptos coin: `Coin`.\n\n", "doc_id": "60c57da6-c438-442b-b963-ef15c8b5c190", "embedding": null, "doc_hash": "7515fadb90a261fcadbc7afccc0618972b118bfcc6ebd8c140c846519971568d", "extra_info": null, "node_info": {"start": 0, "end": 419, "_node_type": "1"}, "relationships": {"1": "e36dda78-0a4d-4cff-8faa-3b1b7d99d176"}}, "__type__": "1"}, "5b3e12cb-17e4-4e6f-a0aa-8f5c584365a2": {"__data__": {"text": "\n\nTransferring coins between users\n\nCoins can be transferred between users via the `coin::transfer` function for all coins and `aptos_account::transfer` for Aptos coins. The advantage of the latter function is that it creates the destination account if it does not exist.\n\n:::caution\nIt is important to note that if an account has not registered a `CoinStore` for a given `T`, then any transfer of type `T` to that account will fail.\n:::\n\n", "doc_id": "5b3e12cb-17e4-4e6f-a0aa-8f5c584365a2", "embedding": null, "doc_hash": "1f226948f253622aec761aff82263c5a46cc626a84553b806b837db9e2594cfc", "extra_info": null, "node_info": {"start": 0, "end": 439, "_node_type": "1"}, "relationships": {"1": "0decf9c1-23bd-479b-ac7f-3e4909a8dbea"}}, "__type__": "1"}, "d968534c-11e2-47e1-83f0-7223297ec686": {"__data__": {"text": "\n\nCurrent balance for a coin\n\nThe current balance for a `Coin` where `T` is the Aptos coin is available at the account resources URL: `https://{rest_api_server}/accounts/{address}/resource/0x1::coin::CoinStore`. The balance is stored within `coin::amount`. The resource also contains the total number of deposit and withdraw events, and the `counter` value within `deposit_events` and `withdraw_events`, respectively.\n\n```\n{\n  \"type\": \"0x1::coin::CoinStore\",\n  \"data\": {\n    \"coin\": {\n      \"value\": \"3927\"\n    },\n    \"deposit_events\": {\n      \"counter\": \"1\",\n      \"guid\": {\n        \"id\": {\n          \"addr\": \"0xcb2f940705c44ba110cd3b4f6540c96f2634938bd5f2aabd6946abf12ed88457\",\n          \"creation_num\": \"2\"\n        }\n      }\n    },\n    \"withdraw_events\": {\n      \"counter\": \"1\",\n      \"guid\": {\n        \"id\": {\n          \"addr\": \"0xcb2f940705c44ba110cd3b4f6540c96f2634938bd5f2aabd6946abf12ed88457\",\n          \"creation_num\": \"3\"\n        }\n      }\n    }\n  }\n}\n```\n\n", "doc_id": "d968534c-11e2-47e1-83f0-7223297ec686", "embedding": null, "doc_hash": "a1b291f2ac874cdd2c3fa9b8d0ad504d2ed6cfb68dd7fb1c8562efa82c010bad", "extra_info": null, "node_info": {"start": 0, "end": 967, "_node_type": "1"}, "relationships": {"1": "f42f6e3a-b94d-4ec6-8849-442bd4150082"}}, "__type__": "1"}, "44f32fc5-0f81-4726-a430-210215598d07": {"__data__": {"text": "\n\nQuerying transactions\n\nIn Aptos, each transaction is committed as a distinct version to the blockchain. This allows for the convenience of sharing committed transactions by their version number; to do so, query: `https://{rest_server_api}/transactions/by_version/{version}`\n\nTransactions submitted by an account can also be queried via the following URL where the `sequence_number` matches the sequence number of the transaction: `https://{rest_server_api}/account/{address}/transactions?start={sequence_number}&limit=1`\n\nA transfer transaction would appear as follows:\n\n```\n{\n  \"version\": \"13629679\",\n  \"gas_used\": \"4\",\n  \"success\": true,\n  \"vm_status\": \"Executed successfully\",\n  \"changes\": [\n    {\n      \"address\": \"0xb258b91eee04111039320a85b0c24a2dd433909e14a6b5c32ee722e0fdecfddc\",\n      \"data\": {\n        \"type\": \"0x1::coin::CoinStore\",\n        \"data\": {\n          \"coin\": {\n            \"value\": \"1000\"\n          },\n          \"deposit_events\": {\n            \"counter\": \"1\",\n            \"guid\": {\n              \"id\": {\n                \"addr\": \"0x5098df8e7969b58ab3bd2d440c6203f64c60a1fd5c08b9d4abe6ae4216246c3e\",\n                \"creaton_num\": \"2\",\n              }\n            }\n          },\n          ...\n        }\n      },\n      \"type\": \"write_resource\"\n    },\n    ...\n  ],\n  \"sender\": \"0x810026ca8291dd88b5b30a1d3ca2edd683d33d06c4a7f7c451d96f6d47bc5e8b\",\n  \"sequence_number\": \"0\",\n  \"max_gas_amount\": \"2000\",\n  \"gas_unit_price\": \"1\",\n  \"expiration_timestamp_secs\": \"1660616127\",\n  \"payload\": {\n    \"function\": \"0x1::coin::transfer\",\n    \"type_arguments\": [\n      \"0x1::aptos_coin::AptosCoin\"\n    ],\n    \"arguments\": [\n      \"0x5098df8e7969b58ab3bd2d440c6203f64c60a1fd5c08b9d4abe6ae4216246c3e\",\n      \"1000\"\n    ],\n    \"type\": \"entry_function_payload\"\n  },\n  \"events\": [\n    {\n      \"key\": \"0x0300000000000000810026ca8291dd88b5b30a1d3ca2edd683d33d06c4a7f7c451d96f6d47bc5e8b\",\n      \"guid\": {\n        \"id\": {\n          \"addr\": \"0x810026ca8291dd88b5b30a1d3ca2edd683d33d06c4a7f7c451d96f6d47bc5e8b\",\n         ", "doc_id": "44f32fc5-0f81-4726-a430-210215598d07", "embedding": null, "doc_hash": "b7e4be50883a7a8eb9ac4aca0512d89beec04e621916308822f7c4017c6870cb", "extra_info": null, "node_info": {"start": 0, "end": 2015, "_node_type": "1"}, "relationships": {"1": "5e24f85e-fd1c-40d7-8155-2bc8cf6dbe46", "3": "d2436ae2-beb9-41b0-a224-6c85f830f846"}}, "__type__": "1"}, "d2436ae2-beb9-41b0-a224-6c85f830f846": {"__data__": {"text": "         \"creation_num\": \"3\"\n          }\n        }\n      },\n      \"sequence_number\": \"0\",\n      \"type\": \"0x1::coin::WithdrawEvent\",\n      \"data\": {\n        \"amount\": \"1000\"\n      }\n    },\n    {\n      \"key\": \"0x02000000000000005098df8e7969b58ab3bd2d440c6203f64c60a1fd5c08b9d4abe6ae4216246c3e\",\n      guid\": {\n        \"id\": {\n          \"addr\": \"0x5098df8e7969b58ab3bd2d440c6203f64c60a1fd5c08b9d4abe6ae4216246c3e\",\n          \"creation_num\": \"2\"\n          }\n        }\n      },\n      \"sequence_number\": \"0\",\n      \"type\": \"0x1::coin::DepositEvent\",\n      \"data\": {\n        \"amount\": \"1000\"\n      }\n    }\n  ],\n  \"timestamp\": \"1660615531147935\",\n  \"type\": \"user_transaction\"\n}\n\n```\n\nHere is a breakdown of the information in a transaction:\n* `version` indicates the globally unique identifier for this transaction, its ordered position in all the committed transactions on the blockchain\n* `sender` is the account address of the entity that submitted the transaction\n* `gas_used` is the units paid for executing the transaction\n* `success` and `vm_status` indicate whether or not the transaction successfully executed and any reasons why it might not have\n* `changes` include the final values for any state resources that have been modified during the execution of the transaction\n* `events` contain all the events emitted during the transaction execution\n* `timetstamp` is the near real-time timestamp of the transaction's execution\n\nIf `success` is false, then `vm_status` will contain an error code or message that resulted in the transaction failing to succeed. When `success` is false, `changes` will be limited to gas deducted from the account and the sequence number incrementing. There will be no `events`.\n\nEach event in `events` is differentiated by a `key`. The `key` is derived from the `guid` in `changes`. Specifically, the `key` is a 40-byte hex string where the first eight bytes (or 16 characters) are the little endian representation of the `creation_num` in the `guid` of the `changes` event, and the remaining characters are the account address.\n\nAs events do not dictate what emitted them, it is imperative to track the path in `changes` to determine the source of an event. In particular, each `CoinStore` has both a `WithdrawEvent` and a `DepositEvent`, based upon the type of coin. In order to determine which coin type is used in a transaction, an indexer can compare the `guid::creation_num` in a `changes` event combined with the address to the `key` for events in `events`.\n\nUsing the above example, `events[1].guid` is equivalent to `changes[0].data.data.deposit_events.guid`, which is `{\"addr\": \"0x5098df8e7969b58ab3bd2d440c6203f64c60a1fd5c08b9d4abe6ae4216246c3e\", \"creation_num\": \"2\"}`.\n\n:::tip\nThe `key` field will be going away in favor of `guid`\n:::\n\n", "doc_id": "d2436ae2-beb9-41b0-a224-6c85f830f846", "embedding": null, "doc_hash": "dcc5b7c1359bf139f8ad3fd4798bd9ed496e23a51d6959af0c00c888e98c4f65", "extra_info": null, "node_info": {"start": 2007, "end": 4785, "_node_type": "1"}, "relationships": {"1": "5e24f85e-fd1c-40d7-8155-2bc8cf6dbe46", "2": "44f32fc5-0f81-4726-a430-210215598d07"}}, "__type__": "1"}, "1417c6d2-51cd-462d-9c9d-c18f11f3c337": {"__data__": {"text": "\n\nQuerying events\n\nAptos provides clear and canonical events for all withdraw and deposit of coins. This can be used in coordination with the associated transactions to present to a user the change of their account balance over time, when that happened, and what caused it. With some amount of additional parsing, metadata such as the transaction type and the other parties involved can also be shared.\n\nQuery events by handle URL: `https://{rest_api_server}/accounts/{address}/events/0x1::coin::CoinStore/withdraw_events`\n\n```\n[\n  {\n    \"version\":\"13629679\",\n    \"key\": \"0x0300000000000000cb2f940705c44ba110cd3b4f6540c96f2634938bd5f2aabd6946abf12ed88457\",\n    \"guid\": {\n      \"id\": {\n        \"addr\": \"0x810026ca8291dd88b5b30a1d3ca2edd683d33d06c4a7f7c451d96f6d47bc5e8b\",\n        \"creation_num\": \"3\"\n        }\n      }\n    },\n    \"sequence_number\": \"0\",\n    \"type\": \"0x1::coin::WithdrawEvent\",\n    \"data\": {\n      \"amount\": \"1000\"\n    }\n  }\n]\n```\n\nGather more information from the transaction that generated the event by querying `https://{rest_server_api}/transactions/by_version/{version}` where `{version}` is the same value as the `{version}` in the event query.\n\n:::tip\n\nWhen tracking full movement of coins, normally events are sufficient. `0x1::aptos_coin::AptosCoin`, however, requires considering `gas_used` for each transaction sent from the given account since it represents gas in Aptos. To reduce unnecessary overhead, extracting gas fees due to transactions does not emit an event. All transactions for an account can be retrieved from this API: `https://{rest_server_api}/accounts/{address}/transactions`\n\n:::\n\n", "doc_id": "1417c6d2-51cd-462d-9c9d-c18f11f3c337", "embedding": null, "doc_hash": "147bf195d17083c82d9c7ca100ac39c0eb88dbf3d3317f4175b56577a2526b6f", "extra_info": null, "node_info": {"start": 0, "end": 1624, "_node_type": "1"}, "relationships": {"1": "1dcc5f25-5cea-4c28-96b0-855bc0bf7ab1"}}, "__type__": "1"}, "a2090b78-5c81-4310-a6b4-1f4826399b37": {"__data__": {"text": "\n\nTracking coin balance changes\n\nConsider the transaction from the earlier section, but now with an arbitrary coin `0x1337::my_coin::MyCoin` and some gas parameters changed:\n```\n{\n  \"version\": \"13629679\",\n  \"gas_used\": \"20\",\n  \"success\": true,\n  \"vm_status\": \"Executed successfully\",\n  \"changes\": [\n    {\n      \"address\": \"0xb258b91eee04111039320a85b0c24a2dd433909e14a6b5c32ee722e0fdecfddc\",\n      \"data\": {\n        \"type\": \"0x1::coin::CoinStore\",\n        \"data\": {\n          \"coin\": {\n            \"value\": \"1000\"\n          },\n          \"deposit_events\": {\n            \"counter\": \"1\",\n            \"guid\": {\n              \"id\": {\n                \"addr\": \"0x5098df8e7969b58ab3bd2d440c6203f64c60a1fd5c08b9d4abe6ae4216246c3e\",\n                \"creaton_num\": \"2\",\n              }\n            }\n          },\n          ...\n        }\n      },\n      \"type\": \"write_resource\"\n    },\n    ...\n  ],\n  \"sender\": \"0x810026ca8291dd88b5b30a1d3ca2edd683d33d06c4a7f7c451d96f6d47bc5e8b\",\n  \"sequence_number\": \"0\",\n  \"max_gas_amount\": \"2000\",\n  \"gas_unit_price\": \"110\",\n  \"expiration_timestamp_secs\": \"1660616127\",\n  \"payload\": {\n    \"function\": \"0x1::coin::transfer\",\n    \"type_arguments\": [\n      \"0x1337::my_coin::MyCoin\"\n    ],\n    \"arguments\": [\n      \"0x5098df8e7969b58ab3bd2d440c6203f64c60a1fd5c08b9d4abe6ae4216246c3e\",\n      \"1000\"\n    ],\n    \"type\": \"entry_function_payload\"\n  },\n  \"events\": [\n    {\n      \"key\": \"0x0300000000000000810026ca8291dd88b5b30a1d3ca2edd683d33d06c4a7f7c451d96f6d47bc5e8b\",\n      \"guid\": {\n        \"id\": {\n          \"addr\": \"0x810026ca8291dd88b5b30a1d3ca2edd683d33d06c4a7f7c451d96f6d47bc5e8b\",\n          \"creation_num\": \"3\"\n          }\n        }\n      },\n      \"sequence_number\": \"0\",\n      \"type\": \"0x1::coin::WithdrawEvent\",\n      \"data\": {\n        \"amount\": \"1000\"\n      }\n    },\n    {\n  ", "doc_id": "a2090b78-5c81-4310-a6b4-1f4826399b37", "embedding": null, "doc_hash": "ce48cadcbf499908b2918d69d15d30bb21205b4707708c7adbb3b37a8b756c9d", "extra_info": null, "node_info": {"start": 0, "end": 1804, "_node_type": "1"}, "relationships": {"1": "bf41b39c-cf3a-4fcf-8620-bd592e617f8a", "3": "43915f52-f078-4567-bc8b-a50f65437baa"}}, "__type__": "1"}, "43915f52-f078-4567-bc8b-a50f65437baa": {"__data__": {"text": "     }\n    },\n    {\n      \"key\": \"0x02000000000000005098df8e7969b58ab3bd2d440c6203f64c60a1fd5c08b9d4abe6ae4216246c3e\",\n      guid\": {\n        \"id\": {\n          \"addr\": \"0x5098df8e7969b58ab3bd2d440c6203f64c60a1fd5c08b9d4abe6ae4216246c3e\",\n          \"creation_num\": \"2\"\n          }\n        }\n      },\n      \"sequence_number\": \"0\",\n      \"type\": \"0x1::coin::DepositEvent\",\n      \"data\": {\n        \"amount\": \"1000\"\n      }\n    }\n  ],\n  \"timestamp\": \"1660615531147935\",\n  \"type\": \"user_transaction\"\n}\n```\n\nThere are three balance changes in this transaction:\n1. A withdrawal of `1000` of `0x1337::my_coin::MyCoin` from the transaction sending account `0x810026ca8291dd88b5b30a1d3ca2edd683d33d06c4a7f7c451d96f6d47bc5e8b`\n2. A deposit of `1000` of `0x1337::my_coin::MyCoin` to receiving account `0x5098df8e7969b58ab3bd2d440c6203f64c60a1fd5c08b9d4abe6ae4216246c3e`\n3. A gas fee `2200` of `0x1::aptos_coin::AptosCoin` from the sending account `0x810026ca8291dd88b5b30a1d3ca2edd683d33d06c4a7f7c451d96f6d47bc5e8b`\n\nTo retrieve the withdrawal information:\n1. Scan the `changes` for `0x1::coin::CoinStore`.  Note the `CoinType` is a generic signifying which coin is stored in the store.  In this example, the `CoinType` is `0x1337::my_coin::MyCoin`.\n2. Retrieve the `guid` for `withdraw_events`. In this example, the `guid` contains `addr` `0x810026ca8291dd88b5b30a1d3ca2edd683d33d06c4a7f7c451d96f6d47bc5e8b` and `creation_num` `3`.\n3. Scan for events with this `guid` and extract the event associated with it.  In this example, it is the `0x1::coin::WithdrawEvent`.\n4. Note the `amount` field will be the number of `CoinType` removed from the account in the `guid`. In this example, it is `1000`.\n\nTo retrieve the deposit information, it's the same as withdrawal except:\n1. The `guid` used is under `deposit_events`\n2. The `amount` will be a positive increase on the account's balance.\n3. The event's name will be: `0x1::coin::DepositEvent`\n\nTo retrieve the gas fee:\n1. The `gas_used` field must be multiplied times the `gas_unit_price`.  In this example, `gas_used=20` and `gas_unit_price=110` so the total gas coins withdrawn is `2200`.\n2. Gas is always: `0x1::aptos_coin::AptosCoin`\n\nTo retrieve information about the number of decimals of the coin:\n1. You can retrieve the number of decimals for a coin via its: `0x1::coin::CoinInfo`\n2. This will be located at the address of the coin type.  In this example, you would need to look up", "doc_id": "43915f52-f078-4567-bc8b-a50f65437baa", "embedding": null, "doc_hash": "f90d464ff3438659d82cbcd3d15701cf170d1d497624008b731d1a420a842dc9", "extra_info": null, "node_info": {"start": 1798, "end": 4224, "_node_type": "1"}, "relationships": {"1": "bf41b39c-cf3a-4fcf-8620-bd592e617f8a", "2": "a2090b78-5c81-4310-a6b4-1f4826399b37", "3": "afa3dec8-db24-44f4-b409-90a2187e9935"}}, "__type__": "1"}, "afa3dec8-db24-44f4-b409-90a2187e9935": {"__data__": {"text": "at the address of the coin type.  In this example, you would need to look up `0x1::coin::CoinInfo` at address `0x1337`.\n\n:::tip\nIf you always use the events in this manner, you won't miss any balance changes for an account.\nBy monitoring the events, you will find all balance changes in the `0x1::coin::CoinStore`:\n1. Coin mints\n2. Coin burns\n3. Coin transfers\n4. Staking coins\n5. Withdrawing staked coins\n6. Transfers not derived from `coin::transfer`\n\n:::\n\nTo create some sample data to explore, conduct \"Your first transaction\".\n\nTo learn more about coin creation, make \"Your First Coin\".\n\n", "doc_id": "afa3dec8-db24-44f4-b409-90a2187e9935", "embedding": null, "doc_hash": "7451d01f632dcbe78891fd734ffce91fa0b320f6e98a9c09a0d88705b6615da1", "extra_info": null, "node_info": {"start": 4155, "end": 4748, "_node_type": "1"}, "relationships": {"1": "bf41b39c-cf3a-4fcf-8620-bd592e617f8a", "2": "43915f52-f078-4567-bc8b-a50f65437baa"}}, "__type__": "1"}, "a8083994-6c5c-4849-bf4d-1fb447ad9f6e": {"__data__": {"text": "\n\nIntegrating with the faucet\n\nThis tutorial is for SDK and wallet developers who want to integrate with the Aptos Faucet. If you are a dapp developer, you should access the faucet through an existing SDK or CLI instead.\n\n", "doc_id": "a8083994-6c5c-4849-bf4d-1fb447ad9f6e", "embedding": null, "doc_hash": "66100755a4ff596f1522d2bd0415a880d9dc5bc2160b07d397eb8746579c81bb", "extra_info": null, "node_info": {"start": 0, "end": 222, "_node_type": "1"}, "relationships": {"1": "1b39d59a-701d-4ac2-b298-916d5a46cc9f"}}, "__type__": "1"}, "9d685139-471d-4da7-8798-ead4c3a30acb": {"__data__": {"text": "\n\nDifferences between devnet and testnet\nWhat are the differences between devnet and testnet? Effectively none. In the past, the testnet faucet had a Captcha in front of it, making it unqueryable by normal means. This is no longer true.\n\nThe endpoints for each faucet are:\n- Devnet: https://faucet.devnet.aptoslabs.com\n- Testnet: https://faucet.testnet.aptoslabs.com\n\n", "doc_id": "9d685139-471d-4da7-8798-ead4c3a30acb", "embedding": null, "doc_hash": "103a1808e8326b13c3c4d89e6ec6d0cceeba7fff0ac66cde87fb7ca446dd86dd", "extra_info": null, "node_info": {"start": 0, "end": 368, "_node_type": "1"}, "relationships": {"1": "074934b3-7540-45c4-a34c-0a74a6ea9678"}}, "__type__": "1"}, "f129a839-06d6-4875-bf8d-e3de20e34869": {"__data__": {"text": "\n\nCalling the faucet: JavaScript / TypeScript\nIf you are building a client in JavaScript or TypeScript, you should make use of the @aptos-labs/aptos-faucet-client package. This client is generated based on the OpenAPI spec published by the faucet service.\n\nExample use:\n```typescript\nimport {\n  AptosFaucetClient,\n  FundRequest,\n} from \"@aptos-labs/aptos-faucet-client\";\n\nasync function callFaucet(amount: number, address: string): Promise {\n  const faucetClient = new AptosFaucetClient({BASE: \"https://faucet.devnet.aptoslabs.com\"});\n  const request: FundRequest = {\n    amount,\n    address,\n  };\n  const response = await faucetClient.fund({ requestBody: request });\n  return response.txn_hashes;\n}\n```\n\n", "doc_id": "f129a839-06d6-4875-bf8d-e3de20e34869", "embedding": null, "doc_hash": "5e5688d5b38532e19ef95f88b76c5e8c4471c57a75bb59597c7906e07d584197", "extra_info": null, "node_info": {"start": 0, "end": 705, "_node_type": "1"}, "relationships": {"1": "1e21dbe2-3613-4336-8bf9-cda84a9ee3d0"}}, "__type__": "1"}, "0a6b3f70-b103-490d-babb-638d866192b5": {"__data__": {"text": "\n\nCalling the faucet: Other languages\nIf you are trying to call the faucet in other languages, you have two options:\n1. Generate a client from the OpenAPI spec.\n2. Call the faucet on your own.\n\nFor the latter, you will want to build a query similar to this:\n```\ncurl -X POST 'https://faucet.devnet.aptoslabs.com/mint?amount=10000&address=0xd0f523c9e73e6f3d68c16ae883a9febc616e484c4998a72d8899a1009e5a89d6'\n```\n\nThis means mint 10000 OCTA to address `0xd0f523c9e73e6f3d68c16ae883a9febc616e484c4998a72d8899a1009e5a89d6`.\n\n", "doc_id": "0a6b3f70-b103-490d-babb-638d866192b5", "embedding": null, "doc_hash": "1e20650108d2036fc694ee87a826cbb521d5f5dbaafae07684a79e026b592e53", "extra_info": null, "node_info": {"start": 0, "end": 520, "_node_type": "1"}, "relationships": {"1": "f7453658-ea72-4bf3-b1bc-c8c61368543b"}}, "__type__": "1"}, "2f4bec7a-45fe-4e31-b6df-f5625f011431": {"__data__": {"text": "\n\nMetrics collected\n\n", "doc_id": "2f4bec7a-45fe-4e31-b6df-f5625f011431", "embedding": null, "doc_hash": "0bc2dd7a91b6e6f4874cdb0f5f922bd42981a65546d87c9f43c86c0ec5a7d93a", "extra_info": null, "node_info": {"start": 0, "end": 21, "_node_type": "1"}, "relationships": {"1": "084fe246-0032-48a1-811f-c4f5f726acb2"}}, "__type__": "1"}, "26eace89-25bc-4a6a-b774-febffad8cd82": {"__data__": {"text": "\n\nCore metrics\n\n- Core metrics: https://github.com/aptos-labs/aptos-core/blob/main/crates/aptos-telemetry/src/core_metrics.rs#L14-L29.\n\n", "doc_id": "26eace89-25bc-4a6a-b774-febffad8cd82", "embedding": null, "doc_hash": "1a786560045814577b97d17f7d61bcee37eb406dea8d928bd2dff012ee1d8fff", "extra_info": null, "node_info": {"start": 0, "end": 136, "_node_type": "1"}, "relationships": {"1": "bdc3ef0f-3d61-441a-ac95-10dcf14779dc"}}, "__type__": "1"}, "01f25a36-0f7a-4846-bf78-7085ebd9c91e": {"__data__": {"text": "\n\nNode information\n\nThe public IP address of the node and core metrics, including node type, synced version and number of network connections.\n\n- **Node configuration as a mapping of string key to JSON map**: https://github.com/aptos-labs/aptos-core/blob/main/config/src/config/mod.rs#L63-L97.\n\n", "doc_id": "01f25a36-0f7a-4846-bf78-7085ebd9c91e", "embedding": null, "doc_hash": "80f464f3781e31a362112edabfd3d3b656d49234139697fa1be690ffa73612b5", "extra_info": null, "node_info": {"start": 0, "end": 295, "_node_type": "1"}, "relationships": {"1": "76593497-7a61-44f0-884d-1cd6d8011b60"}}, "__type__": "1"}, "b0e1b43c-a272-4a42-888e-197a9eae281e": {"__data__": {"text": "\n\nCLI telemetry\n\nThe commands and subcommands run by the Aptos CLI tool.\n\n- **CLI metrics**: https://github.com/aptos-labs/aptos-core/blob/main/crates/aptos-telemetry/src/cli_metrics.rs#L12-L15.\n- **Build information**: https://github.com/aptos-labs/aptos-core/blob/main/crates/aptos-build-info/src/lib.rs#L8-L20.\n\n", "doc_id": "b0e1b43c-a272-4a42-888e-197a9eae281e", "embedding": null, "doc_hash": "7ed95ea320ec19d6caa5869d509a520d05001e9d0811b17eaccc30a1347c20cc", "extra_info": null, "node_info": {"start": 0, "end": 315, "_node_type": "1"}, "relationships": {"1": "ca31a339-378b-46c5-86fa-f70aacb529f8"}}, "__type__": "1"}, "a63ac02f-bc4b-432d-8622-c70b807cc27f": {"__data__": {"text": "\n\nNetwork metrics\n\n- **Network metrics**: https://github.com/aptos-labs/aptos-core/blob/main/crates/aptos-telemetry/src/network_metrics.rs#L12-L17.\n\n", "doc_id": "a63ac02f-bc4b-432d-8622-c70b807cc27f", "embedding": null, "doc_hash": "f797ab3ea72f5352d13bf97809f6df9e3c69af4785edb4e173916e801ee5f174", "extra_info": null, "node_info": {"start": 0, "end": 149, "_node_type": "1"}, "relationships": {"1": "ddae4f08-d1cd-468c-9d82-bdb3aa996bfa"}}, "__type__": "1"}, "422a91b3-65f2-4ffc-83ea-0bae72e36d3b": {"__data__": {"text": "\n\nBuild information\n\nRust build information including the versions of Rust, cargo, build target architecture and the build tag.\n\n- **Build information**: https://github.com/aptos-labs/aptos-core/blob/main/crates/aptos-build-info/src/lib.rs#L8-L20\n\n", "doc_id": "422a91b3-65f2-4ffc-83ea-0bae72e36d3b", "embedding": null, "doc_hash": "9143d552a233213c03efecf7f23b621aa895bdc67e6d8d37e9056c9b2aa9344d", "extra_info": null, "node_info": {"start": 0, "end": 248, "_node_type": "1"}, "relationships": {"1": "d20a5861-9dfd-4512-8921-bf4ccff1cd0a"}}, "__type__": "1"}, "391f0c52-05b7-49bd-a64e-d2aaf36629c5": {"__data__": {"text": "\n\nSystem information\n\nSystem information including operating system information (including versions), hardware information and resource utilization (including CPU, memory and disk).\n\n- **System information**: https://github.com/aptos-labs/aptos-core/blob/main/crates/aptos-telemetry/src/system_information.rs#L14-L32.\n\n", "doc_id": "391f0c52-05b7-49bd-a64e-d2aaf36629c5", "embedding": null, "doc_hash": "89298d0735a5e5983993157dabb8a14d805a6914aa9a651d71425544aa04a086", "extra_info": null, "node_info": {"start": 0, "end": 319, "_node_type": "1"}, "relationships": {"1": "ea55f3f5-cc26-4a77-834a-0ecaf25e78c7"}}, "__type__": "1"}, "9e7d5f2c-fd47-4624-b05c-ba04de157294": {"__data__": {"text": "\n\nOthers\n\n- **Metrics**: All the Prometheus metrics that are collected within the node.\n- **Logs**: Logs of warn-level and higher level, with the ability to collect up to debug logs.\n\n", "doc_id": "9e7d5f2c-fd47-4624-b05c-ba04de157294", "embedding": null, "doc_hash": "4603637b889e12d972e20b2598fdb4d5199bec8929a1562e641f044f7b18cb55", "extra_info": null, "node_info": {"start": 0, "end": 184, "_node_type": "1"}, "relationships": {"1": "32c15dcc-d719-48e3-8a47-1dc2fd7e3e3b"}}, "__type__": "1"}, "360b4132-d33e-402a-8c1c-c8c98c0de717": {"__data__": {"text": "\n\nDisabling telemetry\n\nOn macOS and Linux, you can set the following environment variables to control the metrics sent by your node. For example, to disable all telemetry, set the  `APTOS_DISABLE_TELEMETRY` environment variable to `true` as shown below:\n\n```bash\nexport APTOS_DISABLE_TELEMETRY=true\n```\n\nThe above example only disables telemetry for a single session in the current terminal where you ran the above command. To disable it permanently on your node, include it in your startup profile, as below: \n\n```bash\necho \"export APTOS_DISABLE_TELEMETRY=true\" >> ~/.profile\nsource ~/.profile\n```\n\n:::tip All telemetry is ON by default.\nAll the below variables are set by default to `false`, i.e., sending of these telemetry metrics is enabled. Set them to `true` to disable telemetry.\n:::\n\n- `APTOS_DISABLE_TELEMETRY`: This disables all telemetry emission from the node including sending to the GA4 service.\n- `APTOS_FORCE_ENABLE_TELEMETRY`: This overrides the chain ID check and forces the node to send telemetry regardless of whether remote service accepts or not.\n- `APTOS_DISABLE_TELEMETRY_PUSH_METRICS`: This disables sending the Prometheus metrics.\n- `APTOS_DISABLE_TELEMETRY_PUSH_LOGS`: This disables sending the logs.\n- `APTOS_DISBALE_TELEMETRY_PUSH_EVENTS`: This disables sending the custom events.\n- `APTOS_DISABLE_LOG_ENV_POLLING`: This disables the dynamic ability to send verbose logs.\n- `APTOS_DISABLE_PROMETHEUS_NODE_METRICS`: This disables sending the node resource metrics such as system CPU, memory, etc.\n\n", "doc_id": "360b4132-d33e-402a-8c1c-c8c98c0de717", "embedding": null, "doc_hash": "21b29605a52ac6a8daed76df1f257a671076b0f377775b38d7cb5cc9e34d0ee4", "extra_info": null, "node_info": {"start": 0, "end": 1527, "_node_type": "1"}, "relationships": {"1": "9c4c9204-08a8-4f68-9e7e-ed65c28ae00e"}}, "__type__": "1"}, "2c325ac0-6c62-430c-aecd-f8da9c4c8dcf": {"__data__": {"text": "\n\nLatest Testnet Release\n\nThe table below contains latest release information for each Aptos component in the testnet network. We also suggest you monitor the #testnet-release channel of Aptos Discord for ongoing updates.\n\nSee the Latest Aptos Releases index for how to subscribe to GitHub notifications and more release-related information.\n\n", "doc_id": "2c325ac0-6c62-430c-aecd-f8da9c4c8dcf", "embedding": null, "doc_hash": "c06f82b79f858af8d87f08436f3a9046712f23959484c27f31a00a65562dc033", "extra_info": null, "node_info": {"start": 0, "end": 343, "_node_type": "1"}, "relationships": {"1": "8294ba6e-b813-49ec-89c4-ca9bfef8eab3"}}, "__type__": "1"}, "245ed105-20f0-4c61-9652-d066e52a07fd": {"__data__": {"text": "\n\nAptos Framework\n\nAptos Framework Release v1.4.0\n\n", "doc_id": "245ed105-20f0-4c61-9652-d066e52a07fd", "embedding": null, "doc_hash": "3e1291819743af7527665ffac29a5acc22e9ff23c760200a2c73e2a0672403f5", "extra_info": null, "node_info": {"start": 0, "end": 51, "_node_type": "1"}, "relationships": {"1": "69e06097-7a69-4178-9fc6-a3e6b7619e0e"}}, "__type__": "1"}, "a2dfc354-e042-4324-a5e3-ee757300456e": {"__data__": {"text": "\n\nAptos SDK\n\nAptos SDK Release v1.8.5 check out the change-log here.\n\n", "doc_id": "a2dfc354-e042-4324-a5e3-ee757300456e", "embedding": null, "doc_hash": "6e6d415e551b4ca690a4abc7ba15ad1a99365f7123bfbf0bcdfda92db97af3ff", "extra_info": null, "node_info": {"start": 0, "end": 70, "_node_type": "1"}, "relationships": {"1": "80be6656-f922-4e0c-be06-b181be357347"}}, "__type__": "1"}, "268fd373-0e07-4f11-9f53-6ebe528daf17": {"__data__": {"text": "\n\nAptos CLI\n\n|Release | Git Tag | Commit Hash|\n|---|---|---|\n|Aptos CLI Release v1.0.13| `aptos-cli-v1.0.13` | `7f864d4af722bf538f1a904e321130a261e92b3a` |\n\n", "doc_id": "268fd373-0e07-4f11-9f53-6ebe528daf17", "embedding": null, "doc_hash": "b86aaee2fbad47c3cade899ad431c2a4aff6fd74e0059e6ed7a58232bf34998c", "extra_info": null, "node_info": {"start": 0, "end": 157, "_node_type": "1"}, "relationships": {"1": "91a4469f-c365-45e9-b93c-1fed5d0091c5"}}, "__type__": "1"}, "bbcf3cc8-1f0b-4397-ba17-8aec7c9396b2": {"__data__": {"text": "\n\nAptos Node\n\n|Release | Docker Image Tag | Docker SHA-256 | Branch | Commit Hash|\n|---|---|---|---|---|\n|Aptos Node Release v1.4.1| `aptos-node-v1.4.1` | `sha256:c109ab86066fc35cbff5d7f57340ea6da9ed480896d08cd1bbd30c3dec683033` | aptos-node-v1.4.1| `8731f29f80ee0458d32793f2c818243745ca3904` |\n", "doc_id": "bbcf3cc8-1f0b-4397-ba17-8aec7c9396b2", "embedding": null, "doc_hash": "f823a409d03181d35e7154d3e9e2ca55a133eeb2b78294cf1ab5aa699a9e22cf", "extra_info": null, "node_info": {"start": 0, "end": 295, "_node_type": "1"}, "relationships": {"1": "85df7906-10a2-4c85-8d5c-c5bff903eb21"}}, "__type__": "1"}, "519b7b2e-c08d-4fb0-8f0e-5149550e2da8": {"__data__": {"text": "\n\nTransaction Management\n\nThis guide explains how to build a transaction management harness that can scale on the Aptos blockchain.\n\n", "doc_id": "519b7b2e-c08d-4fb0-8f0e-5149550e2da8", "embedding": null, "doc_hash": "b74622b2155280c85e783368554f682cd4a267ca5c30352e2df0059c0f6169e7", "extra_info": null, "node_info": {"start": 0, "end": 133, "_node_type": "1"}, "relationships": {"1": "5b040e50-b341-4b9d-8464-740db2bce610"}}, "__type__": "1"}, "25ddce80-0767-46f2-a083-1b1fe86243e9": {"__data__": {"text": "\n\nBuilding a Transaction Manager\n\nThis section covers the major aspects of building a transaction management harness. This consists of the following core components:\n\n- A sequence number generator that allocates and manages available sequence numbers for a single account.\n- A transaction manager that receives payloads from an application or a user, sequence numbers from the sequence number generator, and has access to the account key to combine the three pieces together into a viable signed transaction. It then also takes the responsibility for pushing the transaction to the blockchain.\n- An on-chain worker, leader harness that let\u2019s multiple accounts share the signer of a single shared account.\n\nCurrently this framework assumes that the network builds no substantial queue, that is a transaction that is submitted executes and commits with little to no delay. In order to address high demand, this work needs to be extended with the following components:\n\n- Optimizing `base_gas_unit` price to ensure priority transactions can be committed to the blockchain.\n- Further handling of transaction processing rates to ensure that the expiration timer is properly set.\n- Handling of transaction failures to either be ignored or resubmitted based upon desired outcome.\n\nNote, an account should be manged by a single instance of the transaction manager. Otherwise each instance of the transaction manager will likely have stale in-memory state resulting in overlapping sequence numbers.\n\n", "doc_id": "25ddce80-0767-46f2-a083-1b1fe86243e9", "embedding": null, "doc_hash": "37befb957ad737c42f5390dac3cd132594550c1daaf490b7a0224eb0fd926715", "extra_info": null, "node_info": {"start": 0, "end": 1491, "_node_type": "1"}, "relationships": {"1": "5d19d1a3-ef65-4a04-9d53-ba3ad26d89d3"}}, "__type__": "1"}, "4e44ba04-63bf-4ae2-9b2a-6df29d115ff4": {"__data__": {"text": "\n\nImplementations\n\n- Python\n    - Sequence number manager\n    - Transaction manager\n- Worker-leader smart contract\n\n", "doc_id": "4e44ba04-63bf-4ae2-9b2a-6df29d115ff4", "embedding": null, "doc_hash": "d0b08f91942957ed8363708acf6373146ff2c617ce897b364182d36b5b1512b5", "extra_info": null, "node_info": {"start": 0, "end": 116, "_node_type": "1"}, "relationships": {"1": "228a903c-770a-48f6-8656-bb641b735031"}}, "__type__": "1"}, "9e26b319-2c54-4887-8ad7-e0a14a6b1a5e": {"__data__": {"text": "\n\nManaging Sequence Numbers\n\nEach transaction requires a distinct sequence number that is sequential to previously submitted transactions. This can be provided by the following process:\n\n1. At startup, query the blockchain for the account\u2019s current sequence number.\n2. Support up to 100 transactions in flight at the same time, that is 100 sequence numbers can be allocated without confirming that any have been committed.\n3. If there are 100 transactions in flight, determine the actual committed state by querying the network. This will update the current sequence number.\n4. If there are less than 100 transactions in flight, return to step 2.\n5. Otherwise sleep for .1 seconds and continue to re-evaluate the current on-chain sequence number.\n6. All transactions should have an expiration time. If the expiration time has passed, assume that there has been a failure and reset the sequence number. The trivial case is to only monitor for failures when the maximum number of transactions are in flight and to let other services manages this otherwise.\n\nIn parallel, monitor new transactions submitted. Once the earliest transaction expiration time has expired synchronize up to that transaction. Then repeat the process for the next transaction.\n\nIf there is any failure, wait until all outstanding transactions have timed out and leave it to the application to decide how to proceed, e.g., replay failed transactions.\n\n", "doc_id": "9e26b319-2c54-4887-8ad7-e0a14a6b1a5e", "embedding": null, "doc_hash": "7427cabe38e4592ef3239a0647538d75edd5acdab2f15223c028e310c86c8e5f", "extra_info": null, "node_info": {"start": 0, "end": 1423, "_node_type": "1"}, "relationships": {"1": "6f9e8176-7bbf-471f-a531-50558efcb973"}}, "__type__": "1"}, "85344793-965e-49c9-b8f5-433917072eb2": {"__data__": {"text": "\n\nManaging Transactions\n\nOnce a transaction has been submitted it goes through a variety of steps:\n\n1. Submission to a REST endpoint.\n2. Pre-execution validation in the Mempool during submission.\n3. Transmission from Mempool to Mempool with pre-execution validation happening on each upstream node.\n4. Inclusion in a consensus proposal.\n5. One more pre-execution validation.\n6. Execution and committing to storage.\n\nThere are many potential failure cases that must be considered:\n\n- Failure during transaction submission (1 and 2):\n    - Visibility: The application will receive an error either that the network is unavailable or that the transaction failed pre-execution validation.\n    - If the error is related to availability or duplicate sequence numbers, wait until access is available and the sequence number has re-synchronized.\n    - Pre-execution validation failures are currently out of scope, outside of those related to duplicate sequence numbers, account issues are likely related to an invalid key for the account or the account lacks sufficient funds for gas.\n- Failure between submission and execution (3, 4, and 5):\n    - Visibility: Only known by waiting until the transaction has expired.\n    - These are the same as other pre-execution validation errors due to changes to the account as earlier transactions execute. It is likely either duplicate sequence numbers or the account lacks sufficient funds for gas.\n- Failure during execution (6):\n    - Visibility: These are committed to the blockchain.\n    - These errors occur as a result of on-chain state issues, these tend to be application specific, such as an auction where a new bid might not actually be higher than the current bid.\n\n", "doc_id": "85344793-965e-49c9-b8f5-433917072eb2", "embedding": null, "doc_hash": "3b6bade4ed7b5e1d6967f502cd3d9f644f625fb7e3b242420ca8448a0578362a", "extra_info": null, "node_info": {"start": 0, "end": 1710, "_node_type": "1"}, "relationships": {"1": "84636044-f482-4299-95ef-cd11a3778d57"}}, "__type__": "1"}, "c6c6a3e1-4624-4576-8538-6b125c23f1f8": {"__data__": {"text": "\n\nWorkers and Identity\n\nUsing the above framework, a single account can push upwards of 100 transactions from the start of a block to the end of a block. Assuming that all 100 transactions are consumed within 1 block, it will take a bit of time for the next 100 slots to be available. This is due to the network delays as well as the multi-staged validator pipeline.\n\nTo fully leverage the blockchain for massive throughput, using a single user account is not enough. Instead, Aptos supports the concept of worker accounts that can share the responsibility of pushing work through a shared account, also known as a resource account.\n\nIn this model, each worker has access to the `SignerCap` of the shared account, which enables them to impersonate the shared account or generate the `signer` for the shared account. Upon gaining the `signer`, the transaction can execute the logic that is gated by the signer of the shared account.\n\nAnother model, if viable, is to decouple the `signer` altogether away from permissions and to make an application specific capability. Then this capability can be given to each worker that let\u2019s them operate on the shared infrastructure.\n\nNote that parallelization on the shared infrastructure can be limited if any transaction would have any read, write or write, write conflicts. This won\u2019t prevent multiple transactions from executing within a block, but can impact maximum blockchain performance.\n\n", "doc_id": "c6c6a3e1-4624-4576-8538-6b125c23f1f8", "embedding": null, "doc_hash": "28c808eecbe6c6c94ec3d90b9fa8d1e7fba3f78350369d164a764e8cafbe0e84", "extra_info": null, "node_info": {"start": 0, "end": 1435, "_node_type": "1"}, "relationships": {"1": "9e0df448-0e49-4a58-9688-4a619a52682c"}}, "__type__": "1"}, "7bf78801-4499-4fdc-be01-f109c93a9414": {"__data__": {"text": "\n\nBackground\n\nIn Aptos, transactions are mapped back to an account both in terms of the entity that signs or authorizes that transaction as well as a providing an account-based sequence number. When Aptos receives a new transaction several rules are followed with respect to the this:\n\n- The transaction sent from an account must be authorized correctly by that account.\n- The current time must be before the expiration timestamp.\n- The transactions sequence number must be equal to or greater than the sequence number on-chain.\n\nOnce the initial node has accepted a transaction, the transaction makes its way through the system by an additional rule. If a transactions sequence number is higher than the current on-chain sequence number, it can only progress toward consensus if every node in the path has seen a transaction with the sequence number between the on-chain state and the current sequence number.\n\nExample:\n\nAlice\u2019s current on-chain sequence number is 5.\n\nAlice submits a transaction to node Bob with sequence number 6.\n\nBob accepts the transaction but does not forward it, because Bob has not seen 5.\n\nIn order to make progress, Alice must either send Bob transaction number 5 or Bob must be notified from consensus that 5 was committed. In the latter, Alice submitted the transaction through another node.\n\nBeyond this there are two remaining principles:\n\n- A single account can have at most 100 uncommitted transactions submitted to the blockchain. Any more than that and the transactions will be rejected. This can happen silently if Alice submits the first 100 to Bob and the next 100 to Carol. If both those nodes share a common upstream, then that upstream will accept Bob\u2019s 100 but silently reject Carol\u2019s 100.\n- Submitting to distinct transactions to multiple nodes will result in slow resolution as transactions will not make progress from the submitted node until the submitted knows that all preceding transactions have been committed.\n\n", "doc_id": "7bf78801-4499-4fdc-be01-f109c93a9414", "embedding": null, "doc_hash": "e016c238a3ce3d08b1849474b83ba76f18d6c50d4b72f06fcef577e86d12e1cf", "extra_info": null, "node_info": {"start": 0, "end": 1963, "_node_type": "1"}, "relationships": {"1": "883d7a47-a5d8-4550-ad08-0fb7c636e1a9"}}, "__type__": "1"}, "dcac5974-6946-4688-ad00-d7e0ab79382e": {"__data__": {"text": "\n\nAptos TypeScript SDK\n\nAptos provides a fully supported TypeScript SDK with the source code in the Aptos-core GitHub repository. Much of the functionality of the TypeScript SDK can be found in the Rust and Python SDKs. Nevertheless, Aptos strongly encourages you to use the TypeScript SDK for app development whenever possible.\n\n", "doc_id": "dcac5974-6946-4688-ad00-d7e0ab79382e", "embedding": null, "doc_hash": "254224637ca8206807025d89c3fbb190f48202a9b1c0150ba867542ba2372101", "extra_info": null, "node_info": {"start": 0, "end": 330, "_node_type": "1"}, "relationships": {"1": "d571f5ab-a1d7-4ff7-b2a7-365256c56a62"}}, "__type__": "1"}, "5a9fdd64-02b6-4b70-8409-e256dedff314": {"__data__": {"text": "\n\nInstalling the TypeScript SDK\n\n1. Make sure you downloaded the latest precompiled binary for the Aptos CLI.\n2. On a terminal run the below command to install the TypeScript SDK from npmjs:\n\n   ```bash\n   npm i aptos\n   ```\n\n   or\n\n   ```bash\n   yarn add aptos\n   ```\n\n   or\n\n   ```bash\n   pnpm add aptos\n   ```\n\n   :::tip\n   The above command installs the TS SDK and should not be confused as installing the Aptos CLI.\n   :::\n\n", "doc_id": "5a9fdd64-02b6-4b70-8409-e256dedff314", "embedding": null, "doc_hash": "9bb09f4d3b6fb8e9f1da55e32d45e173b1ce87bbcc3380fb607b52bb9bd42119", "extra_info": null, "node_info": {"start": 0, "end": 429, "_node_type": "1"}, "relationships": {"1": "49ca5cae-a400-4bee-a971-8677047ef459"}}, "__type__": "1"}, "5dbd453e-dfd6-44fe-8506-6bb51bd0796f": {"__data__": {"text": "\n\nUsing the TypeScript SDK\n\nSee the Developer Tutorials for code examples showing how to use the Typescript SDK.\n\n", "doc_id": "5dbd453e-dfd6-44fe-8506-6bb51bd0796f", "embedding": null, "doc_hash": "40299fe57e1b42f7bba58f9a6f68870e1cbd2efe0d333724cf892637f7d99c7f", "extra_info": null, "node_info": {"start": 0, "end": 114, "_node_type": "1"}, "relationships": {"1": "eefa2431-1f72-4987-8c4d-af5db0af3436"}}, "__type__": "1"}, "be290f6d-369b-40c3-a4e4-ee83c3113859": {"__data__": {"text": "\n\nTypeScript SDK Architecture\n\nSee the TypeScript SDK Architecture for the components that make up the TypeScript SDK.\n\n", "doc_id": "be290f6d-369b-40c3-a4e4-ee83c3113859", "embedding": null, "doc_hash": "0cc3e7b56e2cf6e7469bc1505a832338b3dbc88ac61b99e58b40217e922497a8", "extra_info": null, "node_info": {"start": 0, "end": 120, "_node_type": "1"}, "relationships": {"1": "32f6d3b0-dc03-4bb8-ae45-2b6b391bdb45"}}, "__type__": "1"}, "99839779-bb5b-403d-bff6-45125ea2b67c": {"__data__": {"text": "\n\nAdditional information\n\n- ### TypeScript SDK Source code\n- ### TypeScript SDK at NPM\n- ### TypeScript SDK Reference\n- ### TypeScript SDK Reference Source\n\n", "doc_id": "99839779-bb5b-403d-bff6-45125ea2b67c", "embedding": null, "doc_hash": "728a23b92c3c3d2103f9cada49cfac2f0b8dc74e2273ab0c8ddcf5ffbf974501", "extra_info": null, "node_info": {"start": 0, "end": 157, "_node_type": "1"}, "relationships": {"1": "4a28e09c-a123-47d1-a7ed-2156fb4a9e56"}}, "__type__": "1"}, "0f0da1ce-9419-45a8-938e-bd51fab26b80": {"__data__": {"text": "\n\nTuples and Unit\n\nMove does not fully support tuples as one might expect coming from another language with them as a\nfirst-class value. However, in order to support multiple return values, Move has tuple-like\nexpressions. These expressions do not result in a concrete value at runtime (there are no tuples in\nthe bytecode), and as a result they are very limited: they can only appear in expressions (usually\nin the return position for a function); they cannot be bound to local variables; they cannot be\nstored in structs; and tuple types cannot be used to instantiate generics.\n\nSimilarly, unit `()` is a type created by the Move source language in order to be expression based.\nThe unit value `()` does not result in any runtime value. We can consider unit`()` to be an empty\ntuple, and any restrictions that apply to tuples also apply to unit.\n\nIt might feel weird to have tuples in the language at all given these restrictions. But one of the\nmost common use cases for tuples in other languages is for functions to allow functions to return\nmultiple values. Some languages work around this by forcing the users to write structs that contain\nthe multiple return values. However in Move, you cannot put references inside of\nstructs. This required Move to support multiple return values. These\nmultiple return values are all pushed on the stack at the bytecode level. At the source level, these\nmultiple return values are represented using tuples.\n\n", "doc_id": "0f0da1ce-9419-45a8-938e-bd51fab26b80", "embedding": null, "doc_hash": "356aebceb110a74196cef5a7937fe10900e91b4a3446a498e624a3ab6786a261", "extra_info": null, "node_info": {"start": 0, "end": 1451, "_node_type": "1"}, "relationships": {"1": "6d251701-c3eb-4641-bf13-37f61e22ad28"}}, "__type__": "1"}, "9210c69b-eeeb-42f1-bca5-0db669ac3726": {"__data__": {"text": "\n\nLiterals\n\nTuples are created by a comma separated list of expressions inside of parentheses.\n\n| Syntax          | Type                                                                         | Description                                                  |\n| --------------- | ---------------------------------------------------------------------------- | ------------------------------------------------------------ |\n| `()`            | `(): ()`                                                                     | Unit, the empty tuple, or the tuple of arity 0               |\n| `(e1, ..., en)` | `(e1, ..., en): (T1, ..., Tn)` where `e_i: Ti` s.t. `0  0` | A `n`-tuple, a tuple of arity `n`, a tuple with `n` elements |\n\nNote that `(e)` does not have type `(e): (t)`, in other words there is no tuple with one element. If\nthere is only a single element inside of the parentheses, the parentheses are only used for\ndisambiguation and do not carry any other special meaning.\n\nSometimes, tuples with two elements are called \"pairs\" and tuples with three elements are called\n\"triples.\"\n\n", "doc_id": "9210c69b-eeeb-42f1-bca5-0db669ac3726", "embedding": null, "doc_hash": "a9f6437d7c2eb3dff7599b37922b9ec198934cc4ce6db8eec17dc1359d3698ad", "extra_info": null, "node_info": {"start": 0, "end": 1089, "_node_type": "1"}, "relationships": {"1": "7eb393ae-e10b-447e-9004-30f5733f2f54"}}, "__type__": "1"}, "0175dfdc-91ab-42e1-84e3-7bfd1e44edc8": {"__data__": {"text": "\n\nExamples\n\n```move\naddress 0x42 {\nmodule example {\n    // all 3 of these functions are equivalent\n\n    // when no return type is provided, it is assumed to be `()`\n    fun returns_unit_1() { }\n\n    // there is an implicit () value in empty expression blocks\n    fun returns_unit_2(): () { }\n\n    // explicit version of `returns_unit_1` and `returns_unit_2`\n    fun returns_unit_3(): () { () }\n\n\n    fun returns_3_values(): (u64, bool, address) {\n        (0, false, @0x42)\n    }\n    fun returns_4_values(x: &u64): (&u64, u8, u128, vector) {\n        (x, 0, 1, b\"foobar\")\n    }\n}\n}\n```\n\n", "doc_id": "0175dfdc-91ab-42e1-84e3-7bfd1e44edc8", "embedding": null, "doc_hash": "56ef3cbb62dd8e46bd6a058c5d130c775db17c46a08bfaf75a6ec43cb3414a9d", "extra_info": null, "node_info": {"start": 0, "end": 585, "_node_type": "1"}, "relationships": {"1": "8b5e710a-0004-4b41-be55-e4f1387f7a86"}}, "__type__": "1"}, "ff20376e-a0ef-4687-abfe-6d85e4698498": {"__data__": {"text": "\n\nOperations\n\nThe only operation that can be done on tuples currently is destructuring.\n\n", "doc_id": "ff20376e-a0ef-4687-abfe-6d85e4698498", "embedding": null, "doc_hash": "475b061b6a6d60d98d28e15002fe4287c16eca1f08364d13cd7fbf45f5b23311", "extra_info": null, "node_info": {"start": 0, "end": 89, "_node_type": "1"}, "relationships": {"1": "1aed152d-a210-4124-931d-fd5f9c302e59"}}, "__type__": "1"}, "e5673f51-e27e-40c4-b44f-d25aeb011c6d": {"__data__": {"text": "\n\nDestructuring\n\nFor tuples of any size, they can be destructured in either a `let` binding or in an assignment.\n\nFor example:\n\n```move\naddress 0x42 {\nmodule example {\n    // all 3 of these functions are equivalent\n    fun returns_unit() {}\n    fun returns_2_values(): (bool, bool) { (true, false) }\n    fun returns_4_values(x: &u64): (&u64, u8, u128, vector) { (x, 0, 1, b\"foobar\") }\n\n    fun examples(cond: bool) {\n        let () = ();\n        let (x, y): (u8, u64) = (0, 1);\n        let (a, b, c, d) = (@0x0, 0, false, b\"\");\n\n        () = ();\n        (x, y) = if (cond) (1, 2) else (3, 4);\n        (a, b, c, d) = (@0x1, 1, true, b\"1\");\n    }\n\n    fun examples_with_function_calls() {\n        let () = returns_unit();\n        let (x, y): (bool, bool) = returns_2_values();\n        let (a, b, c, d) = returns_4_values(&0);\n\n        () = returns_unit();\n        (x, y) = returns_2_values();\n        (a, b, c, d) = returns_4_values(&1);\n    }\n}\n}\n```\n\nFor more details, see Move Variables.\n\n", "doc_id": "e5673f51-e27e-40c4-b44f-d25aeb011c6d", "embedding": null, "doc_hash": "02c19ba45feab5c9e6c6427ba08b5df778cfe5f17bf88870d45b56f98a06d5a1", "extra_info": null, "node_info": {"start": 0, "end": 990, "_node_type": "1"}, "relationships": {"1": "1fbaa9c6-55cb-41b7-b4a0-468d6b05634c"}}, "__type__": "1"}, "1d18b58b-c308-43dc-b0ee-33d91da94252": {"__data__": {"text": "\n\nSubtyping\n\nAlong with references, tuples are the only types that have subtyping in Move. Tuples do have\nsubtyping only in the sense that subtype with references (in a covariant way).\n\nFor example:\n\n```move\nlet x: &u64 = &0;\nlet y: &mut u64 = &mut 1;\n\n// (&u64, &mut u64) is a subtype of (&u64, &u64)\n// since &mut u64 is a subtype of &u64\nlet (a, b): (&u64, &u64) = (x, y);\n\n// (&mut u64, &mut u64) is a subtype of (&u64, &u64)\n// since &mut u64 is a subtype of &u64\nlet (c, d): (&u64, &u64) = (y, y);\n\n// error! (&u64, &mut u64) is NOT a subtype of (&mut u64, &mut u64)\n// since &u64 is NOT a subtype of &mut u64\nlet (e, f): (&mut u64, &mut u64) = (x, y);\n```\n\n", "doc_id": "1d18b58b-c308-43dc-b0ee-33d91da94252", "embedding": null, "doc_hash": "d57e5d6c249e558d2b689bf04d58dd8c8278ca33c15cd132a602cee3ace701a1", "extra_info": null, "node_info": {"start": 0, "end": 664, "_node_type": "1"}, "relationships": {"1": "cdb55de7-f71b-4cac-a1c3-cb5f24d1c365"}}, "__type__": "1"}, "da0f4bf5-fe4d-44be-9f67-6d09def7e7ed": {"__data__": {"text": "\n\nOwnership\n\nAs mentioned above, tuple values don't really exist at runtime. And currently they cannot be stored\ninto local variables because of this (but it is likely that this feature will come soon). As such,\ntuples can only be moved currently, as copying them would require putting them into a local variable\nfirst.\n\n", "doc_id": "da0f4bf5-fe4d-44be-9f67-6d09def7e7ed", "embedding": null, "doc_hash": "0bf55ac2621faad056e6318363a64386fc1af6e47ab69e200a0444ffba20ab39", "extra_info": null, "node_info": {"start": 0, "end": 321, "_node_type": "1"}, "relationships": {"1": "d24619ce-8b30-42c8-9934-ca6c33dd2e6f"}}, "__type__": "1"}, "7645ed15-a932-496c-a422-832a9c3fbb2b": {"__data__": {"text": "\n\nStart with Onboarding Tutorials\n\nIf you are new to the Aptos blockchain, begin with these quickstarts before you get into in-depth development. These tutorials will help you become familiar with how to develop for the Aptos blockchain using the Aptos SDK.\n\n", "doc_id": "7645ed15-a932-496c-a422-832a9c3fbb2b", "embedding": null, "doc_hash": "27db192311ce3a9cea4ed41ad37175b23715b238b7d12120ec1b12d99d98fec5", "extra_info": null, "node_info": {"start": 0, "end": 259, "_node_type": "1"}, "relationships": {"1": "8a1ef665-146b-4d21-a039-10771e83bf41"}}, "__type__": "1"}, "602e7225-8872-487c-abef-2a14fe5cc8e6": {"__data__": {"text": "\n\nYour First Transaction\n\nHow to generate, submit and verify a transaction to the Aptos blockchain.\n\n", "doc_id": "602e7225-8872-487c-abef-2a14fe5cc8e6", "embedding": null, "doc_hash": "ad1911e1d743118022109883c446c0aa1296b146633ace211ecfb2e8a212dd1f", "extra_info": null, "node_info": {"start": 0, "end": 101, "_node_type": "1"}, "relationships": {"1": "19d4deb6-6683-484d-88d0-1131f2fbc216"}}, "__type__": "1"}, "7773dd60-314d-4ef0-8ad2-69cbcc114322": {"__data__": {"text": "\n\nYour First NFT\n\nLearn the Aptos `token` interface and how to use it to generate your first NFT. This interface is defined in the `token.move` Move module.\n\n", "doc_id": "7773dd60-314d-4ef0-8ad2-69cbcc114322", "embedding": null, "doc_hash": "ed6d2ba0550c44d99d5da28889f970d6c43aadc90b38112a8957d67eec00c61e", "extra_info": null, "node_info": {"start": 0, "end": 158, "_node_type": "1"}, "relationships": {"1": "fd442170-c614-449c-9060-75569e08767e"}}, "__type__": "1"}, "518dfff3-bd7e-46bd-a370-fc6e3bdcecf4": {"__data__": {"text": "\n\nYour First Coin\n\nLearn how to deploy and manage a coin. The `coin` interface is defined in the `coin.move` Move module.\n\n", "doc_id": "518dfff3-bd7e-46bd-a370-fc6e3bdcecf4", "embedding": null, "doc_hash": "3dd1aa89a2533afd2399a019f2a308fe17adf5bd52ad37b1500617d025b0b998", "extra_info": null, "node_info": {"start": 0, "end": 123, "_node_type": "1"}, "relationships": {"1": "7b26534b-7226-4301-94cd-131655f96310"}}, "__type__": "1"}, "016e7c62-af41-4d80-8e11-1b01419606f6": {"__data__": {"text": "\n\nYour First Move Module\n\nWrite your first Move module for the Aptos blockchain.\n\n", "doc_id": "016e7c62-af41-4d80-8e11-1b01419606f6", "embedding": null, "doc_hash": "77e518738403003506ed748672de6a23f371e445b08743c620a9b87dee9f7233", "extra_info": null, "node_info": {"start": 0, "end": 82, "_node_type": "1"}, "relationships": {"1": "184dfea6-674b-40d5-9bba-00aabfdbbe77"}}, "__type__": "1"}, "56f71d68-588f-41df-b735-ebfd6802d53e": {"__data__": {"text": "\n\nYour First Dapp\n\nLearn how to build your first dapp. Focuses on building the user interface for the dapp.\n\n", "doc_id": "56f71d68-588f-41df-b735-ebfd6802d53e", "embedding": null, "doc_hash": "79f731fab8fdf9a13edd1cdf914bf5144368e39936c0f15f9b119ebd11661f83", "extra_info": null, "node_info": {"start": 0, "end": 109, "_node_type": "1"}, "relationships": {"1": "47859c0e-bcb7-44af-bc0c-5332d02e9042"}}, "__type__": "1"}, "a546422e-2189-4c3d-8464-2ca5f03b2f48": {"__data__": {"text": "\n\nYour First Multisig\n\nLearn how to perform assorted operations using K-of-N multisigner authentication.\n\n", "doc_id": "a546422e-2189-4c3d-8464-2ca5f03b2f48", "embedding": null, "doc_hash": "9bb36030225a5429d600ce3c3b6e6e1ecef586dc811c433dd949ee60ac7a8b21", "extra_info": null, "node_info": {"start": 0, "end": 106, "_node_type": "1"}, "relationships": {"1": "78cacd3f-ceb6-469c-b180-2e454f47906b"}}, "__type__": "1"}, "4f6bc843-904e-4f2d-b4b3-f13d560f521f": {"__data__": {"text": "\n\nTransactions and States\n\nThe two fundamental concepts at the heart of the Aptos blockchain are transactions and states:\n\n* **Transactions**: Transactions represent the exchange of data (e.g., Aptos Coins or NFTs) between accounts on the Aptos blockchain.\n* **States**: The state, i.e., the Aptos blockchain ledger state, represents the state of all the accounts in the Aptos blockchain. \n\n:::tip\nOnly executing transactions can change the ledger state.\n:::\n\n", "doc_id": "4f6bc843-904e-4f2d-b4b3-f13d560f521f", "embedding": null, "doc_hash": "c1b190f6a7b7d21af0cf1aceb99b2e424b1bc15768125500140c3b804e9e3f12", "extra_info": null, "node_info": {"start": 0, "end": 460, "_node_type": "1"}, "relationships": {"1": "0d7952c2-b040-4b3a-9ac8-f41316999168"}}, "__type__": "1"}, "d1e1d171-7925-4f8c-9aee-c15ee79d6ff3": {"__data__": {"text": "\n\nTransactions\n\nAptos transactions contain information such as the sender\u2019s account address, authentication from the sender, the desired operation to be performed on the Aptos blockchain, and the amount of gas the sender is willing to pay to execute the transaction.\n\n", "doc_id": "d1e1d171-7925-4f8c-9aee-c15ee79d6ff3", "embedding": null, "doc_hash": "d9616215914c57f164e4e18729cf95eb034ef99242e4ab2a4ae073c92d3c1126", "extra_info": null, "node_info": {"start": 0, "end": 268, "_node_type": "1"}, "relationships": {"1": "9e5b374a-7350-4bed-aa79-90347b432c94"}}, "__type__": "1"}, "f599d3a1-3114-4264-af57-f565692703f9": {"__data__": {"text": "\n\nTransaction states\n\nA transaction may end in one of the following states:\n\n* Committed on the blockchain and executed. This is considered as a successful transaction.\n* Committed on the blockchain and aborted. The abort code indicates why the transaction failed to execute.\n* Discarded during transaction submission due to a validation check such as insufficient gas, invalid transaction format, or incorrect key.\n* Discarded after transaction submission but before attempted execution. This could be caused by timeouts or insufficient gas due to other transactions affecting the account.\n\nThe sender\u2019s account will be charged gas for any committed transactions.\n\nDuring transaction submission, the submitter is notified of successful submission or a reason for failing validations otherwise.\n\nA transaction that is successfully submitted but ultimately discarded may have no visible state in any accessible Aptos node or within the Aptos network. A user can attempt to resubmit the same transaction to re-validate the transaction. If the submitting node believes that this transaction is still valid, it will return an error stating that an identical transaction has been submitted.\n\nThe submitter can try to increase the gas cost by a trivial amount to help make progress and adjust for whatever may have been causing the discarding of the transaction further downstream.\n\n:::tip Read more\nSee Aptos Blockchain Deep Dive for a comprehensive description of the Aptos transaction lifecycle.\n:::\n\n", "doc_id": "f599d3a1-3114-4264-af57-f565692703f9", "embedding": null, "doc_hash": "2c40dd6d01451ab2485343ee6d98647e244af2674f734f083faf4a3dd49ed027", "extra_info": null, "node_info": {"start": 0, "end": 1498, "_node_type": "1"}, "relationships": {"1": "8bb3f53c-c879-4934-9de7-3ef90cdeee6e"}}, "__type__": "1"}, "fb20a7f9-807e-4151-b7c9-1a4aea17ed55": {"__data__": {"text": "\n\nContents of a Transaction\n\nA signed transaction on the blockchain contains the following information:\n\n- **Signature**: The sender uses a digital signature to verify that they signed the transaction (i.e., authentication).\n- **Sender address**: The sender's account address.\n- **Sender public key**: The public authentication key that corresponds to the private authentication key used to sign the transaction.\n- **Program**: The program comprises:\n  - A Move module and function name or a move bytecode transaction script.\n  - An optional list of inputs to the script. For a peer-to-peer transaction, these inputs contain the recipient's information and the amount transferred to them.\n  - An optional list of Move bytecode modules to publish.\n- **Gas price** (in specified gas units): This is the amount the sender is willing to pay per unit of gas to execute the transaction. Gas is a way to pay for computation and storage. A gas unit is an abstract measurement of computation with no inherent real-world value.\n- **Maximum gas amount**: The maximum gas amount is the maximum gas units the transaction is allowed to consume.\n- **Sequence number**: This is an unsigned integer that must be equal to the sender's account sequence number at the time of execution.\n- **Expiration time**: A timestamp after which the transaction ceases to be valid (i.e., expires).\n\n", "doc_id": "fb20a7f9-807e-4151-b7c9-1a4aea17ed55", "embedding": null, "doc_hash": "1a6141204f825e437fc5006beacce38d583b7df5617e5ac8ca8840035f6e0e38", "extra_info": null, "node_info": {"start": 0, "end": 1367, "_node_type": "1"}, "relationships": {"1": "c540eb63-ff4c-48c2-a7ff-a0778c54486e"}}, "__type__": "1"}, "ede988f0-374d-4009-83e7-317f174af24c": {"__data__": {"text": "\n\nTypes of transactions\nWithin a given transaction, the target of execution can be one of two types:\n\n- An entry point\n- A script (payload)\n\nCurrently the SDKs Python and Typescript support the generation of transactions that target entry points only. This guide points out many of those entry points, such as `coin::transfer` and `aptos_account::create_account`.\n\nAll operations on the Aptos blockchain should be available via entry point calls. While one could submit multiple transactions calling entry points in series, many such operations may benefit from being called atomically from a single transaction. A script payload transaction can call any entry point or public function defined within any module.\n\n:::tip Move book\nCurrently there are no tutorials in this guide on script payloads, but the Move book does go in some depth.\n:::\n\n:::tip Read more\nSee the tutorial on Your First Transaction for generating valid transactions.\n:::\n\n:::note Transaction generation\nThe Aptos REST API supports generating BCS-encoded transactions from JSON. This is useful for rapid prototyping, but be cautious using it in Mainnet as this places a lot of trust on the fullnode generating the transaction.\n:::\n\n", "doc_id": "ede988f0-374d-4009-83e7-317f174af24c", "embedding": null, "doc_hash": "311716728cb686d3686b0f57423209cd87d5d8790f8788c7c85b751684e6c64d", "extra_info": null, "node_info": {"start": 0, "end": 1203, "_node_type": "1"}, "relationships": {"1": "b2446e6f-d5e0-4c31-820a-5ae996921571"}}, "__type__": "1"}, "6bba2efa-bcb0-4075-bad9-abd72fbeaa5b": {"__data__": {"text": "\n\nStates\n\nThe Aptos blockchain's ledger state, or global state, represents the state of all accounts in the Aptos blockchain. Each validator node in the blockchain must know the latest version of the global state to execute any transaction.\n\nAnyone can submit a transaction to the Aptos blockchain to modify the ledger state. Upon execution of a transaction, a transaction output is generated. A transaction output contains zero or more operations to manipulate the ledger state called **write sets** emitting a vector of resulting events, the amount of gas consumed, and the executed transaction status.\n\n", "doc_id": "6bba2efa-bcb0-4075-bad9-abd72fbeaa5b", "embedding": null, "doc_hash": "60a2d657ade91c2b615df43da2e74fda7211b38fbb4de7a1493c4957cece9a3d", "extra_info": null, "node_info": {"start": 0, "end": 606, "_node_type": "1"}, "relationships": {"1": "ed13d6cd-2525-43ab-9d13-6c7561d84493"}}, "__type__": "1"}, "7b8e9e95-f95c-488f-8434-ec57622d1901": {"__data__": {"text": "\n\nProofs\n\nThe Aptos blockchain uses proof to verify the authenticity and correctness of the blockchain data.\n\nData within the Aptos blockchain is replicated across the network. Each validator and fullnode's storage is responsible for persisting the agreed upon blocks of transactions and their execution results to the database. \n\nThe blockchain is represented as an ever-growing Merkle tree, where each leaf appended to the tree represents a single transaction executed by the blockchain.\n\nAll operations executed by the blockchain and all account states can be verified cryptographically. These cryptographic proofs ensure that:\n- The validator nodes agree on the state. \n- The client does not need to trust the entity from which it is receiving data. For example, if a client fetches the last **n** transactions from an account, a proof can attest that no transactions were added, omitted or modified in the response. The client may also query for the state of an account, ask whether a specific transaction was processed, and so on.\n\n", "doc_id": "7b8e9e95-f95c-488f-8434-ec57622d1901", "embedding": null, "doc_hash": "de61d22b0468901a34afcd05037033661cbc660edca6ed6e0a0fac26a83f740b", "extra_info": null, "node_info": {"start": 0, "end": 1038, "_node_type": "1"}, "relationships": {"1": "7d625ab5-5385-4d31-9c9e-2fadfe519fe1"}}, "__type__": "1"}, "c33e3b59-4dac-4ed7-8726-df37db548638": {"__data__": {"text": "\n\nVersioned database\n\nThe ledger state is versioned using an unsigned 64-bit integer corresponding to the number of transactions the system has executed. This versioned database allows the validator nodes to:\n\n- Execute a transaction against the ledger state at the latest version.\n- Respond to client queries about ledger history at both current and previous versions.\n\n", "doc_id": "c33e3b59-4dac-4ed7-8726-df37db548638", "embedding": null, "doc_hash": "09c45928d3190ce86ddb291b886e5b10bb6153719ca3586f08c61758b42a2604", "extra_info": null, "node_info": {"start": 0, "end": 371, "_node_type": "1"}, "relationships": {"1": "290ee3e6-9a6a-4b91-a3a2-ffb85d561896"}}, "__type__": "1"}, "e91792ff-0c66-4873-bf49-1f4ee434c9c7": {"__data__": {"text": "\n\nTransactions change ledger state\n\n<ThemedImage\nalt=\"Signed Transaction Flow\"\nsources={{\n    light: useBaseUrl('/img/docs/transactions-and-state.svg'),\n    dark: useBaseUrl('/img/docs/transactions-and-state-dark.svg'),\n  }}\n/>\n\nThe above figure shows how executing transaction T*i* changes the state of the Aptos blockchain from S*i-1* to S*i*.\n\nIn the figure:\n\n- Accounts **A** and **B**: Represent Alice's and Bob's accounts on the Aptos blockchain.\n- **S*i-1*** : Represents the (*i-1*)-the state of the blockchain. In this state, Alice's account **A** has a balance of 110 APT (Aptos coins), and Bob's account **B** has a balance of 52 APT.\n- **T*i*** : This is the *i*-th transaction executed on the blockchain. In this example, it represents Alice sending 10 APT to Bob.\n- **Apply()**: This is a deterministic function that always returns the same final state for a specific initial state and a specific transaction. If the current state of the blockchain is **S*i-1***, and transaction **T*i*** is executed on the state **S*i-1***, then the new state of the blockchain is always **S*i***. The Aptos blockchain uses the Move language to implement the deterministic execution function **Apply()**.\n- **S*i*** : This is the *i*-the state of the blockchain. When the transaction **T*i*** is applied to the blockchain, it generates the new state **S*i*** (an outcome of applying **Apply(S*i-1*, T*i*)** to **S*i-1*** and **T*i***). This causes Alice\u2019s account balance to be reduced by 10 to 100 APT and Bob\u2019s account balance to be increased by 10 to 62 APT. The new state **S*i*** shows these updated balances.\n\n", "doc_id": "e91792ff-0c66-4873-bf49-1f4ee434c9c7", "embedding": null, "doc_hash": "a49ca02b58e780500f9077fd4a445c0beb6991a0da128b3489ee2911f2b7f56e", "extra_info": null, "node_info": {"start": 0, "end": 1615, "_node_type": "1"}, "relationships": {"1": "cd481830-eca5-4f27-88d4-e3b0f3a9c9fa"}}, "__type__": "1"}, "44726e6a-1517-4935-b3ce-bb58e5d90994": {"__data__": {"text": "\n\nComponents of the TypeScript SDK\n\n- API Client Layer\n- Core Layer\n- Plugins Layer\n- Tests and Validation\n\n", "doc_id": "44726e6a-1517-4935-b3ce-bb58e5d90994", "embedding": null, "doc_hash": "b6bbafd4f0c832388a18f30ba9962f48d07b129e8df85456e6d0f16d9563b1c6", "extra_info": null, "node_info": {"start": 0, "end": 108, "_node_type": "1"}, "relationships": {"1": "7af792b9-ca80-478f-9409-b6f2ce6a11dd"}}, "__type__": "1"}, "4f3a8ce5-17ec-4381-b00b-79aa6e97fdb2": {"__data__": {"text": "\n\nUnit Tests\n\nUnit testing for Move adds three new annotations to the Move source language:\n\n* `#[test]`\n* `#[test_only]`, and\n* `#[expected_failure]`.\n\nThey respectively mark a function as a test, mark a module or module member (`use`, function, or struct) as code to be included for testing only, and mark that a test is expected to fail. These annotations can be placed on a function with any visibility. Whenever a module or module member is annotated as `#[test_only]` or `#[test]`, it will not be included in the compiled bytecode unless it is compiled for testing.\n\n", "doc_id": "4f3a8ce5-17ec-4381-b00b-79aa6e97fdb2", "embedding": null, "doc_hash": "5482feac85b1fbb728f979a845798120a6e9c90173114be63f3f3f968cab4ac6", "extra_info": null, "node_info": {"start": 0, "end": 573, "_node_type": "1"}, "relationships": {"1": "da1f0b1b-0c84-4d21-9465-9d3bebc182e7"}}, "__type__": "1"}, "7bb760df-c7da-4bca-bde0-1673e76fb318": {"__data__": {"text": "\n\nTesting Annotations: Their Meaning and Usage\n\nBoth the `#[test]` and `#[expected_failure]` annotations can be used either with or without arguments.\n\nWithout arguments, the `#[test]` annotation can only be placed on a function with no parameters. This annotation simply marks this function as a test to be run by the unit testing harness.\n\n```\n#[test] // OK\nfun this_is_a_test() { ... }\n\n#[test] // Will fail to compile since the test takes an argument\nfun this_is_not_correct(arg: signer) { ... }\n```\n\nA test can also be annotated as an `#[expected_failure]`. This annotation marks that the test should is expected to raise an error. \nYou can ensure that a test is aborting with a specific abort `` in the module ``.\nby annotating it with `#[expected_failure(abort_code = , location = )]`, \nif it then fails with a different abort code, in a different module or with a non-abort error the test will fail. Note that `` can be `Self`(in the current module) or a qualified name, e.g. `vector::std`.\nOnly functions that have the `#[test]` annotation can also be annotated as an #`[expected_failure]`.\n\n```\n#[test]\n#[expected_failure]\npublic fun this_test_will_abort_and_pass() { abort 1 }\n\n#[test]\n#[expected_failure]\npublic fun test_will_error_and_pass() { 1/0; }\n\n#[test]\n#[expected_failure(abort_code = 0, location = Self)]\npublic fun test_will_error_and_fail() { 1/0; }\n\n#[test, expected_failure] // Can have multiple in one attribute. This test will pass.\npublic fun this_other_test_will_abort_and_pass() { abort 1 }\n```\n\nWith arguments, a test annotation takes the form `#[test( = , ...,  = )]`. If a function is annotated in such a manner, the function's parameters must be a permutation of the parameters , ..., `, i.e., the order of these parameters as they occur in the function and their order in the test annotation do not have to be the same, but they must be able to be matched up with each other by name.\n\nOnly parameters with a type of `signer` are supported as test parameters. If a non-`signer` parameter is supplied, the test will result in an error when run.\n\n```\n#[test(arg = @0xC0FFEE)] // OK\nfun this_is_correct_now(arg: signer) { ... }\n\n#[test(wrong_arg_name = @0xC0FFEE)] // Not correct: arg name doesn't match\nfun this_is_incorrect(arg: signer) { ... }\n\n#[test(a = @0xC0FFEE, b = @0xCAFE)] // OK. We support multiple signer arguments, but you must always provide a value for that argument\nfun this_works(a: signer, b: signer) { ... }\n\n// somewhere a named address is declared\n#[test_only] // test-only named addresses are supported\naddress TEST_NAMED_ADDR = @0x1;\n...\n#[test(arg = @TEST_NAMED_ADDR)] // Named addresses are supported!\nfun this_is_correct_now(arg: signer) { ... }\n```\n\nA module and any of its members can be declared as test only. In such a case the item will only be included in the compiled Move bytecode when compiled in test mode. Additionally, when compiled outside of test mode, any non-test `use`s of a `#[test_only]` module will raise an error during compilation.\n\n```\n#[test_only] // test only attributes can be attached to modules\nmodule abc { ... }\n\n#[test_only] // test only attributes can be attached to named addresses\naddress ADDR =", "doc_id": "7bb760df-c7da-4bca-bde0-1673e76fb318", "embedding": null, "doc_hash": "7c24d8bfd04e950f89c525175581a5bf7616816dfb51a2cd4cae125d8dfc7b71", "extra_info": null, "node_info": {"start": 0, "end": 3187, "_node_type": "1"}, "relationships": {"1": "6d4e6100-04fe-40cd-ba8a-8aaecbeef9af", "3": "60a267b7-169e-423f-9841-5e5ef726f076"}}, "__type__": "1"}, "60a267b7-169e-423f-9841-5e5ef726f076": {"__data__": {"text": "// test only attributes can be attached to named addresses\naddress ADDR = @0x1;\n\n#[test_only] // .. to uses\nuse 0x1::some_other_module;\n\n#[test_only] // .. to structs\nstruct SomeStruct { ... }\n\n#[test_only] // .. and functions. Can only be called from test code, but not a test\nfun test_only_function(...) { ... }\n```\n\n", "doc_id": "60a267b7-169e-423f-9841-5e5ef726f076", "embedding": null, "doc_hash": "88f790de322f6cecf19e62139707a3b1066db2e8a5babd110640beba3e64bbc0", "extra_info": null, "node_info": {"start": 3114, "end": 3433, "_node_type": "1"}, "relationships": {"1": "6d4e6100-04fe-40cd-ba8a-8aaecbeef9af", "2": "7bb760df-c7da-4bca-bde0-1673e76fb318"}}, "__type__": "1"}, "8cccd77b-f1cd-46f5-92dd-9c5b6a574e5a": {"__data__": {"text": "\n\nRunning Unit Tests\n\nUnit tests for a Move package can be run with the [`aptos move test`\ncommand](./packages.md).\n\nWhen running tests, every test will either `PASS`, `FAIL`, or `TIMEOUT`. If a test case fails, the location of the failure along with the function name that caused the failure will be reported if possible. You can see an example of this below.\n\nA test will be marked as timing out if it exceeds the maximum number of instructions that can be executed for any single test. This bound can be changed using the options below, and its default value is set to 5000 instructions. Additionally, while the result of a test is always deterministic, tests are run in parallel by default, so the ordering of test results in a test run is non-deterministic unless running with only one thread (see `OPTIONS` below).\n\nThere are also a number of options that can be passed to the unit testing binary to fine-tune testing and to help debug failing tests. These can be found using the the help flag:\n\n```\n$ aptos move test -h\n```\n\n", "doc_id": "8cccd77b-f1cd-46f5-92dd-9c5b6a574e5a", "embedding": null, "doc_hash": "bddafe34d0db3ee830504409f79b9c2c2c498a3bc7d7bbfb8d9ac36eb16ebd67", "extra_info": null, "node_info": {"start": 0, "end": 1032, "_node_type": "1"}, "relationships": {"1": "dd695a6c-7f70-40c4-8789-86dd3af727c0"}}, "__type__": "1"}, "51e4b525-0884-439d-99c5-e4ab0c1010ed": {"__data__": {"text": "\n\nExample\n\nA simple module using some of the unit testing features is shown in the following example:\n\nFirst create an empty package inside an empty directory:\n\n```\n$ aptos move init --name TestExample\n```\n\nNext add the following to the `Move.toml`:\n\n```\n[dependencies]\nMoveStdlib = { git = \"https://github.com/aptos-labs/aptos-core.git\", subdir=\"aptos-move/framework/move-stdlib\", rev = \"main\", addr_subst = { \"std\" = \"0x1\" } }\n```\n\nNext add the following module under the `sources` directory:\n\n```\n// filename: sources/my_module.move\nmodule 0x1::my_module {\n\n    struct MyCoin has key { value: u64 }\n\n    public fun make_sure_non_zero_coin(coin: MyCoin): MyCoin {\n        assert!(coin.value > 0, 0);\n        coin\n    }\n\n    public fun has_coin(addr: address): bool {\n        exists(addr)\n    }\n\n    #[test]\n    fun make_sure_non_zero_coin_passes() {\n        let coin = MyCoin { value: 1 };\n        let MyCoin { value: _ } = make_sure_non_zero_coin(coin);\n    }\n\n    #[test]\n    // Or #[expected_failure] if we don't care about the abort code\n    #[expected_failure(abort_code = 0, location = Self)]\n    fun make_sure_zero_coin_fails() {\n        let coin = MyCoin { value: 0 };\n        let MyCoin { value: _ } = make_sure_non_zero_coin(coin);\n    }\n\n    #[test_only] // test only helper function\n    fun publish_coin(account: &signer) {\n        move_to(account, MyCoin { value: 1 })\n    }\n\n    #[test(a = @0x1, b = @0x2)]\n    fun test_has_coin(a: signer, b: signer) {\n        publish_coin(&a);\n        publish_coin(&b);\n        assert!(has_coin(@0x1), 0);\n        assert!(has_coin(@0x2), 1);\n        assert!(!has_coin(@0x3), 1);\n    }\n}\n```\n\n", "doc_id": "51e4b525-0884-439d-99c5-e4ab0c1010ed", "embedding": null, "doc_hash": "e6487d8dd6bf4dafdb2328f19becbeffacdad1c5b84752339becd5c27c5b8535", "extra_info": null, "node_info": {"start": 0, "end": 1643, "_node_type": "1"}, "relationships": {"1": "1c117f25-4ece-4b66-b14e-69408b02928a"}}, "__type__": "1"}, "aab3f92a-cbb6-4247-b572-d385f629db8a": {"__data__": {"text": "\n\nRunning Tests\n\nYou can then run these tests with the `aptos move test` command:\n\n```\n$ aptos move test\nBUILDING MoveStdlib\nBUILDING TestExample\nRunning Move unit tests\n[ PASS    ] 0x1::my_module::make_sure_non_zero_coin_passes\n[ PASS    ] 0x1::my_module::make_sure_zero_coin_fails\n[ PASS    ] 0x1::my_module::test_has_coin\nTest result: OK. Total tests: 3; passed: 3; failed: 0\n```\n\n", "doc_id": "aab3f92a-cbb6-4247-b572-d385f629db8a", "embedding": null, "doc_hash": "11a20b9dc2305ba99f96e7392651b1115702552f2fc87026fea267b8e1234ce1", "extra_info": null, "node_info": {"start": 0, "end": 384, "_node_type": "1"}, "relationships": {"1": "c48dc9dd-aac6-46f8-bc8e-26ec3f77ddbb"}}, "__type__": "1"}, "f3e579ed-75ad-48e6-b0af-46fe5d30faa7": {"__data__": {"text": "\n\nUsing Test Flags\n\n", "doc_id": "f3e579ed-75ad-48e6-b0af-46fe5d30faa7", "embedding": null, "doc_hash": "4313b6c6c63c01e6989c912c7396aaa0fb273b5b5586a1af2604790c17c6eb7f", "extra_info": null, "node_info": {"start": 0, "end": 20, "_node_type": "1"}, "relationships": {"1": "1909c798-ae88-443d-b7ee-d7f9ac2f820b"}}, "__type__": "1"}, "f7e217cc-9cb1-4cfb-82e1-32b56f824da3": {"__data__": {"text": "\n\n`-f <str>` or `--filter <str>`\nThis will only run tests whose fully qualified name contains ``. For example if we wanted to only run tests with `\"zero_coin\"` in their name:\n\n```\n$ aptos move test -f zero_coin\nCACHED MoveStdlib\nBUILDING TestExample\nRunning Move unit tests\n[ PASS    ] 0x1::my_module::make_sure_non_zero_coin_passes\n[ PASS    ] 0x1::my_module::make_sure_zero_coin_fails\nTest result: OK. Total tests: 2; passed: 2; failed: 0\n```\n\n", "doc_id": "f7e217cc-9cb1-4cfb-82e1-32b56f824da3", "embedding": null, "doc_hash": "6e4eb098ea89ebef9f1125848064bde19b85f602a53be89546c1ec5fe6c7e007", "extra_info": null, "node_info": {"start": 0, "end": 446, "_node_type": "1"}, "relationships": {"1": "7e9ede49-f923-4460-8c28-c6be1a876c2f"}}, "__type__": "1"}, "9a03c141-f5ca-415f-af18-5336403955ea": {"__data__": {"text": "\n\n`--coverage`\nThis will compute code being covered by test cases and generate coverage summary.\n\n```\n$ aptos move test --coverage\nINCLUDING DEPENDENCY AptosFramework\nINCLUDING DEPENDENCY AptosStdlib\nINCLUDING DEPENDENCY MoveStdlib\nBUILDING TestExample\nRunning Move unit tests\n[ PASS    ] 0x1::my_module::make_sure_non_zero_coin_passes\n[ PASS    ] 0x1::my_module::make_sure_zero_coin_fails\n[ PASS    ] 0x1::my_module::test_has_coin\nTest result: OK. Total tests: 3; passed: 3; failed: 0\n+-------------------------+\n| Move Coverage Summary   |\n+-------------------------+\nModule 0000000000000000000000000000000000000000000000000000000000000001::my_module\n>>> % Module coverage: 100.00\n+-------------------------+\n| % Move Coverage: 100.00  |\n+-------------------------+\nPlease use `aptos move coverage -h` for more detailed source or bytecode test coverage of this package\n```\n\nThen by running `aptos move coverage`, we can get more detailed coverage information. These can be found using the the help flag:\n\n```\n$ aptos move coverage -h\n```\n\n", "doc_id": "9a03c141-f5ca-415f-af18-5336403955ea", "embedding": null, "doc_hash": "ad8d9c446f33dc447aa06e9f56ade85d42d575d97e639039d456b2ff6372d2ed", "extra_info": null, "node_info": {"start": 0, "end": 1041, "_node_type": "1"}, "relationships": {"1": "64dd360a-d3f1-417d-87e9-422cd0da13da"}}, "__type__": "1"}, "e4ee87e6-64a7-4cf7-82e7-fa6fe5374af7": {"__data__": {"text": "\n\nAptos Unity SDK\n\nThe Aptos Unity SDK is a .NET implementation of the Aptos SDK, compatible with .NET Standard 2.0 and .NET 4.x for Unity. The goal of this SDK is to provide a set of tools for developers to build multi-platform applications (mobile, desktop, web, VR) using the Unity game engine and the Aptos blockchain infrastructure.\n\nSee the post Aptos Labs brings Web3 to Gaming with its new SDK for Unity developers and the Technical details section of the Unity SDK README for all of the features offered to game developers by the Aptos Unity SDK.\n\n", "doc_id": "e4ee87e6-64a7-4cf7-82e7-fa6fe5374af7", "embedding": null, "doc_hash": "5296721454cce71819239f1d1ffdfa831cbc8014325c1ead3630fc9b580d3e32", "extra_info": null, "node_info": {"start": 0, "end": 557, "_node_type": "1"}, "relationships": {"1": "ded880db-84d7-41d1-b57a-254e64eb03d8"}}, "__type__": "1"}, "31b81a9a-4b8c-45cd-85a6-24b07d118c06": {"__data__": {"text": "\n\nUser flows\n\nThe Aptos Unity SDK supports these use cases:\n\n- *Progressive onboarding flow* in which users can log into a game by email. In this flow, transactions are proxied, and Aptos uses a distributed key system. The users can then onboard to a full custodial wallet if desired.\n- *In-game non-custodial wallet integration* in which game developers have the option to allow users to create full non-custodial wallets in the games.\n- *Off-game non-custodial wallet integration* in which game developers may allow users to connect to a desktop wallet or a mobile wallet within the game or create burner wallets from the parent wallet seamlessly.\n\n\n", "doc_id": "31b81a9a-4b8c-45cd-85a6-24b07d118c06", "embedding": null, "doc_hash": "b54df2b2e35987cb7266fff2652a3fb8c31239917b1601951847927928eeaad9", "extra_info": null, "node_info": {"start": 0, "end": 652, "_node_type": "1"}, "relationships": {"1": "99091625-b68a-4829-8e62-4ca0d9d1b226"}}, "__type__": "1"}, "b37c8ef2-6820-489b-8ac6-0226467171f0": {"__data__": {"text": "\n\nPrerequisites\n\n", "doc_id": "b37c8ef2-6820-489b-8ac6-0226467171f0", "embedding": null, "doc_hash": "0fa9f4da43bbfabf8fa3cdab57502e1889576aae22836ce420c1da917650437a", "extra_info": null, "node_info": {"start": 0, "end": 17, "_node_type": "1"}, "relationships": {"1": "6380944e-6722-4673-b2fe-19babf9c6bef"}}, "__type__": "1"}, "7994f0b7-3796-4d9c-85af-80e49fdee035": {"__data__": {"text": "\n\nSupported Unity versions\n| Supported Version: | Tested |\n| -- | -- |\n| 2021.3.x | \u2705 |\n| 2022.2.x | \u2705 |\n\n| Windows | Mac  | iOS | Android | WebGL |\n| -- | -- | -- | -- | -- |\n| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 |\n\n", "doc_id": "7994f0b7-3796-4d9c-85af-80e49fdee035", "embedding": null, "doc_hash": "f74c238a5c07b0d3f7eac3d757bee335c767c8f985a399f81499c47e550b67b5", "extra_info": null, "node_info": {"start": 0, "end": 199, "_node_type": "1"}, "relationships": {"1": "67ac6720-232e-448c-beec-9c6c86c19c74"}}, "__type__": "1"}, "f29cfe10-df2f-49be-8877-3eaf58a42cbe": {"__data__": {"text": "\n\nDependencies\n\n> As of Unity 2021.x.x, Newtonsoft Json is a common dependency. Prior versions of Unity require installing Newtonsoft.\n\n- Chaos.NaCl.Standard\n- Microsoft.Extensions.Logging.Abstractions.1.0.0 \u2014 required by NBitcoin.7.0.22\n- Newtonsoft.Json\n- NBitcoin.7.0.22\n- Portable.BouncyCastle\n- Zxing\n\n", "doc_id": "f29cfe10-df2f-49be-8877-3eaf58a42cbe", "embedding": null, "doc_hash": "4c5cf38c492ca6344add7e66b426868c356fb8d72cff3c08db74e46f0e96d786", "extra_info": null, "node_info": {"start": 0, "end": 307, "_node_type": "1"}, "relationships": {"1": "3dbb50c9-b4c4-4ab5-827b-d5ac576c812a"}}, "__type__": "1"}, "33543272-296a-46a3-aa3e-d3d0c078faef": {"__data__": {"text": "\n\nInstall the Unity SDK\n\nYou may install the Unity SDK either through our `unitypackage` or the Unity Package Manager.\n\n", "doc_id": "33543272-296a-46a3-aa3e-d3d0c078faef", "embedding": null, "doc_hash": "c2d143de2f4302bbc809898dadc8536a9c7656f662afae8cd31e25a0bd58d03b", "extra_info": null, "node_info": {"start": 0, "end": 120, "_node_type": "1"}, "relationships": {"1": "a3dfdfc2-d0d3-4949-8754-dd78d3ee355d"}}, "__type__": "1"}, "519c7cd7-deae-4128-94d2-a38187fb4bd0": {"__data__": {"text": "\n\nInstall by `unitypackage`\n\n1. Start Unity.\n2. Download the latest `Aptos.Unity.unitypackage` file from the Unity Asset Store.\n3. Click **Assets** \u2192 **Import Packages** \u2192 **Custom Package** and select the downloaded file.\n\n", "doc_id": "519c7cd7-deae-4128-94d2-a38187fb4bd0", "embedding": null, "doc_hash": "1680cecac19d2729b5a771eace8e3b1c2f11f017fbcd041e03c8625ea7e7ab86", "extra_info": null, "node_info": {"start": 0, "end": 224, "_node_type": "1"}, "relationships": {"1": "a427153b-3821-49c7-bd47-55d004472d7f"}}, "__type__": "1"}, "e7dc9d8c-0d30-4122-bb15-e36bdecdc5dc": {"__data__": {"text": "\n\nInstall by Unity Package Manager\n\n1. Open the Unity Package Manager window.\n2. Click the add **+** button in the top status bar.\n3. Select *Add package from git URL* from the dropdown menu.\n4. Enter the URL *https://github.com/aptos-labs/Aptos-Unity-SDK.git* and click **Add**.\n", "doc_id": "e7dc9d8c-0d30-4122-bb15-e36bdecdc5dc", "embedding": null, "doc_hash": "600037cfdfddfde06a27ff8e03ad02d92bd906baa90740191070e2c6f2a1d4ae", "extra_info": null, "node_info": {"start": 0, "end": 280, "_node_type": "1"}, "relationships": {"1": "b3fc7d0c-a894-4362-b8d4-d798b845d5ce"}}, "__type__": "1"}, "304c57af-7394-4d42-87e8-0a34929dd796": {"__data__": {"text": "\n\nUpdate Fullnode With New Releases\n\nWhen `devnet` is wiped and updated with newer versions, you will need to update your fullnode as well. If you do not, your fullnode will not continue to synchronize with the network. To update your fullnode, follow these steps:\n\n", "doc_id": "304c57af-7394-4d42-87e8-0a34929dd796", "embedding": null, "doc_hash": "8bf849a7341fbe7710d2ba0af84a1dd85e0dc1fb3bfacd89d2707f46317a5d5c", "extra_info": null, "node_info": {"start": 0, "end": 266, "_node_type": "1"}, "relationships": {"1": "17a02afb-21c1-410c-8c21-b9bb4f6f44dd"}}, "__type__": "1"}, "c76ee1dc-8fda-4d5a-bb46-2f05d9be2048": {"__data__": {"text": "\n\nIf you built the fullnode from aptos-core source code\n\n1. Shutdown your fullnode.\n\n2. Delete the data folder (the directory path is what you specified in the configuration file, e.g., `fullnode.yaml`).\n\n    - The default data folder is `/opt/aptos/data`.\n\n3. Delete the `genesis.blob` file and `waypoint.txt` file (depending on how you configured it, you might not have this file and may instead have a `waypoint` directly in your configuration file).\n\n4. If you use the Rust binary, pull the latest of `devnet` via `git checkout devnet && git pull`, and build the binary again.\n\n5. Download the new genesis.blob file and the new waypoint.\n\n6. Update the configuration file (e.g., `fullnode.yaml`) with the new waypoint (if you configure the waypoint directly there).\n\n7. Restart the fullnode.\n\n8. See the Verify initial synchronization section for checking if the fullnode is syncing again.\n\n", "doc_id": "c76ee1dc-8fda-4d5a-bb46-2f05d9be2048", "embedding": null, "doc_hash": "72173bc17c5c01f5923f94f7fb4af796e9665ce52ee600244497d811759b6721", "extra_info": null, "node_info": {"start": 0, "end": 895, "_node_type": "1"}, "relationships": {"1": "566eaffa-4346-41e5-9fa5-d02ae478e049"}}, "__type__": "1"}, "d6e5f82c-8afa-4410-bfd2-c0f5f54ac549": {"__data__": {"text": "\n\nIf you run a fullnode via Docker\n\n1. Shutdown your fullnode\n2. Delete the entire directory which holds your fullnode config and data directory.\n3. Rerun the instructions on Approach #2: Using Docker\n\n", "doc_id": "d6e5f82c-8afa-4410-bfd2-c0f5f54ac549", "embedding": null, "doc_hash": "5a0d76d95d3a5f09c106926d9cdda07d39ee1611a6f234170c27fd033d63ffcb", "extra_info": null, "node_info": {"start": 0, "end": 202, "_node_type": "1"}, "relationships": {"1": "bbc64c2d-8646-4e41-b7cd-ffffd0e65616"}}, "__type__": "1"}, "111743cd-b1d4-4091-9517-73ba62a41d63": {"__data__": {"text": "\n\nIf you run a fullnode on GCP\n\nAptos devnet releases can be of two types: \n- One with a data wipe to start over the Aptos blockchain\n- Second type is only a software update without a data wipe\n\n", "doc_id": "111743cd-b1d4-4091-9517-73ba62a41d63", "embedding": null, "doc_hash": "73501f0c065fd9bba9627704eeba354d09354f611a61016d02c48bd2a70ee173", "extra_info": null, "node_info": {"start": 0, "end": 195, "_node_type": "1"}, "relationships": {"1": "23028639-7754-485d-ae96-debf811fe9d8"}}, "__type__": "1"}, "f1c5e974-978d-415d-8dbc-64838198ed34": {"__data__": {"text": "\n\nUpgrade with data wipe\n\n1. You can increase the `era` number in `main.tf` to trigger a new data volume creation, which will start the node on a new DB.\n\n2. Update `image_tag` in `main.tf`.\n\n3. Update Terraform module for fullnode, run this in the same directory of your `main.tf` file:\n\n  ```bash\n  terraform get -update\n  ```\n\n4. Apply Terraform changes:\n\n  ```bash\n  terraform apply\n  ```\n\n", "doc_id": "f1c5e974-978d-415d-8dbc-64838198ed34", "embedding": null, "doc_hash": "c04c9ab866f00790d2504e5d64cc6f9ff810952cbf4c941387d5dc73fb322ee6", "extra_info": null, "node_info": {"start": 0, "end": 394, "_node_type": "1"}, "relationships": {"1": "27e5896f-c2c8-41dd-baeb-bc35b78a4964"}}, "__type__": "1"}, "0b005e26-6aee-4568-89e7-c339c363cae6": {"__data__": {"text": "\n\nUpgrade without data wipe\n\n1. Update `image_tag` in `main.tf`.\n\n2. Update Terraform module for fullnode, run this in the same directory of your `main.tf` file:\n\n  ```bash\n  terraform get -update\n  ```\n\n3. Apply Terraform changes:\n\n  ```bash\n  terraform apply\n  # if you didn't update the image tag, terraform will show nothing to change, in this case, force helm update\n  terraform apply -var force_helm_update=true\n  ```\n\n[rest_spec]: https://github.com/aptos-labs/aptos-core/tree/main/api\n[devnet_genesis]: https://devnet.aptoslabs.com/genesis.blob\n[devnet_waypoint]: https://devnet.aptoslabs.com/waypoint.txt\n[aptos-labs/aptos-core]: https://github.com/aptos-labs/aptos-core.git\n[status dashboard]: https://status.devnet.aptos.dev\n\n", "doc_id": "0b005e26-6aee-4568-89e7-c339c363cae6", "embedding": null, "doc_hash": "59ae4edd874930e7232b964012c788bf7976b11dd7a533768aca0961244eaa12", "extra_info": null, "node_info": {"start": 0, "end": 737, "_node_type": "1"}, "relationships": {"1": "4865069c-a78a-4b62-8870-8e6950d965ce"}}, "__type__": "1"}, "de83e0e3-fcba-4096-ab72-e93d0c817865": {"__data__": {"text": "\n\nUpdate Aptos Validator Node via Failover\n\nYou will likely have to upgrade or replace your validator node (VN) at some point, such as for maintenance or outages. Start anew by creating a new validator fullnode (VFN). To minimize downtime, we recommend you then convert your live validator fullnode to your validator node, and backfill the validator fullnode.\n\nSince you are already running a validator node and a validator fullnode, you have at your fingertips the means to replace your validator node immediately. Simply convert your validator fullnode to a validator node and then backfill the validator fullnode with either the updated validator node or an entirely new validator fullnode.\n\nThis page explains how to make this swap, which largely amounts to switching out files and configuration settings between the two nodes. For a community-provided version of this document for Docker setup, see Failover and migrate Validator Nodes for less downtime.\n\n", "doc_id": "de83e0e3-fcba-4096-ab72-e93d0c817865", "embedding": null, "doc_hash": "0e354401e1f0465adf06ec7f43bf6e22db91ae3106f5207cc24dddcac0ceaa6b", "extra_info": null, "node_info": {"start": 0, "end": 961, "_node_type": "1"}, "relationships": {"1": "1bb596d0-e9c2-470b-8e59-4f1a8abf4b7e"}}, "__type__": "1"}, "d363c1d5-7f07-4d65-abec-a896bd539aa2": {"__data__": {"text": "\n\nPrepare\n\nFirst, understand the data is almost identical between the two nodes. The VFN is missing the `consensus_db` and `secure-data.json`, but it is otherwise largely ready for conversion into a validator node.\n\nTo failover from an outdated or erroneous validator node to an updated and reliable validator fullnode, follow these steps:\n\n1. Ensure your machine meets the validator hardware requirements.\n1. Update your validator fullnode with the latest version of the Aptos CLI\n1. Copy the configuration files between the two nodes. See the files in the validator setup documentation you used for the full list.\n1. Synchonize data on the validator fullnode:\n   * For mainnet, use state synchronization.\n   * For devnet or testnet, bootstrap a new fullnode from snapshot.\n\n", "doc_id": "d363c1d5-7f07-4d65-abec-a896bd539aa2", "embedding": null, "doc_hash": "a62da9a507951b7b318bae8220628e9e61d9e542571864dab265a304607df856", "extra_info": null, "node_info": {"start": 0, "end": 776, "_node_type": "1"}, "relationships": {"1": "43da827b-cc90-45b9-af46-de5dfaba1fbb"}}, "__type__": "1"}, "db2c2a45-9d2e-4e9e-b701-1338a7ea60f8": {"__data__": {"text": "\n\nConfigure\n\nRemember to take the normal measures to connect your node to the Aptos network and establish staking pool operations, such as removing the `secure-data.json` file and updating your `account_address` in the `validator-identity.yaml` and `validator-fullnode-identity.yaml` files to your **pool** address.\n\nSee the sections and guides below for full details.\n\n", "doc_id": "db2c2a45-9d2e-4e9e-b701-1338a7ea60f8", "embedding": null, "doc_hash": "fa64f07e244750629cd0f6accbe303540331bf43829fdf4c84aee7a71b858283", "extra_info": null, "node_info": {"start": 0, "end": 370, "_node_type": "1"}, "relationships": {"1": "6816907c-bd57-4261-9a32-5b3f2fcf6dd6"}}, "__type__": "1"}, "35fe173d-f240-4c7c-9673-0bf2089c6d81": {"__data__": {"text": "\n\nConnect to Aptos network\n\nAfter deploying your nodes, connect to the Aptos Network.\n\n", "doc_id": "35fe173d-f240-4c7c-9673-0bf2089c6d81", "embedding": null, "doc_hash": "2699afbbe09124abcf27326d75ede4b0bf550b2db85754b7e7ce1a0aac0703fd", "extra_info": null, "node_info": {"start": 0, "end": 87, "_node_type": "1"}, "relationships": {"1": "c80da1fa-6222-4dee-aeac-23bf74194d9b"}}, "__type__": "1"}, "baeebca7-ae49-4533-9622-2733a195ecfb": {"__data__": {"text": "\n\nSet up staking pool operations\n\nAfter connecting your nodes to the Aptos network, establish staking pool operations.\n\n", "doc_id": "baeebca7-ae49-4533-9622-2733a195ecfb", "embedding": null, "doc_hash": "96347e32bed84fcd49fe2c6dbb640acbe42cc7bd1870f392b2caa30cb16eccd0", "extra_info": null, "node_info": {"start": 0, "end": 120, "_node_type": "1"}, "relationships": {"1": "314263eb-7a32-4cfb-abd9-cf508d7d28c3"}}, "__type__": "1"}, "6ca82379-ca90-47c1-9766-36177a54fd77": {"__data__": {"text": "\n\nFailover\n\nTo replace the validator node:\n\n1. Update DNS to swap the node network addresses on-chain.\n1. Turn down the validator node and validator fullnode intended to replace the validator.\n1. Restart the former validator fullnode with the validator node configuration.\n1. Observe that before DNS changes take effect that only outbound connections will form.\n1. Either reuse the former validator node or create anew to backfill the validator fullnode.\n1. Start the validator fullnode.\n1. Use Node Health Checker and follow Node Liveness Criteria to ensure the validator node is functioning properly.\n\n", "doc_id": "6ca82379-ca90-47c1-9766-36177a54fd77", "embedding": null, "doc_hash": "8877888fb177024d3727b307e240d0dfa59f87eb93f523a953c825aaf552ea19", "extra_info": null, "node_info": {"start": 0, "end": 604, "_node_type": "1"}, "relationships": {"1": "66451282-083c-4663-b240-deaa2e5d1896"}}, "__type__": "1"}, "1b3d93a5-ec3a-4704-b6d8-815ae663faa4": {"__data__": {"text": "\n\nRun multiple validator fullnodes\n\nYou may want to have a VFN ready for failover or need access to REST APIs for building without any rate limits. Note you have the ability to run a local multinode network that may be suitable.\n\nWith caution, you may also run multiple fullnodes on the Aptos network. Note that it is not currently recommended to run multiple VFNs with the same network identity and connect them to the validator using the `vfn` network, as this may cause issues with node metrics and telemetry.\n\nTo run multiple fullnodes and connect them to your validator:\n\n1. Connect only one fullnode using the `vfn` network configuration in the validator configuration `.yaml` file. This will be your single VFN (as registered on-chain) that other Aptos nodes will connect to.\n1. Connect the rest of your fullnodes to the validator using a `public` network configuration *and a different network identity* in the validator configuration `.yaml` file. These will be your additional VFNs that you can use for other purposes.\n\nNote that because the additional VFNs will not be registered on-chain, other nodes will not know their network addresses and will not be able to to connect to them. These would be for your use only.\n\n", "doc_id": "1b3d93a5-ec3a-4704-b6d8-815ae663faa4", "embedding": null, "doc_hash": "430190095b3ac6a58a940a33effd59b61075694914cf9338910f4608d92d701a", "extra_info": null, "node_info": {"start": 0, "end": 1230, "_node_type": "1"}, "relationships": {"1": "58625cbf-d2c4-48a0-ad02-83b06153c409"}}, "__type__": "1"}, "0c92341d-569f-43b2-8e0d-33edc428d2ec": {"__data__": {"text": "\n\nUse the Aptos CLI\n\nThe `aptos` tool is a command line interface (CLI) for developing on the Aptos blockchain, debugging, and for node operations. This document describes how to use the `aptos` CLI tool. To download or build the CLI, follow Install Aptos CLI.\n\n", "doc_id": "0c92341d-569f-43b2-8e0d-33edc428d2ec", "embedding": null, "doc_hash": "7d823530c4fc57a9effc7c6a197b2e3b6fced9da7f7b5d4fab2b9fbc901ec5f3", "extra_info": null, "node_info": {"start": 0, "end": 262, "_node_type": "1"}, "relationships": {"1": "4e86bd02-dd1c-4c11-95ad-ca947b49b30f"}}, "__type__": "1"}, "93017111-f625-47f6-955a-5ac529d10860": {"__data__": {"text": "\n\nCommand line help\n\nCommand line help is available.  Type `aptos help` or `aptos --help` to see the available command options. See below the usage output from `aptos --help`:\n\n```bash\nUSAGE:\n    aptos \n\nOPTIONS:\n    -h, --help       Print help information\n    -V, --version    Print version information\n\nSUBCOMMANDS:\n    account       Tool for interacting with accounts\n    config        Tool for interacting with configuration of the Aptos CLI tool\n    genesis       Tool for setting up an Aptos chain Genesis transaction\n    governance    Tool for on-chain governance\n    help          Print this message or the help of the given subcommand(s)\n    info          Show build information about the CLI\n    init          Tool to initialize current directory for the aptos tool\n    key           Tool for generating, inspecting, and interacting with keys\n    move          Tool for Move related operations\n    multisig      Tool for interacting with multisig accounts\n    node          Tool for operations related to nodes\n    stake         Tool for manipulating stake and stake pools\n    update        Update the CLI itself\n```\n\n", "doc_id": "93017111-f625-47f6-955a-5ac529d10860", "embedding": null, "doc_hash": "b80a477199afcc7a23575cfbe7e3cedb3e6b1569fabfb3d5863a1dccfe04afee", "extra_info": null, "node_info": {"start": 0, "end": 1128, "_node_type": "1"}, "relationships": {"1": "321e2a20-7675-40d8-b51e-d532a1092821"}}, "__type__": "1"}, "2c667993-f991-4008-815f-1832f35a9107": {"__data__": {"text": "\n\nCommand-specific help\n\nCommand-specific help is also available.  For example, see below the usage output from `aptos move --help`:\n\n```bash\n\nUSAGE:\n    aptos move \n\nOPTIONS:\n    -h, --help       Print help information\n    -V, --version    Print version information\n\nSUBCOMMANDS:\n    clean\n            Cleans derived artifacts of a package\n    compile\n            Compiles a package and returns the [`ModuleId`]s\n    download\n            Downloads a package and stores it in a directory named after the package\n    help\n            Print this message or the help of the given subcommand(s)\n    init\n            Creates a new Move package at the given location\n    list\n            Lists information about packages and modules on-chain\n    prove\n            Proves the Move package\n    publish\n            Publishes the modules in a Move package to the Aptos blockchain\n    run\n            Run a Move function\n    test\n            Runs Move unit tests for a package\n    transactional-test\n            Run Move transactional tests\n```\n", "doc_id": "2c667993-f991-4008-815f-1832f35a9107", "embedding": null, "doc_hash": "5d462df51bec471a5f9018d4051f3b82a92efdacdcbdf484597914d83f9e613a", "extra_info": null, "node_info": {"start": 0, "end": 1034, "_node_type": "1"}, "relationships": {"1": "d3c1d79b-b236-415f-a790-25da8640ea5b"}}, "__type__": "1"}, "ccab170e-dc33-4349-870f-9ae2703f41b5": {"__data__": {"text": "\n\nSub-command help\n\nHelp for sub-commands is also available.  For example, see below the usage output from `aptos move compile --help`:\n\n```bash\n\nUSAGE:\n    aptos move compile [OPTIONS]\n\nOPTIONS:\n    -h, --help\n            Print help information\n\n        --named-addresses \n            Named addresses for the move binary\n\n            Example: alice=0x1234,bob=0x5678\n\n            Note: This will fail if there are duplicates in the Move.toml file remove those first. Also make sure there's no space in between named addresses if more than one is provided.\n\n            [default: ]\n\n        --output-dir \n            Path to save the compiled move package\n\n            Defaults to `/build`\n\n        --package-dir \n            Path to a move package (the folder with a Move.toml file)\n\n    -V, --version\n            Print version information\n```\n\n", "doc_id": "ccab170e-dc33-4349-870f-9ae2703f41b5", "embedding": null, "doc_hash": "57a0e4f6629cd3977e1ee596e22fcbfdbfbca12acaf923d9a599fcd9cda9fd21", "extra_info": null, "node_info": {"start": 0, "end": 846, "_node_type": "1"}, "relationships": {"1": "fa978c6b-6d35-46aa-9b87-9cb5c6dbd969"}}, "__type__": "1"}, "c3b1199d-927c-4f48-8966-1126babe6a98": {"__data__": {"text": "\n\nCLI information\n\nRun the `aptos info` command to get the CLI information for debugging purposes. See an example output of the `aptos info` command:\n\n```bash\n{\n  \"Result\": {\n    \"build_branch\": \"testnet\",\n    \"build_cargo_version\": \"cargo 1.62.1 (a748cf5a3 2022-06-08)\",\n    \"build_commit_hash\": \"f8bf8fdeec33c8c6ff3d1cbaf4990b9e54c2176a\",\n    \"build_os\": \"macos-x86_64\",\n    \"build_pkg_version\": \"0.3.2\",\n    \"build_rust_channel\": \"1.62.1-x86_64-apple-darwin\",\n    \"build_rust_version\": \"rustc 1.62.1 (e092d0b6b 2022-07-16)\",\n    \"build_tag\": \"\",\n    \"build_time\": \"2022-08-26 22:27:31 +00:00\"\n  }\n}\n```\n\n", "doc_id": "c3b1199d-927c-4f48-8966-1126babe6a98", "embedding": null, "doc_hash": "f92ffd9cfce30a5318ae0bcdefd7009b8ccd6f6adcce10c827bc9c8686bcc69f", "extra_info": null, "node_info": {"start": 0, "end": 607, "_node_type": "1"}, "relationships": {"1": "7dc66e51-14fc-48c4-be39-3fdc0d12e950"}}, "__type__": "1"}, "3e3c2318-b9fe-4dab-b96d-5f707dcf0bda": {"__data__": {"text": "\n\nConfiguration examples\n\nConfiguration for the CLI works like this:\n\n", "doc_id": "3e3c2318-b9fe-4dab-b96d-5f707dcf0bda", "embedding": null, "doc_hash": "fab23a2055a93e24c6825912cab3a5a2655817da25302a2ad6ba661e64ca9afe", "extra_info": null, "node_info": {"start": 0, "end": 70, "_node_type": "1"}, "relationships": {"1": "744922ec-9e6a-45e4-aa82-83b5b133d924"}}, "__type__": "1"}, "218ee187-cb06-471a-ada8-e532b4ebef8e": {"__data__": {"text": "\n\nIn the current working directory for local runs\n\n1. Your configurations are in a **local** YAML configuration file `.aptos/config.yaml`, i.e., located in the current working directory where you run the CLI. In this case you must run your CLI commands from this current working directory for this configuration to be used.\n2. You can verify that the CLI is set to use this local configuration YAML file by running the command:\n\n  ```bash\n  aptos config show-global-config\n  ```\n  You should see the below output:\n  ```bash\n  {\n    \"Result\": {\n      \"config_type\": \"Workspace\"\n    }\n  }\n  ```\n  The `Workspace` value for the `config_type` indicates that the `.aptos/config.yaml` file is used for the CLI configuration.\n\n", "doc_id": "218ee187-cb06-471a-ada8-e532b4ebef8e", "embedding": null, "doc_hash": "2e465e31c869499df8eadc2938afabd4660b4d546bd4416dd1133d986ddbcff1", "extra_info": null, "node_info": {"start": 0, "end": 720, "_node_type": "1"}, "relationships": {"1": "094c1eef-bf04-4550-9310-5ef4757bcdd1"}}, "__type__": "1"}, "39599c6f-2c15-4455-be3b-ccb52538ea43": {"__data__": {"text": "\n\nIn the home directory for the global runs\n\n1. Your configurations are in a **global** YAML configuration file `~/.aptos/global_config.yaml`, i.e., located in your home directory.\n2. Set the CLI to use this global configuration YAML file by running this command:\n  ```bash\n  aptos config set-global-config --config-type global\n  ```\n  You will see the below output:\n  ```\n  {\n    \"Result\": {\n      \"config_type\": \"Global\"\n    }\n  }\n  ```\n  You can also show the global configuration with the `show-global-config` command.\n  ```bash\n  $ aptos config show-global-config\n  {\n    \"Result\": {\n      \"config_type\": \"Global\"\n    }\n  }\n  ```\n\n:::tip Default configuration\nIf you did not set any global configuration, then the `./.aptos/config.yaml` in the current working directory is used for configuration.\n:::\n\n", "doc_id": "39599c6f-2c15-4455-be3b-ccb52538ea43", "embedding": null, "doc_hash": "16110f0c73832c107f2b90256002c4ddd15939655de36a85d14538a9c68ae6e8", "extra_info": null, "node_info": {"start": 0, "end": 807, "_node_type": "1"}, "relationships": {"1": "06a1345e-48c0-40b0-b35e-2cbb389e81e2"}}, "__type__": "1"}, "bb50b8e5-49bc-4d58-942b-db080250e72f": {"__data__": {"text": "\n\nSetting up shell completion\n\nYou can set up shell completions with the `generate-shell-completions` command.  You can lookup configuration for your specific shell. The supported shells are `bash, zsh, fish, powershell, elvish]`. An example is below for [`oh my zsh`.\n\n```bash\naptos config generate-shell-completions --shell zsh --output-file ~/.oh-my-zsh/completions/_aptos\n```\n\n", "doc_id": "bb50b8e5-49bc-4d58-942b-db080250e72f", "embedding": null, "doc_hash": "3be6b8c0960b3f95fbef84134b18451584a9e8f0e0a9e227f99cffb8480711ff", "extra_info": null, "node_info": {"start": 0, "end": 381, "_node_type": "1"}, "relationships": {"1": "ff6d4719-6e4d-472f-8866-0bc917f7d988"}}, "__type__": "1"}, "288ce556-e2cf-453a-9bec-26a527c5b5eb": {"__data__": {"text": "\n\nInitialize local configuration and create an account\n\nA local folder named `.aptos/` will be created with a configuration `config.yaml` which can be used to store configuration between CLI runs.  This is local to your run, so you will need to continue running CLI from this folder, or reinitialize in another folder.\n\n", "doc_id": "288ce556-e2cf-453a-9bec-26a527c5b5eb", "embedding": null, "doc_hash": "1f6c4dcb70d17e74df09d0592128b3a747771a3fc1f6048d3399dac4ff9cc357", "extra_info": null, "node_info": {"start": 0, "end": 320, "_node_type": "1"}, "relationships": {"1": "64509b96-6c87-435b-a5e2-d5838b1dd525"}}, "__type__": "1"}, "53e5cf56-3161-4a85-96bc-770fcc6e25d8": {"__data__": {"text": "\n\nStep 1: Run Aptos init\n\nThe `aptos init` command will initialize the configuration with the private key you provided.\n\n```bash\n$ aptos init\nConfiguring for profile default\nEnter your rest endpoint [Current: None | No input: https://fullnode.devnet.aptoslabs.com]\n\nNo rest url given, using https://fullnode.devnet.aptoslabs.com...\nEnter your faucet endpoint [Current: None | No input: https://faucet.devnet.aptoslabs.com]\n\nNo faucet url given, using https://faucet.devnet.aptoslabs.com...\nEnter your private key as a hex literal (0x...) [Current: None | No input: Generate new key (or keep one if present)]\n\nNo key given, generating key...\nAccount 00f1f20ddd0b0dd2291b6e42c97274668c479bca70f07c6b6a80b99720779696 doesn't exist, creating it and funding it with 10000 coins\nAptos is now set up for account 00f1f20ddd0b0dd2291b6e42c97274668c479bca70f07c6b6a80b99720779696!  Run `aptos help` for more information about commands\n\n{\n  \"Result\": \"Success\"\n}\n```\n\n", "doc_id": "53e5cf56-3161-4a85-96bc-770fcc6e25d8", "embedding": null, "doc_hash": "e4d58e61f64b3c21a2dd07c587408c6d2f3ac9126856ce0dd86553d7acfc218f", "extra_info": null, "node_info": {"start": 0, "end": 957, "_node_type": "1"}, "relationships": {"1": "f11da7a0-2c05-470a-b402-a9aab16a8b6b"}}, "__type__": "1"}, "3c4937bf-edbb-48cd-b183-fbcb2d83201e": {"__data__": {"text": "\n\nStep 2: Changing the configuration\n\nTo change the configuration, you can either run the command `aptos init` or you can manually edit the `.aptos/config.yaml` that is in your current working directory.\n\n", "doc_id": "3c4937bf-edbb-48cd-b183-fbcb2d83201e", "embedding": null, "doc_hash": "d305faeb921743cd9ec8a405109f19f14d8250825797541db0033d8911cdf1e6", "extra_info": null, "node_info": {"start": 0, "end": 205, "_node_type": "1"}, "relationships": {"1": "8f2a2635-20d9-46a2-91d5-844b7c62519a"}}, "__type__": "1"}, "a3e815fb-0793-407f-84e7-e8e1b7ce2f51": {"__data__": {"text": "\n\nCreating other profiles\n\nYou can also create other profiles for different endpoints and different keys.  These can be made by adding the `--profile` argument, and can be used in most other commands to replace command line arguments.\n\n```bash\n$ aptos init --profile superuser\nConfiguring for profile superuser\nEnter your rest endpoint [Current: None | No input: https://fullnode.devnet.aptoslabs.com]\n\nNo rest url given, using https://fullnode.devnet.aptoslabs.com...\nEnter your faucet endpoint [Current: None | No input: https://faucet.devnet.aptoslabs.com]\n\nNo faucet url given, using https://faucet.devnet.aptoslabs.com...\nEnter your private key as a hex literal (0x...) [Current: None | No input: Generate new key (or keep one if present)]\n\nNo key given, generating key...\nAccount 18B61497FD290B02BB0751F44381CADA1657C2B3AA6194A00D9BC9A85FAD3B04 doesn't exist, creating it and funding it with 10000 coins\nAptos is now set up for account 18B61497FD290B02BB0751F44381CADA1657C2B3AA6194A00D9BC9A85FAD3B04!  Run `aptos help` for more information about commands\n{\n  \"Result\": \"Success\"\n}\n```\n\n", "doc_id": "a3e815fb-0793-407f-84e7-e8e1b7ce2f51", "embedding": null, "doc_hash": "a814386d72fc09c05a9836f356dcc7a69112795e71557fdd677c5373fcb9e8dc", "extra_info": null, "node_info": {"start": 0, "end": 1093, "_node_type": "1"}, "relationships": {"1": "f73a9593-5224-44ed-bd00-5c2dcd420b0b"}}, "__type__": "1"}, "dcdbd115-1657-453c-b646-12d7c74e7bb2": {"__data__": {"text": "\n\nAccount examples\n\n", "doc_id": "dcdbd115-1657-453c-b646-12d7c74e7bb2", "embedding": null, "doc_hash": "5fafd6abf2ba801b4e2d728d490dc1adac4b70edfb987b6a3ca1da3308454e2f", "extra_info": null, "node_info": {"start": 0, "end": 20, "_node_type": "1"}, "relationships": {"1": "4ba368c7-fd83-44d2-a9e3-fce946819c6a"}}, "__type__": "1"}, "e73b7bbb-36b5-41cf-b451-661eccad3ae7": {"__data__": {"text": "\n\nFund an account with the faucet\n\nYou can fund an account with the faucet via the CLI by using either an account address or with `default` (which defaults to the account address created with `aptos init`).\n\nFor example, to fund the account `00f1f20ddd0b0dd2291b6e42c97274668c479bca70f07c6b6a80b99720779696` that was created above with the `aptos init` command:\n\n```bash\n$ aptos account fund-with-faucet --account 00f1f20ddd0b0dd2291b6e42c97274668c479bca70f07c6b6a80b99720779696\n{\n  \"Result\": \"Added 10000 coins to account 00f1f20ddd0b0dd2291b6e42c97274668c479bca70f07c6b6a80b99720779696\"\n}\n```\n\n```bash\n$ aptos account fund-with-faucet --account default\n{\n  \"Result\": \"Added 10000 coins to account 00f1f20ddd0b0dd2291b6e42c97274668c479bca70f07c6b6a80b99720779696\"\n}\n```\n\n", "doc_id": "e73b7bbb-36b5-41cf-b451-661eccad3ae7", "embedding": null, "doc_hash": "cb094285d5b355485e80fc87228080348e1c4ac2a359bc5c14b2259e2a7a1159", "extra_info": null, "node_info": {"start": 0, "end": 772, "_node_type": "1"}, "relationships": {"1": "2bd41d16-0667-4ba8-b730-ca9a65222220"}}, "__type__": "1"}, "914911ea-104b-4eb4-9997-5e5e62ce90f6": {"__data__": {"text": "\n\nView an account's balance and transfer events\n\nYou can view the balance and transfer events (deposits and withdrawals) either by explicitly specifying the account address, as below:\n\n```bash\n$ aptos account list --query balance --account 00f1f20ddd0b0dd2291b6e42c97274668c479bca70f07c6b6a80b99720779696\n```\nor by specifying the `default` as below:\n```bash\n$ aptos account list --query balance --account default\n```\n\nBoth the above commands will generate the following information on your terminal:\n\n```bash\n{\n  \"Result\": [\n    {\n      \"coin\": {\n        \"value\": \"110000\"\n      },\n      \"deposit_events\": {\n        \"counter\": \"3\",\n        \"guid\": {\n          \"id\": {\n            \"addr\": \"0xf1f20ddd0b0dd2291b6e42c97274668c479bca70f07c6b6a80b99720779696\",\n            \"creation_num\": \"2\"\n          }\n        }\n      },\n      \"frozen\": false,\n      \"withdraw_events\": {\n        \"counter\": \"0\",\n        \"guid\": {\n          \"id\": {\n            \"addr\": \"0xf1f20ddd0b0dd2291b6e42c97274668c479bca70f07c6b6a80b99720779696\",\n            \"creation_num\": \"3\"\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n", "doc_id": "914911ea-104b-4eb4-9997-5e5e62ce90f6", "embedding": null, "doc_hash": "02d9500c4ab8e86ee7b15bb27d61bb288bd6edef3755f59e26a4fc6494213592", "extra_info": null, "node_info": {"start": 0, "end": 1096, "_node_type": "1"}, "relationships": {"1": "71451cab-5fcc-47d8-ad30-58e27cbd6e00"}}, "__type__": "1"}, "c31931bf-daea-48d0-9868-c1bb9b6fbee3": {"__data__": {"text": "\n\nListing resources in an account\n\nYou can list the resources in an account from the command line. For example, see below for how to list the resources in the account you just created above:\n\n```bash\n$ aptos account list --query resources --account default\n```\nor\n```bash\n$ aptos account list --query resources --account 0xf1f20ddd0b0dd2291b6e42c97274668c479bca70f07c6b6a80b99720779696\n```\n\nBoth the above commands will generate the following resource list information on your terminal:\n\n```bash\n{\n  \"Result\": [\n    {\n      \"0x1::coin::CoinStore\": {\n        \"coin\": {\n          \"value\": \"110000\"\n        },\n        \"deposit_events\": {\n          \"counter\": \"3\",\n          \"guid\": {\n            \"id\": {\n              \"addr\": \"0xf1f20ddd0b0dd2291b6e42c97274668c479bca70f07c6b6a80b99720779696\",\n              \"creation_num\": \"2\"\n            }\n          }\n        },\n        \"frozen\": false,\n        \"withdraw_events\": {\n          \"counter\": \"0\",\n          \"guid\": {\n            \"id\": {\n              \"addr\": \"0xf1f20ddd0b0dd2291b6e42c97274668c479bca70f07c6b6a80b99720779696\",\n              \"creation_num\": \"3\"\n            }\n          }\n        }\n      }\n    },\n    {\n      \"0x1::account::Account\": {\n        \"authentication_key\": \"0x00f1f20ddd0b0dd2291b6e42c97274668c479bca70f07c6b6a80b99720779696\",\n        \"coin_register_events\": {\n          \"counter\": \"1\",\n          \"guid\": {\n            \"id\": {\n              \"addr\": \"0xf1f20ddd0b0dd2291b6e42c97274668c479bca70f07c6b6a80b99720779696\",\n              \"creation_num\": \"0\"\n            }\n          }\n        },\n        \"guid_creation_num\": \"4\",\n        \"key_rotation_events\": {\n          \"counter\": \"0\",\n          \"guid\": {\n            \"id\": {\n              \"addr\": \"0xf1f20ddd0b0dd2291b6e42c97274668c479bca70f07c6b6a80b99720779696\",\n              \"creation_num\": \"1\"\n            }\n  ", "doc_id": "c31931bf-daea-48d0-9868-c1bb9b6fbee3", "embedding": null, "doc_hash": "c523be213e4ca857bf388065fd506ed5a151753866dd6b641be5151d73e9ef86", "extra_info": null, "node_info": {"start": 0, "end": 1830, "_node_type": "1"}, "relationships": {"1": "9344601a-4276-448f-9de7-89f987b786e6", "3": "60c1970b-1eaa-40ce-8568-3e170a29369b"}}, "__type__": "1"}, "60c1970b-1eaa-40ce-8568-3e170a29369b": {"__data__": {"text": "\"1\"\n            }\n          }\n        },\n        \"rotation_capability_offer\": {\n          \"for\": {\n            \"vec\": []\n          }\n        },\n        \"sequence_number\": \"0\",\n        \"signer_capability_offer\": {\n          \"for\": {\n            \"vec\": []\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n", "doc_id": "60c1970b-1eaa-40ce-8568-3e170a29369b", "embedding": null, "doc_hash": "b593ac825f380cfe42c420230c61ece90990aa144d5dfa012774584634c7eaff", "extra_info": null, "node_info": {"start": 1810, "end": 2111, "_node_type": "1"}, "relationships": {"1": "9344601a-4276-448f-9de7-89f987b786e6", "2": "c31931bf-daea-48d0-9868-c1bb9b6fbee3"}}, "__type__": "1"}, "ea456ade-cbbe-4d71-9c5e-46982c71f49a": {"__data__": {"text": "\n\nList the default profile\n\nYou can also list the default profile from configuration with no account specified.\n\n:::tip\nAccount addresses may differ from example to example in this section.\n:::\n\n```bash\n$ aptos account list\n{\n  \"Result\": [\n    {\n      \"coin\": {\n        \"value\": \"10000\"\n      },\n      \"deposit_events\": {\n        \"counter\": \"1\",\n        \"guid\": {\n          \"id\": {\n            \"addr\": \"0xb9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb\",\n            \"creation_num\": \"1\"\n          }\n        }\n      },\n      \"withdraw_events\": {\n        \"counter\": \"0\",\n        \"guid\": {\n          \"id\": {\n            \"addr\": \"0xb9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb\",\n            \"creation_num\": \"2\"\n          }\n        }\n      }\n    },\n    {\n      \"register_events\": {\n        \"counter\": \"1\",\n        \"guid\": {\n          \"id\": {\n            \"addr\": \"0xb9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb\",\n            \"creation_num\": \"0\"\n          }\n        }\n      }\n    },\n    {\n      \"counter\": \"3\"\n    },\n    {\n      \"authentication_key\": \"0xb9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb\",\n      \"self_address\": \"0xb9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb\",\n      \"sequence_number\": \"0\"\n    }\n  ]\n}\n```\n\n", "doc_id": "ea456ade-cbbe-4d71-9c5e-46982c71f49a", "embedding": null, "doc_hash": "44f236a58366b1a0032f03f2772ff5e1c88cfd44f7b6c8cf3c63ea84f094ed09", "extra_info": null, "node_info": {"start": 0, "end": 1309, "_node_type": "1"}, "relationships": {"1": "f0018629-aa45-4b70-b59f-42884725aa01"}}, "__type__": "1"}, "10512caf-9615-464b-88aa-65d016542c30": {"__data__": {"text": "\n\nUse the name of the profile\n\nAdditionally, any place that takes an account can use the name of a profile:\n\n```bash\n$ aptos account list --query resources --account superuser\n{\n  \"Result\": [\n    {\n      \"coin\": {\n        \"value\": \"10000\"\n      },\n      \"deposit_events\": {\n        \"counter\": \"1\",\n        \"guid\": {\n          \"id\": {\n            \"addr\": \"0x742854f7dca56ea6309b51e8cebb830b12623f9c9d76c72c3242e4cad353dedc\",\n            \"creation_num\": \"1\"\n          }\n        }\n      },\n      \"withdraw_events\": {\n        \"counter\": \"0\",\n        \"guid\": {\n          \"id\": {\n            \"addr\": \"0x742854f7dca56ea6309b51e8cebb830b12623f9c9d76c72c3242e4cad353dedc\",\n            \"creation_num\": \"2\"\n          }\n        }\n      }\n    },\n    {\n      \"register_events\": {\n        \"counter\": \"1\",\n        \"guid\": {\n          \"id\": {\n            \"addr\": \"0x742854f7dca56ea6309b51e8cebb830b12623f9c9d76c72c3242e4cad353dedc\",\n            \"creation_num\": \"0\"\n          }\n        }\n      }\n    },\n    {\n      \"counter\": \"3\"\n    },\n    {\n      \"authentication_key\": \"0x742854f7dca56ea6309b51e8cebb830b12623f9c9d76c72c3242e4cad353dedc\",\n      \"self_address\": \"0x742854f7dca56ea6309b51e8cebb830b12623f9c9d76c72c3242e4cad353dedc\",\n      \"sequence_number\": \"0\"\n    }\n  ]\n}\n```\n\n", "doc_id": "10512caf-9615-464b-88aa-65d016542c30", "embedding": null, "doc_hash": "92fe0c602b676f9771d4daf11275bfb6b97a1c74f38b0a9f0597b7a27545a4d5", "extra_info": null, "node_info": {"start": 0, "end": 1261, "_node_type": "1"}, "relationships": {"1": "68376670-ad8b-4fa3-8dce-33fa372c44a0"}}, "__type__": "1"}, "a120454d-a516-48ec-92de-437fe2049b25": {"__data__": {"text": "\n\nListing modules in an account\n\nYou can pass different types of queries to view different items under an account. Currently, 'resources' and\n'modules' are supported but more query types are coming. For example, to fetch modules:\n```bash\n$ aptos account list --query modules\n{\n  \"Result\": [\n    {\n      \"bytecode\": \"0xa11ceb0b050000000b01000a020a12031c2504410405452d0772da0108cc0240068c030a0a9603150cab03650d90040400000101010201030104000506000006080004070700020e0401060100080001000009020300010f0404000410060100031107000002120709010602130a030106050806080105010802020c0a02000103040508020802070801010a0201060c010800010b0301090002070b030109000900074d657373616765056572726f72056576656e74067369676e657206737472696e67124d6573736167654368616e67654576656e740d4d657373616765486f6c64657206537472696e670b6765745f6d6573736167650b7365745f6d6573736167650c66726f6d5f6d6573736167650a746f5f6d657373616765076d657373616765156d6573736167655f6368616e67655f6576656e74730b4576656e7448616e646c65096e6f745f666f756e6404757466380a616464726573735f6f66106e65775f6576656e745f68616e646c650a656d69745f6576656e74b9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb0000000000000000000000000000000000000000000000000000000000000001030800000000000000000002020a08020b08020102020c08020d0b030108000001000101030b0a002901030607001102270b002b0110001402010104010105240b0111030c040e0011040c020a02290120030b05120e000b040e00380012012d0105230b022a010c050a051000140c030a050f010b030a04120038010b040b050f0015020100010100\",\n      \"abi\": {\n        \"address\": \"0xb9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb\",\n        \"name\": \"Message\",\n        \"friends\": [],\n        \"exposed_functions\": [\n          {\n            \"name\": \"get_message\",\n            \"visibility\": \"public\",\n            \"is_entry\": false,\n            \"generic_type_params\": [],\n            \"params\": [\n              \"address\"\n            ],\n            \"return\": [\n              \"0x1::string::String\"\n            ]\n          },\n          {\n            \"name\": \"set_message\",\n            \"visibility\": \"public\",\n            \"is_entry\": true,\n           ", "doc_id": "a120454d-a516-48ec-92de-437fe2049b25", "embedding": null, "doc_hash": "5b73714a3223c8970c88616c8f5809f72b68555fd826313c94e73c6f807754ce", "extra_info": null, "node_info": {"start": 0, "end": 2095, "_node_type": "1"}, "relationships": {"1": "117a4e26-abba-4415-a119-6c5488c2db0b", "3": "5073e8b3-520a-432b-a7ea-31f2010d2acf"}}, "__type__": "1"}, "5073e8b3-520a-432b-a7ea-31f2010d2acf": {"__data__": {"text": " \"is_entry\": true,\n            \"generic_type_params\": [],\n            \"params\": [\n              \"signer\",\n              \"vector\"\n            ],\n            \"return\": []\n          }\n        ],\n        \"structs\": [\n          {\n            \"name\": \"MessageChangeEvent\",\n            \"is_native\": false,\n            \"abilities\": [\n              \"drop\",\n              \"store\"\n            ],\n            \"generic_type_params\": [],\n            \"fields\": [\n              {\n                \"name\": \"from_message\",\n                \"type\": \"0x1::string::String\"\n              },\n              {\n                \"name\": \"to_message\",\n                \"type\": \"0x1::string::String\"\n              }\n            ]\n          },\n          {\n            \"name\": \"MessageHolder\",\n            \"is_native\": false,\n            \"abilities\": [\n              \"key\"\n            ],\n            \"generic_type_params\": [],\n            \"fields\": [\n              {\n                \"name\": \"message\",\n                \"type\": \"0x1::string::String\"\n              },\n              {\n                \"name\": \"message_change_events\",\n                \"type\": \"0x1::event::EventHandle\"\n              }\n            ]\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n", "doc_id": "5073e8b3-520a-432b-a7ea-31f2010d2acf", "embedding": null, "doc_hash": "0de41d2fd26617fb1ec84f40a472a712bd71282fdb60574761a8013eeac2de4f", "extra_info": null, "node_info": {"start": 2065, "end": 3287, "_node_type": "1"}, "relationships": {"1": "117a4e26-abba-4415-a119-6c5488c2db0b", "2": "a120454d-a516-48ec-92de-437fe2049b25"}}, "__type__": "1"}, "065d6e37-0389-46f8-bdd7-8e90f2b8be43": {"__data__": {"text": "\n\nTransferring coins\n\nThe Aptos CLI is a simple wallet as well, and can transfer coins between accounts.\n```bash\n$ aptos account transfer --account superuser --amount 100\n{\n  \"Result\": {\n    \"gas_used\": 73,\n    \"balance_changes\": {\n      \"742854f7dca56ea6309b51e8cebb830b12623f9c9d76c72c3242e4cad353dedc\": {\n        \"coin\": {\n          \"value\": \"10100\"\n        },\n        \"deposit_events\": {\n          \"counter\": \"2\",\n          \"guid\": {\n            \"id\": {\n              \"addr\": \"0x742854f7dca56ea6309b51e8cebb830b12623f9c9d76c72c3242e4cad353dedc\",\n              \"creation_num\": \"1\"\n            }\n          }\n        },\n        \"withdraw_events\": {\n          \"counter\": \"0\",\n          \"guid\": {\n            \"id\": {\n              \"addr\": \"0x742854f7dca56ea6309b51e8cebb830b12623f9c9d76c72c3242e4cad353dedc\",\n              \"creation_num\": \"2\"\n            }\n          }\n        }\n      },\n      \"b9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb\": {\n        \"coin\": {\n          \"value\": \"9827\"\n        },\n        \"deposit_events\": {\n          \"counter\": \"1\",\n          \"guid\": {\n            \"id\": {\n              \"addr\": \"0xb9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb\",\n              \"creation_num\": \"1\"\n            }\n          }\n        },\n        \"withdraw_events\": {\n          \"counter\": \"1\",\n          \"guid\": {\n            \"id\": {\n              \"addr\": \"0xb9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb\",\n              \"creation_num\": \"2\"\n            }\n          }\n        }\n      }\n    },\n    \"sender\":", "doc_id": "065d6e37-0389-46f8-bdd7-8e90f2b8be43", "embedding": null, "doc_hash": "d23ceaa4f0e9766182730b1459576619861f4dd0f643325764e50fd9acc4517e", "extra_info": null, "node_info": {"start": 0, "end": 1560, "_node_type": "1"}, "relationships": {"1": "d587a149-8d1f-4335-9e0a-282bcb59014b", "3": "92bc3cb8-846c-4303-9b0d-da1a9114d0f1"}}, "__type__": "1"}, "92bc3cb8-846c-4303-9b0d-da1a9114d0f1": {"__data__": {"text": "     }\n    },\n    \"sender\": \"b9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb\",\n    \"success\": true,\n    \"version\": 1139,\n    \"vm_status\": \"Executed successfully\"\n  }\n}\n```\n\n", "doc_id": "92bc3cb8-846c-4303-9b0d-da1a9114d0f1", "embedding": null, "doc_hash": "4d22b2a71ba7b50fcb011ed848de598791dbef3b6f29136130c0a71583db21e1", "extra_info": null, "node_info": {"start": 1533, "end": 1723, "_node_type": "1"}, "relationships": {"1": "d587a149-8d1f-4335-9e0a-282bcb59014b", "2": "065d6e37-0389-46f8-bdd7-8e90f2b8be43"}}, "__type__": "1"}, "8cc11796-f540-4a50-ad60-a87b43d513a5": {"__data__": {"text": "\n\nKey examples\n\n", "doc_id": "8cc11796-f540-4a50-ad60-a87b43d513a5", "embedding": null, "doc_hash": "4efd297424fcf5f8a521532914dfbe28bac46170ec5a68c221cceb15fc69eace", "extra_info": null, "node_info": {"start": 0, "end": 16, "_node_type": "1"}, "relationships": {"1": "68153e60-bf78-48fc-8d9d-dca458e6ee9b"}}, "__type__": "1"}, "aa04f68b-ea79-4091-9126-7c9a0ad10546": {"__data__": {"text": "\n\nGenerating a key\n\nTo allow generating private keys, you can use the `aptos key generate` command.  You can generate\neither `x25519` or `ed25519` keys.\n```bash\n$ aptos key generate --key-type ed25519 --output-file output.key\n{\n  \"Result\": {\n    \"PrivateKey Path\": \"output.key\",\n    \"PublicKey Path\": \"output.key.pub\"\n  }\n}\n```\n\n", "doc_id": "aa04f68b-ea79-4091-9126-7c9a0ad10546", "embedding": null, "doc_hash": "651a7db0bf3be243ab660972d009e7ccb812a9fd420b329d226aabf58d7113ed", "extra_info": null, "node_info": {"start": 0, "end": 329, "_node_type": "1"}, "relationships": {"1": "d19d3da6-099d-4fc5-8334-f24219dad542"}}, "__type__": "1"}, "f7e17ee5-d1d3-41b7-9a8a-2ebf4549fd7d": {"__data__": {"text": "\n\nGenerating a vanity prefix key\n\nIf you are generating an `ed25519` key, you can optionally supply a vanity prefix for the corresponding account address:\n\n```bash\n$ aptos key generate --output-file starts_with_ace.key --vanity-prefix 0xace\n{\n  \"Result\": {\n    \"PrivateKey Path\": \"starts_with_ace.key\",\n    \"PublicKey Path\": \"starts_with_ace.key.pub\",\n    \"Account Address:\": \"0xaceffa015e51dcd32c34794c143e19185b3f1be5464dd6184239a37e57e72ea3\"\n  }\n}\n```\n\nThis works for multisig accounts too:\n\n```bash\n% aptos key generate --output-file starts_with_bee.key --vanity-prefix 0xbee --vanity-multisig\n{\n  \"Result\": {\n    \"PrivateKey Path\": \"starts_with_bee.key\",\n    \"PublicKey Path\": \"starts_with_bee.key.pub\",\n    \"Account Address:\": \"0x384cf987aab625f9727684d4dda8de668abedc18aa8dceabd7651a1cfb69196f\",\n    \"Multisig Account Address:\": \"0xbee0797c577428249125f6ed7f4a2a5939ddc34389294bd9f5d1627508832f56\"\n  }\n}\n```\n\nNote the vanity flag documentation from the `aptos key generate` help:\n\n```\n--vanity-multisig\n    Use this flag when vanity prefix is for a multisig account. This mines a private key for\n    a single signer account that can, as its first transaction, create a multisig account\n    with the given vanity prefix\n\n--vanity-prefix \n    Vanity prefix that resultant account address should start with, e.g. 0xaceface or d00d.\n    Each additional character multiplies by a factor of 16 the computational difficulty\n    associated with generating an address, so try out shorter prefixes first and be prepared\n    to wait for longer ones\n```\n\n:::tip\nIf you want even faster vanity address generation for long prefixes, try out the parallelism-optimized `optivanity` tool from Econia Labs\n:::\n\n", "doc_id": "f7e17ee5-d1d3-41b7-9a8a-2ebf4549fd7d", "embedding": null, "doc_hash": "ba666fe6dd0f6b67ff1b7dc952169f1ff7430de8f324cfe03e9d06ee6c03fff6", "extra_info": null, "node_info": {"start": 0, "end": 1700, "_node_type": "1"}, "relationships": {"1": "41f05fd5-b18a-4cc3-b09b-89b4288b237b"}}, "__type__": "1"}, "208ebd50-d6e9-4a4b-b378-93f032771f87": {"__data__": {"text": "\n\nGenerating a peer config\n\nTo allow others to connect to your node, you need to generate a peer configuration. Below command shows how you can use\nthe `aptos` CLI to generate a peer configuration and write it into a file named `peer_config.yaml`.\n```bash\n$ aptos key extract-peer --output-file peer_config.yaml\n```\n\nThe above command will generate the following output on the terminal:\n```bash\n{\n  \"Result\": {\n    \"8cfb85603080b13013b57e2e80887c695cfecd7ad8217d1cac22fa6f3b0b5752\": {\n      \"addresses\": [],\n      \"keys\": [\n        \"0x8cfb85603080b13013b57e2e80887c695cfecd7ad8217d1cac22fa6f3b0b5752\"\n      ],\n      \"role\": \"Upstream\"\n    }\n  }\n}\n```\n\nThe `peer_config.yaml` file will be created in your current working directory, with the contents as shown in the below example:\n```bash\n---\n8cfb85603080b13013b57e2e80887c695cfecd7ad8217d1cac22fa6f3b0b5752:\n  addresses: []\n  keys:\n    - \"0x8cfb85603080b13013b57e2e80887c695cfecd7ad8217d1cac22fa6f3b0b5752\"\n  role: Upstream\n```\n\n**Note:** In the addresses key, you should fill in your address.\n\n", "doc_id": "208ebd50-d6e9-4a4b-b378-93f032771f87", "embedding": null, "doc_hash": "6d94a4bbbca7ae929585a8ce9148f1cd3d540f19fd6d069481db060a7d4ef7eb", "extra_info": null, "node_info": {"start": 0, "end": 1045, "_node_type": "1"}, "relationships": {"1": "004273ed-9969-4452-a051-f661a501f7b3"}}, "__type__": "1"}, "15fbc4ce-7cf4-4ce7-a0f0-81914d613de2": {"__data__": {"text": "\n\nMove Examples\n\nMove examples can be found in the Move section.\n\n", "doc_id": "15fbc4ce-7cf4-4ce7-a0f0-81914d613de2", "embedding": null, "doc_hash": "4e9eb4f5bb46248f49aceba08bfac8d1e47bf061f2c1e2a85662a15e0bce1d00", "extra_info": null, "node_info": {"start": 0, "end": 66, "_node_type": "1"}, "relationships": {"1": "1f17ec0a-ed05-409d-bb2b-d1d26bfbe7c6"}}, "__type__": "1"}, "fd9b2669-8ed4-42dc-a1d5-da40b096d354": {"__data__": {"text": "\n\nNode command examples\n\nThis section summarizes how to run a local testnet with Aptos CLI. See Run a Local Testnet with Aptos CLI for more details.\n\nFor Aptos CLI commands applicable to validator nodes, see the Owner and Voter instructions.\n\n", "doc_id": "fd9b2669-8ed4-42dc-a1d5-da40b096d354", "embedding": null, "doc_hash": "1772897a032962333cb655441597af5030f24a9f626431b06da27de4a65e8726", "extra_info": null, "node_info": {"start": 0, "end": 243, "_node_type": "1"}, "relationships": {"1": "136747d6-2d9b-4e02-adf6-4649bc9bd02c"}}, "__type__": "1"}, "36dcaa6f-2e5c-42f1-842b-b469dfec64bc": {"__data__": {"text": "\n\nRunning a local testnet\n\nYou can run a local testnet from the aptos CLI, that will match the version it was built with.  Additionally, it can\nrun a faucet side by side with the local single node testnet.\n\n```bash\n$ aptos node run-local-testnet --with-faucet\nCompleted generating configuration:\n        Log file: \"/Users/greg/.aptos/testnet/validator.log\"\n        Test dir: \"/Users/greg/.aptos/testnet\"\n        Aptos root key path: \"/Users/greg/.aptos/testnet/mint.key\"\n        Waypoint: 0:d302c6b10e0fa68bfec9cdb383f24ef1189d8850d50b832365eea21ae52d8101\n        ChainId: TESTING\n        REST API endpoint: 0.0.0.0:8080\n        Fullnode network: /ip4/0.0.0.0/tcp/6181\n\nAptos is running, press ctrl-c to exit\n```\n\nThis will have consistent state if the node is shutdown, it will start with the previous state.\nIf you want to restart the chain from genesis, you can add the `--force-restart` flag.\n\n```bash\n$ aptos node run-local-testnet --with-faucet --force-restart\nAre you sure you want to delete the existing chain? [yes/no] >\nyes\nCompleted generating configuration:\n        Log file: \"/Users/greg/.aptos/testnet/validator.log\"\n        Test dir: \"/Users/greg/.aptos/testnet\"\n        Aptos root key path: \"/Users/greg/.aptos/testnet/mint.key\"\n        Waypoint: 0:649efc34c813d0db8db6fa5b1ffc9cc62f726bb5168e7f4b8730bb155d6213ea\n        ChainId: TESTING\n        REST API endpoint: 0.0.0.0:8080\n        Fullnode network: /ip4/0.0.0.0/tcp/6181\n\nAptos is running, press ctrl-c to exit\n```\n\n", "doc_id": "36dcaa6f-2e5c-42f1-842b-b469dfec64bc", "embedding": null, "doc_hash": "5020593a57e4e9cfd9d7cb8fa4595a11a0cfc1a6ca5330ff46fade3ce9d340b1", "extra_info": null, "node_info": {"start": 0, "end": 1488, "_node_type": "1"}, "relationships": {"1": "4008a406-b6e5-4c82-ac2f-5cb975bdcb59"}}, "__type__": "1"}, "baa61102-3de7-4260-97b7-04960231ce5c": {"__data__": {"text": "\n\nGenesis ceremonies\n\nThe `aptos` tool supports bootstrapping new blockchains through what is known as a genesis ceremony. The output of the genesis ceremony is the output of move instructions that prepares a blockchain for online operation. The input consists of:\n\n* A set of validators and their configuration\n* The initial set of Move modules, known as a framework\n* A unique `ChainId` (u8) that distinguishes this from other deployments\n* For test chains, there also exists an account that manages the minting of AptosCoin\n\n", "doc_id": "baa61102-3de7-4260-97b7-04960231ce5c", "embedding": null, "doc_hash": "68237a88ed2678dfd05aeeac1fe65078857b5b7d7f81c7282128fb1c639cdda0", "extra_info": null, "node_info": {"start": 0, "end": 528, "_node_type": "1"}, "relationships": {"1": "ddd25c5c-ee33-4a1a-9b77-aa37e84b6ad7"}}, "__type__": "1"}, "570dd69c-c269-4264-a6fa-2e8f1f4971f9": {"__data__": {"text": "\n\nGenerating genesis\n\n* The genesis organizer constructs a `Layout` and distributes it.\n* The genesis organizer prepares the Aptos framework's bytecode and distributes it.\n* Each participant generates their `ValidatorConfiguration` and distributes it.\n* Each participant generates a `genesis.blob` from the resulting contributions\n* The genesis organizer executes the `genesis.blob` to derive the initial waypoint and distributes it.\n* Each participant begins their `aptos-node`. The `aptos-node` verifies upon startup that the `genesis.blob` with the waypoint provided by the genesis organizer .\n* The blockchain will begin consensus after a quorum of stake is available.\n\n", "doc_id": "570dd69c-c269-4264-a6fa-2e8f1f4971f9", "embedding": null, "doc_hash": "88f4cdb8a290ad4d26012c6c3c3bac11a3c10c42162d259cbe8061396b222dc9", "extra_info": null, "node_info": {"start": 0, "end": 674, "_node_type": "1"}, "relationships": {"1": "b12fb077-4187-467e-9e81-4c860f7a50dd"}}, "__type__": "1"}, "395114b4-a9b4-477b-9dc0-f293a6034feb": {"__data__": {"text": "\n\nPrepare aptos-core\n\nThe following sections rely on tools from the Aptos source. See Building Aptos From Source for setup.\n\n", "doc_id": "395114b4-a9b4-477b-9dc0-f293a6034feb", "embedding": null, "doc_hash": "fd8cc46922c978cc726de99517d7a511920c9b0ee28a2b26e5b2f9f959e13d04", "extra_info": null, "node_info": {"start": 0, "end": 125, "_node_type": "1"}, "relationships": {"1": "78a7021a-ab06-46d8-80aa-42aa6533a511"}}, "__type__": "1"}, "e684f512-1a03-4d79-8939-3815c4300b54": {"__data__": {"text": "\n\nThe `layout` file\n\nThe layout file contains:\n* `root_key`: an Ed25519 public key for AptosCoin management.\n* `users`: the set of participants\n* `chain_id`: the `ChainId` or a unique integer that distinguishes this deployment from other Aptos networks\n\nAn example:\n```\nroot_key: \"0xca3579457555c80fc7bb39964eb298c414fd60f81a2f8eedb0244ec07a26e575\"\nusers:\n  - alice\n  - bob\nchain_id: 8\n```\n\n", "doc_id": "e684f512-1a03-4d79-8939-3815c4300b54", "embedding": null, "doc_hash": "97a5e0bf0ed82340a80d6401aa21086c36cbc6f09748cbc670a67800f564a83c", "extra_info": null, "node_info": {"start": 0, "end": 391, "_node_type": "1"}, "relationships": {"1": "5a620005-b083-4b74-9166-c192eea712ef"}}, "__type__": "1"}, "ebd36a78-967c-4bc3-b645-5be64d08039b": {"__data__": {"text": "\n\nBuilding the Aptos Framework\n\nFrom your Aptos-core repository, build the framework and package it:\n```\ncargo run --package framework\nmkdir aptos-framework-release\ncp aptos-framework/releases/artifacts/current/build/**/bytecode_modules/* aptos-framework-release\n```\n\nThe framework will be stored within the `aptos-framework-release` directory.\n\n", "doc_id": "ebd36a78-967c-4bc3-b645-5be64d08039b", "embedding": null, "doc_hash": "1d425bdc1459dfa148839b9953f7067c520a606175286b884a7484456846926f", "extra_info": null, "node_info": {"start": 0, "end": 346, "_node_type": "1"}, "relationships": {"1": "729d1764-401c-4bf9-9fca-9d2ac4cdc48c"}}, "__type__": "1"}, "0aa21cd3-65df-4465-9e79-cc15f2f4104d": {"__data__": {"text": "\n\nThe `ValidatorConfiguration` file\n\nThe `ValidatorConfiguration` file contains:\n\n* `account_address`: The account that manages this validator. This must be derived from the `account_key` provided within the `ValidatorConfiguration` file.\n* `consensus_key`: The public key for authenticating consensus messages from the validator\n* `account_key`: The public key for the account that manages this validator. This is used to derive the `account_address`.\n* `network_key`: The public key for both validator and fullnode network authentication and encryption.\n* `validator_host`: The network address where the validator resides. This contains a `host` and `port` field. The `host` should either be a DNS name or an IP address. Currently only IPv4 is supported.\n* `full_node_host`: An optional network address where the fullnode resides. This contains a `host` and `port` field. The `host` should either be a DNS name or an IP address. Currently only IPv4 is supported.\n* `stake_amount`: The number of coins being staked by this node. This is expected to be `1`, if it is different the configuration will be considered invalid.\n\nAn example:\n```\naccount_address: ccd49f3ea764365ac21e99f029ca63a9b0fbfab1c8d8d5482900e4fa32c5448a\nconsensus_key: \"0xa05b8f41057ac72f9ca99f5e3b1b787930f03ba5e448661f2a1fac98371775ee\"\naccount_key: \"0x3d15ab64c8b14c9aab95287fd0eb894aad0b4bd929a5581bcc8225b5688f053b\"\nnetwork_key: \"0x43ce1a4ac031b98bb1ee4a5cd72a4cca0fd72933d64b22cef4f1a61895c2e544\"\nvalidator_host:\n  host: bobs_host\n  port: 6180\nfull_node_host:\n  host: bobs_host\n  port: 6182\nstake_amount: 1\n```\n\nTo generate this using the `aptos` CLI:\n\n1. Generate your validator's keys:\n\n```\ncargo run --package aptos -- genesis generate-keys --output-dir bobs\n```\n\n2. Generate your `ValidatorConfiguration`:\n\n```\ncargo run --package aptos -- \\\\\n    genesis set-validator-configuration \\\\\n    --keys-dir bobs \\\\\n    --username bob \\\\\n    --validator-host bobs_host:6180 \\\\\n    --full-node-host bobs_host:6180 \\\\\n    --local-repository-dir .\n```\n\n3. The last command will produce a `bob.yaml` file that should be distributed to other participants for `genesis.blob` generation.\n\n", "doc_id": "0aa21cd3-65df-4465-9e79-cc15f2f4104d", "embedding": null, "doc_hash": "a31f6cd84974de12b2133ae5e9fe8b96efa81362ab05cc7bade17d934ea4b512", "extra_info": null, "node_info": {"start": 0, "end": 2152, "_node_type": "1"}, "relationships": {"1": "319976d3-0944-4e42-83aa-660e4b53e28c"}}, "__type__": "1"}, "e97b5c3c-6120-4950-9e92-a3a627ade833": {"__data__": {"text": "\n\nGenerating a genesis and waypoint\n\n`genesis.blob` and the waypoint can be generated after obtaining the `layout` file, each of the individual `ValidatorConfiguration` files, and the framework release. It is important to validate that the `ValidatorConfiguration` provided in the earlier stage is the same as in the distribution for generating the `genesis.blob`. If there is a mismatch, inform all participants.\n\nTo generate the `genesis.blob` and waypoint:\n* Place the `layout` file in a directory, e.g., `genesis`.\n* Place all the `ValidatorConfiguration` files into the `genesis` directory.\n* Ensure that the `ValidatorConfiguration` files are listed under the set of `users` within the `layout` file.\n* Make a `framework` directory within the `genesiss` directory and place the framework release `.mv` files into the `framework` directory.\n* Use the `aptos` CLI to generate genesis and waypoint:\n\n```\ncargo run --package aptos -- genesis generate-genesis --local-repository-dir genesis\n```\n\n", "doc_id": "e97b5c3c-6120-4950-9e92-a3a627ade833", "embedding": null, "doc_hash": "573872fe5d1c2a12c46eb17c6f08bc7e492d539f738423f480e5e3f6dfd89567", "extra_info": null, "node_info": {"start": 0, "end": 997, "_node_type": "1"}, "relationships": {"1": "c1332201-3272-4c9b-afb9-0d679e36d22a"}}, "__type__": "1"}, "0c9e2255-8137-4c62-9640-eedca97a76a3": {"__data__": {"text": "\n\nStarting an `aptos-node`\n\nUpon generating the `genesis.blob` and waypoint, place them into your validator and fullnode's configuration directory and begin your validator and fullnode.\n\n", "doc_id": "0c9e2255-8137-4c62-9640-eedca97a76a3", "embedding": null, "doc_hash": "a45f806b3f3e096153a20f5c0b3ca935c685980ddcfeea738cb28a8ead56cc44", "extra_info": null, "node_info": {"start": 0, "end": 187, "_node_type": "1"}, "relationships": {"1": "8e4419b6-5584-40ee-aa34-f33a7580ce93"}}, "__type__": "1"}, "61e3f52b-c6a9-40a0-a9f4-210e69afb9a6": {"__data__": {"text": "\n\nUses and Aliases\n\nThe `use` syntax can be used to create aliases to members in other modules. `use` can be used to\ncreate aliases that last either for the entire module, or for a given expression block scope.\n\n", "doc_id": "61e3f52b-c6a9-40a0-a9f4-210e69afb9a6", "embedding": null, "doc_hash": "c50170c2b6cd15de3026d6afa795d230594e2160c9a4d397a970cf27f704b0ab", "extra_info": null, "node_info": {"start": 0, "end": 212, "_node_type": "1"}, "relationships": {"1": "425d2acb-225b-4363-a9cd-80aa741a12ce"}}, "__type__": "1"}, "370d24b3-da77-4a51-8d0d-2d8c8fa329d3": {"__data__": {"text": "\n\nSyntax\n\nThere are several different syntax cases for `use`. Starting with the most simple, we have the\nfollowing for creating aliases to other modules\n\n```move\nuse ::;\nuse :: as ;\n```\n\nFor example\n\n```move\nuse std::vector;\nuse std::vector as V;\n```\n\n`use std::vector;` introduces an alias `vector` for `std::vector`. This means that anywhere you\nwould want to use the module name `std::vector` (assuming this `use` is in scope), you could use\n`vector` instead. `use std::vector;` is equivalent to `use std::vector as vector;`\n\nSimilarly `use std::vector as V;` would let you use `V` instead of `std::vector`\n\n```move=\nuse std::vector;\nuse std::vector as V;\n\nfun new_vecs(): (vector, vector, vector) {\n    let v1 = std::vector::empty();\n    let v2 = vector::empty();\n    let v3 = V::empty();\n    (v1, v2, v3)\n}\n```\n\nIf you want to import a specific module member (such as a function, struct, or constant). You can\nuse the following syntax.\n\n```move\nuse ::::;\nuse :::: as ;\n```\n\nFor example\n\n```move\nuse std::vector::empty;\nuse std::vector::empty as empty_vec;\n```\n\nThis would let you use the function `std::vector::empty` without full qualification. Instead you\ncould use `empty` and `empty_vec` respectively. Again, `use std::vector::empty;` is equivalent to\n`use std::vector::empty as empty;`\n\n```move=\nuse std::vector::empty;\nuse std::vector::empty as empty_vec;\n\nfun new_vecs(): (vector, vector, vector) {\n    let v1 = std::vector::empty();\n    let v2 = empty();\n    let v3 = empty_vec();\n    (v1, v2, v3)\n}\n```\n\nIf you want to add aliases for multiple module members at once, you can do so with the following\nsyntax\n\n```move\nuse ::::{,  as  ... };\n```\n\nFor example\n\n```move=\nuse std::vector::{push_back, length as len, pop_back};\n\nfun swap_last_two(v: &mut vector) {\n    assert!(len(v) >= 2, 42);\n    let last = pop_back(v);\n    let second_to_last = pop_back(v);\n    push_back(v, last);\n    push_back(v, second_to_last)\n}\n```\n\nIf you need to add an alias to the Module itself in addition to module members, you can do that in a\nsingle `use` using `Self`. `Self` is a member of sorts that refers to the module.\n\n```move\nuse std::vector::{Self, empty};\n```\n\nFor clarity, all of the following are equivalent:\n\n```move\nuse std::vector;\nuse std::vector as vector;\nuse std::vector::Self;\nuse std::vector::Self as vector;\nuse std::vector::{Self};\nuse std::vector::{Self as vector};\n```\n\nIf needed, you can have as many aliases for any item as you like\n\n```move=\nuse std::vector::{\n    Self,\n    Self as V,\n    length,\n    length as len,\n};\n\nfun pop_twice(v: &mut vector): (T, T) {\n    // all options available given the `use` above\n    assert!(vector::length(v) > 1, 42);\n    assert!(V::length(v) > 1, 42);\n    assert!(length(v) > 1, 42);\n    assert!(len(v) > 1, 42);\n\n    (vector::pop_back(v),", "doc_id": "370d24b3-da77-4a51-8d0d-2d8c8fa329d3", "embedding": null, "doc_hash": "618344365ac2772858df17542da62f70e2bdff707419957ab5bd92e527c6f78c", "extra_info": null, "node_info": {"start": 0, "end": 2793, "_node_type": "1"}, "relationships": {"1": "74c93c81-9bdc-4d76-abc7-422a2a3b2da6", "3": "f20bc99b-7cda-42b5-b3a7-89eddf792090"}}, "__type__": "1"}, "f20bc99b-7cda-42b5-b3a7-89eddf792090": {"__data__": {"text": "> 1, 42);\n\n    (vector::pop_back(v), vector::pop_back(v))\n}\n```\n\n", "doc_id": "f20bc99b-7cda-42b5-b3a7-89eddf792090", "embedding": null, "doc_hash": "80c40f46c290830d7baf54aeb506f59eff7ff71c2e38e491397ec65cb9c277bc", "extra_info": null, "node_info": {"start": 2757, "end": 2822, "_node_type": "1"}, "relationships": {"1": "74c93c81-9bdc-4d76-abc7-422a2a3b2da6", "2": "370d24b3-da77-4a51-8d0d-2d8c8fa329d3"}}, "__type__": "1"}, "761ee269-03a4-4be8-8187-ba632fb6124d": {"__data__": {"text": "\n\nInside a `module`\n\nInside of a `module` all `use` declarations are usable regardless of the order of declaration.\n\n```move=\naddress 0x42 {\nmodule example {\n    use std::vector;\n\n    fun example(): vector {\n        let v = empty();\n        vector::push_back(&mut v, 0);\n        vector::push_back(&mut v, 10);\n        v\n    }\n\n    use std::vector::empty;\n}\n}\n```\n\nThe aliases declared by `use` in the module usable within that module.\n\nAdditionally, the aliases introduced cannot conflict with other module members. See\nUniqueness for more details\n\n", "doc_id": "761ee269-03a4-4be8-8187-ba632fb6124d", "embedding": null, "doc_hash": "d49935d7e12e0a831e90b8517550380f72b1a088525a8f6e9276d1313053e6f6", "extra_info": null, "node_info": {"start": 0, "end": 549, "_node_type": "1"}, "relationships": {"1": "1affa2f0-8940-4201-bcf2-8d5e83dfb859"}}, "__type__": "1"}, "694368ff-1b11-47ac-8bef-470b9cfd73c0": {"__data__": {"text": "\n\nInside an expression\n\nYou can add `use` declarations to the beginning of any expression block\n\n```move=\naddress 0x42 {\nmodule example {\n\n    fun example(): vector {\n        use std::vector::{empty, push_back};\n\n        let v = empty();\n        push_back(&mut v, 0);\n        push_back(&mut v, 10);\n        v\n    }\n}\n}\n```\n\nAs with `let`, the aliases introduced by `use` in an expression block are removed at the end of that\nblock.\n\n```move=\naddress 0x42 {\nmodule example {\n\n    fun example(): vector {\n        let result = {\n            use std::vector::{empty, push_back};\n            let v = empty();\n            push_back(&mut v, 0);\n            push_back(&mut v, 10);\n            v\n        };\n        result\n    }\n\n}\n}\n```\n\nAttempting to use the alias after the block ends will result in an error\n\n```move=\nfun example(): vector {\n    let result = {\n        use std::vector::{empty, push_back};\n        let v = empty();\n        push_back(&mut v, 0);\n        push_back(&mut v, 10);\n        v\n    };\n    let v2 = empty(); // ERROR!\n//           ^^^^^ unbound function 'empty'\n    result\n}\n```\n\nAny `use` must be the first item in the block. If the `use` comes after any expression or `let`, it\nwill result in a parsing error\n\n```move=\n{\n    let x = 0;\n    use std::vector; // ERROR!\n    let v = vector::empty();\n}\n```\n\n", "doc_id": "694368ff-1b11-47ac-8bef-470b9cfd73c0", "embedding": null, "doc_hash": "d412a697feb8e1a83c3953d1b6c495eda40b458d7c26a8013b8d651f525b5177", "extra_info": null, "node_info": {"start": 0, "end": 1322, "_node_type": "1"}, "relationships": {"1": "aaaa2579-0099-411d-afac-6f80bf3a9c73"}}, "__type__": "1"}, "4c0c472f-9c78-4113-bac6-a2c142f37b81": {"__data__": {"text": "\n\nNaming rules\n\nAliases must follow the same rules as other module members. This means that aliases to structs or\nconstants must start with `A` to `Z`\n\n```move=\naddress 0x42 {\nmodule data {\n    struct S {}\n    const FLAG: bool = false;\n    fun foo() {}\n}\nmodule example {\n    use 0x42::data::{\n        S as s, // ERROR!\n        FLAG as fLAG, // ERROR!\n        foo as FOO,  // valid\n        foo as bar, // valid\n    };\n}\n}\n```\n\n", "doc_id": "4c0c472f-9c78-4113-bac6-a2c142f37b81", "embedding": null, "doc_hash": "6941d3010d739b1aa28f41d9d7c1fb447697cb6ddc426b9d1c271c6c8e69f138", "extra_info": null, "node_info": {"start": 0, "end": 427, "_node_type": "1"}, "relationships": {"1": "c98e50d0-1999-484f-9d5a-054aeb3a3284"}}, "__type__": "1"}, "849d5761-7653-4ddd-bdbb-899409fec252": {"__data__": {"text": "\n\nUniqueness\n\nInside a given scope, all aliases introduced by `use` declarations must be unique.\n\nFor a module, this means aliases introduced by `use` cannot overlap\n\n```move=\naddress 0x42 {\nmodule example {\n\n    use std::vector::{empty as foo, length as foo}; // ERROR!\n    //                                        ^^^ duplicate 'foo'\n\n    use std::vector::empty as bar;\n\n    use std::vector::length as bar; // ERROR!\n    //                         ^^^ duplicate 'bar'\n\n}\n}\n```\n\nAnd, they cannot overlap with any of the module's other members\n\n```move=\naddress 0x42 {\nmodule data {\n    struct S {}\n}\nmodule example {\n    use 0x42::data::S;\n\n    struct S { value: u64 } // ERROR!\n    //     ^ conflicts with alias 'S' above\n}\n}\n```\n\nInside of an expression block, they cannot overlap with each other, but they can\nshadow other aliases or names from an outer scope\n\n", "doc_id": "849d5761-7653-4ddd-bdbb-899409fec252", "embedding": null, "doc_hash": "5cbf661e0bb7f8ad5bf9a4c97026b8c20b89774acd34522f38b9427162801ab8", "extra_info": null, "node_info": {"start": 0, "end": 866, "_node_type": "1"}, "relationships": {"1": "a6668007-c8d2-4949-ac10-9cfe48732f2c"}}, "__type__": "1"}, "72b799e4-b3c9-4fc8-a0ad-e9f3eb702740": {"__data__": {"text": "\n\nShadowing\n\n`use` aliases inside of an expression block can shadow names (module members or aliases) from the\nouter scope. As with shadowing of locals, the shadowing ends at the end of the expression block;\n\n```move=\naddress 0x42 {\nmodule example {\n\n    struct WrappedVector { vec: vector }\n\n    fun empty(): WrappedVector {\n        WrappedVector { vec: std::vector::empty() }\n    }\n\n    fun example1(): (WrappedVector, WrappedVector) {\n        let vec = {\n            use std::vector::{empty, push_back};\n            // 'empty' now refers to std::vector::empty\n\n            let v = empty();\n            push_back(&mut v, 0);\n            push_back(&mut v, 1);\n            push_back(&mut v, 10);\n            v\n        };\n        // 'empty' now refers to Self::empty\n\n        (empty(), WrappedVector { vec })\n    }\n\n    fun example2(): (WrappedVector, WrappedVector) {\n        use std::vector::{empty, push_back};\n        let w: WrappedVector = {\n            use 0x42::example::empty;\n            empty()\n        };\n        push_back(&mut w.vec, 0);\n        push_back(&mut w.vec, 1);\n        push_back(&mut w.vec, 10);\n\n        let vec = empty();\n        push_back(&mut vec, 0);\n        push_back(&mut vec, 1);\n        push_back(&mut vec, 10);\n\n        (w, WrappedVector { vec })\n    }\n}\n}\n```\n\n", "doc_id": "72b799e4-b3c9-4fc8-a0ad-e9f3eb702740", "embedding": null, "doc_hash": "3ec7afdc45b9c5fb851246be15437a35247428c5f4d28c63b9c64f678524a48b", "extra_info": null, "node_info": {"start": 0, "end": 1294, "_node_type": "1"}, "relationships": {"1": "53ee57af-c5d0-4f0e-bfc8-4cfbae125f7a"}}, "__type__": "1"}, "bb9d5e63-18a1-4b67-b2c6-fb65193a4a49": {"__data__": {"text": "\n\nUnused Use or Alias\n\nAn unused `use` will result in an error\n\n```move=\naddress 0x42 {\nmodule example {\n    use std::vector::{empty, push_back}; // ERROR!\n    //                       ^^^^^^^^^ unused alias 'push_back'\n\n    fun example(): vector {\n        empty()\n    }\n}\n}\n```\n\n", "doc_id": "bb9d5e63-18a1-4b67-b2c6-fb65193a4a49", "embedding": null, "doc_hash": "a6b8d2784cebd9799cfb78b08ed30e5b70d4378bb432302e4d23372b6902bcc6", "extra_info": null, "node_info": {"start": 0, "end": 280, "_node_type": "1"}, "relationships": {"1": "357833bc-6454-415a-b9df-3b7fa9b835a2"}}, "__type__": "1"}, "e8ae2bc6-35a4-4589-9059-1c261a20b6d5": {"__data__": {"text": "\n\nOn AWS\n\nThis is a step-by-step guide to install an Aptos node on Amazon Web Services (AWS). Follow these steps to configure a validator node and a validator fullnode on separate machines. \n\n:::caution Did you set up your AWS account?\nThis guide assumes that you already have AWS account setup.\n:::\n\n:::danger Do you have stale volumes after bumping your deployment's era?\n`era` is a concept relevant only to Kubernetes deployments of an Aptos node. Changing the `era` provides an easy way to wipe your deployment's state. However, this may lead to dangling persistent volumes on validator fullnodes. Confirm the existence of these volumes with `kubectl get pvc` and delete them manually to minimize costs.\n:::\n\n", "doc_id": "e8ae2bc6-35a4-4589-9059-1c261a20b6d5", "embedding": null, "doc_hash": "c937491cf6e4dcbfe79dd262326e4fcabd99acfb5c03a96a92e3287ad0d80116", "extra_info": null, "node_info": {"start": 0, "end": 713, "_node_type": "1"}, "relationships": {"1": "c9f46c1f-5e38-469a-a891-4fbb8822c628"}}, "__type__": "1"}, "ea591c76-3c27-4ce0-b903-435e6d63f52b": {"__data__": {"text": "\n\nBefore you proceed\n\nMake sure you complete these prerequisite steps before you proceed:\n\n1. Set up your AWS account. \n2. Make sure the following are installed on your local computer:\n   - **Aptos CLI**: https://aptos.dev/tools/install-cli/index\n   - **Terraform 1.3.6**: https://www.terraform.io/downloads.html\n   - **Kubernetes CLI**: https://kubernetes.io/docs/tasks/tools/\n   - **AWS CLI**: https://aws.amazon.com/cli/\n\n", "doc_id": "ea591c76-3c27-4ce0-b903-435e6d63f52b", "embedding": null, "doc_hash": "3987568383d724df15eea7a9be0a9889468b2a7f5a243bf54857b8fb32ad6853", "extra_info": null, "node_info": {"start": 0, "end": 425, "_node_type": "1"}, "relationships": {"1": "66002699-0984-471a-9c11-ad465ad51ff5"}}, "__type__": "1"}, "4a410add-ad39-4796-8609-5d1027f848a7": {"__data__": {"text": "\n\nInstall\n\n:::tip One validator node + one validator fullnode\nFollow the below instructions **twice**, i.e., first on one machine to run a validator node and the second time on another machine to run a validator fullnode. \n:::\n\n1. Create a working directory for your node configuration.\n\n    * Choose a workspace name, for example, `mainnet` for mainnet, or `testnet` for testnet, and so on. **Note**: This defines the Terraform workspace name, which, in turn, is used to form the resource names.\n\n      ```bash\n      export WORKSPACE=mainnet\n      ```\n\n    * Create a directory for the workspace.\n\n      ```bash\n      mkdir -p ~/$WORKSPACE\n      ```\n    \n    * Choose a username for your node, for example `alice`.\n\n      ```bash\n      export USERNAME=alice\n      ```\n\n2. Create an S3 storage bucket for storing the Terraform state on AWS. You can do this on the AWS UI or by the below command: \n\n      ```bash\n      aws s3 mb s3:// --region \n      ```\n\n3. Create a Terraform file called `main.tf` in your working directory:\n\n    ```bash\n    cd ~/$WORKSPACE\n    vi main.tf\n    ```\n\n4. Modify the `main.tf` file to configure Terraform and to create Aptos fullnode from the Terraform module. See below example content for `main.tf`:\n\n    ```\n    terraform {\n      required_version = \"~> 1.3.6\"\n      backend \"s3\" {\n        bucket = \"terraform.aptos-node\"\n        key    = \"state/aptos-node\"\n        region = \n      }\n    }\n\n    provider \"aws\" {\n      region = \n    }\n\n    module \"aptos-node\" {\n      # Download Terraform module from aptos-labs/aptos-core repo\n      source        = \"github.com/aptos-labs/aptos-core.git//terraform/aptos-node/aws?ref=mainnet\"\n      region        =   # Specify the region\n      # zone_id     = \"\"  # zone id for Route53 if you want to use DNS\n      era           = 1  # bump era number to wipe the chain\n      chain_id      = 1  # for mainnet. Use different value for testnet or devnet.\n      image_tag     = \"mainnet\" # Specify the image tag to use\n      validator_name = \"\"\n    }\n    ```\n\n    For full customization options, see:\n      - The Terraform variables file https://github.com/aptos-labs/aptos-core/blob/main/terraform/aptos-node/aws/variables.tf, and \n      - The values YAML file https://github.com/aptos-labs/aptos-core/blob/main/terraform/helm/aptos-node/values.yaml.\n\n5. Initialize Terraform in the `$WORKSPACE` directory where you created the `main.tf` file.\n\n  ```bash\n  terraform init\n  ```\nThis will download all the Terraform dependencies into the `.terraform` folder in your current working directory.\n\n6. Create a new Terraform workspace to isolate your environments:\n\n  ```bash\n", "doc_id": "4a410add-ad39-4796-8609-5d1027f848a7", "embedding": null, "doc_hash": "5b0c84360643c199170c53a485c265378cd461ee0e79a597a43a12f45acc4b30", "extra_info": null, "node_info": {"start": 0, "end": 2633, "_node_type": "1"}, "relationships": {"1": "90dd0750-bcbb-4d1c-8eda-2b69f485cdbe", "3": "722baf16-76c0-417e-a479-87c092a62277"}}, "__type__": "1"}, "722baf16-76c0-417e-a479-87c092a62277": {"__data__": {"text": "a new Terraform workspace to isolate your environments:\n\n  ```bash\n  terraform workspace new $WORKSPACE\n  # This command will list all workspaces\n  terraform workspace list\n  ```\n\n7. Apply the configuration.\n\n  ```bash\n  terraform apply\n  ```\n\n  This may take a while to finish (~20 minutes). Terraform will create all the resources on your AWS cloud account.\n\n8. After `terraform apply` finishes, you can check if those resources are created:\n\n    - `aws eks update-kubeconfig --name aptos-$WORKSPACE`: To configure access for your k8s cluster.\n    - `kubectl get pods`: This should have haproxy, validator and fullnode, with validator and fullnode pod `pending` (require further action in later steps).\n    - `kubectl get svc`: This should have `validator-lb` and `fullnode-lb`, with an external IP you can share later for connectivity.\n\n9. Get your node IP information into your environment:\n\n    ```bash\n    export VALIDATOR_ADDRESS=\"$(kubectl get svc ${WORKSPACE}-aptos-node-0-validator-lb --output jsonpath='{.status.loadBalancer.ingress[0].hostname}')\"\n\n    export FULLNODE_ADDRESS=\"$(kubectl get svc ${WORKSPACE}-aptos-node-0-fullnode-lb --output jsonpath='{.status.loadBalancer.ingress[0].hostname}')\"\n    ```\n\n10. Generate the key pairs (node owner, voter, operator key, consensus key and networking key) in your working directory.\n\n    ```bash\n    aptos genesis generate-keys --output-dir ~/$WORKSPACE/keys\n    ```\n\n    This will create 4 key files under `~/$WORKSPACE/keys` directory: \n      - `public-keys.yaml`\n      - `private-keys.yaml`\n      - `validator-identity.yaml`, and\n      - `validator-full-node-identity.yaml`.\n      \n      :::danger IMPORTANT\n\n       Backup your `private-keys.yaml` somewhere safe. These keys are important for you to establish ownership of your node. **Never share private keys with anyone.**\n      :::\n\n11. Configure the validator information. \n\n    ```bash\n    aptos genesis set-validator-configuration \\\n      --local-repository-dir ~/$WORKSPACE \\\n      --username $USERNAME \\\n      --owner-public-identity-file ~/$WORKSPACE/keys/public-keys.yaml \\\n      --validator-host $VALIDATOR_ADDRESS:6180 \\\n      --full-node-host $FULLNODE_ADDRESS:6182 \\\n      --stake-amount 100000000000000\n\n    ```\n\n    This will create two YAML files in the `~/$WORKSPACE/$USERNAME` directory: `owner.yaml` and `operator.yaml`. \n\n12. Download the following files by following the download commands on the Node Files page:\n    - `genesis.blob`\n    - `waypoint.txt`\n\n13. **Summary:** To summarize, in your working directory you should have a list of files:\n    - `main.tf`: The Terraform files to install the `aptos-node` module (from steps 3 and 4).\n    - `keys` folder containing:\n      - `public-keys.yaml`: Public keys for the owner account, consensus, networking (from step 10).\n      - `private-keys.yaml`: Private keys for the owner account, consensus, networking (from step", "doc_id": "722baf16-76c0-417e-a479-87c092a62277", "embedding": null, "doc_hash": "c526d0567c47e1a6e1e84a2df8872e1ba0a88b2cf220ff05269ae6b0179355f8", "extra_info": null, "node_info": {"start": 2576, "end": 5481, "_node_type": "1"}, "relationships": {"1": "90dd0750-bcbb-4d1c-8eda-2b69f485cdbe", "2": "4a410add-ad39-4796-8609-5d1027f848a7", "3": "a38a784f-d8b5-47de-aca3-ed072ee21363"}}, "__type__": "1"}, "a38a784f-d8b5-47de-aca3-ed072ee21363": {"__data__": {"text": "Private keys for the owner account, consensus, networking (from step 10).\n      - `validator-identity.yaml`: Private keys for setting the Validator identity (from step 10).\n      - `validator-full-node-identity.yaml`: Private keys for setting validator full node identity (from step 10).\n    - `username` folder containing: \n      - `owner.yaml`: Defines owner, operator, and voter mapping. \n      - `operator.yaml`: Node information that will be used for both the validator and the validator fullnode (from step 11). \n    - `waypoint.txt`: The waypoint for the genesis transaction (from step 12).\n    - `genesis.blob` The genesis binary that contains all the information about the framework, validator set, and more (from step 12).\n\n14. Insert `genesis.blob`, `waypoint.txt` and the identity files as secret into k8s cluster.\n\n    ```bash\n    kubectl create secret generic ${WORKSPACE}-aptos-node-0-genesis-e1 \\\n        --from-file=genesis.blob=genesis.blob \\\n        --from-file=waypoint.txt=waypoint.txt \\\n        --from-file=validator-identity.yaml=keys/validator-identity.yaml \\\n        --from-file=validator-full-node-identity.yaml=keys/validator-full-node-identity.yaml\n    ```\n\n    :::tip\n    \n    The `-e1` suffix refers to the era number. If you changed the era number, make sure it matches when creating the secret.\n\n    :::\n\n\n15. Check that all the pods are running.\n\n    ```bash\n    kubectl get pods\n\n    NAME                                        READY   STATUS    RESTARTS   AGE\n    node1-aptos-node-0-fullnode-e9-0              1/1     Running   0          4h31m\n    node1-aptos-node-0-haproxy-7cc4c5f74c-l4l6n   1/1     Running   0          4h40m\n    node1-aptos-node-0-validator-0                1/1     Running   0          4h30m\n    ```\n\nYou have successfully completed setting up your node. Make sure that you have set up one machine to run a validator node and a second machine to run a validator fullnode.\n\nNow proceed to connecting to the Aptos network and establishing staking pool operations.\n\n", "doc_id": "a38a784f-d8b5-47de-aca3-ed072ee21363", "embedding": null, "doc_hash": "1dab8226a855519e31af4de9b737d0ff4854c88484872289a28daf305a517aba", "extra_info": null, "node_info": {"start": 5471, "end": 7492, "_node_type": "1"}, "relationships": {"1": "90dd0750-bcbb-4d1c-8eda-2b69f485cdbe", "2": "722baf16-76c0-417e-a479-87c092a62277"}}, "__type__": "1"}, "bce3aa62-2a98-44c7-bbd6-b59de023adf7": {"__data__": {"text": "\n\nOn Azure\n\nThis is a step-by-step guide to install an Aptos node on Microsoft Azure. Follow these steps to configure a validator node and a validator fullnode on separate machines. \n\n:::caution Did you set up your Azure account?\nThis guide assumes that you already have Azure account setup.\n:::\n\n:::danger Do you have stale volumes after bumping your deployment's era?\n`era` is a concept relevant only to Kubernetes deployments of an Aptos node. Changing the `era` provides an easy way to wipe your deployment's state. However, this may lead to dangling persistent volumes on validator fullnodes. Confirm the existence of these volumes with `kubectl get pvc` and delete them manually to minimize costs.\n:::\n\n", "doc_id": "bce3aa62-2a98-44c7-bbd6-b59de023adf7", "embedding": null, "doc_hash": "5ef2144209229fbbeecea42f703afe4542647853f1d6e02a90274ab42ee3b488", "extra_info": null, "node_info": {"start": 0, "end": 709, "_node_type": "1"}, "relationships": {"1": "2fff4c5c-850a-413c-8ad6-6f91a1f4a06a"}}, "__type__": "1"}, "919b7805-0149-41c2-9bc7-651f737f43d5": {"__data__": {"text": "\n\nBefore you proceed\n\nMake sure you complete these prerequisite steps before you proceed:\n\n- **Azure account**: https://azure.microsoft.com/\n- **Aptos CLI**: https://aptos.dev/tools/install-cli/index\n- **Terraform 1.3.6**: https://www.terraform.io/downloads.html\n- **Kubernetes CLI**: https://kubernetes.io/docs/tasks/tools/\n- **Azure CLI**: https://docs.microsoft.com/en-us/cli/azure/install-azure-cli\n\n", "doc_id": "919b7805-0149-41c2-9bc7-651f737f43d5", "embedding": null, "doc_hash": "11a48de31377d45602967dc53809ea4aad3e4a8dec7a2067af45b237bad52dc0", "extra_info": null, "node_info": {"start": 0, "end": 404, "_node_type": "1"}, "relationships": {"1": "ab487f54-30dd-49f6-8986-01c600cf96bc"}}, "__type__": "1"}, "6f692f7b-5fbf-427c-9db1-5e5aeda5ddc4": {"__data__": {"text": "\n\nInstall\n\n:::tip One validator node + one validator fullnode\nFollow the below instructions **twice**, i.e., first on one machine to run a validator node and the second time on another machine to run a validator fullnode. \n:::\n\n1. Create a working directory for your configuration.\n\n    * Choose a workspace name, for example, `mainnet` for mainnet, or `testnet` for testnet, and so on. **Note**: This defines the Terraform workspace name, which, in turn, is used to form the resource names.\n\n      ```bash\n      export WORKSPACE=mainnet\n      ```\n\n    * Create a directory for the workspace.\n      \n      ```bash\n      mkdir -p ~/$WORKSPACE\n      ```\n    \n    * Choose a username for your node, for example `alice`.\n\n      ```bash\n      export USERNAME=alice\n      ```\n\n2. Create a blob storage container for storing the Terraform state on Azure, you can do this on Azure UI or by the command: \n\n    ```bash\n    az group create -l  -n aptos-$WORKSPACE\n    az storage account create -n  -g aptos-$WORKSPACE -l  --sku Standard_LRS\n    az storage container create -n  --account-name  --resource-group aptos-$WORKSPACE\n    ```\n\n3. Create Terraform file called `main.tf` in your working directory:\n  ```bash\n  cd ~/$WORKSPACE\n  vi main.tf\n  ```\n\n4. Modify `main.tf` file to configure Terraform, and create fullnode from Terraform module. Example content for `main.tf`:\n\n  ```\n  terraform {\n    required_version = \"~> 1.3.6\"\n    backend \"azurerm\" {\n      resource_group_name  = \n      storage_account_name = \n      container_name       = \n      key                  = \"state/validator\"\n    }\n  }\n  module \"aptos-node\" {\n    # download Terraform module from aptos-labs/aptos-core repo\n    source        = \"github.com/aptos-labs/aptos-core.git//terraform/aptos-node/azure?ref=mainnet\"\n    region        =   # Specify the region\n    era           = 1  # bump era number to wipe the chain\n    chain_id      = 1  # for mainnet. Use different value for testnet or devnet.\n    image_tag     = \"mainnet\" # Specify the docker image tag to use\n    validator_name = \"\"\n  }\n  ```\n\n    For the full customization options, see the variables file `variables.tf`, and the Helm values.\n\n5. Initialize Terraform in the same directory of your `main.tf` file.\n  ```bash\n  terraform init\n  ```\nThis will download all the Terraform dependencies for you, in the `.terraform` folder in your current working directory.\n\n6. Create a new Terraform workspace to isolate your environments:\n  ```bash\n  terraform workspace new $WORKSPACE\n  # This command will list all workspaces\n  terraform workspace list\n  ```\n\n7. Apply the configuration.\n  ```bash\n  terraform apply\n  ```\n  This might take a while to finish (~20 minutes), Terraform will create all the resources on your cloud account.\n\n8. Once terraform apply finishes, you can check if those resources are created:\n\n    - `az", "doc_id": "6f692f7b-5fbf-427c-9db1-5e5aeda5ddc4", "embedding": null, "doc_hash": "ed4c76294d7f945319e7241d8cc653d4d0245d1987f7918f031f8664844e1213", "extra_info": null, "node_info": {"start": 0, "end": 2846, "_node_type": "1"}, "relationships": {"1": "1daa8e6b-c55c-49d9-a49c-916798ab0615", "3": "cf18ed15-3a42-4d1a-b41e-2591f02b0c93"}}, "__type__": "1"}, "cf18ed15-3a42-4d1a-b41e-2591f02b0c93": {"__data__": {"text": "apply finishes, you can check if those resources are created:\n\n    - `az aks get-credentials --resource-group aptos-$WORKSPACE --name aptos-$WORKSPACE` to configure access for your k8s cluster.\n    - `kubectl get pods` this should have haproxy, validator and fullnode. with validator and fullnode pod `pending` (require further action in later steps)\n    - `kubectl get svc` this should have `validator-lb` and `fullnode-lb`, with an external-IP you can share later for connectivity.\n\n9. Get your node IP info:\n\n    ```bash\n    export VALIDATOR_ADDRESS=\"$(kubectl get svc ${WORKSPACE}-aptos-node-0-validator-lb --output jsonpath='{.status.loadBalancer.ingress[0].hostname}')\"\n\n    export FULLNODE_ADDRESS=\"$(kubectl get svc ${WORKSPACE}-aptos-node-0-fullnode-lb --output jsonpath='{.status.loadBalancer.ingress[0].hostname}')\"\n    ```\n\n10. Generate the key pairs (node owner, voter, operator key, consensus key and networking key) in your working directory.\n\n    ```bash\n    aptos genesis generate-keys --output-dir ~/$WORKSPACE/keys\n    ```\n\n    This will create 4 key files under `~/$WORKSPACE/keys` directory: \n      - `public-keys.yaml`\n      - `private-keys.yaml`\n      - `validator-identity.yaml`, and\n      - `validator-full-node-identity.yaml`.\n      \n      :::danger IMPORTANT\n\n       Backup your `private-keys.yaml` somewhere safe. These keys are important for you to establish ownership of your node. **Never share private keys with anyone.**\n      :::\n\n11. Configure the validator information.\n\n    ```bash\n    aptos genesis set-validator-configuration \\\n      --local-repository-dir ~/$WORKSPACE \\\n      --username $USERNAME \\\n      --owner-public-identity-file ~/$WORKSPACE/keys/public-keys.yaml \\\n      --validator-host $VALIDATOR_ADDRESS:6180 \\\n      --full-node-host $FULLNODE_ADDRESS:6182 \\\n      --stake-amount 100000000000000\n\n    ```\n\n    This will create two YAML files in the `~/$WORKSPACE/$USERNAME` directory: `owner.yaml` and `operator.yaml`. \n\n12. Download the following files by following the download commands on the Node Files page:\n    - `genesis.blob`\n    - `waypoint.txt`\n\n13. **Summary:** To summarize, in your working directory you should have a list of files:\n    - `main.tf`: The Terraform files to install the `aptos-node` module (from steps 3 and 4).\n    - `keys` folder containing:\n      - `public-keys.yaml`: Public keys for the owner account, consensus, networking (from step 10).\n      - `private-keys.yaml`: Private keys for the owner account, consensus, networking (from step 10).\n      - `validator-identity.yaml`: Private keys for setting the Validator identity (from step 10).\n      - `validator-full-node-identity.yaml`: Private keys for setting validator full node identity (from step 10).\n    - `username` folder containing: \n      - `owner.yaml`: Defines owner, operator, and voter mapping. They are all the same account in test", "doc_id": "cf18ed15-3a42-4d1a-b41e-2591f02b0c93", "embedding": null, "doc_hash": "d7c6857ceb1be43d8a8da4dbda78f75a102d1e66f237e79de05919aa29ff1e01", "extra_info": null, "node_info": {"start": 2789, "end": 5669, "_node_type": "1"}, "relationships": {"1": "1daa8e6b-c55c-49d9-a49c-916798ab0615", "2": "6f692f7b-5fbf-427c-9db1-5e5aeda5ddc4", "3": "fba905f2-06a2-4e34-b877-84dfe8a8b7f1"}}, "__type__": "1"}, "fba905f2-06a2-4e34-b877-84dfe8a8b7f1": {"__data__": {"text": "Defines owner, operator, and voter mapping. They are all the same account in test mode (from step 11).\n      - `operator.yaml`: Node information that will be used for both the Validator and the fullnode (from step 11). \n    - `waypoint.txt`: The waypoint for the genesis transaction (from step 12).\n    - `genesis.blob` The genesis binary that contains all the information about the framework, validatorSet and more (from step 12).\n\n14. Insert `genesis.blob`, `waypoint.txt` and the identity files as secret into k8s cluster.\n\n    ```bash\n    kubectl create secret generic ${WORKSPACE}-aptos-node-0-genesis-e1 \\\n        --from-file=genesis.blob=genesis.blob \\\n        --from-file=waypoint.txt=waypoint.txt \\\n        --from-file=validator-identity.yaml=keys/validator-identity.yaml \\\n        --from-file=validator-full-node-identity.yaml=keys/validator-full-node-identity.yaml\n    ```\n  \n    :::tip\n    \n    The `-e1` suffix refers to the era number. If you changed the era number, make sure it matches when creating the secret.\n\n    :::\n\n15. Check that all pods are running.\n\n    ```bash\n    kubectl get pods\n\n    NAME                                        READY   STATUS    RESTARTS   AGE\n    node1-aptos-node-0-fullnode-e9-0              1/1     Running   0          4h31m\n    node1-aptos-node-0-haproxy-7cc4c5f74c-l4l6n   1/1     Running   0          4h40m\n    node1-aptos-node-0-validator-0                1/1     Running   0          4h30m\n    ```\n\nYou have successfully completed setting up your node. Make sure that you have set up one machine to run a validator node and a second machine to run a validator fullnode.\n\nNow proceed to connecting to the Aptos network and establishing staking pool operations.\n\n", "doc_id": "fba905f2-06a2-4e34-b877-84dfe8a8b7f1", "embedding": null, "doc_hash": "957d56c7b49a0607fd91cb94ff890ed2204746eeeba86b50a7605fb51eb7335f", "extra_info": null, "node_info": {"start": 5646, "end": 7363, "_node_type": "1"}, "relationships": {"1": "1daa8e6b-c55c-49d9-a49c-916798ab0615", "2": "cf18ed15-3a42-4d1a-b41e-2591f02b0c93"}}, "__type__": "1"}, "f86d3d75-ede4-4c6e-8e31-fdb5b4ae26c2": {"__data__": {"text": "\n\nRun a Local Testnet with Aptos CLI\n\n:::tip Using source or Docker run a local testnet\n\nIf you want to use Docker or `aptos-core` source to start and run a local testnet, see Run a Local Testnet with Validator.\n:::\n\nYou can run a local testnet of the Aptos blockchain. This local testnet will not be connected to the Aptos devnet. It will run on your local machine, independent of other Aptos networks. You can use this local testnet for testing and development purposes. A local testnet is a great tool for doing local development against a known version of the codebase without having to interact with a live network or deal with the real world costs of a live network.\n\n:::tip Aptos CLI documentation\nIf you are new to the Aptos CLI, then see this comprehensive Aptos CLI user documentation.\n:::\n\n", "doc_id": "f86d3d75-ede4-4c6e-8e31-fdb5b4ae26c2", "embedding": null, "doc_hash": "749e7c0726fe5798039a2284fae87d1d60484b7a6a155f14e857a9686e29b8e6", "extra_info": null, "node_info": {"start": 0, "end": 801, "_node_type": "1"}, "relationships": {"1": "eae58f4c-084d-4afa-8ecf-d782735d7bdc"}}, "__type__": "1"}, "9812fe1e-a51f-42d0-8ad8-05e4bd3dbd5d": {"__data__": {"text": "\n\nStarting a local testnet with a faucet\n\nYou can start a local testnet using the following Aptos CLI command:\n\n```bash\naptos node run-local-testnet --with-faucet\n```\n\nThe above command will start a local validator node and will display a terminal output similar to the following:\n\n```bash\nCompleted generating configuration:\n        Log file: \"/Users/greg/.aptos/testnet/validator.log\"\n        Test dir: \"/Users/greg/.aptos/testnet\"\n        Aptos root key path: \"/Users/greg/.aptos/testnet/mint.key\"\n        Waypoint: 0:74c9d14285ec19e6bd15fbe851007ea8b66efbd772f613c191aa78721cadac25\n        ChainId: TESTING\n        REST API endpoint: 0.0.0.0:8080\n        Fullnode network: /ip4/0.0.0.0/tcp/6181\n\nAptos is running, press ctrl-c to exit\n\nFaucet is running.  Faucet endpoint: http://0.0.0.0:8081\n```\n\nThe above command will use the default configuration for the validator node.\n\n:::caution Do not use two instances of the same command at the same time\nNote that two instances of the same command cannot run at the same time. This will result in a conflict on ports for the validator node.\n:::\n\n", "doc_id": "9812fe1e-a51f-42d0-8ad8-05e4bd3dbd5d", "embedding": null, "doc_hash": "10b4366fd1758f709345a118c42a55241d59957b9936ae90672110d830df1138", "extra_info": null, "node_info": {"start": 0, "end": 1095, "_node_type": "1"}, "relationships": {"1": "94e2c4a8-3db2-4a09-b873-9592bc957c8b"}}, "__type__": "1"}, "6f5f6b61-f7ff-44b4-b0fb-93ed40a5b812": {"__data__": {"text": "\n\nTest with your local testnet\n\nYou can use the Aptos CLI for a full range of local testnet operations. See below for how to configure the CLI first.\n\n", "doc_id": "6f5f6b61-f7ff-44b4-b0fb-93ed40a5b812", "embedding": null, "doc_hash": "9a665f2a7c6b17470ab81191114e6db65edaf2aefe8d3ee432515fc7fc5eca56", "extra_info": null, "node_info": {"start": 0, "end": 151, "_node_type": "1"}, "relationships": {"1": "ca800075-ff3a-4c2f-81f2-a988eb59be6c"}}, "__type__": "1"}, "3c8cc045-900f-4cef-a40f-f35337ab6192": {"__data__": {"text": "\n\nConfiguring your Aptos CLI to use the local testnet\n\nYou can add a separate profile, as shown below:\n\n```bash\naptos init --profile local --rest-url http://localhost:8080 --faucet-url http://localhost:8081\n```\n\nand you will get an output like below. At the `Enter your private key...` command prompt press enter to generate a random new key.\n\n```bash\nConfiguring for profile local\nUsing command line argument for rest URL http://localhost:8080/\nUsing command line argument for faucet URL http://localhost:8081/\nEnter your private key as a hex literal (0x...) [Current: None | No input: Generate new key (or keep one if present)]\n```\n\nThis will create a new account and fund it with the default amount of coins, as shown below:\n\n```bash\nNo key given, generating key...\nAccount 7100C5295ED4F9F39DCC28D309654E291845984518307D3E2FE00AEA5F8CACC1 doesn't exist, creating it and funding it with 10000 coins\nAptos is now set up for account 7100C5295ED4F9F39DCC28D309654E291845984518307D3E2FE00AEA5F8CACC1!  Run `aptos help` for more information about commands\n{\n  \"Result\": \"Success\"\n}\n```\n\nFrom now on you should add `--profile local` to the commands to run them on the local testnet.\n\n", "doc_id": "3c8cc045-900f-4cef-a40f-f35337ab6192", "embedding": null, "doc_hash": "aa69ca7e3575d1393f46a33a1ba0db2c3912e629882cce5fae40742e8ac652b1", "extra_info": null, "node_info": {"start": 0, "end": 1180, "_node_type": "1"}, "relationships": {"1": "14cc388f-8fcf-45e3-95c1-fc3bb8364424"}}, "__type__": "1"}, "6458d844-4b2e-46dd-a543-416f1130703f": {"__data__": {"text": "\n\nCreating and funding accounts\n\nTo create new accounts on the local testnet, we recommend using the above instructions with different profile names:\n\n```bash\nPROFILE=local\naptos init --profile $PROFILE --rest-url http://localhost:8080 --faucet-url http://localhost:8081\n```\n\nTo fund accounts:\n\n```bash\naptos account fund-with-faucet --profile $PROFILE --account $PROFILE\n```\n\nTo create resource accounts:\n\n```bash\naptos account create-resource-account --profile $PROFILE --seed 1\n```\n\n", "doc_id": "6458d844-4b2e-46dd-a543-416f1130703f", "embedding": null, "doc_hash": "36326cd39b1cf15dd1f56a7ddaae6369856f3aadf0b38e4c412186928a1970f4", "extra_info": null, "node_info": {"start": 0, "end": 486, "_node_type": "1"}, "relationships": {"1": "1ac635cf-91f6-4da8-aea2-5e651de9e824"}}, "__type__": "1"}, "140d1dbc-c0a5-49f4-a864-c5a9cd35d5c1": {"__data__": {"text": "\n\nPublishing modules to the local testnet\n\nYou can run any command by adding the `--profile $PROFILE` flag.  In this case, we also use `$PROFILE` as the named address in the `HelloBlockchain` example.\n\n```bash\naptos move publish --profile $PROFILE --package-dir /opt/git/aptos-core/aptos-move/move-examples/hello_blockchain --named-addresses HelloBlockchain=$PROFILE\n{\n  \"Result\": {\n    \"changes\": [\n      {\n        \"address\": \"7100c5295ed4f9f39dcc28d309654e291845984518307d3e2fe00aea5f8cacc1\",\n        \"data\": {\n          \"authentication_key\": \"0x7100c5295ed4f9f39dcc28d309654e291845984518307d3e2fe00aea5f8cacc1\",\n          \"coin_register_events\": {\n            \"counter\": \"1\",\n            \"guid\": {\n              \"id\": {\n                \"addr\": \"0x7100c5295ed4f9f39dcc28d309654e291845984518307d3e2fe00aea5f8cacc1\",\n                \"creation_num\": \"0\"\n              }\n            }\n          },\n          \"sequence_number\": \"4\"\n        },\n        \"event\": \"write_resource\",\n        \"resource\": \"0x1::account::Account\"\n      },\n    ...\n    ],\n    \"gas_used\": 59,\n    \"success\": true,\n    \"version\": 6261,\n    \"vm_status\": \"Executed successfully\"\n  }\n}\n```\n\n", "doc_id": "140d1dbc-c0a5-49f4-a864-c5a9cd35d5c1", "embedding": null, "doc_hash": "146a1478e24e9d5e33197923927d903739ca1180d5d41ca045472d465ab296ff", "extra_info": null, "node_info": {"start": 0, "end": 1157, "_node_type": "1"}, "relationships": {"1": "ae5c7ef0-578e-47c8-b72b-d15ccd90c34b"}}, "__type__": "1"}, "e882f680-0624-4b2c-b88c-7be92c72572e": {"__data__": {"text": "\n\nResetting the local state\n\nIf you updated your codebase with backwards incompatible changes, or just want to start over, you can run\nthe command with the `--force-restart` flag:\n\n```bash\naptos node run-local-testnet --with-faucet --force-restart\n```\n\nIt will then prompt you if you really want to restart the chain, to ensure that you do not delete your work by accident.\n\n```bash\nAre you sure you want to delete the existing chain? [yes/no] >\n```\n\n", "doc_id": "e882f680-0624-4b2c-b88c-7be92c72572e", "embedding": null, "doc_hash": "62544e279dc25f2992e461ff02d13f59ff4541cc06aada8745d0edcbdc398990", "extra_info": null, "node_info": {"start": 0, "end": 451, "_node_type": "1"}, "relationships": {"1": "685fa6da-14e4-408c-a555-ef0ad539dd1c"}}, "__type__": "1"}, "47bd05b1-6683-4959-af0e-6cdd9cd99a1e": {"__data__": {"text": "\n\nFAQ\n\n", "doc_id": "47bd05b1-6683-4959-af0e-6cdd9cd99a1e", "embedding": null, "doc_hash": "0fd9b61a69ac504d541460d67f5225f61750adaf29b369792d7e0a4644e0baee", "extra_info": null, "node_info": {"start": 0, "end": 7, "_node_type": "1"}, "relationships": {"1": "4163b22f-91bd-42d1-879e-18bf056ab8a7"}}, "__type__": "1"}, "9c1de593-9875-46ae-aacb-6e4eb41488b7": {"__data__": {"text": "\n\nI'm getting the error `address already in use`, what can I do?\n\nIf you're getting an error similar to this error:\n\n```bash\n'panicked at 'error binding to 0.0.0.0:9101: error creating server listener: Address already in use (os error 48)'\n```\n\nThis means you are either already running a node, or you have another process running on that port.\n\nOn macOS and Linux, you can run the following command to get the name and PID of the process using the port:\n\n```bash\nPORT=9101\nlsof -i :$PORT\n```\n\n", "doc_id": "9c1de593-9875-46ae-aacb-6e4eb41488b7", "embedding": null, "doc_hash": "9167a18895dde77eab20c79f2c2cc3ecf93eafbaea0c9a2062d1bf23b91cad08", "extra_info": null, "node_info": {"start": 0, "end": 494, "_node_type": "1"}, "relationships": {"1": "7c8775ff-46b8-4888-9436-fabaabf740e1"}}, "__type__": "1"}, "02b65357-586a-46bf-8c8c-6c0b20c86128": {"__data__": {"text": "\n\nWhere can I get more information about the run-local-testnet command?\n\nMore CLI help can be found by running the command:\n\n```bash\naptos node run-local-testnet --help\n```\n\nwhich will provide information about each of the flags for the command.\n\n", "doc_id": "02b65357-586a-46bf-8c8c-6c0b20c86128", "embedding": null, "doc_hash": "43160be2267cc5a929e47007a88e89d6abb865ae3a25377ba7471cebeee871e7", "extra_info": null, "node_info": {"start": 0, "end": 247, "_node_type": "1"}, "relationships": {"1": "087f0b1a-a6b5-409b-b30f-ee2af80687ab"}}, "__type__": "1"}, "e865aede-17d3-4657-af05-09f27a3ad50c": {"__data__": {"text": "\n\nUsing Docker\n\nThis is a step-by-step guide to install an Aptos node using Docker. Follow these steps to configure a validator node and a validator fullnode on separate machines. Use the `fullnode.yaml` to run a validator fullnode. See Step 11.\n\n", "doc_id": "e865aede-17d3-4657-af05-09f27a3ad50c", "embedding": null, "doc_hash": "5d59a6bbeaf445d43b795ddbc9474af66f9ec5ec69f6225c1c6156a4a169ea60", "extra_info": null, "node_info": {"start": 0, "end": 247, "_node_type": "1"}, "relationships": {"1": "1862086e-6f60-42e1-94e4-430d7d42dd71"}}, "__type__": "1"}, "f92d9c7e-3c10-489a-ad61-fa78d5aa925a": {"__data__": {"text": "\n\nBefore you proceed\n\nMake sure the following are installed on your local computer:\n   - **Aptos CLI**: https://aptos.dev/tools/install-cli/index\n   - **Docker and Docker-compose:** https://docs.docker.com/engine/install/\n\n:::caution Note on Apple M1\n\nDocker method has only been tested on Linux, Windows, and Intel macOS. If you are on M1 macOS, use the Aptos-core source approach.\n\n:::\n\n1. Create a directory for your Aptos node composition, and pick a username for your node. e.g.\n    ```bash\n    export WORKSPACE=mainnet\n    export USERNAME=alice\n    mkdir ~/$WORKSPACE\n    cd ~/$WORKSPACE\n    ```\n\n2. Download the following files by following the download commands on the Node Files page:\n    - `validator.yaml`\n    - `docker-compose.yaml`\n    - `docker-compose-fullnode.yaml`\n    - `haproxy.cfg`\n    - `haproxy-fullnode.cfg`\n    - `blocked.ips`\n\n3. Generate the key pairs (node owner, voter, operator key, consensus key and networking key) in your working directory.\n\n    ```bash\n    aptos genesis generate-keys --output-dir ~/$WORKSPACE/keys\n    ```\n\n    This will create 4 key files under `~/$WORKSPACE/keys` directory: \n      - `public-keys.yaml`\n      - `private-keys.yaml`\n      - `validator-identity.yaml`, and\n      - `validator-full-node-identity.yaml`.\n      \n      :::danger IMPORTANT\n\n       Backup your `private-keys.yaml` somewhere safe. These keys are important for you to establish ownership of your node. **Never share private keys with anyone.**\n      :::\n\n4. Configure validator information. You need to setup a static IP / DNS address (DNS is much preferred) which can be used by the node, and make sure the network / firewalls are properly configured to accept external connections. See Network Identity For Fullnode for how to do this. \n\n    ```bash\n    cd ~/$WORKSPACE\n    aptos genesis set-validator-configuration \\\n        --local-repository-dir ~/$WORKSPACE \\\n        --username $USERNAME \\\n        --owner-public-identity-file ~/$WORKSPACE/keys/public-keys.yaml \\\n        --validator-host : \\\n        --full-node-host : \\\n        --stake-amount 100000000000000\n\n    # for example, with IP:\n\n    aptos genesis set-validator-configuration \\\n        --local-repository-dir ~/$WORKSPACE \\\n        --username $USERNAME \\\n        --owner-public-identity-file ~/$WORKSPACE/keys/public-keys.yaml \\\n        --validator-host 35.232.235.205:6180 \\\n        --full-node-host 34.135.169.144:6182 \\\n        --stake-amount 100000000000000\n\n    # For example, with DNS:\n\n    aptos genesis set-validator-configuration \\\n        --local-repository-dir ~/$WORKSPACE \\\n        --username $USERNAME \\\n        --owner-public-identity-file ~/$WORKSPACE/keys/public-keys.yaml \\\n    ", "doc_id": "f92d9c7e-3c10-489a-ad61-fa78d5aa925a", "embedding": null, "doc_hash": "946d481647c896f0fd6ffb6f8e9cfb189fa33808d29728847f95766fa33839ec", "extra_info": null, "node_info": {"start": 0, "end": 2689, "_node_type": "1"}, "relationships": {"1": "98014916-1d82-43df-b8df-3c9fe3ea96ff", "3": "424537c2-990a-48d1-945d-467151de05e6"}}, "__type__": "1"}, "424537c2-990a-48d1-945d-467151de05e6": {"__data__": {"text": "~/$WORKSPACE/keys/public-keys.yaml \\\n        --validator-host bot.aptosdev.com:6180 \\\n        --full-node-host fn.bot.aptosdev.com:6182 \\\n        --stake-amount 100000000000000\n    ```\n\n    This will create two YAML files in the `~/$WORKSPACE/$USERNAME` directory: `owner.yaml` and `operator.yaml`. \n\n5. Download the following files by following the download commands on the Node Files page:\n    - `genesis.blob`\n    - `waypoint.txt`\n\n6. To recap, in your working directory, you should have a list of files:\n\n    - `docker-compose.yaml` docker compose file to run validator and fullnode\n    - `keys` folder containing:\n      - `public-keys.yaml`: Public keys for the owner account, consensus, networking (from step 4).\n      - `private-keys.yaml`: Private keys for the owner account, consensus, networking (from step 4).\n      - `validator-identity.yaml`: Private keys for setting the Validator identity (from step 4).\n      - `validator-full-node-identity.yaml`: Private keys for setting validator full node identity (from step 4).\n    - `username` folder containing: \n      - `owner.yaml`: define owner, operator, and voter mapping. They are all the same account in test mode (from step 5).\n      - `operator.yaml`: Node information that will be used for both the Validator and the fullnode (from step 5). \n    - `waypoint.txt`: The waypoint for the genesis transaction (from step 6).\n    - `genesis.blob` The genesis binary that contains all the information about the framework, validatorSet and more (from step 6).\n\n7. Run docker-compose: `docker-compose up`. (or `docker compose up` depends on your version)\n\n**Now you have completed setting up your validator node. Next, setup a validator fullnode following the instructions below.**\n\n9. Set up a validator fullnode on a different machine. Download the `fullnode.yaml` and `docker-compose-fullnode.yaml` configuration files into the working directory of fullnode machine. See Node Files for a full list of files you should download and the download commands. \n\n10.  Edit `fullnode.yaml` file to update the IP address for validator node.\n\n11.  Copy the `validator-full-node-identity.yaml`, download `genesis.blob` and `waypoint.txt` files into the same working directory on fullnode machine.\n\n12.  Run docker-compose: `docker-compose -f docker-compose-fullnode.yaml up`.\n\nNow you have successfully completed setting up your node.\n\nNow proceed to connecting to the Aptos network and establishing staking pool operations.\n\n\n\n", "doc_id": "424537c2-990a-48d1-945d-467151de05e6", "embedding": null, "doc_hash": "1cb08fb22915fb2ac1f23725d3ef3f173a665659bae8545c4f86747d160694c2", "extra_info": null, "node_info": {"start": 2648, "end": 5126, "_node_type": "1"}, "relationships": {"1": "98014916-1d82-43df-b8df-3c9fe3ea96ff", "2": "f92d9c7e-3c10-489a-ad61-fa78d5aa925a"}}, "__type__": "1"}, "9c851ee5-256e-4ae5-b728-11b8dfd7634f": {"__data__": {"text": "\n\nOn GCP\n\nThis is a step-by-step guide to install an Aptos node on Google GCP. Follow these steps to configure a validator node and a validator fullnode on separate machines. \n\n:::caution Did you set up your GCP account and create a project?\nThis guide assumes you already have a Google Cloud Platform (GCP) account setup, and have created a new project for deploying Aptos node. If you are not familiar with GCP (Google Cloud Platform), review the Prerequisites section for GCP account setup.\n:::\n\n:::danger Do you have stale volumes after bumping your deployment's era?\n`era` is a concept relevant only to Kubernetes deployments of an Aptos node. Changing the `era` provides an easy way to wipe your deployment's state. However, this may lead to dangling persistent volumes on validator fullnodes. Confirm the existence of these volumes with `kubectl get pvc` and delete them manually to minimize costs.\n:::\n\n", "doc_id": "9c851ee5-256e-4ae5-b728-11b8dfd7634f", "embedding": null, "doc_hash": "cd575b34c0ca40909571eea291a6061a32f95bc377755886ef732008e141f2c8", "extra_info": null, "node_info": {"start": 0, "end": 911, "_node_type": "1"}, "relationships": {"1": "7da4226b-d4a5-413a-9c00-29f4dfcc3c94"}}, "__type__": "1"}, "2d6fcb7a-43f7-471e-b89f-c746cc7c914d": {"__data__": {"text": "\n\nBefore you proceed\n\nMake sure the following are setup for your environment:\n  - **GCP account**: hhttps://cloud.google.com/\n  - **Aptos CLI**: https://aptos.dev/tools/install-cli/\n  - **Terraform 1.3.6**: https://www.terraform.io/downloads.html\n  - **Kubernetes CLI**: https://kubernetes.io/docs/tasks/tools/\n  - **Google Cloud CLI**: https://cloud.google.com/sdk/docs/install-sdk\n\n", "doc_id": "2d6fcb7a-43f7-471e-b89f-c746cc7c914d", "embedding": null, "doc_hash": "0560f290c2d0acb0c6bf5fc08934193b79b5ddac031a950acc082640d1c99a07", "extra_info": null, "node_info": {"start": 0, "end": 384, "_node_type": "1"}, "relationships": {"1": "2c88e603-4b57-4071-afcf-3bc559d981b7"}}, "__type__": "1"}, "8efb4ba1-534a-48a2-9526-6e1bd5ec3c47": {"__data__": {"text": "\n\nInstall\n\n:::tip One validator node + one validator fullnode\nFollow the below instructions **twice**, i.e., first on one machine to run a validator node and the second time on another machine to run a validator fullnode. \n:::\n\n1. Create a working directory for your configuration.\n\n    * Choose a workspace name, for example, `mainnet` for mainnet, or `testnet` for testnet, and so on. **Note**: This defines the Terraform workspace name, which, in turn, is used to form the resource names.\n      ```bash\n      export WORKSPACE=mainnet\n      ```\n\n    * Create a directory for the workspace\n      ```bash\n      mkdir -p ~/$WORKSPACE\n      ```\n\n    * Choose a username for your node, for example `alice`.\n\n      ```bash\n      export USERNAME=alice\n      ```\n\n2. Create a storage bucket for storing the Terraform state on Google Cloud Storage.  Use the GCP UI or Google Cloud Storage command to create the bucket.  The name of the bucket must be unique. See the Google Cloud Storage documentation here: https://cloud.google.com/storage/docs/creating-buckets#prereq-cli.\n\n  ```bash\n  gsutil mb gs://BUCKET_NAME\n  # for example\n  gsutil mb gs://-aptos-terraform-dev\n  ```\n\n3. Create Terraform file called `main.tf` in your working directory:\n  ```bash\n  cd ~/$WORKSPACE\n  touch main.tf\n  ```\n\n4. Modify `main.tf` file to configure Terraform, and create fullnode from Terraform module. Example content for `main.tf`:\n  ```\n  terraform {\n    required_version = \"~> 1.3.6\"\n    backend \"gcs\" {\n      bucket = \"BUCKET_NAME\" # bucket name created in step 2\n      prefix = \"state/aptos-node\"\n    }\n  }\n\n  module \"aptos-node\" {\n    # download Terraform module from aptos-labs/aptos-core repo\n    source        = \"github.com/aptos-labs/aptos-core.git//terraform/aptos-node/gcp?ref=mainnet\"\n    region        = \"us-central1\"  # Specify the region\n    zone          = \"c\"            # Specify the zone suffix\n    project       = \"\" # Specify your GCP project ID\n    era           = 1  # bump era number to wipe the chain\n    chain_id      = 1  # for mainnet. Use different value for testnet or devnet.\n    image_tag     = \"mainnet\" # Specify the docker image tag to use\n    validator_name = \"\"\n  }\n  ```\n\n  For the full customization options, see the variables file `variables.tf`, and the helm values.\n\n5. Initialize Terraform in the same directory of your `main.tf` file\n  ```bash\n  terraform init\n  ```\nThis will download all the Terraform dependencies for you, in the `.terraform` folder in your current working directory.\n\n6. Create a new Terraform workspace to isolate your environments:\n  ```bash\n  terraform workspace new $WORKSPACE\n  # This command will list all workspaces\n  terraform workspace list\n  ```\n\n7. Apply the configuration.\n\n  ```bash\n  terraform apply\n  ```\n\n  This might take a while to finish (10 - 20 minutes), Terraform will create all the resources on your cloud account. \n\n8. Once Terraform apply", "doc_id": "8efb4ba1-534a-48a2-9526-6e1bd5ec3c47", "embedding": null, "doc_hash": "1bed77b41d59568296de601e930ad56c04c06ee87fd337cf6fe8f9e46725c766", "extra_info": null, "node_info": {"start": 0, "end": 2909, "_node_type": "1"}, "relationships": {"1": "906a6d5c-31d4-40d6-8d2e-6b376231a80a", "3": "3e0f5c7d-1499-49d2-a125-c905a32cd639"}}, "__type__": "1"}, "3e0f5c7d-1499-49d2-a125-c905a32cd639": {"__data__": {"text": "will create all the resources on your cloud account. \n\n8. Once Terraform apply finishes, you can check if those resources are created:\n\n    - `gcloud container clusters get-credentials aptos-$WORKSPACE --zone  --project ` to configure the access for k8s cluster.\n    - `kubectl get pods` this should have haproxy, validator and fullnode. with validator and fullnode pod `pending` (require further action in later steps)\n    - `kubectl get svc` this should have `validator-lb` and `fullnode-lb`, with an external-IP you can share later for connectivity.\n\n9. Get your node IP info:\n\n    ```bash\n    export VALIDATOR_ADDRESS=\"$(kubectl get svc ${WORKSPACE}-aptos-node-0-validator-lb --output jsonpath='{.status.loadBalancer.ingress[0].ip}')\"\n\n    export FULLNODE_ADDRESS=\"$(kubectl get svc ${WORKSPACE}-aptos-node-0-fullnode-lb --output jsonpath='{.status.loadBalancer.ingress[0].ip}')\"\n    ```\n\n10. Generate the key pairs (node owner, voter, operator key, consensus key and networking key) in your working directory.\n\n    ```bash\n    aptos genesis generate-keys --output-dir ~/$WORKSPACE/keys\n    ```\n\n    This will create 4 key files under `~/$WORKSPACE/keys` directory: \n      - `public-keys.yaml`\n      - `private-keys.yaml`\n      - `validator-identity.yaml`, and\n      - `validator-full-node-identity.yaml`.\n      \n      :::danger IMPORTANT\n\n       Backup your `private-keys.yaml` somewhere safe. These keys are important for you to establish ownership of your node. **Never share private keys with anyone.**\n      :::\n\n11. Configure the validator information. \n\n    ```bash\n    aptos genesis set-validator-configuration \\\n      --local-repository-dir ~/$WORKSPACE \\\n      --username $USERNAME \\\n      --owner-public-identity-file ~/$WORKSPACE/keys/public-keys.yaml \\\n      --validator-host $VALIDATOR_ADDRESS:6180 \\\n      --full-node-host $FULLNODE_ADDRESS:6182 \\\n      --stake-amount 100000000000000\n\n    ```\n\n    This will create two YAML files in the `~/$WORKSPACE/$USERNAME` directory: `owner.yaml` and `operator.yaml`. \n\n12. Download the following files by following the download commands on the Node Files page:\n    - `genesis.blob`\n    - `waypoint.txt`\n\n13. To summarize, in your working directory you should have a list of files:\n    - `main.tf`: The Terraform files to install the `aptos-node` module (from steps 3 and 4).\n    - `keys` folder, which includes:\n      - `public-keys.yaml`: Public keys for the owner account, consensus, networking (from step 10).\n      - `private-keys.yaml`: Private keys for the owner account, consensus, networking (from step 10).\n      - `validator-identity.yaml`: Private keys for setting the Validator identity (from step 10).\n      - `validator-full-node-identity.yaml`: Private keys for setting validator full node identity (from step 10).\n    - `username` folder, which includes: \n      - `owner.yaml`: define owner, operator, and voter", "doc_id": "3e0f5c7d-1499-49d2-a125-c905a32cd639", "embedding": null, "doc_hash": "18db941450c1b4a9f6b70ba58134cda87930108c5a70d4d3791b95c297364bb3", "extra_info": null, "node_info": {"start": 2844, "end": 5731, "_node_type": "1"}, "relationships": {"1": "906a6d5c-31d4-40d6-8d2e-6b376231a80a", "2": "8efb4ba1-534a-48a2-9526-6e1bd5ec3c47", "3": "2a6a4d0a-198b-42dc-8e66-b57e17280b7f"}}, "__type__": "1"}, "2a6a4d0a-198b-42dc-8e66-b57e17280b7f": {"__data__": {"text": "    - `owner.yaml`: define owner, operator, and voter mapping. They are all the same account in test mode (from step 11).\n      - `operator.yaml`: Node information that will be used for both the Validator and the fullnode (from step 11). \n    - `waypoint.txt`: The waypoint for the genesis transaction (from step 12).\n    - `genesis.blob` The genesis binary that contains all the information about the framework, validatorSet and more (from step 12).\n\n14. Insert `genesis.blob`, `waypoint.txt` and the identity files as secret into k8s cluster.\n\n    ```bash\n    kubectl create secret generic ${WORKSPACE}-aptos-node-0-genesis-e1 \\\n        --from-file=genesis.blob=genesis.blob \\\n        --from-file=waypoint.txt=waypoint.txt \\\n        --from-file=validator-identity.yaml=keys/validator-identity.yaml \\\n        --from-file=validator-full-node-identity.yaml=keys/validator-full-node-identity.yaml\n    ```\n\n    :::tip\n    \n    The `-e1` suffix refers to the era number. If you changed the era number, make sure it matches when creating the secret.\n\n    :::\n\n15. Check that all pods are running.\n\n    ```bash\n    kubectl get pods\n\n    NAME                                        READY   STATUS    RESTARTS   AGE\n    node1-aptos-node-0-fullnode-e9-0              1/1     Running   0          4h31m\n    node1-aptos-node-0-haproxy-7cc4c5f74c-l4l6n   1/1     Running   0          4h40m\n    node1-aptos-node-0-validator-0                1/1     Running   0          4h30m\n    ```\n\nYou have successfully completed setting up your node. Make sure that you have set up one machine to run a validator node and a second machine to run a validator fullnode.\n\nNow proceed to connecting to the Aptos network and establishing staking pool operations.\n\n", "doc_id": "2a6a4d0a-198b-42dc-8e66-b57e17280b7f", "embedding": null, "doc_hash": "391ed99682fd3d8e6684cc1e5f43ad1a111904fdb96ee393635f58cd8d0099ed", "extra_info": null, "node_info": {"start": 5744, "end": 7478, "_node_type": "1"}, "relationships": {"1": "906a6d5c-31d4-40d6-8d2e-6b376231a80a", "2": "3e0f5c7d-1499-49d2-a125-c905a32cd639"}}, "__type__": "1"}, "d5b681a6-3923-4d2f-81e4-171f8932bd4f": {"__data__": {"text": "\n\nUsing Aptos-core source code\n\nThis is a step-by-step guide to install an Aptos node using source code. Follow these steps to configure a validator node and a validator fullnode on separate machines. Use the `fullnode.yaml` to run a validator fullnode&mdash;see Step 12.\n\n", "doc_id": "d5b681a6-3923-4d2f-81e4-171f8932bd4f", "embedding": null, "doc_hash": "b60122114843cca1481f4ce1271abf4a9be3e23969a12c067bac5cac542bb4b6", "extra_info": null, "node_info": {"start": 0, "end": 273, "_node_type": "1"}, "relationships": {"1": "1643f25b-bf8d-4019-a251-aad866b37a36"}}, "__type__": "1"}, "14eb1aef-2190-4085-8b91-74d270a2349d": {"__data__": {"text": "\n\nBefore you proceed\n\nMake sure the following are installed on your local computer:\n   - **Aptos CLI**: https://aptos.dev/tools/install-cli/index\n\n", "doc_id": "14eb1aef-2190-4085-8b91-74d270a2349d", "embedding": null, "doc_hash": "b504e4e7142afae0c8a719408e27da6a7294bd8550a28232659fa0ac05bf4b72", "extra_info": null, "node_info": {"start": 0, "end": 147, "_node_type": "1"}, "relationships": {"1": "a0ea7eea-2101-4f3d-a946-468ad4ad58bb"}}, "__type__": "1"}, "27618d07-ce5f-4f9d-9c36-3971f75950cb": {"__data__": {"text": "\n\nInstall\n\n:::tip One validator node + one validator fullnode\nFollow the below instructions **twice**, i.e., first on one machine to run a validator node and the second time on another machine to run a validator fullnode. \n:::\n\n1. Follow steps in Building Aptos From Source\n\n5. Checkout the `mainnet` branch using `git checkout --track origin/mainnet`.\n\n6. Create a directory for your Aptos node composition, and pick a username for your node. e.g.\n    ```bash\n    export WORKSPACE=mainnet\n    export USERNAME=alice\n    mkdir ~/$WORKSPACE\n    ```\n\n7. Generate the key pairs (node owner, voter, operator key, consensus key and networking key) in your working directory.\n\n    ```bash\n    aptos genesis generate-keys --output-dir ~/$WORKSPACE/keys\n    ```\n\n    This will create 4 key files under `~/$WORKSPACE/keys` directory: \n      - `public-keys.yaml`\n      - `private-keys.yaml`\n      - `validator-identity.yaml`, and\n      - `validator-full-node-identity.yaml`.\n      \n      :::danger IMPORTANT\n\n       Backup your `private-keys.yaml` somewhere safe. These keys are important for you to establish ownership of your node. **Never share private keys with anyone.**\n      :::\n\n8. Configure validator information. You need to setup a static IP / DNS address (DNS is much preferred) which can be used by the node, and make sure the network / firewalls are properly configured to accept external connections.\n\n    ```bash\n    cd ~/$WORKSPACE\n    aptos genesis set-validator-configuration \\\n        --local-repository-dir ~/$WORKSPACE \\\n        --username $USERNAME \\\n        --owner-public-identity-file ~/$WORKSPACE/keys/public-keys.yaml \\\n        --validator-host : \\\n        --full-node-host : \\\n        --stake-amount 100000000000000\n\n    # for example, with IP:\n\n    aptos genesis set-validator-configuration \\\n        --local-repository-dir ~/$WORKSPACE \\\n        --username $USERNAME \\\n        --owner-public-identity-file ~/$WORKSPACE/keys/public-keys.yaml \\\n        --validator-host 35.232.235.205:6180 \\\n        --full-node-host 34.135.169.144:6182 \\\n        --stake-amount 100000000000000\n\n    # For example, with DNS:\n\n    aptos genesis set-validator-configuration \\\n        --local-repository-dir ~/$WORKSPACE \\\n        --username $USERNAME \\\n        --owner-public-identity-file ~/$WORKSPACE/keys/public-keys.yaml \\\n        --validator-host bot.aptosdev.com:6180 \\\n        --full-node-host fn.bot.aptosdev.com:6182 \\\n        --stake-amount 100000000000000\n    ```\n\n    This will create two YAML files in the `~/$WORKSPACE/$USERNAME` directory: `owner.yaml` and `operator.yaml`. \n\n9. Download the following files by following the download commands on the Node Files page: \n   - `validator.yaml`\n   -", "doc_id": "27618d07-ce5f-4f9d-9c36-3971f75950cb", "embedding": null, "doc_hash": "7c8d3770c497894685b76eb3a8739a50f6e42a25409fd8f421855f3be89470d0", "extra_info": null, "node_info": {"start": 0, "end": 2708, "_node_type": "1"}, "relationships": {"1": "4a925ab7-8475-48cb-ba0e-a7072a5fc3c6", "3": "835f2f0c-ddb4-4244-84fc-3b7088d6acb3"}}, "__type__": "1"}, "835f2f0c-ddb4-4244-84fc-3b7088d6acb3": {"__data__": {"text": "the Node Files page: \n   - `validator.yaml`\n   - `fullnode.yaml`\n   - `genesis.blob`\n   - `waypoint.txt`\n   - `haproxy.cfg`\n   - `haproxy-fullnode.cfg` and\n   - `blocked.ips`\n   - `docker-compose-src.yaml`\n\n10. Copy the `validator.yaml`, `fullnode.yaml` files into ~/$WORKSPACE/config/ directory.\n    ```bash\n    mkdir ~/$WORKSPACE/config\n    cp validator.yaml ~/$WORKSPACE/config/validator.yaml\n    cp fullnode.yaml ~/$WORKSPACE/config/fullnode.yaml\n    ```\n\n    Modify the config files to update the data directory, key path, genesis file path, waypoint path. User must have write access to data directory.\n\n11. To recap, in your working directory (`~/$WORKSPACE`), you should have a list of files:\n\n    - `config` folder containing:\n      - `validator.yaml` validator config file\n      - `fullnode.yaml` fullnode config file\n    - `keys` folder containing:\n      - `public-keys.yaml`: Public keys for the owner account, consensus, networking (from step 7).\n      - `private-keys.yaml`: Private keys for the owner account, consensus, networking (from step 7).\n      - `validator-identity.yaml`: Private keys for setting the Validator identity (from step 7).\n      - `validator-full-node-identity.yaml`: Private keys for setting validator full node identity (from step 7).\n    - `username` folder containing: \n      - `owner.yaml`: Define owner, operator, and voter mapping. They are all the same account in test mode (from step 8).\n      - `operator.yaml`: Node information that will be used for both the Validator and the fullnode (from step 8). \n    - `waypoint.txt`: The waypoint for the genesis transaction (from step 9).\n    - `genesis.blob` The genesis binary that contains all the information about the framework, validatorSet and more (from step 9).\n\n12. Start your validator by running the below commands, with the paths assuming you are in the root of the `aptos-core` directory:\n\n    ```bash\n    cargo clean\n    cargo build -p aptos-node --release\n    sudo mv target/release/aptos-node /usr/local/bin\n    aptos-node -f ~/$WORKSPACE/config/validator.yaml\n    ```\n\n    Run validator fullnode on **another machine**:\n\n    ```bash\n    cargo clean\n    cargo build -p aptos-node --release\n    sudo mv target/release/aptos-node /usr/local/bin\n    aptos-node -f ~/$WORKSPACE/config/fullnode.yaml\n    ```\n\nOptionally, you may set up `aptos-node` to run as a service controlled by `systemctl` in a file resembling:\n\n```bash\n[Unit]\nDescription=Aptos Node Service\n\n[Service]\nUser=nodeuser\nGroup=nodeuser\n\nLimitNOFILE=500000\n\n#Environment=\"RUST_LOG=error\"\nWorkingDirectory=/home/nodeuser/aptos-core\nExecStart=/usr/local/bin/aptos-node -f /home/nodeuser/aptos-mainnet/config/validator.yaml\n\nRestart=on-failure\nRestartSec=3s\n\nStandardOutput=journal\nStandardError=journal\nSyslogIdentifier=aptos-node\n\n[Install]\nWantedBy=multi-user.target\n```\n\nYou have completed setting up your node.\n\nNow proceed to connecting to the", "doc_id": "835f2f0c-ddb4-4244-84fc-3b7088d6acb3", "embedding": null, "doc_hash": "f34e3feed4d3585bc1fcd5576fcb1ecd763c186eab3d7ef31af845aa0f1abdb7", "extra_info": null, "node_info": {"start": 2672, "end": 5586, "_node_type": "1"}, "relationships": {"1": "4a925ab7-8475-48cb-ba0e-a7072a5fc3c6", "2": "27618d07-ce5f-4f9d-9c36-3971f75950cb", "3": "18f87ee0-0851-4d26-9eb7-6c9a6286e5bc"}}, "__type__": "1"}, "18f87ee0-0851-4d26-9eb7-6c9a6286e5bc": {"__data__": {"text": "have completed setting up your node.\n\nNow proceed to connecting to the Aptos network and establishing staking pool operations.\n", "doc_id": "18f87ee0-0851-4d26-9eb7-6c9a6286e5bc", "embedding": null, "doc_hash": "eaa44eaa48f04f64f14b3de5ab47b8c486248aa97081efb180a010870d757ae9", "extra_info": null, "node_info": {"start": 5553, "end": 5680, "_node_type": "1"}, "relationships": {"1": "4a925ab7-8475-48cb-ba0e-a7072a5fc3c6", "2": "835f2f0c-ddb4-4244-84fc-3b7088d6acb3"}}, "__type__": "1"}, "5f355cb6-731d-4175-b4bf-6f8e39e000a0": {"__data__": {"text": "\n\nRun a Validator\n\nTo participate in the consensus process in the Aptos mainnet, you must deploy and run a validator node and a validator fullnode. Optionally you can also run a public fullnode. This document presents a high-level conceptual overview of the important steps involved in deploying the nodes for validation.\n\nBefore initializing a staking pool or delegation pool, read about Staking and Delegated Staking to learn the difference between the stake pool types. Note that once a stake pool has been created, it cannot be changed to a delegation pool or vice versa. \n\nSee also the external resources for tools and services offered by your fellow node operators.\n\n\n\n\n    \n    \n     1\n    Read the node requirements.\n    Select a deployment method. Use on-premises or cloud services.\n\n\n\n  \n    \n    \n     2\n    Generate identity for nodes.\n    Account address and private and public keys come to exist.\n\n\n\n  \n  \n    \n     3\n    Configure validator and validator fullnode.\n    Establishes network identity for the nodes. Ready to handshake with other nodes.\n\n\n\n\n  \n    \n     4\n    Insert genesis and waypoint to start the nodes.\n    Bootstrapped the nodes. Aptos network becomes aware of the nodes.\n\n\n\n\n  \n    \n     5\n    Join the validator set.\n    Initialize staking pool, bootstrap in production mode, start syncing. Begin validating and earn rewards.\n\n\n\n\n\n\nFollow the documents within this section to run a validator node and a validator fullnode in Aptos. Here is a summary of the process:\n\n1. Start by reading the node requirements to get to know the compute, memory and storage resources you need. Note also the internet bandwidth requirements. \n1. Select a method to deploy your nodes, i.e., use a cloud managed Kubernetes, Docker, or source code.\n1. Generate identity for the nodes. This is the first step in progressively making your nodes secure and ready to be integrated into the Aptos network. \n1. Using YAML files, configure your nodes with user and network identity. This step enables the nodes to be recognized by other nodes in the Aptos network. Handshaking is possible after this step.  \n1. With the node identity established for the Aptos network, next you install the necessary binaries and locally generate the genesis blob and waypoint files. These will allow the node to be connected to the Aptos network. \n1. Bootstrap the nodes. The nodes now have the Aptos node binary running on them with the identity set. This fulfills the requirement for the Aptos network to become aware of your nodes. However, your nodes cannot connect to the Aptos network yet because these nodes are not yet in the validator set. On the Aptos network a validator can only accept another validator for connections. Until your nodes are in the validator set, they will be rejected by other validator nodes on the network. \n1. Perform the required actions before joining the validator set. For this, you must perform a few tasks such as initializing a staking pool, delegating to operators and voters, downloading the latest versions of the genesis blob and waypoint text files and restarting your nodes. \n1. Join the validator set. Other nodes will see your nodes and will establish connection to your nodes. Now you can stay in sync with the Aptos blockchain by building up your database of the history of the ledger. It takes some time for your nodes to build the database. Whenever your nodes reach the latest version of the blockchain, your validator node will be able to start participating in the consensus process.\n\n\n", "doc_id": "5f355cb6-731d-4175-b4bf-6f8e39e000a0", "embedding": null, "doc_hash": "bbd2674546815d265d2e185d5e3ccca744c1b6cb1e3a9014c0f252205591d9d8", "extra_info": null, "node_info": {"start": 0, "end": 3532, "_node_type": "1"}, "relationships": {"1": "0a4b4bbc-1134-4f2c-8da5-79e8cd8c71f4"}}, "__type__": "1"}, "5e08349a-fb36-4990-b6cc-ec00517f6cd9": {"__data__": {"text": "\n\nOverview\n\nWhen a transaction is submitted to the Aptos blockchain, validator nodes run a distributed consensus protocol, execute the transaction, and store the transaction and the execution results on the blockchain. Validator nodes decide which transactions will be added to the blockchain and in which order.\n\nThe Aptos blockchain uses a Byzantine Fault Tolerance (BFT) consensus protocol for validator nodes to agree on the ledger of finalized transactions and their execution results. Validator nodes process these transactions and include them in their local copy of the blockchain database. This means that up-to-date validator nodes always maintain a copy of the current state of the blockchain, locally.\n\nValidator nodes communicate directly with other validator nodes over a private network. Fullnodes are an external validation and/or dissemination resource for the finalized transaction history. They receive transactions from peers and may re-execute them locally (the same way a validator executes transactions). Fullnodes store the results of re-executed transactions to local storage. In doing so, they can challenge any foul-play by validators and provide evidence if there is any attempt to re-write or modify the blockchain history. This helps to mitigate against validator corruption and/or collusion.\n\n\nThe AptosBFT consensus protocol provides fault tolerance of up to one-third of malicious validator nodes.\n\n\n", "doc_id": "5e08349a-fb36-4990-b6cc-ec00517f6cd9", "embedding": null, "doc_hash": "a401e4d62e5d92bb55a24ace871cbefb3f1c2288559c671749f7bbb3e89716b0", "extra_info": null, "node_info": {"start": 0, "end": 1433, "_node_type": "1"}, "relationships": {"1": "66a9ebb8-2d7d-4033-944f-31dfa035e3f4"}}, "__type__": "1"}, "e2c10ae7-4391-461e-af2f-1b10610c4688": {"__data__": {"text": "\n\nValidator node components\n\n!validator.svg\n", "doc_id": "e2c10ae7-4391-461e-af2f-1b10610c4688", "embedding": null, "doc_hash": "9c68210fc991a7f6294249cc81c0223bb384bfbb7021c46145cd5341a3e2eb66", "extra_info": null, "node_info": {"start": 0, "end": 44, "_node_type": "1"}, "relationships": {"1": "7f36b59e-7a17-4a2a-9c87-d2c46ce144b5"}}, "__type__": "1"}, "96225bdf-9956-4e65-99a6-d9ef34e41676": {"__data__": {"text": "\n\nMempool\n\nMempool is a component within each node that holds an in-memory buffer of transactions that have been submitted to the blockchain, but not yet agreed upon or executed. This buffer is replicated between validator nodes and fullnodes.\n\nThe JSON-RPC service of a fullnode sends transactions to a validator node's mempool. Mempool performs various checks on the transactions to ensure transaction validity and protect against DOS attacks. When a new transaction passes initial verification and is added to mempool, it is then distributed to the mempools of other validator nodes in the network.\n\nWhen a validator node temporarily becomes a leader in the consensus protocol, consensus pulls the transactions from mempool and proposes a new transaction block. This block is broadcasted to other validators and contains a total ordering over all transactions in the block. Each validator then executes the block and submits votes on whether or not to accept the new block proposal.\n\n", "doc_id": "96225bdf-9956-4e65-99a6-d9ef34e41676", "embedding": null, "doc_hash": "4c60fe104506855f4f5216a0b80ca0935e8f5a02a1bdaa29689dc1fa684d5218", "extra_info": null, "node_info": {"start": 0, "end": 987, "_node_type": "1"}, "relationships": {"1": "fee04062-d9e9-4f4e-93b3-0b3c0b7fd57a"}}, "__type__": "1"}, "5c6c28e3-6719-4d2e-883f-7f2b29dd3921": {"__data__": {"text": "\n\nConsensus\n\nConsensus is the component that is responsible for ordering blocks of transactions and agreeing on the results of execution by participating in the consensus protocol with other validator nodes in the network.\n\n", "doc_id": "5c6c28e3-6719-4d2e-883f-7f2b29dd3921", "embedding": null, "doc_hash": "78a53149ea29db6bfedf46a0fef181f83914ddd92d3cc15d06cf58ed2ef408ac", "extra_info": null, "node_info": {"start": 0, "end": 224, "_node_type": "1"}, "relationships": {"1": "d4eedcf5-8f83-4f80-99bd-760fb2e0a8f5"}}, "__type__": "1"}, "63f2a70d-b1bb-4073-8cd0-c5ea6fe4039b": {"__data__": {"text": "\n\nExecution\n\nExecution is the component that coordinates the execution of a block of transactions and maintains a transient state. Consensus votes on this transient state. Execution maintains an in-memory representation of the execution results until consensus commits the block to the distributed database. Execution uses the virtual machine to execute transactions. Execution acts as the glue layer between the inputs of the system (represented by transactions), storage (providing a persistency layer), and the virtual machine (for execution).\n\n", "doc_id": "63f2a70d-b1bb-4073-8cd0-c5ea6fe4039b", "embedding": null, "doc_hash": "1beadba9209f46c25623acc9ee721b879f1e714e3e3a86ead67975d29b7f7eae", "extra_info": null, "node_info": {"start": 0, "end": 548, "_node_type": "1"}, "relationships": {"1": "8eac5dbe-53b8-494d-acfc-2d24367a9cb0"}}, "__type__": "1"}, "f0872759-3614-4332-ac74-eaed71a29c9f": {"__data__": {"text": "\n\nVirtual machine (VM)\n\nThe virtual machine (VM) is used to run the Move program within each transaction and determine execution results. A node's mempool uses the VM to perform verification checks on transactions, while execution uses the VM to execute transactions.\n\n", "doc_id": "f0872759-3614-4332-ac74-eaed71a29c9f", "embedding": null, "doc_hash": "b430491fa85c1d4402f19a99f73dd6803c3444ee636e7b96330d4be3d7f82759", "extra_info": null, "node_info": {"start": 0, "end": 269, "_node_type": "1"}, "relationships": {"1": "50a69a24-dd76-4846-b447-9e97b867e21e"}}, "__type__": "1"}, "640c4f9c-613a-401b-a11a-9b0fd1254400": {"__data__": {"text": "\n\nStorage\n\nThe storage component is used to persist agreed upon blocks of transactions and their execution results to the local database.\n\n", "doc_id": "640c4f9c-613a-401b-a11a-9b0fd1254400", "embedding": null, "doc_hash": "9ff8f1f2829ed701accf609862602eccb28d46939367918ff6e8f8107a2dd5ca", "extra_info": null, "node_info": {"start": 0, "end": 139, "_node_type": "1"}, "relationships": {"1": "73f32951-5420-4e3e-959b-c1e71c864935"}}, "__type__": "1"}, "2363ae16-c968-4dc0-8c13-a65f2944ff36": {"__data__": {"text": "\n\nState synchronizer\n\nNodes use their state synchronizer component to \u201ccatch up\u201d to the latest state of the blockchain and stay up-to-date.\n\n", "doc_id": "2363ae16-c968-4dc0-8c13-a65f2944ff36", "embedding": null, "doc_hash": "7fc3cbd2de47203420f937a69c06059a1718ccf860812fd663f77f5f97b867c2", "extra_info": null, "node_info": {"start": 0, "end": 141, "_node_type": "1"}, "relationships": {"1": "e7009818-9d87-4b7d-b982-10ca75472538"}}, "__type__": "1"}, "6b62e60c-f904-46f4-8977-445abb028091": {"__data__": {"text": "\n\nLocal Variables and Scope\n\nLocal variables in Move are lexically (statically) scoped. New variables are introduced with the\nkeyword `let`, which will shadow any previous local with the same name. Locals are mutable and can\nbe updated both directly and via a mutable reference.\n\n", "doc_id": "6b62e60c-f904-46f4-8977-445abb028091", "embedding": null, "doc_hash": "802711d2d624eaa8342908575ee5791a97fcef237aba847af655ab90bb9120af", "extra_info": null, "node_info": {"start": 0, "end": 280, "_node_type": "1"}, "relationships": {"1": "8a2aa7c1-5de2-4928-9b30-79be88185d29"}}, "__type__": "1"}, "2ffae7a9-2fd9-4e76-bf41-38eb7c22eadd": {"__data__": {"text": "\n\nDeclaring Local Variables\n\n", "doc_id": "2ffae7a9-2fd9-4e76-bf41-38eb7c22eadd", "embedding": null, "doc_hash": "b484f08336c7bd438a842eaa8395b306d23ac51d23158cfdf2bda6ca76a9d69e", "extra_info": null, "node_info": {"start": 0, "end": 29, "_node_type": "1"}, "relationships": {"1": "77e6d8b0-5302-4c9a-9962-bba9057c5ab9"}}, "__type__": "1"}, "09443a1f-4958-4b00-8149-8a211c93d123": {"__data__": {"text": "\n\n`let` bindings\n\nMove programs use `let` to bind variable names to values:\n\n```move\nlet x = 1;\nlet y = x + x:\n```\n\n`let` can also be used without binding a value to the local.\n\n```move\nlet x;\n```\n\nThe local can then be assigned a value later.\n\n```move\nlet x;\nif (cond) {\n  x = 1\n} else {\n  x = 0\n}\n```\n\nThis can be very helpful when trying to extract a value from a loop when a default value cannot be\nprovided.\n\n```move\nlet x;\nlet cond = true;\nlet i = 0;\nloop {\n    (x, cond) = foo(i);\n    if (!cond) break;\n    i = i + 1;\n}\n```\n\n", "doc_id": "09443a1f-4958-4b00-8149-8a211c93d123", "embedding": null, "doc_hash": "a6b43e85a5be8d3a403a91d03aa62f855f2b33bad9fe24c2dda6e5ad73fd7bfd", "extra_info": null, "node_info": {"start": 0, "end": 532, "_node_type": "1"}, "relationships": {"1": "f0bbbd54-e161-42dc-9909-5ce62ec548c5"}}, "__type__": "1"}, "71bc19a5-d4b2-4dfb-a813-75e5cfbb1497": {"__data__": {"text": "\n\nVariables must be assigned before use\n\nMove's type system prevents a local variable from being used before it has been assigned.\n\n```move\nlet x;\nx + x // ERROR!\n```\n\n```move\nlet x;\nif (cond) x = 0;\nx + x // ERROR!\n```\n\n```move\nlet x;\nwhile (cond) x = 0;\nx + x // ERROR!\n```\n\n", "doc_id": "71bc19a5-d4b2-4dfb-a813-75e5cfbb1497", "embedding": null, "doc_hash": "1324c096f6b4f401241c02f5bc2e859c3848332c49869d3b28c3dc0b7c30904c", "extra_info": null, "node_info": {"start": 0, "end": 277, "_node_type": "1"}, "relationships": {"1": "dd9de3db-2f73-4134-a1f2-617527889fef"}}, "__type__": "1"}, "c6f490c0-acc3-476b-8730-f28773cc2272": {"__data__": {"text": "\n\nValid variable names\n\nVariable names can contain underscores `_`, letters `a` to `z`, letters `A` to `Z`, and digits `0`\nto `9`. Variable names must start with either an underscore `_` or a letter `a` through `z`. They\n_cannot_ start with uppercase letters.\n\n```move\n// all valid\nlet x = e;\nlet _x = e;\nlet _A = e;\nlet x0 = e;\nlet xA = e;\nlet foobar_123 = e;\n\n// all invalid\nlet X = e; // ERROR!\nlet Foo = e; // ERROR!\n```\n\n", "doc_id": "c6f490c0-acc3-476b-8730-f28773cc2272", "embedding": null, "doc_hash": "3f208ef5047aca2121e9881fefc5212f521e5ae7fcb78764da755aa63ae1e72f", "extra_info": null, "node_info": {"start": 0, "end": 426, "_node_type": "1"}, "relationships": {"1": "67a7f74a-fde1-4848-aab8-bcf4f864ec87"}}, "__type__": "1"}, "f765e994-25ae-4ac4-8970-6be95a4c8349": {"__data__": {"text": "\n\nType annotations\n\nThe type of a local variable can almost always be inferred by Move's type system. However, Move\nallows explicit type annotations that can be useful for readability, clarity, or debuggability. The\nsyntax for adding a type annotation is:\n\n```move\nlet x: T = e; // \"Variable x of type T is initialized to expression e\"\n```\n\nSome examples of explicit type annotations:\n\n```move\naddress 0x42 {\nmodule example {\n\n    struct S { f: u64, g: u64 }\n\n    fun annotated() {\n        let u: u8 = 0;\n        let b: vector = b\"hello\";\n        let a: address = @0x0;\n        let (x, y): (&u64, &mut u64) = (&0, &mut 1);\n        let S { f, g: f2 }: S = S { f: 0, g: 1 };\n    }\n}\n}\n```\n\nNote that the type annotations must always be to the right of the pattern:\n\n```move\nlet (x: &u64, y: &mut u64) = (&0, &mut 1); // ERROR! should be let (x, y): ... =\n```\n\n", "doc_id": "f765e994-25ae-4ac4-8970-6be95a4c8349", "embedding": null, "doc_hash": "7fcf4af551bf05e349bd23759237fbbe83f6112fad6e09451ace5b25211c66fa", "extra_info": null, "node_info": {"start": 0, "end": 858, "_node_type": "1"}, "relationships": {"1": "bf952e89-2bf4-4e7b-8cf0-a415f6c47131"}}, "__type__": "1"}, "9a2e7cc4-1a03-4596-bd09-495f62b75938": {"__data__": {"text": "\n\nWhen annotations are necessary\n\nIn some cases, a local type annotation is required if the type system cannot infer the type. This\ncommonly occurs when the type argument for a generic type cannot be inferred. For example:\n\n```move\nlet _v1 = vector::empty(); // ERROR!\n//        ^^^^^^^^^^^^^^^ Could not infer this type. Try adding an annotation\nlet v2: vector = vector::empty(); // no error\n```\n\nIn a rarer case, the type system might not be able to infer a type for divergent code (where all the\nfollowing code is unreachable). Both `return` and `abort` are expressions\nand can have any type. A `loop` has type `()` if it has a `break`, but if there is no\nbreak out of the `loop`, it could have any type. If these types cannot be inferred, a type\nannotation is required. For example, this code:\n\n```move\nlet a: u8 = return ();\nlet b: bool = abort 0;\nlet c: signer = loop ();\n\nlet x = return (); // ERROR!\n//  ^ Could not infer this type. Try adding an annotation\nlet y = abort 0; // ERROR!\n//  ^ Could not infer this type. Try adding an annotation\nlet z = loop (); // ERROR!\n//  ^ Could not infer this type. Try adding an annotation\n```\n\nAdding type annotations to this code will expose other errors about dead code or unused local\nvariables, but the example is still helpful for understanding this problem.\n\n", "doc_id": "9a2e7cc4-1a03-4596-bd09-495f62b75938", "embedding": null, "doc_hash": "9e59f09f8f3cdad49743ae15bef3ad1d1c89423976cc7ab5bdf3871fd2d27c59", "extra_info": null, "node_info": {"start": 0, "end": 1312, "_node_type": "1"}, "relationships": {"1": "87cb8f35-a6fe-40fd-825f-c0bdc8106d9f"}}, "__type__": "1"}, "d9852cf3-5ba7-4313-a173-9e94b45c192a": {"__data__": {"text": "\n\nMultiple declarations with tuples\n\n`let` can introduce more than one local at a time using tuples. The locals declared inside the\nparenthesis are initialized to the corresponding values from the tuple.\n\n```move\nlet () = ();\nlet (x0, x1) = (0, 1);\nlet (y0, y1, y2) = (0, 1, 2);\nlet (z0, z1, z2, z3) = (0, 1, 2, 3);\n```\n\nThe type of the expression must match the arity of the tuple pattern exactly.\n\n```move\nlet (x, y) = (0, 1, 2); // ERROR!\nlet (x, y, z, q) = (0, 1, 2); // ERROR!\n```\n\nYou cannot declare more than one local with the same name in a single `let`.\n\n```move\nlet (x, x) = 0; // ERROR!\n```\n\n", "doc_id": "d9852cf3-5ba7-4313-a173-9e94b45c192a", "embedding": null, "doc_hash": "b6e44cb4a581e7512c456ba535f085d04b2eaf90063ca654c783efa604c58c14", "extra_info": null, "node_info": {"start": 0, "end": 604, "_node_type": "1"}, "relationships": {"1": "bc08992e-48bb-4a55-b67d-7090e3ca19e1"}}, "__type__": "1"}, "0bd39614-36c2-42d3-befc-06268c1a1cdc": {"__data__": {"text": "\n\nMultiple declarations with structs\n\n`let` can also introduce more than one local at a time when destructuring (or matching against) a\nstruct. In this form, the `let` creates a set of local variables that are initialized to the values\nof the fields from a struct. The syntax looks like this:\n\n```move\nstruct T { f1: u64, f2: u64 }\n```\n\n```move\nlet T { f1: local1, f2: local2 } = T { f1: 1, f2: 2 };\n// local1: u64\n// local2: u64\n```\n\nHere is a more complicated example:\n\n```move\naddress 0x42 {\nmodule example {\n    struct X { f: u64 }\n    struct Y { x1: X, x2: X }\n\n    fun new_x(): X {\n        X { f: 1 }\n    }\n\n    fun example() {\n        let Y { x1: X { f }, x2 } = Y { x1: new_x(), x2: new_x() };\n        assert!(f + x2.f == 2, 42);\n\n        let Y { x1: X { f: f1 }, x2: X { f: f2 } } = Y { x1: new_x(), x2: new_x() };\n        assert!(f1 + f2 == 2, 42);\n    }\n}\n}\n```\n\nFields of structs can serve double duty, identifying the field to bind _and_ the name of the\nvariable. This is sometimes referred to as punning.\n\n```move\nlet X { f } = e;\n```\n\nis equivalent to:\n\n```move\nlet X { f: f } = e;\n```\n\nAs shown with tuples, you cannot declare more than one local with the same name in a single `let`.\n\n```move\nlet Y { x1: x, x2: x } = e; // ERROR!\n```\n\n", "doc_id": "0bd39614-36c2-42d3-befc-06268c1a1cdc", "embedding": null, "doc_hash": "8f12e2ddc8a2bacdd1111f5574fd6935628b93707164d9af02eb616a7b24efc5", "extra_info": null, "node_info": {"start": 0, "end": 1253, "_node_type": "1"}, "relationships": {"1": "5f99039b-bd1d-492a-ac3e-ee13446c2aba"}}, "__type__": "1"}, "b1dc4539-5b2a-468e-a2bc-599f8bd9602b": {"__data__": {"text": "\n\nDestructuring against references\n\nIn the examples above for structs, the bound value in the let was moved, destroying the struct value\nand binding its fields.\n\n```move\nstruct T { f1: u64, f2: u64 }\n```\n\n```move\nlet T { f1: local1, f2: local2 } = T { f1: 1, f2: 2 };\n// local1: u64\n// local2: u64\n```\n\nIn this scenario the struct value `T { f1: 1, f2: 2 }` no longer exists after the `let`.\n\nIf you wish instead to not move and destroy the struct value, you can borrow each of its fields. For\nexample:\n\n```move\nlet t = T { f1: 1, f2: 2 };\nlet T { f1: local1, f2: local2 } = &t;\n// local1: &u64\n// local2: &u64\n```\n\nAnd similarly with mutable references:\n\n```move\nlet t = T { f1: 1, f2: 2 };\nlet T { f1: local1, f2: local2 } = &mut t;\n// local1: &mut u64\n// local2: &mut u64\n```\n\nThis behavior can also work with nested structs.\n\n```move\naddress 0x42 {\nmodule example {\n    struct X { f: u64 }\n    struct Y { x1: X, x2: X }\n\n    fun new_x(): X {\n        X { f: 1 }\n    }\n\n    fun example() {\n        let y = Y { x1: new_x(), x2: new_x() };\n\n        let Y { x1: X { f }, x2 } = &y;\n        assert!(*f + x2.f == 2, 42);\n\n        let Y { x1: X { f: f1 }, x2: X { f: f2 } } = &mut y;\n        *f1 = *f1 + 1;\n        *f2 = *f2 + 1;\n        assert!(*f1 + *f2 == 4, 42);\n    }\n}\n}\n```\n\n", "doc_id": "b1dc4539-5b2a-468e-a2bc-599f8bd9602b", "embedding": null, "doc_hash": "8804f6ceb0ae5327906c05f66c24481d5b29bc5541a675e32be3534d5acb8758", "extra_info": null, "node_info": {"start": 0, "end": 1278, "_node_type": "1"}, "relationships": {"1": "6d98052f-d0e6-4008-b556-ba61fa988b34"}}, "__type__": "1"}, "cefbf7a8-6b14-46e6-9539-ed31ee66633d": {"__data__": {"text": "\n\nIgnoring Values\n\nIn `let` bindings, it is often helpful to ignore some values. Local variables that start with `_`\nwill be ignored and not introduce a new variable\n\n```move\nfun three(): (u64, u64, u64) {\n    (0, 1, 2)\n}\n```\n\n```move\nlet (x1, _, z1) = three();\nlet (x2, _y, z2) = three();\nassert!(x1 + z1 == x2 + z2, 42);\n```\n\nThis can be necessary at times as the compiler will error on unused local variables\n\n```move\nlet (x1, y, z1) = three(); // ERROR!\n//       ^ unused local 'y'\n```\n\n", "doc_id": "cefbf7a8-6b14-46e6-9539-ed31ee66633d", "embedding": null, "doc_hash": "6032c80b1fbce8ef7a1eecd6c75647d1855737aeff699fb6277953821a2d2caa", "extra_info": null, "node_info": {"start": 0, "end": 491, "_node_type": "1"}, "relationships": {"1": "9d62d84f-c614-419d-94aa-bbf2d17c286f"}}, "__type__": "1"}, "63cad995-66d6-43b8-8b24-6a0cb5b64859": {"__data__": {"text": "\n\nGeneral `let` grammar\n\nAll of the different structures in `let` can be combined! With that we arrive at this general\ngrammar for `let` statements:\n\n> _let-binding_ \u2192 **let** _pattern-or-list_ _type-annotation__opt_\n> _initializer__opt_ > _pattern-or-list_ \u2192 _pattern_ | **(** _pattern-list_ **)** >\n> _pattern-list_ \u2192 _pattern_ **,**_opt_ | _pattern_ **,** _pattern-list_ >\n> _type-annotation_ \u2192 **:** _type_ _initializer_ \u2192 **=** _expression_\n\nThe general term for the item that introduces the bindings is a _pattern_. The pattern serves to\nboth destructure data (possibly recursively) and introduce the bindings. The pattern grammar is as\nfollows:\n\n> _pattern_ \u2192 _local-variable_ | _struct-type_ **{** _field-binding-list_ **}** >\n> _field-binding-list_ \u2192 _field-binding_ **,**_opt_ | _field-binding_ **,**\n> _field-binding-list_ > _field-binding_ \u2192 _field_ | _field_ **:** _pattern_\n\nA few concrete examples with this grammar applied:\n\n```move\n    let (x, y): (u64, u64) = (0, 1);\n//       ^                           local-variable\n//       ^                           pattern\n//          ^                        local-variable\n//          ^                        pattern\n//          ^                        pattern-list\n//       ^^^^                        pattern-list\n//      ^^^^^^                       pattern-or-list\n//            ^^^^^^^^^^^^           type-annotation\n//                         ^^^^^^^^  initializer\n//  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ let-binding\n\n    let Foo { f, g: x } = Foo { f: 0, g: 1 };\n//      ^^^                                    struct-type\n//            ^                                field\n//            ^                                field-binding\n//               ^                             field\n//                  ^                          local-variable\n//                  ^                          pattern\n//               ^^^^                       ", "doc_id": "63cad995-66d6-43b8-8b24-6a0cb5b64859", "embedding": null, "doc_hash": "a754190f26a69ae77ba902dd675f5ad6a25e42a35d4374aa893dc8336d5c70a6", "extra_info": null, "node_info": {"start": 0, "end": 1918, "_node_type": "1"}, "relationships": {"1": "6df539b4-6169-4b1a-97fe-d94cd4f30b6c", "3": "8c079ec6-d4ff-48ca-b6ab-b6f562a23b8a"}}, "__type__": "1"}, "8c079ec6-d4ff-48ca-b6ab-b6f562a23b8a": {"__data__": {"text": "                      field-binding\n//            ^^^^^^^                          field-binding-list\n//      ^^^^^^^^^^^^^^^                        pattern\n//      ^^^^^^^^^^^^^^^                        pattern-or-list\n//                      ^^^^^^^^^^^^^^^^^^^^   initializer\n//  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ let-binding\n```\n\n", "doc_id": "8c079ec6-d4ff-48ca-b6ab-b6f562a23b8a", "embedding": null, "doc_hash": "abad916364acd8e222d1d4c354fb858125f6d9f4dcfa7d961b55fd1fdc0e4ff1", "extra_info": null, "node_info": {"start": 1899, "end": 2242, "_node_type": "1"}, "relationships": {"1": "6df539b4-6169-4b1a-97fe-d94cd4f30b6c", "2": "63cad995-66d6-43b8-8b24-6a0cb5b64859"}}, "__type__": "1"}, "4d94d903-2506-4918-bc38-924812f2c211": {"__data__": {"text": "\n\nMutations\n\n", "doc_id": "4d94d903-2506-4918-bc38-924812f2c211", "embedding": null, "doc_hash": "df869de4b06c12861fe2e29f710f1a443306212dbb8a5f09f553f009ae347395", "extra_info": null, "node_info": {"start": 0, "end": 13, "_node_type": "1"}, "relationships": {"1": "4e1c1368-a13d-4141-b95e-c4d5f873ff2e"}}, "__type__": "1"}, "9f42217d-9e8f-4576-a5f9-90931ec18875": {"__data__": {"text": "\n\nAssignments\n\nAfter the local is introduced (either by `let` or as a function parameter), the local can be\nmodified via an assignment:\n\n```move\nx = e\n```\n\nUnlike `let` bindings, assignments are expressions. In some languages, assignments return the value\nthat was assigned, but in Move, the type of any assignment is always `()`.\n\n```move\n(x = e: ())\n```\n\nPractically, assignments being expressions means that they can be used without adding a new\nexpression block with braces (`{`...`}`).\n\n```move\nlet x = 0;\nif (cond) x = 1 else x = 2;\n```\n\nThe assignment uses the same pattern syntax scheme as `let` bindings:\n\n```move\naddress 0x42 {\nmodule example {\n    struct X { f: u64 }\n\n    fun new_x(): X {\n        X { f: 1 }\n    }\n\n    // This example will complain about unused variables and assignments.\n    fun example() {\n       let (x, _, z) = (0, 1, 3);\n       let (x, y, f, g);\n\n       (X { f }, X { f: x }) = (new_x(), new_x());\n       assert!(f + x == 2, 42);\n\n       (x, y, z, f, _, g) = (0, 0, 0, 0, 0, 0);\n    }\n}\n}\n```\n\nNote that a local variable can only have one type, so the type of the local cannot change between\nassignments.\n\n```move\nlet x;\nx = 0;\nx = false; // ERROR!\n```\n\n", "doc_id": "9f42217d-9e8f-4576-a5f9-90931ec18875", "embedding": null, "doc_hash": "68fe4c240adacdc4c7d469986bfd8adc5b3bf1f0781540bbf6fb2d06c1f39f3c", "extra_info": null, "node_info": {"start": 0, "end": 1188, "_node_type": "1"}, "relationships": {"1": "812c67d5-460e-4140-9919-e587f6e1b2b7"}}, "__type__": "1"}, "acbf7747-2575-4b28-99fc-053af0aac528": {"__data__": {"text": "\n\nMutating through a reference\n\nIn addition to directly modifying a local with assignment, a local can be modified via a mutable\nreference `&mut`.\n\n```move\nlet x = 0;\nlet r = &mut x;\n*r = 1;\nassert!(x == 1, 42);\n```\n\nThis is particularly useful if either:\n\n(1) You want to modify different variables depending on some condition.\n\n```move\nlet x = 0;\nlet y = 1;\nlet r = if (cond) &mut x else &mut y;\n*r = *r + 1;\n```\n\n(2) You want another function to modify your local value.\n\n```move\nlet x = 0;\nmodify_ref(&mut x);\n```\n\nThis sort of modification is how you modify structs and vectors!\n\n```move\nlet v = vector::empty();\nvector::push_back(&mut v, 100);\nassert!(*vector::borrow(&v, 0) == 100, 42);\n```\n\nFor more details, see Move references.\n\n", "doc_id": "acbf7747-2575-4b28-99fc-053af0aac528", "embedding": null, "doc_hash": "2136a912057eb852bce588388714a22e00771aa0fbb8419492537e6615e7ee5d", "extra_info": null, "node_info": {"start": 0, "end": 739, "_node_type": "1"}, "relationships": {"1": "385198ab-f870-4641-a034-2f70e4751837"}}, "__type__": "1"}, "9358824d-159c-4714-b9f6-cc0238b33f88": {"__data__": {"text": "\n\nScopes\n\nAny local declared with `let` is available for any subsequent expression, _within that scope_.\nScopes are declared with expression blocks, `{`...`}`.\n\nLocals cannot be used outside of the declared scope.\n\n```move\nlet x = 0;\n{\n    let y = 1;\n};\nx + y // ERROR!\n//  ^ unbound local 'y'\n```\n\nBut, locals from an outer scope _can_ be used in a nested scope.\n\n```move\n{\n    let x = 0;\n    {\n        let y = x + 1; // valid\n    }\n}\n```\n\nLocals can be mutated in any scope where they are accessible. That mutation survives with the local,\nregardless of the scope that performed the mutation.\n\n```move\nlet x = 0;\nx = x + 1;\nassert!(x == 1, 42);\n{\n    x = x + 1;\n    assert!(x == 2, 42);\n};\nassert!(x == 2, 42);\n```\n\n", "doc_id": "9358824d-159c-4714-b9f6-cc0238b33f88", "embedding": null, "doc_hash": "6d8a4bc7cfea5ce76027dfa39be71b1e048fa91d535c71c956cbbcab52e21b52", "extra_info": null, "node_info": {"start": 0, "end": 718, "_node_type": "1"}, "relationships": {"1": "893c6a73-f294-40c8-a873-ddf955c97f2d"}}, "__type__": "1"}, "7dd1e180-6cba-4f25-8347-d48f033c8e33": {"__data__": {"text": "\n\nExpression Blocks\n\nAn expression block is a series of statements separated by semicolons (`;`). The resulting value of\nan expression block is the value of the last expression in the block.\n\n```move\n{ let x = 1; let y = 1; x + y }\n```\n\nIn this example, the result of the block is `x + y`.\n\nA statement can be either a `let` declaration or an expression. Remember that assignments (`x = e`)\nare expressions of type `()`.\n\n```move\n{ let x; let y = 1; x = 1; x + y }\n```\n\nFunction calls are another common expression of type `()`. Function calls that modify data are\ncommonly used as statements.\n\n```move\n{ let v = vector::empty(); vector::push_back(&mut v, 1); v }\n```\n\nThis is not just limited to `()` types---any expression can be used as a statement in a sequence!\n\n```move\n{\n    let x = 0;\n    x + 1; // value is discarded\n    x + 2; // value is discarded\n    b\"hello\"; // value is discarded\n}\n```\n\nBut! If the expression contains a resource (a value without the `drop` ability),\nyou will get an error. This is because Move's type system guarantees that any value that is dropped\nhas the `drop` ability. (Ownership must be transferred or the value must be\nexplicitly destroyed within its declaring module.)\n\n```move\n{\n    let x = 0;\n    Coin { value: x }; // ERROR!\n//  ^^^^^^^^^^^^^^^^^ unused value without the `drop` ability\n    x\n}\n```\n\nIf a final expression is not present in a block---that is, if there is a trailing semicolon `;`,\nthere is an implicit unit `()` value. Similarly, if the expression block is empty, there is an\nimplicit unit `()` value.\n\n```move\n// Both are equivalent\n{ x = x + 1; 1 / x; }\n{ x = x + 1; 1 / x; () }\n```\n\n```move\n// Both are equivalent\n{ }\n{ () }\n```\n\nAn expression block is itself an expression and can be used anyplace an expression is used. (Note:\nThe body of a function is also an expression block, but the function body cannot be replaced by\nanother expression.)\n\n```move\nlet my_vector: vector> = {\n    let v = vector::empty();\n    vector::push_back(&mut v, b\"hello\");\n    vector::push_back(&mut v, b\"goodbye\");\n    v\n};\n```\n\n(The type annotation is not needed in this example and only added for clarity.)\n\n", "doc_id": "7dd1e180-6cba-4f25-8347-d48f033c8e33", "embedding": null, "doc_hash": "380dd75bea2a6c0d152878e7609169a1ca42f365123b5997da2a6e35d165aa8d", "extra_info": null, "node_info": {"start": 0, "end": 2153, "_node_type": "1"}, "relationships": {"1": "5ce2d8e3-7f30-41aa-a707-422cdc8b0611"}}, "__type__": "1"}, "efd3ab6f-b65d-4bdd-8c58-1381683947be": {"__data__": {"text": "\n\nShadowing\n\nIf a `let` introduces a local variable with a name already in scope, that previous variable can no\nlonger be accessed for the rest of this scope. This is called _shadowing_.\n\n```move\nlet x = 0;\nassert!(x == 0, 42);\n\nlet x = 1; // x is shadowed\nassert!(x == 1, 42);\n```\n\nWhen a local is shadowed, it does not need to retain the same type as before.\n\n```move\nlet x = 0;\nassert!(x == 0, 42);\n\nlet x = b\"hello\"; // x is shadowed\nassert!(x == b\"hello\", 42);\n```\n\nAfter a local is shadowed, the value stored in the local still exists, but will no longer be\naccessible. This is important to keep in mind with values of types without the\n`drop` ability, as ownership of the value must be transferred by the end of the\nfunction.\n\n```move\naddress 0x42 {\n    module example {\n        struct Coin has store { value: u64 }\n\n        fun unused_resource(): Coin {\n            let x = Coin { value: 0 }; // ERROR!\n//              ^ This local still contains a value without the `drop` ability\n            x.value = 1;\n            let x = Coin { value: 10 };\n            x\n//          ^ Invalid return\n        }\n    }\n}\n```\n\nWhen a local is shadowed inside a scope, the shadowing only remains for that scope. The shadowing is\ngone once that scope ends.\n\n```move\nlet x = 0;\n{\n    let x = 1;\n    assert!(x == 1, 42);\n};\nassert!(x == 0, 42);\n```\n\nRemember, locals can change type when they are shadowed.\n\n```move\nlet x = 0;\n{\n    let x = b\"hello\";\n    assert!(x = b\"hello\", 42);\n};\nassert!(x == 0, 42);\n```\n\n", "doc_id": "efd3ab6f-b65d-4bdd-8c58-1381683947be", "embedding": null, "doc_hash": "fd9d353327b28b7b437240770c3319964b4eb5c4827abc8ea06ba31c603a50bf", "extra_info": null, "node_info": {"start": 0, "end": 1501, "_node_type": "1"}, "relationships": {"1": "95606300-9d38-4d08-a9fc-8efcecfd23fd"}}, "__type__": "1"}, "6ecb030c-4719-4817-8854-f261ea4edc32": {"__data__": {"text": "\n\nMove and Copy\n\nAll local variables in Move can be used in two ways, either by `move` or `copy`. If one or the other\nis not specified, the Move compiler is able to infer whether a `copy` or a `move` should be used.\nThis means that in all of the examples above, a `move` or a `copy` would be inserted by the\ncompiler. A local variable cannot be used without the use of `move` or `copy`.\n\n`copy` will likely feel the most familiar coming from other programming languages, as it creates a\nnew copy of the value inside of the variable to use in that expression. With `copy`, the local\nvariable can be used more than once.\n\n```move\nlet x = 0;\nlet y = copy x + 1;\nlet z = copy x + 2;\n```\n\nAny value with the `copy` ability can be copied in this way.\n\n`move` takes the value out of the local variable _without_ copying the data. After a `move` occurs,\nthe local variable is unavailable.\n\n```move\nlet x = 1;\nlet y = move x + 1;\n//      ------ Local was moved here\nlet z = move x + 2; // Error!\n//      ^^^^^^ Invalid usage of local 'x'\ny + z\n```\n\n", "doc_id": "6ecb030c-4719-4817-8854-f261ea4edc32", "embedding": null, "doc_hash": "25acfce206475ff451eea9914fb3e11840c390e4a0354f97f37d54977eacaa55", "extra_info": null, "node_info": {"start": 0, "end": 1040, "_node_type": "1"}, "relationships": {"1": "52d4800f-bc8c-40dc-abeb-c4a3480935cd"}}, "__type__": "1"}, "068f4680-cf34-4921-a4d8-43038e557013": {"__data__": {"text": "\n\nSafety\n\nMove's type system will prevent a value from being used after it is moved. This is the same safety\ncheck described in `let` declaration that prevents local variables from being used\nbefore it is assigned a value.\n\n\n\n", "doc_id": "068f4680-cf34-4921-a4d8-43038e557013", "embedding": null, "doc_hash": "1cdafbdcca685e45cfc475429e4622164fc5d74d13fdfde0a5a4a4a5d54b1d5f", "extra_info": null, "node_info": {"start": 0, "end": 226, "_node_type": "1"}, "relationships": {"1": "1a41e542-bfe1-4d1e-8a63-f439a06cbe05"}}, "__type__": "1"}, "05a301aa-7061-442d-95d6-83ab460334a7": {"__data__": {"text": "\n\nInference\n\nAs mentioned above, the Move compiler will infer a `copy` or `move` if one is not indicated. The\nalgorithm for doing so is quite simple:\n\n- Any scalar value with the `copy` ability is given a `copy`.\n- Any reference (both mutable `&mut` and immutable `&`) is given a `copy`.\n  - Except under special circumstances where it is made a `move` for predictable borrow checker\n    errors.\n- Any other value is given a `move`.\n  - This means that even though other values might be have the `copy` ability, it\n    must be done _explicitly_ by the programmer.\n  - This is to prevent accidental copies of large data structures.\n\nFor example:\n\n```move\nlet s = b\"hello\";\nlet foo = Foo { f: 0 };\nlet coin = Coin { value: 0 };\n\nlet s2 = s; // move\nlet foo2 = foo; // move\nlet coin2 = coin; // move\n\nlet x = 0;\nlet b = false;\nlet addr = @0x42;\nlet x_ref = &x;\nlet coin_ref = &mut coin2;\n\nlet x2 = x; // copy\nlet b2 = b; // copy\nlet addr2 = @0x42; // copy\nlet x_ref2 = x_ref; // copy\nlet coin_ref2 = coin_ref; // copy\n```\n\n", "doc_id": "05a301aa-7061-442d-95d6-83ab460334a7", "embedding": null, "doc_hash": "9fb31826b1f5a5520d5d27bbbafbea1f66829948c2eb9b5a5bb0e82033c6caa4", "extra_info": null, "node_info": {"start": 0, "end": 1020, "_node_type": "1"}, "relationships": {"1": "14cecdfb-e805-46f5-b10c-5ea85f917aeb"}}, "__type__": "1"}, "75c238fc-67a0-4207-90ce-f3f8c446177f": {"__data__": {"text": "\n\nVector\n\n`vector` is the only primitive collection type provided by Move. A `vector` is a homogenous\ncollection of `T`'s that can grow or shrink by pushing/popping values off the \"end\".\n\nA `vector` can be instantiated with any type `T`. For example, `vector`, `vector`,\n`vector`, and `vector>` are all valid vector types.\n\n", "doc_id": "75c238fc-67a0-4207-90ce-f3f8c446177f", "embedding": null, "doc_hash": "07a1012f4d5fc77a22962a478892eafa166cfe8ce7a6fe1025d4630ebc71f139", "extra_info": null, "node_info": {"start": 0, "end": 324, "_node_type": "1"}, "relationships": {"1": "5c683314-9def-4a78-bcf3-3acb4dc17cd2"}}, "__type__": "1"}, "510a45e3-7324-497d-b2a5-4adf3ae351e9": {"__data__": {"text": "\n\nLiterals\n\n", "doc_id": "510a45e3-7324-497d-b2a5-4adf3ae351e9", "embedding": null, "doc_hash": "fe2decf249d819cc238cf8550f535d414af252d021b88adcbba3c7188dbefc1c", "extra_info": null, "node_info": {"start": 0, "end": 12, "_node_type": "1"}, "relationships": {"1": "012b16a2-c3fb-4a62-94de-048dafb57f42"}}, "__type__": "1"}, "2f237685-74d4-4a7e-b6d2-bb1b59046321": {"__data__": {"text": "\n\nGeneral `vector` Literals\n\nVectors of any type can be created with `vector` literals.\n\n| Syntax                | Type                                                                          | Description                                |\n| --------------------- | ----------------------------------------------------------------------------- | ------------------------------------------ |\n| `vector[]`            | `vector[]: vector` where `T` is any single, non-reference type             | An empty vector                            |\n| `vector[e1, ..., en]` | `vector[e1, ..., en]: vector` where `e_i: T` s.t. `0  0` | A vector with `n` elements (of length `n`) |\n\nIn these cases, the type of the `vector` is inferred, either from the element type or from the\nvector's usage. If the type cannot be inferred, or simply for added clarity, the type can be\nspecified explicitly:\n\n```move\nvector[]: vector\nvector[e1, ..., en]: vector\n```\n\n", "doc_id": "2f237685-74d4-4a7e-b6d2-bb1b59046321", "embedding": null, "doc_hash": "36747395f188e63d08629dc24c0e40c0194d693fcbd58e3e27174fb71afd89ec", "extra_info": null, "node_info": {"start": 0, "end": 939, "_node_type": "1"}, "relationships": {"1": "42838366-923c-407b-a86e-097ffaafadca"}}, "__type__": "1"}, "e2813c8b-e846-47ac-aaa1-9dde8079d6d8": {"__data__": {"text": "\n\nExample Vector Literals\n\n```move\n(vector[]: vector);\n(vector[0u8, 1u8, 2u8]: vector);\n(vector[]: vector);\n(vector[@0x42, @0x100]: vector);\n```\n\n", "doc_id": "e2813c8b-e846-47ac-aaa1-9dde8079d6d8", "embedding": null, "doc_hash": "73af3a8eb8ed24ff81c1e383d03785d76a2b00bd1fb4b877ce23c30817287662", "extra_info": null, "node_info": {"start": 0, "end": 146, "_node_type": "1"}, "relationships": {"1": "47210118-0b8d-4f8d-b208-fdbeb9f15966"}}, "__type__": "1"}, "1d4b9382-f628-44e1-8635-b76b426150ed": {"__data__": {"text": "\n\n`vector<u8>` literals\n\nA common use-case for vectors in Move is to represent \"byte arrays\", which are represented with\n`vector`. These values are often used for cryptographic purposes, such as a public key or a hash\nresult. These values are so common that specific syntax is provided to make the values more\nreadable, as opposed to having to use `vector[]` where each individual `u8` value is specified in\nnumeric form.\n\nThere are currently two supported types of `vector` literals, *byte strings* and *hex strings*.\n\n", "doc_id": "1d4b9382-f628-44e1-8635-b76b426150ed", "embedding": null, "doc_hash": "2912f83fa5daa1a2bfaa0c30ce2e881903aeaae851fe1cb7e40b5b72c4d0580e", "extra_info": null, "node_info": {"start": 0, "end": 520, "_node_type": "1"}, "relationships": {"1": "9f6b21a5-6667-4cd3-a4d6-beb87e76fd13"}}, "__type__": "1"}, "3af76dec-1b35-481a-ad58-e137b565fd7d": {"__data__": {"text": "\n\nByte Strings\n\nByte strings are quoted string literals prefixed by a `b`, e.g. `b\"Hello!\\n\"`.\n\nThese are ASCII encoded strings that allow for escape sequences. Currently, the supported escape\nsequences are:\n\n| Escape Sequence | Description                                    |\n| --------------- | ---------------------------------------------- |\n| `\\n`            | New line (or Line feed)                        |\n| `\\r`            | Carriage return                                |\n| `\\t`            | Tab                                            |\n| `\\\\`            | Backslash                                      |\n| `\\0`            | Null                                           |\n| `\\\"`            | Quote                                          |\n| `\\xHH`          | Hex escape, inserts the hex byte sequence `HH` |\n\n", "doc_id": "3af76dec-1b35-481a-ad58-e137b565fd7d", "embedding": null, "doc_hash": "e655c32befa6d71886e2db2f797d4def0068566909ab0d139c6a6250c5bff54c", "extra_info": null, "node_info": {"start": 0, "end": 831, "_node_type": "1"}, "relationships": {"1": "01c33ddd-f6f4-4a73-beb1-f908cf6653f4"}}, "__type__": "1"}, "9184b44e-0730-4d2d-b76e-6b57b7140983": {"__data__": {"text": "\n\nHex Strings\n\nHex strings are quoted string literals prefixed by a `x`, e.g. `x\"48656C6C6F210A\"`.\n\nEach byte pair, ranging from `00` to `FF`, is interpreted as hex encoded `u8` value. So each byte\npair corresponds to a single entry in the resulting `vector`.\n\n", "doc_id": "9184b44e-0730-4d2d-b76e-6b57b7140983", "embedding": null, "doc_hash": "7f3f3c4f811643446d64235f5865cc7d78185ba4b5ccb940069f5d15b1cc0173", "extra_info": null, "node_info": {"start": 0, "end": 261, "_node_type": "1"}, "relationships": {"1": "8dde4150-f9da-4f16-8d50-64f5293024be"}}, "__type__": "1"}, "05e78092-cebe-4215-b28f-38625a1d3a09": {"__data__": {"text": "\n\nExample String Literals\n\n```move\nscript {\nfun byte_and_hex_strings() {\n    assert!(b\"\" == x\"\", 0);\n    assert!(b\"Hello!\\n\" == x\"48656C6C6F210A\", 1);\n    assert!(b\"\\x48\\x65\\x6C\\x6C\\x6F\\x21\\x0A\" == x\"48656C6C6F210A\", 2);\n    assert!(\n        b\"\\\"Hello\\tworld!\\\"\\n \\r \\\\Null=\\0\" ==\n            x\"2248656C6C6F09776F726C6421220A200D205C4E756C6C3D00\",\n        3\n    );\n}\n}\n```\n\n", "doc_id": "05e78092-cebe-4215-b28f-38625a1d3a09", "embedding": null, "doc_hash": "e8f980b0c049cc3a9f802800122f940fcc3e77e0f4810d68463a6195f07178fc", "extra_info": null, "node_info": {"start": 0, "end": 374, "_node_type": "1"}, "relationships": {"1": "0941afea-38a8-4271-88ff-736791108b69"}}, "__type__": "1"}, "c3be207e-6294-4cfb-827c-05c705709fdf": {"__data__": {"text": "\n\nOperations\n\n`vector` provides several operations via the `std::vector` module in the Move standard\nlibrary, as shown below. More operations may be added over time. \nUp-to-date document on `vector` can be found here.\n\n\n| Function                                                                                   | Description                                                                                                                                                   | Aborts?                                   |\n|--------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------|\n| `vector::empty(): vector`                                                            | Create an empty vector that can store values of type `T`                                                                                                      | Never                                     |\n| `vector::is_empty(): bool`                                                              | Return `true` if the vector `v` has no elements and `false` otherwise.                                                                                        | Never                                     |\n| `vector::singleton(t: T): vector`                                                    | Create a vector of size 1 containing `t`                                                                                                                      | Never                                     |\n|", "doc_id": "c3be207e-6294-4cfb-827c-05c705709fdf", "embedding": null, "doc_hash": "d106c9ac12e0e4a55ffbfd2aa17fa4de6081dffb98c0977a17df5195e46fe7cb", "extra_info": null, "node_info": {"start": 0, "end": 1701, "_node_type": "1"}, "relationships": {"1": "85d72868-6376-4f0b-a46b-da2d05c9ee2a", "3": "a1bfb670-b317-46e1-a17b-aeb4387f7a06"}}, "__type__": "1"}, "a1bfb670-b317-46e1-a17b-aeb4387f7a06": {"__data__": {"text": "                 |\n| `vector::length(v: &vector): u64`                                                    | Return the length of the vector `v`                                                                                                                           | Never                                     |\n| `vector::push_back(v: &mut vector, t: T)`                                            | Add `t` to the end of `v`                                                                                                                                     | Never                                     |\n| `vector::pop_back(v: &mut vector): T`                                                | Remove and return the last element in `v`                                                                                                                     | If `v` is empty                           |\n| `vector::borrow(v: &vector, i: u64): &T`                                             | Return an immutable reference to the `T` at index `i`                                                                                                         | If `i` is not in bounds                   |\n| `vector::borrow_mut(v: &mut vector, i: u64): &mut T`                                 | Return a mutable reference to the `T` at index `i`           ", "doc_id": "a1bfb670-b317-46e1-a17b-aeb4387f7a06", "embedding": null, "doc_hash": "804619820a1e8c017a42c4d9a41ce0992840d8e94bdf595328c6ef3656b9b6a4", "extra_info": null, "node_info": {"start": 1699, "end": 3040, "_node_type": "1"}, "relationships": {"1": "85d72868-6376-4f0b-a46b-da2d05c9ee2a", "2": "c3be207e-6294-4cfb-827c-05c705709fdf", "3": "7ba320ad-220f-4464-9b8c-f53269644fa7"}}, "__type__": "1"}, "7ba320ad-220f-4464-9b8c-f53269644fa7": {"__data__": {"text": "the `T` at index `i`                                                                                                            | If `i` is not in bounds                   |\n| `vector::destroy_empty(v: vector)`                                                   | Delete `v`                                                                                                                                                    | If `v` is not empty                       |\n| `vector::append(v1: &mut vector, v2: vector)`                                     | Add the elements in `v2` to the end of `v1`                                                                                                                   | Never                                     |\n| `vector::reverse_append(lhs: &mut vector, other: vector)`                         | Pushes all of the elements of the `other` vector into the `lhs` vector, in the reverse order as they occurred in `other`                                      | Never                                     |\n| `vector::contains(v: &vector, e: &T): bool`                                          | Return true if `e` is in the vector `v`. Otherwise, returns false                                                                                             | Never                                     |\n| `vector::swap(v: &mut vector, i: u64, j: u64)`              ", "doc_id": "7ba320ad-220f-4464-9b8c-f53269644fa7", "embedding": null, "doc_hash": "ae9a65475bdb54f63ba9bbb38bc56740deef37cd42e5299556be6ffa8a4fdc0b", "extra_info": null, "node_info": {"start": 3028, "end": 4430, "_node_type": "1"}, "relationships": {"1": "85d72868-6376-4f0b-a46b-da2d05c9ee2a", "2": "a1bfb670-b317-46e1-a17b-aeb4387f7a06", "3": "00f9d740-be97-4eb5-b5cf-6b48c753f58c"}}, "__type__": "1"}, "00f9d740-be97-4eb5-b5cf-6b48c753f58c": {"__data__": {"text": "j: u64)`                                       | Swaps the elements at the `i`th and `j`th indices in the vector `v`                                                                                           | If `i` or `j` is out of bounds            |\n| `vector::reverse(v: &mut vector)`                                                    | Reverses the order of the elements in the vector `v` in place                                                                                                 | Never                                     |\n| `vector::reverse_slice(v: &mut vector, l: u64, r: u64)`                              | Reverses the order of the elements [l, r) in the vector `v` in place                                                                                          | Never                                     |\n| `vector::index_of(v: &vector, e: &T): (bool, u64)`                                   | Return `(true, i)` if `e` is in the vector `v` at index `i`. Otherwise, returns `(false, 0)`                                                                  | Never                                     |\n| `vector::insert(v: &mut vector, i: u64, e: T)`                                       | Insert a new element `e` at position 0 <= i <= length, using O(length - i) time                                                                               | If `i` is out of bounds                   |\n| `vector::remove(v: &mut vector, i: u64): T` ", "doc_id": "00f9d740-be97-4eb5-b5cf-6b48c753f58c", "embedding": null, "doc_hash": "43648de3cc7a5ad7f353fd56e8d1523051f34e9e51734375711e57e0a2f05c9f", "extra_info": null, "node_info": {"start": 4440, "end": 5911, "_node_type": "1"}, "relationships": {"1": "85d72868-6376-4f0b-a46b-da2d05c9ee2a", "2": "7ba320ad-220f-4464-9b8c-f53269644fa7", "3": "c06466da-640a-4406-8f94-c49150026062"}}, "__type__": "1"}, "c06466da-640a-4406-8f94-c49150026062": {"__data__": {"text": "`vector::remove(v: &mut vector, i: u64): T`                                          | Remove the `i`th element of the vector `v`, shifting all subsequent elements. This is O(n) and preserves ordering of elements in the vector                   | If `i` is out of bounds                   |\n| `vector::swap_remove(v: &mut vector, i: u64): T`                                     | Swap the `i`th element of the vector `v` with the last element and then pop the element, This is O(1), but does not preserve ordering of elements in the vector | If `i` is out of bounds                   |\n| `vector::trim(v: &mut vector, new_len: u64): u64`                                    | Trim the vector `v` to the smaller size `new_len` and return the evicted elements in order                                                                    | `new_len` is larger than the length of `v` |\n| `vector::trim_reverse(v: &mut vector, new_len: u64): u64`                            | Trim the vector `v` to the smaller size `new_len` and return the evicted elements in the reverse order                                                        | `new_len` is larger than the length of `v` |\n| `vector::rotate(v: &mut vector, rot: u64): u64`                                      | rotate(&mut [1, 2, 3, 4, 5], 2) -> [3, 4, 5, 1, 2] in place, returns the split point ie. 3 in this example                                                    | Never                                     |\n| `vector::rotate_slice(v: &mut vector, left: u64, rot: u64, right: u64): u64`         | rotate a slice [left, right) with left <= rot <= right in place, returns the split point                                                                      | Never                                     |\n\n", "doc_id": "c06466da-640a-4406-8f94-c49150026062", "embedding": null, "doc_hash": "bd2f25d51db99dde6e774a637b505b84051a1bf639c230abe197c527ab95cc92", "extra_info": null, "node_info": {"start": 5874, "end": 7635, "_node_type": "1"}, "relationships": {"1": "85d72868-6376-4f0b-a46b-da2d05c9ee2a", "2": "00f9d740-be97-4eb5-b5cf-6b48c753f58c"}}, "__type__": "1"}, "78962a5b-a98c-41f1-8222-5e1fe06e7414": {"__data__": {"text": "\n\nExample\n\n```move\nuse std::vector;\n\nlet v = vector::empty();\nvector::push_back(&mut v, 5);\nvector::push_back(&mut v, 6);\n\nassert!(*vector::borrow(&v, 0) == 5, 42);\nassert!(*vector::borrow(&v, 1) == 6, 42);\nassert!(vector::pop_back(&mut v) == 6, 42);\nassert!(vector::pop_back(&mut v) == 5, 42);\n```\n\n", "doc_id": "78962a5b-a98c-41f1-8222-5e1fe06e7414", "embedding": null, "doc_hash": "831e762363f3eb6b63b24f2133eb5f2b4da3de39687e85233043bba045d4c7f2", "extra_info": null, "node_info": {"start": 0, "end": 300, "_node_type": "1"}, "relationships": {"1": "13859f3f-3f3d-44c9-a6fd-6f063e83df0a"}}, "__type__": "1"}, "a865d871-ce12-4a69-95f9-830cf95048a3": {"__data__": {"text": "\n\nDestroying and copying `vector`s\n\nSome behaviors of `vector` depend on the abilities of the element type, `T`. For example, vectors\ncontaining elements that do not have `drop` cannot be implicitly discarded like `v` in the example\nabove--they must be explicitly destroyed with `vector::destroy_empty`.\n\nNote that `vector::destroy_empty` will abort at runtime unless `vec` contains zero elements:\n\n```move\nfun destroy_any_vector(vec: vector) {\n    vector::destroy_empty(vec) // deleting this line will cause a compiler error\n}\n```\n\nBut no error would occur for dropping a vector that contains elements with `drop`:\n\n```move\nfun destroy_droppable_vector(vec: vector) {\n    // valid!\n    // nothing needs to be done explicitly to destroy the vector\n}\n```\n\nSimilarly, vectors cannot be copied unless the element type has `copy`. In other words, a\n`vector` has `copy` if and only if `T` has `copy`. However, even copyable vectors are never\nimplicitly copied:\n\n```move\nlet x = vector::singleton(10);\nlet y = copy x; // compiler error without the copy!\n```\n\nCopies of large vectors can be expensive, so the compiler requires explicit `copy`'s to make it\neasier to see where they are happening.\n\nFor more details see the sections on type abilities and generics.\n\n", "doc_id": "a865d871-ce12-4a69-95f9-830cf95048a3", "embedding": null, "doc_hash": "d372b7f7768c2fdfb5af929b3dbcaba6f063a8b11ce157f5d7345d7e3f15365a", "extra_info": null, "node_info": {"start": 0, "end": 1257, "_node_type": "1"}, "relationships": {"1": "09071137-bd59-40ab-bcb3-5a5d24805ab6"}}, "__type__": "1"}, "cf4c8b54-d9cf-478d-898c-a474c19626c4": {"__data__": {"text": "\n\nOwnership\n\nAs mentioned above, `vector` values can be copied only if the\nelements can be copied. In that case, the copy must be explicit via a\n`copy` or a dereference `*`.\n\n", "doc_id": "cf4c8b54-d9cf-478d-898c-a474c19626c4", "embedding": null, "doc_hash": "74bf1f2f921767c06d72bf76644975b436750a1b8fbf438791f4a63acfc74fa4", "extra_info": null, "node_info": {"start": 0, "end": 175, "_node_type": "1"}, "relationships": {"1": "bfdc3d4c-1178-4d6b-8273-4ab7ea6a0ae3"}}, "__type__": "1"}, "bc4382a1-f3b2-418a-8686-effa957f26b6": {"__data__": {"text": "\n\nVoter\n\nIf you are a voter, then we recommend strongly that you do not store your Aptos voter keys with a custodian before the custodian supports this function. Until then, we suggest you store your voter keys in an Aptos wallet like Petra or Martian.\n\nThis document describes how to perform voter operations while using an Aptos wallet. \n\n", "doc_id": "bc4382a1-f3b2-418a-8686-effa957f26b6", "embedding": null, "doc_hash": "9eeb75cf65f508f7d96cbe697b0f248fb5bdcb75b684f8a714ad9938999dbd6b", "extra_info": null, "node_info": {"start": 0, "end": 341, "_node_type": "1"}, "relationships": {"1": "813a9462-ef0f-46c9-8d02-20a748d3d629"}}, "__type__": "1"}, "beb8ee1b-2a29-4a7a-9c70-b1072cdbc2a4": {"__data__": {"text": "\n\nSteps Using Governance UI\n\nTo participate as a voter in the Aptos governance, follow the below steps. \n\n1. Go to the **Proposals section** of the Aptos Governance page.\n2. Connect your wallet by clicking on **CONNECT WALLET** (top-right):\n3. Make sure that wallet is set to connect to Mainnet.\n4. View the proposals. When you are ready to vote on a proposal, click on the proposal and vote.\n5. You will see a green snackbar indicating that the transaction is successful.\n\n", "doc_id": "beb8ee1b-2a29-4a7a-9c70-b1072cdbc2a4", "embedding": null, "doc_hash": "c2565aa9b85c521071e6a771d2cfbd869a1dbc0f9c334ae4d1bf5c4c52987133", "extra_info": null, "node_info": {"start": 0, "end": 474, "_node_type": "1"}, "relationships": {"1": "f7e6d588-eee7-440e-943e-bca5582980f0"}}, "__type__": "1"}, "74830b19-fd7e-425f-bb2d-4a446bd8c522": {"__data__": {"text": "\n\nSteps Using Aptos CLI\n\n1. Get your stake pool info `aptos node get-stake-pool --owner-address  --url `\n2. To see the list of proposal `aptos governance list-proposals --url https://mainnet.aptoslabs.com`\n3. To vote on a proposal `aptos governance vote --proposal-id  --pool-address  --url  --profile `\n\n", "doc_id": "74830b19-fd7e-425f-bb2d-4a446bd8c522", "embedding": null, "doc_hash": "6bfc2d6335ebe8cb34b175f0201d03c6dd92dd95d1b8e01a90aa242086040faa", "extra_info": null, "node_info": {"start": 0, "end": 305, "_node_type": "1"}, "relationships": {"1": "9d223b58-94e9-4466-ad0c-87839b0051eb"}}, "__type__": "1"}, "44c9ec2f-f7b4-410e-b057-aa50eef896bc": {"__data__": {"text": "\n\nIntegrate with Aptos wallets\n\nDecentralized applications often run through a browser extension or mobile application to read onchain data and submit\ntransactions.  The Aptos Wallet Adapter allows for a single interface for apps and wallets to integrate together.\n\n", "doc_id": "44c9ec2f-f7b4-410e-b057-aa50eef896bc", "embedding": null, "doc_hash": "6894120c89d7233fcd9c3d59b179d91d624fe5221dda5c52edf87b80855c1760", "extra_info": null, "node_info": {"start": 0, "end": 266, "_node_type": "1"}, "relationships": {"1": "b26551e5-eb1e-434b-97fd-6ca38a4b89e0"}}, "__type__": "1"}, "05f7a5c7-8347-4eb0-a339-ac065a983f81": {"__data__": {"text": "\n\nImplementing the Aptos Wallet Adapter\n\nFor the best user experience, we suggest that dapps offer multiple wallets, to allow users to choose their preferred\nwallet.\n\nImplementing wallet integration can be difficult for dapps in:\n\n1. Support and test all edge cases\n2. Implement and maintain different wallet APIs\n3. Provide users with needed functionality the wallet itself doesnt support\n4. Keep track on all the different wallets in our ecosystem\n\nIn addition, creating and implementing a wallet is also not an easy task,\n\n1. Provide a wallet that follows a known standard so it is easy to integrate with\n2. Getting visibility and exposure in the ecosystem among all the other wallets\n3. Dapp projects need to dedicate time and resource to integrate the wallet within their app\n\nWhen we started building a wallet adapter, we wanted to provide an adapter that can be easy enough for wallets to integrate with and for dapps to use and implement.\n\nFor that, we provide an Aptos Wallet Adapter monorepo for wallet and dapps creators to ease development and ensure a smooth process in building projects on the Aptos network.\nThe Aptos Wallet Adapter acts as a service between dapps and wallets and exposes APIs for dapps to interact with the wallets by following our Wallet Standard. This in turns allows dapps to support many wallets with minimal integration efforts, and for wallets to follow a known standard and gain visibility.\n\n", "doc_id": "05f7a5c7-8347-4eb0-a339-ac065a983f81", "embedding": null, "doc_hash": "8a7be325ea43ac07c4552633e24025214152a242bc5bbd2ccf45e574368afc46", "extra_info": null, "node_info": {"start": 0, "end": 1432, "_node_type": "1"}, "relationships": {"1": "6547f6fb-0665-4ce6-9b79-34954f7c2a1a"}}, "__type__": "1"}, "47a0c3a4-423b-4026-a7a4-ef91d8874436": {"__data__": {"text": "\n\nAdapter structure\n\nThe adapter has three different components, the:\n\n1. Adapter Core package\n2. Adapter React provider (for dapps)\n3. Adapter Template plugin (for wallets)\n\nThis structure offers the following benefits:\n\n- Modularity (separation of concerns) - separating the adapter into three components can help having more freedom in design, implementation, deployment and usage.\n- Wallets create and own their plugin implementation (instead of having all in the same monorepo):\n  - Reduces the packages bundle size used by dapps.\n  - Lets them be self-service and support themselves without too much friction.\n  - Prevents build failures in case of any bugs/bad implementation/wrong config files/etc.\n- Simplicity - keeps the Provider package very light and small as the major logic is implemented in the core package.\n- Flexibility - for wallets in creating and implementing custom functions.\n\n", "doc_id": "47a0c3a4-423b-4026-a7a4-ef91d8874436", "embedding": null, "doc_hash": "2180e64e3c4761ac9909b98b7620ae5bac42573e7fc7f27dee766f7b8b3065dd", "extra_info": null, "node_info": {"start": 0, "end": 901, "_node_type": "1"}, "relationships": {"1": "84fea6b6-a3df-4f8f-b367-3957138deac4"}}, "__type__": "1"}, "4a570697-4ceb-47e4-8058-6dc713eec23a": {"__data__": {"text": "\n\nAdapter Core package\n\nThe Adapter Core package handles the interaction between the dapp and the wallet. It:\n\n- Exposes the standard API (and some different functions supported by different wallets)\n- Holds the current wallet state and the installed wallets\n- Emits events on different actions and much more\n\nDapps should not _know_ this package as dapps interact with the provider, which in turn interacts with the core package; some Types are exposed from the core package for the dapp to use.\n\nWallets should implement their own plugin class that extends the basic plugin class (properties + events) interface that lives in the core package.\n\n:::tip\nIf a wallet supports functions that are not part of the basic plugin interface, a pull request should be made to the core package to include this function so it can support it. You can take a look at the\u00a0`signTransaction`\u00a0on the wallet\u00a0core package for guidance.\n:::\n\n", "doc_id": "4a570697-4ceb-47e4-8058-6dc713eec23a", "embedding": null, "doc_hash": "86a4cd22a607dd87100210a739d10e2ceef465a73da467fd20b00ec0f2f12331", "extra_info": null, "node_info": {"start": 0, "end": 922, "_node_type": "1"}, "relationships": {"1": "2b826aca-59cb-4b74-a6b6-ab2ac9192d2e"}}, "__type__": "1"}, "950757bc-476d-49b4-a0cf-3c5824406bcc": {"__data__": {"text": "\n\nAdapter React provider\n\nThe light Adapter React package is for dapps to import and use. The package contains a `Provider` and a `Context` to implement and use within your app.\n\nFollow the Wallet Adapter For Dapp Builders guide on how to use the provider package on your dapp.\n\n", "doc_id": "950757bc-476d-49b4-a0cf-3c5824406bcc", "embedding": null, "doc_hash": "600251b063f4ccafc1676ad7dbecf4e932404da9fca06c9c092147e0663a1526", "extra_info": null, "node_info": {"start": 0, "end": 279, "_node_type": "1"}, "relationships": {"1": "0abafea0-5d4c-4370-9132-53f5737b6d5c"}}, "__type__": "1"}, "0d52ba0f-2dba-4bfb-98a2-236fa147adb1": {"__data__": {"text": "\n\nAdapter Template plugin\n\nWallets looking to integrate with the adapter should implement their own wallet plugin, to ease the process we provide you with a pre-made class that implements the basic functionality needed (according to the wallet standard).\n\nThe Wallet Adapter Plugin Template repo holds a pre-made class, a test file, and some config files to help you build and publish the plugin as an NPM package.\n\nFollow the Wallet Adapter For Wallet Builders on how to use the template to implement and publish your wallet plugin.\n\n\n<ThemedImage\nalt=\"Wallet Adapter Concept\"\nsources={{\n    light: useBaseUrl('/img/docs/wallet-adapter-chart-light.svg'),\n    dark: useBaseUrl('/img/docs/wallet-adapter-chart-dark.svg'),\n  }}\n/>\n\n\n", "doc_id": "0d52ba0f-2dba-4bfb-98a2-236fa147adb1", "embedding": null, "doc_hash": "c163ff7d0de90ef0817f879b09b87340ce62bf192676540fa9e619bb3cad1f85", "extra_info": null, "node_info": {"start": 0, "end": 731, "_node_type": "1"}, "relationships": {"1": "eccb97c4-2bcd-439c-b0dd-a86f559ce4bf"}}, "__type__": "1"}, "ed8455e9-8b56-431a-a35e-f16befb74d7e": {"__data__": {"text": "\n\nWallet Adapter For Dapp Builders\n\nImagine you have a great idea for a dapp and you want to start building it. Eventually, you will need to integrate a wallet or multiple wallets so your users can interact with the Aptos blockchain.\nImplementing wallet integration can be difficult in supporting all edge cases, new features, unsupported functionality. And it can be even harder to support multiple wallets.\n\nIn addition, different wallets have different APIs, and not all wallets share the same naming convention. For example, maybe all wallets have a `connect` method, but not all wallets call that method `connect`; that can be tricky to support.\n\nLuckily, Aptos built a wallet adapter, created and maintained by the Aptos team, to help you ramp up development and standardize where possible.\n\nThe Aptos Wallet Adapter provides:\n\n- Easy wallet implementation - no need to implement and support code for multiple wallets.\n- Support for different wallet APIs.\n- Support for features not implemented on the wallet level.\n- Detection for uninstalled wallets (so you can show users that a wallet is not installed).\n- Auto-connect functionality and remembers the current wallet state.\n- Listens to wallet events, such as account and network changes.\n- A well-developed and maintained reference implementation by the Aptos ecosystem team.\n\n", "doc_id": "ed8455e9-8b56-431a-a35e-f16befb74d7e", "embedding": null, "doc_hash": "140c068c34630a714a9168c5b3ce1caea03ee264b68800a15147e4ff2c1303bd", "extra_info": null, "node_info": {"start": 0, "end": 1337, "_node_type": "1"}, "relationships": {"1": "3c168929-5d1f-44f4-ac01-11a65e852015"}}, "__type__": "1"}, "2e07f0b5-c38e-456f-bfc3-bb329e50770c": {"__data__": {"text": "\n\nInstall\n\nCurrently, the adapter supports a _React provider_ for you to include in your app.\n\nInstall wallet dependencies you want to include in your app. You can find a list of the wallets in the Aptos Wallet Adapter README.\n\nInstall the React provider:\n\n```bash\nnpm install @aptos-labs/wallet-adapter-react\n```\n\n", "doc_id": "2e07f0b5-c38e-456f-bfc3-bb329e50770c", "embedding": null, "doc_hash": "a52ecdeb36adc8d27854453d81251b69ad45030447804d5dd27720127c82c4bf", "extra_info": null, "node_info": {"start": 0, "end": 315, "_node_type": "1"}, "relationships": {"1": "6e604459-6531-455c-ad69-65f7761cab99"}}, "__type__": "1"}, "c9d1b47f-74bf-4756-98ae-0b1d85d7880c": {"__data__": {"text": "\n\nImport dependencies\n\nIn the `App.jsx` file:\n\nImport the installed wallets:\n\n```js\nimport { PetraWallet } from \"petra-plugin-wallet-adapter\";\n```\n\nImport the `AptosWalletAdapterProvider`:\n\n```js\nimport { AptosWalletAdapterProvider } from \"@aptos-labs/wallet-adapter-react\";\n```\n\nWrap your app with the Provider, pass it the plugins (wallets) you want to have on your app as an array, and include an autoConnect option (set to false by default):\n\n```js\nconst wallets = [new PetraWallet()];\n\n  \n;\n```\n\n", "doc_id": "c9d1b47f-74bf-4756-98ae-0b1d85d7880c", "embedding": null, "doc_hash": "b9311297423310372217fb5f580275543ce9f20632782d5da4869adae23b6e0d", "extra_info": null, "node_info": {"start": 0, "end": 501, "_node_type": "1"}, "relationships": {"1": "2fc2ffac-6f4d-47cb-9c98-da88d7ede231"}}, "__type__": "1"}, "40e6c752-7d55-49e7-b733-3eedd0a05807": {"__data__": {"text": "\n\nUse\n\nOn any page you want to use the wallet properties, import `useWallet` from `@aptos-labs/wallet-adapter-react`:\n\n```js\nimport { useWallet } from \"@aptos-labs/wallet-adapter-react\";\n```\n\nYou can then use the exported properties:\n\n```js\nconst {\n  connect,\n  account,\n  network,\n  connected,\n  disconnect,\n  wallet,\n  wallets,\n  signAndSubmitTransaction,\n  signTransaction,\n  signMessage,\n} = useWallet();\n```\n\nFinally, use the examples on the package README file to build more functionality into your dapps.\n\n", "doc_id": "40e6c752-7d55-49e7-b733-3eedd0a05807", "embedding": null, "doc_hash": "7fae97673be66b9b90acd51c76d1d133a95b47c054a75ddaf906bb18ebc72c93", "extra_info": null, "node_info": {"start": 0, "end": 513, "_node_type": "1"}, "relationships": {"1": "023b8181-ac92-4c27-9781-76ca52c2f8d7"}}, "__type__": "1"}, "f75fa702-4ccc-40a7-8d78-ff4ad06fad3f": {"__data__": {"text": "\n\nWallet Adapter For Wallet Builders\n\nTo gain from dapps in the Aptos Ecosystem and provide your users the functionality they are looking for in a wallet, your wallet plugin should follow the Aptos Wallet Standard and be built from the Aptos Wallet Adapter.\n\nThe wallet-adapter-plugin-template repository gives wallet builders a pre-made class with all required wallet functionality following the Aptos Wallet Standard\u00a0for easy and fast development.\n\n", "doc_id": "f75fa702-4ccc-40a7-8d78-ff4ad06fad3f", "embedding": null, "doc_hash": "94f08ac338c7068b261084a1c1a22967dfc0af250ad8a1178ce4b8b1ff2ab1a8", "extra_info": null, "node_info": {"start": 0, "end": 451, "_node_type": "1"}, "relationships": {"1": "ff8a5cda-9e4d-49d4-b1f2-83f421093075"}}, "__type__": "1"}, "7b84c757-2073-456d-9903-c10a7a8bac61": {"__data__": {"text": "\n\nConfiguration\n\n1. `git clone git@github.com:aptos-labs/wallet-adapter-plugin-template.git`\n1. Open\u00a0`src/index.ts` for editing.\n1. Replace all `AptosWindow` references with:\u00a0`Window`\n1. Replace\u00a0`AptosWalletName`\u00a0with:\u00a0`WalletName`\n1. Replace\u00a0`url`\u00a0with your website URL.\n1. Change\u00a0`icon`\u00a0to your wallet icon (pay attention to the required format).\n1. Replace\u00a0`window.aptos`\u00a0with:\u00a0`window.`\n  - Make sure the\u00a0`Window Interface`\u00a0has\u00a0``\u00a0as a key (instead of\u00a0`aptos`).\n1. Open\u00a0`__tests/index.test.tsx`\u00a0and change\u00a0`AptosWallet`\u00a0to:\u00a0`Wallet`\n1. Run tests with\u00a0`pnpm test`\u00a0- all tests should pass.\n\nAt this point, you have a ready wallet class with all required properties and functions to integrate with the Aptos Wallet Adapter.\n\n", "doc_id": "7b84c757-2073-456d-9903-c10a7a8bac61", "embedding": null, "doc_hash": "5da0605d9d30be63e29a98dd5b6e19006c0a63b2b084fb09734910442842ac6b", "extra_info": null, "node_info": {"start": 0, "end": 726, "_node_type": "1"}, "relationships": {"1": "dbd76588-bba0-49e2-8692-fa5c1a46c360"}}, "__type__": "1"}, "181c5b35-e490-4707-ba02-5722e589d823": {"__data__": {"text": "\n\nPublish as a package\n\nThe next step is to publish your wallet as an NPM package so dapps can install it as a dependency. Use one of the options below:\n\nCreating and publishing scoped public packages\n\nCreating and publishing unscoped public packages\n\n:::tip\nIf your wallet provides functionality that is not included, you should open a pull request against\u00a0`aptos-wallet-adapter`\u00a0in the\u00a0core package\u00a0to have it support this functionality. See the\u00a0`signTransaction`\u00a0on the wallet\u00a0core package for guidance.\n:::\n\n", "doc_id": "181c5b35-e490-4707-ba02-5722e589d823", "embedding": null, "doc_hash": "ce8d03673e8043943ef132e71467c7971394d96f2f77f3260d5029247ae645c0", "extra_info": null, "node_info": {"start": 0, "end": 512, "_node_type": "1"}, "relationships": {"1": "a427716c-0e64-4e9f-854d-af1e8f9d0958"}}, "__type__": "1"}, "b03e1baf-421b-4e4f-b8f1-a99034a9e8f6": {"__data__": {"text": "\n\nAdd your name to the wallets list\n\nOnce the package is published, create a pull request against the aptos-wallet-adapter package and add your wallet name to the supported wallet list on the README file as a URL to your NPM package.\n\n", "doc_id": "b03e1baf-421b-4e4f-b8f1-a99034a9e8f6", "embedding": null, "doc_hash": "46bf419e8dad59ca11e8297260240f33072b51dc8947cd26106bfb0102ef0c70", "extra_info": null, "node_info": {"start": 0, "end": 235, "_node_type": "1"}, "relationships": {"1": "c3969c8a-2398-4920-a5a4-37a344863fc7"}}, "__type__": "1"}, "151de829-a402-4137-b1f6-c847d2b61a7c": {"__data__": {"text": "\n\nAptos Wallet Standard\n\nThe wallet standard provides guidelines for interoperability between wallet types.  This ensures dapp developers do not need to change\ntheir applications to handle different wallets. This standard offers a single interface for all dapp developers, allowing easy additions of new wallets and more users to each application. This interoperability allows users to choose which wallet they want without worrying about whether apps support their use cases.\n\nIn order to ensure interoperability across Aptos wallets, the following is required:\n1. Mnemonics - a set of words that can be used to derive account private keys\n2. dapp API - entry points into the wallet to support access to identity managed by the wallet\n3. Key rotation - the feature handling both the relationship around mnemonics and the recovery of accounts in different wallets\n\n", "doc_id": "151de829-a402-4137-b1f6-c847d2b61a7c", "embedding": null, "doc_hash": "424850688b9b75ba94376b4ad68cb9fc4d0e185f5cb4cfa1029fe725d9bd69f4", "extra_info": null, "node_info": {"start": 0, "end": 865, "_node_type": "1"}, "relationships": {"1": "174919ae-0848-4af3-916d-575d0472267a"}}, "__type__": "1"}, "9b9386f3-4831-404b-9171-145120d1679c": {"__data__": {"text": "\n\nMnemonics phrases\n\nA mnemonic phrase is a multiple word phrase that can be used to generate account addresses.\nWe recommend one mnemonic per account in order to handle key rotation better.\nHowever, some wallets may want to support one mnemonic to many accounts coming from other chains. To support both of these use cases, the Aptos wallet standard uses a Bitcoin Improvement Proposal (BIP44) to derive path for mnemonics to accounts.\n\n", "doc_id": "9b9386f3-4831-404b-9171-145120d1679c", "embedding": null, "doc_hash": "7322dbe1de8b3bef607bbf39f034584c2258a5835e3d63410b0ebdc05ce3a07f", "extra_info": null, "node_info": {"start": 0, "end": 438, "_node_type": "1"}, "relationships": {"1": "05ceede8-e65f-4061-8d62-bc7d51904657"}}, "__type__": "1"}, "49917dca-60b0-4472-b86f-2c31a0855068": {"__data__": {"text": "\n\nCreating an Aptos account\n\nAptos account creation can be supported across wallets in the following manner:\n\n1. Generate a mnemonic phrase, for example with BIP39.\n2. Get the master seed from that mnemonic phrase.\n3. Use the BIP44-derived path to retrieve an account address (e.g. `m/44'/637'/0'/0'/0'`)\n    - See the Aptos TypeScript SDK's implementation for the derive path)\n    - For example, Petra Wallet always uses the path `m/44'/637'/0'/0'/0'` since there is one mnemonic per one account.\n\n\n```typescript\n/**\n   * Creates new account with bip44 path and mnemonics,\n   * @param path. (e.g. m/44'/637'/0'/0'/0')\n   * Detailed description: {@link https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki}\n   * @param mnemonics.\n   * @returns AptosAccount\n   */\n  static fromDerivePath(path: string, mnemonics: string): AptosAccount {\n    if (!AptosAccount.isValidPath(path)) {\n      throw new Error(\"Invalid derivation path\");\n    }\n\n    const normalizeMnemonics = mnemonics\n      .trim()\n      .split(/\\s+/)\n      .map((part) => part.toLowerCase())\n      .join(\" \");\n\n    const { key } = derivePath(path, bytesToHex(bip39.mnemonicToSeedSync(normalizeMnemonics)));\n\n    return new AptosAccount(new Uint8Array(key));\n  }\n```\n\n", "doc_id": "49917dca-60b0-4472-b86f-2c31a0855068", "embedding": null, "doc_hash": "a879f6e2ff7717267b8272d970688c7aa0b68c4c4185a5a3acc57254beeebcc6", "extra_info": null, "node_info": {"start": 0, "end": 1237, "_node_type": "1"}, "relationships": {"1": "ab43ff75-1814-4397-ac42-fc58a215c673"}}, "__type__": "1"}, "a22a4875-6b65-4c6d-a523-a0994e0fcca4": {"__data__": {"text": "\n\nSupporting one mnemonic per multiple account wallets\n\nThis is not recommended because the one-mnemonic-to-many-accounts paradigm makes it harder to handle rotated keys (the mnemonic changes for one account but not others).\nHowever, many wallets from other ecosystems use this paradigm, and take these steps to generate accounts\n\n1. Generate a mnemonic phrase, for example with BIP39.\n2. Get the master seed from that mnemonic phrase.\n4. Use the BIP44-derived path to retrieve private keys (e.g. `m/44'/637'/i'/0'/0'`) where `i` is the account index.\n    - See the Aptos TypeScript SDK's implementation for the derive path)\n6. Increase `i` until all of the accounts the user wants to import are found.\n    - Note: The iteration should be limited, if an account doesn't exist during iteration, keep iterating for a constant `address_gap_limit` (10 for now) to see if there are any other accounts. If an account is found we will continue to iterate as normal.\n\nie.\n```typescript\nconst gapLimit = 10;\nlet currentGap = 0;\n\nfor (let i = 0; currentGap < gapLimit; i += 1) {\n    const derivationPath = `m/44'/637'/${i}'/0'/0'`;\n    const account = fromDerivePath(derivationPath, mnemonic);\n    const response = account.getResources();\n    if (response.status !== 404) {\n        wallet.addAccount(account);\n        currentGap = 0;\n    } else {\n        currentGap += 1;\n    }\n}\n```\n\n", "doc_id": "a22a4875-6b65-4c6d-a523-a0994e0fcca4", "embedding": null, "doc_hash": "8e22779ed0cdba6348879af1f054f7f676a73baab6823aeacef5048c0126b5be", "extra_info": null, "node_info": {"start": 0, "end": 1375, "_node_type": "1"}, "relationships": {"1": "ce388f5d-1102-4812-b6cd-8e04cbd37f76"}}, "__type__": "1"}, "7e9c3597-8f6d-4b13-934e-3e83c2057445": {"__data__": {"text": "\n\ndapp API\n\nMore important than account creation, is how wallets connect to dapps. Additionally, following these APIs will allow for the wallet developer to integrate with the Aptos Wallet Adapter Standard.  The APIs are as follows:\n\n- `connect()`, `disconnect()`\n- `account()`\n- `network()`\n- `signAndSubmitTransaction(transaction: EntryFunctionPayload)`\n- `signMessage(payload: SignMessagePayload)`\n- Event listening (`onAccountChanged(listener)`, `onNetworkChanged(listener)`)\n\n```typescript\n// Common Args and Responses\n\n// For single-signer account, there is one publicKey and minKeysRequired is null.\n// For multi-signer account, there are multiple publicKeys and minKeysRequired value.\ntype AccountInfo {\n    address: string;\n    publicKey: string | string[];\n    minKeysRequired?: number; // for multi-signer account\n}\n\ntype NetworkInfo = {\n  name: string;\n  chainId: string;\n  url: string;\n};\n\n// The important thing to return here is the transaction hash, the dApp can wait for it\ntype PendingTransaction\n\ntype EntryFunctionPayload\n\n\n```\n\n", "doc_id": "7e9c3597-8f6d-4b13-934e-3e83c2057445", "embedding": null, "doc_hash": "30da1708fafc9620d2683ae95ef1294324809c37a3b9aa230874a7036095f3f7", "extra_info": null, "node_info": {"start": 0, "end": 1049, "_node_type": "1"}, "relationships": {"1": "21bb3c55-f515-441d-9468-371840d43113"}}, "__type__": "1"}, "631d50f0-40b4-4d09-b9bc-c66b8a2a3e19": {"__data__": {"text": "\n\nConnection APIs\n\nThe connection APIs ensure that wallets don't accept requests until the user acknowledges that they want to see the requests. This keeps\nthe user state clean and prevents the user from unknowingly having prompts.\n\n- `connect()` will prompt the user for a connection\n    - return `Promise`\n- `disconnect()` allows the user to stop giving access to a dapp and also helps the dapp with state management\n    - return `Promise`\n\n", "doc_id": "631d50f0-40b4-4d09-b9bc-c66b8a2a3e19", "embedding": null, "doc_hash": "b42f87ab78f92fd72df421ec7b6dd37a22d721a67db151b87c054ae725136958", "extra_info": null, "node_info": {"start": 0, "end": 443, "_node_type": "1"}, "relationships": {"1": "91cc3a09-f8bd-4a7b-8d50-2f35a6233a7c"}}, "__type__": "1"}, "01b4f08d-5398-45ba-b597-88a20cdd6f47": {"__data__": {"text": "\n\nState APIs\n**Connection required**\n\nAllows a dapp to query for the current connected account address and public key\n\n- `account()` no prompt to the user\n    - returns `Promise`\n\n", "doc_id": "01b4f08d-5398-45ba-b597-88a20cdd6f47", "embedding": null, "doc_hash": "85b57a00580f5fa09ebeed657289099accac7f106a33e9231de3fb4589a6b49b", "extra_info": null, "node_info": {"start": 0, "end": 180, "_node_type": "1"}, "relationships": {"1": "f37cdc50-bed5-43f3-8bc8-e48418d264ff"}}, "__type__": "1"}, "c1523ce5-f585-4023-8dae-472fc56c235c": {"__data__": {"text": "\n\nGet Network\n**Connection required**\n\nAllows a dapp to query for the current connected network name, chain ID, and URL\n\n- `network()` no prompt to the user\n    - returns `Promise`\n\n", "doc_id": "c1523ce5-f585-4023-8dae-472fc56c235c", "embedding": null, "doc_hash": "d7402a85fc706b6b8b60888439214cbef2adc7fc97250f8e93eeee179722bfc1", "extra_info": null, "node_info": {"start": 0, "end": 182, "_node_type": "1"}, "relationships": {"1": "2de384b8-23c6-4e42-92a6-492e23422c31"}}, "__type__": "1"}, "ea24c53a-b5d2-49b7-a9d4-5fac13f4cf31": {"__data__": {"text": "\n\nSigning APIs\n**Connection required**\n\nAllows a dapp to send a simple JSON payload using the TypeScript SDK\nfor signing and submission to the current network. The user should be prompted for approval.\n\n- `signAndSubmitTransaction(transaction: EntryFunctionPayload)` will prompt the user with the transaction they are signing\n    - returns `Promise`\n\n", "doc_id": "ea24c53a-b5d2-49b7-a9d4-5fac13f4cf31", "embedding": null, "doc_hash": "8b36ffedff6e4b597506db2e7059182ed917bb746ecec889bc7186f9ca681240", "extra_info": null, "node_info": {"start": 0, "end": 351, "_node_type": "1"}, "relationships": {"1": "9a43479a-b1b4-43d6-985b-f8e5b6fb41e9"}}, "__type__": "1"}, "b4aa846f-0a39-4b9f-a47d-e97088e11533": {"__data__": {"text": "\n\nSign message\n**Connection required**\n\nAllows a dapp to sign a message with their private key. The most common use case is to verify identity, but there are a few other possible use\ncases. The user should be prompted for approval. You may notice some wallets from other chains just provide an interface to sign arbitrary strings. This can be susceptible to man-in-the-middle attacks, signing string transactions, etc.\n\nTypes:\n```typescript\nexport interface SignMessagePayload {\n  address?: boolean; // Should we include the address of the account in the message\n  application?: boolean; // Should we include the domain of the dApp\n  chainId?: boolean; // Should we include the current chain id the wallet is connected to\n  message: string; // The message to be signed and displayed to the user\n  nonce: string; // A nonce the dApp should generate\n}\n\nexport interface SignMessageResponse {\n  address?: string;\n  application?: string;\n  chainId?: number;\n  fullMessage: string; // The message that was generated to sign\n  message: string; // The message passed in by the user\n  nonce: string,\n  prefix: string, // Should always be APTOS\n  signature: string | string[]; // The signed full message\n  bitmap?: Uint8Array; // a 4-byte (32 bits) bit-vector of length N\n}\n```\n\n- `signMessage(payload: SignMessagePayload)` prompts the user with the `payload.message` to be signed\n    - returns `Promise`\n\nAn example:\n`signMessage({nonce: 1234034, message: \"Welcome to dApp!\", address: true, application: true, chainId: true })`\n\nThis would generate the `fullMessage` to be signed and returned as the `signature`:\n```yaml\nAPTOS\naddress: 0x000001\nchain_id: 7\napplication: badsite.firebase.google.com\nnonce: 1234034\nmessage: Welcome to dApp!\n```\n\nAptos has support for both single-signer and multi-signer accounts. If the wallet is single-signer account, there is exactly one signature and `bitmap` is null. If the wallet is a multi-signer account, there are multiple `signature` and `bitmap` values. The `bitmap` masks that public key that has signed the message.\n\n", "doc_id": "b4aa846f-0a39-4b9f-a47d-e97088e11533", "embedding": null, "doc_hash": "0ab7815f9632fd2ed09d9f2fe4271aab43034b0b83f7b20d4690a70523850772", "extra_info": null, "node_info": {"start": 0, "end": 2055, "_node_type": "1"}, "relationships": {"1": "9d2dab06-3dc4-401f-ad8c-9d32e9709ded"}}, "__type__": "1"}, "8a9c877d-711d-41a9-99ab-e758b2587cb5": {"__data__": {"text": "\n\nEvent listening\n\nTo be added in the future:\n- Event listening (`onAccountChanged(listener)`, `onNetworkChanged(listener)`)\n\n", "doc_id": "8a9c877d-711d-41a9-99ab-e758b2587cb5", "embedding": null, "doc_hash": "1b5c24f62de72a46a439956e250dcc5d7c3c10384d9ed49cc067c13031c47226", "extra_info": null, "node_info": {"start": 0, "end": 126, "_node_type": "1"}, "relationships": {"1": "9ac15ac2-f46e-4984-88e6-6ae350330bb5"}}, "__type__": "1"}, "e3486861-9b36-40aa-8339-564143dcf2cf": {"__data__": {"text": "\n\nKey rotation\n\nKey rotation is currently not implemented in any wallets. Mapping of rotated keys has been implemented, but SDK integration is in progress.\n\nWallets that import a private key will have to do the following:\n1. Derive the authentication key.\n2. Lookup the authentication key onchain in the Account origination table\n  - If the account doesn't exist, it's a new account. The address to be used is the authentication key.\n  - If the account does exist, it's a rotated key account, and the address to be used will come from the table.\n\n", "doc_id": "e3486861-9b36-40aa-8339-564143dcf2cf", "embedding": null, "doc_hash": "21cbba4e16ad21d6d16b7e285f9ca6fa58b9ceb012df99845adcdd1038fc195c", "extra_info": null, "node_info": {"start": 0, "end": 547, "_node_type": "1"}, "relationships": {"1": "924da62a-aaeb-47ff-8acf-c8dd15b063bc"}}, "__type__": "1"}, "d3ef65fd-12d9-4587-86ba-b4fe870f5d8a": {"__data__": {"text": "\n\nAppendix\n- **Forum post with discussion** about the dapp API\n\n", "doc_id": "d3ef65fd-12d9-4587-86ba-b4fe870f5d8a", "embedding": null, "doc_hash": "96e8350a156faf7ce65f497fdb2024eda2e3ea1f2b6576d69ed25e102f1d448d", "extra_info": null, "node_info": {"start": 0, "end": 64, "_node_type": "1"}, "relationships": {"1": "d7ec9cf6-65f6-4174-ae43-0922a3394670"}}, "__type__": "1"}, "d7bd2fc5-bf52-47b6-8e83-6552e311e785": {"__data__": {"text": "\n\nYour First NFT\n\nThis tutorial describes how to create and transfer NFTs on the Aptos blockchain. The Aptos implementation for core NFTs can be found in the token.move Move module.\n\nFor reference, also see:\n* mint_nft Move example on how to airdrop an NFT \n* mint_nft.rs Rust end-to-end test\n\n", "doc_id": "d7bd2fc5-bf52-47b6-8e83-6552e311e785", "embedding": null, "doc_hash": "7438b6c76b3771da28ead008d86591aaca6b6a1524f93326aa2cfcb52f5facb3", "extra_info": null, "node_info": {"start": 0, "end": 294, "_node_type": "1"}, "relationships": {"1": "676d8269-66c3-4cd5-9bba-a955ca564115"}}, "__type__": "1"}, "d7a0db4f-56fc-4fae-8556-42df62d6d8f2": {"__data__": {"text": "\n\nStep 1: Pick an SDK\n\nInstall your preferred SDK from the below list:\n\n* TypeScript SDK\n* Python SDK\n* Rust SDK\n\n---\n\n", "doc_id": "d7a0db4f-56fc-4fae-8556-42df62d6d8f2", "embedding": null, "doc_hash": "c12d9444ab4565a31d45be000904e2df3ff8f68b3cb271854f775b3601ba5b11", "extra_info": null, "node_info": {"start": 0, "end": 119, "_node_type": "1"}, "relationships": {"1": "a5877363-4d15-4d73-8e04-d4a6e97d211a"}}, "__type__": "1"}, "90d56980-48a1-42a3-a2d9-dc1f1f67abf1": {"__data__": {"text": "\n\nStep 2: Run the example\n\nEach SDK provides an `examples` directory. This tutorial covers the `simple-nft` example.\n\nClone the `aptos-core` repo:\n```bash\ngit clone git@github.com:aptos-labs/aptos-core.git ~/aptos-core\n```\n\n\n  \n\n  Navigate to the Typescript SDK examples directory:\n  ```bash\n  cd ~/aptos-core/ecosystem/typescript/sdk/examples/typescript\n  ```\n\n  Install the necessary dependencies:\n  ```bash\n  pnpm install\n  ```\n\n  Run the Typescript `simple_nft` example:\n  ```bash\n  pnpm run simple_nft\n  ```\n  \n  \n\n  Navigate to the Python SDK directory:\n  ```bash\n  cd ~/aptos-core/ecosystem/python/sdk\n  ```\n\n  Install the necessary dependencies:\n  ```bash\n  curl -sSL https://install.python-poetry.org | python3\n  poetry update\n  ```\n\n  Run the Python `simple-nft` example:\n  ```bash\n  poetry run python -m examples.simple-nft\n  ```\n  \n  \n\nComing soon.\n  \n\n\n---\n\n", "doc_id": "90d56980-48a1-42a3-a2d9-dc1f1f67abf1", "embedding": null, "doc_hash": "e51048bd63559a0e87c7e0ea3b26f77c2343fc14179462b84d752645587d6b9d", "extra_info": null, "node_info": {"start": 0, "end": 871, "_node_type": "1"}, "relationships": {"1": "17bd61e7-0654-4a47-a97e-f812218d35d1"}}, "__type__": "1"}, "50c85f6f-70ae-45d8-ad86-6da34b0229ec": {"__data__": {"text": "\n\nStep 3: Understand the output\n\nThe following output should appear after executing the `simple-nft` example, though some values will be different:\n\n```yaml\n=== Addresses ===\nAlice: 0xeef95e86c160fa10a71675c6075f44f8f2c6125f57b4b589424f1fbee385f754\nBob: 0x4dcd7b180c123fdb989d10f71fba6c978bda268c2e3660c169bdb55f67aab776\n\n=== Initial Coin Balances ===\nAlice: 100000000\nBob: 100000000\n\n=== Creating Collection and Token ===\nAlice's collection: {\n    \"description\": \"Alice's simple collection\",\n    \"maximum\": \"18446744073709551615\",\n    \"mutability_config\": {\n        \"description\": false,\n        \"maximum\": false,\n        \"uri\": false\n    },\n    \"name\": \"Alice's\",\n    \"supply\": \"1\",\n    \"uri\": \"https://alice.com\"\n}\nAlice's token balance: 1\nAlice's token data: {\n    \"default_properties\": {\n        \"map\": {\n            \"data\": []\n        }\n    },\n    \"description\": \"Alice's simple token\",\n    \"largest_property_version\": \"0\",\n    \"maximum\": \"18446744073709551615\",\n    \"mutability_config\": {\n        \"description\": false,\n        \"maximum\": false,\n        \"properties\": false,\n        \"royalty\": false,\n        \"uri\": false\n    },\n    \"name\": \"Alice's first token\",\n    \"royalty\": {\n        \"payee_address\": \"0xeef95e86c160fa10a71675c6075f44f8f2c6125f57b4b589424f1fbee385f754\",\n        \"royalty_points_denominator\": \"0\",\n        \"royalty_points_numerator\": \"0\"\n    },\n    \"supply\": \"1\",\n    \"uri\": \"https://aptos.dev/img/nyan.jpeg\"\n}\n\n=== Transferring the token to Bob ===\nAlice's token balance: 0\nBob's token balance: 1\n\n=== Transferring the token back to Alice using MultiAgent ===\nAlice's token balance: 1\nBob's token balance: 0\n```\n\nThis example demonstrates:\n\n* Initializing the REST and faucet clients.\n* The creation of two accounts: Alice and Bob.\n* The funding and creation of Alice and Bob's accounts.\n* The creation of a collection and a token using Alice's account.\n* Alice offering a token and Bob claiming it.\n* Bob unilaterally sending the token to Alice via a multiagent transaction.\n\n---\n\n", "doc_id": "50c85f6f-70ae-45d8-ad86-6da34b0229ec", "embedding": null, "doc_hash": "049c6c80f16837435dcd2e00253c69ca52e3f15ce996ec5ae266bbbd275b9405", "extra_info": null, "node_info": {"start": 0, "end": 2010, "_node_type": "1"}, "relationships": {"1": "7df94b79-6f03-4bc5-acce-7f3cf5f68605"}}, "__type__": "1"}, "1a38b4cb-95eb-42d4-8c47-af911c31beef": {"__data__": {"text": "\n\nStep 4: The SDK in depth\n\n\n  \n\n:::tip See the full code\nSee `simple_nft` for the complete code as you follow the below steps.\n:::\n  \n  \n\n:::tip See the full code\nSee `simple-nft` for the complete code as you follow the below steps.\n:::\n  \n  \n\nComing soon.\n  \n\n\n---\n\n", "doc_id": "1a38b4cb-95eb-42d4-8c47-af911c31beef", "embedding": null, "doc_hash": "a7ebacf6da2d62cc696b8289c93b7cc9f1d0b6a6e43a1caf77104e31c9271ca2", "extra_info": null, "node_info": {"start": 0, "end": 268, "_node_type": "1"}, "relationships": {"1": "063762fe-2274-47f0-a715-0be672971055"}}, "__type__": "1"}, "607a202c-c01e-48a2-ad12-38cfd9602a71": {"__data__": {"text": "\n\nStep 4.1: Initializing the clients\n\nIn the first step, the example initializes both the API and faucet clients.\n\n- The API client interacts with the REST API.\n- The faucet client interacts with the devnet Faucet service for creating and funding accounts.\n\n\n  \n\n```ts\n:!: static/sdks/typescript/examples/typescript/simple_nft.ts section_1a\n```\n\nUsing the API client we can create a `TokenClient` that we use for common token operations such as creating collections and tokens, transferring them, claiming them, and so on.\n```ts\n:!: static/sdks/typescript/examples/typescript/simple_nft.ts section_1b\n```\n\n`common.ts` initializes the URL values as such:\n```ts\n:!: static/sdks/typescript/examples/typescript/common.ts section_1\n```\n  \n  \n\n```python\n:!: static/sdks/python/examples/simple-nft.py section_1\n```\n\n`common.py` initializes these values as follows:\n\n```python\n:!: static/sdks/python/examples/common.py section_1\n```\n  \n  \n\n\n```rust\n:!: static/sdks/rust/examples/transfer-coin.rs section_1a\n```\n\nUsing the API client we can create a `CoinClient` that we use for common coin operations such as transferring coins and checking balances.\n```rust\n:!: static/sdks/rust/examples/transfer-coin.rs section_1b\n```\n\nIn the example we initialize the URL values as such:\n```rust\n:!: static/sdks/rust/examples/transfer-coin.rs section_1c\n```\n  \n\n\n\n:::tip\n\nBy default, the URLs for both the services point to Aptos devnet services. However, they can be configured with the following environment variables:\n  - `APTOS_NODE_URL`\n  - `APTOS_FAUCET_URL`\n:::\n\n---\n\n", "doc_id": "607a202c-c01e-48a2-ad12-38cfd9602a71", "embedding": null, "doc_hash": "54d29063d3b8b77177179636dfd4e3af32816aa934c1f099df6e355a7e32148c", "extra_info": null, "node_info": {"start": 0, "end": 1554, "_node_type": "1"}, "relationships": {"1": "d3be3cbe-ef6f-4acd-baa4-761564685da6"}}, "__type__": "1"}, "3779cbe3-e90c-4ad0-9d3d-3234a71a13bf": {"__data__": {"text": "\n\nStep 4.2: Creating local accounts\n\nThe next step is to create two accounts locally. Accounts represent both on and off-chain state. Off-chain state consists of an address and the public/private key pair used to authenticate ownership. This step demonstrates how to generate that off-chain state.\n\n\n  \n\n```ts\n:!: static/sdks/typescript/examples/typescript/simple_nft.ts section_2\n```\n  \n  \n\n```python\n:!: static/sdks/python/examples/simple-nft.py section_2\n```\n  \n  \n\n\n```rust\n:!: static/sdks/rust/examples/transfer-coin.rs section_2\n```\n  \n\n\n---\n\n", "doc_id": "3779cbe3-e90c-4ad0-9d3d-3234a71a13bf", "embedding": null, "doc_hash": "e77c112de0a07a4beab468f5dd622a937509b9992a1037fa13e6aac3193c504f", "extra_info": null, "node_info": {"start": 0, "end": 549, "_node_type": "1"}, "relationships": {"1": "d51b39fc-0e1f-4ce9-9d94-99c72fb5473e"}}, "__type__": "1"}, "8b06ec3b-f6b1-47a0-9d46-838b633ad369": {"__data__": {"text": "\n\nStep 4.3: Creating blockchain accounts\n\nIn Aptos, each account must have an on-chain representation in order to receive tokens and coins and interact with other dApps. An account represents a medium for storing assets; hence, it must be explicitly created. This example leverages the Faucet to create Alice and Bob's accounts:\n\n\n  \n\n```ts\n:!: static/sdks/typescript/examples/typescript/simple_nft.ts section_3\n```\n  \n  \n\n```python\n:!: static/sdks/python/examples/simple-nft.py section_3\n```\n  \n  \n  \n  Since the Rust example here uses the same `transfer-coin.rs` function as in the Your First Transaction tutorial, it creates but does not fund Bob's account.\n\n```rust\n:!: static/sdks/rust/examples/transfer-coin.rs section_3\n```\n  \n\n\n---\n\n", "doc_id": "8b06ec3b-f6b1-47a0-9d46-838b633ad369", "embedding": null, "doc_hash": "a7df24e74b0ba81bbeb42a603f1b9b90194cf677be65b968776941411f9b973a", "extra_info": null, "node_info": {"start": 0, "end": 741, "_node_type": "1"}, "relationships": {"1": "370c37c4-6380-4876-9239-7edd31278eea"}}, "__type__": "1"}, "f552fd06-02fa-4830-832e-f57c6ae58d06": {"__data__": {"text": "\n\nStep 4.4: Creating a collection\n\nNow begins the process of creating tokens. First, the creator must create a collection to store tokens. A collection can contain zero, one, or many distinct tokens within it. The collection does not restrict the attributes of the tokens, as it is only a container.\n\n\n  \n\nYour application will call `createCollection`:\n```ts\n:!: static/sdks/typescript/examples/typescript/simple_nft.ts section_4\n```\n\nThe is the function signature of `createCollection`. It returns a transaction hash:\n```ts\n:!: static/sdks/typescript/src/plugins/token_client.ts createCollection\n```\n  \n  \n\nYour application will call `create_collection`:\n```python\n:!: static/sdks/python/examples/simple-nft.py section_4\n```\n\nThe is the function signature of `create_collection`. It returns a transaction hash:\n```python\n:!: static/sdks/python/aptos_sdk/client.py create_collection\n```\n  \n  \n\nComing soon.\n  \n\n\n---\n\n", "doc_id": "f552fd06-02fa-4830-832e-f57c6ae58d06", "embedding": null, "doc_hash": "0f8f1f9c7a41b7495dacd4917c485722b8a4781fb8a723977eb7e19e8e39c936", "extra_info": null, "node_info": {"start": 0, "end": 917, "_node_type": "1"}, "relationships": {"1": "49d3424d-68ba-47a0-a9b1-784dee3d5bfe"}}, "__type__": "1"}, "ffe673dd-67de-47c5-bc44-3c8db0d8098a": {"__data__": {"text": "\n\nStep 4.5: Creating a token\n\nTo create a token, the creator must specify an associated collection. A token must be associated with a collection, and that collection must have remaining tokens that can be minted. There are many attributes associated with a token, but the helper API exposes only the minimal amount required to create static content.\n\n\n  \n\nYour application will call `createToken`:\n```ts\n:!: static/sdks/typescript/examples/typescript/simple_nft.ts section_5\n```\n\nThe is the function signature of `createToken`. It returns a transaction hash:\n```ts\n:!: static/sdks/typescript/src/plugins/token_client.ts createToken\n```\n  \n  \n\nYour application will call `create_token`:\n```python\n:!: static/sdks/python/examples/simple-nft.py section_5\n```\n\nThe is the function signature of `create_token`. It returns a transaction hash:\n```python\n:!: static/sdks/python/aptos_sdk/client.py create_token\n```\n  \n  \n\nComing soon.\n  \n\n\n---\n\n", "doc_id": "ffe673dd-67de-47c5-bc44-3c8db0d8098a", "embedding": null, "doc_hash": "93792902a73bd7def4341cca5df45e0d1cbe160c4b75c958f19ba6ae3fc9bebb", "extra_info": null, "node_info": {"start": 0, "end": 937, "_node_type": "1"}, "relationships": {"1": "1f3d11fe-535d-42dd-ac7e-d08768a040c0"}}, "__type__": "1"}, "65a52edd-ea72-49c2-a1d1-2f3b1af01d29": {"__data__": {"text": "\n\nStep 4.6: Reading token and collection metadata\n\nBoth the collection and token metadata are stored on the creator's account within their `Collections` in a table. The SDKs provide convenience wrappers around querying these specific tables:\n\n\n  \n\nTo read a collection's metadata:\n```ts\n:!: static/sdks/typescript/examples/typescript/simple_nft.ts section_6\n```\n\nTo read a token's metadata:\n```ts\n:!: static/sdks/typescript/examples/typescript/simple_nft.ts section_8\n```\n\nHere's how `getTokenData` queries the token metadata:\n```ts\n:!: static/sdks/typescript/src/plugins/token_client.ts getTokenData\n```\n\n  \n  \n\nTo read a collection's metadata:\n```python\n:!: static/sdks/python/examples/simple-nft.py section_6\n```\n\nTo read a token's metadata:\n```python\n:!: static/sdks/python/examples/simple-nft.py section_8\n```\n\nHere's how `get_token_data` queries the token metadata:\n```python\n:!: static/sdks/python/aptos_sdk/client.py read_token_data_table\n```\n\n  \n  \n\nComing soon.\n  \n\n\n---\n\n", "doc_id": "65a52edd-ea72-49c2-a1d1-2f3b1af01d29", "embedding": null, "doc_hash": "e945a89a092ba423fa5a166e6fa283b9d7bea50c4c415c948c4e5e04aa082d00", "extra_info": null, "node_info": {"start": 0, "end": 982, "_node_type": "1"}, "relationships": {"1": "6e3cb22d-07ea-40ba-90c5-0b521d59715d"}}, "__type__": "1"}, "b3e15362-a41b-438e-a522-9ffcb899f9ee": {"__data__": {"text": "\n\nStep 4.7: Reading a token balance\n\nEach token within Aptos is a distinct asset. The assets owned by the user are stored within their `TokenStore`. To get the balance:\n\n\n  \n\n```ts\n:!: static/sdks/typescript/examples/typescript/simple_nft.ts section_7\n```\n  \n  \n\n```python\n:!: static/sdks/python/examples/simple-nft.py section_7\n```\n  \n  \n\nComing soon.\n  \n\n\n---\n\n", "doc_id": "b3e15362-a41b-438e-a522-9ffcb899f9ee", "embedding": null, "doc_hash": "4ff38b02eec820205fddfe23c3d2f2780fddaed8293be6ca8441ef702ff2a78f", "extra_info": null, "node_info": {"start": 0, "end": 363, "_node_type": "1"}, "relationships": {"1": "c7100ffd-9d3d-40f6-8868-73b9d6fcdc6e"}}, "__type__": "1"}, "214858a3-6254-4b85-9a4a-c9867385bb7f": {"__data__": {"text": "\n\nStep 4.8: Offering and claiming a token\n\nMany users of other blockchains have received unwanted tokens that may cause anything from minimal embarrassment to serious ramifications. Aptos gives the rights to each account owner to dictate whether or not to receive unilateral transfers. By default, unilateral transfers are unsupported. So Aptos provides a framework for *offering* and *claiming* tokens.\n\nTo offer a token:\n\n\n  \n\n```ts\n:!: static/sdks/typescript/examples/typescript/simple_nft.ts section_9\n```\n  \n  \n\n```python\n:!: static/sdks/python/examples/simple-nft.py section_9\n```\n  \n  \n\nComing soon!\n  \n\n\nTo claim a token:\n\n\n  \n\n```ts\n:!: static/sdks/typescript/examples/typescript/simple_nft.ts section_10\n```\n  \n  \n\n```python\n:!: static/sdks/python/examples/simple-nft.py section_10\n```\n  \n  \n\nComing soon.\n  \n\n\n---\n\n", "doc_id": "214858a3-6254-4b85-9a4a-c9867385bb7f", "embedding": null, "doc_hash": "1adf5083d9d10db54d8d3107631cefbe2d07fa05138352b7f22265e78415977a", "extra_info": null, "node_info": {"start": 0, "end": 826, "_node_type": "1"}, "relationships": {"1": "756ea687-1802-45b2-b54b-1e4372fabfaf"}}, "__type__": "1"}, "8199fd02-73ee-479e-87e4-46db5155337d": {"__data__": {"text": "\n\nStep 4.9: Safe unilateral transferring of a token\n\nTo support safe unilateral transfers of a token, the sender may first ask the recipient to acknowledge off-chain a pending transfer. This comes in the form of a multiagent transaction request. Multiagent transactions contain multiple signatures, one for each on-chain account. Move then can leverage this to give `signer`-level permissions to all who signed the transaction. For token transfers, this process ensures the receiving party does indeed want to receive this token without requiring the use of the token transfer framework described above.\n\n\n  \n\n```ts\n:!: static/sdks/typescript/examples/typescript/simple_nft.ts section_11\n```\n  \n  \n\n```python\n:!: static/sdks/python/examples/simple-nft.py section_11\n```\n  \n  \n\nComing soon.\n  \n\n\n---\n\n", "doc_id": "8199fd02-73ee-479e-87e4-46db5155337d", "embedding": null, "doc_hash": "92e0132225d7d644edc139dae416e006f03b894c3b0fc30259f4008113d12daa", "extra_info": null, "node_info": {"start": 0, "end": 800, "_node_type": "1"}, "relationships": {"1": "af923364-82d2-4714-8db8-cbb12845cbe7"}}, "__type__": "1"}, "9b022e6b-4577-453b-9b39-613388e1e2fe": {"__data__": {"text": "\n\nSupporting documentation\n\n* Account basics\n* TypeScript SDK\n* Python SDK\n* Rust SDK\n* REST API specification\n\n", "doc_id": "9b022e6b-4577-453b-9b39-613388e1e2fe", "embedding": null, "doc_hash": "abba31ff3c3a0d25566b68395c7e1a2639e55204a688077da46bf18eb91e456f", "extra_info": null, "node_info": {"start": 0, "end": 112, "_node_type": "1"}, "relationships": {"1": "ce79de12-7223-4fa2-9f79-aa918ac3818e"}}, "__type__": "1"}}, "docstore/ref_doc_info": {"1520839c-39c6-4606-9374-c85298f07d84": {"doc_ids": ["411c7e3c-1beb-43ac-9197-bb109604c743"], "extra_info": {}}, "c620ee1e-fdc3-4aa3-94e3-f1587528637e": {"doc_ids": ["750533ba-74dd-4054-a8cf-0fe3fae5281d"], "extra_info": {}}, "02afa3e4-b312-497a-bb70-d5522a5ac7c3": {"doc_ids": ["721cbe13-c4a5-4567-bd94-660289ad9ade"], "extra_info": {}}, "d7fb17a1-fcc9-472a-9602-01fa4c10391e": {"doc_ids": ["09bcf07d-8a64-43df-9f6d-176ff6df47db"], "extra_info": {}}, "3d52337a-3302-407c-a581-19b7605e4fc4": {"doc_ids": ["6147e316-8824-461a-bbab-7dfceaa53ded", "41345f25-7df1-4145-b9e0-bf0eaa8cdaa5"], "extra_info": {}}, "7b7ace7e-79ea-4921-b878-96b3786f4d87": {"doc_ids": ["4d8c05d9-29f7-442f-ba30-8be612426e3a"], "extra_info": {}}, "fc905d70-937f-40ff-841e-29863618b4c3": {"doc_ids": ["625dd722-6d69-4d33-b6a6-0655d687a78a"], "extra_info": {}}, "c7ca15ff-0101-4c1a-a907-cb3ab559ea80": {"doc_ids": ["8b62d72d-b688-4af1-aad3-9118ed72f9eb"], "extra_info": {}}, "2867605b-1d27-4763-be0c-87296155048c": {"doc_ids": ["519e137c-f816-4cfb-99d2-d0f7be89ca4d", "60c52bd9-ae3d-44ac-85b2-5609f92059be"], "extra_info": {}}, "e6597174-9728-495a-b3d4-3816822ec4ee": {"doc_ids": ["a00fe0da-04ba-4371-a27f-6431475f383f", "5327bda1-38e7-4f26-9b71-ab256e56194d"], "extra_info": {}}, "34b1a7ec-c755-43dd-8f4d-a04633757216": {"doc_ids": ["0dae7551-e030-4e4b-a1f0-90c4857c644a"], "extra_info": {}}, "38d218d5-3bd3-47e2-a03b-556729d42419": {"doc_ids": ["951e3c2e-0348-42bc-acd1-957de2ddf34e"], "extra_info": {}}, "7a037782-4e87-4084-b156-f352b0bd0e7e": {"doc_ids": ["4e58f121-b7b7-4464-aac0-25cb44382e34"], "extra_info": {}}, "c0744271-6b6e-4eee-9915-9c457e109d4b": {"doc_ids": ["e5a1d780-ec91-4478-9641-51635f395bdd"], "extra_info": {}}, "852ea680-098d-40d4-b489-7e2c705c32fa": {"doc_ids": ["52a0eea5-76f6-421b-a4e1-63150bbc74a1"], "extra_info": {}}, "616ff216-04a1-45f7-9302-bcc4a19410b3": {"doc_ids": ["0fd4c9b8-6283-494c-baa9-f449deaf5759", "5bd49d81-5a52-40a4-b934-6e5443a3cf30"], "extra_info": {}}, "bc802574-270a-43db-822e-82d22157fcce": {"doc_ids": ["4bce45a6-d73e-4fe8-916d-d7a6e2443c33", "626e2c5b-854b-4417-b876-799fdebd0d23"], "extra_info": {}}, "2ccb1719-8203-4770-ba8a-13dd6d357f9f": {"doc_ids": ["9f370f1f-1b39-4d12-94c0-93d1b1b917fb"], "extra_info": {}}, "c80a44ff-692b-402c-a86c-adca9eca169c": {"doc_ids": ["97941345-80e0-421d-8aac-b39f09e86a5a", "adee4b3f-f712-4a3e-8109-9a4aa4bb855f"], "extra_info": {}}, "fa7129c9-b9b8-4c19-8933-89496232481e": {"doc_ids": ["44f68be3-69a6-4fa9-9c58-3807afaebca1", "5e0b0153-a2f8-45da-bb63-d0a798bba14b"], "extra_info": {}}, "ad7614c5-43d0-433d-ab59-ad929c72e48d": {"doc_ids": ["dfb62857-07b2-404a-8e30-abfedbb91abd"], "extra_info": {}}, "3d68960d-0f3e-43fc-9a89-0990de81e123": {"doc_ids": ["7d0b7723-1ed1-4ed7-ad73-3da0f732276b"], "extra_info": {}}, "127239ca-bb93-43f0-a835-e3f7acc14d03": {"doc_ids": ["db308281-f993-42f8-87f3-b90b32a73077"], "extra_info": {}}, "eadb8659-0ccd-4f68-b08e-ede2cd89269f": {"doc_ids": ["d29701f8-ca52-4c09-99be-1f36b19ec8fc"], "extra_info": {}}, "42d78ba7-1a94-4b69-a217-844868fca407": {"doc_ids": ["63548690-6b01-4522-be60-a751655d1aa4"], "extra_info": {}}, "a06ce028-8075-43be-a84e-ae5847f35efc": {"doc_ids": ["00c4a71e-c1ed-4e72-9f83-bbea15acf663"], "extra_info": {}}, "6759507f-de90-4879-a266-d2a74d7f4120": {"doc_ids": ["df07ca71-4e08-46e9-bfa9-aacecd4ea723"], "extra_info": {}}, "bb5ca9b3-4884-427f-86a0-6b1604dc1ac1": {"doc_ids": ["57df0268-a30f-4a93-ba49-28addb4a164a"], "extra_info": {}}, "169621a5-afd6-4fcf-9f20-6a261fe91a8e": {"doc_ids": ["6ff35f43-5d4d-4473-a1aa-3c8309d2d489"], "extra_info": {}}, "c84e89d2-1666-413d-8ba2-01d029871434": {"doc_ids": ["6495f373-84de-43f8-8a48-1eb964a6faef"], "extra_info": {}}, "15a569d1-0086-472a-bdc1-00c7bc5ffb8a": {"doc_ids": ["e1fb0f0f-72f2-4469-9630-56b431c19109"], "extra_info": {}}, "71993c31-065d-432f-9d2c-9217c5da13da": {"doc_ids": ["d9721f30-1880-4e87-b774-e719f2f47ae1"], "extra_info": {}}, "c0aa0062-8c4a-4d38-b09b-8773dbb9f14a": {"doc_ids": ["45c89050-beb0-4af6-81c4-faf8a2598825"], "extra_info": {}}, "2b7ad00b-c21c-460c-913b-18a72b3b1757": {"doc_ids": ["087c3f1d-4d98-480f-a16c-76a5ff174ab7"], "extra_info": {}}, "48522e48-0ac6-440f-9ce9-ada4b1cfc603": {"doc_ids": ["4be38050-a07e-4c68-873d-ff7598505063"], "extra_info": {}}, "972e2322-4782-4eb4-a2b2-24e415edbe53": {"doc_ids": ["0dec15f5-2d53-4565-bd11-acee7319c413"], "extra_info": {}}, "7bb67514-d18c-4ee8-95c3-d6241fdc23d5": {"doc_ids": ["2f572ca5-f8ad-4a71-bfb5-6fee986fe1e9"], "extra_info": {}}, "fc87315e-111c-49a6-aea1-d906443f0c9a": {"doc_ids": ["36b07d8d-96dd-4dc9-b672-5128d1a01497"], "extra_info": {}}, "4dbe88b8-5415-4ed5-9dfe-3ced5bbb3ab6": {"doc_ids": ["e17fe6f2-360c-489c-9641-3c38069e7301"], "extra_info": {}}, "1b87fece-b1b5-4b1e-8558-98ffa1d0f476": {"doc_ids": ["70fcada0-7b8a-4bdd-95ce-8447db9075e6"], "extra_info": {}}, "f831ea3d-9558-42b4-b53c-686901ecc8c7": {"doc_ids": ["279b3cd3-102d-42eb-b93e-a04c6d983d90"], "extra_info": {}}, "78d90413-a3e7-4b1f-a049-bb717a56bf23": {"doc_ids": ["fcbe9c2c-b5d7-44d8-b53a-01eabeff1f64"], "extra_info": {}}, "16c41b01-544a-4a87-b5e0-8270585aa7d2": {"doc_ids": ["b0f9b828-9fba-4cc0-941e-fa8c3075e8ff"], "extra_info": {}}, "e9827f02-ee2a-417a-83c0-99eeec2abd1f": {"doc_ids": ["9e7d32fb-4430-4aa7-ae72-1254daf80de7"], "extra_info": {}}, "bc797cf0-0a9d-4a2a-afa2-be40ef1f34a9": {"doc_ids": ["933a0c68-4100-4e27-beec-07d8458e2997"], "extra_info": {}}, "5d8f268f-3d2e-4da4-a63b-2b102ab57a65": {"doc_ids": ["cbd09dab-640d-45dd-9d6f-bb9a118a233f"], "extra_info": {}}, "16c70f3f-9048-4398-bd57-080878d6b14e": {"doc_ids": ["bba20394-f3a3-44ff-bc73-6b5663b4e763"], "extra_info": {}}, "99474d3e-4c2f-41da-8971-95815d7cc847": {"doc_ids": ["d7203086-1578-412b-aded-7815fc5da8db"], "extra_info": {}}, "4dc290df-e91b-483e-8886-53eb1e39cdcc": {"doc_ids": ["e4ff1d3b-3cc4-4efa-a069-6276adda50e5"], "extra_info": {}}, "b56fc14b-bf76-4dcb-97c8-7f68e13f6a19": {"doc_ids": ["50cd5873-0d7d-49f5-8070-c6617cef4f11"], "extra_info": {}}, "6abbc342-b6fd-493f-a448-ee6643ea6d46": {"doc_ids": ["9952510b-61c2-4822-ae61-5c2afb794e6b"], "extra_info": {}}, "6a0ad71d-74c8-4615-ab1e-c991ddf7fcd6": {"doc_ids": ["fc48ae4d-74c7-40fc-9885-afd357f4ffb5"], "extra_info": {}}, "aea2a5f4-3ef7-4350-b5a6-773655c459c1": {"doc_ids": ["824fd1d0-9e0d-4b4d-95a2-56cffff14119"], "extra_info": {}}, "ca498721-dbc3-4b95-92a2-57b45eb12cd2": {"doc_ids": ["a452aecc-4a55-48f1-aa3f-0a14b9244d1e"], "extra_info": {}}, "47ec0cf2-b9d5-461b-bea3-b6b2f9ec1f92": {"doc_ids": ["927b5f40-cbdb-45ec-9783-2734eb463dba"], "extra_info": {}}, "a12e6d2d-8d38-42c9-9146-77685bd8c8eb": {"doc_ids": ["db5b05d5-67f2-433f-a45c-9860f0cbf739"], "extra_info": {}}, "6e102e31-b24c-4557-a46e-af2087419c8d": {"doc_ids": ["4050cd38-124c-4968-8da2-0d9b2d5d377b"], "extra_info": {}}, "074dc6b8-d518-4198-862f-6700ab846e76": {"doc_ids": ["3782b676-55b8-4b9e-957f-18eed6bb5846"], "extra_info": {}}, "8a87c489-d355-4fd0-9590-a87dc827b308": {"doc_ids": ["442f3e60-8ab6-42ed-8b26-5998d961189c"], "extra_info": {}}, "d6730067-f0d8-48a5-8645-7c3fb76580a6": {"doc_ids": ["fb9de402-f21a-4d20-abc3-d82702ddd3e5"], "extra_info": {}}, "982d037b-8336-499e-80ee-479990351182": {"doc_ids": ["c16a6d07-90a5-4533-b4a2-dbb7896be4a0"], "extra_info": {}}, "df8a357d-ce98-41d3-b845-626634805c64": {"doc_ids": ["9908ad1c-b84b-4431-8d60-a5d859f0a4e3"], "extra_info": {}}, "c2363f73-4099-4a2d-96e8-3b0f840267fb": {"doc_ids": ["fbdca8b9-8848-4cdf-a1e7-178045536364"], "extra_info": {}}, "94a74655-b6bc-4ec0-93af-d85a2cfc4dd1": {"doc_ids": ["0bf87865-677d-4c2d-804c-411d9bcba782"], "extra_info": {}}, "e2164619-e248-41e9-a9fa-65f78be79521": {"doc_ids": ["4c3cca50-b920-4a22-be2b-09a5a8a9dc3a"], "extra_info": {}}, "5fdd3446-ea35-47bf-b266-689389375fed": {"doc_ids": ["b6cccba3-5b59-4e2d-ba8a-80d2797e2d4a"], "extra_info": {}}, "b77d12ca-f1e7-4a9e-a82e-de322ea5c482": {"doc_ids": ["806d4fce-13c1-4bca-ba65-d5a0864c443d"], "extra_info": {}}, "2eca615b-bd56-41c7-9e50-67b350bd68f0": {"doc_ids": ["4cf5c43b-1259-42a2-aa66-21e53a0fa11f", "f4856a62-7150-4152-b5bb-b3b80e86f26b"], "extra_info": {}}, "1c11c3be-df1f-4dd3-93af-94c49aac4d9a": {"doc_ids": ["6d6922fd-5666-40e6-abdb-15ff50079e80"], "extra_info": {}}, "d8cbd086-abfa-4833-af4e-85261e474969": {"doc_ids": ["3aa7fdc2-c9bb-40b9-889b-b83be8d89823", "f85c4806-2300-401c-ab74-8550c071a440", "0e91573e-d513-457c-8033-8458449dc3d3"], "extra_info": {}}, "143da180-8f56-4001-873c-aa822b6df721": {"doc_ids": ["b706254b-b3c3-4341-8d0e-104a73d6b198"], "extra_info": {}}, "cd7a6bdf-b758-4eb2-ab2d-bc2e75d27bb1": {"doc_ids": ["adb3d872-89d7-41be-92b4-b1b9539378b9"], "extra_info": {}}, "f3043cae-38f6-4ca5-9ee4-04bff38b0f59": {"doc_ids": ["e497892f-1099-4896-a258-43a835eba53f"], "extra_info": {}}, "4c7cbde9-3a96-48f0-b793-24ad309aae6d": {"doc_ids": ["52bd3a08-a49c-4932-90d6-82c955b31bdb"], "extra_info": {}}, "e778b77b-1d64-409d-92c4-e12eab16249e": {"doc_ids": ["f929d05c-e837-4800-972e-22df56efaec6"], "extra_info": {}}, "cb8e1227-91f5-42d8-be1e-eb5206bf63e6": {"doc_ids": ["d04faab0-4766-42fb-bbaa-4831489305a3"], "extra_info": {}}, "0db51218-efd5-4721-a94c-80012873040e": {"doc_ids": ["7576d806-0a40-4f2e-a9e0-584c991d563c"], "extra_info": {}}, "915214af-22ba-4b5a-93cf-b22c6fff174a": {"doc_ids": ["1af32867-a0ed-4695-b3a0-283ca8bf68b1"], "extra_info": {}}, "60ff1628-1648-45d4-be36-305c633525bc": {"doc_ids": ["6b332c13-3788-4953-ba16-6c28a361de69"], "extra_info": {}}, "aa89e85d-8568-4848-a27e-cfd9332e8540": {"doc_ids": ["ab626cdb-b650-4d20-9d49-d943c64cdbfe"], "extra_info": {}}, "c45899ae-fcf9-47f0-805b-14e22ce238da": {"doc_ids": ["13eab271-b08d-46d3-8643-c6b06e9fbd5d"], "extra_info": {}}, "9d24696c-f5c0-4ee3-af7d-d939184c52d5": {"doc_ids": ["1f34fd93-ef76-4618-8f44-5d8e74b289ee"], "extra_info": {}}, "791c4164-2c00-4a8b-b551-29f35937a60b": {"doc_ids": ["7635db93-f5ef-43d4-8e6f-68a734da3f0b"], "extra_info": {}}, "8b4151a6-a91b-446e-85f8-a1bdfe0fda5e": {"doc_ids": ["8574282d-bd2d-4ac2-b54b-52cc3c8d1ce3"], "extra_info": {}}, "46ff51c5-57d1-44e1-a847-ac2896405454": {"doc_ids": ["2b2d754e-aa60-4871-a8c9-56657d530e1c"], "extra_info": {}}, "ec15ed41-bd22-44d3-a967-1dd29e6ee0e5": {"doc_ids": ["1d9c8842-ea6e-47c4-9062-fcfe7da23aa9"], "extra_info": {}}, "ce69f219-7c3e-4016-9a66-b59697f8bf6a": {"doc_ids": ["a0577b15-3d3f-437b-88d6-1d9104e222da"], "extra_info": {}}, "6a5f5c7f-cfe5-46eb-9fed-eb66533e3e9b": {"doc_ids": ["052aa8ac-ce78-40f9-9db8-b6676a58931a"], "extra_info": {}}, "c0161f82-09b2-4c03-9d14-72e032de3e8b": {"doc_ids": ["1451b517-b8c7-42b9-9b9a-82262e95c71f"], "extra_info": {}}, "1d64d596-a2a1-4e17-abca-4cccf2c335d3": {"doc_ids": ["5f050d11-e4e6-4335-951f-ed1617f0fd0f"], "extra_info": {}}, "e49cd0fb-6d4a-4540-9c1f-36f38636079f": {"doc_ids": ["a7d56ef0-fad3-4168-a247-e7852e5c1ecd"], "extra_info": {}}, "a937eb7e-c6ef-46b5-98d0-7067879a157c": {"doc_ids": ["94c6cffb-53fa-41eb-bf44-3df541e56edf"], "extra_info": {}}, "8894a1d6-7e1f-437d-9f89-d42648400a64": {"doc_ids": ["076eb649-1213-4614-ad9c-87bb8a69f825"], "extra_info": {}}, "25fe72cd-2b18-4c74-9af8-e44db8c3c117": {"doc_ids": ["cbb96750-30cb-4d1e-8c66-94c024c37306"], "extra_info": {}}, "f973fbf2-9044-4e55-ae3f-1b6b49d1f7f8": {"doc_ids": ["23a62729-e019-4516-8bf5-8bb24bcfb6ba"], "extra_info": {}}, "1f57575c-cca8-466c-93de-8c6c24409656": {"doc_ids": ["33c84929-7654-408d-aa21-cc1c553e07e2"], "extra_info": {}}, "48176a9f-be9f-4c2e-bda2-c62f3cc8fb76": {"doc_ids": ["c6090a20-e9a4-4e43-a505-8ab2a5d8636a"], "extra_info": {}}, "2ad8bd47-dfb8-4743-b9d9-48e7cbb50dec": {"doc_ids": ["2a241c10-6ec5-402f-ba9e-6ee1ae445fa1"], "extra_info": {}}, "334efaae-9363-4e9e-914d-d4626e4c6ebb": {"doc_ids": ["fc2a32e5-7430-497c-b0a1-25a86a8e2ca0"], "extra_info": {}}, "6d991e6f-9ec8-4e21-8746-5fb68288b04c": {"doc_ids": ["82e352f1-1933-4d47-802b-6bf7a0cdc952"], "extra_info": {}}, "edbaf2b5-1201-4996-b9de-3522e2567006": {"doc_ids": ["72bb9198-4203-43be-b525-b85a39784ba8"], "extra_info": {}}, "87b743ce-cf39-43b2-a7e8-940b5a027300": {"doc_ids": ["1024b064-b8d1-4207-a813-2ad702ac6f5c"], "extra_info": {}}, "2e04bd15-4cdb-46b0-90a5-9d13ee32fe73": {"doc_ids": ["2b0965a3-d815-4710-87d1-03735f1c8c5f"], "extra_info": {}}, "f0054e68-0b29-4f1b-960b-7a6a40e683b4": {"doc_ids": ["3445b1a1-75a7-4de5-973d-e8b589db8476"], "extra_info": {}}, "2b7b65f6-e522-4990-a42f-85ce5351cb27": {"doc_ids": ["c40312e3-5840-429c-b6de-18b90730de14"], "extra_info": {}}, "480c4c50-01de-47c1-8976-b5499d5727ee": {"doc_ids": ["ba93bc63-b4ba-42b6-a426-f3b3c3745d41"], "extra_info": {}}, "f74b6d1d-2f4b-4dbe-926a-df80adc0c30d": {"doc_ids": ["33b024b0-0ce9-432e-81b1-29602b820587"], "extra_info": {}}, "c0d31a33-b34e-41a2-8c2b-dc2ceb8588d3": {"doc_ids": ["15cf9b35-256d-48a8-acef-6b1f4cd1683e"], "extra_info": {}}, "660fef90-a5d6-47e1-8c2d-e6d626375228": {"doc_ids": ["98c1df8d-e712-4769-8ce8-d5b9de0325ce"], "extra_info": {}}, "e9507ee7-c46c-47c7-9bc8-dd1f6990dd02": {"doc_ids": ["7a07104c-80b3-48c6-bf3b-16686c2d1bcd"], "extra_info": {}}, "3befa9a3-4162-49db-831f-bb041d738bf4": {"doc_ids": ["715267d3-7b86-4204-b0a1-63eb6c544727"], "extra_info": {}}, "89d6e540-9406-485b-b05d-5e4e70f73459": {"doc_ids": ["57a0a0d0-71a9-4632-bb1c-451b00081118"], "extra_info": {}}, "0e9b29f6-0cee-4649-8cf6-228a644c6dbb": {"doc_ids": ["d92bfbdb-c38e-4607-8327-d83160e686e0"], "extra_info": {}}, "fac6f5af-4365-44ae-b719-3e5ae6e78f2e": {"doc_ids": ["67074dff-6e94-49ea-8925-fe62c5024871"], "extra_info": {}}, "cc02173f-aa3f-4345-a477-dd38f0185ab2": {"doc_ids": ["753661b2-0bcb-476f-8b92-a7d1f0e9b914"], "extra_info": {}}, "e8f2ce55-2328-4ab0-9130-ff7b98722d45": {"doc_ids": ["6c950f35-9098-470a-97db-0bc7dc87ed24"], "extra_info": {}}, "8c040cb0-0710-48a2-97ae-a417bd913d89": {"doc_ids": ["2ac21c51-a88e-4ab6-8a0e-cc4b5bb95a33"], "extra_info": {}}, "a0165a7c-cf46-4f17-a0e1-12fa39b78104": {"doc_ids": ["61d30b08-831a-45c9-bda4-0071ab9b9a43"], "extra_info": {}}, "9ddbb61e-a411-4a8f-8781-8b2ff7884fe6": {"doc_ids": ["97d16bb8-1c3d-44d5-87fb-1bc582e1000f"], "extra_info": {}}, "7327a7e5-c961-4af7-b8a4-4fcfbf6ad829": {"doc_ids": ["97d9ad51-0302-4585-80aa-88e51ad85a7d"], "extra_info": {}}, "cbbfc76b-afc7-4aeb-bd00-f31c4ee55c19": {"doc_ids": ["a2d22b37-4a1f-4560-8d77-916c352d054b"], "extra_info": {}}, "2b6a8d17-e2b3-46d9-882d-6785df726956": {"doc_ids": ["66f8b6db-168d-4910-b7b0-520ff0e29691"], "extra_info": {}}, "c2836ab8-82ba-42df-a0e3-1f96e1835ab1": {"doc_ids": ["1ed62257-1252-454e-9b08-e38240061494"], "extra_info": {}}, "8b0f27cc-d560-43c2-b10b-0d96526e2775": {"doc_ids": ["d6e9306b-a779-454b-a57f-71f59b0e914c"], "extra_info": {}}, "e33be43f-fdd9-42b5-995e-69d8b96d1eb3": {"doc_ids": ["85cf6a96-c68f-487b-a5f0-93527898bcf5"], "extra_info": {}}, "c3295986-18be-4111-ada4-6bb2ad802981": {"doc_ids": ["4b64d12a-2ae9-423f-b5a7-81528d83bc0f"], "extra_info": {}}, "1e963e75-85fb-480e-b55a-4e886d4c3957": {"doc_ids": ["1c0e5835-7a7d-415d-9673-43a782c2acee"], "extra_info": {}}, "525e365a-d540-4232-9e3a-7c5e101f45ee": {"doc_ids": ["aa9fd927-84de-4a37-879f-6e059a033e62"], "extra_info": {}}, "27e58da6-334f-4b03-910e-7af9f3965d60": {"doc_ids": ["9d568610-fe3b-486d-be66-00a7a9a7fa0b"], "extra_info": {}}, "2abeee9f-fd82-487f-97cf-7c6032be04b4": {"doc_ids": ["dacea7d4-1102-477c-9e18-88d30d66f9bd"], "extra_info": {}}, "af0f35e2-f78a-47a6-a58e-7d851bd35cdc": {"doc_ids": ["5320f622-ad68-4ca2-b2c0-51aa0d674451"], "extra_info": {}}, "b1acbcd0-8366-4a23-95bf-536b71626ba9": {"doc_ids": ["6109c1f2-7cb4-4ce3-981d-52f22320ab3d"], "extra_info": {}}, "ab059d8c-b34e-4b71-9c3e-40248d1d66c6": {"doc_ids": ["1e7691bd-1046-4969-aec0-3266ce2693fc"], "extra_info": {}}, "2e19d76e-c578-4a7c-af63-162a9180d567": {"doc_ids": ["613fb520-f3d0-45f4-ad89-ae824daf140b"], "extra_info": {}}, "bf67c4bc-99f4-44e7-8483-9fa0335fd078": {"doc_ids": ["c8574707-f114-4542-84da-d7012ba066e2"], "extra_info": {}}, "019a6994-3a13-4dca-926e-fe8bbf87282e": {"doc_ids": ["e8538c10-c54c-444c-aaae-8f0a549c3103"], "extra_info": {}}, "e6f32e24-2597-409d-9317-7bebed40e495": {"doc_ids": ["a834b0ee-fe41-4e2e-91e1-23a33db2490a"], "extra_info": {}}, "5a1ebc21-d77f-4d58-b6ac-3c3b9fee89d7": {"doc_ids": ["9324f572-8a9b-48a7-812d-c5e36a2559a8"], "extra_info": {}}, "7bc21c50-0754-471a-ad86-434d5a2bd58d": {"doc_ids": ["f68c731f-71a8-41a6-a68d-16ec2cafe2e6"], "extra_info": {}}, "92f89d70-1049-465a-b918-24d4b82c8255": {"doc_ids": ["31752edc-484e-4fd1-8558-8acab22aca26"], "extra_info": {}}, "2af9cf63-18ee-4378-bf28-ca38b05aeed5": {"doc_ids": ["da1dd7fb-38d8-4c8e-8ad3-47dc2841c682"], "extra_info": {}}, "f5cf5591-567a-4231-b384-22d7fc4f09bc": {"doc_ids": ["ecc52911-30ae-41f5-83e6-571558f54e8b"], "extra_info": {}}, "e5045bf5-591d-425b-adc1-4d69fa4675e2": {"doc_ids": ["6444e38d-9df2-47bd-bc0f-245cc0d5de18"], "extra_info": {}}, "3b3852e2-127f-47c5-90fc-585a9859c0d3": {"doc_ids": ["d7f03896-1ed3-43fa-9e77-3556d3c93939"], "extra_info": {}}, "ecb07da7-2655-4d33-bd9b-f77e05d05d44": {"doc_ids": ["f2b7d0d0-a598-48b2-843f-ac56c74194c5"], "extra_info": {}}, "0749b119-995e-48ae-bb69-fe09f09a9850": {"doc_ids": ["d6d468f3-26a5-4b46-80d8-1982b0779661"], "extra_info": {}}, "d1806af9-bfb9-4d8d-acf4-5d4246216d6d": {"doc_ids": ["f51dc0a9-0540-45b7-a7f8-7c9639e695da"], "extra_info": {}}, "a9eb8193-9069-4b90-a2d5-d447a2dc961e": {"doc_ids": ["34e3298b-96b3-4482-bbc8-18b0f8ac3fa9"], "extra_info": {}}, "02eb04c9-a672-415f-bc5c-c5e935a50e3c": {"doc_ids": ["36803657-4964-486c-b4ec-ea415145fe6f"], "extra_info": {}}, "cbad586d-0a93-4906-ab69-4cb6bf4aa99a": {"doc_ids": ["2eda3da2-bd5d-4c22-90f8-ebe8bd22343a"], "extra_info": {}}, "c83121a1-c44f-43bd-824c-94c26f6c8c1d": {"doc_ids": ["034ea6d9-316c-4e3d-840e-4d38a832d120"], "extra_info": {}}, "b6a0e7b1-764d-4d32-99c5-24f5c5b8d10f": {"doc_ids": ["bf92c302-03e5-4455-8751-a824acd64ca0"], "extra_info": {}}, "80b37a02-ff7d-43dd-b8f2-d3829ae02fa1": {"doc_ids": ["0b9e85ec-1210-4d3e-9fdc-ec0348ca9ca6"], "extra_info": {}}, "5234c9e3-9cbf-4951-ada4-5c1405dffa2b": {"doc_ids": ["ea23e135-a3df-4861-9be5-69209e2898c1"], "extra_info": {}}, "1f0d5694-8e26-4de8-9db9-60e1993a68eb": {"doc_ids": ["88c53405-c0c0-4345-8082-7b2b4c345102"], "extra_info": {}}, "3bc63d9a-e8f3-40e4-b7a5-f5edc7364a22": {"doc_ids": ["c15ec020-a243-495a-8d56-0a8b7cb157d6"], "extra_info": {}}, "522a6bed-c8f3-4c5a-89bf-dd917a2c5e35": {"doc_ids": ["b96994cf-ea91-401c-bc81-23329451d513"], "extra_info": {}}, "18f49c3f-2db3-408a-a525-b8d57fa44643": {"doc_ids": ["996e9cfe-52b9-4741-8e7f-527e55b88d4a"], "extra_info": {}}, "25da778e-e907-47c2-9bfa-bcfa55b7ba9e": {"doc_ids": ["b732f938-a3df-428c-8bb0-979ee91e76d2"], "extra_info": {}}, "2d52fc64-e7b9-40a6-afb5-e83119374233": {"doc_ids": ["54552430-52b1-4a39-a7ba-c5171a45c41f"], "extra_info": {}}, "061cb74b-7640-4c77-9259-96388bbf537e": {"doc_ids": ["56b25cff-580e-4468-8d15-3c0ff0dbacd2"], "extra_info": {}}, "6699188b-eb96-450a-b050-011964163429": {"doc_ids": ["b1c24deb-3844-4b92-bb21-f382d7763dd4"], "extra_info": {}}, "5908dc10-f8a5-4543-99f9-b134434cf24f": {"doc_ids": ["98a0a9c3-1882-4a79-9760-e62711664b48"], "extra_info": {}}, "1ceed36b-12ab-45ca-b86d-80891d687c4d": {"doc_ids": ["6dc0edeb-a33f-483f-b16c-0210c6a38186", "d44fcdf2-d0c7-4eda-8b95-36d3566cefa3"], "extra_info": {}}, "de7c6581-002a-4218-af66-7fe54b219450": {"doc_ids": ["5bd7b091-0e07-4803-b11c-6d20e9b1ee60"], "extra_info": {}}, "ff27052e-3693-411c-b33a-59ca82263b83": {"doc_ids": ["32aaa329-d9b6-486e-91d7-4e4185849b5a"], "extra_info": {}}, "4114f7e1-083d-49c0-ae4f-c466644ca45a": {"doc_ids": ["04f37cf7-793e-4e0e-a103-8c08c5d0b6fd"], "extra_info": {}}, "128e1942-554b-42f7-9af7-dc702c902eea": {"doc_ids": ["f64c5735-6f22-4761-8db2-d4cfc5618688"], "extra_info": {}}, "0b31f048-b4e4-4572-aa9a-a5d82641ffbf": {"doc_ids": ["45229e73-85a4-43c4-822a-d9d7cab01705"], "extra_info": {}}, "dd9f3609-b86f-4182-9cd3-3235904e2b2d": {"doc_ids": ["9f47141c-c399-4800-903d-fd2fce7489fa"], "extra_info": {}}, "d1ba25db-df33-4f07-a7a8-3d2f199e2657": {"doc_ids": ["6bf38941-9d51-491b-ae6a-781b7b049fff"], "extra_info": {}}, "d0c32e8a-c81d-4c90-a150-7d4c4e836cce": {"doc_ids": ["c68845f2-4dff-416d-82ca-f2a777e77034"], "extra_info": {}}, "efaf5069-4788-46dc-a699-d5c6b7b44391": {"doc_ids": ["7b2817a9-e8a6-48af-9cfb-0cb8fb4e6fae"], "extra_info": {}}, "df74bdb3-b37d-41f0-a89b-fdbb015384dd": {"doc_ids": ["360d4418-8d59-44d8-9cd9-45be6d2480fa"], "extra_info": {}}, "e4d0a55b-4ec4-4c38-beb6-3c9af10c7908": {"doc_ids": ["08c9a0bd-e818-44d6-879e-d462df175309"], "extra_info": {}}, "6faed02b-71c5-4fd8-a2ab-53ff77e143d4": {"doc_ids": ["06eda633-268b-488f-9f60-0ea995646847"], "extra_info": {}}, "fa9b0ef8-52fb-4144-a48f-841daee99727": {"doc_ids": ["a84e3752-d4c4-4713-98e4-37211d342cc6"], "extra_info": {}}, "29955402-1da1-4d29-b740-c589706aa431": {"doc_ids": ["051ef653-4db7-443b-8130-cacec4a11a8d"], "extra_info": {}}, "442a9249-faf3-4a71-94db-9fbd3112f40c": {"doc_ids": ["995b239d-fb2b-422a-a19f-bd547dcc5b55"], "extra_info": {}}, "5b37c3be-6f48-47ec-8c84-4a3c332328b3": {"doc_ids": ["8a7c525d-9c82-4b8f-b8e8-d1b7a467a143"], "extra_info": {}}, "f5439aab-9a86-4a5d-ba94-7032115affba": {"doc_ids": ["1f3a9443-5f90-463d-a05e-7f07feaf50ef"], "extra_info": {}}, "48a3c0a7-2482-4429-8572-715e3d1e9724": {"doc_ids": ["5b3ac9e7-30ee-4e50-8d72-79ed7982b554"], "extra_info": {}}, "2b76a650-8dc7-458f-ae36-8c49b36ca506": {"doc_ids": ["950b29a9-855c-4af3-9277-df62f998997b"], "extra_info": {}}, "db9ab3a4-4029-4b9b-9bf1-c7c0820b31f9": {"doc_ids": ["f9a1890b-148b-4093-8905-b6d6d05d35ac"], "extra_info": {}}, "e34d5acc-9fb3-479f-9493-8000dc79513b": {"doc_ids": ["faf54e05-1451-4772-8779-db33bf6cc6e2"], "extra_info": {}}, "42adfb17-c62e-4f3f-b881-439956e8b16f": {"doc_ids": ["08f62edf-c8b3-4132-a70f-2b25b8cd648f"], "extra_info": {}}, "5d3f7d14-9f3e-4257-9da5-be08d1f01d32": {"doc_ids": ["69e3a16e-06a5-4ba9-83b5-5a3816d39229"], "extra_info": {}}, "78532feb-7f19-4be6-b28d-52d5413e794d": {"doc_ids": ["a781a603-3ad2-4a38-96a3-d7783c83b952"], "extra_info": {}}, "850f017c-2fab-46b4-b053-e1115354b550": {"doc_ids": ["5273de13-3ebc-4e36-b2b1-6833df7888e9"], "extra_info": {}}, "f066d93f-2f82-4bc8-b8df-7693408984a9": {"doc_ids": ["42faf02e-4bf1-417b-a2b0-2f5647ae6f47"], "extra_info": {}}, "0476a1a0-316e-44b1-b5fe-32e0c9019f5f": {"doc_ids": ["45c27638-5c07-47d9-9351-fe8452311504"], "extra_info": {}}, "aeb1d1bf-eaf6-4f83-977b-191495aa6420": {"doc_ids": ["ba71bf30-1e37-4715-a97b-55ebb8d8f947"], "extra_info": {}}, "7aa89f3c-f597-4fe2-930f-448e48f2e81d": {"doc_ids": ["e89d05d6-241a-4006-9120-c0fa83a47b75"], "extra_info": {}}, "123438ef-52b1-482e-8c0b-2cb3f7e7092d": {"doc_ids": ["123c764a-33e8-4668-b8a0-ee0446e00c25"], "extra_info": {}}, "ec52dc37-042f-410c-bec9-7173ff7f0d40": {"doc_ids": ["e5981211-a8f7-4ce4-97fa-ab4c1bc8f5b7"], "extra_info": {}}, "2e207cf5-b76a-41a5-8ead-11d362b852b7": {"doc_ids": ["765b82b3-4543-4060-a2a5-b3d27c7daafe"], "extra_info": {}}, "e1ba55db-d93f-4e1d-bd80-bde049101faf": {"doc_ids": ["2a354da0-4a3b-4205-948e-04ac4388d5df"], "extra_info": {}}, "d1807085-5672-4567-8bba-f74d0d5cd341": {"doc_ids": ["122af864-590e-485b-912b-513748c08483"], "extra_info": {}}, "04616866-bb08-4070-9503-4a73d73f6a23": {"doc_ids": ["74367b87-b94e-4801-bd25-50ee1687000b"], "extra_info": {}}, "778564a2-6a62-4091-9748-3fb368964a46": {"doc_ids": ["545aaa64-2edb-4b1d-86d4-119cc4152733"], "extra_info": {}}, "d204ce5c-6a34-47a0-9a89-4779c41c3ff2": {"doc_ids": ["16bed9d8-d320-4c24-8e70-06481789cd40"], "extra_info": {}}, "7fd45288-d5a3-4ce1-ab1b-dcb0a1caaf27": {"doc_ids": ["5233599d-26e2-4730-8a7a-1058eac68f2a"], "extra_info": {}}, "0d5fa7a0-761d-46fe-966d-47e47e162753": {"doc_ids": ["44582310-04d9-4c0a-bbb0-ce411eefd82e"], "extra_info": {}}, "b61e3725-e94e-4d76-9a57-6df93d1751a9": {"doc_ids": ["40aac283-0f28-4e97-aaaf-dcdbc0bcf488"], "extra_info": {}}, "f70da5c0-82bb-40e7-b217-5b54cbf85e60": {"doc_ids": ["ca4934a0-4b94-40d9-ae6b-fa40e845451c", "48ac38cc-2bbb-4f45-a8e1-4a67a66cce98"], "extra_info": {}}, "4b1a6b4f-ca64-45d5-9d90-d39b7a4e9520": {"doc_ids": ["e4f53e06-056e-4d56-805b-9f2a0fa2078f"], "extra_info": {}}, "328664f8-28cc-4db7-b69f-9d60546f065b": {"doc_ids": ["fc1cc1d3-3b62-4f97-b1d3-11ed4ed7c2de", "0ece86ea-2471-4723-abff-6b610d0ae0c6"], "extra_info": {}}, "3a92a60c-fea1-4e6b-8bb8-b5cc2c8fed6d": {"doc_ids": ["f1921a70-df3a-4fa6-b682-226675790ad6"], "extra_info": {}}, "dd5d86fb-bf34-4b80-a174-4cfafb15813a": {"doc_ids": ["7b1d5d43-1f68-49d2-a970-f7f8a07377b6"], "extra_info": {}}, "bba3e6d3-d535-46a0-83b0-3a532723cf63": {"doc_ids": ["b2665a36-479c-453c-8b63-58b8b4c3e668"], "extra_info": {}}, "d9f064a3-8a25-4556-9900-4f839327a67a": {"doc_ids": ["28327558-152b-403a-b517-04eafcce2695"], "extra_info": {}}, "a50d9036-3872-48e0-944c-f6d688d902c3": {"doc_ids": ["409950e6-63c1-4565-9e48-590de53bb4cd"], "extra_info": {}}, "842dc08a-b4c1-4ff7-88af-a33309cccf21": {"doc_ids": ["a96b5ea9-50a3-452e-b243-4f15b1c9e3b9"], "extra_info": {}}, "99df9c16-d2ed-4d05-a172-b7492a68a5b5": {"doc_ids": ["04deb919-40dc-4dd5-8fdc-1499557b84f4"], "extra_info": {}}, "53fdd8c9-fdd8-43ec-8d3d-b75cd6ab3877": {"doc_ids": ["9eac3eb7-7ba4-40fd-9db7-fa048ec6c49f"], "extra_info": {}}, "171ca159-8773-41fc-85cd-711f33e71e65": {"doc_ids": ["3c5ea5ee-f94e-4e99-836d-3f9fb818cd3b"], "extra_info": {}}, "6988ece9-622f-4d47-b902-3ad82393e5f3": {"doc_ids": ["c5f22aaf-9146-4a0c-979b-7b8cd96ebd1b"], "extra_info": {}}, "d6fcea82-25ed-4d11-a68d-46265344d24a": {"doc_ids": ["2fbdbb6f-5c5e-47c6-99ad-4052779dad2e"], "extra_info": {}}, "6ce1634c-5a67-4ca8-9cca-1dbe6fd8bf32": {"doc_ids": ["f6de8a16-16d3-4dc1-bc48-8bd4b77b4490"], "extra_info": {}}, "7cd94887-6b5d-45d2-a0bf-2ff0df89f9d5": {"doc_ids": ["a6e39607-edf2-4235-81d9-55cc1f0240af"], "extra_info": {}}, "eed8bd9c-ec00-482e-9eba-bbde50b70942": {"doc_ids": ["a07bd7b7-8d7f-4a68-8357-eda51cd2be7f"], "extra_info": {}}, "676a5ca2-fe51-4fce-a7cb-fc8db1e432d1": {"doc_ids": ["2e796f85-8b2d-4bd8-8a94-c3a236ce83e9"], "extra_info": {}}, "9f12f578-ed3d-413d-acfc-abc59c25ec81": {"doc_ids": ["d00f6a41-97e0-4ea8-881c-b77d5fbb41a3"], "extra_info": {}}, "9cc93c36-c7b3-46b2-91c2-c4f6909a131d": {"doc_ids": ["c837218f-c1ca-4bd3-b9cf-0058745498c6"], "extra_info": {}}, "c14133fa-da23-43de-83ea-f1a9935c0bb7": {"doc_ids": ["5313a296-d5a0-4f1f-8596-23518e03ef54"], "extra_info": {}}, "1624a9e3-8fba-47fb-8c80-ccb8b90908f5": {"doc_ids": ["7be333a3-6400-4f32-81f2-420671029c2e"], "extra_info": {}}, "aafcd750-c7b9-47ba-946d-b5e39a0818e6": {"doc_ids": ["908d3137-073a-4ac4-a546-f2684799fbec"], "extra_info": {}}, "c46a4e4a-b041-4772-84b1-81a36d40084c": {"doc_ids": ["85364e6b-360d-4c8b-b230-d11dcd456242"], "extra_info": {}}, "37a745dd-e3e4-4ba2-ab10-aa61416fa95c": {"doc_ids": ["6c85adb2-f390-49c6-b6ca-04164bbab5ec"], "extra_info": {}}, "882af3dd-c765-4f20-b2ff-2e77e955160c": {"doc_ids": ["77134024-a0bf-4c28-bf40-1cbdec248b53"], "extra_info": {}}, "9dde165d-31e2-44e1-a80d-33926f4e2063": {"doc_ids": ["78fc2642-bce6-459d-a084-135cf7aa0806"], "extra_info": {}}, "739b06ff-2040-4d6f-aa4a-1445d3a20e57": {"doc_ids": ["63754755-9f89-4da2-a683-3cf91479ce17"], "extra_info": {}}, "026b5cff-17cc-4ebd-9450-6d636889a505": {"doc_ids": ["3de5373a-998d-4c3c-9703-95ff3401e551"], "extra_info": {}}, "d044ac4c-377e-4219-b45c-fa9d5d47937c": {"doc_ids": ["961c979a-1b75-4760-8222-13f6e51385b8"], "extra_info": {}}, "deb6d478-1fe6-4c12-84e4-5b579d00f3a1": {"doc_ids": ["a7629812-b74b-4aa0-8d86-eedd1c9cabd0"], "extra_info": {}}, "1638afb5-ca11-4b9e-b3dd-18cbece95b1f": {"doc_ids": ["3059b44d-b2e1-4f17-a458-56424fe2f2ab"], "extra_info": {}}, "7841e194-0874-4213-b615-7c5468ba124d": {"doc_ids": ["c2d9f4ff-5bc0-4558-9f77-063e4ca4422e"], "extra_info": {}}, "3c5ae2f9-8c4a-482c-8a9d-9b4d6424e26f": {"doc_ids": ["1790d48d-6ed3-4ba1-abc6-604cf1feaf84"], "extra_info": {}}, "63ba3fe7-dd7e-4a55-bc0b-0c5160d71a1d": {"doc_ids": ["ae20c680-4415-44f5-bd69-0c3a1337419d"], "extra_info": {}}, "e4c033bf-a1fe-4582-849b-6d9b80f42ec5": {"doc_ids": ["08c97fc7-a3cb-4824-bc65-07114344eb79"], "extra_info": {}}, "84e34e1d-2a5a-4695-89f5-6b265871f4f8": {"doc_ids": ["ef7e9920-acc9-460d-a85b-b3d6806acba8"], "extra_info": {}}, "9ce0a442-120c-42a5-b806-f484a9c562fe": {"doc_ids": ["feb11b0b-3b02-4ddd-a881-d99198af929b"], "extra_info": {}}, "40fa11ca-84da-4d5e-932c-9617ed39dec1": {"doc_ids": ["cc1952d5-359f-4fa8-bd1b-8e2e94526d60"], "extra_info": {}}, "77e18644-e53c-4fb5-bb25-d7053f8a3d17": {"doc_ids": ["e4d1cdc4-f4b9-4b65-8909-08bd21be7ef1"], "extra_info": {}}, "086f6b3f-9638-4238-8afd-7387de81564c": {"doc_ids": ["6fcba275-e07c-4747-9954-e216007c2b97"], "extra_info": {}}, "92eda3a0-f480-491c-95c1-283d6fe206b8": {"doc_ids": ["d0527de7-a03f-4842-8dc2-16b1c5a686f1"], "extra_info": {}}, "e2642afd-645a-4401-ab45-09b84f85191f": {"doc_ids": ["e82bb758-0e0a-422e-a45e-19b802d01e1f"], "extra_info": {}}, "0ba39a2b-459e-42db-b24b-1f53b2ceb9ff": {"doc_ids": ["3c31bc52-c2fc-4164-923a-5844a1760648"], "extra_info": {}}, "7e8e4f41-f6b1-4058-b257-fa6494470603": {"doc_ids": ["8deef6f4-ada5-44f9-b60b-ed724c76fa4d"], "extra_info": {}}, "897346e4-49e3-41d8-8edf-115b8d17befc": {"doc_ids": ["365ec670-08f7-4ea3-afed-50f1b75394ad"], "extra_info": {}}, "213f6128-74d8-4e8b-85ad-194fefbe6196": {"doc_ids": ["6083bf8a-ccc8-45d4-96e3-e12f062f927e"], "extra_info": {}}, "e6821d4d-606e-437b-96c0-029346c8e313": {"doc_ids": ["7a5faf1d-43c8-42d2-8b5c-53b4442845e5"], "extra_info": {}}, "f50872f6-76a7-412e-a5ff-dd29b2807800": {"doc_ids": ["f9dc9180-a52c-4fa4-8ef1-c9c00064d07b"], "extra_info": {}}, "38a4369a-6922-4ed9-8b04-f828d8f40fd8": {"doc_ids": ["5de54361-9138-47ca-83d7-a99ae4b69ee6"], "extra_info": {}}, "56fe2284-6610-41d4-aa2f-f5a1610d8df1": {"doc_ids": ["88db2b08-8d98-4b3d-851b-040f8e42b208"], "extra_info": {}}, "df5b1a5d-5cb4-4142-ae9a-7b257987a3f0": {"doc_ids": ["92697345-6ef4-428f-af8a-636fa649c249"], "extra_info": {}}, "4acd98d5-1ab2-4420-8e01-4094905af87f": {"doc_ids": ["397530f3-7b8e-47f2-bb2f-f8a20f5bd2fc"], "extra_info": {}}, "ea41ab8c-021c-446f-960e-f1fb5fc9a975": {"doc_ids": ["e83a2979-8a02-4776-929b-8246f60b4b37"], "extra_info": {}}, "45282625-a843-45c1-a473-33e8e11644af": {"doc_ids": ["b6766e02-599e-4de7-845e-140e8c537425"], "extra_info": {}}, "fcbf8d6e-1c56-461c-955f-61aa6017ca89": {"doc_ids": ["9b866eb8-2778-4856-a723-ee36b5c3e503"], "extra_info": {}}, "f312117c-4b19-4c25-8733-95ebdb7ca4d4": {"doc_ids": ["1909b55f-514b-4549-8660-1d1d594c9ac9"], "extra_info": {}}, "0bba3072-35df-4775-bd0d-69e5557f52d4": {"doc_ids": ["906ebbe9-d84a-4a5b-bf8f-730dd678bbfe"], "extra_info": {}}, "b19d0396-ea41-45e2-82a7-49a449911fc2": {"doc_ids": ["8713c129-2af8-4af9-b07f-c0c5f067e1d5"], "extra_info": {}}, "492007ca-4d7c-45c5-ba42-586493db8b1d": {"doc_ids": ["889cc128-bd90-451f-b758-bfda94d4e193"], "extra_info": {}}, "3fcbc9f1-cf00-401f-beb6-0bbab0998763": {"doc_ids": ["76c84b2f-7c2b-42cd-80cc-6eb9ef1495b9"], "extra_info": {}}, "f18e0a6d-c879-4819-8e43-ed2a4813a509": {"doc_ids": ["c1caac64-6b69-4b21-9255-267eacad7e2a"], "extra_info": {}}, "4b49ab8c-6058-47a3-a28c-26220dab32f9": {"doc_ids": ["b31a4351-0f61-44a7-a91e-ee201407401e"], "extra_info": {}}, "1260e740-fec1-4b71-89a6-44f4dc2c2bcc": {"doc_ids": ["6829c7f1-07aa-4239-a2da-36bd71d2bd9e"], "extra_info": {}}, "7c87e48d-f831-4771-a897-411832e4ce01": {"doc_ids": ["98e07415-d72b-4fd1-8873-681891774194"], "extra_info": {}}, "f747fd90-81df-4229-a772-917138d41918": {"doc_ids": ["e97b81f9-d2ac-44a2-9f4b-0a49c7e124f2"], "extra_info": {}}, "f43eacd5-490b-4c0b-9256-585f557f2c9a": {"doc_ids": ["6ebcf898-026b-4a7c-b921-6ed40845ad50"], "extra_info": {}}, "11088382-e955-4371-b310-88f9d2fe4f10": {"doc_ids": ["8d07a67f-0b88-409d-964d-a2f13d08bb99"], "extra_info": {}}, "a1e84941-134a-4ead-9087-44c3502bd625": {"doc_ids": ["c1eefae3-cc67-48e5-9d9f-00a4b7e6b7f6"], "extra_info": {}}, "d8d08908-1033-493f-9b7c-46e34b7f604d": {"doc_ids": ["933f5af3-8554-4e36-8a70-892baf030120"], "extra_info": {}}, "71002fdb-a68e-4667-adb5-cffbe9a02352": {"doc_ids": ["d60190fa-b811-41b8-9393-d38ea1570bf9"], "extra_info": {}}, "6195b433-c2f9-42f2-8215-2fb70725e328": {"doc_ids": ["2aa28232-03ac-4d78-8548-04c36b65dd2f"], "extra_info": {}}, "5737f903-a9fc-4369-9036-259efba234c7": {"doc_ids": ["732dbef7-b531-4412-9213-b31609853961"], "extra_info": {}}, "c3951318-4056-4a87-9f6a-894394f51e5e": {"doc_ids": ["6944bd0d-e3e7-4aa6-a476-41e754ebaae5"], "extra_info": {}}, "117820a5-1cf1-4f5c-8ed6-d8a734c06490": {"doc_ids": ["fa89eeee-d50c-4b46-a767-cb0394f028bc"], "extra_info": {}}, "91fff3c8-467e-4c69-8a04-9363c961754d": {"doc_ids": ["863bf6c1-05d6-450b-b514-00aae974bf5d"], "extra_info": {}}, "5cdde2d8-1017-41ec-b4e5-be809fc0b615": {"doc_ids": ["8d1d51a3-caa5-4fe1-8796-a8c186c8aab2", "5480dc9d-084d-4012-87a7-33d24efa01ab"], "extra_info": {}}, "5426c61a-23aa-4386-a6b6-55b8ed224e02": {"doc_ids": ["f7409bd2-c3b4-45e8-848c-06d55515c6ad"], "extra_info": {}}, "128a82a6-782b-41e2-80be-d4e6ba57d06a": {"doc_ids": ["5ae2918e-7a8d-4e02-8150-5919ed4c5496"], "extra_info": {}}, "6e840e2a-8ce4-4f88-947a-00c121b5992e": {"doc_ids": ["c81a0742-9568-4ab3-9ee9-e3af4bd12093"], "extra_info": {}}, "0de65218-a11c-4a96-adaf-211deea965f2": {"doc_ids": ["4d364e6a-ec4d-4966-8cb3-e50b2ffa138c"], "extra_info": {}}, "66dce79e-5239-4824-9903-deaa9141aa93": {"doc_ids": ["75083180-767a-436e-8204-af68321fcdd5", "c8f6c6d2-1497-4909-b364-6368cf0b729e", "490121ed-7f15-4cb0-9873-e19da29be285", "ae5c987f-e308-4aac-9611-3546e1adaa25"], "extra_info": {}}, "ae853b70-3dcf-4df4-b7ae-569334290d41": {"doc_ids": ["dc282724-6ce1-41bb-9717-e28f2449deb7"], "extra_info": {}}, "c08c6a7d-c842-4ef0-bbab-d7ad578d34f8": {"doc_ids": ["7c3bb326-44c3-4712-ba81-817eecea7b29"], "extra_info": {}}, "1121cae7-1f16-40a6-9a04-4e56150aae51": {"doc_ids": ["db18935c-4251-48af-be02-6cda71a3a4b1"], "extra_info": {}}, "19b85d47-e7fe-43c0-a48a-0d7b2d9b8843": {"doc_ids": ["48349940-4b0d-4ff7-862d-241138184f7a"], "extra_info": {}}, "15c50acc-ea50-404c-849e-10c491c02db8": {"doc_ids": ["5f8e1261-7127-434e-8a5f-ede6d1c0a077", "22fe15a2-be70-41b4-95fa-6f81695a19b7"], "extra_info": {}}, "b8f87cde-1d14-4923-897e-c1f14dd4c80e": {"doc_ids": ["69065b6d-7405-4067-a6cf-830981b5b914"], "extra_info": {}}, "3fe49c4f-f57e-457b-ba10-e33712cd02a3": {"doc_ids": ["a821fba3-2136-44f5-a1f4-b4ddcf32f4d9", "79b73328-c1d1-4606-90e8-88c97bb7f8a8"], "extra_info": {}}, "586ef30f-b238-4f0d-bee9-30d93e2725c8": {"doc_ids": ["a2e3e03c-7129-4db2-a6d5-440ae5766cf9"], "extra_info": {}}, "73430904-1004-46a5-885b-c12e3f153412": {"doc_ids": ["a12183ef-05b5-49fd-bb5d-4c8f51fb583c"], "extra_info": {}}, "d827f7bd-3997-4481-8e6a-1fa8e29c9af5": {"doc_ids": ["43b71e68-4857-45d3-a0d6-f331248fec46"], "extra_info": {}}, "569163a1-ed7c-4ad7-845c-968022493d28": {"doc_ids": ["c8d233b0-1236-4455-8180-d5ba3db474d0"], "extra_info": {}}, "be6fa6ef-4581-4ffa-a09f-4d5e87566eec": {"doc_ids": ["4b88097b-57c1-4116-9e91-d5de970c68f2"], "extra_info": {}}, "677d3468-f39d-4238-9fbc-a2993fcb1836": {"doc_ids": ["78b09713-de9c-46f1-b5a4-77d523a67c54"], "extra_info": {}}, "80c8c795-dcf6-4c92-9051-0e6431742051": {"doc_ids": ["33e35af0-72e3-4fce-a3ac-cbcadb438dd8", "4da2041f-2c15-4599-901e-eed38ceac8ac"], "extra_info": {}}, "b9bc9e31-9f7e-4a56-bd55-88c69055fe10": {"doc_ids": ["4c40e9f1-b374-412e-8cfb-2cbcf45a3fc0", "50f938d3-af54-450f-9637-2f8d1f312e44"], "extra_info": {}}, "4c890425-517c-4eb0-83a9-5e2db69a3160": {"doc_ids": ["6e64b94c-5535-4283-b0bd-d53803a872ee", "6a6a9b2c-66cc-4576-9899-6d8ee9edfd26"], "extra_info": {}}, "96f343fa-64d2-4cd7-bbf7-5138ff8735e3": {"doc_ids": ["159924f2-857e-4652-8fa4-6973e8fd4924", "dfd8398e-351e-42c2-bfc3-b2070b6bed13"], "extra_info": {}}, "b76148b4-466e-4f10-ade6-6f00717962a0": {"doc_ids": ["02848a03-cbe6-4c82-a93f-92adb88b95ee"], "extra_info": {}}, "c510d526-7578-4814-8e65-99629c2632b3": {"doc_ids": ["33c3df61-4f59-46ae-9fe7-c9e754ee1c1f"], "extra_info": {}}, "7252af03-71cb-445b-a12f-81941ccc2c7d": {"doc_ids": ["ff4ab459-e8e8-4403-b2cb-12e412c73e7f"], "extra_info": {}}, "9d8c9bdf-3e0d-4834-a7ca-6dabb22f2715": {"doc_ids": ["3d663289-cd76-4c2f-894e-7ce7bcad3814"], "extra_info": {}}, "8c172c88-07c3-427a-892a-4dc69cfa4a29": {"doc_ids": ["e2eac940-7f78-4ab6-84f1-cfb3195c30a7"], "extra_info": {}}, "f78a7560-5db3-4461-b997-e5c527417ea0": {"doc_ids": ["9624842b-455e-4f8a-8198-b6c152ae0d2b"], "extra_info": {}}, "615ab3e8-b903-42bb-a59d-7e78592f570f": {"doc_ids": ["eb4af9c9-8c74-401f-8d85-696d35fc0240"], "extra_info": {}}, "acfbf467-53db-471c-aa73-d59cc3134181": {"doc_ids": ["cf539daa-7b59-4359-a1e2-81ae861ff258"], "extra_info": {}}, "5bee2a00-5b50-4551-8515-9d5fcc97f77b": {"doc_ids": ["55b9bc34-b44b-41b3-a717-6278e74b8afa"], "extra_info": {}}, "841ba144-1b63-4a63-97c7-291112e15838": {"doc_ids": ["d1bbbe75-769d-46ab-971a-11c9569d8006"], "extra_info": {}}, "9013ded4-1762-49d5-91bc-def0ff7b91b8": {"doc_ids": ["c8acb57d-693b-40c3-a097-7ee54cbc0699"], "extra_info": {}}, "7e54adc4-82f0-4e84-b055-7b6590ad07f1": {"doc_ids": ["81153018-bbe9-4fe9-9e8d-7ede97af1c12"], "extra_info": {}}, "70a02b2c-2f95-40a6-9814-945b3b497856": {"doc_ids": ["f4b2b73f-0e55-4b42-9914-e32f2c05e3fe"], "extra_info": {}}, "757cca39-2843-4aa9-8b2f-8a7e56343981": {"doc_ids": ["f043bdd6-fede-43de-93ea-f6776d296b58"], "extra_info": {}}, "29ce5e54-1b49-481f-b099-ab1565101583": {"doc_ids": ["e23dae61-93fa-4911-ab19-c2f315507a83"], "extra_info": {}}, "f0bf208f-0cc5-416d-94bc-73deda7c5d18": {"doc_ids": ["801163ce-56f3-403f-9308-2e5099ed20a2"], "extra_info": {}}, "555aaf8d-7dd2-4660-a131-2482d981597c": {"doc_ids": ["946bef85-aa76-411f-8e66-fbd8dbbb471b"], "extra_info": {}}, "00e016b1-3502-412f-a31c-36ea933c19dc": {"doc_ids": ["70da071e-66e1-4a22-9bfa-4065306d0594"], "extra_info": {}}, "a410d1ef-137e-49ba-a134-21e8f32b4101": {"doc_ids": ["bc7df002-326f-4923-9455-4efcece03069"], "extra_info": {}}, "bd74f75c-42ac-43e7-9153-b5cd59b466a0": {"doc_ids": ["7626abe0-0045-4d95-af6c-d9120f273884", "205ce612-7806-4949-85c0-e82d9e046536"], "extra_info": {}}, "925173cd-6a72-4d51-a80a-38c426f92ac5": {"doc_ids": ["6db496ab-94a9-452b-bc77-87f8629ae4ca"], "extra_info": {}}, "fa980610-b366-4dd2-8d61-860580f65cbb": {"doc_ids": ["573389c0-6864-4801-80f2-30dd61d2fb35"], "extra_info": {}}, "0bf3d763-f4a9-42e8-98bb-7d3e504fe767": {"doc_ids": ["94309242-7634-4e76-a805-ea2cc88065fb"], "extra_info": {}}, "9259e996-030c-4ca6-a131-b18ca820d200": {"doc_ids": ["c34c0811-e53a-4cf6-ad09-3800caf0e899"], "extra_info": {}}, "c0b2e08e-e40e-47b8-b15b-85c10dc0211d": {"doc_ids": ["066132bf-9db0-46c9-ad14-48d1861acd58"], "extra_info": {}}, "00450d20-07ea-455b-b9c0-d85db7d808e3": {"doc_ids": ["56773bd7-3947-4b54-9b44-cf9d03b08ab3"], "extra_info": {}}, "d6b406bb-0b26-4e97-8ac1-33b02ded7af0": {"doc_ids": ["c5e773b8-db00-4db0-ba6c-f63a6ddc776f"], "extra_info": {}}, "2b1d2c20-2915-42ea-a791-9ba602761c76": {"doc_ids": ["8b4f663b-bda3-4b81-ab80-2461f95a1b14"], "extra_info": {}}, "32581fc6-5031-4cfe-8a78-864105c29e6e": {"doc_ids": ["7c8de1fe-92b4-4a69-9ffa-bc4f3d8c8f2d"], "extra_info": {}}, "1252c255-e0a7-4dc4-b65a-531f173fd732": {"doc_ids": ["76176e66-6949-4bcc-99cf-e5a676f30fb7"], "extra_info": {}}, "4d29a8ba-c633-4948-a8dc-99efda1dee42": {"doc_ids": ["931626f1-e4ba-473b-9e61-1cbfe8ba8897"], "extra_info": {}}, "39e154aa-18d7-4de0-9e9e-a99fc184da55": {"doc_ids": ["1b6e47f9-7ba0-4c2e-9d4a-4b8ac938bc15"], "extra_info": {}}, "80555ce4-3299-4865-b551-050066c5ddfe": {"doc_ids": ["fabb0d6a-27bc-4540-940d-4c38cbe21f99"], "extra_info": {}}, "39c4a9a8-95d0-4361-a5c0-304bcf56c27e": {"doc_ids": ["60cd1c40-e76d-48ca-985f-af89d5c52fc4"], "extra_info": {}}, "4dfbcd6c-658e-4f4b-89aa-2c1c3963a6ab": {"doc_ids": ["e4576160-8ca0-41e1-8c6d-015b0513c61f"], "extra_info": {}}, "07360a3e-73b6-4e43-979a-6ea11a5c0fb8": {"doc_ids": ["72a8b52f-95ef-492d-a755-bdb5f0bbbf07"], "extra_info": {}}, "2f304f0a-82ef-4eba-8166-106770bf2177": {"doc_ids": ["1e8e2820-4201-4b93-9d67-2c285f5881bc"], "extra_info": {}}, "756378d7-9f9e-441f-a7cb-ee1cb900c4fe": {"doc_ids": ["4f206be0-3614-4d76-b775-a4dc0dc2f214"], "extra_info": {}}, "c3f21140-36de-43e0-9523-24caf0f2b82e": {"doc_ids": ["e0ddaa09-fe68-4ed2-a5c3-16f2ff602e66"], "extra_info": {}}, "e46ee009-b0f2-4804-b1b1-207e02973f78": {"doc_ids": ["2664c39d-4217-470d-a9cf-5bdae871702f"], "extra_info": {}}, "6883460f-9a1f-4bc6-9911-50875b9f155c": {"doc_ids": ["cf9c02bb-3678-439c-b88f-8a0482b0352a"], "extra_info": {}}, "102557bf-8bd3-4aeb-b18e-751206ed15d8": {"doc_ids": ["28e387eb-bdf7-4f55-8f62-d3c06cde150c"], "extra_info": {}}, "8b766d04-b8ba-4d29-afbe-333f43449b1d": {"doc_ids": ["e9a55d8c-ad76-4248-bf18-d6067c16afe0"], "extra_info": {}}, "8086015f-2c38-4072-9d0b-f62337ee9ec2": {"doc_ids": ["11ed633e-182b-4aa8-892b-a8270dc4236e"], "extra_info": {}}, "b21c07ea-0fcd-48c4-962e-e9fe9f7044d3": {"doc_ids": ["b0aec804-a0bc-45be-b7f4-3afeccdc6cc0"], "extra_info": {}}, "3915477c-6ac5-41cc-81c7-4197ad83fd6a": {"doc_ids": ["1c1a1e2d-27bb-485e-afd6-06074eb1ebd7"], "extra_info": {}}, "ecd9da7a-e45f-4cb8-af47-9d11d576b15e": {"doc_ids": ["42203a99-12e7-4a2a-8098-7b89763ddc8f"], "extra_info": {}}, "271d8a50-f3b3-45ea-9594-3e5df3a8b9c5": {"doc_ids": ["d7a588d5-0968-48ec-901f-e0f8c28aeb30"], "extra_info": {}}, "bdc3c139-a3fc-4444-a7a4-e9cb6ae40e70": {"doc_ids": ["7fddde73-a01b-4b36-ad9c-5fc99ed5eda0"], "extra_info": {}}, "8d44aff4-3cd0-4558-8552-89cc1a279971": {"doc_ids": ["ca45af5a-98eb-4aba-9f87-ad7023655325"], "extra_info": {}}, "af33463e-e5d5-4335-bc6b-5554291aeefd": {"doc_ids": ["3a08b14b-3bed-4a55-81f4-90f89a9b628c"], "extra_info": {}}, "6cdd57b8-6bb8-4213-b44b-ee3397a264f2": {"doc_ids": ["c248dcbd-d79e-4cd4-a253-e77ac88efd6c"], "extra_info": {}}, "3a8a8cea-f0a8-46ac-9f8a-298934109219": {"doc_ids": ["1f7afc14-290b-4a47-a565-db8c02319567"], "extra_info": {}}, "b73213a9-ec26-4a13-bbcd-6c8007964f6d": {"doc_ids": ["6492d96f-9df2-4857-b4a0-35fb9a6206c8"], "extra_info": {}}, "5c797949-fbb7-46f8-b494-7b339f628870": {"doc_ids": ["87ff6b14-7886-4bed-b106-e2e31e8d310e"], "extra_info": {}}, "860672a3-ed29-4d6d-b380-6d47d4ee0743": {"doc_ids": ["6bdea580-1aa6-4ac5-8dac-a89bae79b2ab"], "extra_info": {}}, "4f88a276-5e16-4909-8cd1-f8b46652fce4": {"doc_ids": ["c217be73-3384-4f50-8caf-2d557c781f0c"], "extra_info": {}}, "142d9263-0961-476c-ae2b-9a4e2bb2dc3c": {"doc_ids": ["81b1b9ac-08f3-4cd6-9a50-d3755d0cf28d"], "extra_info": {}}, "9241a3a9-15e3-47d3-bb6b-741e9893dda0": {"doc_ids": ["e26cdd6e-ebad-4b16-84c9-df65bfc215db"], "extra_info": {}}, "97e1251b-34a7-426b-bbf1-9551549dc081": {"doc_ids": ["53099ab1-efc6-438f-b758-4a116e6fa706"], "extra_info": {}}, "3c75563e-f953-4357-a441-2b5b7962b27a": {"doc_ids": ["9f1ba99b-c8e2-47d0-8047-f103ef2da316"], "extra_info": {}}, "bdad3839-00cf-4aac-a5aa-ab93af062155": {"doc_ids": ["c7177a3b-0dc9-4daf-a796-740bf7f4df41"], "extra_info": {}}, "00c2508f-ee35-45b1-a839-4ec02bfbaf96": {"doc_ids": ["ab4759b4-0ba3-4ae7-9808-d4e430011161"], "extra_info": {}}, "31c20c2c-b3ae-4da3-98c6-a1f6e749b590": {"doc_ids": ["1b63b70d-9086-405b-aff4-2db2e835f8b3"], "extra_info": {}}, "e42a07c4-b200-48b1-8f99-01712363c70d": {"doc_ids": ["f5fb68d4-438b-4bb9-b2c0-8dd4318ea2e4"], "extra_info": {}}, "d4ae5f42-48a2-4757-b646-bb08d3ad3b35": {"doc_ids": ["5675e2a7-0401-4ff1-b387-d2aa28239ec4"], "extra_info": {}}, "e3ac1f66-e70b-455f-9c24-a6a198fb2de2": {"doc_ids": ["6730174c-22a4-4e60-b3e3-af469dca3671"], "extra_info": {}}, "35a66dba-3eb9-4927-8825-65ba4e6d27af": {"doc_ids": ["3dcd88bf-5098-49f8-a1ee-f90f846b3143"], "extra_info": {}}, "056f3d1a-301d-449f-8ea4-0360d291149c": {"doc_ids": ["ae730666-a1e8-4393-8879-b37844af9235"], "extra_info": {}}, "6834392b-5c75-40e4-b58e-269b7b93fa60": {"doc_ids": ["047d9f42-05c6-42e6-8609-bb9a46ee8cc3"], "extra_info": {}}, "83da4228-4dce-4a1d-883d-6297f68edaa6": {"doc_ids": ["e8077700-db3c-4162-9464-78558266484b"], "extra_info": {}}, "7af7964d-b1b5-4fec-b811-4b7b132f8632": {"doc_ids": ["6546a1ca-9f9e-4389-8bc8-6d2dc3058f9c"], "extra_info": {}}, "cb9e88db-e31b-4e5c-b597-2d9386ab8948": {"doc_ids": ["5d665c65-9223-47b0-a3e7-21d72f7de13c"], "extra_info": {}}, "d6b41a4e-5207-4721-ae6f-d4634756f902": {"doc_ids": ["9974fad6-632a-4702-a8e7-9d00bb28ab2b"], "extra_info": {}}, "c2f1bc2a-2639-4a46-bbe8-a527f33cd31e": {"doc_ids": ["87624707-c5db-4466-a4b0-9b6964b63367"], "extra_info": {}}, "ea304fe0-f9f0-46d2-8cd0-8720dbda2475": {"doc_ids": ["40715346-c0ec-47ed-8b72-7cd0e7d8a36b"], "extra_info": {}}, "5e18b937-0919-463f-9268-ecefdbdd7de9": {"doc_ids": ["87eacd0c-6bbc-4a47-8ad3-e92348cca0b5"], "extra_info": {}}, "cff79bfc-3dd3-41ad-bcbb-d1a4f3f8f799": {"doc_ids": ["18486283-0720-4ea5-8e51-a6f22b19eda8"], "extra_info": {}}, "589056df-d92c-424c-96b5-76b51cf44058": {"doc_ids": ["8f2ca47c-6aa9-4a10-a632-8feb5283c413"], "extra_info": {}}, "ac5442a1-fc81-4bd9-9c7f-961298b71ddf": {"doc_ids": ["64bd4bcc-b0b1-4518-97c6-5556ee9c3d49"], "extra_info": {}}, "6fc0a76c-a8b7-4bde-8fdf-b273cc017455": {"doc_ids": ["c7716f1c-bcbb-4772-86f3-63e75be09c99"], "extra_info": {}}, "bbadb0a8-2c10-46d1-9f02-5f71151a0037": {"doc_ids": ["ec42b19e-363a-4a2d-b158-9393fb2a5fe4"], "extra_info": {}}, "85b79eb6-99e6-4391-b81c-e3410f859cc6": {"doc_ids": ["0f8a7190-da92-4e4c-a178-eb25323718c8"], "extra_info": {}}, "33c17082-6ab8-41f4-849e-83183d8a11ca": {"doc_ids": ["1288ca81-d6ec-4e3d-80d8-8e7153eca3a2"], "extra_info": {}}, "cec05833-1ed9-497d-babb-ed403630a957": {"doc_ids": ["fbc8bc4a-a18b-458b-a563-748392f5ec32"], "extra_info": {}}, "df77011e-f4b4-4eb4-a35a-e225907f98c5": {"doc_ids": ["86f495b0-971d-4822-adb2-91e889b41f97"], "extra_info": {}}, "72f7d677-fe91-457b-980f-934bc2a8cb45": {"doc_ids": ["00707807-f127-4431-9b99-2131ebe1da35"], "extra_info": {}}, "3fd3e473-b84f-4076-b739-3f8ffc6963d7": {"doc_ids": ["9c220ed4-020d-4f7c-bda5-d97dbc34e50e"], "extra_info": {}}, "8cc59ff2-6369-4b3a-984f-aaea016af9d9": {"doc_ids": ["6baba10d-56b5-40bf-92d8-bd19a8f5c671"], "extra_info": {}}, "359ff8ac-6fae-4c76-912b-bdd912750737": {"doc_ids": ["e057b290-19ba-46e9-867f-52fb7a4cca81"], "extra_info": {}}, "f9d016ee-9a41-4742-84e5-c6a10fa19ec3": {"doc_ids": ["2bf9fa07-6765-4e00-b376-1e54e56cb7ab"], "extra_info": {}}, "cfb2352a-270e-4dd1-89b2-a8ec184de755": {"doc_ids": ["cdfd755a-ff77-4825-9925-c582ff2b3881"], "extra_info": {}}, "88123956-0e14-4cb7-875d-3fef4af7b697": {"doc_ids": ["7c7bbf2d-ab4b-49ee-9ca6-de37e23ad015"], "extra_info": {}}, "5010012e-a9aa-49a2-bd31-9350c40eaa89": {"doc_ids": ["47b8118c-ce0e-4d1f-9367-840af591d180"], "extra_info": {}}, "f5f8b438-8bdc-4a6f-9f60-707b17319f44": {"doc_ids": ["7ffcecfa-9f95-43c6-9dfd-d9065b8eb1f5"], "extra_info": {}}, "50eaf83c-d976-49c7-a15d-9674eeaa545c": {"doc_ids": ["09627079-fc92-42bc-a1bc-80e0ab5bde7d"], "extra_info": {}}, "f4665b9c-6e30-434d-9005-98bfd950cb72": {"doc_ids": ["2ff9ed9e-2a15-4e79-95c8-9537e945902d"], "extra_info": {}}, "21f2a275-19eb-4b46-87a0-8b7b7a7b3d32": {"doc_ids": ["bedb67a3-9b34-478b-8f85-d9793f037847"], "extra_info": {}}, "9c3cc192-dea5-4708-b5b7-e98d3f9efb0a": {"doc_ids": ["83eafccf-0e65-4fb4-8bfd-f5ed96d5a101"], "extra_info": {}}, "f6b62b09-70dd-4c8a-b4fe-47f9e8798be4": {"doc_ids": ["b6fcf6a7-6f0d-4065-87d4-14e8401eee14"], "extra_info": {}}, "8f899831-3f9b-4ff8-b1e8-2772168585be": {"doc_ids": ["d913c455-ffa3-4452-82ae-54a4dbaa0508"], "extra_info": {}}, "6c006eef-31f5-4238-b302-5c53f1bc587b": {"doc_ids": ["c05b30d1-f014-4766-91aa-821cff38374a"], "extra_info": {}}, "ef2599b8-5677-4da7-9950-f455a4cdf942": {"doc_ids": ["504dc761-e37b-4ec6-af67-2aedc85a98ce"], "extra_info": {}}, "b7d84534-175c-4364-a5a4-e962c42a5b1f": {"doc_ids": ["ba962a80-6c2b-4015-a061-4b802e8b9d97"], "extra_info": {}}, "8d0a0166-8433-458a-8e8f-0289febbc65d": {"doc_ids": ["7b4c2280-03bf-4d2f-9349-2c4ad8ad9110"], "extra_info": {}}, "2201cc99-1fcb-4bde-a567-6d9af358b36c": {"doc_ids": ["dd88af43-1576-44b1-85dd-d1a72dc4bcb6"], "extra_info": {}}, "c367bc5f-a3f3-4c29-b135-8613ae39c7c5": {"doc_ids": ["6796092f-470c-4dbc-9895-b86fb7164163"], "extra_info": {}}, "3a36a136-4d87-4147-a7ad-dfe7f90d0bf7": {"doc_ids": ["b201c8e3-b0dd-4c80-98a7-b393554a5e79"], "extra_info": {}}, "d8de9593-d5c6-41d2-af3e-f22c7c978418": {"doc_ids": ["324bbf06-5e93-474a-a90f-c32d31e2d86a"], "extra_info": {}}, "c19d391e-83ae-44a7-ba89-c7bf2d187c54": {"doc_ids": ["f8aefc65-20cf-4cfd-a6c6-ae9d00767249"], "extra_info": {}}, "b4878e10-eff6-44f7-8a28-8766defd733b": {"doc_ids": ["3081e825-1471-4583-a136-4144e3b11824"], "extra_info": {}}, "8267fa54-4104-47f9-94b1-3d80da08a9fb": {"doc_ids": ["ee97de96-831c-47b2-9b50-b92b8d342445"], "extra_info": {}}, "c56d22c3-8862-433f-9507-205e142fc1fa": {"doc_ids": ["0564d3d4-c4b9-4cb2-ba84-6e78e3d9f694"], "extra_info": {}}, "76efc881-c6d8-40d2-bbd7-7aace2a13feb": {"doc_ids": ["e289a735-d3f5-4fc5-b311-8a257c55bc57"], "extra_info": {}}, "3ea888d9-3145-44df-a967-c9d47f666c0c": {"doc_ids": ["38ca2573-81c1-499f-8dd9-3e60ed589694"], "extra_info": {}}, "0a4d7506-3ae4-4299-902e-fc5f38504598": {"doc_ids": ["900e1a03-ecb6-43af-9da7-8af3b3ba0782"], "extra_info": {}}, "109ff47f-f8f6-4ebf-9c5b-c422dc318065": {"doc_ids": ["32c0ff5c-54d9-4a3a-bfb3-62b0c275ddfc"], "extra_info": {}}, "fafaef31-8dcc-4f38-8090-6543e9d72eda": {"doc_ids": ["876a8aad-2a06-4f1d-ac79-b4eefb1f11cf"], "extra_info": {}}, "2fca2bae-d674-43b1-9d71-382139fa5bf8": {"doc_ids": ["5c7fcc58-ca54-4f17-aaf1-8187dc59a99b"], "extra_info": {}}, "41e48f12-422d-4dae-956e-78b97a5071c4": {"doc_ids": ["81b5b975-83a6-4cc7-9e26-991e10f84e8c"], "extra_info": {}}, "6478bf36-7600-488b-aab7-104d3b20fc80": {"doc_ids": ["cd6fd487-ab62-456b-8fb9-3cd3716d97c2"], "extra_info": {}}, "ba8104a8-baa0-498f-88c5-98463eb849f8": {"doc_ids": ["256d3256-c40e-422f-a39b-0630a2ad605e"], "extra_info": {}}, "37038ff9-4ab5-47d5-825a-bb7237317e3b": {"doc_ids": ["05e10e3c-0342-443e-a92c-1460be9d1a65"], "extra_info": {}}, "19cf202e-a5c5-4ec9-804c-a344381e9e69": {"doc_ids": ["d02f51b9-d4b1-48b9-8165-6a0efd9f6f04", "035013fd-e35a-4303-88bf-b5ca79b6d988", "4542dad7-b855-4649-80f1-6aa1a9000c24", "150a5ce4-6056-478e-8007-d41206454eec"], "extra_info": {}}, "1e88bc9e-9a25-41a2-8e94-bd8eafd07eeb": {"doc_ids": ["a98f8dfb-90cd-4347-8a6d-d8f464a1c344"], "extra_info": {}}, "af4afbb4-ec4c-4a14-97e1-776741a2c7a3": {"doc_ids": ["6da1aa32-f1fa-40c4-a070-acaa7212cd6f"], "extra_info": {}}, "c7727236-55ce-4558-8bae-3920f124ce84": {"doc_ids": ["e77d1cca-0ebb-4964-943a-eb4e919f9ee4"], "extra_info": {}}, "f2fadc58-4132-4a25-a79a-b79546430c41": {"doc_ids": ["9c0851cd-9f47-4da0-b4ff-2f2ee05b279a"], "extra_info": {}}, "b075cc6e-8044-46b2-8e7f-c27476c8cf77": {"doc_ids": ["6264326f-279d-4707-a258-4c8ee330015a"], "extra_info": {}}, "5d2417eb-a7d3-48df-b9f4-fb836ccb48dd": {"doc_ids": ["2fa82fb9-dcc2-4961-8dc0-e205f9e2e761"], "extra_info": {}}, "b1f958b8-d035-4618-8ce9-3293d6112ce8": {"doc_ids": ["8c9aa747-c4f4-40dc-bc83-c85ff30c58e1"], "extra_info": {}}, "8f0a029c-57fb-4c5d-8c22-1846db6899f7": {"doc_ids": ["f7c0cbe9-aa63-4ab1-af1b-6ad372cc8412"], "extra_info": {}}, "69432ac8-c783-4a26-a4b9-11b9c9b9f1f6": {"doc_ids": ["be642e0b-74d7-4566-ae3c-e3ea14b350b9"], "extra_info": {}}, "02d5e802-ecb1-4d05-8270-2d64e77865fa": {"doc_ids": ["4e99ac59-1a1a-4f23-b9e2-7fdea21866b0"], "extra_info": {}}, "3cd94c3d-0b8a-48dc-b4e3-53aee374b85d": {"doc_ids": ["5102c13a-0c74-4314-bbab-d2a99a072cf0"], "extra_info": {}}, "e708c6a5-3510-4cb9-8afd-3410bb7e11f3": {"doc_ids": ["a87e24ba-999b-443f-8cfc-0208953b4b8d"], "extra_info": {}}, "e68f92d7-7b5d-4b98-bd89-75eaf8ed455b": {"doc_ids": ["8d71508f-fba5-4733-9b3f-8ecbc0f7f8e9"], "extra_info": {}}, "3922944f-f77d-4ed1-9bab-28556bdbcec7": {"doc_ids": ["b8d7b298-1b37-455d-b85c-90c2ecbe04b4"], "extra_info": {}}, "6cb2ceea-79c7-47a5-a841-928a26acae7b": {"doc_ids": ["5b8d9ee0-6ff1-4796-b305-e48a4a7027e3", "9bc637df-c1dd-4b92-b27f-9d94b0292f53"], "extra_info": {}}, "b775bcce-c4b6-4f21-8615-a766da41dc10": {"doc_ids": ["874a7378-5f85-4372-9507-e47579495f79"], "extra_info": {}}, "8cbb0c5b-bdf1-438c-8a61-8992fbed1bb0": {"doc_ids": ["8bd65673-c377-4aeb-a465-9f4a6ae089ce"], "extra_info": {}}, "a8aca62a-22b6-4267-960c-77ea9f8d1ebf": {"doc_ids": ["7203dd1e-42fb-4df3-a675-18675737496a"], "extra_info": {}}, "72438f1d-ab2b-4210-9852-07a084641bc2": {"doc_ids": ["9f33e847-510e-4375-9ce4-42e00ef37a0f"], "extra_info": {}}, "a7ab99e2-013f-4291-8e9d-863e998ef394": {"doc_ids": ["c9909dd0-8e0a-42af-8689-14ac3849e509"], "extra_info": {}}, "3545eac7-5985-4e77-b3cb-4d4a566125bb": {"doc_ids": ["14a59bd9-507f-4ff6-9e1e-b411c5376979"], "extra_info": {}}, "dff01cf3-8cc5-4d43-8397-8d77d2b43dff": {"doc_ids": ["dc324ef6-2901-4fa7-b820-065cc8a05d09"], "extra_info": {}}, "92dbeddf-2a67-455a-8d08-4c6482a536c8": {"doc_ids": ["74501c2e-f208-4e17-8f61-ac8a602897c4"], "extra_info": {}}, "df596790-5f64-4bc3-bc66-5b59e5b57f36": {"doc_ids": ["6ea0ce86-dda2-472e-8335-d73645ccb207"], "extra_info": {}}, "a6a336e4-38bb-4156-b50f-269ecd3684c8": {"doc_ids": ["e8a25bb1-5985-44e2-bea1-742cbbcbc8ac"], "extra_info": {}}, "af7e00e5-f4c4-4de9-945b-358321c8d9d7": {"doc_ids": ["97e81054-fd7b-45df-b787-6b6b1ad3de3c"], "extra_info": {}}, "7c948eca-b46a-43f0-8a25-01ea1d288181": {"doc_ids": ["12da7664-9c58-4457-ae58-ebfb0f3221a6"], "extra_info": {}}, "0736bf66-77dc-421d-81d2-fc655c9cdc10": {"doc_ids": ["9228d037-b2a5-41b3-ba44-8e115911b245"], "extra_info": {}}, "ef104253-682b-4cbc-9405-e9d34b30fea7": {"doc_ids": ["6b8d047e-57ad-4fad-b1ab-558ea31b3cfc"], "extra_info": {}}, "298d4e20-cd91-4e1b-a490-5357ca3a607e": {"doc_ids": ["1b16d8d7-437c-40a0-b93a-32cff5825bc4"], "extra_info": {}}, "3db04443-0ee6-43c5-99d6-fc37906ba0c8": {"doc_ids": ["05bdd403-a9e9-4924-9326-b04d96d06db2"], "extra_info": {}}, "3a9a8396-efe5-46eb-aee0-9db9ddf0211e": {"doc_ids": ["845b4678-69b8-44fa-a688-2394a30443d7"], "extra_info": {}}, "da969fee-0714-40c2-b052-5b2c03eb16e8": {"doc_ids": ["1d970844-cac3-4ae6-a393-0dbc9e4df30d"], "extra_info": {}}, "a3af2d2c-06b0-4aac-b00e-69a9a364e634": {"doc_ids": ["143fcc3e-22c9-4681-9110-0bb4e0401eca"], "extra_info": {}}, "7da86549-b44d-4fa8-a839-a05f386c1bdd": {"doc_ids": ["2469ffd3-2b84-4d70-9f25-561381c9bdfd"], "extra_info": {}}, "f1096ec1-afdf-454d-9409-e13663bad36f": {"doc_ids": ["814b4227-38b5-44d8-af65-a093722e47d6"], "extra_info": {}}, "bcb2cab2-35b6-4f56-9d82-e5a8dfd69659": {"doc_ids": ["55832ec6-828f-41a6-ba7a-1bd9260f1036"], "extra_info": {}}, "6a284268-e699-4a4e-8f55-1484f5ddfc55": {"doc_ids": ["4ff0195d-d70d-4271-996c-d81fd73e71bc"], "extra_info": {}}, "25e9adf3-70df-4497-88de-f80fe85af8ac": {"doc_ids": ["7866f26a-a9cd-4e31-8070-87f58a638f42"], "extra_info": {}}, "8be7d32e-7982-4348-ac05-7145c544d8fd": {"doc_ids": ["f1f35b64-99f8-4245-90eb-9e6c04312280"], "extra_info": {}}, "8d121a9f-8fd7-4447-86f2-5a84baa36dc6": {"doc_ids": ["b1af77dd-091a-4cc7-8c23-1a53382eb4dc"], "extra_info": {}}, "1fc0df79-09fa-4cfa-bdd5-68cc605a48fb": {"doc_ids": ["8319827f-1512-4de5-ad27-645ff3500380"], "extra_info": {}}, "c79e4fc0-e973-404a-9865-c0eb9ba16eaf": {"doc_ids": ["8115c30b-f849-4dfe-8492-746395b5328a"], "extra_info": {}}, "3b921320-a539-4d56-bca8-74cf02c53be1": {"doc_ids": ["d6f98d06-dfa0-445a-8fde-60215206b3df"], "extra_info": {}}, "81b8d09a-0073-429e-b9bd-c2cef1e257e2": {"doc_ids": ["979dc5fa-8498-4339-92c9-faa9b44d3788"], "extra_info": {}}, "65b0dd20-9ba1-47f7-8375-cc009fd7b9d3": {"doc_ids": ["456efb2f-eebb-4995-8f72-65d9d9eff97d"], "extra_info": {}}, "50a21d5b-cedb-4f6c-91b3-c942dc41a4a9": {"doc_ids": ["53e860cb-fd2f-430c-8813-5cc6cf392e34"], "extra_info": {}}, "ed9c2ae2-a9b8-471f-8137-2a1141f1cb3f": {"doc_ids": ["291fcfe5-af67-48c0-8ab2-ae0614215d8c"], "extra_info": {}}, "ba3817c7-060e-4112-afad-08241a21b540": {"doc_ids": ["7b345901-4f84-4d86-a16d-772a41bf414a"], "extra_info": {}}, "16ca91ca-62ca-460b-9d6e-bea3a4c5365c": {"doc_ids": ["24db875a-ade1-47b3-881a-3d2a9ff0192b"], "extra_info": {}}, "f102f3d4-3290-4458-8e8f-d40ea30f3252": {"doc_ids": ["aafc60bf-1628-4578-9fc3-fbc41fa6ca2c"], "extra_info": {}}, "a41e716f-6cad-4634-bb9f-0fb8a261743c": {"doc_ids": ["b888b850-dabe-41cb-b19a-347faf22dcc8"], "extra_info": {}}, "db49c8b2-9312-4063-afb3-4c8269b14b31": {"doc_ids": ["2a7679b4-2e6a-4a77-9690-934ceb036135"], "extra_info": {}}, "04ce8def-87fa-4f79-8544-0926d67d5870": {"doc_ids": ["b45ea252-1380-46e3-8031-a08ffee33d66"], "extra_info": {}}, "50d566b9-ea78-433d-94d4-9735c1fea515": {"doc_ids": ["00c05512-3063-4296-ac94-f4a6556718a4"], "extra_info": {}}, "d8f4db3e-05a8-46e3-b2b9-dcbe62e265ce": {"doc_ids": ["a205db22-a30b-4b00-839e-e5f1f28b8e42"], "extra_info": {}}, "4f7111d0-ef37-4df3-b8d9-82e8a971e408": {"doc_ids": ["359bc7e1-c368-4ac0-a510-b9bc3d0dc4d1"], "extra_info": {}}, "58c35991-7b06-4566-8f52-2106b0c0a7f0": {"doc_ids": ["c48442e6-7ddd-43e6-a695-bca2be191a0e"], "extra_info": {}}, "501ea9ec-9900-47f3-843c-2258807b4558": {"doc_ids": ["73ebb19f-02ae-4215-91ab-55cad4256c7d"], "extra_info": {}}, "585619e0-a7c8-4b30-b022-a0b0c48dff01": {"doc_ids": ["ebb61b8b-c6ab-4f90-bd0f-3e790d349b0b"], "extra_info": {}}, "17fb7561-8789-4797-88fa-cdd7f993897e": {"doc_ids": ["bd5fdac4-3a89-4b92-b7ae-037d10197f44"], "extra_info": {}}, "79402688-9c9f-4789-a9bf-5b91203e8cfe": {"doc_ids": ["4e8d6785-f25e-4e77-91cc-9753a87dacc8"], "extra_info": {}}, "7a2781af-9f18-44d0-a9c7-5d77b171d346": {"doc_ids": ["cc55e1e1-ed2d-4fad-8b87-6b12a5600d0f"], "extra_info": {}}, "71746638-73df-42d3-bddf-868718d83a84": {"doc_ids": ["f0da0a60-da81-46dc-b07a-bf2bcca188f5"], "extra_info": {}}, "b47cc354-d05d-4764-9aa4-966d1c68f1b8": {"doc_ids": ["5b591a44-78a0-4cf5-aa5a-017b321d55da", "040d8fd2-759c-44f9-afe2-7d74802759e2"], "extra_info": {}}, "c26f8528-d784-4716-9157-2ac564ab3f68": {"doc_ids": ["69b9e15b-4f34-40b3-b2bd-9f26032ad67a", "f5249563-ff07-4f3c-944e-64f1145d5801"], "extra_info": {}}, "1da5111e-fa03-4c85-bb34-ca61e862500b": {"doc_ids": ["fbf42b81-aa4c-4965-9456-8475b073a225"], "extra_info": {}}, "cea92d82-b95c-4e0b-8ad2-b36ce8e4445b": {"doc_ids": ["19f2a03d-a54b-4941-ab45-bd1dce31b35e"], "extra_info": {}}, "c0373184-b4a5-49b4-a780-f6174b48448a": {"doc_ids": ["85c6c288-a334-494f-9d31-04893cf5f8d7"], "extra_info": {}}, "f3786976-cf69-4179-81eb-9cfb59da5246": {"doc_ids": ["c1f45f79-49be-42eb-b8ae-fea7e01f17fc"], "extra_info": {}}, "7ef81e8f-e17c-449f-8d45-058bfdaf7b98": {"doc_ids": ["e3aaa1f3-0aa0-4438-b28b-c4a05701f674"], "extra_info": {}}, "d94921ae-3fa6-4e90-b875-066dd3aa4641": {"doc_ids": ["2cee5a43-8843-4b71-a7a0-c94d5636ff6b"], "extra_info": {}}, "17ecf579-a533-4c9a-8ce7-6c2498102b76": {"doc_ids": ["3898940d-741f-4c2a-bbdb-2539f7523e80"], "extra_info": {}}, "e78a337b-e8ed-4ea5-84e3-c6eaded79cb6": {"doc_ids": ["8ffb8816-f9f5-45c3-86d1-02f8de2f6342"], "extra_info": {}}, "312feb7a-b11c-4749-9151-3d6813321e91": {"doc_ids": ["da64bfa2-c9bb-4bfc-b266-1b17f1b1dbcc"], "extra_info": {}}, "a865d300-edcd-4f5e-b0e2-79c886a203bd": {"doc_ids": ["989b9e06-76b3-40fe-b020-5a68311df825"], "extra_info": {}}, "78f6e9f2-7fb5-474d-a1b2-23ef03347e35": {"doc_ids": ["628cb332-f563-4620-902b-4fee9465c0a5"], "extra_info": {}}, "c7c18e67-b3d5-4cfa-9498-38e42a09e341": {"doc_ids": ["2cc8224d-d522-4ae1-82d2-61b51be6776b"], "extra_info": {}}, "0b9798df-553b-444d-baf7-48f84f4dd84c": {"doc_ids": ["6895aac4-b5c7-4e44-ad89-062a95637f16"], "extra_info": {}}, "06786b1f-481c-46c8-b316-2803cc49276b": {"doc_ids": ["1f056ba7-2a2d-4a5e-b805-b1232878f4e0"], "extra_info": {}}, "1ab6409e-a25f-4115-900e-e32d9761c9d0": {"doc_ids": ["204c9bb0-1ab8-48bc-82ff-61a80a786d98"], "extra_info": {}}, "56ff04f7-2551-4b24-8211-c76e77faca1d": {"doc_ids": ["e9dc2d29-a9da-4862-8452-a5d2e8b580f4"], "extra_info": {}}, "57a9f559-274e-4844-92c9-18b688d1fc3a": {"doc_ids": ["902a5f04-5cbd-491d-a242-2896c68db5bc"], "extra_info": {}}, "8fd60477-d022-4966-bdee-cb993a91fbd6": {"doc_ids": ["e8dda79b-10d8-4aa2-9a50-8cdcb795bee4"], "extra_info": {}}, "6f36de66-89cc-4777-8939-740fbcaddfa4": {"doc_ids": ["ba90eae0-2021-48fa-93a9-58f1d221b780"], "extra_info": {}}, "8f647bd0-5d71-4345-97a2-c469b8e5535c": {"doc_ids": ["dba8239a-eb99-48a0-be52-dde51c48370a"], "extra_info": {}}, "4fa52b26-90bc-4cc2-9370-7dc73dfce2ac": {"doc_ids": ["c1f110b9-2003-48f6-8885-b4ca5f32b8ca"], "extra_info": {}}, "171b2a73-f432-4a5c-8f66-c8105c9d81c0": {"doc_ids": ["4e8c3bcb-2843-4e33-b5d8-220007a2765a"], "extra_info": {}}, "47e9544d-a13c-4232-90ec-2d3ecb63ad05": {"doc_ids": ["aaa60dbe-4ba1-442b-8cdd-b585b31f5f7a"], "extra_info": {}}, "8f2b5317-a3e3-429e-8cca-a8d3d12a550e": {"doc_ids": ["2d1f9b31-7224-44fa-bbb3-d268b717f951"], "extra_info": {}}, "4fcf72d7-05c4-462b-9b7c-544a09b75e8f": {"doc_ids": ["f9d87ff6-19dc-4956-b64c-facba3507653"], "extra_info": {}}, "33a5a766-7829-49cc-a83f-d43a13d24b9a": {"doc_ids": ["3683ec1d-b458-4b2f-bbfd-e0384cc59e3f"], "extra_info": {}}, "84933b6d-6183-4147-aa60-84f082809887": {"doc_ids": ["87c2f682-740f-4346-acb9-e419e1730c6c"], "extra_info": {}}, "1833a642-96ba-49aa-80e6-d1280928ad5a": {"doc_ids": ["819ee16b-791e-434b-b096-94e4f69bb267"], "extra_info": {}}, "9d4fa34f-6021-4bec-8493-f03fb3c7301b": {"doc_ids": ["2a40f61c-6d99-4ae3-8d30-f37e5e22e9b7"], "extra_info": {}}, "b35d6b5b-ae3d-425a-83a5-71e25718e9a2": {"doc_ids": ["aa63ad2b-0546-4ea0-8e04-b9046eafb074"], "extra_info": {}}, "d45eb9f2-fedc-4d49-9395-afe2b76da43b": {"doc_ids": ["5c8a400b-2bac-4ee4-864b-9e43db58931c"], "extra_info": {}}, "b349ed50-4458-44af-bc03-8c1d2942cbaa": {"doc_ids": ["bbee888f-765b-4737-aa73-56cedc9bc29f"], "extra_info": {}}, "cdfbf39b-17b6-4813-956a-bd99193eb07c": {"doc_ids": ["8dcb22c6-8fca-48e3-9bb5-ee10216c7b6e"], "extra_info": {}}, "b5e1977d-d91f-4013-ad28-bc2a587e45aa": {"doc_ids": ["aba4fc8b-ca4f-45ee-8e07-a90c491f32c9"], "extra_info": {}}, "8445d145-24b3-4a3c-b3ad-7a45f9c5ebdf": {"doc_ids": ["69ccc2a5-e9c3-4e49-83d8-be921ec6a1c9"], "extra_info": {}}, "8c01d67d-1123-4c56-9697-155638e038bc": {"doc_ids": ["1e694daa-8fb6-4270-b0bd-a9b5fbdd2e95"], "extra_info": {}}, "0ef3330e-031c-4c87-bec5-d92e7636e1f9": {"doc_ids": ["5c53ab64-b71e-4d47-8a14-0abb30623daf"], "extra_info": {}}, "92f4f13f-b2fd-49b7-abc9-db3f738807ff": {"doc_ids": ["e6d42bfa-6493-4515-97fc-3238396d4ada"], "extra_info": {}}, "1249d603-3649-4f52-a515-09dfce380cb8": {"doc_ids": ["c01dd3a4-8754-4999-bdfb-d3c8eade7371"], "extra_info": {}}, "c1c43e89-737d-40e6-acef-194fdd1a16d2": {"doc_ids": ["3d7e47ad-1f24-4a74-86ed-dbf83f6a48fd"], "extra_info": {}}, "1c1ff4b8-9689-49ea-b9c7-5cb531f60738": {"doc_ids": ["caecd940-d60a-44ea-b24c-ab33a103f55e"], "extra_info": {}}, "c2879172-ed9a-4603-bb08-eac0ee4c389c": {"doc_ids": ["2acc4bb0-e04d-429f-882f-4cd2553f77ab"], "extra_info": {}}, "6235f4a9-8616-48b9-a14e-7d95465a895b": {"doc_ids": ["8752cf6b-bd6d-4316-bc83-faa17adc2569"], "extra_info": {}}, "1ff4de14-7505-4fc0-b646-d3767121074b": {"doc_ids": ["4ee455a3-929e-4fbb-9b77-fcaf8fe42865"], "extra_info": {}}, "533c5a8e-bc39-4593-962d-ca365256adff": {"doc_ids": ["52419991-ec5e-46e4-9620-a2b668803171"], "extra_info": {}}, "04294f1c-71a0-4899-88fc-349800d92151": {"doc_ids": ["6124909f-f9d9-4d01-ae96-de74dd646e6f"], "extra_info": {}}, "8410ad07-37d2-4cdc-bc18-9c980d8aa175": {"doc_ids": ["a34c8242-b6e3-4e6c-83c8-d625a391f0d3"], "extra_info": {}}, "11b1da82-ba3d-4f5c-aa0b-6b06cab87792": {"doc_ids": ["c977fc0d-3442-4e34-a0f1-02d527180b59"], "extra_info": {}}, "d095d85a-7c48-4570-ab5b-050df9bb5e92": {"doc_ids": ["3f50c887-6e72-47cb-a7e6-e0b60cb3fe86"], "extra_info": {}}, "24024247-bc77-432d-862b-70db80edcd60": {"doc_ids": ["b4526608-d931-403c-a801-686dfd8a63f9"], "extra_info": {}}, "58368fc3-b269-4b2a-b848-e5bd6faba71c": {"doc_ids": ["5ba2950b-6e25-4161-b908-e7de890f2a77"], "extra_info": {}}, "035c54ee-d778-4022-959a-69509213bb95": {"doc_ids": ["09f5b80f-a75d-4500-9e7c-90e000f59c83"], "extra_info": {}}, "b34ec667-a13b-42a2-9170-347c47caf6c4": {"doc_ids": ["d9e978a6-bf9a-4deb-a890-a43d0cd95005"], "extra_info": {}}, "be981172-0b18-40a6-8036-444cc682f5bd": {"doc_ids": ["dc09f10c-f53d-4d4f-9f53-8e2343382409"], "extra_info": {}}, "13943530-2bf5-4b40-a5ec-a087febb7801": {"doc_ids": ["be809530-1d4a-478b-afaa-082c9e270025"], "extra_info": {}}, "df4d6293-f49a-4a49-970e-b3e86bc0240d": {"doc_ids": ["958ec472-4aa3-4de6-879c-8bafdf7f4432"], "extra_info": {}}, "0a902ee8-2ffc-402a-96c4-f3023893ff86": {"doc_ids": ["099dbf26-ec91-422b-b304-bfa396309a27"], "extra_info": {}}, "f34e2b29-07f5-453e-9b64-7514336d77e7": {"doc_ids": ["1fbfbe81-b31d-46fc-83e8-a2d1a3a91023"], "extra_info": {}}, "ff062794-0950-4a87-b9de-feb4aee16fd3": {"doc_ids": ["2b78c71b-fef7-4f48-863b-bf68ac70fc73"], "extra_info": {}}, "454e9503-d98e-49ea-9458-365610a97b9a": {"doc_ids": ["94ecd2c2-e6cb-418d-9f3e-02a34b749a73"], "extra_info": {}}, "3daae4c6-1814-45cf-8cd0-9b68c57f83bf": {"doc_ids": ["32e0bc6a-c2b4-47e7-919e-b51f1b35dd35"], "extra_info": {}}, "bfde8e0f-eacc-4c64-aff2-05cdd7e497da": {"doc_ids": ["e91eac3c-6ae2-4f03-98d2-125c62621a53"], "extra_info": {}}, "4b9389d6-1f83-45fd-b64d-734dc7f928ad": {"doc_ids": ["a240de8c-efb4-41f8-a39a-4e6b91c9f23d"], "extra_info": {}}, "808f308f-e460-42de-8362-b0702ff3755a": {"doc_ids": ["07f3dc87-fe5f-4501-9106-9ede34d8b477"], "extra_info": {}}, "c4a97738-6616-4a71-8a78-b267f224956b": {"doc_ids": ["4fc12f3b-e61e-4040-a5e0-d8153e4e0a25"], "extra_info": {}}, "df2770b3-9ee9-418a-8651-e0313bb32899": {"doc_ids": ["90048788-4aa4-402d-adca-9c591687f656"], "extra_info": {}}, "04295ed5-60c8-482d-a7c2-070a3f51f4b8": {"doc_ids": ["3a27b69d-8007-4d69-85ec-49e2b5280be4"], "extra_info": {}}, "2258c824-5608-416b-9c53-44ae5737ee66": {"doc_ids": ["94855142-3dcf-495f-9daf-508d421b80e7"], "extra_info": {}}, "b446d297-1046-40f6-bd00-47300eac2ba5": {"doc_ids": ["f20dbba1-6a60-46ef-b61b-1784cf2d7b24"], "extra_info": {}}, "e798042a-06ba-4c76-866b-62dd2d1878b3": {"doc_ids": ["9cb1df69-7d3a-4047-9a3d-0c4471356714"], "extra_info": {}}, "b820ba46-023c-4fb2-8177-b50194f24470": {"doc_ids": ["1548bcc4-fb39-4e83-bd7b-bed86c89ec86"], "extra_info": {}}, "2778ee9b-ff66-4da4-a9cc-152ca02d7574": {"doc_ids": ["e40d7abd-836d-40e6-9540-606d351c4d29"], "extra_info": {}}, "601bd0a5-b19e-4588-a58c-49a82cf26673": {"doc_ids": ["52b6094e-c72d-407f-bd63-430faee28a10"], "extra_info": {}}, "a3889e09-5033-4979-a2ff-1af3e00f8530": {"doc_ids": ["596e6dec-b34d-462a-8a23-fc549fe5815f"], "extra_info": {}}, "13e3f6ea-b1af-4bfc-8d48-3c9939c811a3": {"doc_ids": ["99bbcd0f-b74c-4115-b3b5-dacc3c133609"], "extra_info": {}}, "a4a3c2d4-bbce-4c48-bbf4-e81b3f0ddf8c": {"doc_ids": ["f59aec9b-d983-46f1-9a13-ba2d59ebb311"], "extra_info": {}}, "64724ef1-d87f-4202-baa1-312eee0c582f": {"doc_ids": ["57dd6901-b9a0-473a-a16e-d19bf38c57da"], "extra_info": {}}, "4e3c3ba2-ca60-41cf-8a94-283f49b67e70": {"doc_ids": ["9d7556e0-061b-4a41-9aaa-6c814bf7f6b6"], "extra_info": {}}, "a7998094-23d0-4a88-9e83-28e76a6e0cfe": {"doc_ids": ["02186f82-816a-4dd8-b6ef-0bc78365da34"], "extra_info": {}}, "c2d0205d-507d-4596-9e3b-b333903da97f": {"doc_ids": ["4ec68dab-20b4-4ae7-bc67-62d8e59a2843"], "extra_info": {}}, "79716b6f-0f56-46a7-b5df-1cf41524aca4": {"doc_ids": ["6ce72456-a2fe-486b-95c5-16df95c6fa34"], "extra_info": {}}, "c621376c-b93d-4e1e-b3fa-2da335c2d91b": {"doc_ids": ["380d898e-842b-4a2d-8bef-7d8255b646fb"], "extra_info": {}}, "523c34de-5d74-4b77-99fc-a7520615c1fd": {"doc_ids": ["4545f308-a994-45db-91e2-e4f81688b9d9"], "extra_info": {}}, "fb163a1d-bef5-4b95-b080-639034e23e8d": {"doc_ids": ["071aae5b-a021-4ec7-a6fc-f9984506b6cc"], "extra_info": {}}, "847dfa64-f363-420e-9173-de2ee0fe4307": {"doc_ids": ["74d94166-fc6d-4c18-91e6-c4c75f52b0d0"], "extra_info": {}}, "96d1cb02-54f0-4260-baca-92e8ad4e99c4": {"doc_ids": ["644c0c89-c28b-47e8-96bb-57b9b65dccd4"], "extra_info": {}}, "01590336-38dc-45d0-9ef7-b944aa65676c": {"doc_ids": ["0905ff9b-827e-4f8d-acd6-e8277ba99faa"], "extra_info": {}}, "f761d854-bca0-4e36-9c41-653a1b4f3421": {"doc_ids": ["fbe334a2-241a-430a-874c-afe006b59e78"], "extra_info": {}}, "1d33d3a9-db58-473a-aa8d-d3e9a9b0eec7": {"doc_ids": ["ce9e733e-2bec-422e-a11a-2131a9edc608"], "extra_info": {}}, "2087346d-2bc0-4689-b908-3c5f5b6089e8": {"doc_ids": ["49bb6596-592b-4576-a78f-fc1e98978568"], "extra_info": {}}, "c9566022-c51a-4f4c-9846-1ed37524cb46": {"doc_ids": ["781f9dca-9303-48d0-b0ea-7d04139adf36"], "extra_info": {}}, "d0b22fc4-e2f6-496b-a5cd-34514bee9af3": {"doc_ids": ["bb8cf6d6-728b-4e60-8f6c-d88b783375e5"], "extra_info": {}}, "74390672-7491-44fc-b7bd-a6cfaf163da6": {"doc_ids": ["ad760494-34a8-4114-bf90-aabb50109e51"], "extra_info": {}}, "77474efb-09f3-4ea6-bba1-e1bbf8f820c3": {"doc_ids": ["d0166261-1ff5-4a63-a0fc-a047ba5cdd69"], "extra_info": {}}, "ce144022-ed5a-46df-b903-a8e29bfd86d2": {"doc_ids": ["e90db66c-dfa4-4214-b7a1-c1fa13da3494"], "extra_info": {}}, "9c6b9848-8a82-4b2e-85e7-8623670ef543": {"doc_ids": ["e2309667-b0b7-4b29-b0f3-72f5578f1e4e"], "extra_info": {}}, "61326df3-41a8-4410-aa6e-2b72e17b6f63": {"doc_ids": ["25dad700-0ee5-4c7f-a1b5-eddeb230dacb"], "extra_info": {}}, "55b0e483-79e8-4911-a535-17ba40ef20e8": {"doc_ids": ["b0277435-5bf0-4dfc-bdf0-6eeeb0d61777"], "extra_info": {}}, "f5ab284a-d13b-44ae-901e-696b7bf566f3": {"doc_ids": ["6a9ecfb8-4eff-488f-9ad2-f1910439c077"], "extra_info": {}}, "65d615d4-9a7f-44ff-85d3-c9c12042a7f5": {"doc_ids": ["e7e741f6-079a-4871-9ce7-6ec5c1262908"], "extra_info": {}}, "8aa45dd3-152e-4fe5-8a74-c33f9eddf7f1": {"doc_ids": ["8de6a5be-e0b6-4951-b91d-611ee4df0df2"], "extra_info": {}}, "d68912c7-b88f-47d7-9356-bf07853506bf": {"doc_ids": ["e008fb2e-ccc1-45ab-83cb-fd84607a641d"], "extra_info": {}}, "eccf149f-e6f8-4614-913f-7b7c9c723345": {"doc_ids": ["06b59bae-6e1a-4db5-8d09-0a92fab4b64a"], "extra_info": {}}, "bb93b098-724a-40a0-bcc0-c7de610e9610": {"doc_ids": ["336113e5-ed3f-4b4f-9c33-5831ba179c2e"], "extra_info": {}}, "bb35a539-8298-468d-a515-eaa4ed534bb3": {"doc_ids": ["5054f2c5-d0e2-4c60-9d80-d0605d34208d"], "extra_info": {}}, "95bd720a-5f31-45f1-aaa2-baf1a2b64a45": {"doc_ids": ["060c4f46-4dbc-493e-a09d-36034f07f03a"], "extra_info": {}}, "60f3ea0a-2521-4ea1-b7e1-2f329e4fb973": {"doc_ids": ["6dc603e7-2a87-4f51-b8e5-840a0e661cd6"], "extra_info": {}}, "3aec7351-eb52-4f0f-8299-c25d5f9ea2e2": {"doc_ids": ["7409358b-59c6-4556-90ff-2db600a4a5a2"], "extra_info": {}}, "7a5c7291-b112-479b-8e30-ce806822f728": {"doc_ids": ["ae435997-7ca9-4647-a638-38ecd676bb2c"], "extra_info": {}}, "3a4cdaaf-8893-47c6-a2d4-f8d507818a07": {"doc_ids": ["2b57bbaf-26cd-4308-ba38-360dedcea65b"], "extra_info": {}}, "dd28ab8a-cfe0-47d3-95b3-81438f0bbd78": {"doc_ids": ["139cdcdc-7cb5-4a10-bc44-2dd32cf32a21"], "extra_info": {}}, "fb467902-ca22-4239-9e1e-387fceb1f217": {"doc_ids": ["fe26972b-5627-40ec-a02d-aadb916dcfe6"], "extra_info": {}}, "5882ac51-25d2-45cc-9953-af0fbbac5da3": {"doc_ids": ["827c9198-fb8a-4c4d-8063-8117c5652b97"], "extra_info": {}}, "d3c06861-6c8b-4652-a4f7-ce2612691539": {"doc_ids": ["799bd402-e64c-4dfe-9ba6-71345a3d3583"], "extra_info": {}}, "50c24e6e-999b-495b-aa7d-fdf1f496d24c": {"doc_ids": ["d3dd9ed6-fbf3-4608-a05f-ff4312979f0b"], "extra_info": {}}, "984c85eb-9277-4c37-a8ab-92e2d5938a2c": {"doc_ids": ["0bfbe2d5-8bfd-42fa-858e-51234ee0bbf8"], "extra_info": {}}, "9de54e9e-88dc-4d2f-9d3d-6f1b9dff59ce": {"doc_ids": ["f8df0e82-8bb6-45f8-8576-622e50c8dc16"], "extra_info": {}}, "84f5d966-dbe4-4ad4-931f-7bf5d6966061": {"doc_ids": ["9a044e29-9fc0-4213-8869-aa3b9437d2bd"], "extra_info": {}}, "e9d940ef-32c1-4119-99b1-51f06458193e": {"doc_ids": ["63a97347-6433-4c95-a2da-5b4b596b2b4b"], "extra_info": {}}, "471da96d-5fee-4129-82e6-056c224d5a33": {"doc_ids": ["09ff7a9a-fcd5-4b84-b19a-7a461db93a6d"], "extra_info": {}}, "24b7968d-b5a8-4ac3-ac26-7c6362ab89f5": {"doc_ids": ["ee10f033-f014-4bf1-b937-acefdfb37ef4"], "extra_info": {}}, "4a6c5380-66d9-4789-b4f8-3fd17d182856": {"doc_ids": ["11c1a613-4c85-4eff-9593-dfd2abd26013"], "extra_info": {}}, "9f846d56-e30c-473c-9ea3-178acfbd447e": {"doc_ids": ["c327a19f-e8ea-4ba5-8816-f1c7dcc2985c"], "extra_info": {}}, "142d367c-594b-47f6-a4e3-68d59385bc9e": {"doc_ids": ["0085df9d-d226-4d41-b442-2588a2c4442d"], "extra_info": {}}, "8e0711d4-22e9-4ea1-95d6-bf1c8509a9db": {"doc_ids": ["fd42cec0-79bd-4b74-a3f9-0132a6d3c7e7"], "extra_info": {}}, "822fcbaf-3123-4ef2-baad-08a0f7fea783": {"doc_ids": ["68390780-d0bd-4ce6-9659-f7902935264b"], "extra_info": {}}, "c51c07ec-2e4c-4521-b7f8-43fdb988f86f": {"doc_ids": ["b4503e66-975b-43dc-86f2-4d7a396d91df"], "extra_info": {}}, "d06afe50-8986-4b0c-af49-18959ecb9aa8": {"doc_ids": ["c9c44dbc-63fb-4470-9350-6a26f8ef77c9"], "extra_info": {}}, "6396a097-e849-4738-a924-29c7564d0e90": {"doc_ids": ["e559939e-9593-41c3-badf-14fd744c19ec"], "extra_info": {}}, "598bc73b-b6b6-48e1-a774-36cd6effe1fd": {"doc_ids": ["49b57cb0-20e3-43e8-ae79-e20f549c7374"], "extra_info": {}}, "8db89cd6-92ab-4be6-9c76-41038b231f8e": {"doc_ids": ["589aeb82-7aa3-4d1b-9100-89daa199009e"], "extra_info": {}}, "9b5132cb-efb6-460c-a975-02f54ba474bf": {"doc_ids": ["426a1c47-70ec-489c-9826-72a21bc40ada"], "extra_info": {}}, "59f72577-8c48-4a6d-b84b-84ea1416091b": {"doc_ids": ["55283936-7099-4e90-a634-b81c58a732e6"], "extra_info": {}}, "dd43d9dc-91d9-4db7-a3c0-c23cd7942bc3": {"doc_ids": ["7dab53ae-b20f-4663-a4e4-1be961fcc323"], "extra_info": {}}, "95d868bb-47ee-4780-ac71-97277bb5dd86": {"doc_ids": ["71364cfc-2ac4-4885-96c4-cefca02899df"], "extra_info": {}}, "0073762c-c4ab-4bbe-b9a2-9e5aba83fb72": {"doc_ids": ["4365e4e5-9b0d-4efd-80e4-9a6587e604ac"], "extra_info": {}}, "5c1d4580-b1c5-4ebe-9325-57f2738062ce": {"doc_ids": ["e75c7588-5405-4798-9013-fbcf1e9f3ffd"], "extra_info": {}}, "b49d7878-00ef-4604-8d31-de36f9ad50ca": {"doc_ids": ["45760e51-08ea-40ac-80c1-b84754d2c7ce"], "extra_info": {}}, "47125f4d-f9e7-4cf8-bc34-51c8ae007c1f": {"doc_ids": ["690c1bea-4c71-4c7c-8ddb-782007d94db7"], "extra_info": {}}, "9fc76c08-bbfe-416a-9eea-79e614d9385c": {"doc_ids": ["e6bc732b-3699-465c-989d-db98f75d551a"], "extra_info": {}}, "6966981b-7338-44cc-917e-6a07200d0da6": {"doc_ids": ["2124c4b3-f47d-4654-a21d-661e664520f9"], "extra_info": {}}, "e05ca300-1142-40a3-a85c-0ca3867b0f9f": {"doc_ids": ["8ca19ebd-b3dd-42e3-a6e6-4bcfce4ea64b"], "extra_info": {}}, "4bda54dd-18a3-4bd3-b20c-23c67484fc82": {"doc_ids": ["6fd66580-b860-48f6-a6fa-639b81dba307"], "extra_info": {}}, "101d9b50-5af3-4710-a1d7-be0be12ca6ca": {"doc_ids": ["e02af1bc-7371-4182-a0ac-6b2a520b52e8"], "extra_info": {}}, "bbf39dbb-a052-4d9f-bb1c-947a3c77009c": {"doc_ids": ["e45f7740-9e33-4c82-9dfe-2e1836f9422d"], "extra_info": {}}, "f3dd3687-2097-4bdd-ad6d-766cd0641963": {"doc_ids": ["82a97215-165d-40fa-ac3c-0ed1c0191a1e"], "extra_info": {}}, "7abe729f-cba6-4d25-9fa4-a15abd1d80ed": {"doc_ids": ["98a479ca-df2d-423f-a5ee-9e31aca64036"], "extra_info": {}}, "d3630451-9ef4-443f-b446-3e7c255fea8d": {"doc_ids": ["6501fdc8-b97b-4ed0-abb2-eee899af26c3"], "extra_info": {}}, "c9044581-d8ad-4c29-b379-301c5253fedb": {"doc_ids": ["c9d122d7-6ef9-4bf9-861d-40aec012c22b"], "extra_info": {}}, "e3e1c423-adec-470b-a9f2-7320e8d42e9d": {"doc_ids": ["cfe4887b-04ae-44f8-8f86-c7db9534f3b5"], "extra_info": {}}, "0f35ac51-fcf1-4e6d-8a39-4c0a6e845348": {"doc_ids": ["1e899c7f-d55c-4bda-ae2a-d96cb8caabac"], "extra_info": {}}, "6766e09d-be70-4a7f-a0db-8062ffa906ca": {"doc_ids": ["a374bcba-bffc-4e7b-83b3-74d98cd052b9"], "extra_info": {}}, "164f5556-1567-4c0f-8f56-12e246077b81": {"doc_ids": ["189a8a93-cbf7-41e9-8434-2410258f880c"], "extra_info": {}}, "ae08fb7b-2f0f-4945-b120-3b66f07f0ca7": {"doc_ids": ["81ad88f4-04bf-47a9-94c1-7dfbce849cb7"], "extra_info": {}}, "08690d1b-ff95-4c65-b857-52b41a5fce68": {"doc_ids": ["cc00ef9a-967f-41c2-85e9-a06182348206"], "extra_info": {}}, "7eb22a5f-6ba8-4a59-ac34-1f7ce983ec9d": {"doc_ids": ["7416944d-dada-4a00-916f-1e7c8bccb085"], "extra_info": {}}, "6383dcbd-5e80-4be5-a945-2fd09b3fecec": {"doc_ids": ["0ac11f3b-44ce-4fd9-814c-1b720a861867"], "extra_info": {}}, "c56fd3fb-b2f9-470c-bfc8-dc44c85abcef": {"doc_ids": ["5d538d51-2111-4a33-b6ac-9312bdd45c7f"], "extra_info": {}}, "8984e008-85af-42ae-921d-989fdce6fb29": {"doc_ids": ["c9e8d5ca-0a62-4871-9d03-c77dabab51d7"], "extra_info": {}}, "9ece1d9f-b93d-44d4-b775-a76fc90b325f": {"doc_ids": ["7469e56c-eb3f-4758-9a81-06d043031e09"], "extra_info": {}}, "0cc902f0-893d-4974-bb84-62d99cb8dbc2": {"doc_ids": ["e83371bf-389e-44ad-881f-7e15b8019dcc"], "extra_info": {}}, "0c14efea-afc4-48bd-8325-e1184438d847": {"doc_ids": ["f7f56cfb-efc5-4dff-a7c2-252edb9ad702"], "extra_info": {}}, "8d55f6b1-4f6d-413b-a995-bd0584ca362b": {"doc_ids": ["e10fba76-efb3-4c41-9e7c-cac075c20456"], "extra_info": {}}, "4e8508c7-1655-402a-a44c-eae02ceb1211": {"doc_ids": ["07001baf-0b5f-42ad-8337-e8a619212731"], "extra_info": {}}, "47831282-51f3-464c-b1b9-17c823220e95": {"doc_ids": ["6dbdfca3-924b-4be4-8a57-cbfaddb10680"], "extra_info": {}}, "d1968bf4-ebb8-484a-86a7-e65acb1eac7d": {"doc_ids": ["b7524b16-3059-4a41-b96d-90accc5bd682"], "extra_info": {}}, "52c6b19e-6042-40a3-b58d-6ae76e65fbc3": {"doc_ids": ["46da6b03-644d-4e7a-b99e-4b565e1a54d8"], "extra_info": {}}, "e808703f-b0ef-49b5-a124-cc370047eda1": {"doc_ids": ["7af87fe0-93ba-4cb7-aa6b-50f615d665e7"], "extra_info": {}}, "7e2080aa-54d4-4cef-92d6-f7ca34245f66": {"doc_ids": ["fef74169-0d53-430c-93ac-26da4328f514", "13db9405-9722-4b15-a11b-8322745040ef", "a18fb814-70f8-4dbc-90b8-b0918437d688"], "extra_info": {}}, "23480905-dd0b-459f-ac0b-44f8bb4b99df": {"doc_ids": ["12a30353-565b-4d0b-ae1a-1b9f7cf4316d"], "extra_info": {}}, "0c13dc53-0e41-4464-b694-f336f2ba61c3": {"doc_ids": ["1c121e3b-71e5-4863-9f7a-bec3c781f99e"], "extra_info": {}}, "5a53e60e-69b8-4079-86ef-835b90a2d372": {"doc_ids": ["84153dd7-f43b-44f0-a864-70198a0b3e61"], "extra_info": {}}, "aaf6782a-b13f-4e1e-8539-4c1138bab937": {"doc_ids": ["9197d8af-55a6-4b0b-a846-238548e95cb3"], "extra_info": {}}, "a12dd3a0-c76e-45f6-8cab-a9af636740be": {"doc_ids": ["3457e49a-a37d-4176-b5e4-669bbd004bc4"], "extra_info": {}}, "35416d19-098e-41d7-a7ec-23e8b7fa581b": {"doc_ids": ["ae7f0a13-5f14-4148-91a1-2e44d834d43c"], "extra_info": {}}, "b6a2edac-6860-4bed-8853-a8ccd390f619": {"doc_ids": ["1b0f8eed-a79a-4899-9951-ea8df3c3f7d1"], "extra_info": {}}, "0174ed96-4bf1-46e4-be9e-3c90009ffd85": {"doc_ids": ["f2c09f9c-78fe-48ec-8b13-7db8a5e8d8e1"], "extra_info": {}}, "8f2108f9-9ca8-40e1-95ff-406b0629315a": {"doc_ids": ["b0fd348f-5bdd-4b85-aee0-026b4e270cb0"], "extra_info": {}}, "a4417c2b-bcec-4c78-ae7c-792c24060a77": {"doc_ids": ["91a9f52e-1767-42c2-9e23-4aa5e1d7957d"], "extra_info": {}}, "6350ea15-0206-4253-9718-fbcd3587e071": {"doc_ids": ["890112b2-d1ec-42e6-88ec-02f40f9ff734"], "extra_info": {}}, "6d11e0c1-396f-47d3-83b9-83bbcd2d25d7": {"doc_ids": ["3cd0919c-29dc-4411-a5b0-d9d68780255a"], "extra_info": {}}, "d2e31e26-eaab-4475-bac1-c4f653e00610": {"doc_ids": ["799b9920-3b8f-43c1-bee2-efc2194260d1"], "extra_info": {}}, "2e59d76c-f196-44c8-86a9-4c078bbf38b2": {"doc_ids": ["cbb34f1b-1869-4469-b5ec-552735a9b329"], "extra_info": {}}, "d9e7609a-b1e8-4256-95ec-409d18e1b8e2": {"doc_ids": ["e64fdb30-ecb1-4488-bb61-facf45569c0b"], "extra_info": {}}, "66f7c7a1-9b8e-4577-af30-ba27f054fbe1": {"doc_ids": ["23daad27-fd80-4543-bcc4-6269007533e6"], "extra_info": {}}, "38b6e540-9bf6-4380-9766-667d13c44e44": {"doc_ids": ["f22d496d-fdac-4b2a-bfe9-ca968c44e58f"], "extra_info": {}}, "6ed619fe-34f9-47e9-9647-da4041e186b6": {"doc_ids": ["8b6b0983-0f95-46a4-b7f1-1a9985c0f824"], "extra_info": {}}, "bf7cad1e-ec36-447d-a6fc-834160aee001": {"doc_ids": ["372b40fa-51b5-4398-89f3-b12b0faa7105"], "extra_info": {}}, "97e6ffbc-0027-44b0-9d5e-a51446584ddf": {"doc_ids": ["3b261782-6fab-4a58-b9bc-125587543f45"], "extra_info": {}}, "d9702fe6-e7c4-4384-8759-55dab38049e3": {"doc_ids": ["51a90574-87cf-4086-a9da-3d289697dde8"], "extra_info": {}}, "f9b9cc8b-e3a4-4ebd-8fb1-0f0dafc07391": {"doc_ids": ["2ee2b17c-f240-48b2-9c0b-af6c697ee4dd"], "extra_info": {}}, "b7d0e819-7277-468a-a1fc-3c5a23b573ac": {"doc_ids": ["9ca7183e-2c2d-411d-acad-c51948c13b30"], "extra_info": {}}, "8adf81da-ee6b-4ba6-ba04-9d3d38a8af94": {"doc_ids": ["6e092187-120a-465a-b0a2-30acab812dc0"], "extra_info": {}}, "1bed0ae0-8de1-4101-9dbd-3bdc3f94009b": {"doc_ids": ["e3559b95-c245-46f4-9c56-b2b7d15c7f93", "57450c33-f137-4b7c-a434-94e8e4782e8e", "67e86cf0-ec9d-43aa-b07a-a5d56b796001"], "extra_info": {}}, "b6f0b1b2-2e91-475a-9be4-3c326b6692a6": {"doc_ids": ["58aa267d-4b57-4bbe-81fa-183707c5aea1"], "extra_info": {}}, "d7e82590-2655-4148-97e5-6c8858dd8207": {"doc_ids": ["f311e31d-029e-4eae-97bb-287d700cc7b6"], "extra_info": {}}, "1dad0152-b339-4d5b-afb2-545f76225144": {"doc_ids": ["43bd16f8-d834-49ee-82b4-fc0c1747f4d9"], "extra_info": {}}, "4944cfcf-209c-4154-85ca-7af5dcafa297": {"doc_ids": ["cb701aba-7049-46c5-b66c-250100e765f4"], "extra_info": {}}, "4e164241-db65-4bbd-9b55-8e826f0ed769": {"doc_ids": ["7c0b040e-abfc-45a0-9556-c674b094f1db"], "extra_info": {}}, "559d3393-737b-4973-ac0c-1c4053d18064": {"doc_ids": ["1276f9d6-5850-4eb3-b575-aff28f3aac9b"], "extra_info": {}}, "37c0d72f-6c52-4add-91d6-6af2261f7a19": {"doc_ids": ["f0c78d05-e777-4b0e-8983-f103607e8d10"], "extra_info": {}}, "98a7c29d-818a-41b0-80f7-566f0c25bd0d": {"doc_ids": ["62964911-0ce9-48e9-8c97-0a06bca9b9e8"], "extra_info": {}}, "158ebfb6-2b0b-44cb-a90f-8265433b43aa": {"doc_ids": ["6c852197-2ccd-4605-9a5e-3c53661a9a3a"], "extra_info": {}}, "03d20b1f-3088-45ea-b30c-48f131bf6210": {"doc_ids": ["99335ceb-dfe6-43e5-a9a8-a394c7c0f3d8"], "extra_info": {}}, "d3511a93-f31b-47ed-9123-1db43f75db36": {"doc_ids": ["48f7e8e0-f31d-47e9-a82a-77c791e01223"], "extra_info": {}}, "10c864b3-12e3-493b-85cd-b66477a640b4": {"doc_ids": ["ba85c09f-eeca-439c-bdb2-20746b277c51"], "extra_info": {}}, "9d6018c1-d7d8-46b8-b9aa-27e4a5593414": {"doc_ids": ["92551a94-5a76-49b3-b0b4-5b89549d5cc0"], "extra_info": {}}, "3785f86a-f795-4fc3-8d5b-57380c0b5454": {"doc_ids": ["7a19232f-14f9-444d-9fbf-dea1560cd52f"], "extra_info": {}}, "ddb55fe3-ce37-43f6-a197-55ce72b546e8": {"doc_ids": ["a7913ba6-8abf-4be9-8955-5b651f2e39c6"], "extra_info": {}}, "1c3b9119-c763-4351-a029-d8176748e49a": {"doc_ids": ["d8c81569-da9f-4d1e-9522-10bb14e1ead8"], "extra_info": {}}, "d24b6914-40bd-4c8e-80dc-215ca13f0a30": {"doc_ids": ["b215efad-a837-4720-bf49-c5bd1c160a3b"], "extra_info": {}}, "62d2a812-84a2-4b7d-988e-5b48a2ecc60a": {"doc_ids": ["aff7750a-b8ee-443e-9567-c511bb276073"], "extra_info": {}}, "1c386962-7580-42e5-8a3e-cd90f5b62749": {"doc_ids": ["75fd2a12-6f14-4fb3-b90d-afb845629938"], "extra_info": {}}, "ae37075f-78f2-43a5-96a4-7dd4daf2a986": {"doc_ids": ["e6fa65d8-4559-4f89-a46a-de8e004e1989"], "extra_info": {}}, "05ef1353-2216-4276-8979-b308ab3505a0": {"doc_ids": ["20380602-cabd-43df-aa9e-a754fe9bb338"], "extra_info": {}}, "cf222b8c-7d58-4843-8345-7a17e2697730": {"doc_ids": ["3ccfe536-b020-487c-a181-2b15a4cbbb63"], "extra_info": {}}, "e03b46e2-1d3e-48b4-9b81-13bcc41d6e39": {"doc_ids": ["675aa5a0-37e8-4417-b03b-28b96c858333"], "extra_info": {}}, "8257d49d-1b2a-4c05-a3ac-52da3cd51593": {"doc_ids": ["51ccfca3-9e80-488e-bc7f-164a04cd2be2"], "extra_info": {}}, "3bb978ba-518c-4ef9-bcf7-5bb5c92b409d": {"doc_ids": ["ebff71f7-544e-44b5-bfbe-81cd8b005558"], "extra_info": {}}, "ceaee474-275a-47fc-b924-2c2427f6eae0": {"doc_ids": ["c0464c49-0e9c-40e4-a146-e45cebf867cb"], "extra_info": {}}, "a1d7f444-9de8-4e00-afdd-932cf54f89cd": {"doc_ids": ["00480299-c7fd-42c9-b6f4-0ffaf7ea352d"], "extra_info": {}}, "baad1fa2-7af9-4df4-8f23-0639e2aa031b": {"doc_ids": ["e8009d68-acd7-46b7-85e9-f2a0d5ebb42c"], "extra_info": {}}, "12bc953c-96e3-4705-801a-376347ee59df": {"doc_ids": ["8b79e063-e0da-4c6a-b80f-114ca2ef8a13"], "extra_info": {}}, "ea107150-94cb-473e-b97c-e7e91768986d": {"doc_ids": ["baf2133c-01aa-453a-be80-78ced4d437ab"], "extra_info": {}}, "2c814c7d-18d0-4a21-ba32-34f97170a497": {"doc_ids": ["08eb1c1f-3642-4ce8-85eb-29b785901b37"], "extra_info": {}}, "82888a98-2bc1-4583-bf6b-79956ab74a22": {"doc_ids": ["bba9da09-aab6-4d14-9656-d146fe65bb79"], "extra_info": {}}, "e726c48b-0ebb-4ffa-99f7-d24c1f379003": {"doc_ids": ["bda455ff-4b13-4e14-ac65-7b0cd404c1db"], "extra_info": {}}, "2b5fd0db-b1e4-4ede-b954-35b489783791": {"doc_ids": ["dd177d05-55d9-4da3-8ccc-12d33daf35d7"], "extra_info": {}}, "93f7c788-06af-4748-8b39-4c1d3f56e545": {"doc_ids": ["ee986c72-d1a3-4b66-a1c3-5de48ef78e45"], "extra_info": {}}, "2016e50c-034f-4ffd-96da-d44c14125cfe": {"doc_ids": ["35d6fe89-b60e-4a58-9b79-af4dcc8cd631"], "extra_info": {}}, "a5b91fec-a11f-44fa-bf4b-232e0070a308": {"doc_ids": ["d70293ae-84c3-4411-8282-9b51f5a68533"], "extra_info": {}}, "bb17e666-b7e5-4054-9001-2b5b109939c8": {"doc_ids": ["43ceb549-3a93-463d-bcff-c122fa808b46"], "extra_info": {}}, "f5a205b6-1f4a-4388-9634-f6e4aa008177": {"doc_ids": ["21b424f4-cf9e-4c3f-a978-aba640343669"], "extra_info": {}}, "fb1bf3dc-e053-4443-8804-e91aafeeb452": {"doc_ids": ["3a46ba33-fd4d-4ff2-91e9-8893958f96ed"], "extra_info": {}}, "3f7ba9bc-cd29-477f-9e76-ab8f0e0b871d": {"doc_ids": ["1957c8bf-245a-454c-a471-1ce5ad31e1eb"], "extra_info": {}}, "4d40f815-520a-496b-9477-c754fe5c523c": {"doc_ids": ["8ae5783e-f728-4c1f-ac0b-20d6f2e10dd6"], "extra_info": {}}, "d619a671-8390-41cb-9b86-56c068fe07b7": {"doc_ids": ["14b6cba7-5bba-40b6-9240-a642af2953f7"], "extra_info": {}}, "ae4e1199-2d9f-49a8-a7ce-6116ef320f62": {"doc_ids": ["a7d7c512-0ac1-41d6-97be-26458690334b"], "extra_info": {}}, "876ddc53-d04f-478e-ab47-3902f8fb2425": {"doc_ids": ["dad646de-8764-4bca-881d-e3ebe05e96d2"], "extra_info": {}}, "e8be341c-3dc6-4428-9356-ecfc9f712dac": {"doc_ids": ["9bbe75e8-71e9-4d2d-8750-647e80b708c9"], "extra_info": {}}, "a6d6026d-d67b-480a-bc73-5bf4b3f1a969": {"doc_ids": ["0fdb1556-102c-4f1f-b16c-782b6201522b"], "extra_info": {}}, "b1be4d11-e41c-4c0c-8a75-94212634fc6a": {"doc_ids": ["260cb67e-92f7-4b28-8c0b-c31b848bdae4"], "extra_info": {}}, "6984a120-3107-4103-862a-baf3f3011dea": {"doc_ids": ["a883dc45-9050-4c89-8cf1-c31c71c1f5ee"], "extra_info": {}}, "1512dd2c-8738-4424-b798-19e468b80f25": {"doc_ids": ["d51b6eec-2798-4dea-99e5-020892587ab7"], "extra_info": {}}, "c67f00c0-a677-4dc8-ac43-7c367a1a3246": {"doc_ids": ["218ad2e2-bedf-437f-90d2-7ebe938afee2"], "extra_info": {}}, "0b50f383-99e7-465c-bd21-64919075993a": {"doc_ids": ["6251535a-9dc5-4146-bbfa-5f3ed67db738"], "extra_info": {}}, "b19e5063-f1c7-410e-b848-00dcb0b32341": {"doc_ids": ["04c8a8b9-b3ff-4a6c-821d-fddb8ab76a45"], "extra_info": {}}, "883a4cbc-5b3c-4a8b-9ecc-6d56add48842": {"doc_ids": ["5444f31f-5130-42ae-a4b1-0085bcb48670"], "extra_info": {}}, "cbcb5efc-7380-4e77-a9c5-1a352ec67816": {"doc_ids": ["edcc3661-1d75-49dc-92ec-ec7db2ecd09e"], "extra_info": {}}, "16bfc320-fa12-4597-9158-f7b5060f74f7": {"doc_ids": ["59e4a2de-0d41-4798-b15f-0f0aae662c85"], "extra_info": {}}, "dadbe380-9c08-476c-bcd7-b25e4712c2a9": {"doc_ids": ["4c1bd854-f82d-4ca3-85aa-42ecfec33433"], "extra_info": {}}, "11012a6c-eeec-4d81-ac52-a1a096e2a691": {"doc_ids": ["80b676af-96d1-4b61-a5b7-c4cf041187ba"], "extra_info": {}}, "fab48aeb-5ac7-4c18-8020-856e279fd32f": {"doc_ids": ["f5ea9e7b-887c-414e-ab98-c2a5405b3d79"], "extra_info": {}}, "cc5230cc-8299-4d1d-bb7f-2036f06ff729": {"doc_ids": ["3d991926-5fa8-49c8-ba64-a0ca1daf97be"], "extra_info": {}}, "bc4e582e-6d5b-47c9-bcb1-3c5bffc6adcf": {"doc_ids": ["ba6882b4-2c71-42bc-8d1e-08c71db91ad2"], "extra_info": {}}, "1322539f-9a5b-492f-a03d-39b84d23e53a": {"doc_ids": ["afd8fed0-4a89-4744-9fc9-76f8737332ff"], "extra_info": {}}, "8ed59976-2676-44c9-a796-d9a0f5602b80": {"doc_ids": ["e92fd708-263e-4157-b117-680be0173605"], "extra_info": {}}, "33b20e71-0905-43a1-b409-dd859f842f7f": {"doc_ids": ["ceb5b647-5d31-4238-a06b-a9438dcf370e"], "extra_info": {}}, "517244d7-1b7c-4563-be2f-662771fe1d1e": {"doc_ids": ["72d263c2-a03c-4714-a508-a75c5544d5aa"], "extra_info": {}}, "e4be3a3c-b00f-4dd1-b3a4-271c552f0147": {"doc_ids": ["ab8b169c-2d17-40ce-855d-49eb5e98196b"], "extra_info": {}}, "130a131a-e3f2-47ce-80a7-350a6492f683": {"doc_ids": ["53bf067c-4e23-4418-8b67-30fc5471721d"], "extra_info": {}}, "407b5493-35db-454c-84b2-78cf2a07b485": {"doc_ids": ["43052fa2-ea0c-4efe-b86b-a6501cf489ba"], "extra_info": {}}, "d1a459e1-d6be-428f-8373-b399b5641d83": {"doc_ids": ["b19a58c1-1d2f-450a-983e-3de78506ddf6"], "extra_info": {}}, "7c6f237b-d586-4352-aeaf-6c73f0c90c33": {"doc_ids": ["0a3765de-aaae-4305-886d-51c802153a47"], "extra_info": {}}, "548fa7f7-bbb4-47f2-82cb-f5b459b95ced": {"doc_ids": ["c5b18191-9c25-4d4c-82e8-200acf9efc03"], "extra_info": {}}, "539cb582-1319-49a6-9f2a-1f25097643ea": {"doc_ids": ["c8c60a44-a1e0-4110-9f6c-c6306746b8ec"], "extra_info": {}}, "028641ed-39d8-4ddd-985a-11731f105b4a": {"doc_ids": ["42170199-6641-43a2-a43d-ccef56ffa03c"], "extra_info": {}}, "457cf3f6-01f1-407b-8556-1cfc2837bbb9": {"doc_ids": ["3692206c-e9c1-4f07-82ca-072fa7b91a07"], "extra_info": {}}, "2936cbff-3487-43b8-a90c-b95311d06f0f": {"doc_ids": ["dd5ea695-dee7-4875-b28b-764449128450"], "extra_info": {}}, "2cb2d22a-e4e7-4d68-bc32-69e7ac3287c8": {"doc_ids": ["d18551e0-28db-44fd-b550-681c1e2d4069"], "extra_info": {}}, "61b2bd79-aeaf-4882-b9ea-8a93e8614b8f": {"doc_ids": ["3cdeddbb-f961-4f46-ab91-40c5872f09f5"], "extra_info": {}}, "1fd11c13-f78f-4511-a6b9-153ab32a0350": {"doc_ids": ["78219a75-7aa7-4444-8024-f60328c9514a"], "extra_info": {}}, "4b4db1f2-d6d5-4c2a-994c-b5458a6a628f": {"doc_ids": ["a90b891e-db9d-41fc-8456-52715b5ff9a7"], "extra_info": {}}, "d4355c97-b555-438a-8f09-476c4a9a4259": {"doc_ids": ["82539f0f-7457-4759-ad04-0cfc31084464"], "extra_info": {}}, "842d5836-607d-49ab-b5e9-444ab2cd156a": {"doc_ids": ["31cd7a5e-093d-4c94-9f7e-de7ddb2e9fc2"], "extra_info": {}}, "a4d65481-ca5f-4435-922a-d857c433da89": {"doc_ids": ["4c63c702-24d5-46d6-9367-a931d84b1b57"], "extra_info": {}}, "ba766128-c191-4e19-8325-57fc2d1a20fb": {"doc_ids": ["9643f40d-7b1a-4a05-bc15-10a061364113"], "extra_info": {}}, "2d667203-d272-44b4-82cb-93f58a7c8bd8": {"doc_ids": ["e593e093-c0af-4185-863b-f8a944e80226"], "extra_info": {}}, "cffb763e-45bf-4f87-adbd-8b0d0962e658": {"doc_ids": ["cdba7295-cc55-4f42-876a-6aeb6c04f577"], "extra_info": {}}, "7a945c94-d5ba-436f-8ce7-67d43aef23a2": {"doc_ids": ["f72918de-e48a-4835-836e-10fd59d3416a"], "extra_info": {}}, "6610be3a-878b-47bc-b230-937cf9c3f9af": {"doc_ids": ["39c8c0ea-31fa-48d3-8cc5-ec621c7cf73c"], "extra_info": {}}, "d5511293-510b-4489-8c1f-96dd238acdab": {"doc_ids": ["5884a394-8f24-4c34-911e-fc013662041e"], "extra_info": {}}, "165931b9-bf35-41f8-b925-7a617ecc7ddb": {"doc_ids": ["f7000349-2325-44c2-ad54-f35d6d54ca9f"], "extra_info": {}}, "91110072-c5e0-4824-b744-901cbf470249": {"doc_ids": ["b98997ec-68ba-45da-8f8f-5a0a2d838e4b"], "extra_info": {}}, "99b52034-2daf-4c1c-b967-bbcea0533c95": {"doc_ids": ["fa530b26-1615-47ac-8648-ee999137ffbe"], "extra_info": {}}, "a1ac84bc-643d-4ab2-ad8d-9b446e679898": {"doc_ids": ["5fe80c59-c0e7-4b0c-9a25-3d4e9b004ef3"], "extra_info": {}}, "6ec4dbee-87be-4943-bfb1-b69106e56285": {"doc_ids": ["da583b14-65c0-4e94-901b-4906f2bed945"], "extra_info": {}}, "214e3a21-013b-40d6-a1e9-3fc880d3629d": {"doc_ids": ["8c8df2c3-7874-4f1f-b6dd-2240aa7f1901"], "extra_info": {}}, "f1e2505e-e74e-4814-8fbd-7d27de61db29": {"doc_ids": ["01c7aec7-d9aa-4ca1-a6c4-eb342d0e6340"], "extra_info": {}}, "f45ec9bc-30bb-4a64-83dc-37e7ff21933e": {"doc_ids": ["9dcc3ce7-63b7-46b4-9242-e9850683f614"], "extra_info": {}}, "014d65e9-08ec-4269-8550-d2f83edb75f8": {"doc_ids": ["01e722f6-2c30-43dc-a581-7149f7c49c84"], "extra_info": {}}, "aa61189f-0f45-48db-8aee-c75f94c4a4c9": {"doc_ids": ["3b04e5c6-776c-4206-b1be-627cc1b82fcc"], "extra_info": {}}, "e08696ee-af66-40aa-9392-1368cb5755f1": {"doc_ids": ["bab3a49b-6ba3-4248-8891-c97b65a373b8"], "extra_info": {}}, "0377b52e-95cc-42f1-9967-d4a79d2a608c": {"doc_ids": ["9e9c4f42-4305-48db-901e-92bafac4674c"], "extra_info": {}}, "9477f9f3-ce09-424f-90da-1c7ef0922361": {"doc_ids": ["59281d9f-d4b4-42a1-b871-8ebf64efc5d3"], "extra_info": {}}, "b4d37783-faf9-4ec5-996a-94647d84e20e": {"doc_ids": ["dfbd2ab9-ef19-4d75-9acd-c0f68ef4876a"], "extra_info": {}}, "fe1726ee-6806-4c26-bf31-57ed3f7611ca": {"doc_ids": ["2e7b29af-d9a1-4e89-bc7a-bd5741d736ee"], "extra_info": {}}, "3fdd0d22-f411-4346-9819-1c1ba92fd8d7": {"doc_ids": ["d98055a5-664c-48ed-8324-a4010d5aefc2"], "extra_info": {}}, "8416965d-b33c-4570-bca4-5496e58b141b": {"doc_ids": ["6003fec9-67d8-4bb2-ad58-621311dbe713"], "extra_info": {}}, "bf8b1ac5-3d41-486f-804b-87474480908d": {"doc_ids": ["762eb054-1743-4d3b-abc1-89cb78c78c6b"], "extra_info": {}}, "f9b84565-3152-4bb2-ac2e-8f878f1e53fc": {"doc_ids": ["472e3e1a-0297-44f8-b140-9b8dda7d1501"], "extra_info": {}}, "d8919ac6-2966-454d-bea9-d8e80772dd07": {"doc_ids": ["b96b2fd1-f272-41ef-b439-18710d29957d"], "extra_info": {}}, "77acb53d-c679-4d36-84a2-f17dee175bd9": {"doc_ids": ["b2076c10-0578-41da-81c0-61310f463540"], "extra_info": {}}, "54188f3d-1f91-41a9-a267-e8b1462f4550": {"doc_ids": ["6a1cc5f1-cc51-4f39-bd79-fc9866049b1c"], "extra_info": {}}, "bba398e9-39d4-4bf1-b111-352d7ddf10f0": {"doc_ids": ["005f11ee-ea48-4a34-9526-847f1422613f"], "extra_info": {}}, "04554470-6ccd-428b-99f5-89cbb40708f3": {"doc_ids": ["3f877dd4-c395-4447-955f-c0212e6f777e"], "extra_info": {}}, "b90b941b-3750-4ba8-83f3-dc3b5b867b7f": {"doc_ids": ["16cacadd-9fc6-4f5a-9e50-0467dcc80c3d"], "extra_info": {}}, "086c144b-73ae-47a1-aa62-5d9379606791": {"doc_ids": ["bd884a08-5754-463d-bb27-34e23852e1b3"], "extra_info": {}}, "3710a977-9bfa-4f3a-aeda-713086fc6311": {"doc_ids": ["c7f0d252-448b-4acc-890b-d4b07fb2d229"], "extra_info": {}}, "2316e473-5af0-47dc-8029-f57fe058c2db": {"doc_ids": ["129d0199-d028-4004-87aa-c747ea675567"], "extra_info": {}}, "66ae3e07-56ac-4e66-95fc-56c5303a3bdd": {"doc_ids": ["3ec5e195-014b-45df-a3f4-33088fcaf1af"], "extra_info": {}}, "5f5cdfe8-f192-46b2-a5f9-b2ba6839e380": {"doc_ids": ["4e15efd9-b38a-451a-a52a-0d9e3d37c7de"], "extra_info": {}}, "9084eb1e-a4f9-45de-beb6-21fa3058c65b": {"doc_ids": ["2bf6f771-2f3d-460d-9593-159c8e3ff654"], "extra_info": {}}, "cfb0cb10-0fb9-4ee6-ac0c-986e82bdf14e": {"doc_ids": ["72d3ef3b-b888-477a-a06d-605fd8c25cb1"], "extra_info": {}}, "661001ad-4c45-4086-bbcc-606b8971863f": {"doc_ids": ["c588525a-0139-4f00-94e8-7d4c2bf29d2b"], "extra_info": {}}, "660c4ad9-2762-47b0-b16a-eb2e29eeb473": {"doc_ids": ["9babe606-8c5d-49cb-8d66-fae12b506126"], "extra_info": {}}, "3e15b8d5-7e3b-4b12-89fb-d28e4a1e9a0b": {"doc_ids": ["d8e7d793-0816-44b2-941b-9f9e705fabd6"], "extra_info": {}}, "beead010-1548-4d9a-8e69-0bb41983a569": {"doc_ids": ["81813613-ebf5-49d7-8e24-e80a9bfa845a"], "extra_info": {}}, "16fb092f-9f03-4ef2-87c0-f33ddfc709aa": {"doc_ids": ["5f2b5006-53d4-4be0-ba1d-d38f98b015aa"], "extra_info": {}}, "42769f65-36f6-418d-9c57-3ce67c55a317": {"doc_ids": ["914ea1f6-8933-4846-ab42-7d59535ab47c"], "extra_info": {}}, "60cfefcd-ac51-4d74-8e7a-1077cd0c311f": {"doc_ids": ["87d900a3-09c8-42fc-b381-c327bf054548"], "extra_info": {}}, "a311f07a-812e-4372-ac85-c514bc0c33b8": {"doc_ids": ["9f87f4cc-5cec-4a81-b548-c751ac9a8c9e"], "extra_info": {}}, "0a57c504-e3ed-4e3c-9667-6a4c0b72df97": {"doc_ids": ["076d9138-0d66-4147-80ec-35d85560b6b5"], "extra_info": {}}, "ea76278d-4153-4888-a0de-3bc7b34bc303": {"doc_ids": ["87f67c42-5e34-4acd-bd35-980f7d0a76bd"], "extra_info": {}}, "c86e13df-b1c2-4861-a65e-9491f4899a68": {"doc_ids": ["82518187-ca61-46fa-97a7-ed6238613615"], "extra_info": {}}, "0a681277-6473-4aa8-b86b-5b0544049715": {"doc_ids": ["26b1f3df-a476-471c-b96b-9294ac491c75"], "extra_info": {}}, "00ee4061-8b57-46b0-92c8-ef3bb8d099dc": {"doc_ids": ["ab676db0-6803-471d-aabf-8fee7a235214"], "extra_info": {}}, "dc7aae3b-f893-4c0a-8fc9-d45a1ba84108": {"doc_ids": ["179c58d6-eb9f-43a4-9323-959078cc685a"], "extra_info": {}}, "8211bdc4-82fc-4984-b253-a5886046f5bf": {"doc_ids": ["7d37c550-dbf7-4a3b-ac5f-949b1d2d51bd"], "extra_info": {}}, "ebf7421c-04db-4d17-af41-0cb5af0def4e": {"doc_ids": ["a38452fc-0933-4aa8-aa34-1766f4ad6158"], "extra_info": {}}, "27c1c53c-86ca-4b19-88d9-e79394ffac0b": {"doc_ids": ["8efbbdc8-989c-4c03-8055-c1a11713a61e"], "extra_info": {}}, "1d2d2a63-b6b1-4b77-bdb6-4adaecb5c135": {"doc_ids": ["be95dd91-d0c9-4487-a8fd-cff3419af3c0", "39b6b20a-d876-4920-89b5-bb3e0fdea27f"], "extra_info": {}}, "f2c4e4ee-df9b-41a7-8c1a-38f6839035fe": {"doc_ids": ["ca8d5632-2480-4719-a0f1-8f13c5fddb22"], "extra_info": {}}, "ede41dd0-12fc-4016-b38b-b81c3f145be1": {"doc_ids": ["5a3c49ae-69bc-4dde-bae0-3a38ca55d7ff"], "extra_info": {}}, "52edb485-6dd9-4f89-af30-14f33952bd08": {"doc_ids": ["e06a1e59-be73-4d38-b61b-f29c04cfef34"], "extra_info": {}}, "b4fb691c-fc79-41dd-9f1f-66f60c6a89e1": {"doc_ids": ["886c94f3-bcbf-4252-811c-3d1e306ec197"], "extra_info": {}}, "ebc73c7b-53af-4173-a894-17fe4066ec78": {"doc_ids": ["ddaac2d6-1ca4-47f9-a5fa-4863fccfd733", "d253b038-792e-4f94-90e9-9db8258380cf"], "extra_info": {}}, "9ae2fa74-e356-4924-b0af-803b945fbb47": {"doc_ids": ["e51c6ba7-c4b7-4bdd-9e9d-e9ef3071cc57"], "extra_info": {}}, "b3ba0163-1fcb-408e-9658-1a0450dc8e5c": {"doc_ids": ["f4cf72d3-2917-4d79-aac6-a9885f350ee0"], "extra_info": {}}, "14f3cfb8-6ce9-42b4-bd12-82a96a5547c2": {"doc_ids": ["5fad983a-6a4f-40f3-a441-cf9de7aa6f23"], "extra_info": {}}, "011bdff6-b17e-4059-8edf-cffaadaec0ab": {"doc_ids": ["80330b9c-e34b-4c52-a24c-83da4b4612af"], "extra_info": {}}, "2516f765-68d1-4eb7-b95c-cc16aefaed3b": {"doc_ids": ["2264bf48-3885-4400-9713-f380a67943ab"], "extra_info": {}}, "74cd6bf9-3950-4085-b298-b9d04786269d": {"doc_ids": ["570e5d6c-079d-4b74-82be-db7433308e8d"], "extra_info": {}}, "4a9c965a-3cc2-4473-b6d1-58ab13fa061a": {"doc_ids": ["05e36b61-b374-4781-b6a5-0e4e5396c2dd"], "extra_info": {}}, "b4a7fd35-f20c-4430-9ffd-4a050514b6b6": {"doc_ids": ["2f8c678b-2a62-44da-9c31-4d29cdbb2acf"], "extra_info": {}}, "0a30dfb4-5906-44fb-9c7e-f20f658e54b6": {"doc_ids": ["0ed4590e-9535-49cb-9733-3b8531938295"], "extra_info": {}}, "36cb1b30-1263-4004-a485-b18af7da0118": {"doc_ids": ["d06652d4-a693-4457-82f7-72b4ff5789d3"], "extra_info": {}}, "ed2d2b84-3fef-4cf6-b5c6-bdbcef419768": {"doc_ids": ["5fc00aa9-796a-4cd8-b0ed-729bee6fc669"], "extra_info": {}}, "4d0907c6-b3ae-4b90-983b-ca2bc70b4703": {"doc_ids": ["333a4df7-137a-4465-a950-363ef209c338"], "extra_info": {}}, "8e870653-474a-44b5-8167-cd131017b377": {"doc_ids": ["89853f0a-f795-4442-8b8e-5d85844c1b06"], "extra_info": {}}, "69a7e25a-4896-47d6-92ad-1a02bd0dd7f3": {"doc_ids": ["d99ed4ff-1f08-4375-afe3-042be5f318fe"], "extra_info": {}}, "8bc2ad6b-713c-46df-ac49-34b95d5ae24d": {"doc_ids": ["2458b51e-04a6-460f-bf4f-20d667d523a7"], "extra_info": {}}, "c3819dcd-7312-4ffc-8b2f-c6f0b47ad3de": {"doc_ids": ["eff62522-ab69-4f8b-8129-32d9fcbdfd64"], "extra_info": {}}, "e18c450a-f356-44ab-b18e-df2a0c06e1a7": {"doc_ids": ["6869dc04-d165-4d88-83a1-33cde89fa3ff"], "extra_info": {}}, "d85c347b-0f2c-4487-b0fb-5ff0af1e0efe": {"doc_ids": ["1087aad5-b857-446d-b53c-8a2d104428d9"], "extra_info": {}}, "598665dc-fe6a-480e-855e-52a42d70f418": {"doc_ids": ["c66226e5-5e25-40cd-8c54-d5ca6c62f77e"], "extra_info": {}}, "71915d38-8ab5-4dda-9ae6-a84a5eb96c1a": {"doc_ids": ["d8a1bf80-86c3-430d-9a5b-c33f1bed64d4"], "extra_info": {}}, "ea0191da-d553-4f7b-9fbf-8dfb4d4924c4": {"doc_ids": ["2f8a9a04-886a-442b-b648-79729db13a49"], "extra_info": {}}, "9acde764-9cfd-485a-a46f-b33d37ef7853": {"doc_ids": ["7446c5b2-a712-4ee3-86f8-5fd3789c3656"], "extra_info": {}}, "f43c9e5b-9548-4768-9bd3-0219d845256d": {"doc_ids": ["6b922572-6aa7-4efd-926a-972c35947ae5"], "extra_info": {}}, "ad3d4f9d-55a6-4d00-9df0-31b0d73c5054": {"doc_ids": ["3b2fc13a-cbb3-4563-a7e6-b4917c12a4a9"], "extra_info": {}}, "75d2a9f0-c2f4-4893-b9dc-459173ec6c74": {"doc_ids": ["05f9294e-5e43-4da2-8679-8713989b96ee"], "extra_info": {}}, "abf08165-c48a-4a1a-9d40-abfd5425497f": {"doc_ids": ["8acfb888-9850-4748-a761-231f7567824a"], "extra_info": {}}, "783b95d7-80d2-4135-bb5d-24de0a9be358": {"doc_ids": ["be7fbdbd-bad4-475e-8374-99b6467c20c8"], "extra_info": {}}, "6171ba39-e2d2-4a28-aab0-c03c9ea66c76": {"doc_ids": ["bcc37fba-23d6-4757-9649-7a16250a13b4"], "extra_info": {}}, "2a3c4e0b-79a4-4f70-b264-4bddc3ebadab": {"doc_ids": ["f79d7c27-ec50-4dc4-84dd-7407dc46a75a"], "extra_info": {}}, "5c045e2e-a7da-470d-aed9-b7731e44b275": {"doc_ids": ["7876f957-342d-4750-b4b7-1ac07f77ea67"], "extra_info": {}}, "b4aea5e0-0a83-4830-95d3-564957488e97": {"doc_ids": ["0a4805d4-3ce1-41de-a5d0-8142efe9ce5e"], "extra_info": {}}, "3a429f4a-46cb-4b24-835f-46f829038141": {"doc_ids": ["c3892144-7387-43d3-bb8b-38b3dc53c9d9"], "extra_info": {}}, "e3237477-2fc9-4c20-ada9-523625d7844d": {"doc_ids": ["18b7be6d-3183-4227-b3cd-4b90264a9b82"], "extra_info": {}}, "8d94f83c-51d4-4179-b048-4c4abc730459": {"doc_ids": ["3b53df2e-0387-41b7-a72a-acc22d7378c2"], "extra_info": {}}, "32f939e6-58ea-44a4-8363-42290a531852": {"doc_ids": ["e369744e-6776-48e5-97c3-663db652ab13"], "extra_info": {}}, "73b3ffca-2f97-4c14-aa32-f616e7d15c74": {"doc_ids": ["04a8ba08-c4dd-4c5e-99db-7d836360565d"], "extra_info": {}}, "5aa3ec10-64d2-4134-a037-9dd0f46f6fe1": {"doc_ids": ["8c550b07-d8e1-467f-a9e0-5531bd8e53f7"], "extra_info": {}}, "487f9f65-95ad-40e2-946f-5153420ccaa3": {"doc_ids": ["31a8178c-ce79-4355-b41f-c4cc23b47ce4"], "extra_info": {}}, "be23b5d3-908e-493b-8058-1b1b5d78d29d": {"doc_ids": ["df1f27d0-32c4-4761-953c-af9df82d91c1"], "extra_info": {}}, "9acf9d41-5091-4b66-aec8-35139d4032e5": {"doc_ids": ["1296455e-7a70-4b1b-bc77-05c93f8767a8"], "extra_info": {}}, "8cdd5abb-7ffe-4521-9b39-326a0dd732ed": {"doc_ids": ["9da93de3-f56e-4c8c-b579-684ec6454c69"], "extra_info": {}}, "26e4c87e-6c25-4db0-b675-f309ef19af28": {"doc_ids": ["f67acbc9-4790-4188-8e14-98f480111c19"], "extra_info": {}}, "59c07f44-38ec-4856-8fbe-20fe9a47295e": {"doc_ids": ["01f03347-89f9-4b11-9135-3d55706316fb"], "extra_info": {}}, "98782230-b88e-47e2-8684-38b34c97269f": {"doc_ids": ["b706c660-b8eb-401d-9839-74ecaf5080ab"], "extra_info": {}}, "5838f44a-ddee-49b8-acbd-df04788be029": {"doc_ids": ["2b67e6a2-476d-4f1a-8611-b1aa7f28f4a5"], "extra_info": {}}, "9e195151-c337-4ac6-918e-b030e39f2b09": {"doc_ids": ["115b00d0-9e53-43d9-8a47-0e274be8b662"], "extra_info": {}}, "6a358fc5-8748-4cf2-840e-906d71a12939": {"doc_ids": ["746d8951-770d-4b7f-ab61-4dc3f8578065"], "extra_info": {}}, "d15e8283-af52-43f2-a091-7bd3a7636882": {"doc_ids": ["40789b85-d04f-4c08-9af7-8632cd1b0622"], "extra_info": {}}, "24d10531-5681-4164-bc46-a2dc03f2f4c2": {"doc_ids": ["6ea5644b-6c63-4087-aef6-69ceb33d4e15"], "extra_info": {}}, "9578c328-6bee-448e-8fb4-e14df0a5ac91": {"doc_ids": ["4b375220-97bc-4e9d-8ea0-cf237f2eb6bc"], "extra_info": {}}, "24d2f58b-3250-4107-96c0-14e9cf9fe3db": {"doc_ids": ["2a4af46c-6460-4871-92ad-bad9c873de27"], "extra_info": {}}, "a535cc6b-b4d4-4c06-8ec2-4e457061630b": {"doc_ids": ["e5b5f6e5-deb6-4941-9f45-2b24d24fdb14"], "extra_info": {}}, "9cb0bd8c-1322-4e5f-a421-ac7dd4f5d718": {"doc_ids": ["c7906b30-2775-4b2e-8c8a-7a2b3e83f7d1"], "extra_info": {}}, "29605796-191f-4967-ab5a-61d3f97b206f": {"doc_ids": ["5d0809a7-a295-4d48-a92f-41e2e5e5d584"], "extra_info": {}}, "a212e20d-762d-4fd4-9048-79552b7af016": {"doc_ids": ["686f63df-b155-4bbc-a430-92c2083bb249"], "extra_info": {}}, "b819b81e-4531-40a4-81ca-edf98f1fd2bb": {"doc_ids": ["79633030-da17-4fcb-82b6-26d013783221"], "extra_info": {}}, "8bf3a533-6109-4328-b5a1-99a14c7d5d9b": {"doc_ids": ["662ef4b6-d0bb-4094-a5e0-a7005a6b49af"], "extra_info": {}}, "e974bd45-15c5-4768-b1ae-ab8c1eaa7e64": {"doc_ids": ["b72019ac-90ad-4d3f-8818-adb91430c54a"], "extra_info": {}}, "1c3de868-1c3f-4574-bcce-4541bd482fa9": {"doc_ids": ["e41c6be4-cd30-436e-9c2c-edcf6d5cbe2c"], "extra_info": {}}, "a6278aa0-7018-4579-bf09-3c56eecf8de8": {"doc_ids": ["71703fae-c220-45bf-895c-202dcdc27923"], "extra_info": {}}, "d89920d6-94d2-412e-940a-814d973c74dd": {"doc_ids": ["42a040c2-7eb4-41dd-92f3-f9de86447d52"], "extra_info": {}}, "0961aefb-a4c1-45a8-ab53-1d9704dd72be": {"doc_ids": ["af4b7ae6-88d5-4714-99b0-51f964120e53"], "extra_info": {}}, "c732dc34-ba8b-49e4-8e1c-1d19d141bc4c": {"doc_ids": ["46e76dbc-dbe9-477d-8ab4-ba2138a3aeb8"], "extra_info": {}}, "c569eab6-4949-4c2d-a265-844fe47b322b": {"doc_ids": ["26af1c38-8658-49d3-af25-057d7e72703e"], "extra_info": {}}, "17619d0e-7186-41b9-98db-da7dd0efcf0d": {"doc_ids": ["8e5f2c12-33f5-4098-b64a-b308e393aec0"], "extra_info": {}}, "00d9327f-beb9-41ef-a6f9-0ef9d4ab008c": {"doc_ids": ["6891b0f0-b660-4dd6-9ead-5c30b8d978ac"], "extra_info": {}}, "65a3930f-b620-4118-bc91-ac9d6f291a80": {"doc_ids": ["d7890ec5-9c27-4a20-a302-0916ffa3e0af"], "extra_info": {}}, "61d99f13-321e-4f8b-aa6d-be37ac8b6af9": {"doc_ids": ["ec26011d-9086-48c3-b74a-cd56c2c7ce36"], "extra_info": {}}, "a01b91a2-3c0b-409c-a07a-9aaf94e06adb": {"doc_ids": ["d4f8bd2b-4bd5-49af-bc0b-c0997ee95668"], "extra_info": {}}, "55400715-7065-4d18-b461-6ebfdb802fd8": {"doc_ids": ["05e912dc-eaa7-407a-9c96-bef2254b046c"], "extra_info": {}}, "4f89ebdd-1414-4d6b-98dc-8b2318a49253": {"doc_ids": ["3cbe2521-7e4f-4139-8917-739059e7fb73"], "extra_info": {}}, "5bd9d1a6-ca28-4c2f-a65b-14115df67f49": {"doc_ids": ["1908534d-52b8-4efc-9606-85300e320faa"], "extra_info": {}}, "49a05b2c-87eb-4791-84d8-4e20c1582291": {"doc_ids": ["5f833865-2f81-4e82-8614-171260f9a45e"], "extra_info": {}}, "c07bfb75-fad2-4781-b126-59fa6c226c67": {"doc_ids": ["2ee1efa8-56f4-4865-862f-a03095534c62"], "extra_info": {}}, "d8ec71c4-6904-42e5-a4c5-f46f8c9b025c": {"doc_ids": ["2f45b385-8e65-4e86-8ffe-3b6c72b42ed2"], "extra_info": {}}, "a5cddf89-73de-4614-a7fe-4f7ac2cef144": {"doc_ids": ["0939f166-3d51-48b4-a9b8-a29a0b826960"], "extra_info": {}}, "2d90304c-56eb-49e9-866c-72f1dbc922b6": {"doc_ids": ["bf46c7df-c02b-4866-9b39-1bb12669fcb0"], "extra_info": {}}, "b09d3a78-d687-4288-b4b8-0d061e5f5c8e": {"doc_ids": ["c14b35aa-59d4-4a08-adeb-a20897d84274"], "extra_info": {}}, "f108eacd-05e2-4d93-b762-57bc1a6e968c": {"doc_ids": ["d46ef6e7-626d-40fb-b8e0-6cea86a967d8"], "extra_info": {}}, "f554ca92-c066-416b-ba8b-d313f5f28e5d": {"doc_ids": ["d8fbb70d-b9bf-46b2-accc-83b2086b1098"], "extra_info": {}}, "a23696d7-85c2-4c4c-b3cb-9d72638da642": {"doc_ids": ["4c4cf144-642f-44f9-87b6-590729242381"], "extra_info": {}}, "574df38e-51e8-4219-9cba-58e5af75dad8": {"doc_ids": ["56f5df88-3e19-407c-aaeb-6cf007ab66c7"], "extra_info": {}}, "6022aa4c-ad2b-46f8-a2b5-2b9c50cf89d5": {"doc_ids": ["8aecb0d4-ad39-4bf6-84cc-3a314160ae56"], "extra_info": {}}, "781d69c4-8da8-40b9-ace9-8e565352deae": {"doc_ids": ["33afcf23-993b-4c8c-9d2e-354bc030f869"], "extra_info": {}}, "24b91159-a3f3-4db5-8c42-eba9df13b49e": {"doc_ids": ["3f765651-156d-4d02-a21f-d30a85e02848"], "extra_info": {}}, "427ddeec-7a80-445c-9f8f-fc4551b8b49c": {"doc_ids": ["643468c3-c392-46b8-bae0-165e6eb52a49"], "extra_info": {}}, "26d85472-3209-4c2b-8b18-983dba61d6b4": {"doc_ids": ["ab611b19-76f6-40da-b591-2b807ba1144a"], "extra_info": {}}, "a53c22f8-f568-467d-b87f-9ab161827024": {"doc_ids": ["0fcfd2b1-1d6b-4245-acbd-ab94d4da1557"], "extra_info": {}}, "335a3f11-07db-4c3f-838a-bcf32f00400b": {"doc_ids": ["81ed2236-7db2-4ed7-96ae-90e5f66581bf"], "extra_info": {}}, "616bdf5d-6219-41d3-aae4-75eb04227a00": {"doc_ids": ["3935c11e-60bb-4efe-8ee0-833f1dd4e48c"], "extra_info": {}}, "d53a6fd2-991d-4164-9322-3f6a74e5e4c5": {"doc_ids": ["25b19c38-92a0-474e-821e-26118035a3c5"], "extra_info": {}}, "2d8c1ac7-8f12-4394-a3ed-09449302782b": {"doc_ids": ["3ace0f1c-d1f5-4e8e-8cc1-7d4d0e981819", "f909cf2d-d59e-4d5d-bf63-4846a653bf28", "0e4c864e-37c7-4c04-94fd-e166b04af95a"], "extra_info": {}}, "f2030e26-7e06-435c-9e81-0894353380cf": {"doc_ids": ["3debcdde-65d7-4b54-8a7a-468a9aa0f027"], "extra_info": {}}, "33b9f2bd-ddf1-44db-b614-17ed25e84b67": {"doc_ids": ["433801c4-3a8d-490d-af89-acd167dee15d"], "extra_info": {}}, "ffc29bb1-2543-4ef0-9acf-ac780ab8ce46": {"doc_ids": ["08c6b01c-f5f8-4354-9270-9e59330a64e7"], "extra_info": {}}, "5b5f710a-3c14-4922-869c-b07750e89cb3": {"doc_ids": ["8f2faf24-1b9f-4ae2-9972-25861eec863f"], "extra_info": {}}, "1f3c59ee-61a2-4ad6-a5ac-f0b9689964e0": {"doc_ids": ["cea1604d-62d3-44ff-90db-307140bd95e8"], "extra_info": {}}, "54e0bd2b-d591-41dc-8fd9-45c25b37dd78": {"doc_ids": ["5eb69553-ff78-401c-be31-2f40aa8b222c"], "extra_info": {}}, "bffb57cf-f72b-440c-883b-956612d4d46a": {"doc_ids": ["c415a7ef-2f65-41e7-b039-fe7878c92311"], "extra_info": {}}, "76699e30-69e4-444c-a94c-cefd58a1bf9b": {"doc_ids": ["0a4b7f28-ceb7-49e1-bf32-63bbeb6be769"], "extra_info": {}}, "5b50c707-eeee-41ee-a6de-0c669c2e14d4": {"doc_ids": ["cc8a1822-cffd-49ba-a624-9ffac49928ff"], "extra_info": {}}, "eea9a423-d085-45f5-93e4-199a005fbf98": {"doc_ids": ["3935e44a-1e5b-48e0-b810-84149d0e31aa"], "extra_info": {}}, "4b3945dd-5790-4796-a711-148619a0a4ef": {"doc_ids": ["bdc77212-81f0-442a-9311-0cdc906b0aa7"], "extra_info": {}}, "ed689a3c-e312-4bb9-a30b-3dd33f442c82": {"doc_ids": ["82a6739a-7841-4631-899c-19adaa93a3ea"], "extra_info": {}}, "1e9502a4-775c-497a-af90-0ec208ddb99f": {"doc_ids": ["de40bd37-7958-4fd6-9843-62c87ab1893c"], "extra_info": {}}, "365500a3-ba42-46f4-8215-c5b7d99f16e5": {"doc_ids": ["635a0f74-1424-4131-bfb5-9e0bf9d16a5b"], "extra_info": {}}, "bf68213f-f769-41ed-bd06-c213a6856d96": {"doc_ids": ["bed8a470-0bff-4f26-906c-7f7e47e72d5d"], "extra_info": {}}, "22350119-aa85-4630-ae47-3a6f950a674b": {"doc_ids": ["7ec64273-ec55-48b5-a380-434a46279437"], "extra_info": {}}, "9e97531c-c57b-4897-97df-e84eb0666e56": {"doc_ids": ["74644080-9327-4f5d-b5f0-d659475493cb"], "extra_info": {}}, "0489af4e-5b4f-4466-9250-820423a71d23": {"doc_ids": ["30fb00b8-84d8-46ca-94ae-4ad6219eb46d"], "extra_info": {}}, "3d485b86-bd82-433b-b266-3d80f528e399": {"doc_ids": ["31ca9bd8-4572-43f1-a542-f5b61f143bef"], "extra_info": {}}, "302a7dc0-fbae-4b20-9705-af639cd7c35d": {"doc_ids": ["b073b3af-f5d4-4827-8dbd-8b20a9915bfa"], "extra_info": {}}, "0259fa54-b1ef-4ee5-a840-e68b0fb2be2d": {"doc_ids": ["c93ce692-1c60-4973-97e2-fc11f327ee68"], "extra_info": {}}, "c02802f2-676e-4e9d-8f17-c0823d30460b": {"doc_ids": ["909d6227-a98b-47ff-96db-839747ec4555"], "extra_info": {}}, "61392398-ccf9-4c6d-9f8a-4b0b7f44d7df": {"doc_ids": ["53067a20-ac7a-4d54-9a57-7fb41fcd828d"], "extra_info": {}}, "bf169e3c-a3e3-4854-95ed-bccb74d06026": {"doc_ids": ["b83c42b7-6952-4134-8f82-d2e602fb14a7"], "extra_info": {}}, "aabaaa89-6995-4470-b40a-7d6dde1fc63b": {"doc_ids": ["2b8fb648-c1cf-4131-8d6e-b25c41056cbb"], "extra_info": {}}, "b0ceb664-aa8b-4366-a9e7-8fdcd075c03b": {"doc_ids": ["2dff17fa-0be3-448a-b897-136beedec035"], "extra_info": {}}, "92888156-e050-4472-a195-0058b918f2b9": {"doc_ids": ["fdf5c36c-89b3-4575-879a-832f6061dcd0"], "extra_info": {}}, "f75c245f-0f28-4627-8f7d-6a3620960027": {"doc_ids": ["03c70732-6c4f-4128-a114-57df7e974251"], "extra_info": {}}, "6b5f6c97-0d7e-44ff-bcdc-554fa889027e": {"doc_ids": ["20fa44b5-2f40-44ec-b1df-1ac7089489e5"], "extra_info": {}}, "2433b6a6-1206-44d2-a513-7a79421e905b": {"doc_ids": ["31bc043a-a782-4edc-b16d-673edbb7467d"], "extra_info": {}}, "3067f711-3a00-43c8-9bbf-96f8f427a03a": {"doc_ids": ["662814aa-17fd-478a-a6c9-92be503ed106"], "extra_info": {}}, "91f7ba12-6697-4cce-b193-89437f192e35": {"doc_ids": ["8d6cd795-7bb5-474e-bbdb-f298c7ac5365"], "extra_info": {}}, "232da8db-59f9-4631-8269-7227d177a372": {"doc_ids": ["f0550d58-6420-4d5a-bb80-a7f88117a038"], "extra_info": {}}, "1b7368c6-c8c9-4ff4-9849-2e556712a34b": {"doc_ids": ["95082344-5c17-4012-b1b1-7033bbaf65dd"], "extra_info": {}}, "7bc16224-7f61-402b-924f-d333824012bd": {"doc_ids": ["fa6a335c-ef99-48bc-9a80-95b7b8d00aae"], "extra_info": {}}, "3d317a3b-505d-4039-a095-bc5d9e62c4eb": {"doc_ids": ["c647dd3a-cea2-4289-88d7-230326301b83"], "extra_info": {}}, "f39fb86d-f545-4a82-a792-7945f9786038": {"doc_ids": ["ce342e43-5618-46e2-83bc-4566e1fb8c27"], "extra_info": {}}, "f9829659-5903-4fce-abea-11949279f4dc": {"doc_ids": ["8388c5e4-c558-42a1-8c0d-94747aab5d2c"], "extra_info": {}}, "41848eef-eb6a-4f90-8768-a0ef2088834d": {"doc_ids": ["7c80b4f1-cd35-400d-9d14-87476bc82715"], "extra_info": {}}, "d22376bd-2dca-4253-bd20-4caea06233b3": {"doc_ids": ["178a52b5-d837-4846-833c-91694198c4d4"], "extra_info": {}}, "8ee11e14-12d0-4bb7-ba6b-119ef4124dac": {"doc_ids": ["73e869bf-2b21-47aa-906a-3f727677667e"], "extra_info": {}}, "e7eb47a9-33e9-4359-aafe-102179019ed2": {"doc_ids": ["4afe1d87-f8e9-44d3-b547-e6348e3e779c"], "extra_info": {}}, "3a16a3a4-38af-483f-8980-f4f5d8669e49": {"doc_ids": ["a7be9e0b-37d8-44c0-af7c-ae3bd7683e5e"], "extra_info": {}}, "9fc567e7-fad2-406a-a1bf-8ccc7e4f55d9": {"doc_ids": ["505c1941-0fb8-4431-abbc-eddca10a9c20"], "extra_info": {}}, "292a4e87-1f65-4a32-9761-e85d626713be": {"doc_ids": ["c17799bf-895d-4a95-8828-c9e232c9b8b5"], "extra_info": {}}, "7b3173b6-3b38-495d-aed5-49f5c9b4e910": {"doc_ids": ["2a6bb238-d446-446b-a5af-7696569f8c0f"], "extra_info": {}}, "36cc2ab9-9ae5-41f4-9121-3203190bf773": {"doc_ids": ["b83a2192-0830-4777-8402-9aa5c5bd16a6"], "extra_info": {}}, "9f1886ac-ee86-48c5-9c39-82ddc9ba1b73": {"doc_ids": ["3ae3da5e-c560-44a6-917e-d1cf472067ab"], "extra_info": {}}, "adc7ff50-3b02-4cf8-9718-d858ac2f7789": {"doc_ids": ["087ca9d0-a31f-4a35-beb1-0c698821f30b"], "extra_info": {}}, "b0890d10-cda3-4616-abde-232d38e5030e": {"doc_ids": ["f1939ce9-54eb-4342-be0f-14680b307c4a"], "extra_info": {}}, "f4b8cad4-d25c-4fa4-a16e-28bd09580d93": {"doc_ids": ["3b9a0a3d-044e-42a3-b5a9-d65a513d2f87"], "extra_info": {}}, "d32bb211-366a-4908-9141-0b41a37102d1": {"doc_ids": ["7fe8aabf-383e-4b6d-942e-01d417bb1dfd"], "extra_info": {}}, "525e48cc-bd07-42a4-a12a-ea15f7b960e7": {"doc_ids": ["9a5742c0-0fb6-45b9-8a8a-87e16d4ff88b"], "extra_info": {}}, "d4647199-d2fd-4f96-a305-3c4fc481b852": {"doc_ids": ["b4a11c68-a39f-4f88-97cd-0f74c8f2bb7e"], "extra_info": {}}, "42996860-f855-4f58-be01-d11fc0ad40a3": {"doc_ids": ["6a5cf043-3046-4445-931a-828d8e403f2b"], "extra_info": {}}, "6a3438e6-3866-4824-920e-49180f561e07": {"doc_ids": ["faae5fee-00b8-449f-9c3f-8b8b6e55629e"], "extra_info": {}}, "b9ce4dd4-201f-4572-9b1a-223dab0e551d": {"doc_ids": ["428c3bde-9735-4e6c-8c82-226af0c8eb1e"], "extra_info": {}}, "70e7c105-ea52-4031-a1db-f30798b8b42e": {"doc_ids": ["5aed2a5a-3fb8-40a4-b592-f178585562b8"], "extra_info": {}}, "d1e59304-668a-4d1b-97b5-9600f71b292c": {"doc_ids": ["2dfca10b-0936-48d3-920c-50a8b4c9a3e0"], "extra_info": {}}, "9e1a3563-e49d-456c-b774-e7089a56134f": {"doc_ids": ["56b34e8d-bf22-4821-ae71-bf5e38ee5865"], "extra_info": {}}, "ebb8dc06-5385-40d6-9b6e-8e8b65446197": {"doc_ids": ["11a4a2f2-8172-458e-91e4-165307f1040e"], "extra_info": {}}, "b12a15cb-bbc2-484c-9ada-72acd83427b6": {"doc_ids": ["af33c1b7-e54a-450b-8633-9ca96e5be42d"], "extra_info": {}}, "35db4f0d-4eaa-4437-aaa4-eec9eddc7341": {"doc_ids": ["d90b6749-600c-4a75-91bc-984f61b9e368"], "extra_info": {}}, "3e2cd287-959d-49ae-8c6a-44bb3de62fc7": {"doc_ids": ["72b1c187-0328-4342-99ce-a998201deeab"], "extra_info": {}}, "4a3fbf3e-eefe-481e-b906-29fdf65e76ad": {"doc_ids": ["278a94c0-4741-4c9e-ab17-101b4b51eac1"], "extra_info": {}}, "516ee85f-1c3b-45e6-808b-9368cbd93a59": {"doc_ids": ["bf8fee0f-b9ba-41a2-a210-6e3f10309ff5"], "extra_info": {}}, "11d1b09f-820f-4704-babb-9aece43f6245": {"doc_ids": ["2d2dd0c2-7495-4d6b-9c0d-d7942ae760d6"], "extra_info": {}}, "9e4dac57-c439-4546-b4c1-c6ee13a2de5d": {"doc_ids": ["c8927c13-fafa-4234-b40e-d4c7bb58d0c6"], "extra_info": {}}, "f949b24b-198b-46c4-8b66-6cd274a718bc": {"doc_ids": ["02f7697c-b8ab-4472-8b8e-dc1b9429df84"], "extra_info": {}}, "63344b16-1c73-4384-9d26-9d10fecbbdd7": {"doc_ids": ["70eac124-bcc9-4ee4-b5ef-d390799c22da"], "extra_info": {}}, "42c3adae-c6de-40ea-8c04-de5fa5b77685": {"doc_ids": ["e6d9715b-fb29-48fc-becd-e16e358fb01d"], "extra_info": {}}, "f6a52afb-6d44-46d0-82d1-f3f6c24e73ac": {"doc_ids": ["b775945a-ebd1-4dda-948d-c51fd4fb5438"], "extra_info": {}}, "eedefd53-7c2b-49b9-82c1-dbba192de0b5": {"doc_ids": ["36000b42-7b33-403e-9485-cae1cf4082a0"], "extra_info": {}}, "c4309c1e-addc-461c-803a-d365e04e5187": {"doc_ids": ["506f49f7-9502-49f8-a1f4-0fb7ce4b43bf"], "extra_info": {}}, "e95dc7b1-7c6b-4ce0-8adf-772283563727": {"doc_ids": ["969b9bcb-3525-42ba-a5dd-d57534df169c"], "extra_info": {}}, "d4265aea-6001-4ec9-92f9-c0c5d0ba3ed9": {"doc_ids": ["42cbb140-ebc3-4898-ba9d-7929683d76f9"], "extra_info": {}}, "5ea48a5a-de08-453f-a4b1-e19059cfdc88": {"doc_ids": ["3709203d-a02f-4a61-a6a3-c77072b5e0e0"], "extra_info": {}}, "b72bf6f4-5a2a-4c24-8d86-03c87b241439": {"doc_ids": ["4f248227-2814-4df7-b3e7-cf69f808159f"], "extra_info": {}}, "20fd9e77-6154-4250-b903-e92782c6ae98": {"doc_ids": ["143a6702-7ab7-4f13-953c-6d01e29ee2be"], "extra_info": {}}, "d77244ac-733b-4c96-b077-e6cea3d15a99": {"doc_ids": ["ace272cd-cf1f-481a-a6a4-03a6a879c5ad"], "extra_info": {}}, "ae14016f-59a1-4cb1-9fc6-e575e46812fe": {"doc_ids": ["d794497d-9582-4b4b-ab43-89d63139b342"], "extra_info": {}}, "647c50d8-985f-450f-80fa-a172735f74d3": {"doc_ids": ["2f90d0aa-73a5-4a4e-802c-6bc5f36e6ae0"], "extra_info": {}}, "28897194-07be-4dfd-9363-9a5eca9c70cd": {"doc_ids": ["59333a6c-d0d8-4ba0-8a9e-435fa8ff37f6"], "extra_info": {}}, "533a6283-1cb6-4bb5-82be-cffc88fd448a": {"doc_ids": ["e14ff0cc-884d-48ba-8b89-4db381c7899a"], "extra_info": {}}, "c87fa656-9485-4d53-890b-e1df9b9b112a": {"doc_ids": ["4b210af1-db05-413d-b545-88d345001cbf"], "extra_info": {}}, "c10dee32-ea0e-4091-8fc9-2b8f9e82a6ae": {"doc_ids": ["c14df170-b9fa-4f73-b63b-89bbcd041907"], "extra_info": {}}, "cee6c402-3416-476e-8fcb-762367d59a9b": {"doc_ids": ["801eebc7-b836-4a9b-84a9-6e6b72f63c9b"], "extra_info": {}}, "6a039d49-7156-4163-8609-5fafa305f379": {"doc_ids": ["91cae584-27a7-4526-ad1c-da7d14e86076"], "extra_info": {}}, "3ae3bb19-a760-4ad9-af88-42e75ac8d559": {"doc_ids": ["5d90d68b-b7d9-4857-aee3-ee0163f69c79"], "extra_info": {}}, "236f1767-9490-4a7e-b565-bcaca2055d81": {"doc_ids": ["5107cd1c-5613-480b-a209-e2304b50c53b"], "extra_info": {}}, "69a228ba-da2e-4500-9390-527a1a22b948": {"doc_ids": ["324565e3-0a0a-4da1-ba34-0e55c45bca52"], "extra_info": {}}, "dfc2586d-fa5d-40d7-b2b1-1e4ea7f7dc11": {"doc_ids": ["7bfcb6ec-3f84-4b75-95b1-ae8b1213237e"], "extra_info": {}}, "30e0de76-f876-433d-a241-2f8d10e0b6a5": {"doc_ids": ["986709c1-a5f4-4c4a-889d-0a3a441a4662"], "extra_info": {}}, "c9a7daf4-170f-4737-949f-46f03f1cb49f": {"doc_ids": ["d79ee558-c492-45e4-8931-bd8d98547e93"], "extra_info": {}}, "f1bf9624-c2f3-408c-862d-f7bc4432779f": {"doc_ids": ["9747262a-ed9a-47b3-98c0-a62f6faabf44"], "extra_info": {}}, "b9a0eb37-cea0-489a-8fc1-91d70c0c06cd": {"doc_ids": ["5f1d76f0-0192-4647-b8d9-e6f4564f6e1d"], "extra_info": {}}, "7b4e3ecd-7622-4247-8cf4-ac447425fc8e": {"doc_ids": ["262e72e0-a4a4-4e76-97d1-bf57f6be4190"], "extra_info": {}}, "2c45f928-8077-4a01-bae1-6366cd2839a1": {"doc_ids": ["d483793d-9072-4987-a8a7-64fa92466e85", "ccaf8787-528d-4694-bbcc-49fba19d8ad6"], "extra_info": {}}, "109bae82-767f-42df-bd79-6d3758343c8b": {"doc_ids": ["856e2df4-16e6-4a73-a3d6-e8fa8e253837"], "extra_info": {}}, "9b61be97-f134-4785-8a0a-422a47ac24fb": {"doc_ids": ["3b4589c0-b7fa-4f8e-ad95-52757591c475"], "extra_info": {}}, "61be7ca4-9110-453a-bf72-bed86c7fa77c": {"doc_ids": ["dbdc807f-899c-40b4-b72b-cc8af0663e11"], "extra_info": {}}, "d9813d11-1c9f-402f-b405-3cecf6096157": {"doc_ids": ["2807264b-f9d8-41d1-898f-f68350f12587"], "extra_info": {}}, "3b7e844b-bf38-483d-9606-492c4adced2c": {"doc_ids": ["a99ef410-0db6-42ee-b6c6-fcd901610caa"], "extra_info": {}}, "229bff9f-fe1d-4592-89d4-31b20d67b052": {"doc_ids": ["b80eacd9-96ac-403d-b061-41c8e0de9bc2"], "extra_info": {}}, "a5eeb29b-fa46-47c1-b3dd-24f661fff565": {"doc_ids": ["8ccbd774-a61c-4f7a-91eb-56e6af7cbc29"], "extra_info": {}}, "5ef426aa-ecb6-4cb3-b042-f3abebe067d4": {"doc_ids": ["26a01425-7f52-4e47-9598-f1f6558c4e38"], "extra_info": {}}, "7fee1e16-9b2a-4116-aea3-85d7d8164b64": {"doc_ids": ["f53e9e5c-269c-4681-abfa-ebcbd953b449"], "extra_info": {}}, "a4b6c717-2916-48dd-a718-96ade104ff55": {"doc_ids": ["23b6bbee-56db-4773-bb8e-c8ef17a0d354"], "extra_info": {}}, "c9cd7b53-638d-4240-8167-fff590c8e4b3": {"doc_ids": ["cb11c95c-9701-420d-aa13-01e97c432785"], "extra_info": {}}, "4d496f11-9210-463b-9de7-3c8777964888": {"doc_ids": ["73f2e2d5-ba77-4372-941c-adf338edfbd6"], "extra_info": {}}, "b9df10b7-cbb7-465f-9cdb-af9c405a4ec4": {"doc_ids": ["32df15e8-4c04-4fbd-b25d-792fd7739fa3"], "extra_info": {}}, "3772b072-e19d-41f2-8387-e4ab9a4d99b7": {"doc_ids": ["40e43fd0-3aa4-4125-9ab5-16c313525000"], "extra_info": {}}, "9dfbcf5f-d75b-4df7-9b17-fd73622ad14d": {"doc_ids": ["201b982e-2488-438b-856d-edf4afbc9abd"], "extra_info": {}}, "4270275a-b6c3-4c3c-95fb-73a22970fdcd": {"doc_ids": ["b3ef7acc-af82-44dd-9e56-1ca45e9c569e"], "extra_info": {}}, "fc595921-c3b0-47c7-ad65-ef84b94e6f4a": {"doc_ids": ["718fe3c6-62b7-4675-9a59-fd6656853f8f"], "extra_info": {}}, "e8d1cc0a-56f1-436b-a665-f90298471ac5": {"doc_ids": ["0e93e10e-ad58-4075-a605-8a70cd7ad790"], "extra_info": {}}, "81aeca97-73fa-4066-9e61-a9495b041d2f": {"doc_ids": ["0c8c3fc5-7e56-4df4-b8ad-7d7457effb44"], "extra_info": {}}, "bfb68a4f-d92b-4192-b874-89bd7558906c": {"doc_ids": ["7ee8a884-ed1c-48ca-ae96-a406f7cfb9cf"], "extra_info": {}}, "9158c608-b1a6-47fb-9566-c00c9ebbca89": {"doc_ids": ["6ba24e00-5ced-4b59-9a7b-4f16dd7521f9"], "extra_info": {}}, "31542d1f-cf14-4256-a40e-020f0bf56662": {"doc_ids": ["c341b9df-20c6-42c0-aef0-6a8aa633a9cf"], "extra_info": {}}, "582ab7e0-44e0-483f-a48e-0ca058315199": {"doc_ids": ["362c5ed2-0a84-47d9-8df6-0f324a08ef83"], "extra_info": {}}, "acab5894-b1b3-4568-b1b5-d98b3720dc6f": {"doc_ids": ["89fbfed4-f06d-4e63-bb5d-a883cb7cc895"], "extra_info": {}}, "64ec9b29-17f4-4975-8027-959ce2dbfb07": {"doc_ids": ["c0e183e4-3be6-4a97-941b-e48f710f6993"], "extra_info": {}}, "35bf44aa-a223-4ba2-9c0a-d75127723a07": {"doc_ids": ["e514cac2-2a3a-4a45-976a-b5a4bfd3066e"], "extra_info": {}}, "afaabe26-565f-498d-a50a-659a9a058f77": {"doc_ids": ["4da301f7-2c3c-47dc-b2e6-214fcf6f1b9c"], "extra_info": {}}, "792baa73-e0bc-4a2f-8b3d-c2002fd8f2b3": {"doc_ids": ["bc3cf4c7-bf74-4664-890a-6d66e8b15d9e"], "extra_info": {}}, "769930bf-d3b2-4e08-a265-d2c6d5a87827": {"doc_ids": ["9f14249c-cb90-431e-9db8-eca983dd0436"], "extra_info": {}}, "9b858b8b-fe69-4133-afee-9df70d2ddeed": {"doc_ids": ["07c44aa8-672a-45b7-a757-cc3f896ccf7e"], "extra_info": {}}, "a03e2141-0da3-45ab-8809-269a065fbe0e": {"doc_ids": ["a9c12783-fdd3-48e4-8428-0089464a9fa6"], "extra_info": {}}, "deff5334-e69b-4144-ad04-85c36578fda4": {"doc_ids": ["7fd87b2c-04a5-48dc-a9b3-9b0ed40818cf"], "extra_info": {}}, "a8d66870-36cc-4e8f-bce2-3c143aa4fe5d": {"doc_ids": ["c0267acd-ae2a-4a9d-bf3b-fc7eaba6dae7"], "extra_info": {}}, "29932d69-88da-4e6a-b72f-7db508a893ed": {"doc_ids": ["e5e7e471-ae09-4872-bfb0-aabc2a87cfaa"], "extra_info": {}}, "c79ff2e6-2200-4025-bda7-d86d30ed906d": {"doc_ids": ["a44c5e7b-9784-4ad2-bfdc-f0efa9ee7c8f"], "extra_info": {}}, "76db04df-509c-4525-bac8-657eb8e573b2": {"doc_ids": ["3f114365-777f-410b-b59d-f6e3cf018439"], "extra_info": {}}, "06020f69-c3f4-493a-b6f8-f4ccd857c7db": {"doc_ids": ["396b4d10-06dc-4598-ab2e-62c6b0ac0b02"], "extra_info": {}}, "5a74bf6e-d141-4b97-b53e-08a7b884207e": {"doc_ids": ["ff225bd4-065d-47e3-a284-3725d21fb482"], "extra_info": {}}, "5986b8ad-b245-402d-a8d2-bd37144def2a": {"doc_ids": ["b62465da-281b-4995-820e-bada9a5d4e10"], "extra_info": {}}, "848a1b62-e41a-48cc-97f5-13e24a322e6b": {"doc_ids": ["8a4b2a9f-409c-4d7e-88a8-2b6aa1d086ba"], "extra_info": {}}, "6fa7f371-8a2a-49a7-a274-013c0d588e8c": {"doc_ids": ["f7eb527b-b499-4ba4-839e-04301b3c7b70"], "extra_info": {}}, "23a3b558-c573-4e5b-b797-f81b74a802a0": {"doc_ids": ["076ed0fb-1460-46b1-8555-546477a99aa8"], "extra_info": {}}, "eac779ea-3a7a-4412-84ce-1835ca79dba9": {"doc_ids": ["a5c4ec88-5db2-4dcf-9d2b-01d4bedc008e"], "extra_info": {}}, "3b0170cc-f73d-4671-9751-4644d5b8455c": {"doc_ids": ["ff9d706a-7d73-4945-b431-b0b37dd1289b"], "extra_info": {}}, "26a8c209-88cc-458a-acfb-1a33092706ce": {"doc_ids": ["709dbdea-ba70-474b-9f38-6e3bd01abf3c"], "extra_info": {}}, "3a78d674-db06-429c-a8fc-ab9cfe64aa3b": {"doc_ids": ["d705891c-51ee-4abd-9279-c54799b769aa"], "extra_info": {}}, "fc0d9066-066c-4883-9523-7fd76aa1511e": {"doc_ids": ["73637c4c-17e2-4922-bf63-2caac86d577f", "69e3e2b8-9778-4a98-825e-b06068534c48"], "extra_info": {}}, "0b2f1043-6815-4bb4-bb3b-6dbb4c9c4d39": {"doc_ids": ["83a81b29-3541-4298-8658-c3aaa68e8570"], "extra_info": {}}, "7b174519-ba3f-4025-a2a9-24a6f62fadf1": {"doc_ids": ["e2652d65-6374-488e-ba91-f79207ee74ff"], "extra_info": {}}, "92a95340-b8ec-46e9-91e0-b6ef998445b7": {"doc_ids": ["e96bb609-a8c8-494d-8662-47871b6e0bab"], "extra_info": {}}, "8beded6e-8050-4951-9dff-cd18b351fa1c": {"doc_ids": ["018c5f12-0f0f-4c3c-9198-d67afd537100"], "extra_info": {}}, "db0f3715-2657-4354-87e0-517d78f607ff": {"doc_ids": ["4a61aa76-aa5e-47ea-aece-934fa411d3d1"], "extra_info": {}}, "4c4ea074-a551-4fef-a529-942ed5bbacf9": {"doc_ids": ["e11ecad1-218a-4aa9-b4c0-2a2e5ab8f193"], "extra_info": {}}, "b9ae9e52-75da-47da-8d08-6bbe290893ea": {"doc_ids": ["2e20cb90-453a-4e9c-97f5-36bf756600fe"], "extra_info": {}}, "4b24bc49-b631-4809-8873-ee3888833e5d": {"doc_ids": ["8ad5a9af-a439-4ef1-9f2e-56ef55010efd"], "extra_info": {}}, "e27c7a37-c793-469a-b527-904ac82572f3": {"doc_ids": ["ca1615e4-3ca2-4637-9237-412c84f910b4"], "extra_info": {}}, "6035f3e4-b42d-49fa-92af-c7e91ed69c0b": {"doc_ids": ["98b9b876-6a23-46cf-be28-479b238bb17f"], "extra_info": {}}, "dc30af87-d86e-4517-ac77-f59eb102af6d": {"doc_ids": ["c79efdb0-2251-4df0-8654-16eaf9eaddb4"], "extra_info": {}}, "4fa48adb-260e-4c39-986f-566607a2857f": {"doc_ids": ["955ddbe5-dcca-4572-b203-747836816a9c"], "extra_info": {}}, "443c7f33-d717-4a58-853d-ce552f83f6ac": {"doc_ids": ["7763e508-2c9e-40d6-9d3d-8822eff53f89"], "extra_info": {}}, "73e78c0f-43ce-4c5e-8809-1a76302e85c3": {"doc_ids": ["f9eeebf8-b390-4d7e-9bf3-bde050251f23"], "extra_info": {}}, "bac1a5c7-3ea5-490d-b9a5-f5e1e8195faa": {"doc_ids": ["6bd66141-d912-499d-b055-5a4556386f22"], "extra_info": {}}, "7642a021-1b00-4821-bf18-5079d21147f5": {"doc_ids": ["ab415a56-9812-44e6-8808-e65ea9443d3f"], "extra_info": {}}, "95e0f128-550a-4267-a914-57516abbfed7": {"doc_ids": ["121ce724-55da-4b95-81b4-53c984623e8e"], "extra_info": {}}, "d54f9510-2dba-4223-b39f-88ad6c7b2c55": {"doc_ids": ["3c779643-5e10-437d-a088-9ad6f6b24a64"], "extra_info": {}}, "240753c1-a9e0-4ec9-a61d-4a80068a02be": {"doc_ids": ["30ec6867-cd20-4cb2-9be2-c194c5eb70ba"], "extra_info": {}}, "ed04f952-2b9f-485c-94f5-b552ec3f4880": {"doc_ids": ["cfc2b5e7-71d6-4b80-a30c-3642051aedf0"], "extra_info": {}}, "b8022a1c-b153-4c0d-9f8f-be853f942dee": {"doc_ids": ["edc85236-27e7-4a7c-9ef4-f12425915dd4"], "extra_info": {}}, "023f8638-78a5-44d6-9a38-77831d7f3b20": {"doc_ids": ["13606472-3242-4888-b72e-6b777d0dfa90"], "extra_info": {}}, "6e51b324-e3cf-4cb5-a0db-b3452483f906": {"doc_ids": ["cda774f5-1564-4e84-a418-098736e9256a"], "extra_info": {}}, "389cbf80-5582-4fdc-9006-6ffd0d713360": {"doc_ids": ["0d264520-2ab8-4adc-a72b-3a85c270d44c"], "extra_info": {}}, "38830d6f-2a8d-43b9-a468-8795e65f34d6": {"doc_ids": ["a995e6fc-a3e2-4943-aac7-ce4750ecb3ef"], "extra_info": {}}, "2d98a228-a166-43b2-b95b-b5921c96f2ce": {"doc_ids": ["1752fe98-b578-4712-ab7f-4105f16983f1"], "extra_info": {}}, "0787496d-d332-48a6-8fe4-91183fa2febf": {"doc_ids": ["55a44aac-758b-4ad3-9b36-85a11e342e87"], "extra_info": {}}, "00ee8221-5fa2-4baa-b81d-d0fb17492a48": {"doc_ids": ["1ddd08b5-03be-4935-ab39-a2f6d88aec00"], "extra_info": {}}, "de6053b8-2caa-4b56-91c6-be3e6279a69e": {"doc_ids": ["983428ec-f179-4683-a447-305dac7a4a15"], "extra_info": {}}, "b0f58e17-adaa-49ea-baf9-d0516229cae6": {"doc_ids": ["99a7e504-4a3b-41a7-8f12-a20123304343"], "extra_info": {}}, "f374ceb2-8e59-44cf-9c4d-3097016c0e36": {"doc_ids": ["7f993bf8-d40c-48f6-bede-919abee52ff0"], "extra_info": {}}, "8d3dcac7-9b8b-48f9-b4cd-183a8ea86d29": {"doc_ids": ["c501fb0a-0d68-440b-983e-008daa02afd3"], "extra_info": {}}, "b0c6df8d-1c84-4bf8-9241-3615149e1923": {"doc_ids": ["cc987ece-ae6f-4158-b00d-5d21919b8504"], "extra_info": {}}, "898e7e62-d843-4612-9649-5878c691e41c": {"doc_ids": ["600cfbf4-fae6-4ec6-b642-4b0e318bcf91"], "extra_info": {}}, "6cc14e35-7a4a-408b-84b9-443447c1b84c": {"doc_ids": ["47a74155-9f56-42cc-8384-06c8585b6f74"], "extra_info": {}}, "47e95695-8266-42af-adcc-4114dee9afb6": {"doc_ids": ["da62c221-f983-4b96-b414-80462caedef7"], "extra_info": {}}, "0e2fb333-5f20-4ef4-874b-6a6b15e3e9fe": {"doc_ids": ["b7eb00dc-ce58-4d78-be9b-33e69d9dee26"], "extra_info": {}}, "9bd8b487-80cd-415c-8bd4-b4253824d14b": {"doc_ids": ["03fb213f-ec2c-46a7-b6fc-c95ffcf645ec"], "extra_info": {}}, "e80f900c-222a-4779-98a2-6f689b41b812": {"doc_ids": ["20124605-a8e0-45a8-bd81-03ee568e27d8"], "extra_info": {}}, "81e3a590-2639-42d4-a43d-8d6131d91357": {"doc_ids": ["9596622b-cd21-4561-a71f-4f208da31ef4"], "extra_info": {}}, "a6310032-c0f5-46d1-9ccf-07ef75c7c220": {"doc_ids": ["944e7a93-e8b8-45e5-b043-810f864f5f9f"], "extra_info": {}}, "cd1cdf00-711a-4ce8-9607-4eb3a9322376": {"doc_ids": ["e3683ec0-bf02-4e2d-ba76-818c0bc420f4"], "extra_info": {}}, "ef077fd3-f941-47b4-ad1d-97364dc887de": {"doc_ids": ["15a903fe-681f-4183-b884-b2cb73af3460"], "extra_info": {}}, "312d8d37-b471-4e18-8f88-d496cc8fb0ac": {"doc_ids": ["c6c280e2-02a9-47b0-a4d7-6271f5f43bab"], "extra_info": {}}, "168f2bd7-a1a3-4add-9dab-23cf371fc18a": {"doc_ids": ["6d096ce4-43df-4405-b046-682eac18874c"], "extra_info": {}}, "b805e8f6-e13f-4395-934e-b6f2e15de3c9": {"doc_ids": ["336a7fca-30b3-4856-b8d4-d42996eb3a58"], "extra_info": {}}, "f34f0121-5fac-402b-9898-c3183188df34": {"doc_ids": ["a9fa2482-203c-4041-9b42-3f3b9aadbab4"], "extra_info": {}}, "8aa3958d-9b15-4b06-bbd2-a6a06f97136e": {"doc_ids": ["c34d9611-c1ab-49d2-a4ec-2f09cc9abeb3"], "extra_info": {}}, "504741b8-7fe5-4ce3-9b39-fca626fc6873": {"doc_ids": ["6c5cc375-6433-412d-bdc4-8676fce82635"], "extra_info": {}}, "121470c7-26dd-4419-aef1-891846bdaaf6": {"doc_ids": ["8eb8dd7c-c5fb-4857-88d3-0021505c729d"], "extra_info": {}}, "5ef30bd3-43db-404e-983b-fce444ff31df": {"doc_ids": ["85c65eea-1a14-4db0-8879-6034cf65eb27"], "extra_info": {}}, "609e60a6-6eb9-4dee-b259-dfb783745534": {"doc_ids": ["72aae80b-53c4-4fa3-a203-ca136cb3d9ed"], "extra_info": {}}, "afc67e15-c2ad-4962-8b16-1d33ae4237f0": {"doc_ids": ["4a2864d0-b56c-4178-b572-21266c5b7ea5"], "extra_info": {}}, "af8cf072-472c-4a2e-bf68-baa1a9e331c8": {"doc_ids": ["135f80f8-7b8b-490e-92bb-3e050ccaf723"], "extra_info": {}}, "2d378677-c7ac-40c5-9cbb-4281cd27359b": {"doc_ids": ["873c3315-5018-42bc-9c3c-623e0a5258a5"], "extra_info": {}}, "ea33f85e-1939-454d-ac47-351885ed5c3b": {"doc_ids": ["e7f9df2e-2b83-4e81-aa4e-f6440f514c51"], "extra_info": {}}, "9651d5ce-b3a6-4e3c-a26a-6c2aaae7ab3b": {"doc_ids": ["de1ebb2e-7627-4369-b21a-7c38ddae7c93"], "extra_info": {}}, "bc2473c4-cdeb-453f-a53b-1d079892cf69": {"doc_ids": ["548bbb84-dd27-41c3-b141-280cdbeffd55"], "extra_info": {}}, "023aa0b2-94f1-4b65-ba6c-c95104dec923": {"doc_ids": ["c80ac901-1553-4f79-af5b-6b3cc8da4a99"], "extra_info": {}}, "47988ee7-2b74-4c9b-95a1-7bd08f56889d": {"doc_ids": ["d967ea30-3291-450e-8c0c-8c44b1680e7b"], "extra_info": {}}, "9b23b307-6366-4fb2-92e6-0d429e66bd53": {"doc_ids": ["16b32db5-59ae-4b3b-933c-9087c15ada37"], "extra_info": {}}, "5fea1050-d96e-4666-8e4f-3c8375fc3615": {"doc_ids": ["04f92352-7c93-47b0-9641-5841aef55978"], "extra_info": {}}, "b54fc7a1-a217-4d00-a9b5-3fdd67f35bdb": {"doc_ids": ["ae6e7350-2411-440f-887e-b7bd29f9e240"], "extra_info": {}}, "270bad2f-426f-40f8-b5c0-8094f5ff9ea7": {"doc_ids": ["cd611e1a-2807-4be3-882c-98af66ffc6da"], "extra_info": {}}, "10e9808c-7009-4f0b-b2b7-55291c06118c": {"doc_ids": ["235efd0c-3768-461c-9bd7-d6fdd5b4cc1f"], "extra_info": {}}, "ba75c909-cd34-498d-aa23-86f05df10292": {"doc_ids": ["f7c20cf4-5598-408e-abbe-5ea845297d23"], "extra_info": {}}, "d9152f50-5636-409a-b40e-fd3b82f7ced5": {"doc_ids": ["6aaf9e53-ccd5-4e4c-9429-84aec36ee11c"], "extra_info": {}}, "272a0285-1392-46e1-8b9a-b161c0235156": {"doc_ids": ["27924567-3d35-4bc7-9cab-74fbcc9d8058"], "extra_info": {}}, "45b8cea3-2033-4594-bc0c-359b76f7ae99": {"doc_ids": ["bbdbb814-7156-4ec5-b44d-7722a8283e56"], "extra_info": {}}, "525de054-5655-45fe-9873-5d8e50e2d959": {"doc_ids": ["38e2311e-995f-477a-8a4f-f752cb272459"], "extra_info": {}}, "2aa95c5f-ae1c-4f02-b090-86e2d953a135": {"doc_ids": ["7b01556e-802c-490f-b13c-c3ce5c0c1536"], "extra_info": {}}, "69a9bde2-5724-440d-8228-f60e333866c2": {"doc_ids": ["3b1a955b-ba31-4832-8ebc-1d5931826429"], "extra_info": {}}, "3789d72f-58ed-4fb4-9f15-1dd8abb9811b": {"doc_ids": ["bbfd043d-d3b0-4e55-9843-4121b3afcbef"], "extra_info": {}}, "c5fc2d84-afde-4b59-a06e-4aacf528b6c0": {"doc_ids": ["826ed24a-c373-4ea6-a5ca-9440ede5e176"], "extra_info": {}}, "157d664b-0d36-4c16-b776-18a32d46b7ff": {"doc_ids": ["3c2572d2-fd30-4c50-9d76-50a8b3b845ab"], "extra_info": {}}, "1f312d57-e547-447e-8831-659fbd3d5a95": {"doc_ids": ["e77b85cf-41fc-4a05-88f4-c1bfde303819"], "extra_info": {}}, "eca08ce0-72ba-49e4-b097-0cdf2c313d45": {"doc_ids": ["d2a61fbd-6f53-4ef9-b874-62d217c1bfe7"], "extra_info": {}}, "7cd3dd37-5acc-46d4-9870-13555b01f87a": {"doc_ids": ["27e18dc6-f4b9-4f46-b1a2-2fd8b9e86042"], "extra_info": {}}, "299535c2-c70e-45cf-9736-a663c9984d59": {"doc_ids": ["6713d61e-cbac-47ec-98a6-85551bf52e09"], "extra_info": {}}, "3f52ea2c-41a8-4cd1-8ff7-46ee68f6d872": {"doc_ids": ["91804449-3e9e-47c1-afed-44b65ea7955c"], "extra_info": {}}, "14633f91-9d9f-4b90-a0fa-00e942f268b1": {"doc_ids": ["fbc125cf-25ad-4ef7-b27c-56270f9716fe"], "extra_info": {}}, "cfd596cc-3b8a-4dd4-935d-610f62e95576": {"doc_ids": ["16d9c34c-5210-4160-b69e-f9fc311cb6d5"], "extra_info": {}}, "0e3a7c7b-8517-47ae-ac4a-5156475c71f6": {"doc_ids": ["e2a30632-6aca-4355-980e-8f336aa5b728"], "extra_info": {}}, "d38339ca-c680-4d64-a924-cfc6b6ff8e81": {"doc_ids": ["df848441-e320-431d-b58e-402377365d64"], "extra_info": {}}, "a67c5113-9ec6-4cfb-a6e4-ea025cf9cfce": {"doc_ids": ["1ef9d2c5-063f-4a57-94d5-6be070f9de56"], "extra_info": {}}, "625b1f0f-d407-412d-9971-586ec4d72f37": {"doc_ids": ["40ac6578-5219-4fc1-b501-e71c0b7108a2"], "extra_info": {}}, "4305f178-8fa0-4e2e-98ee-95058197992c": {"doc_ids": ["1c8e332b-5396-413d-90f5-26afb805a713"], "extra_info": {}}, "a9b664ac-03ad-4448-9a55-55221d6aa9db": {"doc_ids": ["9d26f3d5-15ed-42ca-a32b-08804913d6bc"], "extra_info": {}}, "48abef9a-c1bd-414a-be05-56f296bec395": {"doc_ids": ["55cb4855-da17-47f5-aa96-814cdce00e62"], "extra_info": {}}, "86c053e9-7e50-4562-8f4a-2b7ce2e6fa00": {"doc_ids": ["dc6efd91-5945-43c2-a957-c402f42c8b34", "49f0d9ee-f74b-4fd3-b598-4ce1eecf617b"], "extra_info": {}}, "63cdbb72-8753-40c7-a677-65c432cde1f9": {"doc_ids": ["c7ec98a4-9faa-4c22-9736-11fc6c4de196"], "extra_info": {}}, "47e362fc-6b38-47f4-9908-fd5498e41469": {"doc_ids": ["95f58beb-bf27-4195-bd9a-90d451ff55b7"], "extra_info": {}}, "62400041-44cd-44fa-8f64-a6e9b2b2f289": {"doc_ids": ["52c5b349-40fe-4451-b697-99c59bd33ff1"], "extra_info": {}}, "8402448f-d475-4c33-89d9-eeb317819125": {"doc_ids": ["5b9b11ac-d1fc-4240-9ede-03125b7382a5"], "extra_info": {}}, "96bb5190-fb40-4472-b942-a3503e58aaf7": {"doc_ids": ["42310c2f-f970-4fb4-91a4-833ad0f95f17"], "extra_info": {}}, "337b0cc9-c799-4fcd-91c4-500aac430e8b": {"doc_ids": ["ff04b1e4-324e-467b-b4d1-cb4b5134543d"], "extra_info": {}}, "ed231a9a-d15f-4f80-b4f2-bff0dcd36fde": {"doc_ids": ["5130ab31-7065-476d-8d30-26230695de52"], "extra_info": {}}, "7a214dcc-6e75-4adf-8726-7c9d2c3cdead": {"doc_ids": ["f4eb04f7-f1fc-4599-86ff-9b7171412102"], "extra_info": {}}, "149509e7-458c-435f-9cbe-024fd66ad7b0": {"doc_ids": ["1d6ee096-ed52-4d98-9da5-134c76ffaede"], "extra_info": {}}, "b2a9c8af-fb59-490b-8e11-9927c5a23a6d": {"doc_ids": ["d796c9a5-881f-4128-9eab-967c306e55fd"], "extra_info": {}}, "54dec6bd-bc24-42d8-b1de-a632bcd56df1": {"doc_ids": ["92cbf362-09a3-4248-92cc-5285cdde50ea"], "extra_info": {}}, "2a48d303-9ff8-4376-9595-8e059618afea": {"doc_ids": ["9894ebb5-698c-45c0-a375-8bb08ad21ee7"], "extra_info": {}}, "9358028a-d373-40cd-818a-5a7e59623d8c": {"doc_ids": ["11df7f5a-b2bb-4a86-bbfb-5dab76b946b9"], "extra_info": {}}, "e0aa6df7-0612-41ff-a17f-1293a55df7d5": {"doc_ids": ["163b9794-43df-44a3-984e-b49c3c0c1a2c"], "extra_info": {}}, "359a6c78-a474-4902-930b-561eb6589902": {"doc_ids": ["6cc096c5-5222-42e1-b0c7-1a7dcd55ff7e"], "extra_info": {}}, "fa171fb1-0cf0-4779-9db2-bed5e5c643d9": {"doc_ids": ["8cc68a55-f039-4999-a5bc-90e687a10a02"], "extra_info": {}}, "6a7df70b-48c6-4840-861c-db2734ca2d00": {"doc_ids": ["79f5caf6-076d-498f-b0d9-eb8c615a460f"], "extra_info": {}}, "3d87035e-b396-4fe9-901f-74b845ab58ff": {"doc_ids": ["80e343db-878c-41da-ab2f-6fcf7d82341a"], "extra_info": {}}, "4ac69c36-5e22-424a-b556-7e819b62303a": {"doc_ids": ["513b0573-f3f1-410d-935b-123fb1129c0b"], "extra_info": {}}, "76c07f39-80da-44e1-87c1-5bcce15f84ad": {"doc_ids": ["a9d93fc6-74d8-4016-a0b2-d700e3c63622"], "extra_info": {}}, "c5fb0790-302c-408c-80ae-3f3d04956a1c": {"doc_ids": ["c6fc8783-0b4c-4997-a766-8320ddbda3d4"], "extra_info": {}}, "513b5028-e3d5-4f67-b543-9e47f96a1867": {"doc_ids": ["f164c1a7-2d20-4259-9a5c-d89220a502b2"], "extra_info": {}}, "9b1f4c6c-eda1-4d17-aa65-859eec503a54": {"doc_ids": ["c2a8e743-6304-449e-a23e-0be920ade4c4"], "extra_info": {}}, "cccc3194-95a8-4d40-8b46-212d6d25623c": {"doc_ids": ["03378c35-f875-40d4-be33-a7d9de77b5ad"], "extra_info": {}}, "93f79f1e-b4d4-4b53-8d96-31ec1acb6f90": {"doc_ids": ["6eb9c33b-1d1c-4a60-8279-a1f43a40c733"], "extra_info": {}}, "7d26710a-4300-4e6a-bc13-93d847be4023": {"doc_ids": ["9ef4516a-b40d-4fc5-9e77-7dd72545f194"], "extra_info": {}}, "920383ab-1808-481d-abb4-5f32152e7854": {"doc_ids": ["48f7bee5-9a3f-4fe4-997d-6ca903ed1056"], "extra_info": {}}, "4bd5e4a5-f2e1-4749-946c-5cce718930c1": {"doc_ids": ["f59b49ee-1594-4adc-a604-8feb1409ed78"], "extra_info": {}}, "9cb34304-3618-45e5-8b2a-b2f5eeef0d25": {"doc_ids": ["6b0381e5-33d9-4e7b-b28f-4e97c1d1fefc"], "extra_info": {}}, "8b0a18ed-414c-4ab9-b428-6859f2da2281": {"doc_ids": ["5c051288-cedf-41c3-9eee-9a2b6a52985b"], "extra_info": {}}, "022e1d47-4fc1-4bce-8ef5-6166c85ba220": {"doc_ids": ["35922585-4c8e-4730-b94c-906e560ed9c4"], "extra_info": {}}, "d68b242a-b075-4e1b-8d15-a9226d12c701": {"doc_ids": ["60b49cdc-f1a3-471f-aa70-c38361cb9216"], "extra_info": {}}, "2ced535a-9ebe-4a5b-828b-b23ff54b46c8": {"doc_ids": ["1faf470a-e633-4712-ab48-7b63ed602744"], "extra_info": {}}, "bdd52db6-e7eb-45f3-be37-62e074ad3fd3": {"doc_ids": ["4f5beb71-30af-4890-9555-bd582beee8c1"], "extra_info": {}}, "3e533497-8316-4c4d-a004-74cdc51e41d2": {"doc_ids": ["e52b7b30-2492-4e74-a94a-9a509aa4bc43"], "extra_info": {}}, "b110cf64-198e-4f50-8593-6a7e4d1997b8": {"doc_ids": ["e1ea34e4-b604-443e-b9ee-105d81cf08fe"], "extra_info": {}}, "bf337b4b-b75e-424e-a8bc-01878f9b16c9": {"doc_ids": ["7c5263d7-34e5-4e0e-9468-fcafb4947bf8"], "extra_info": {}}, "c0e881fb-013c-4036-bcd5-4d700ac547a9": {"doc_ids": ["9331480f-9d73-4883-a521-d105d3df326b"], "extra_info": {}}, "db640c5a-8af1-462b-8b15-edea96b9f266": {"doc_ids": ["c4582dd8-9f61-4e94-b1fc-cd44e36489b6"], "extra_info": {}}, "fc80591b-64d8-4036-a7ab-9e4058684158": {"doc_ids": ["010d5821-2029-466c-be89-9a107ef92bf4"], "extra_info": {}}, "b1ae1876-157a-47a4-8efc-f90c7e17891c": {"doc_ids": ["ddd5b546-976e-4bc3-bede-b78b662c819e"], "extra_info": {}}, "600f4a19-c25d-4702-a3ac-ddfe5eec293e": {"doc_ids": ["7f4ed12b-88d0-40b6-aa48-63f28a1647b2"], "extra_info": {}}, "800936e6-81d3-4667-acb5-b4c2484426ab": {"doc_ids": ["ef6c9e02-31bb-4ec5-958d-129d7c2740fd"], "extra_info": {}}, "cbb09a51-e2c8-4653-a587-f9094bce6319": {"doc_ids": ["9285de61-fcc1-4026-be54-fe146db8bbab"], "extra_info": {}}, "ec6db6ed-b4c3-4981-a896-ce26f0d35ee4": {"doc_ids": ["1c89744b-02e1-4f67-bad0-5f17d214ecde"], "extra_info": {}}, "c3338335-2ade-40f6-92b9-b5aa56433aa4": {"doc_ids": ["e391ebdd-3d65-48a1-861c-65776bdff53f"], "extra_info": {}}, "b9ab4fb9-f341-47df-9d86-42a6f565a1ca": {"doc_ids": ["06f05b4d-a4eb-4587-94ab-54854d624f50"], "extra_info": {}}, "0131f74a-7f00-454d-b249-edb01211b270": {"doc_ids": ["2a8e3297-b022-496b-ba46-bd734b9a133a"], "extra_info": {}}, "5f864fa1-42ae-4deb-b41d-0f810e1abb04": {"doc_ids": ["816f5c2e-1389-41a9-8988-751c161ceb71"], "extra_info": {}}, "8410bc92-0872-44d1-a21f-e53a0a8084fd": {"doc_ids": ["4f213565-c113-43d0-9b21-64a42df79b0b"], "extra_info": {}}, "bbe8c3a1-9065-46a8-b0ac-7c70a9c57093": {"doc_ids": ["2591b56e-9a75-442e-b921-fd290e32e4ea"], "extra_info": {}}, "dfc35ed4-8b1f-4070-8587-aecf08e752b5": {"doc_ids": ["7287b834-279f-479b-b3cc-ea6d0b686bb8"], "extra_info": {}}, "3f847a75-c249-4a09-836a-63c53edfb0b8": {"doc_ids": ["f7bb44a9-b6e8-4def-96b1-13becac0d3cb"], "extra_info": {}}, "3f54e163-e4bc-4955-9267-478dd82b4952": {"doc_ids": ["6149579e-d50c-4156-8149-695d2f0da6cf"], "extra_info": {}}, "c3f1d4fa-4236-4854-9c0e-ffb05e47ab88": {"doc_ids": ["de1536c8-5099-46b2-8b14-f2308cfd15be"], "extra_info": {}}, "4982be47-220e-4c3a-a4ab-7c228b5f64dc": {"doc_ids": ["51bffc9e-a39f-49fd-8ce8-7b829707e35e"], "extra_info": {}}, "fff8be58-a74a-489e-996e-aa329f897d9b": {"doc_ids": ["b9717575-b758-44fe-ba2f-a8350a188b9e"], "extra_info": {}}, "2d192661-f6ff-4b76-9058-34bdf05761b2": {"doc_ids": ["5a0813ef-8116-4b6a-92c5-e27a7f092b24"], "extra_info": {}}, "482359b2-b025-47b5-b353-c9026b88fbdc": {"doc_ids": ["be46c27c-cdbd-449d-b281-76aa03e332ed"], "extra_info": {}}, "ef8c5f66-058e-46d2-b1dc-661522aabf56": {"doc_ids": ["414bb0ea-65f3-4078-a25d-77c545a1ef4b"], "extra_info": {}}, "33860fb8-8309-4a28-a3cc-768688d604a9": {"doc_ids": ["2283d7b1-e61c-4653-9aea-2f271a563a3e"], "extra_info": {}}, "aa412820-3185-45fa-bc25-37fdc5b92838": {"doc_ids": ["be4bfbfb-280a-438b-b0f0-dbcda1b39d2f"], "extra_info": {}}, "4466ac1f-2dfd-4a21-81f6-15b1ebea3674": {"doc_ids": ["0f9670d8-480f-41e8-9571-4e94679ed520"], "extra_info": {}}, "2b06bc1c-8968-455e-8ae4-a5281b360fef": {"doc_ids": ["718a3c32-2a7e-47e6-a508-fa1484235e99"], "extra_info": {}}, "32c16837-79d5-456b-82e8-8d5697fb646e": {"doc_ids": ["2f8adb88-dca2-4bce-bf31-1b522af6ecad"], "extra_info": {}}, "1eb6c8a3-0fa7-479c-9a7d-17803e189977": {"doc_ids": ["e1bc8cf3-0634-4341-a451-290f561de2b0"], "extra_info": {}}, "96829249-2d44-45e8-a547-463ae291b704": {"doc_ids": ["bc00240c-3736-44a5-ac79-2448a31f45cb"], "extra_info": {}}, "29455fd2-d7f6-4378-973d-7d90cc31303b": {"doc_ids": ["a792345e-1360-4d9d-994f-d31680d678af"], "extra_info": {}}, "df9e2b78-62cb-4ce0-8b13-9596da33c07e": {"doc_ids": ["93481645-ba84-4f1b-a5e2-6bc297e5425f"], "extra_info": {}}, "528532d3-941b-40bc-bb21-a87f3f89e843": {"doc_ids": ["114089bb-6b9f-4344-a089-4400a4cd7ccb"], "extra_info": {}}, "09a1b9de-1548-42e9-b666-b33ddd784a5d": {"doc_ids": ["1d4fdd58-4142-46bd-9f84-1066501cd99b"], "extra_info": {}}, "28ba7f3f-c1b9-4a46-baba-d39cebcb8e9e": {"doc_ids": ["05961b69-203e-43ae-8e2f-679935c170d7"], "extra_info": {}}, "ec595bd8-ee7d-4cfd-b32e-da66fcabf45a": {"doc_ids": ["bcc7bc1a-f003-4764-82bf-0193d12fecc6"], "extra_info": {}}, "f4186876-cc32-4542-a1d1-5fe251e5eee0": {"doc_ids": ["09b7637d-6384-4b44-90eb-cfd61fc33db3"], "extra_info": {}}, "b8c4c7e4-b1d1-4e01-82b6-afabd45680af": {"doc_ids": ["41f2f310-db19-495f-9b82-4c34a0f38a50"], "extra_info": {}}, "ee41cd0e-d485-41b6-88b8-0615adfbc078": {"doc_ids": ["fc4924a3-c2dc-4282-86fc-0f022d36c530"], "extra_info": {}}, "6ccbe62f-c607-44b7-9fd1-0e1bbfb69527": {"doc_ids": ["55a456b2-c22f-4ea6-9469-7b1a1a1cbb22"], "extra_info": {}}, "4b0c1853-a4ca-4a0d-b34f-24b3336d5e73": {"doc_ids": ["69b4878b-f952-467d-be65-e3354b8f7005"], "extra_info": {}}, "29248eed-6eac-4733-adf4-dfac56258a18": {"doc_ids": ["f2e094a2-941b-4ce7-960c-af147c283bf4"], "extra_info": {}}, "a422f517-606b-442b-9a0f-541e3d12d650": {"doc_ids": ["c8207db6-402e-42bb-9614-786d57725b8a"], "extra_info": {}}, "37ec8820-9f49-4b2f-8487-03c2ea7eb4d2": {"doc_ids": ["8d2993c8-463c-4b17-bd0e-db3288deae95"], "extra_info": {}}, "de5f076b-4338-4a55-85f2-84c42797762e": {"doc_ids": ["fa80d6d2-c5fe-4ed7-b809-672d76811bee"], "extra_info": {}}, "92083c6d-a1c7-4423-8c07-e9d43603d486": {"doc_ids": ["49cfd540-8563-4396-80c9-a17281ca76e8"], "extra_info": {}}, "fc4cb2bf-54b1-4cf1-a0a1-5ad4c93f6dbd": {"doc_ids": ["5a338ee1-95bb-4bd3-a181-2e5224836a46"], "extra_info": {}}, "3ec1a921-4acc-4391-9d64-70e1678bb70d": {"doc_ids": ["564da7f2-d0e3-45c3-a5bf-c980db0da36e"], "extra_info": {}}, "bc4fb7b7-df38-444c-b862-1b950c9fade4": {"doc_ids": ["3cde85af-64f0-4757-af2d-6300ced79930"], "extra_info": {}}, "5d68115f-96ca-4936-b3c7-74b9f1d60096": {"doc_ids": ["4a392f2e-9c74-4da2-bacb-b13ba29b91a3"], "extra_info": {}}, "2b61c3d8-ee1c-4560-b21d-0fe469bd0f2f": {"doc_ids": ["f444cb44-5c94-446d-9f71-a4e75787d942"], "extra_info": {}}, "3bc5e304-82ab-4712-a8f3-4499d3b43643": {"doc_ids": ["4da04bb1-75b9-40f7-8e6a-4a0046520155"], "extra_info": {}}, "635bf8a3-d21e-4c4d-aa36-45bf126018e3": {"doc_ids": ["fd7890b4-97c9-4eac-9b3c-a1eced6d70ba"], "extra_info": {}}, "9b01fb8e-2518-4e7b-9132-dc625df874a5": {"doc_ids": ["353b2628-d652-417b-a97c-a16857f6a94d"], "extra_info": {}}, "c0332bdf-7601-4b92-be55-738055f7f538": {"doc_ids": ["cb145650-1a07-41c2-8bb2-7d2c47ee6462"], "extra_info": {}}, "78e6f5cc-382a-47db-a820-6500eabe4388": {"doc_ids": ["9222a1bb-2ec9-4af2-980b-f1edbe0b4305"], "extra_info": {}}, "d3152062-230b-4c6b-9eb7-76e65d1b0196": {"doc_ids": ["0febcfd4-721a-48ce-a60e-364c6779defd"], "extra_info": {}}, "464a62c6-0ae4-4a09-b08a-3d3400fe48e0": {"doc_ids": ["fdf5ab63-3285-4fb9-9227-1830fe69fcf0"], "extra_info": {}}, "a80b27a0-7386-4bde-81db-8f9d5a8063f3": {"doc_ids": ["d6957582-12fe-40b3-abbb-0f5c220c5948"], "extra_info": {}}, "314468db-88d5-499c-9184-fa047bb50a9c": {"doc_ids": ["0404ee00-fbcb-4be5-bd9c-813538cca4a4"], "extra_info": {}}, "5c7b8178-1276-4f29-999e-e90cffaa4371": {"doc_ids": ["b9083c4f-a8f4-4aa2-8be6-6a2a1e02a4e7"], "extra_info": {}}, "39ab9096-240c-4dfe-9f5b-e2cf1ea7a326": {"doc_ids": ["e0e35d51-9376-47ec-8717-e9d25720e85f"], "extra_info": {}}, "de179760-36f1-467c-abae-dbe9e281b20a": {"doc_ids": ["6be95b81-fabe-44a8-87aa-ab3007dcf54a"], "extra_info": {}}, "24bcce7a-10d6-4636-8835-bf9902a2c2b2": {"doc_ids": ["7e4add9f-7855-41ab-bc9c-c6cbfdca0c17"], "extra_info": {}}, "d4e8f040-7f2c-48de-91ec-768a9a7fc92d": {"doc_ids": ["dfb155ee-b45f-40cf-abaa-e203368ccc20"], "extra_info": {}}, "d9c50519-44ce-40b7-8d71-3e7696e23169": {"doc_ids": ["e54c3bd8-5c04-4bd5-8f38-cb8d6c68d6fb"], "extra_info": {}}, "6ddbad0f-78bd-4c37-b410-c1807a498ecf": {"doc_ids": ["2efd8fcf-d67b-460f-9f53-90cb76c3eb42"], "extra_info": {}}, "d91affbe-7afe-454c-95e1-5e4c31102413": {"doc_ids": ["ca434ecd-3fa1-48d2-b582-358641e5e8ae"], "extra_info": {}}, "7cda03cb-4d25-4f0a-ac76-29a6b4a1c650": {"doc_ids": ["884a25c5-6c84-437e-9b04-2652cd1b05e2"], "extra_info": {}}, "bdde51ca-ec79-4b3d-a255-71aca643a708": {"doc_ids": ["1e040288-8cb8-4d52-b56e-6a59ef3c03da"], "extra_info": {}}, "ad23926d-9e15-48ae-97e2-dce20cef5193": {"doc_ids": ["b2b88e06-ea6f-41fa-8449-90d382cfa1cc"], "extra_info": {}}, "b77f9edf-7dba-47cc-bedf-97510554aaf6": {"doc_ids": ["ab749fe2-a01f-46c4-8c2f-a35380b0b1a7"], "extra_info": {}}, "fb8c1c6f-89b7-42ec-82cc-ad7def8915ca": {"doc_ids": ["2622841f-d329-412a-af65-bee6443301c1"], "extra_info": {}}, "4d8cc184-cfb9-4b85-a112-6b0f4f75d520": {"doc_ids": ["74906d56-fffa-40e7-bca6-681dc226a9ea"], "extra_info": {}}, "6fd92e3d-4ef7-4c17-8086-29da7a14a205": {"doc_ids": ["8f33848e-564f-4ebd-b9ec-79a34d79a58a"], "extra_info": {}}, "28bc469f-1271-484b-a3b1-604e8d7728ef": {"doc_ids": ["7fba70df-407b-4ab1-a522-e0da9950c6d5"], "extra_info": {}}, "e5232443-99cc-49d6-b355-aeafc9ac6d9b": {"doc_ids": ["1f627210-df9b-44e1-a905-cbfa3b833b6c"], "extra_info": {}}, "76d1af34-31fa-4897-b1af-ade4d0310ff6": {"doc_ids": ["6fdd4c7d-cdf3-4462-8d7e-0f3fb923b5eb"], "extra_info": {}}, "a02d4b5d-0a47-48e6-b326-34383214a156": {"doc_ids": ["f28091c4-aff5-4a48-8518-605883333786"], "extra_info": {}}, "ccf43b44-db36-498f-ab8d-72e5b4f74f7b": {"doc_ids": ["5b97a494-f3c2-45fd-8b5f-5ff218a4ec5a"], "extra_info": {}}, "c58962f2-6d6e-4015-b59e-d096954f8424": {"doc_ids": ["b63c6a83-de90-416a-aa53-b9c328617c3b"], "extra_info": {}}, "600f88ea-66a9-4424-aedd-943712ba9c5a": {"doc_ids": ["ded2e9a6-ef95-43be-87e2-9227cb1bdb2a"], "extra_info": {}}, "2a69d1ec-4b09-4d09-b4ca-16be643faf22": {"doc_ids": ["6dcd0992-a9c9-413f-a15a-87df2ef6e9b1"], "extra_info": {}}, "2aea2173-26fa-4de2-b15f-8e977322dcaa": {"doc_ids": ["44dfba42-53a3-4b83-ba1c-027c7bbe597b"], "extra_info": {}}, "f52a23c6-0f46-4878-97c5-21834789748b": {"doc_ids": ["c0e598d5-a09f-4da7-a720-a81427dbb9c1"], "extra_info": {}}, "62411fdb-4bd5-4d1e-acfe-a2b7d86afb21": {"doc_ids": ["78f51487-51af-4daf-a9c2-6524c42eca04"], "extra_info": {}}, "22d932e2-0133-44a5-8c4f-edc46ac69cb3": {"doc_ids": ["a80bf28c-2e01-48f8-87c3-c69cbada69c8"], "extra_info": {}}, "54dd75a3-9ce8-4959-bb07-45d5c2363a0b": {"doc_ids": ["3ca1c72c-fe1c-457f-abfe-3f7ab1214f4e"], "extra_info": {}}, "30361869-3185-4e0f-af29-c866d7ddcf22": {"doc_ids": ["c7d5f6b3-7062-4f0b-9bf4-df5452f7a8c5"], "extra_info": {}}, "3cda91a2-269e-47b6-ae87-b2ca335fdc3a": {"doc_ids": ["cf3be81e-82bf-490e-9b72-968d88334bc5"], "extra_info": {}}, "7b59ebee-ff08-4dae-ae61-86596c04f0b6": {"doc_ids": ["a24f0ebc-23ad-41b7-80d4-211acefc3f7b"], "extra_info": {}}, "8a2fa8bb-14e4-48e8-a733-349f8cb91e5c": {"doc_ids": ["8d5fe856-19ea-4265-a13b-54f9a04e0f56"], "extra_info": {}}, "399f65fa-63c4-4d44-a458-b47dd8fc666d": {"doc_ids": ["a8b3f668-087b-4fa3-b9b8-2bd1a6a10210"], "extra_info": {}}, "13508d43-153f-4c09-9f17-1ea07fe6190f": {"doc_ids": ["17d030fb-4e7f-40e9-8dfc-f4e50a925048"], "extra_info": {}}, "c36d01de-f694-4fc6-a364-8e3d15c5e1a2": {"doc_ids": ["1d9fc99d-fe46-4db5-b783-01eeb84d9cfc"], "extra_info": {}}, "1f35b895-e184-4819-8372-fcc26c248eef": {"doc_ids": ["7e085521-ad64-4d51-907d-fa679fc682d5"], "extra_info": {}}, "e36dda78-0a4d-4cff-8faa-3b1b7d99d176": {"doc_ids": ["60c57da6-c438-442b-b963-ef15c8b5c190"], "extra_info": {}}, "0decf9c1-23bd-479b-ac7f-3e4909a8dbea": {"doc_ids": ["5b3e12cb-17e4-4e6f-a0aa-8f5c584365a2"], "extra_info": {}}, "f42f6e3a-b94d-4ec6-8849-442bd4150082": {"doc_ids": ["d968534c-11e2-47e1-83f0-7223297ec686"], "extra_info": {}}, "5e24f85e-fd1c-40d7-8155-2bc8cf6dbe46": {"doc_ids": ["44f32fc5-0f81-4726-a430-210215598d07", "d2436ae2-beb9-41b0-a224-6c85f830f846"], "extra_info": {}}, "1dcc5f25-5cea-4c28-96b0-855bc0bf7ab1": {"doc_ids": ["1417c6d2-51cd-462d-9c9d-c18f11f3c337"], "extra_info": {}}, "bf41b39c-cf3a-4fcf-8620-bd592e617f8a": {"doc_ids": ["a2090b78-5c81-4310-a6b4-1f4826399b37", "43915f52-f078-4567-bc8b-a50f65437baa", "afa3dec8-db24-44f4-b409-90a2187e9935"], "extra_info": {}}, "1b39d59a-701d-4ac2-b298-916d5a46cc9f": {"doc_ids": ["a8083994-6c5c-4849-bf4d-1fb447ad9f6e"], "extra_info": {}}, "074934b3-7540-45c4-a34c-0a74a6ea9678": {"doc_ids": ["9d685139-471d-4da7-8798-ead4c3a30acb"], "extra_info": {}}, "1e21dbe2-3613-4336-8bf9-cda84a9ee3d0": {"doc_ids": ["f129a839-06d6-4875-bf8d-e3de20e34869"], "extra_info": {}}, "f7453658-ea72-4bf3-b1bc-c8c61368543b": {"doc_ids": ["0a6b3f70-b103-490d-babb-638d866192b5"], "extra_info": {}}, "084fe246-0032-48a1-811f-c4f5f726acb2": {"doc_ids": ["2f4bec7a-45fe-4e31-b6df-f5625f011431"], "extra_info": {}}, "bdc3ef0f-3d61-441a-ac95-10dcf14779dc": {"doc_ids": ["26eace89-25bc-4a6a-b774-febffad8cd82"], "extra_info": {}}, "76593497-7a61-44f0-884d-1cd6d8011b60": {"doc_ids": ["01f25a36-0f7a-4846-bf78-7085ebd9c91e"], "extra_info": {}}, "ca31a339-378b-46c5-86fa-f70aacb529f8": {"doc_ids": ["b0e1b43c-a272-4a42-888e-197a9eae281e"], "extra_info": {}}, "ddae4f08-d1cd-468c-9d82-bdb3aa996bfa": {"doc_ids": ["a63ac02f-bc4b-432d-8622-c70b807cc27f"], "extra_info": {}}, "d20a5861-9dfd-4512-8921-bf4ccff1cd0a": {"doc_ids": ["422a91b3-65f2-4ffc-83ea-0bae72e36d3b"], "extra_info": {}}, "ea55f3f5-cc26-4a77-834a-0ecaf25e78c7": {"doc_ids": ["391f0c52-05b7-49bd-a64e-d2aaf36629c5"], "extra_info": {}}, "32c15dcc-d719-48e3-8a47-1dc2fd7e3e3b": {"doc_ids": ["9e7d5f2c-fd47-4624-b05c-ba04de157294"], "extra_info": {}}, "9c4c9204-08a8-4f68-9e7e-ed65c28ae00e": {"doc_ids": ["360b4132-d33e-402a-8c1c-c8c98c0de717"], "extra_info": {}}, "8294ba6e-b813-49ec-89c4-ca9bfef8eab3": {"doc_ids": ["2c325ac0-6c62-430c-aecd-f8da9c4c8dcf"], "extra_info": {}}, "69e06097-7a69-4178-9fc6-a3e6b7619e0e": {"doc_ids": ["245ed105-20f0-4c61-9652-d066e52a07fd"], "extra_info": {}}, "80be6656-f922-4e0c-be06-b181be357347": {"doc_ids": ["a2dfc354-e042-4324-a5e3-ee757300456e"], "extra_info": {}}, "91a4469f-c365-45e9-b93c-1fed5d0091c5": {"doc_ids": ["268fd373-0e07-4f11-9f53-6ebe528daf17"], "extra_info": {}}, "85df7906-10a2-4c85-8d5c-c5bff903eb21": {"doc_ids": ["bbcf3cc8-1f0b-4397-ba17-8aec7c9396b2"], "extra_info": {}}, "5b040e50-b341-4b9d-8464-740db2bce610": {"doc_ids": ["519b7b2e-c08d-4fb0-8f0e-5149550e2da8"], "extra_info": {}}, "5d19d1a3-ef65-4a04-9d53-ba3ad26d89d3": {"doc_ids": ["25ddce80-0767-46f2-a083-1b1fe86243e9"], "extra_info": {}}, "228a903c-770a-48f6-8656-bb641b735031": {"doc_ids": ["4e44ba04-63bf-4ae2-9b2a-6df29d115ff4"], "extra_info": {}}, "6f9e8176-7bbf-471f-a531-50558efcb973": {"doc_ids": ["9e26b319-2c54-4887-8ad7-e0a14a6b1a5e"], "extra_info": {}}, "84636044-f482-4299-95ef-cd11a3778d57": {"doc_ids": ["85344793-965e-49c9-b8f5-433917072eb2"], "extra_info": {}}, "9e0df448-0e49-4a58-9688-4a619a52682c": {"doc_ids": ["c6c6a3e1-4624-4576-8538-6b125c23f1f8"], "extra_info": {}}, "883d7a47-a5d8-4550-ad08-0fb7c636e1a9": {"doc_ids": ["7bf78801-4499-4fdc-be01-f109c93a9414"], "extra_info": {}}, "d571f5ab-a1d7-4ff7-b2a7-365256c56a62": {"doc_ids": ["dcac5974-6946-4688-ad00-d7e0ab79382e"], "extra_info": {}}, "49ca5cae-a400-4bee-a971-8677047ef459": {"doc_ids": ["5a9fdd64-02b6-4b70-8409-e256dedff314"], "extra_info": {}}, "eefa2431-1f72-4987-8c4d-af5db0af3436": {"doc_ids": ["5dbd453e-dfd6-44fe-8506-6bb51bd0796f"], "extra_info": {}}, "32f6d3b0-dc03-4bb8-ae45-2b6b391bdb45": {"doc_ids": ["be290f6d-369b-40c3-a4e4-ee83c3113859"], "extra_info": {}}, "4a28e09c-a123-47d1-a7ed-2156fb4a9e56": {"doc_ids": ["99839779-bb5b-403d-bff6-45125ea2b67c"], "extra_info": {}}, "6d251701-c3eb-4641-bf13-37f61e22ad28": {"doc_ids": ["0f0da1ce-9419-45a8-938e-bd51fab26b80"], "extra_info": {}}, "7eb393ae-e10b-447e-9004-30f5733f2f54": {"doc_ids": ["9210c69b-eeeb-42f1-bca5-0db669ac3726"], "extra_info": {}}, "8b5e710a-0004-4b41-be55-e4f1387f7a86": {"doc_ids": ["0175dfdc-91ab-42e1-84e3-7bfd1e44edc8"], "extra_info": {}}, "1aed152d-a210-4124-931d-fd5f9c302e59": {"doc_ids": ["ff20376e-a0ef-4687-abfe-6d85e4698498"], "extra_info": {}}, "1fbaa9c6-55cb-41b7-b4a0-468d6b05634c": {"doc_ids": ["e5673f51-e27e-40c4-b44f-d25aeb011c6d"], "extra_info": {}}, "cdb55de7-f71b-4cac-a1c3-cb5f24d1c365": {"doc_ids": ["1d18b58b-c308-43dc-b0ee-33d91da94252"], "extra_info": {}}, "d24619ce-8b30-42c8-9934-ca6c33dd2e6f": {"doc_ids": ["da0f4bf5-fe4d-44be-9f67-6d09def7e7ed"], "extra_info": {}}, "8a1ef665-146b-4d21-a039-10771e83bf41": {"doc_ids": ["7645ed15-a932-496c-a422-832a9c3fbb2b"], "extra_info": {}}, "19d4deb6-6683-484d-88d0-1131f2fbc216": {"doc_ids": ["602e7225-8872-487c-abef-2a14fe5cc8e6"], "extra_info": {}}, "fd442170-c614-449c-9060-75569e08767e": {"doc_ids": ["7773dd60-314d-4ef0-8ad2-69cbcc114322"], "extra_info": {}}, "7b26534b-7226-4301-94cd-131655f96310": {"doc_ids": ["518dfff3-bd7e-46bd-a370-fc6e3bdcecf4"], "extra_info": {}}, "184dfea6-674b-40d5-9bba-00aabfdbbe77": {"doc_ids": ["016e7c62-af41-4d80-8e11-1b01419606f6"], "extra_info": {}}, "47859c0e-bcb7-44af-bc0c-5332d02e9042": {"doc_ids": ["56f71d68-588f-41df-b735-ebfd6802d53e"], "extra_info": {}}, "78cacd3f-ceb6-469c-b180-2e454f47906b": {"doc_ids": ["a546422e-2189-4c3d-8464-2ca5f03b2f48"], "extra_info": {}}, "0d7952c2-b040-4b3a-9ac8-f41316999168": {"doc_ids": ["4f6bc843-904e-4f2d-b4b3-f13d560f521f"], "extra_info": {}}, "9e5b374a-7350-4bed-aa79-90347b432c94": {"doc_ids": ["d1e1d171-7925-4f8c-9aee-c15ee79d6ff3"], "extra_info": {}}, "8bb3f53c-c879-4934-9de7-3ef90cdeee6e": {"doc_ids": ["f599d3a1-3114-4264-af57-f565692703f9"], "extra_info": {}}, "c540eb63-ff4c-48c2-a7ff-a0778c54486e": {"doc_ids": ["fb20a7f9-807e-4151-b7c9-1a4aea17ed55"], "extra_info": {}}, "b2446e6f-d5e0-4c31-820a-5ae996921571": {"doc_ids": ["ede988f0-374d-4009-83e7-317f174af24c"], "extra_info": {}}, "ed13d6cd-2525-43ab-9d13-6c7561d84493": {"doc_ids": ["6bba2efa-bcb0-4075-bad9-abd72fbeaa5b"], "extra_info": {}}, "7d625ab5-5385-4d31-9c9e-2fadfe519fe1": {"doc_ids": ["7b8e9e95-f95c-488f-8434-ec57622d1901"], "extra_info": {}}, "290ee3e6-9a6a-4b91-a3a2-ffb85d561896": {"doc_ids": ["c33e3b59-4dac-4ed7-8726-df37db548638"], "extra_info": {}}, "cd481830-eca5-4f27-88d4-e3b0f3a9c9fa": {"doc_ids": ["e91792ff-0c66-4873-bf49-1f4ee434c9c7"], "extra_info": {}}, "7af792b9-ca80-478f-9409-b6f2ce6a11dd": {"doc_ids": ["44726e6a-1517-4935-b3ce-bb58e5d90994"], "extra_info": {}}, "da1f0b1b-0c84-4d21-9465-9d3bebc182e7": {"doc_ids": ["4f3a8ce5-17ec-4381-b00b-79aa6e97fdb2"], "extra_info": {}}, "6d4e6100-04fe-40cd-ba8a-8aaecbeef9af": {"doc_ids": ["7bb760df-c7da-4bca-bde0-1673e76fb318", "60a267b7-169e-423f-9841-5e5ef726f076"], "extra_info": {}}, "dd695a6c-7f70-40c4-8789-86dd3af727c0": {"doc_ids": ["8cccd77b-f1cd-46f5-92dd-9c5b6a574e5a"], "extra_info": {}}, "1c117f25-4ece-4b66-b14e-69408b02928a": {"doc_ids": ["51e4b525-0884-439d-99c5-e4ab0c1010ed"], "extra_info": {}}, "c48dc9dd-aac6-46f8-bc8e-26ec3f77ddbb": {"doc_ids": ["aab3f92a-cbb6-4247-b572-d385f629db8a"], "extra_info": {}}, "1909c798-ae88-443d-b7ee-d7f9ac2f820b": {"doc_ids": ["f3e579ed-75ad-48e6-b0af-46fe5d30faa7"], "extra_info": {}}, "7e9ede49-f923-4460-8c28-c6be1a876c2f": {"doc_ids": ["f7e217cc-9cb1-4cfb-82e1-32b56f824da3"], "extra_info": {}}, "64dd360a-d3f1-417d-87e9-422cd0da13da": {"doc_ids": ["9a03c141-f5ca-415f-af18-5336403955ea"], "extra_info": {}}, "ded880db-84d7-41d1-b57a-254e64eb03d8": {"doc_ids": ["e4ee87e6-64a7-4cf7-82e7-fa6fe5374af7"], "extra_info": {}}, "99091625-b68a-4829-8e62-4ca0d9d1b226": {"doc_ids": ["31b81a9a-4b8c-45cd-85a6-24b07d118c06"], "extra_info": {}}, "6380944e-6722-4673-b2fe-19babf9c6bef": {"doc_ids": ["b37c8ef2-6820-489b-8ac6-0226467171f0"], "extra_info": {}}, "67ac6720-232e-448c-beec-9c6c86c19c74": {"doc_ids": ["7994f0b7-3796-4d9c-85af-80e49fdee035"], "extra_info": {}}, "3dbb50c9-b4c4-4ab5-827b-d5ac576c812a": {"doc_ids": ["f29cfe10-df2f-49be-8877-3eaf58a42cbe"], "extra_info": {}}, "a3dfdfc2-d0d3-4949-8754-dd78d3ee355d": {"doc_ids": ["33543272-296a-46a3-aa3e-d3d0c078faef"], "extra_info": {}}, "a427153b-3821-49c7-bd47-55d004472d7f": {"doc_ids": ["519c7cd7-deae-4128-94d2-a38187fb4bd0"], "extra_info": {}}, "b3fc7d0c-a894-4362-b8d4-d798b845d5ce": {"doc_ids": ["e7dc9d8c-0d30-4122-bb15-e36bdecdc5dc"], "extra_info": {}}, "17a02afb-21c1-410c-8c21-b9bb4f6f44dd": {"doc_ids": ["304c57af-7394-4d42-87e8-0a34929dd796"], "extra_info": {}}, "566eaffa-4346-41e5-9fa5-d02ae478e049": {"doc_ids": ["c76ee1dc-8fda-4d5a-bb46-2f05d9be2048"], "extra_info": {}}, "bbc64c2d-8646-4e41-b7cd-ffffd0e65616": {"doc_ids": ["d6e5f82c-8afa-4410-bfd2-c0f5f54ac549"], "extra_info": {}}, "23028639-7754-485d-ae96-debf811fe9d8": {"doc_ids": ["111743cd-b1d4-4091-9517-73ba62a41d63"], "extra_info": {}}, "27e5896f-c2c8-41dd-baeb-bc35b78a4964": {"doc_ids": ["f1c5e974-978d-415d-8dbc-64838198ed34"], "extra_info": {}}, "4865069c-a78a-4b62-8870-8e6950d965ce": {"doc_ids": ["0b005e26-6aee-4568-89e7-c339c363cae6"], "extra_info": {}}, "1bb596d0-e9c2-470b-8e59-4f1a8abf4b7e": {"doc_ids": ["de83e0e3-fcba-4096-ab72-e93d0c817865"], "extra_info": {}}, "43da827b-cc90-45b9-af46-de5dfaba1fbb": {"doc_ids": ["d363c1d5-7f07-4d65-abec-a896bd539aa2"], "extra_info": {}}, "6816907c-bd57-4261-9a32-5b3f2fcf6dd6": {"doc_ids": ["db2c2a45-9d2e-4e9e-b701-1338a7ea60f8"], "extra_info": {}}, "c80da1fa-6222-4dee-aeac-23bf74194d9b": {"doc_ids": ["35fe173d-f240-4c7c-9673-0bf2089c6d81"], "extra_info": {}}, "314263eb-7a32-4cfb-abd9-cf508d7d28c3": {"doc_ids": ["baeebca7-ae49-4533-9622-2733a195ecfb"], "extra_info": {}}, "66451282-083c-4663-b240-deaa2e5d1896": {"doc_ids": ["6ca82379-ca90-47c1-9766-36177a54fd77"], "extra_info": {}}, "58625cbf-d2c4-48a0-ad02-83b06153c409": {"doc_ids": ["1b3d93a5-ec3a-4704-b6d8-815ae663faa4"], "extra_info": {}}, "4e86bd02-dd1c-4c11-95ad-ca947b49b30f": {"doc_ids": ["0c92341d-569f-43b2-8e0d-33edc428d2ec"], "extra_info": {}}, "321e2a20-7675-40d8-b51e-d532a1092821": {"doc_ids": ["93017111-f625-47f6-955a-5ac529d10860"], "extra_info": {}}, "d3c1d79b-b236-415f-a790-25da8640ea5b": {"doc_ids": ["2c667993-f991-4008-815f-1832f35a9107"], "extra_info": {}}, "fa978c6b-6d35-46aa-9b87-9cb5c6dbd969": {"doc_ids": ["ccab170e-dc33-4349-870f-9ae2703f41b5"], "extra_info": {}}, "7dc66e51-14fc-48c4-be39-3fdc0d12e950": {"doc_ids": ["c3b1199d-927c-4f48-8966-1126babe6a98"], "extra_info": {}}, "744922ec-9e6a-45e4-aa82-83b5b133d924": {"doc_ids": ["3e3c2318-b9fe-4dab-b96d-5f707dcf0bda"], "extra_info": {}}, "094c1eef-bf04-4550-9310-5ef4757bcdd1": {"doc_ids": ["218ee187-cb06-471a-ada8-e532b4ebef8e"], "extra_info": {}}, "06a1345e-48c0-40b0-b35e-2cbb389e81e2": {"doc_ids": ["39599c6f-2c15-4455-be3b-ccb52538ea43"], "extra_info": {}}, "ff6d4719-6e4d-472f-8866-0bc917f7d988": {"doc_ids": ["bb50b8e5-49bc-4d58-942b-db080250e72f"], "extra_info": {}}, "64509b96-6c87-435b-a5e2-d5838b1dd525": {"doc_ids": ["288ce556-e2cf-453a-9bec-26a527c5b5eb"], "extra_info": {}}, "f11da7a0-2c05-470a-b402-a9aab16a8b6b": {"doc_ids": ["53e5cf56-3161-4a85-96bc-770fcc6e25d8"], "extra_info": {}}, "8f2a2635-20d9-46a2-91d5-844b7c62519a": {"doc_ids": ["3c4937bf-edbb-48cd-b183-fbcb2d83201e"], "extra_info": {}}, "f73a9593-5224-44ed-bd00-5c2dcd420b0b": {"doc_ids": ["a3e815fb-0793-407f-84e7-e8e1b7ce2f51"], "extra_info": {}}, "4ba368c7-fd83-44d2-a9e3-fce946819c6a": {"doc_ids": ["dcdbd115-1657-453c-b646-12d7c74e7bb2"], "extra_info": {}}, "2bd41d16-0667-4ba8-b730-ca9a65222220": {"doc_ids": ["e73b7bbb-36b5-41cf-b451-661eccad3ae7"], "extra_info": {}}, "71451cab-5fcc-47d8-ad30-58e27cbd6e00": {"doc_ids": ["914911ea-104b-4eb4-9997-5e5e62ce90f6"], "extra_info": {}}, "9344601a-4276-448f-9de7-89f987b786e6": {"doc_ids": ["c31931bf-daea-48d0-9868-c1bb9b6fbee3", "60c1970b-1eaa-40ce-8568-3e170a29369b"], "extra_info": {}}, "f0018629-aa45-4b70-b59f-42884725aa01": {"doc_ids": ["ea456ade-cbbe-4d71-9c5e-46982c71f49a"], "extra_info": {}}, "68376670-ad8b-4fa3-8dce-33fa372c44a0": {"doc_ids": ["10512caf-9615-464b-88aa-65d016542c30"], "extra_info": {}}, "117a4e26-abba-4415-a119-6c5488c2db0b": {"doc_ids": ["a120454d-a516-48ec-92de-437fe2049b25", "5073e8b3-520a-432b-a7ea-31f2010d2acf"], "extra_info": {}}, "d587a149-8d1f-4335-9e0a-282bcb59014b": {"doc_ids": ["065d6e37-0389-46f8-bdd7-8e90f2b8be43", "92bc3cb8-846c-4303-9b0d-da1a9114d0f1"], "extra_info": {}}, "68153e60-bf78-48fc-8d9d-dca458e6ee9b": {"doc_ids": ["8cc11796-f540-4a50-ad60-a87b43d513a5"], "extra_info": {}}, "d19d3da6-099d-4fc5-8334-f24219dad542": {"doc_ids": ["aa04f68b-ea79-4091-9126-7c9a0ad10546"], "extra_info": {}}, "41f05fd5-b18a-4cc3-b09b-89b4288b237b": {"doc_ids": ["f7e17ee5-d1d3-41b7-9a8a-2ebf4549fd7d"], "extra_info": {}}, "004273ed-9969-4452-a051-f661a501f7b3": {"doc_ids": ["208ebd50-d6e9-4a4b-b378-93f032771f87"], "extra_info": {}}, "1f17ec0a-ed05-409d-bb2b-d1d26bfbe7c6": {"doc_ids": ["15fbc4ce-7cf4-4ce7-a0f0-81914d613de2"], "extra_info": {}}, "136747d6-2d9b-4e02-adf6-4649bc9bd02c": {"doc_ids": ["fd9b2669-8ed4-42dc-a1d5-da40b096d354"], "extra_info": {}}, "4008a406-b6e5-4c82-ac2f-5cb975bdcb59": {"doc_ids": ["36dcaa6f-2e5c-42f1-842b-b469dfec64bc"], "extra_info": {}}, "ddd25c5c-ee33-4a1a-9b77-aa37e84b6ad7": {"doc_ids": ["baa61102-3de7-4260-97b7-04960231ce5c"], "extra_info": {}}, "b12fb077-4187-467e-9e81-4c860f7a50dd": {"doc_ids": ["570dd69c-c269-4264-a6fa-2e8f1f4971f9"], "extra_info": {}}, "78a7021a-ab06-46d8-80aa-42aa6533a511": {"doc_ids": ["395114b4-a9b4-477b-9dc0-f293a6034feb"], "extra_info": {}}, "5a620005-b083-4b74-9166-c192eea712ef": {"doc_ids": ["e684f512-1a03-4d79-8939-3815c4300b54"], "extra_info": {}}, "729d1764-401c-4bf9-9fca-9d2ac4cdc48c": {"doc_ids": ["ebd36a78-967c-4bc3-b645-5be64d08039b"], "extra_info": {}}, "319976d3-0944-4e42-83aa-660e4b53e28c": {"doc_ids": ["0aa21cd3-65df-4465-9e79-cc15f2f4104d"], "extra_info": {}}, "c1332201-3272-4c9b-afb9-0d679e36d22a": {"doc_ids": ["e97b5c3c-6120-4950-9e92-a3a627ade833"], "extra_info": {}}, "8e4419b6-5584-40ee-aa34-f33a7580ce93": {"doc_ids": ["0c9e2255-8137-4c62-9640-eedca97a76a3"], "extra_info": {}}, "425d2acb-225b-4363-a9cd-80aa741a12ce": {"doc_ids": ["61e3f52b-c6a9-40a0-a9f4-210e69afb9a6"], "extra_info": {}}, "74c93c81-9bdc-4d76-abc7-422a2a3b2da6": {"doc_ids": ["370d24b3-da77-4a51-8d0d-2d8c8fa329d3", "f20bc99b-7cda-42b5-b3a7-89eddf792090"], "extra_info": {}}, "1affa2f0-8940-4201-bcf2-8d5e83dfb859": {"doc_ids": ["761ee269-03a4-4be8-8187-ba632fb6124d"], "extra_info": {}}, "aaaa2579-0099-411d-afac-6f80bf3a9c73": {"doc_ids": ["694368ff-1b11-47ac-8bef-470b9cfd73c0"], "extra_info": {}}, "c98e50d0-1999-484f-9d5a-054aeb3a3284": {"doc_ids": ["4c0c472f-9c78-4113-bac6-a2c142f37b81"], "extra_info": {}}, "a6668007-c8d2-4949-ac10-9cfe48732f2c": {"doc_ids": ["849d5761-7653-4ddd-bdbb-899409fec252"], "extra_info": {}}, "53ee57af-c5d0-4f0e-bfc8-4cfbae125f7a": {"doc_ids": ["72b799e4-b3c9-4fc8-a0ad-e9f3eb702740"], "extra_info": {}}, "357833bc-6454-415a-b9df-3b7fa9b835a2": {"doc_ids": ["bb9d5e63-18a1-4b67-b2c6-fb65193a4a49"], "extra_info": {}}, "c9f46c1f-5e38-469a-a891-4fbb8822c628": {"doc_ids": ["e8ae2bc6-35a4-4589-9059-1c261a20b6d5"], "extra_info": {}}, "66002699-0984-471a-9c11-ad465ad51ff5": {"doc_ids": ["ea591c76-3c27-4ce0-b903-435e6d63f52b"], "extra_info": {}}, "90dd0750-bcbb-4d1c-8eda-2b69f485cdbe": {"doc_ids": ["4a410add-ad39-4796-8609-5d1027f848a7", "722baf16-76c0-417e-a479-87c092a62277", "a38a784f-d8b5-47de-aca3-ed072ee21363"], "extra_info": {}}, "2fff4c5c-850a-413c-8ad6-6f91a1f4a06a": {"doc_ids": ["bce3aa62-2a98-44c7-bbd6-b59de023adf7"], "extra_info": {}}, "ab487f54-30dd-49f6-8986-01c600cf96bc": {"doc_ids": ["919b7805-0149-41c2-9bc7-651f737f43d5"], "extra_info": {}}, "1daa8e6b-c55c-49d9-a49c-916798ab0615": {"doc_ids": ["6f692f7b-5fbf-427c-9db1-5e5aeda5ddc4", "cf18ed15-3a42-4d1a-b41e-2591f02b0c93", "fba905f2-06a2-4e34-b877-84dfe8a8b7f1"], "extra_info": {}}, "eae58f4c-084d-4afa-8ecf-d782735d7bdc": {"doc_ids": ["f86d3d75-ede4-4c6e-8e31-fdb5b4ae26c2"], "extra_info": {}}, "94e2c4a8-3db2-4a09-b873-9592bc957c8b": {"doc_ids": ["9812fe1e-a51f-42d0-8ad8-05e4bd3dbd5d"], "extra_info": {}}, "ca800075-ff3a-4c2f-81f2-a988eb59be6c": {"doc_ids": ["6f5f6b61-f7ff-44b4-b0fb-93ed40a5b812"], "extra_info": {}}, "14cc388f-8fcf-45e3-95c1-fc3bb8364424": {"doc_ids": ["3c8cc045-900f-4cef-a40f-f35337ab6192"], "extra_info": {}}, "1ac635cf-91f6-4da8-aea2-5e651de9e824": {"doc_ids": ["6458d844-4b2e-46dd-a543-416f1130703f"], "extra_info": {}}, "ae5c7ef0-578e-47c8-b72b-d15ccd90c34b": {"doc_ids": ["140d1dbc-c0a5-49f4-a864-c5a9cd35d5c1"], "extra_info": {}}, "685fa6da-14e4-408c-a555-ef0ad539dd1c": {"doc_ids": ["e882f680-0624-4b2c-b88c-7be92c72572e"], "extra_info": {}}, "4163b22f-91bd-42d1-879e-18bf056ab8a7": {"doc_ids": ["47bd05b1-6683-4959-af0e-6cdd9cd99a1e"], "extra_info": {}}, "7c8775ff-46b8-4888-9436-fabaabf740e1": {"doc_ids": ["9c1de593-9875-46ae-aacb-6e4eb41488b7"], "extra_info": {}}, "087f0b1a-a6b5-409b-b30f-ee2af80687ab": {"doc_ids": ["02b65357-586a-46bf-8c8c-6c0b20c86128"], "extra_info": {}}, "1862086e-6f60-42e1-94e4-430d7d42dd71": {"doc_ids": ["e865aede-17d3-4657-af05-09f27a3ad50c"], "extra_info": {}}, "98014916-1d82-43df-b8df-3c9fe3ea96ff": {"doc_ids": ["f92d9c7e-3c10-489a-ad61-fa78d5aa925a", "424537c2-990a-48d1-945d-467151de05e6"], "extra_info": {}}, "7da4226b-d4a5-413a-9c00-29f4dfcc3c94": {"doc_ids": ["9c851ee5-256e-4ae5-b728-11b8dfd7634f"], "extra_info": {}}, "2c88e603-4b57-4071-afcf-3bc559d981b7": {"doc_ids": ["2d6fcb7a-43f7-471e-b89f-c746cc7c914d"], "extra_info": {}}, "906a6d5c-31d4-40d6-8d2e-6b376231a80a": {"doc_ids": ["8efb4ba1-534a-48a2-9526-6e1bd5ec3c47", "3e0f5c7d-1499-49d2-a125-c905a32cd639", "2a6a4d0a-198b-42dc-8e66-b57e17280b7f"], "extra_info": {}}, "1643f25b-bf8d-4019-a251-aad866b37a36": {"doc_ids": ["d5b681a6-3923-4d2f-81e4-171f8932bd4f"], "extra_info": {}}, "a0ea7eea-2101-4f3d-a946-468ad4ad58bb": {"doc_ids": ["14eb1aef-2190-4085-8b91-74d270a2349d"], "extra_info": {}}, "4a925ab7-8475-48cb-ba0e-a7072a5fc3c6": {"doc_ids": ["27618d07-ce5f-4f9d-9c36-3971f75950cb", "835f2f0c-ddb4-4244-84fc-3b7088d6acb3", "18f87ee0-0851-4d26-9eb7-6c9a6286e5bc"], "extra_info": {}}, "0a4b4bbc-1134-4f2c-8da5-79e8cd8c71f4": {"doc_ids": ["5f355cb6-731d-4175-b4bf-6f8e39e000a0"], "extra_info": {}}, "66a9ebb8-2d7d-4033-944f-31dfa035e3f4": {"doc_ids": ["5e08349a-fb36-4990-b6cc-ec00517f6cd9"], "extra_info": {}}, "7f36b59e-7a17-4a2a-9c87-d2c46ce144b5": {"doc_ids": ["e2c10ae7-4391-461e-af2f-1b10610c4688"], "extra_info": {}}, "fee04062-d9e9-4f4e-93b3-0b3c0b7fd57a": {"doc_ids": ["96225bdf-9956-4e65-99a6-d9ef34e41676"], "extra_info": {}}, "d4eedcf5-8f83-4f80-99bd-760fb2e0a8f5": {"doc_ids": ["5c6c28e3-6719-4d2e-883f-7f2b29dd3921"], "extra_info": {}}, "8eac5dbe-53b8-494d-acfc-2d24367a9cb0": {"doc_ids": ["63f2a70d-b1bb-4073-8cd0-c5ea6fe4039b"], "extra_info": {}}, "50a69a24-dd76-4846-b447-9e97b867e21e": {"doc_ids": ["f0872759-3614-4332-ac74-eaed71a29c9f"], "extra_info": {}}, "73f32951-5420-4e3e-959b-c1e71c864935": {"doc_ids": ["640c4f9c-613a-401b-a11a-9b0fd1254400"], "extra_info": {}}, "e7009818-9d87-4b7d-b982-10ca75472538": {"doc_ids": ["2363ae16-c968-4dc0-8c13-a65f2944ff36"], "extra_info": {}}, "8a2aa7c1-5de2-4928-9b30-79be88185d29": {"doc_ids": ["6b62e60c-f904-46f4-8977-445abb028091"], "extra_info": {}}, "77e6d8b0-5302-4c9a-9962-bba9057c5ab9": {"doc_ids": ["2ffae7a9-2fd9-4e76-bf41-38eb7c22eadd"], "extra_info": {}}, "f0bbbd54-e161-42dc-9909-5ce62ec548c5": {"doc_ids": ["09443a1f-4958-4b00-8149-8a211c93d123"], "extra_info": {}}, "dd9de3db-2f73-4134-a1f2-617527889fef": {"doc_ids": ["71bc19a5-d4b2-4dfb-a813-75e5cfbb1497"], "extra_info": {}}, "67a7f74a-fde1-4848-aab8-bcf4f864ec87": {"doc_ids": ["c6f490c0-acc3-476b-8730-f28773cc2272"], "extra_info": {}}, "bf952e89-2bf4-4e7b-8cf0-a415f6c47131": {"doc_ids": ["f765e994-25ae-4ac4-8970-6be95a4c8349"], "extra_info": {}}, "87cb8f35-a6fe-40fd-825f-c0bdc8106d9f": {"doc_ids": ["9a2e7cc4-1a03-4596-bd09-495f62b75938"], "extra_info": {}}, "bc08992e-48bb-4a55-b67d-7090e3ca19e1": {"doc_ids": ["d9852cf3-5ba7-4313-a173-9e94b45c192a"], "extra_info": {}}, "5f99039b-bd1d-492a-ac3e-ee13446c2aba": {"doc_ids": ["0bd39614-36c2-42d3-befc-06268c1a1cdc"], "extra_info": {}}, "6d98052f-d0e6-4008-b556-ba61fa988b34": {"doc_ids": ["b1dc4539-5b2a-468e-a2bc-599f8bd9602b"], "extra_info": {}}, "9d62d84f-c614-419d-94aa-bbf2d17c286f": {"doc_ids": ["cefbf7a8-6b14-46e6-9539-ed31ee66633d"], "extra_info": {}}, "6df539b4-6169-4b1a-97fe-d94cd4f30b6c": {"doc_ids": ["63cad995-66d6-43b8-8b24-6a0cb5b64859", "8c079ec6-d4ff-48ca-b6ab-b6f562a23b8a"], "extra_info": {}}, "4e1c1368-a13d-4141-b95e-c4d5f873ff2e": {"doc_ids": ["4d94d903-2506-4918-bc38-924812f2c211"], "extra_info": {}}, "812c67d5-460e-4140-9919-e587f6e1b2b7": {"doc_ids": ["9f42217d-9e8f-4576-a5f9-90931ec18875"], "extra_info": {}}, "385198ab-f870-4641-a034-2f70e4751837": {"doc_ids": ["acbf7747-2575-4b28-99fc-053af0aac528"], "extra_info": {}}, "893c6a73-f294-40c8-a873-ddf955c97f2d": {"doc_ids": ["9358824d-159c-4714-b9f6-cc0238b33f88"], "extra_info": {}}, "5ce2d8e3-7f30-41aa-a707-422cdc8b0611": {"doc_ids": ["7dd1e180-6cba-4f25-8347-d48f033c8e33"], "extra_info": {}}, "95606300-9d38-4d08-a9fc-8efcecfd23fd": {"doc_ids": ["efd3ab6f-b65d-4bdd-8c58-1381683947be"], "extra_info": {}}, "52d4800f-bc8c-40dc-abeb-c4a3480935cd": {"doc_ids": ["6ecb030c-4719-4817-8854-f261ea4edc32"], "extra_info": {}}, "1a41e542-bfe1-4d1e-8a63-f439a06cbe05": {"doc_ids": ["068f4680-cf34-4921-a4d8-43038e557013"], "extra_info": {}}, "14cecdfb-e805-46f5-b10c-5ea85f917aeb": {"doc_ids": ["05a301aa-7061-442d-95d6-83ab460334a7"], "extra_info": {}}, "5c683314-9def-4a78-bcf3-3acb4dc17cd2": {"doc_ids": ["75c238fc-67a0-4207-90ce-f3f8c446177f"], "extra_info": {}}, "012b16a2-c3fb-4a62-94de-048dafb57f42": {"doc_ids": ["510a45e3-7324-497d-b2a5-4adf3ae351e9"], "extra_info": {}}, "42838366-923c-407b-a86e-097ffaafadca": {"doc_ids": ["2f237685-74d4-4a7e-b6d2-bb1b59046321"], "extra_info": {}}, "47210118-0b8d-4f8d-b208-fdbeb9f15966": {"doc_ids": ["e2813c8b-e846-47ac-aaa1-9dde8079d6d8"], "extra_info": {}}, "9f6b21a5-6667-4cd3-a4d6-beb87e76fd13": {"doc_ids": ["1d4b9382-f628-44e1-8635-b76b426150ed"], "extra_info": {}}, "01c33ddd-f6f4-4a73-beb1-f908cf6653f4": {"doc_ids": ["3af76dec-1b35-481a-ad58-e137b565fd7d"], "extra_info": {}}, "8dde4150-f9da-4f16-8d50-64f5293024be": {"doc_ids": ["9184b44e-0730-4d2d-b76e-6b57b7140983"], "extra_info": {}}, "0941afea-38a8-4271-88ff-736791108b69": {"doc_ids": ["05e78092-cebe-4215-b28f-38625a1d3a09"], "extra_info": {}}, "85d72868-6376-4f0b-a46b-da2d05c9ee2a": {"doc_ids": ["c3be207e-6294-4cfb-827c-05c705709fdf", "a1bfb670-b317-46e1-a17b-aeb4387f7a06", "7ba320ad-220f-4464-9b8c-f53269644fa7", "00f9d740-be97-4eb5-b5cf-6b48c753f58c", "c06466da-640a-4406-8f94-c49150026062"], "extra_info": {}}, "13859f3f-3f3d-44c9-a6fd-6f063e83df0a": {"doc_ids": ["78962a5b-a98c-41f1-8222-5e1fe06e7414"], "extra_info": {}}, "09071137-bd59-40ab-bcb3-5a5d24805ab6": {"doc_ids": ["a865d871-ce12-4a69-95f9-830cf95048a3"], "extra_info": {}}, "bfdc3d4c-1178-4d6b-8273-4ab7ea6a0ae3": {"doc_ids": ["cf4c8b54-d9cf-478d-898c-a474c19626c4"], "extra_info": {}}, "813a9462-ef0f-46c9-8d02-20a748d3d629": {"doc_ids": ["bc4382a1-f3b2-418a-8686-effa957f26b6"], "extra_info": {}}, "f7e6d588-eee7-440e-943e-bca5582980f0": {"doc_ids": ["beb8ee1b-2a29-4a7a-9c70-b1072cdbc2a4"], "extra_info": {}}, "9d223b58-94e9-4466-ad0c-87839b0051eb": {"doc_ids": ["74830b19-fd7e-425f-bb2d-4a446bd8c522"], "extra_info": {}}, "b26551e5-eb1e-434b-97fd-6ca38a4b89e0": {"doc_ids": ["44c9ec2f-f7b4-410e-b057-aa50eef896bc"], "extra_info": {}}, "6547f6fb-0665-4ce6-9b79-34954f7c2a1a": {"doc_ids": ["05f7a5c7-8347-4eb0-a339-ac065a983f81"], "extra_info": {}}, "84fea6b6-a3df-4f8f-b367-3957138deac4": {"doc_ids": ["47a0c3a4-423b-4026-a7a4-ef91d8874436"], "extra_info": {}}, "2b826aca-59cb-4b74-a6b6-ab2ac9192d2e": {"doc_ids": ["4a570697-4ceb-47e4-8058-6dc713eec23a"], "extra_info": {}}, "0abafea0-5d4c-4370-9132-53f5737b6d5c": {"doc_ids": ["950757bc-476d-49b4-a0cf-3c5824406bcc"], "extra_info": {}}, "eccb97c4-2bcd-439c-b0dd-a86f559ce4bf": {"doc_ids": ["0d52ba0f-2dba-4bfb-98a2-236fa147adb1"], "extra_info": {}}, "3c168929-5d1f-44f4-ac01-11a65e852015": {"doc_ids": ["ed8455e9-8b56-431a-a35e-f16befb74d7e"], "extra_info": {}}, "6e604459-6531-455c-ad69-65f7761cab99": {"doc_ids": ["2e07f0b5-c38e-456f-bfc3-bb329e50770c"], "extra_info": {}}, "2fc2ffac-6f4d-47cb-9c98-da88d7ede231": {"doc_ids": ["c9d1b47f-74bf-4756-98ae-0b1d85d7880c"], "extra_info": {}}, "023b8181-ac92-4c27-9781-76ca52c2f8d7": {"doc_ids": ["40e6c752-7d55-49e7-b733-3eedd0a05807"], "extra_info": {}}, "ff8a5cda-9e4d-49d4-b1f2-83f421093075": {"doc_ids": ["f75fa702-4ccc-40a7-8d78-ff4ad06fad3f"], "extra_info": {}}, "dbd76588-bba0-49e2-8692-fa5c1a46c360": {"doc_ids": ["7b84c757-2073-456d-9903-c10a7a8bac61"], "extra_info": {}}, "a427716c-0e64-4e9f-854d-af1e8f9d0958": {"doc_ids": ["181c5b35-e490-4707-ba02-5722e589d823"], "extra_info": {}}, "c3969c8a-2398-4920-a5a4-37a344863fc7": {"doc_ids": ["b03e1baf-421b-4e4f-b8f1-a99034a9e8f6"], "extra_info": {}}, "174919ae-0848-4af3-916d-575d0472267a": {"doc_ids": ["151de829-a402-4137-b1f6-c847d2b61a7c"], "extra_info": {}}, "05ceede8-e65f-4061-8d62-bc7d51904657": {"doc_ids": ["9b9386f3-4831-404b-9171-145120d1679c"], "extra_info": {}}, "ab43ff75-1814-4397-ac42-fc58a215c673": {"doc_ids": ["49917dca-60b0-4472-b86f-2c31a0855068"], "extra_info": {}}, "ce388f5d-1102-4812-b6cd-8e04cbd37f76": {"doc_ids": ["a22a4875-6b65-4c6d-a523-a0994e0fcca4"], "extra_info": {}}, "21bb3c55-f515-441d-9468-371840d43113": {"doc_ids": ["7e9c3597-8f6d-4b13-934e-3e83c2057445"], "extra_info": {}}, "91cc3a09-f8bd-4a7b-8d50-2f35a6233a7c": {"doc_ids": ["631d50f0-40b4-4d09-b9bc-c66b8a2a3e19"], "extra_info": {}}, "f37cdc50-bed5-43f3-8bc8-e48418d264ff": {"doc_ids": ["01b4f08d-5398-45ba-b597-88a20cdd6f47"], "extra_info": {}}, "2de384b8-23c6-4e42-92a6-492e23422c31": {"doc_ids": ["c1523ce5-f585-4023-8dae-472fc56c235c"], "extra_info": {}}, "9a43479a-b1b4-43d6-985b-f8e5b6fb41e9": {"doc_ids": ["ea24c53a-b5d2-49b7-a9d4-5fac13f4cf31"], "extra_info": {}}, "9d2dab06-3dc4-401f-ad8c-9d32e9709ded": {"doc_ids": ["b4aa846f-0a39-4b9f-a47d-e97088e11533"], "extra_info": {}}, "9ac15ac2-f46e-4984-88e6-6ae350330bb5": {"doc_ids": ["8a9c877d-711d-41a9-99ab-e758b2587cb5"], "extra_info": {}}, "924da62a-aaeb-47ff-8acf-c8dd15b063bc": {"doc_ids": ["e3486861-9b36-40aa-8339-564143dcf2cf"], "extra_info": {}}, "d7ec9cf6-65f6-4174-ae43-0922a3394670": {"doc_ids": ["d3ef65fd-12d9-4587-86ba-b4fe870f5d8a"], "extra_info": {}}, "676d8269-66c3-4cd5-9bba-a955ca564115": {"doc_ids": ["d7bd2fc5-bf52-47b6-8e83-6552e311e785"], "extra_info": {}}, "a5877363-4d15-4d73-8e04-d4a6e97d211a": {"doc_ids": ["d7a0db4f-56fc-4fae-8556-42df62d6d8f2"], "extra_info": {}}, "17bd61e7-0654-4a47-a97e-f812218d35d1": {"doc_ids": ["90d56980-48a1-42a3-a2d9-dc1f1f67abf1"], "extra_info": {}}, "7df94b79-6f03-4bc5-acce-7f3cf5f68605": {"doc_ids": ["50c85f6f-70ae-45d8-ad86-6da34b0229ec"], "extra_info": {}}, "063762fe-2274-47f0-a715-0be672971055": {"doc_ids": ["1a38b4cb-95eb-42d4-8c47-af911c31beef"], "extra_info": {}}, "d3be3cbe-ef6f-4acd-baa4-761564685da6": {"doc_ids": ["607a202c-c01e-48a2-ad12-38cfd9602a71"], "extra_info": {}}, "d51b39fc-0e1f-4ce9-9d94-99c72fb5473e": {"doc_ids": ["3779cbe3-e90c-4ad0-9d3d-3234a71a13bf"], "extra_info": {}}, "370c37c4-6380-4876-9239-7edd31278eea": {"doc_ids": ["8b06ec3b-f6b1-47a0-9d46-838b633ad369"], "extra_info": {}}, "49d3424d-68ba-47a0-a9b1-784dee3d5bfe": {"doc_ids": ["f552fd06-02fa-4830-832e-f57c6ae58d06"], "extra_info": {}}, "1f3d11fe-535d-42dd-ac7e-d08768a040c0": {"doc_ids": ["ffe673dd-67de-47c5-bc44-3c8db0d8098a"], "extra_info": {}}, "6e3cb22d-07ea-40ba-90c5-0b521d59715d": {"doc_ids": ["65a52edd-ea72-49c2-a1d1-2f3b1af01d29"], "extra_info": {}}, "c7100ffd-9d3d-40f6-8868-73b9d6fcdc6e": {"doc_ids": ["b3e15362-a41b-438e-a522-9ffcb899f9ee"], "extra_info": {}}, "756ea687-1802-45b2-b54b-1e4372fabfaf": {"doc_ids": ["214858a3-6254-4b85-9a4a-c9867385bb7f"], "extra_info": {}}, "af923364-82d2-4714-8db8-cbb12845cbe7": {"doc_ids": ["8199fd02-73ee-479e-87e4-46db5155337d"], "extra_info": {}}, "ce79de12-7223-4fa2-9f79-aa918ac3818e": {"doc_ids": ["9b022e6b-4577-453b-9b39-613388e1e2fe"], "extra_info": {}}}}